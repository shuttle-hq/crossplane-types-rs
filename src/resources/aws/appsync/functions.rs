// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// FunctionSpec defines the desired state of Function
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "appsync.aws.upbound.io",
    version = "v1beta2",
    kind = "Function",
    plural = "functions"
)]
#[kube(status = "FunctionStatus")]
pub struct FunctionSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<FunctionDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: FunctionForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<FunctionInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<FunctionProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<FunctionPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<FunctionWriteConnectionSecretToRef>,
}

/// FunctionSpec defines the desired state of Function
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionForProvider {
    /// ID of the associated AppSync API.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiId")]
    #[builder(default, setter(strip_option))]
    pub api_id: Option<String>,
    /// Reference to a GraphQLAPI in appsync to populate apiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiIdRef")]
    #[builder(default, setter(strip_option))]
    pub api_id_ref: Option<FunctionForProviderApiIdRef>,
    /// Selector for a GraphQLAPI in appsync to populate apiId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "apiIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub api_id_selector: Option<FunctionForProviderApiIdSelector>,
    /// The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub code: Option<String>,
    /// Function data source name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSource"
    )]
    #[builder(default, setter(strip_option))]
    pub data_source: Option<String>,
    /// Reference to a Datasource in appsync to populate dataSource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSourceRef"
    )]
    #[builder(default, setter(strip_option))]
    pub data_source_ref: Option<FunctionForProviderDataSourceRef>,
    /// Selector for a Datasource in appsync to populate dataSource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSourceSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub data_source_selector: Option<FunctionForProviderDataSourceSelector>,
    /// Function description.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Version of the request mapping template. Currently the supported value is 2018-05-29. Does not apply when specifying code.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "functionVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub function_version: Option<String>,
    /// Maximum batching size for a resolver. Valid values are between 0 and 2000.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxBatchSize"
    )]
    #[builder(default, setter(strip_option))]
    pub max_batch_size: Option<f64>,
    /// Function name. The function name does not have to be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requestMappingTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub request_mapping_template: Option<String>,
    /// Function response mapping template.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "responseMappingTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub response_mapping_template: Option<String>,
    /// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See runtime Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub runtime: Option<FunctionForProviderRuntime>,
    /// Describes a Sync configuration for a resolver. See sync_config Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "syncConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub sync_config: Option<FunctionForProviderSyncConfig>,
}

/// Reference to a GraphQLAPI in appsync to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionForProviderApiIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FunctionForProviderApiIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionForProviderApiIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FunctionForProviderApiIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FunctionForProviderApiIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionForProviderApiIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionForProviderApiIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a GraphQLAPI in appsync to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionForProviderApiIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FunctionForProviderApiIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionForProviderApiIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FunctionForProviderApiIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FunctionForProviderApiIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionForProviderApiIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionForProviderApiIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Datasource in appsync to populate dataSource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionForProviderDataSourceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FunctionForProviderDataSourceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionForProviderDataSourceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FunctionForProviderDataSourceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FunctionForProviderDataSourceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionForProviderDataSourceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionForProviderDataSourceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Datasource in appsync to populate dataSource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionForProviderDataSourceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FunctionForProviderDataSourceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionForProviderDataSourceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FunctionForProviderDataSourceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FunctionForProviderDataSourceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionForProviderDataSourceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionForProviderDataSourceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See runtime Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionForProviderRuntime {
    /// The name of the runtime to use. Currently, the only allowed value is APPSYNC_JS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The version of the runtime to use. Currently, the only allowed version is 1.0.0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimeVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_version: Option<String>,
}

/// Describes a Sync configuration for a resolver. See sync_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionForProviderSyncConfig {
    /// Conflict Detection strategy to use. Valid values are NONE and VERSION.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conflictDetection"
    )]
    #[builder(default, setter(strip_option))]
    pub conflict_detection: Option<String>,
    /// Conflict Resolution strategy to perform in the event of a conflict. Valid values are NONE, OPTIMISTIC_CONCURRENCY, AUTOMERGE, and LAMBDA.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conflictHandler"
    )]
    #[builder(default, setter(strip_option))]
    pub conflict_handler: Option<String>,
    /// Lambda Conflict Handler Config when configuring LAMBDA as the Conflict Handler. See lambda_conflict_handler_config Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lambdaConflictHandlerConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub lambda_conflict_handler_config:
        Option<FunctionForProviderSyncConfigLambdaConflictHandlerConfig>,
}

/// Lambda Conflict Handler Config when configuring LAMBDA as the Conflict Handler. See lambda_conflict_handler_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionForProviderSyncConfigLambdaConflictHandlerConfig {
    /// ARN for the Lambda function to use as the Conflict Handler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lambdaConflictHandlerArn"
    )]
    #[builder(default, setter(strip_option))]
    pub lambda_conflict_handler_arn: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionInitProvider {
    /// ID of the associated AppSync API.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiId")]
    #[builder(default, setter(strip_option))]
    pub api_id: Option<String>,
    /// Reference to a GraphQLAPI in appsync to populate apiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiIdRef")]
    #[builder(default, setter(strip_option))]
    pub api_id_ref: Option<FunctionInitProviderApiIdRef>,
    /// Selector for a GraphQLAPI in appsync to populate apiId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "apiIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub api_id_selector: Option<FunctionInitProviderApiIdSelector>,
    /// The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub code: Option<String>,
    /// Function data source name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSource"
    )]
    #[builder(default, setter(strip_option))]
    pub data_source: Option<String>,
    /// Reference to a Datasource in appsync to populate dataSource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSourceRef"
    )]
    #[builder(default, setter(strip_option))]
    pub data_source_ref: Option<FunctionInitProviderDataSourceRef>,
    /// Selector for a Datasource in appsync to populate dataSource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSourceSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub data_source_selector: Option<FunctionInitProviderDataSourceSelector>,
    /// Function description.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Version of the request mapping template. Currently the supported value is 2018-05-29. Does not apply when specifying code.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "functionVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub function_version: Option<String>,
    /// Maximum batching size for a resolver. Valid values are between 0 and 2000.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxBatchSize"
    )]
    #[builder(default, setter(strip_option))]
    pub max_batch_size: Option<f64>,
    /// Function name. The function name does not have to be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requestMappingTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub request_mapping_template: Option<String>,
    /// Function response mapping template.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "responseMappingTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub response_mapping_template: Option<String>,
    /// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See runtime Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub runtime: Option<FunctionInitProviderRuntime>,
    /// Describes a Sync configuration for a resolver. See sync_config Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "syncConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub sync_config: Option<FunctionInitProviderSyncConfig>,
}

/// Reference to a GraphQLAPI in appsync to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionInitProviderApiIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FunctionInitProviderApiIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionInitProviderApiIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FunctionInitProviderApiIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FunctionInitProviderApiIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionInitProviderApiIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionInitProviderApiIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a GraphQLAPI in appsync to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionInitProviderApiIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FunctionInitProviderApiIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionInitProviderApiIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FunctionInitProviderApiIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FunctionInitProviderApiIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionInitProviderApiIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionInitProviderApiIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Datasource in appsync to populate dataSource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionInitProviderDataSourceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FunctionInitProviderDataSourceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionInitProviderDataSourceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FunctionInitProviderDataSourceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FunctionInitProviderDataSourceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionInitProviderDataSourceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionInitProviderDataSourceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Datasource in appsync to populate dataSource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionInitProviderDataSourceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FunctionInitProviderDataSourceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionInitProviderDataSourceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FunctionInitProviderDataSourceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FunctionInitProviderDataSourceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionInitProviderDataSourceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionInitProviderDataSourceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See runtime Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionInitProviderRuntime {
    /// The name of the runtime to use. Currently, the only allowed value is APPSYNC_JS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The version of the runtime to use. Currently, the only allowed version is 1.0.0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimeVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_version: Option<String>,
}

/// Describes a Sync configuration for a resolver. See sync_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionInitProviderSyncConfig {
    /// Conflict Detection strategy to use. Valid values are NONE and VERSION.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conflictDetection"
    )]
    #[builder(default, setter(strip_option))]
    pub conflict_detection: Option<String>,
    /// Conflict Resolution strategy to perform in the event of a conflict. Valid values are NONE, OPTIMISTIC_CONCURRENCY, AUTOMERGE, and LAMBDA.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conflictHandler"
    )]
    #[builder(default, setter(strip_option))]
    pub conflict_handler: Option<String>,
    /// Lambda Conflict Handler Config when configuring LAMBDA as the Conflict Handler. See lambda_conflict_handler_config Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lambdaConflictHandlerConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub lambda_conflict_handler_config:
        Option<FunctionInitProviderSyncConfigLambdaConflictHandlerConfig>,
}

/// Lambda Conflict Handler Config when configuring LAMBDA as the Conflict Handler. See lambda_conflict_handler_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionInitProviderSyncConfigLambdaConflictHandlerConfig {
    /// ARN for the Lambda function to use as the Conflict Handler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lambdaConflictHandlerArn"
    )]
    #[builder(default, setter(strip_option))]
    pub lambda_conflict_handler_arn: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FunctionProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FunctionProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FunctionProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<FunctionPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<FunctionPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FunctionPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FunctionPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FunctionPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// FunctionStatus defines the observed state of Function.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<FunctionStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionStatusAtProvider {
    /// ID of the associated AppSync API.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiId")]
    #[builder(default, setter(strip_option))]
    pub api_id: Option<String>,
    /// ARN of the Function object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub code: Option<String>,
    /// Function data source name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataSource"
    )]
    #[builder(default, setter(strip_option))]
    pub data_source: Option<String>,
    /// Function description.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Unique ID representing the Function object.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "functionId"
    )]
    #[builder(default, setter(strip_option))]
    pub function_id: Option<String>,
    /// Version of the request mapping template. Currently the supported value is 2018-05-29. Does not apply when specifying code.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "functionVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub function_version: Option<String>,
    /// API Function ID (Formatted as ApiId-FunctionId)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Maximum batching size for a resolver. Valid values are between 0 and 2000.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxBatchSize"
    )]
    #[builder(default, setter(strip_option))]
    pub max_batch_size: Option<f64>,
    /// Function name. The function name does not have to be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requestMappingTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub request_mapping_template: Option<String>,
    /// Function response mapping template.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "responseMappingTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub response_mapping_template: Option<String>,
    /// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See runtime Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub runtime: Option<FunctionStatusAtProviderRuntime>,
    /// Describes a Sync configuration for a resolver. See sync_config Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "syncConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub sync_config: Option<FunctionStatusAtProviderSyncConfig>,
}

/// Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See runtime Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionStatusAtProviderRuntime {
    /// The name of the runtime to use. Currently, the only allowed value is APPSYNC_JS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The version of the runtime to use. Currently, the only allowed version is 1.0.0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimeVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_version: Option<String>,
}

/// Describes a Sync configuration for a resolver. See sync_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionStatusAtProviderSyncConfig {
    /// Conflict Detection strategy to use. Valid values are NONE and VERSION.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conflictDetection"
    )]
    #[builder(default, setter(strip_option))]
    pub conflict_detection: Option<String>,
    /// Conflict Resolution strategy to perform in the event of a conflict. Valid values are NONE, OPTIMISTIC_CONCURRENCY, AUTOMERGE, and LAMBDA.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conflictHandler"
    )]
    #[builder(default, setter(strip_option))]
    pub conflict_handler: Option<String>,
    /// Lambda Conflict Handler Config when configuring LAMBDA as the Conflict Handler. See lambda_conflict_handler_config Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lambdaConflictHandlerConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub lambda_conflict_handler_config:
        Option<FunctionStatusAtProviderSyncConfigLambdaConflictHandlerConfig>,
}

/// Lambda Conflict Handler Config when configuring LAMBDA as the Conflict Handler. See lambda_conflict_handler_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FunctionStatusAtProviderSyncConfigLambdaConflictHandlerConfig {
    /// ARN for the Lambda function to use as the Conflict Handler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lambdaConflictHandlerArn"
    )]
    #[builder(default, setter(strip_option))]
    pub lambda_conflict_handler_arn: Option<String>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ConnectorSpec defines the desired state of Connector
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "transfer.aws.upbound.io",
    version = "v1beta2",
    kind = "Connector",
    plural = "connectors"
)]
#[kube(status = "ConnectorStatus")]
pub struct ConnectorSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<ConnectorDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ConnectorForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<ConnectorInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<ConnectorProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<ConnectorPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<ConnectorWriteConnectionSecretToRef>,
}

/// ConnectorSpec defines the desired state of Connector
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorForProvider {
    /// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessRole"
    )]
    #[builder(default, setter(strip_option))]
    pub access_role: Option<String>,
    /// Reference to a Role in iam to populate accessRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessRoleRef"
    )]
    #[builder(default, setter(strip_option))]
    pub access_role_ref: Option<ConnectorForProviderAccessRoleRef>,
    /// Selector for a Role in iam to populate accessRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessRoleSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub access_role_selector: Option<ConnectorForProviderAccessRoleSelector>,
    /// Either SFTP or AS2 is configured.The parameters to configure for the connector object. Fields documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "as2Config")]
    #[builder(default, setter(strip_option))]
    pub as2_config: Option<ConnectorForProviderAs2Config>,
    /// The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loggingRole"
    )]
    #[builder(default, setter(strip_option))]
    pub logging_role: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Name of the security policy for the connector.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityPolicyName"
    )]
    #[builder(default, setter(strip_option))]
    pub security_policy_name: Option<String>,
    /// Either SFTP or AS2 is configured.The parameters to configure for the connector object. Fields documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sftpConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub sftp_config: Option<ConnectorForProviderSftpConfig>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// The URL of the partners AS2 endpoint or SFTP endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub url: Option<String>,
}

/// Reference to a Role in iam to populate accessRole.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorForProviderAccessRoleRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConnectorForProviderAccessRoleRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorForProviderAccessRoleRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConnectorForProviderAccessRoleRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConnectorForProviderAccessRoleRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorForProviderAccessRoleRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorForProviderAccessRoleRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate accessRole.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorForProviderAccessRoleSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConnectorForProviderAccessRoleSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorForProviderAccessRoleSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConnectorForProviderAccessRoleSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConnectorForProviderAccessRoleSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorForProviderAccessRoleSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorForProviderAccessRoleSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Either SFTP or AS2 is configured.The parameters to configure for the connector object. Fields documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorForProviderAs2Config {
    /// Specifies weather AS2 file is compressed. The valud values are ZLIB and  DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub compression: Option<String>,
    /// The algorithm that is used to encrypt the file. The valid values are AES128_CBC | AES192_CBC | AES256_CBC | NONE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionAlgorithm"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_algorithm: Option<String>,
    /// The unique identifier for the AS2 local profile.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localProfileId"
    )]
    #[builder(default, setter(strip_option))]
    pub local_profile_id: Option<String>,
    /// Used for outbound requests to determine if a partner response for transfers is synchronous or asynchronous. The valid values are SYNC and NONE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mdnResponse"
    )]
    #[builder(default, setter(strip_option))]
    pub mdn_response: Option<String>,
    /// The signing algorithm for the Mdn response. The valid values are SHA256 | SHA384 | SHA512 | SHA1 | NONE | DEFAULT.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mdnSigningAlgorithm"
    )]
    #[builder(default, setter(strip_option))]
    pub mdn_signing_algorithm: Option<String>,
    /// Used as the subject HTTP header attribute in AS2 messages that are being sent with the connector.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "messageSubject"
    )]
    #[builder(default, setter(strip_option))]
    pub message_subject: Option<String>,
    /// The unique identifier for the AS2 partner profile.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "partnerProfileId"
    )]
    #[builder(default, setter(strip_option))]
    pub partner_profile_id: Option<String>,
    /// The algorithm that is used to sign AS2 messages sent with the connector. The valid values are SHA256 | SHA384 | SHA512 | SHA1 | NONE .
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingAlgorithm"
    )]
    #[builder(default, setter(strip_option))]
    pub signing_algorithm: Option<String>,
}

/// Either SFTP or AS2 is configured.The parameters to configure for the connector object. Fields documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorForProviderSftpConfig {
    /// A list of public portion of the host key, or keys, that are used to authenticate the user to the external server to which you are connecting.(https://docs.aws.amazon.com/transfer/latest/userguide/API_SftpConnectorConfig.html)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trustedHostKeys"
    )]
    #[builder(default, setter(strip_option))]
    pub trusted_host_keys: Option<Vec<String>>,
    /// The identifier for the secret (in AWS Secrets Manager) that contains the SFTP user's private key, password, or both. The identifier can be either the Amazon Resource Name (ARN) or the name of the secret.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userSecretId"
    )]
    #[builder(default, setter(strip_option))]
    pub user_secret_id: Option<String>,
    /// Reference to a Secret in secretsmanager to populate userSecretId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userSecretIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub user_secret_id_ref: Option<ConnectorForProviderSftpConfigUserSecretIdRef>,
    /// Selector for a Secret in secretsmanager to populate userSecretId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userSecretIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub user_secret_id_selector: Option<ConnectorForProviderSftpConfigUserSecretIdSelector>,
}

/// Reference to a Secret in secretsmanager to populate userSecretId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorForProviderSftpConfigUserSecretIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConnectorForProviderSftpConfigUserSecretIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorForProviderSftpConfigUserSecretIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConnectorForProviderSftpConfigUserSecretIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConnectorForProviderSftpConfigUserSecretIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorForProviderSftpConfigUserSecretIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorForProviderSftpConfigUserSecretIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Secret in secretsmanager to populate userSecretId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorForProviderSftpConfigUserSecretIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConnectorForProviderSftpConfigUserSecretIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorForProviderSftpConfigUserSecretIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConnectorForProviderSftpConfigUserSecretIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConnectorForProviderSftpConfigUserSecretIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorForProviderSftpConfigUserSecretIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorForProviderSftpConfigUserSecretIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorInitProvider {
    /// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessRole"
    )]
    #[builder(default, setter(strip_option))]
    pub access_role: Option<String>,
    /// Reference to a Role in iam to populate accessRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessRoleRef"
    )]
    #[builder(default, setter(strip_option))]
    pub access_role_ref: Option<ConnectorInitProviderAccessRoleRef>,
    /// Selector for a Role in iam to populate accessRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessRoleSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub access_role_selector: Option<ConnectorInitProviderAccessRoleSelector>,
    /// Either SFTP or AS2 is configured.The parameters to configure for the connector object. Fields documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "as2Config")]
    #[builder(default, setter(strip_option))]
    pub as2_config: Option<ConnectorInitProviderAs2Config>,
    /// The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loggingRole"
    )]
    #[builder(default, setter(strip_option))]
    pub logging_role: Option<String>,
    /// Name of the security policy for the connector.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityPolicyName"
    )]
    #[builder(default, setter(strip_option))]
    pub security_policy_name: Option<String>,
    /// Either SFTP or AS2 is configured.The parameters to configure for the connector object. Fields documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sftpConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub sftp_config: Option<ConnectorInitProviderSftpConfig>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// The URL of the partners AS2 endpoint or SFTP endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub url: Option<String>,
}

/// Reference to a Role in iam to populate accessRole.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorInitProviderAccessRoleRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConnectorInitProviderAccessRoleRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorInitProviderAccessRoleRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConnectorInitProviderAccessRoleRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConnectorInitProviderAccessRoleRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorInitProviderAccessRoleRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorInitProviderAccessRoleRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate accessRole.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorInitProviderAccessRoleSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConnectorInitProviderAccessRoleSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorInitProviderAccessRoleSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConnectorInitProviderAccessRoleSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConnectorInitProviderAccessRoleSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorInitProviderAccessRoleSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorInitProviderAccessRoleSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Either SFTP or AS2 is configured.The parameters to configure for the connector object. Fields documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorInitProviderAs2Config {
    /// Specifies weather AS2 file is compressed. The valud values are ZLIB and  DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub compression: Option<String>,
    /// The algorithm that is used to encrypt the file. The valid values are AES128_CBC | AES192_CBC | AES256_CBC | NONE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionAlgorithm"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_algorithm: Option<String>,
    /// The unique identifier for the AS2 local profile.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localProfileId"
    )]
    #[builder(default, setter(strip_option))]
    pub local_profile_id: Option<String>,
    /// Used for outbound requests to determine if a partner response for transfers is synchronous or asynchronous. The valid values are SYNC and NONE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mdnResponse"
    )]
    #[builder(default, setter(strip_option))]
    pub mdn_response: Option<String>,
    /// The signing algorithm for the Mdn response. The valid values are SHA256 | SHA384 | SHA512 | SHA1 | NONE | DEFAULT.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mdnSigningAlgorithm"
    )]
    #[builder(default, setter(strip_option))]
    pub mdn_signing_algorithm: Option<String>,
    /// Used as the subject HTTP header attribute in AS2 messages that are being sent with the connector.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "messageSubject"
    )]
    #[builder(default, setter(strip_option))]
    pub message_subject: Option<String>,
    /// The unique identifier for the AS2 partner profile.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "partnerProfileId"
    )]
    #[builder(default, setter(strip_option))]
    pub partner_profile_id: Option<String>,
    /// The algorithm that is used to sign AS2 messages sent with the connector. The valid values are SHA256 | SHA384 | SHA512 | SHA1 | NONE .
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingAlgorithm"
    )]
    #[builder(default, setter(strip_option))]
    pub signing_algorithm: Option<String>,
}

/// Either SFTP or AS2 is configured.The parameters to configure for the connector object. Fields documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorInitProviderSftpConfig {
    /// A list of public portion of the host key, or keys, that are used to authenticate the user to the external server to which you are connecting.(https://docs.aws.amazon.com/transfer/latest/userguide/API_SftpConnectorConfig.html)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trustedHostKeys"
    )]
    #[builder(default, setter(strip_option))]
    pub trusted_host_keys: Option<Vec<String>>,
    /// The identifier for the secret (in AWS Secrets Manager) that contains the SFTP user's private key, password, or both. The identifier can be either the Amazon Resource Name (ARN) or the name of the secret.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userSecretId"
    )]
    #[builder(default, setter(strip_option))]
    pub user_secret_id: Option<String>,
    /// Reference to a Secret in secretsmanager to populate userSecretId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userSecretIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub user_secret_id_ref: Option<ConnectorInitProviderSftpConfigUserSecretIdRef>,
    /// Selector for a Secret in secretsmanager to populate userSecretId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userSecretIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub user_secret_id_selector: Option<ConnectorInitProviderSftpConfigUserSecretIdSelector>,
}

/// Reference to a Secret in secretsmanager to populate userSecretId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorInitProviderSftpConfigUserSecretIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConnectorInitProviderSftpConfigUserSecretIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorInitProviderSftpConfigUserSecretIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConnectorInitProviderSftpConfigUserSecretIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConnectorInitProviderSftpConfigUserSecretIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorInitProviderSftpConfigUserSecretIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorInitProviderSftpConfigUserSecretIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Secret in secretsmanager to populate userSecretId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorInitProviderSftpConfigUserSecretIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConnectorInitProviderSftpConfigUserSecretIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorInitProviderSftpConfigUserSecretIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConnectorInitProviderSftpConfigUserSecretIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConnectorInitProviderSftpConfigUserSecretIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorInitProviderSftpConfigUserSecretIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorInitProviderSftpConfigUserSecretIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConnectorProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConnectorProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConnectorProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<ConnectorPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<ConnectorPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConnectorPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConnectorPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConnectorPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectorPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ConnectorStatus defines the observed state of Connector.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<ConnectorStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorStatusAtProvider {
    /// The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessRole"
    )]
    #[builder(default, setter(strip_option))]
    pub access_role: Option<String>,
    /// The ARN of the connector.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Either SFTP or AS2 is configured.The parameters to configure for the connector object. Fields documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "as2Config")]
    #[builder(default, setter(strip_option))]
    pub as2_config: Option<ConnectorStatusAtProviderAs2Config>,
    /// The unique identifier for the AS2 profile or SFTP Profile.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectorId"
    )]
    #[builder(default, setter(strip_option))]
    pub connector_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// The IAM Role which is required for allowing the connector to turn on CloudWatch logging for Amazon S3 events.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loggingRole"
    )]
    #[builder(default, setter(strip_option))]
    pub logging_role: Option<String>,
    /// Name of the security policy for the connector.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityPolicyName"
    )]
    #[builder(default, setter(strip_option))]
    pub security_policy_name: Option<String>,
    /// Either SFTP or AS2 is configured.The parameters to configure for the connector object. Fields documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sftpConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub sftp_config: Option<ConnectorStatusAtProviderSftpConfig>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// The URL of the partners AS2 endpoint or SFTP endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub url: Option<String>,
}

/// Either SFTP or AS2 is configured.The parameters to configure for the connector object. Fields documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorStatusAtProviderAs2Config {
    /// Specifies weather AS2 file is compressed. The valud values are ZLIB and  DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub compression: Option<String>,
    /// The algorithm that is used to encrypt the file. The valid values are AES128_CBC | AES192_CBC | AES256_CBC | NONE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionAlgorithm"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_algorithm: Option<String>,
    /// The unique identifier for the AS2 local profile.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localProfileId"
    )]
    #[builder(default, setter(strip_option))]
    pub local_profile_id: Option<String>,
    /// Used for outbound requests to determine if a partner response for transfers is synchronous or asynchronous. The valid values are SYNC and NONE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mdnResponse"
    )]
    #[builder(default, setter(strip_option))]
    pub mdn_response: Option<String>,
    /// The signing algorithm for the Mdn response. The valid values are SHA256 | SHA384 | SHA512 | SHA1 | NONE | DEFAULT.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mdnSigningAlgorithm"
    )]
    #[builder(default, setter(strip_option))]
    pub mdn_signing_algorithm: Option<String>,
    /// Used as the subject HTTP header attribute in AS2 messages that are being sent with the connector.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "messageSubject"
    )]
    #[builder(default, setter(strip_option))]
    pub message_subject: Option<String>,
    /// The unique identifier for the AS2 partner profile.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "partnerProfileId"
    )]
    #[builder(default, setter(strip_option))]
    pub partner_profile_id: Option<String>,
    /// The algorithm that is used to sign AS2 messages sent with the connector. The valid values are SHA256 | SHA384 | SHA512 | SHA1 | NONE .
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingAlgorithm"
    )]
    #[builder(default, setter(strip_option))]
    pub signing_algorithm: Option<String>,
}

/// Either SFTP or AS2 is configured.The parameters to configure for the connector object. Fields documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConnectorStatusAtProviderSftpConfig {
    /// A list of public portion of the host key, or keys, that are used to authenticate the user to the external server to which you are connecting.(https://docs.aws.amazon.com/transfer/latest/userguide/API_SftpConnectorConfig.html)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trustedHostKeys"
    )]
    #[builder(default, setter(strip_option))]
    pub trusted_host_keys: Option<Vec<String>>,
    /// The identifier for the secret (in AWS Secrets Manager) that contains the SFTP user's private key, password, or both. The identifier can be either the Amazon Resource Name (ARN) or the name of the secret.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userSecretId"
    )]
    #[builder(default, setter(strip_option))]
    pub user_secret_id: Option<String>,
}

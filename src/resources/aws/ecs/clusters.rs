// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ClusterSpec defines the desired state of Cluster
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "ecs.aws.upbound.io",
    version = "v1beta2",
    kind = "Cluster",
    plural = "clusters"
)]
#[kube(status = "ClusterStatus")]
pub struct ClusterSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<ClusterDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ClusterForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<ClusterInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<ClusterProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<ClusterPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<ClusterWriteConnectionSecretToRef>,
}

/// ClusterSpec defines the desired state of Cluster
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProvider {
    /// Execute command configuration for the cluster. See configuration Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub configuration: Option<ClusterForProviderConfiguration>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Default Service Connect namespace. See service_connect_defaults Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceConnectDefaults"
    )]
    #[builder(default, setter(strip_option))]
    pub service_connect_defaults: Option<ClusterForProviderServiceConnectDefaults>,
    /// Configuration block(s) with cluster settings. For example, this can be used to enable CloudWatch Container Insights for a cluster. See setting Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub setting: Option<Vec<ClusterForProviderSetting>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

/// Execute command configuration for the cluster. See configuration Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderConfiguration {
    /// Details of the execute command configuration. See execute_command_configuration Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executeCommandConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub execute_command_configuration:
        Option<ClusterForProviderConfigurationExecuteCommandConfiguration>,
    /// Details of the managed storage configuration. See managed_storage_configuration Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managedStorageConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub managed_storage_configuration:
        Option<ClusterForProviderConfigurationManagedStorageConfiguration>,
}

/// Details of the execute command configuration. See execute_command_configuration Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderConfigurationExecuteCommandConfiguration {
    /// AWS Key Management Service key ID to encrypt the data between the local client and the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Log configuration for the results of the execute command actions. Required when logging is OVERRIDE. See log_configuration Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub log_configuration:
        Option<ClusterForProviderConfigurationExecuteCommandConfigurationLogConfiguration>,
    /// Log setting to use for redirecting logs for your execute command results. Valid values: NONE, DEFAULT, OVERRIDE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub logging: Option<String>,
}

/// Log configuration for the results of the execute command actions. Required when logging is OVERRIDE. See log_configuration Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderConfigurationExecuteCommandConfigurationLogConfiguration {
    /// Whether to enable encryption on the CloudWatch logs. If not specified, encryption will be disabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchEncryptionEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_encryption_enabled: Option<bool>,
    /// The name of the CloudWatch log group to send logs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchLogGroupName"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_log_group_name: Option<String>,
    /// Whether to enable encryption on the logs sent to S3. If not specified, encryption will be disabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketEncryptionEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_encryption_enabled: Option<bool>,
    /// Name of the S3 bucket to send logs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketName"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_name: Option<String>,
    /// Optional folder in the S3 bucket to place logs in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3KeyPrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_key_prefix: Option<String>,
}

/// Details of the managed storage configuration. See managed_storage_configuration Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderConfigurationManagedStorageConfiguration {
    /// AWS Key Management Service key ID for the Fargate ephemeral storage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fargateEphemeralStorageKmsKeyId"
    )]
    #[builder(default, setter(strip_option))]
    pub fargate_ephemeral_storage_kms_key_id: Option<String>,
    /// AWS Key Management Service key ID to encrypt the managed storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
}

/// Default Service Connect namespace. See service_connect_defaults Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderServiceConnectDefaults {
    /// ARN of the aws_service_discovery_http_namespace that's used when you create a service and don't specify a Service Connect configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderSetting {
    /// Name of the setting to manage. Valid values: containerInsights.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Value to assign to the setting. Valid values: enhanced, enabled, disabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProvider {
    /// Execute command configuration for the cluster. See configuration Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub configuration: Option<ClusterInitProviderConfiguration>,
    /// Default Service Connect namespace. See service_connect_defaults Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceConnectDefaults"
    )]
    #[builder(default, setter(strip_option))]
    pub service_connect_defaults: Option<ClusterInitProviderServiceConnectDefaults>,
    /// Configuration block(s) with cluster settings. For example, this can be used to enable CloudWatch Container Insights for a cluster. See setting Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub setting: Option<Vec<ClusterInitProviderSetting>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

/// Execute command configuration for the cluster. See configuration Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderConfiguration {
    /// Details of the execute command configuration. See execute_command_configuration Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executeCommandConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub execute_command_configuration:
        Option<ClusterInitProviderConfigurationExecuteCommandConfiguration>,
    /// Details of the managed storage configuration. See managed_storage_configuration Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managedStorageConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub managed_storage_configuration:
        Option<ClusterInitProviderConfigurationManagedStorageConfiguration>,
}

/// Details of the execute command configuration. See execute_command_configuration Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderConfigurationExecuteCommandConfiguration {
    /// AWS Key Management Service key ID to encrypt the data between the local client and the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Log configuration for the results of the execute command actions. Required when logging is OVERRIDE. See log_configuration Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub log_configuration:
        Option<ClusterInitProviderConfigurationExecuteCommandConfigurationLogConfiguration>,
    /// Log setting to use for redirecting logs for your execute command results. Valid values: NONE, DEFAULT, OVERRIDE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub logging: Option<String>,
}

/// Log configuration for the results of the execute command actions. Required when logging is OVERRIDE. See log_configuration Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderConfigurationExecuteCommandConfigurationLogConfiguration {
    /// Whether to enable encryption on the CloudWatch logs. If not specified, encryption will be disabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchEncryptionEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_encryption_enabled: Option<bool>,
    /// The name of the CloudWatch log group to send logs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchLogGroupName"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_log_group_name: Option<String>,
    /// Whether to enable encryption on the logs sent to S3. If not specified, encryption will be disabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketEncryptionEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_encryption_enabled: Option<bool>,
    /// Name of the S3 bucket to send logs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketName"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_name: Option<String>,
    /// Optional folder in the S3 bucket to place logs in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3KeyPrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_key_prefix: Option<String>,
}

/// Details of the managed storage configuration. See managed_storage_configuration Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderConfigurationManagedStorageConfiguration {
    /// AWS Key Management Service key ID for the Fargate ephemeral storage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fargateEphemeralStorageKmsKeyId"
    )]
    #[builder(default, setter(strip_option))]
    pub fargate_ephemeral_storage_kms_key_id: Option<String>,
    /// AWS Key Management Service key ID to encrypt the managed storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
}

/// Default Service Connect namespace. See service_connect_defaults Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderServiceConnectDefaults {
    /// ARN of the aws_service_discovery_http_namespace that's used when you create a service and don't specify a Service Connect configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderSetting {
    /// Name of the setting to manage. Valid values: containerInsights.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Value to assign to the setting. Valid values: enhanced, enabled, disabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ClusterProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ClusterProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ClusterProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<ClusterPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<ClusterPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ClusterPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ClusterPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ClusterPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ClusterStatus defines the observed state of Cluster.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<ClusterStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProvider {
    /// ARN that identifies the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Execute command configuration for the cluster. See configuration Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub configuration: Option<ClusterStatusAtProviderConfiguration>,
    /// ARN that identifies the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Default Service Connect namespace. See service_connect_defaults Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceConnectDefaults"
    )]
    #[builder(default, setter(strip_option))]
    pub service_connect_defaults: Option<ClusterStatusAtProviderServiceConnectDefaults>,
    /// Configuration block(s) with cluster settings. For example, this can be used to enable CloudWatch Container Insights for a cluster. See setting Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub setting: Option<Vec<ClusterStatusAtProviderSetting>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
}

/// Execute command configuration for the cluster. See configuration Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderConfiguration {
    /// Details of the execute command configuration. See execute_command_configuration Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executeCommandConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub execute_command_configuration:
        Option<ClusterStatusAtProviderConfigurationExecuteCommandConfiguration>,
    /// Details of the managed storage configuration. See managed_storage_configuration Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managedStorageConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub managed_storage_configuration:
        Option<ClusterStatusAtProviderConfigurationManagedStorageConfiguration>,
}

/// Details of the execute command configuration. See execute_command_configuration Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderConfigurationExecuteCommandConfiguration {
    /// AWS Key Management Service key ID to encrypt the data between the local client and the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Log configuration for the results of the execute command actions. Required when logging is OVERRIDE. See log_configuration Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub log_configuration:
        Option<ClusterStatusAtProviderConfigurationExecuteCommandConfigurationLogConfiguration>,
    /// Log setting to use for redirecting logs for your execute command results. Valid values: NONE, DEFAULT, OVERRIDE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub logging: Option<String>,
}

/// Log configuration for the results of the execute command actions. Required when logging is OVERRIDE. See log_configuration Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderConfigurationExecuteCommandConfigurationLogConfiguration {
    /// Whether to enable encryption on the CloudWatch logs. If not specified, encryption will be disabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchEncryptionEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_encryption_enabled: Option<bool>,
    /// The name of the CloudWatch log group to send logs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchLogGroupName"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_log_group_name: Option<String>,
    /// Whether to enable encryption on the logs sent to S3. If not specified, encryption will be disabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketEncryptionEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_encryption_enabled: Option<bool>,
    /// Name of the S3 bucket to send logs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketName"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_name: Option<String>,
    /// Optional folder in the S3 bucket to place logs in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3KeyPrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_key_prefix: Option<String>,
}

/// Details of the managed storage configuration. See managed_storage_configuration Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderConfigurationManagedStorageConfiguration {
    /// AWS Key Management Service key ID for the Fargate ephemeral storage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fargateEphemeralStorageKmsKeyId"
    )]
    #[builder(default, setter(strip_option))]
    pub fargate_ephemeral_storage_kms_key_id: Option<String>,
    /// AWS Key Management Service key ID to encrypt the managed storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
}

/// Default Service Connect namespace. See service_connect_defaults Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderServiceConnectDefaults {
    /// ARN of the aws_service_discovery_http_namespace that's used when you create a service and don't specify a Service Connect configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderSetting {
    /// Name of the setting to manage. Valid values: containerInsights.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Value to assign to the setting. Valid values: enhanced, enabled, disabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// TaskDefinitionSpec defines the desired state of TaskDefinition
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "ecs.aws.upbound.io",
    version = "v1beta2",
    kind = "TaskDefinition",
    plural = "taskdefinitions"
)]
#[kube(status = "TaskDefinitionStatus")]
pub struct TaskDefinitionSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<TaskDefinitionDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: TaskDefinitionForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<TaskDefinitionInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<TaskDefinitionProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<TaskDefinitionPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<TaskDefinitionWriteConnectionSecretToRef>,
}

/// TaskDefinitionSpec defines the desired state of TaskDefinition
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TaskDefinitionDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionForProvider {
    /// A list of valid container definitions provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the Task Definition Parameters section from the official Developer Guide.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerDefinitions"
    )]
    #[builder(default, setter(strip_option))]
    pub container_definitions: Option<String>,
    /// Number of cpu units used by the task. If the requires_compatibilities is FARGATE this field is required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cpu: Option<String>,
    /// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ephemeralStorage"
    )]
    #[builder(default, setter(strip_option))]
    pub ephemeral_storage: Option<TaskDefinitionForProviderEphemeralStorage>,
    /// ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub execution_role_arn: Option<String>,
    /// Reference to a Role in iam to populate executionRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub execution_role_arn_ref: Option<TaskDefinitionForProviderExecutionRoleArnRef>,
    /// Selector for a Role in iam to populate executionRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub execution_role_arn_selector: Option<TaskDefinitionForProviderExecutionRoleArnSelector>,
    /// A unique name for your task definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub family: Option<String>,
    /// Configuration block(s) with Inference Accelerators settings. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inferenceAccelerator"
    )]
    #[builder(default, setter(strip_option))]
    pub inference_accelerator: Option<Vec<TaskDefinitionForProviderInferenceAccelerator>>,
    /// IPC resource namespace to be used for the containers in the task The valid values are host, task, and none.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipcMode")]
    #[builder(default, setter(strip_option))]
    pub ipc_mode: Option<String>,
    /// Amount (in MiB) of memory used by the task. If the requires_compatibilities is FARGATE this field is required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub memory: Option<String>,
    /// Docker networking mode to use for the containers in the task. Valid values are none, bridge, awsvpc, and host.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkMode"
    )]
    #[builder(default, setter(strip_option))]
    pub network_mode: Option<String>,
    /// Process namespace to use for the containers in the task. The valid values are host and task.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pidMode")]
    #[builder(default, setter(strip_option))]
    pub pid_mode: Option<String>,
    /// Configuration block for rules that are taken into consideration during task placement. Maximum number of placement_constraints is 10. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementConstraints"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_constraints: Option<Vec<TaskDefinitionForProviderPlacementConstraints>>,
    /// Configuration block for the App Mesh proxy. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "proxyConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub proxy_configuration: Option<TaskDefinitionForProviderProxyConfiguration>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Set of launch types required by the task. The valid values are EC2 and FARGATE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiresCompatibilities"
    )]
    #[builder(default, setter(strip_option))]
    pub requires_compatibilities: Option<Vec<String>>,
    /// Configuration block for runtime_platform that containers in your task may use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimePlatform"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_platform: Option<TaskDefinitionForProviderRuntimePlatform>,
    /// Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipDestroy"
    )]
    #[builder(default, setter(strip_option))]
    pub skip_destroy: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "taskRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub task_role_arn: Option<String>,
    /// Whether should track latest ACTIVE task definition on AWS or the one created with the resource stored in state. Default is false. Useful in the event the task definition is modified outside of this resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trackLatest"
    )]
    #[builder(default, setter(strip_option))]
    pub track_latest: Option<bool>,
    /// Configuration block for volumes that containers in your task may use. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub volume: Option<Vec<TaskDefinitionForProviderVolume>>,
}

/// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionForProviderEphemeralStorage {
    /// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeInGib")]
    #[builder(default, setter(strip_option))]
    pub size_in_gib: Option<f64>,
}

/// Reference to a Role in iam to populate executionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionForProviderExecutionRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TaskDefinitionForProviderExecutionRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionForProviderExecutionRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TaskDefinitionForProviderExecutionRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TaskDefinitionForProviderExecutionRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TaskDefinitionForProviderExecutionRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TaskDefinitionForProviderExecutionRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate executionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionForProviderExecutionRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TaskDefinitionForProviderExecutionRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionForProviderExecutionRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TaskDefinitionForProviderExecutionRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TaskDefinitionForProviderExecutionRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TaskDefinitionForProviderExecutionRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TaskDefinitionForProviderExecutionRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionForProviderInferenceAccelerator {
    /// Elastic Inference accelerator device name. The deviceName must also be referenced in a container definition as a ResourceRequirement.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub device_name: Option<String>,
    /// Elastic Inference accelerator type to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceType"
    )]
    #[builder(default, setter(strip_option))]
    pub device_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionForProviderPlacementConstraints {
    /// Cluster Query Language expression to apply to the constraint. For more information, see Cluster Query Language in the Amazon EC2 Container Service Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub expression: Option<String>,
    /// Type of constraint. Use memberOf to restrict selection to a group of valid candidates. Note that distinctInstance is not supported in task definitions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Configuration block for the App Mesh proxy. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionForProviderProxyConfiguration {
    /// Name of the container that will serve as the App Mesh proxy.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerName"
    )]
    #[builder(default, setter(strip_option))]
    pub container_name: Option<String>,
    /// Set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub properties: Option<BTreeMap<String, String>>,
    /// Proxy type. The default value is APPMESH. The only supported value is APPMESH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Configuration block for runtime_platform that containers in your task may use.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionForProviderRuntimePlatform {
    /// Must be set to either X86_64 or ARM64; see cpu architecture
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cpuArchitecture"
    )]
    #[builder(default, setter(strip_option))]
    pub cpu_architecture: Option<String>,
    /// If the requires_compatibilities is FARGATE this field is required; must be set to a valid option from the operating system family in the runtime platform setting
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "operatingSystemFamily"
    )]
    #[builder(default, setter(strip_option))]
    pub operating_system_family: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionForProviderVolume {
    /// Whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch in the volume configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "configureAtLaunch"
    )]
    #[builder(default, setter(strip_option))]
    pub configure_at_launch: Option<bool>,
    /// Configuration block to configure a docker volume. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dockerVolumeConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub docker_volume_configuration:
        Option<TaskDefinitionForProviderVolumeDockerVolumeConfiguration>,
    /// Configuration block for an EFS volume. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "efsVolumeConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub efs_volume_configuration: Option<TaskDefinitionForProviderVolumeEfsVolumeConfiguration>,
    /// Configuration block for an FSX Windows File Server volume. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fsxWindowsFileServerVolumeConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub fsx_windows_file_server_volume_configuration:
        Option<TaskDefinitionForProviderVolumeFsxWindowsFileServerVolumeConfiguration>,
    /// Path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    #[builder(default, setter(strip_option))]
    pub host_path: Option<String>,
    /// Name of the volume. This name is referenced in the sourceVolume
    /// parameter of container definition in the mountPoints section.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
}

/// Configuration block to configure a docker volume. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionForProviderVolumeDockerVolumeConfiguration {
    /// If this value is true, the Docker volume is created if it does not already exist. Note: This field is only used if the scope is shared.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub autoprovision: Option<bool>,
    /// Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub driver: Option<String>,
    /// Map of Docker driver specific options.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "driverOpts"
    )]
    #[builder(default, setter(strip_option))]
    pub driver_opts: Option<BTreeMap<String, String>>,
    /// Map of custom metadata to add to your Docker volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Scope for the Docker volume, which determines its lifecycle, either task or shared.  Docker volumes that are scoped to a task are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as shared persist after the task stops.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub scope: Option<String>,
}

/// Configuration block for an EFS volume. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionForProviderVolumeEfsVolumeConfiguration {
    /// Configuration block for authorization for the Amazon EFS file system. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizationConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub authorization_config:
        Option<TaskDefinitionForProviderVolumeEfsVolumeConfigurationAuthorizationConfig>,
    /// ID of the EFS File System.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemId"
    )]
    #[builder(default, setter(strip_option))]
    pub file_system_id: Option<String>,
    /// Directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying / will have the same effect as omitting this parameter. This argument is ignored when using authorization_config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rootDirectory"
    )]
    #[builder(default, setter(strip_option))]
    pub root_directory: Option<String>,
    /// Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: ENABLED, DISABLED. If this parameter is omitted, the default value of DISABLED is used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitEncryption"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_encryption: Option<String>,
    /// Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitEncryptionPort"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_encryption_port: Option<f64>,
}

/// Configuration block for authorization for the Amazon EFS file system. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionForProviderVolumeEfsVolumeConfigurationAuthorizationConfig {
    /// Access point ID to use. If an access point is specified, the root directory value will be relative to the directory set for the access point. If specified, transit encryption must be enabled in the EFSVolumeConfiguration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessPointId"
    )]
    #[builder(default, setter(strip_option))]
    pub access_point_id: Option<String>,
    /// Whether or not to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. Valid values: ENABLED, DISABLED. If this parameter is omitted, the default value of DISABLED is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub iam: Option<String>,
}

/// Configuration block for an FSX Windows File Server volume. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionForProviderVolumeFsxWindowsFileServerVolumeConfiguration {
    /// Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizationConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub authorization_config: Option<
        TaskDefinitionForProviderVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig,
    >,
    /// The Amazon FSx for Windows File Server file system ID to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemId"
    )]
    #[builder(default, setter(strip_option))]
    pub file_system_id: Option<String>,
    /// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rootDirectory"
    )]
    #[builder(default, setter(strip_option))]
    pub root_directory: Option<String>,
}

/// Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionForProviderVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig
{
    /// The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an AWS Secrets Manager secret or AWS Systems Manager Parameter Store parameter. The ARNs refer to the stored credentials.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "credentialsParameter"
    )]
    #[builder(default, setter(strip_option))]
    pub credentials_parameter: Option<String>,
    /// A fully qualified domain name hosted by an AWS Directory Service Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub domain: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionInitProvider {
    /// A list of valid container definitions provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the Task Definition Parameters section from the official Developer Guide.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerDefinitions"
    )]
    #[builder(default, setter(strip_option))]
    pub container_definitions: Option<String>,
    /// Number of cpu units used by the task. If the requires_compatibilities is FARGATE this field is required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cpu: Option<String>,
    /// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ephemeralStorage"
    )]
    #[builder(default, setter(strip_option))]
    pub ephemeral_storage: Option<TaskDefinitionInitProviderEphemeralStorage>,
    /// ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub execution_role_arn: Option<String>,
    /// Reference to a Role in iam to populate executionRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub execution_role_arn_ref: Option<TaskDefinitionInitProviderExecutionRoleArnRef>,
    /// Selector for a Role in iam to populate executionRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub execution_role_arn_selector: Option<TaskDefinitionInitProviderExecutionRoleArnSelector>,
    /// A unique name for your task definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub family: Option<String>,
    /// Configuration block(s) with Inference Accelerators settings. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inferenceAccelerator"
    )]
    #[builder(default, setter(strip_option))]
    pub inference_accelerator: Option<Vec<TaskDefinitionInitProviderInferenceAccelerator>>,
    /// IPC resource namespace to be used for the containers in the task The valid values are host, task, and none.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipcMode")]
    #[builder(default, setter(strip_option))]
    pub ipc_mode: Option<String>,
    /// Amount (in MiB) of memory used by the task. If the requires_compatibilities is FARGATE this field is required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub memory: Option<String>,
    /// Docker networking mode to use for the containers in the task. Valid values are none, bridge, awsvpc, and host.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkMode"
    )]
    #[builder(default, setter(strip_option))]
    pub network_mode: Option<String>,
    /// Process namespace to use for the containers in the task. The valid values are host and task.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pidMode")]
    #[builder(default, setter(strip_option))]
    pub pid_mode: Option<String>,
    /// Configuration block for rules that are taken into consideration during task placement. Maximum number of placement_constraints is 10. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementConstraints"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_constraints: Option<Vec<TaskDefinitionInitProviderPlacementConstraints>>,
    /// Configuration block for the App Mesh proxy. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "proxyConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub proxy_configuration: Option<TaskDefinitionInitProviderProxyConfiguration>,
    /// Set of launch types required by the task. The valid values are EC2 and FARGATE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiresCompatibilities"
    )]
    #[builder(default, setter(strip_option))]
    pub requires_compatibilities: Option<Vec<String>>,
    /// Configuration block for runtime_platform that containers in your task may use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimePlatform"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_platform: Option<TaskDefinitionInitProviderRuntimePlatform>,
    /// Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipDestroy"
    )]
    #[builder(default, setter(strip_option))]
    pub skip_destroy: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "taskRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub task_role_arn: Option<String>,
    /// Whether should track latest ACTIVE task definition on AWS or the one created with the resource stored in state. Default is false. Useful in the event the task definition is modified outside of this resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trackLatest"
    )]
    #[builder(default, setter(strip_option))]
    pub track_latest: Option<bool>,
    /// Configuration block for volumes that containers in your task may use. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub volume: Option<Vec<TaskDefinitionInitProviderVolume>>,
}

/// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionInitProviderEphemeralStorage {
    /// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeInGib")]
    #[builder(default, setter(strip_option))]
    pub size_in_gib: Option<f64>,
}

/// Reference to a Role in iam to populate executionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionInitProviderExecutionRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TaskDefinitionInitProviderExecutionRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionInitProviderExecutionRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TaskDefinitionInitProviderExecutionRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TaskDefinitionInitProviderExecutionRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TaskDefinitionInitProviderExecutionRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TaskDefinitionInitProviderExecutionRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate executionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionInitProviderExecutionRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TaskDefinitionInitProviderExecutionRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionInitProviderExecutionRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TaskDefinitionInitProviderExecutionRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TaskDefinitionInitProviderExecutionRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TaskDefinitionInitProviderExecutionRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TaskDefinitionInitProviderExecutionRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionInitProviderInferenceAccelerator {
    /// Elastic Inference accelerator device name. The deviceName must also be referenced in a container definition as a ResourceRequirement.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub device_name: Option<String>,
    /// Elastic Inference accelerator type to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceType"
    )]
    #[builder(default, setter(strip_option))]
    pub device_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionInitProviderPlacementConstraints {
    /// Cluster Query Language expression to apply to the constraint. For more information, see Cluster Query Language in the Amazon EC2 Container Service Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub expression: Option<String>,
    /// Type of constraint. Use memberOf to restrict selection to a group of valid candidates. Note that distinctInstance is not supported in task definitions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Configuration block for the App Mesh proxy. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionInitProviderProxyConfiguration {
    /// Name of the container that will serve as the App Mesh proxy.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerName"
    )]
    #[builder(default, setter(strip_option))]
    pub container_name: Option<String>,
    /// Set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub properties: Option<BTreeMap<String, String>>,
    /// Proxy type. The default value is APPMESH. The only supported value is APPMESH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Configuration block for runtime_platform that containers in your task may use.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionInitProviderRuntimePlatform {
    /// Must be set to either X86_64 or ARM64; see cpu architecture
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cpuArchitecture"
    )]
    #[builder(default, setter(strip_option))]
    pub cpu_architecture: Option<String>,
    /// If the requires_compatibilities is FARGATE this field is required; must be set to a valid option from the operating system family in the runtime platform setting
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "operatingSystemFamily"
    )]
    #[builder(default, setter(strip_option))]
    pub operating_system_family: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionInitProviderVolume {
    /// Whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch in the volume configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "configureAtLaunch"
    )]
    #[builder(default, setter(strip_option))]
    pub configure_at_launch: Option<bool>,
    /// Configuration block to configure a docker volume. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dockerVolumeConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub docker_volume_configuration:
        Option<TaskDefinitionInitProviderVolumeDockerVolumeConfiguration>,
    /// Configuration block for an EFS volume. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "efsVolumeConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub efs_volume_configuration: Option<TaskDefinitionInitProviderVolumeEfsVolumeConfiguration>,
    /// Configuration block for an FSX Windows File Server volume. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fsxWindowsFileServerVolumeConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub fsx_windows_file_server_volume_configuration:
        Option<TaskDefinitionInitProviderVolumeFsxWindowsFileServerVolumeConfiguration>,
    /// Path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    #[builder(default, setter(strip_option))]
    pub host_path: Option<String>,
    /// Name of the volume. This name is referenced in the sourceVolume
    /// parameter of container definition in the mountPoints section.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
}

/// Configuration block to configure a docker volume. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionInitProviderVolumeDockerVolumeConfiguration {
    /// If this value is true, the Docker volume is created if it does not already exist. Note: This field is only used if the scope is shared.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub autoprovision: Option<bool>,
    /// Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub driver: Option<String>,
    /// Map of Docker driver specific options.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "driverOpts"
    )]
    #[builder(default, setter(strip_option))]
    pub driver_opts: Option<BTreeMap<String, String>>,
    /// Map of custom metadata to add to your Docker volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Scope for the Docker volume, which determines its lifecycle, either task or shared.  Docker volumes that are scoped to a task are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as shared persist after the task stops.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub scope: Option<String>,
}

/// Configuration block for an EFS volume. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionInitProviderVolumeEfsVolumeConfiguration {
    /// Configuration block for authorization for the Amazon EFS file system. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizationConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub authorization_config:
        Option<TaskDefinitionInitProviderVolumeEfsVolumeConfigurationAuthorizationConfig>,
    /// ID of the EFS File System.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemId"
    )]
    #[builder(default, setter(strip_option))]
    pub file_system_id: Option<String>,
    /// Directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying / will have the same effect as omitting this parameter. This argument is ignored when using authorization_config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rootDirectory"
    )]
    #[builder(default, setter(strip_option))]
    pub root_directory: Option<String>,
    /// Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: ENABLED, DISABLED. If this parameter is omitted, the default value of DISABLED is used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitEncryption"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_encryption: Option<String>,
    /// Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitEncryptionPort"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_encryption_port: Option<f64>,
}

/// Configuration block for authorization for the Amazon EFS file system. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionInitProviderVolumeEfsVolumeConfigurationAuthorizationConfig {
    /// Access point ID to use. If an access point is specified, the root directory value will be relative to the directory set for the access point. If specified, transit encryption must be enabled in the EFSVolumeConfiguration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessPointId"
    )]
    #[builder(default, setter(strip_option))]
    pub access_point_id: Option<String>,
    /// Whether or not to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. Valid values: ENABLED, DISABLED. If this parameter is omitted, the default value of DISABLED is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub iam: Option<String>,
}

/// Configuration block for an FSX Windows File Server volume. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionInitProviderVolumeFsxWindowsFileServerVolumeConfiguration {
    /// Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizationConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub authorization_config: Option<
        TaskDefinitionInitProviderVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig,
    >,
    /// The Amazon FSx for Windows File Server file system ID to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemId"
    )]
    #[builder(default, setter(strip_option))]
    pub file_system_id: Option<String>,
    /// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rootDirectory"
    )]
    #[builder(default, setter(strip_option))]
    pub root_directory: Option<String>,
}

/// Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionInitProviderVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig
{
    /// The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an AWS Secrets Manager secret or AWS Systems Manager Parameter Store parameter. The ARNs refer to the stored credentials.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "credentialsParameter"
    )]
    #[builder(default, setter(strip_option))]
    pub credentials_parameter: Option<String>,
    /// A fully qualified domain name hosted by an AWS Directory Service Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub domain: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TaskDefinitionProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TaskDefinitionProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TaskDefinitionProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TaskDefinitionProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TaskDefinitionProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<TaskDefinitionPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<TaskDefinitionPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TaskDefinitionPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TaskDefinitionPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TaskDefinitionPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TaskDefinitionPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TaskDefinitionPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// TaskDefinitionStatus defines the observed state of TaskDefinition.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<TaskDefinitionStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionStatusAtProvider {
    /// Full ARN of the Task Definition (including both family and revision).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// ARN of the Task Definition with the trailing revision removed. This may be useful for situations where the latest task definition is always desired. If a revision isn't specified, the latest ACTIVE revision is used. See the AWS documentation for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "arnWithoutRevision"
    )]
    #[builder(default, setter(strip_option))]
    pub arn_without_revision: Option<String>,
    /// A list of valid container definitions provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the Task Definition Parameters section from the official Developer Guide.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerDefinitions"
    )]
    #[builder(default, setter(strip_option))]
    pub container_definitions: Option<String>,
    /// Number of cpu units used by the task. If the requires_compatibilities is FARGATE this field is required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cpu: Option<String>,
    /// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ephemeralStorage"
    )]
    #[builder(default, setter(strip_option))]
    pub ephemeral_storage: Option<TaskDefinitionStatusAtProviderEphemeralStorage>,
    /// ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub execution_role_arn: Option<String>,
    /// A unique name for your task definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub family: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Configuration block(s) with Inference Accelerators settings. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inferenceAccelerator"
    )]
    #[builder(default, setter(strip_option))]
    pub inference_accelerator: Option<Vec<TaskDefinitionStatusAtProviderInferenceAccelerator>>,
    /// IPC resource namespace to be used for the containers in the task The valid values are host, task, and none.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipcMode")]
    #[builder(default, setter(strip_option))]
    pub ipc_mode: Option<String>,
    /// Amount (in MiB) of memory used by the task. If the requires_compatibilities is FARGATE this field is required.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub memory: Option<String>,
    /// Docker networking mode to use for the containers in the task. Valid values are none, bridge, awsvpc, and host.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkMode"
    )]
    #[builder(default, setter(strip_option))]
    pub network_mode: Option<String>,
    /// Process namespace to use for the containers in the task. The valid values are host and task.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pidMode")]
    #[builder(default, setter(strip_option))]
    pub pid_mode: Option<String>,
    /// Configuration block for rules that are taken into consideration during task placement. Maximum number of placement_constraints is 10. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementConstraints"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_constraints: Option<Vec<TaskDefinitionStatusAtProviderPlacementConstraints>>,
    /// Configuration block for the App Mesh proxy. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "proxyConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub proxy_configuration: Option<TaskDefinitionStatusAtProviderProxyConfiguration>,
    /// Set of launch types required by the task. The valid values are EC2 and FARGATE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requiresCompatibilities"
    )]
    #[builder(default, setter(strip_option))]
    pub requires_compatibilities: Option<Vec<String>>,
    /// Revision of the task in a particular family.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub revision: Option<f64>,
    /// Configuration block for runtime_platform that containers in your task may use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimePlatform"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_platform: Option<TaskDefinitionStatusAtProviderRuntimePlatform>,
    /// Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipDestroy"
    )]
    #[builder(default, setter(strip_option))]
    pub skip_destroy: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "taskRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub task_role_arn: Option<String>,
    /// Whether should track latest ACTIVE task definition on AWS or the one created with the resource stored in state. Default is false. Useful in the event the task definition is modified outside of this resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trackLatest"
    )]
    #[builder(default, setter(strip_option))]
    pub track_latest: Option<bool>,
    /// Configuration block for volumes that containers in your task may use. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub volume: Option<Vec<TaskDefinitionStatusAtProviderVolume>>,
}

/// The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See Ephemeral Storage.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionStatusAtProviderEphemeralStorage {
    /// The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is 21 GiB and the maximum supported value is 200 GiB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeInGib")]
    #[builder(default, setter(strip_option))]
    pub size_in_gib: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionStatusAtProviderInferenceAccelerator {
    /// Elastic Inference accelerator device name. The deviceName must also be referenced in a container definition as a ResourceRequirement.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub device_name: Option<String>,
    /// Elastic Inference accelerator type to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceType"
    )]
    #[builder(default, setter(strip_option))]
    pub device_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionStatusAtProviderPlacementConstraints {
    /// Cluster Query Language expression to apply to the constraint. For more information, see Cluster Query Language in the Amazon EC2 Container Service Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub expression: Option<String>,
    /// Type of constraint. Use memberOf to restrict selection to a group of valid candidates. Note that distinctInstance is not supported in task definitions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Configuration block for the App Mesh proxy. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionStatusAtProviderProxyConfiguration {
    /// Name of the container that will serve as the App Mesh proxy.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerName"
    )]
    #[builder(default, setter(strip_option))]
    pub container_name: Option<String>,
    /// Set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub properties: Option<BTreeMap<String, String>>,
    /// Proxy type. The default value is APPMESH. The only supported value is APPMESH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Configuration block for runtime_platform that containers in your task may use.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionStatusAtProviderRuntimePlatform {
    /// Must be set to either X86_64 or ARM64; see cpu architecture
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cpuArchitecture"
    )]
    #[builder(default, setter(strip_option))]
    pub cpu_architecture: Option<String>,
    /// If the requires_compatibilities is FARGATE this field is required; must be set to a valid option from the operating system family in the runtime platform setting
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "operatingSystemFamily"
    )]
    #[builder(default, setter(strip_option))]
    pub operating_system_family: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionStatusAtProviderVolume {
    /// Whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch in the volume configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "configureAtLaunch"
    )]
    #[builder(default, setter(strip_option))]
    pub configure_at_launch: Option<bool>,
    /// Configuration block to configure a docker volume. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dockerVolumeConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub docker_volume_configuration:
        Option<TaskDefinitionStatusAtProviderVolumeDockerVolumeConfiguration>,
    /// Configuration block for an EFS volume. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "efsVolumeConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub efs_volume_configuration:
        Option<TaskDefinitionStatusAtProviderVolumeEfsVolumeConfiguration>,
    /// Configuration block for an FSX Windows File Server volume. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fsxWindowsFileServerVolumeConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub fsx_windows_file_server_volume_configuration:
        Option<TaskDefinitionStatusAtProviderVolumeFsxWindowsFileServerVolumeConfiguration>,
    /// Path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    #[builder(default, setter(strip_option))]
    pub host_path: Option<String>,
    /// Name of the volume. This name is referenced in the sourceVolume
    /// parameter of container definition in the mountPoints section.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
}

/// Configuration block to configure a docker volume. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionStatusAtProviderVolumeDockerVolumeConfiguration {
    /// If this value is true, the Docker volume is created if it does not already exist. Note: This field is only used if the scope is shared.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub autoprovision: Option<bool>,
    /// Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub driver: Option<String>,
    /// Map of Docker driver specific options.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "driverOpts"
    )]
    #[builder(default, setter(strip_option))]
    pub driver_opts: Option<BTreeMap<String, String>>,
    /// Map of custom metadata to add to your Docker volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Scope for the Docker volume, which determines its lifecycle, either task or shared.  Docker volumes that are scoped to a task are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as shared persist after the task stops.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub scope: Option<String>,
}

/// Configuration block for an EFS volume. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionStatusAtProviderVolumeEfsVolumeConfiguration {
    /// Configuration block for authorization for the Amazon EFS file system. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizationConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub authorization_config:
        Option<TaskDefinitionStatusAtProviderVolumeEfsVolumeConfigurationAuthorizationConfig>,
    /// ID of the EFS File System.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemId"
    )]
    #[builder(default, setter(strip_option))]
    pub file_system_id: Option<String>,
    /// Directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying / will have the same effect as omitting this parameter. This argument is ignored when using authorization_config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rootDirectory"
    )]
    #[builder(default, setter(strip_option))]
    pub root_directory: Option<String>,
    /// Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: ENABLED, DISABLED. If this parameter is omitted, the default value of DISABLED is used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitEncryption"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_encryption: Option<String>,
    /// Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitEncryptionPort"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_encryption_port: Option<f64>,
}

/// Configuration block for authorization for the Amazon EFS file system. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionStatusAtProviderVolumeEfsVolumeConfigurationAuthorizationConfig {
    /// Access point ID to use. If an access point is specified, the root directory value will be relative to the directory set for the access point. If specified, transit encryption must be enabled in the EFSVolumeConfiguration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessPointId"
    )]
    #[builder(default, setter(strip_option))]
    pub access_point_id: Option<String>,
    /// Whether or not to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. Valid values: ENABLED, DISABLED. If this parameter is omitted, the default value of DISABLED is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub iam: Option<String>,
}

/// Configuration block for an FSX Windows File Server volume. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionStatusAtProviderVolumeFsxWindowsFileServerVolumeConfiguration {
    /// Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationConfig")]
    #[builder(default, setter(strip_option))]
    pub authorization_config: Option<TaskDefinitionStatusAtProviderVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig>,
    /// The Amazon FSx for Windows File Server file system ID to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileSystemId")]
    #[builder(default, setter(strip_option))]
    pub file_system_id: Option<String>,
    /// The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootDirectory")]
    #[builder(default, setter(strip_option))]
    pub root_directory: Option<String>,
}

/// Configuration block for authorization for the Amazon FSx for Windows File Server file system detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TaskDefinitionStatusAtProviderVolumeFsxWindowsFileServerVolumeConfigurationAuthorizationConfig
{
    /// The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an AWS Secrets Manager secret or AWS Systems Manager Parameter Store parameter. The ARNs refer to the stored credentials.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "credentialsParameter"
    )]
    #[builder(default, setter(strip_option))]
    pub credentials_parameter: Option<String>,
    /// A fully qualified domain name hosted by an AWS Directory Service Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub domain: Option<String>,
}

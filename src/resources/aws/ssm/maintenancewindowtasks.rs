// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// MaintenanceWindowTaskSpec defines the desired state of MaintenanceWindowTask
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "ssm.aws.upbound.io",
    version = "v1beta2",
    kind = "MaintenanceWindowTask",
    plural = "maintenancewindowtasks"
)]
#[kube(status = "MaintenanceWindowTaskStatus")]
pub struct MaintenanceWindowTaskSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<MaintenanceWindowTaskDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: MaintenanceWindowTaskForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<MaintenanceWindowTaskInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<MaintenanceWindowTaskProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<MaintenanceWindowTaskPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<MaintenanceWindowTaskWriteConnectionSecretToRef>,
}

/// MaintenanceWindowTaskSpec defines the desired state of MaintenanceWindowTask
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProvider {
    /// Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. Valid values are CONTINUE_TASK and CANCEL_TASK.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cutoffBehavior"
    )]
    #[builder(default, setter(strip_option))]
    pub cutoff_behavior: Option<String>,
    /// The description of the maintenance window task.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// The maximum number of targets this task can be run for in parallel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxConcurrency"
    )]
    #[builder(default, setter(strip_option))]
    pub max_concurrency: Option<String>,
    /// The maximum number of errors allowed before this task stops being scheduled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxErrors")]
    #[builder(default, setter(strip_option))]
    pub max_errors: Option<String>,
    /// The name of the maintenance window task.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub priority: Option<f64>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub service_role_arn: Option<String>,
    /// Reference to a Role in iam to populate serviceRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRoleArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub service_role_arn_ref: Option<MaintenanceWindowTaskForProviderServiceRoleArnRef>,
    /// Selector for a Role in iam to populate serviceRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRoleArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub service_role_arn_selector: Option<MaintenanceWindowTaskForProviderServiceRoleArnSelector>,
    /// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub targets: Option<Vec<MaintenanceWindowTaskForProviderTargets>>,
    /// The ARN of the task to execute.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "taskArn")]
    #[builder(default, setter(strip_option))]
    pub task_arn: Option<String>,
    /// Reference to a Function in lambda to populate taskArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "taskArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub task_arn_ref: Option<MaintenanceWindowTaskForProviderTaskArnRef>,
    /// Selector for a Function in lambda to populate taskArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "taskArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub task_arn_selector: Option<MaintenanceWindowTaskForProviderTaskArnSelector>,
    /// Configuration block with parameters for task execution.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "taskInvocationParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub task_invocation_parameters:
        Option<MaintenanceWindowTaskForProviderTaskInvocationParameters>,
    /// The type of task being registered. Valid values: AUTOMATION, LAMBDA, RUN_COMMAND or STEP_FUNCTIONS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "taskType")]
    #[builder(default, setter(strip_option))]
    pub task_type: Option<String>,
    /// The Id of the maintenance window to register the task with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowId")]
    #[builder(default, setter(strip_option))]
    pub window_id: Option<String>,
    /// Reference to a MaintenanceWindow in ssm to populate windowId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "windowIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub window_id_ref: Option<MaintenanceWindowTaskForProviderWindowIdRef>,
    /// Selector for a MaintenanceWindow in ssm to populate windowId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "windowIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub window_id_selector: Option<MaintenanceWindowTaskForProviderWindowIdSelector>,
}

/// Reference to a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderServiceRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskForProviderServiceRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderServiceRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskForProviderServiceRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskForProviderServiceRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderServiceRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderServiceRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderServiceRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskForProviderServiceRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderServiceRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskForProviderServiceRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskForProviderServiceRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderServiceRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderServiceRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTargets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// The array of strings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
    /// References to Instance in ec2 to populate values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valuesRefs"
    )]
    #[builder(default, setter(strip_option))]
    pub values_refs: Option<Vec<MaintenanceWindowTaskForProviderTargetsValuesRefs>>,
    /// Selector for a list of Instance in ec2 to populate values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valuesSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub values_selector: Option<MaintenanceWindowTaskForProviderTargetsValuesSelector>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTargetsValuesRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskForProviderTargetsValuesRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTargetsValuesRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskForProviderTargetsValuesRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskForProviderTargetsValuesRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTargetsValuesRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTargetsValuesRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Instance in ec2 to populate values.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTargetsValuesSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskForProviderTargetsValuesSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTargetsValuesSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskForProviderTargetsValuesSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskForProviderTargetsValuesSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTargetsValuesSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTargetsValuesSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Function in lambda to populate taskArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskForProviderTaskArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskForProviderTaskArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskForProviderTaskArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Function in lambda to populate taskArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskForProviderTaskArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskForProviderTaskArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskForProviderTaskArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block with parameters for task execution.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParameters {
    /// The parameters for an AUTOMATION task type. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "automationParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub automation_parameters:
        Option<MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParameters>,
    /// The parameters for a LAMBDA task type. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lambdaParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub lambda_parameters:
        Option<MaintenanceWindowTaskForProviderTaskInvocationParametersLambdaParameters>,
    /// The parameters for a RUN_COMMAND task type. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runCommandParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub run_command_parameters:
        Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParameters>,
    /// The parameters for a STEP_FUNCTIONS task type. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stepFunctionsParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub step_functions_parameters:
        Option<MaintenanceWindowTaskForProviderTaskInvocationParametersStepFunctionsParameters>,
}

/// The parameters for an AUTOMATION task type. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParameters {
    /// The version of an Automation document to use during task execution.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub document_version: Option<String>,
    /// The parameters for the RUN_COMMAND task execution. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameter: Option<
        Vec<MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParametersParameter>,
    >,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParametersParameter {
    /// The name of the maintenance window task.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The array of strings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
    /// References to Instance in ec2 to populate values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesRefs")]
    #[builder(default, setter(strip_option))]
    pub values_refs: Option<Vec<MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParametersParameterValuesRefs>>,
    /// Selector for a list of Instance in ec2 to populate values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesSelector")]
    #[builder(default, setter(strip_option))]
    pub values_selector: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParametersParameterValuesSelector>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParametersParameterValuesRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParametersParameterValuesRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParametersParameterValuesRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParametersParameterValuesRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParametersParameterValuesRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParametersParameterValuesRefsPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParametersParameterValuesRefsPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a list of Instance in ec2 to populate values.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParametersParameterValuesSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParametersParameterValuesSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParametersParameterValuesSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParametersParameterValuesSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParametersParameterValuesSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParametersParameterValuesSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskInvocationParametersAutomationParametersParameterValuesSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// The parameters for a LAMBDA task type. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersLambdaParameters {
    /// Pass client-specific information to the Lambda function that you are invoking.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientContext"
    )]
    #[builder(default, setter(strip_option))]
    pub client_context: Option<String>,
    /// JSON to provide to your Lambda function as input.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "payloadSecretRef"
    )]
    #[builder(default, setter(strip_option))]
    pub payload_secret_ref: Option<
        MaintenanceWindowTaskForProviderTaskInvocationParametersLambdaParametersPayloadSecretRef,
    >,
    /// Specify a Lambda function version or alias name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub qualifier: Option<String>,
}

/// JSON to provide to your Lambda function as input.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersLambdaParametersPayloadSecretRef
{
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// The parameters for a RUN_COMMAND task type. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParameters {
    /// Configuration options for sending command output to CloudWatch Logs. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchConfig")]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_config: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersCloudwatchConfig>,
    /// Information about the command(s) to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub comment: Option<String>,
    /// The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentHash")]
    #[builder(default, setter(strip_option))]
    pub document_hash: Option<String>,
    /// SHA-256 or SHA-1. SHA-1 hashes have been deprecated. Valid values: Sha256 and Sha1
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentHashType")]
    #[builder(default, setter(strip_option))]
    pub document_hash_type: Option<String>,
    /// The version of an Automation document to use during task execution.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentVersion")]
    #[builder(default, setter(strip_option))]
    pub document_version: Option<String>,
    /// Configurations for sending notifications about command status changes on a per-instance basis. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationConfig")]
    #[builder(default, setter(strip_option))]
    pub notification_config: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersNotificationConfig>,
    /// The name of the Amazon S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputS3Bucket")]
    #[builder(default, setter(strip_option))]
    pub output_s3_bucket: Option<String>,
    /// Reference to a Bucket in s3 to populate outputS3Bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputS3BucketRef")]
    #[builder(default, setter(strip_option))]
    pub output_s3_bucket_ref: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersOutputS3BucketRef>,
    /// Selector for a Bucket in s3 to populate outputS3Bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputS3BucketSelector")]
    #[builder(default, setter(strip_option))]
    pub output_s3_bucket_selector: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersOutputS3BucketSelector>,
    /// The Amazon S3 bucket subfolder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputS3KeyPrefix")]
    #[builder(default, setter(strip_option))]
    pub output_s3_key_prefix: Option<String>,
    /// The parameters for the RUN_COMMAND task execution. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameter: Option<Vec<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersParameter>>,
    /// The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArn")]
    #[builder(default, setter(strip_option))]
    pub service_role_arn: Option<String>,
    /// Reference to a Role in iam to populate serviceRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArnRef")]
    #[builder(default, setter(strip_option))]
    pub service_role_arn_ref: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersServiceRoleArnRef>,
    /// Selector for a Role in iam to populate serviceRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArnSelector")]
    #[builder(default, setter(strip_option))]
    pub service_role_arn_selector: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersServiceRoleArnSelector>,
    /// If this time is reached and the command has not already started executing, it doesn't run.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default, setter(strip_option))]
    pub timeout_seconds: Option<f64>,
}

/// Configuration options for sending command output to CloudWatch Logs. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersCloudwatchConfig
{
    /// The name of the CloudWatch log group where you want to send command output. If you don't specify a group name, Systems Manager automatically creates a log group for you. The log group uses the following naming format: aws/ssm/SystemsManagerDocumentName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogGroupName"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_log_group_name: Option<String>,
    /// Enables Systems Manager to send command output to CloudWatch Logs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchOutputEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_output_enabled: Option<bool>,
}

/// Configurations for sending notifications about command status changes on a per-instance basis. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersNotificationConfig {
    /// An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationArn")]
    #[builder(default, setter(strip_option))]
    pub notification_arn: Option<String>,
    /// Reference to a Topic in sns to populate notificationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationArnRef")]
    #[builder(default, setter(strip_option))]
    pub notification_arn_ref: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnRef>,
    /// Selector for a Topic in sns to populate notificationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationArnSelector")]
    #[builder(default, setter(strip_option))]
    pub notification_arn_selector: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnSelector>,
    /// The different events for which you can receive notifications. Valid values: All, InProgress, Success, TimedOut, Cancelled, and Failed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationEvents")]
    #[builder(default, setter(strip_option))]
    pub notification_events: Option<Vec<String>>,
    /// When specified with Command, receive notification when the status of a command changes. When specified with Invocation, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: Command and Invocation
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationType")]
    #[builder(default, setter(strip_option))]
    pub notification_type: Option<String>,
}

/// Reference to a Topic in sns to populate notificationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Topic in sns to populate notificationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Reference to a Bucket in s3 to populate outputS3Bucket.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersOutputS3BucketRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersOutputS3BucketRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersOutputS3BucketRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersOutputS3BucketRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersOutputS3BucketRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersOutputS3BucketRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersOutputS3BucketRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate outputS3Bucket.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersOutputS3BucketSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersOutputS3BucketSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersOutputS3BucketSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersOutputS3BucketSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersOutputS3BucketSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersOutputS3BucketSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersOutputS3BucketSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersParameter {
    /// The name of the maintenance window task.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The array of strings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

/// Reference to a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersServiceRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersServiceRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersServiceRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersServiceRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersServiceRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersServiceRoleArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersServiceRoleArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersServiceRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersServiceRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersServiceRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersServiceRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersServiceRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersServiceRoleArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderTaskInvocationParametersRunCommandParametersServiceRoleArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// The parameters for a STEP_FUNCTIONS task type. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersStepFunctionsParameters {
    /// The inputs for the STEP_FUNCTION task.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputSecretRef")]
    #[builder(default, setter(strip_option))]
    pub input_secret_ref: Option<MaintenanceWindowTaskForProviderTaskInvocationParametersStepFunctionsParametersInputSecretRef>,
    /// The name of the maintenance window task.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
}

/// The inputs for the STEP_FUNCTION task.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderTaskInvocationParametersStepFunctionsParametersInputSecretRef
{
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a MaintenanceWindow in ssm to populate windowId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderWindowIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskForProviderWindowIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderWindowIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskForProviderWindowIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskForProviderWindowIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderWindowIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderWindowIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a MaintenanceWindow in ssm to populate windowId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderWindowIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskForProviderWindowIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskForProviderWindowIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskForProviderWindowIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskForProviderWindowIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderWindowIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskForProviderWindowIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProvider {
    /// Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. Valid values are CONTINUE_TASK and CANCEL_TASK.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cutoffBehavior"
    )]
    #[builder(default, setter(strip_option))]
    pub cutoff_behavior: Option<String>,
    /// The description of the maintenance window task.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// The maximum number of targets this task can be run for in parallel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxConcurrency"
    )]
    #[builder(default, setter(strip_option))]
    pub max_concurrency: Option<String>,
    /// The maximum number of errors allowed before this task stops being scheduled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxErrors")]
    #[builder(default, setter(strip_option))]
    pub max_errors: Option<String>,
    /// The name of the maintenance window task.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub priority: Option<f64>,
    /// The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub service_role_arn: Option<String>,
    /// Reference to a Role in iam to populate serviceRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRoleArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub service_role_arn_ref: Option<MaintenanceWindowTaskInitProviderServiceRoleArnRef>,
    /// Selector for a Role in iam to populate serviceRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRoleArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub service_role_arn_selector: Option<MaintenanceWindowTaskInitProviderServiceRoleArnSelector>,
    /// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub targets: Option<Vec<MaintenanceWindowTaskInitProviderTargets>>,
    /// The ARN of the task to execute.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "taskArn")]
    #[builder(default, setter(strip_option))]
    pub task_arn: Option<String>,
    /// Reference to a Function in lambda to populate taskArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "taskArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub task_arn_ref: Option<MaintenanceWindowTaskInitProviderTaskArnRef>,
    /// Selector for a Function in lambda to populate taskArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "taskArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub task_arn_selector: Option<MaintenanceWindowTaskInitProviderTaskArnSelector>,
    /// Configuration block with parameters for task execution.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "taskInvocationParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub task_invocation_parameters:
        Option<MaintenanceWindowTaskInitProviderTaskInvocationParameters>,
    /// The type of task being registered. Valid values: AUTOMATION, LAMBDA, RUN_COMMAND or STEP_FUNCTIONS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "taskType")]
    #[builder(default, setter(strip_option))]
    pub task_type: Option<String>,
    /// The Id of the maintenance window to register the task with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowId")]
    #[builder(default, setter(strip_option))]
    pub window_id: Option<String>,
    /// Reference to a MaintenanceWindow in ssm to populate windowId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "windowIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub window_id_ref: Option<MaintenanceWindowTaskInitProviderWindowIdRef>,
    /// Selector for a MaintenanceWindow in ssm to populate windowId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "windowIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub window_id_selector: Option<MaintenanceWindowTaskInitProviderWindowIdSelector>,
}

/// Reference to a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderServiceRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskInitProviderServiceRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderServiceRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskInitProviderServiceRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskInitProviderServiceRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderServiceRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderServiceRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderServiceRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskInitProviderServiceRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderServiceRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskInitProviderServiceRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskInitProviderServiceRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderServiceRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderServiceRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTargets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// The array of strings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
    /// References to Instance in ec2 to populate values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valuesRefs"
    )]
    #[builder(default, setter(strip_option))]
    pub values_refs: Option<Vec<MaintenanceWindowTaskInitProviderTargetsValuesRefs>>,
    /// Selector for a list of Instance in ec2 to populate values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valuesSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub values_selector: Option<MaintenanceWindowTaskInitProviderTargetsValuesSelector>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTargetsValuesRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskInitProviderTargetsValuesRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTargetsValuesRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskInitProviderTargetsValuesRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskInitProviderTargetsValuesRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTargetsValuesRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTargetsValuesRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Instance in ec2 to populate values.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTargetsValuesSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskInitProviderTargetsValuesSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTargetsValuesSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskInitProviderTargetsValuesSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskInitProviderTargetsValuesSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTargetsValuesSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTargetsValuesSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Function in lambda to populate taskArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskInitProviderTaskArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskInitProviderTaskArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskInitProviderTaskArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Function in lambda to populate taskArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskInitProviderTaskArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskInitProviderTaskArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskInitProviderTaskArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block with parameters for task execution.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParameters {
    /// The parameters for an AUTOMATION task type. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "automationParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub automation_parameters:
        Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParameters>,
    /// The parameters for a LAMBDA task type. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lambdaParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub lambda_parameters:
        Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersLambdaParameters>,
    /// The parameters for a RUN_COMMAND task type. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runCommandParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub run_command_parameters:
        Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParameters>,
    /// The parameters for a STEP_FUNCTIONS task type. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stepFunctionsParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub step_functions_parameters:
        Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersStepFunctionsParameters>,
}

/// The parameters for an AUTOMATION task type. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParameters {
    /// The version of an Automation document to use during task execution.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub document_version: Option<String>,
    /// The parameters for the RUN_COMMAND task execution. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameter: Option<
        Vec<MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParametersParameter>,
    >,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParametersParameter {
    /// The name of the maintenance window task.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The array of strings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
    /// References to Instance in ec2 to populate values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesRefs")]
    #[builder(default, setter(strip_option))]
    pub values_refs: Option<Vec<MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParametersParameterValuesRefs>>,
    /// Selector for a list of Instance in ec2 to populate values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesSelector")]
    #[builder(default, setter(strip_option))]
    pub values_selector: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParametersParameterValuesSelector>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParametersParameterValuesRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParametersParameterValuesRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParametersParameterValuesRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParametersParameterValuesRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParametersParameterValuesRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParametersParameterValuesRefsPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParametersParameterValuesRefsPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a list of Instance in ec2 to populate values.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParametersParameterValuesSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParametersParameterValuesSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParametersParameterValuesSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParametersParameterValuesSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParametersParameterValuesSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParametersParameterValuesSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskInvocationParametersAutomationParametersParameterValuesSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// The parameters for a LAMBDA task type. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersLambdaParameters {
    /// Pass client-specific information to the Lambda function that you are invoking.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientContext"
    )]
    #[builder(default, setter(strip_option))]
    pub client_context: Option<String>,
    /// JSON to provide to your Lambda function as input.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "payloadSecretRef"
    )]
    #[builder(default, setter(strip_option))]
    pub payload_secret_ref: Option<
        MaintenanceWindowTaskInitProviderTaskInvocationParametersLambdaParametersPayloadSecretRef,
    >,
    /// Specify a Lambda function version or alias name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub qualifier: Option<String>,
}

/// JSON to provide to your Lambda function as input.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersLambdaParametersPayloadSecretRef
{
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// The parameters for a RUN_COMMAND task type. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParameters {
    /// Configuration options for sending command output to CloudWatch Logs. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchConfig")]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_config: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersCloudwatchConfig>,
    /// Information about the command(s) to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub comment: Option<String>,
    /// The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentHash")]
    #[builder(default, setter(strip_option))]
    pub document_hash: Option<String>,
    /// SHA-256 or SHA-1. SHA-1 hashes have been deprecated. Valid values: Sha256 and Sha1
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentHashType")]
    #[builder(default, setter(strip_option))]
    pub document_hash_type: Option<String>,
    /// The version of an Automation document to use during task execution.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentVersion")]
    #[builder(default, setter(strip_option))]
    pub document_version: Option<String>,
    /// Configurations for sending notifications about command status changes on a per-instance basis. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationConfig")]
    #[builder(default, setter(strip_option))]
    pub notification_config: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersNotificationConfig>,
    /// The name of the Amazon S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputS3Bucket")]
    #[builder(default, setter(strip_option))]
    pub output_s3_bucket: Option<String>,
    /// Reference to a Bucket in s3 to populate outputS3Bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputS3BucketRef")]
    #[builder(default, setter(strip_option))]
    pub output_s3_bucket_ref: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersOutputS3BucketRef>,
    /// Selector for a Bucket in s3 to populate outputS3Bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputS3BucketSelector")]
    #[builder(default, setter(strip_option))]
    pub output_s3_bucket_selector: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersOutputS3BucketSelector>,
    /// The Amazon S3 bucket subfolder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputS3KeyPrefix")]
    #[builder(default, setter(strip_option))]
    pub output_s3_key_prefix: Option<String>,
    /// The parameters for the RUN_COMMAND task execution. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameter: Option<Vec<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersParameter>>,
    /// The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArn")]
    #[builder(default, setter(strip_option))]
    pub service_role_arn: Option<String>,
    /// Reference to a Role in iam to populate serviceRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArnRef")]
    #[builder(default, setter(strip_option))]
    pub service_role_arn_ref: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersServiceRoleArnRef>,
    /// Selector for a Role in iam to populate serviceRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArnSelector")]
    #[builder(default, setter(strip_option))]
    pub service_role_arn_selector: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersServiceRoleArnSelector>,
    /// If this time is reached and the command has not already started executing, it doesn't run.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default, setter(strip_option))]
    pub timeout_seconds: Option<f64>,
}

/// Configuration options for sending command output to CloudWatch Logs. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersCloudwatchConfig
{
    /// The name of the CloudWatch log group where you want to send command output. If you don't specify a group name, Systems Manager automatically creates a log group for you. The log group uses the following naming format: aws/ssm/SystemsManagerDocumentName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogGroupName"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_log_group_name: Option<String>,
    /// Enables Systems Manager to send command output to CloudWatch Logs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchOutputEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_output_enabled: Option<bool>,
}

/// Configurations for sending notifications about command status changes on a per-instance basis. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersNotificationConfig {
    /// An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationArn")]
    #[builder(default, setter(strip_option))]
    pub notification_arn: Option<String>,
    /// Reference to a Topic in sns to populate notificationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationArnRef")]
    #[builder(default, setter(strip_option))]
    pub notification_arn_ref: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnRef>,
    /// Selector for a Topic in sns to populate notificationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationArnSelector")]
    #[builder(default, setter(strip_option))]
    pub notification_arn_selector: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnSelector>,
    /// The different events for which you can receive notifications. Valid values: All, InProgress, Success, TimedOut, Cancelled, and Failed
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationEvents")]
    #[builder(default, setter(strip_option))]
    pub notification_events: Option<Vec<String>>,
    /// When specified with Command, receive notification when the status of a command changes. When specified with Invocation, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: Command and Invocation
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationType")]
    #[builder(default, setter(strip_option))]
    pub notification_type: Option<String>,
}

/// Reference to a Topic in sns to populate notificationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Topic in sns to populate notificationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersNotificationConfigNotificationArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Reference to a Bucket in s3 to populate outputS3Bucket.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersOutputS3BucketRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersOutputS3BucketRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersOutputS3BucketRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersOutputS3BucketRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersOutputS3BucketRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersOutputS3BucketRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersOutputS3BucketRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate outputS3Bucket.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersOutputS3BucketSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersOutputS3BucketSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersOutputS3BucketSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersOutputS3BucketSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersOutputS3BucketSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersOutputS3BucketSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersOutputS3BucketSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersParameter {
    /// The name of the maintenance window task.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The array of strings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

/// Reference to a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersServiceRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersServiceRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersServiceRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersServiceRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersServiceRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersServiceRoleArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersServiceRoleArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersServiceRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersServiceRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersServiceRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersServiceRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersServiceRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersServiceRoleArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderTaskInvocationParametersRunCommandParametersServiceRoleArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// The parameters for a STEP_FUNCTIONS task type. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersStepFunctionsParameters {
    /// The inputs for the STEP_FUNCTION task.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputSecretRef")]
    #[builder(default, setter(strip_option))]
    pub input_secret_ref: Option<MaintenanceWindowTaskInitProviderTaskInvocationParametersStepFunctionsParametersInputSecretRef>,
    /// The name of the maintenance window task.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
}

/// The inputs for the STEP_FUNCTION task.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderTaskInvocationParametersStepFunctionsParametersInputSecretRef
{
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a MaintenanceWindow in ssm to populate windowId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderWindowIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskInitProviderWindowIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderWindowIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskInitProviderWindowIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskInitProviderWindowIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderWindowIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderWindowIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a MaintenanceWindow in ssm to populate windowId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderWindowIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskInitProviderWindowIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskInitProviderWindowIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskInitProviderWindowIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskInitProviderWindowIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderWindowIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskInitProviderWindowIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<MaintenanceWindowTaskProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<MaintenanceWindowTaskPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<MaintenanceWindowTaskPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<MaintenanceWindowTaskPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<MaintenanceWindowTaskPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<MaintenanceWindowTaskPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MaintenanceWindowTaskPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// MaintenanceWindowTaskStatus defines the observed state of MaintenanceWindowTask.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<MaintenanceWindowTaskStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskStatusAtProvider {
    /// The ARN of the maintenance window task.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Indicates whether tasks should continue to run after the cutoff time specified in the maintenance windows is reached. Valid values are CONTINUE_TASK and CANCEL_TASK.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cutoffBehavior"
    )]
    #[builder(default, setter(strip_option))]
    pub cutoff_behavior: Option<String>,
    /// The description of the maintenance window task.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// The ID of the maintenance window task.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// The maximum number of targets this task can be run for in parallel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxConcurrency"
    )]
    #[builder(default, setter(strip_option))]
    pub max_concurrency: Option<String>,
    /// The maximum number of errors allowed before this task stops being scheduled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxErrors")]
    #[builder(default, setter(strip_option))]
    pub max_errors: Option<String>,
    /// The name of the maintenance window task.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The priority of the task in the Maintenance Window, the lower the number the higher the priority. Tasks in a Maintenance Window are scheduled in priority order with tasks that have the same priority scheduled in parallel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub priority: Option<f64>,
    /// The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub service_role_arn: Option<String>,
    /// The targets (either instances or window target ids). Instances are specified using Key=InstanceIds,Values=instanceid1,instanceid2. Window target ids are specified using Key=WindowTargetIds,Values=window target id1, window target id2.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub targets: Option<Vec<MaintenanceWindowTaskStatusAtProviderTargets>>,
    /// The ARN of the task to execute.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "taskArn")]
    #[builder(default, setter(strip_option))]
    pub task_arn: Option<String>,
    /// Configuration block with parameters for task execution.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "taskInvocationParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub task_invocation_parameters:
        Option<MaintenanceWindowTaskStatusAtProviderTaskInvocationParameters>,
    /// The type of task being registered. Valid values: AUTOMATION, LAMBDA, RUN_COMMAND or STEP_FUNCTIONS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "taskType")]
    #[builder(default, setter(strip_option))]
    pub task_type: Option<String>,
    /// The Id of the maintenance window to register the task with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowId")]
    #[builder(default, setter(strip_option))]
    pub window_id: Option<String>,
    /// The ID of the maintenance window task.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "windowTaskId"
    )]
    #[builder(default, setter(strip_option))]
    pub window_task_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskStatusAtProviderTargets {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// The array of strings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

/// Configuration block with parameters for task execution.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskStatusAtProviderTaskInvocationParameters {
    /// The parameters for an AUTOMATION task type. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "automationParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub automation_parameters:
        Option<MaintenanceWindowTaskStatusAtProviderTaskInvocationParametersAutomationParameters>,
    /// The parameters for a LAMBDA task type. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lambdaParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub lambda_parameters:
        Option<MaintenanceWindowTaskStatusAtProviderTaskInvocationParametersLambdaParameters>,
    /// The parameters for a RUN_COMMAND task type. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runCommandParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub run_command_parameters:
        Option<MaintenanceWindowTaskStatusAtProviderTaskInvocationParametersRunCommandParameters>,
    /// The parameters for a STEP_FUNCTIONS task type. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stepFunctionsParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub step_functions_parameters: Option<
        MaintenanceWindowTaskStatusAtProviderTaskInvocationParametersStepFunctionsParameters,
    >,
}

/// The parameters for an AUTOMATION task type. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskStatusAtProviderTaskInvocationParametersAutomationParameters {
    /// The version of an Automation document to use during task execution.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentVersion")]
    #[builder(default, setter(strip_option))]
    pub document_version: Option<String>,
    /// The parameters for the RUN_COMMAND task execution. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameter: Option<Vec<MaintenanceWindowTaskStatusAtProviderTaskInvocationParametersAutomationParametersParameter>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskStatusAtProviderTaskInvocationParametersAutomationParametersParameter
{
    /// The name of the maintenance window task.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The array of strings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

/// The parameters for a LAMBDA task type. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskStatusAtProviderTaskInvocationParametersLambdaParameters {
    /// Pass client-specific information to the Lambda function that you are invoking.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientContext"
    )]
    #[builder(default, setter(strip_option))]
    pub client_context: Option<String>,
    /// Specify a Lambda function version or alias name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub qualifier: Option<String>,
}

/// The parameters for a RUN_COMMAND task type. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskStatusAtProviderTaskInvocationParametersRunCommandParameters {
    /// Configuration options for sending command output to CloudWatch Logs. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchConfig")]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_config: Option<MaintenanceWindowTaskStatusAtProviderTaskInvocationParametersRunCommandParametersCloudwatchConfig>,
    /// Information about the command(s) to execute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub comment: Option<String>,
    /// The SHA-256 or SHA-1 hash created by the system when the document was created. SHA-1 hashes have been deprecated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentHash")]
    #[builder(default, setter(strip_option))]
    pub document_hash: Option<String>,
    /// SHA-256 or SHA-1. SHA-1 hashes have been deprecated. Valid values: Sha256 and Sha1
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentHashType")]
    #[builder(default, setter(strip_option))]
    pub document_hash_type: Option<String>,
    /// The version of an Automation document to use during task execution.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentVersion")]
    #[builder(default, setter(strip_option))]
    pub document_version: Option<String>,
    /// Configurations for sending notifications about command status changes on a per-instance basis. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationConfig")]
    #[builder(default, setter(strip_option))]
    pub notification_config: Option<MaintenanceWindowTaskStatusAtProviderTaskInvocationParametersRunCommandParametersNotificationConfig>,
    /// The name of the Amazon S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputS3Bucket")]
    #[builder(default, setter(strip_option))]
    pub output_s3_bucket: Option<String>,
    /// The Amazon S3 bucket subfolder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputS3KeyPrefix")]
    #[builder(default, setter(strip_option))]
    pub output_s3_key_prefix: Option<String>,
    /// The parameters for the RUN_COMMAND task execution. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameter: Option<Vec<MaintenanceWindowTaskStatusAtProviderTaskInvocationParametersRunCommandParametersParameter>>,
    /// The role that should be assumed when executing the task. If a role is not provided, Systems Manager uses your account's service-linked role. If no service-linked role for Systems Manager exists in your account, it is created for you.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArn")]
    #[builder(default, setter(strip_option))]
    pub service_role_arn: Option<String>,
    /// If this time is reached and the command has not already started executing, it doesn't run.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSeconds")]
    #[builder(default, setter(strip_option))]
    pub timeout_seconds: Option<f64>,
}

/// Configuration options for sending command output to CloudWatch Logs. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskStatusAtProviderTaskInvocationParametersRunCommandParametersCloudwatchConfig
{
    /// The name of the CloudWatch log group where you want to send command output. If you don't specify a group name, Systems Manager automatically creates a log group for you. The log group uses the following naming format: aws/ssm/SystemsManagerDocumentName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogGroupName"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_log_group_name: Option<String>,
    /// Enables Systems Manager to send command output to CloudWatch Logs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchOutputEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_output_enabled: Option<bool>,
}

/// Configurations for sending notifications about command status changes on a per-instance basis. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskStatusAtProviderTaskInvocationParametersRunCommandParametersNotificationConfig
{
    /// An Amazon Resource Name (ARN) for a Simple Notification Service (SNS) topic. Run Command pushes notifications about command status changes to this topic.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notificationArn"
    )]
    #[builder(default, setter(strip_option))]
    pub notification_arn: Option<String>,
    /// The different events for which you can receive notifications. Valid values: All, InProgress, Success, TimedOut, Cancelled, and Failed
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notificationEvents"
    )]
    #[builder(default, setter(strip_option))]
    pub notification_events: Option<Vec<String>>,
    /// When specified with Command, receive notification when the status of a command changes. When specified with Invocation, for commands sent to multiple instances, receive notification on a per-instance basis when the status of a command changes. Valid values: Command and Invocation
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notificationType"
    )]
    #[builder(default, setter(strip_option))]
    pub notification_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskStatusAtProviderTaskInvocationParametersRunCommandParametersParameter
{
    /// The name of the maintenance window task.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The array of strings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

/// The parameters for a STEP_FUNCTIONS task type. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct MaintenanceWindowTaskStatusAtProviderTaskInvocationParametersStepFunctionsParameters {
    /// The name of the maintenance window task.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
}

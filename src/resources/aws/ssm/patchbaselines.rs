// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// PatchBaselineSpec defines the desired state of PatchBaseline
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "ssm.aws.upbound.io",
    version = "v1beta1",
    kind = "PatchBaseline",
    plural = "patchbaselines"
)]
#[kube(status = "PatchBaselineStatus")]
pub struct PatchBaselineSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<PatchBaselineDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: PatchBaselineForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<PatchBaselineInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<PatchBaselineProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<PatchBaselinePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<PatchBaselineWriteConnectionSecretToRef>,
}

/// PatchBaselineSpec defines the desired state of PatchBaseline
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PatchBaselineDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineForProvider {
    /// Set of rules used to include patches in the baseline. Up to 10 approval rules can be specified. See approval_rule below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approvalRule"
    )]
    #[builder(default, setter(strip_option))]
    pub approval_rule: Option<Vec<PatchBaselineForProviderApprovalRule>>,
    /// List of explicitly approved patches for the baseline. Cannot be specified with approval_rule.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approvedPatches"
    )]
    #[builder(default, setter(strip_option))]
    pub approved_patches: Option<Vec<String>>,
    /// Compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. Valid values are CRITICAL, HIGH, MEDIUM, LOW, INFORMATIONAL, UNSPECIFIED. The default value is UNSPECIFIED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approvedPatchesComplianceLevel"
    )]
    #[builder(default, setter(strip_option))]
    pub approved_patches_compliance_level: Option<String>,
    /// Whether the list of approved patches includes non-security updates that should be applied to the instances. Applies to Linux instances only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approvedPatchesEnableNonSecurity"
    )]
    #[builder(default, setter(strip_option))]
    pub approved_patches_enable_non_security: Option<bool>,
    /// Description of the patch baseline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Set of global filters used to exclude patches from the baseline. Up to 4 global filters can be specified using Key/Value pairs. Valid Keys are PRODUCT, CLASSIFICATION, MSRC_SEVERITY, and PATCH_ID.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "globalFilter"
    )]
    #[builder(default, setter(strip_option))]
    pub global_filter: Option<Vec<PatchBaselineForProviderGlobalFilter>>,
    /// Name of the patch baseline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Operating system the patch baseline applies to. Valid values are ALMA_LINUX, AMAZON_LINUX, AMAZON_LINUX_2, AMAZON_LINUX_2022, AMAZON_LINUX_2023, CENTOS, DEBIAN, MACOS, ORACLE_LINUX, RASPBIAN, REDHAT_ENTERPRISE_LINUX, ROCKY_LINUX, SUSE, UBUNTU, and WINDOWS. The default value is WINDOWS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "operatingSystem"
    )]
    #[builder(default, setter(strip_option))]
    pub operating_system: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// List of rejected patches.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rejectedPatches"
    )]
    #[builder(default, setter(strip_option))]
    pub rejected_patches: Option<Vec<String>>,
    /// Action for Patch Manager to take on patches included in the rejected_patches list. Valid values are ALLOW_AS_DEPENDENCY and BLOCK.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rejectedPatchesAction"
    )]
    #[builder(default, setter(strip_option))]
    pub rejected_patches_action: Option<String>,
    /// Configuration block with alternate sources for patches. Applies to Linux instances only. See source below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub source: Option<Vec<PatchBaselineForProviderSource>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineForProviderApprovalRule {
    /// Number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline. Valid Range: 0 to 360. Conflicts with approve_until_date.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approveAfterDays"
    )]
    #[builder(default, setter(strip_option))]
    pub approve_after_days: Option<f64>,
    /// Cutoff date for auto approval of released patches. Any patches released on or before this date are installed automatically. Date is formatted as YYYY-MM-DD. Conflicts with approve_after_days
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approveUntilDate"
    )]
    #[builder(default, setter(strip_option))]
    pub approve_until_date: Option<String>,
    /// Compliance level for patches approved by this rule. Valid values are CRITICAL, HIGH, MEDIUM, LOW, INFORMATIONAL, and UNSPECIFIED. The default value is UNSPECIFIED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "complianceLevel"
    )]
    #[builder(default, setter(strip_option))]
    pub compliance_level: Option<String>,
    /// Boolean enabling the application of non-security updates. The default value is false. Valid for Linux instances only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableNonSecurity"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_non_security: Option<bool>,
    /// Patch filter group that defines the criteria for the rule. Up to 5 patch filters can be specified per approval rule using Key/Value pairs. Valid combinations of these Keys and the operating_system value can be found in the SSM DescribePatchProperties API Reference. Valid Values are exact values for the patch property given as the key, or a wildcard *, which matches all values. PATCH_SET defaults to OS if unspecified
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "patchFilter"
    )]
    #[builder(default, setter(strip_option))]
    pub patch_filter: Option<Vec<PatchBaselineForProviderApprovalRulePatchFilter>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineForProviderApprovalRulePatchFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineForProviderGlobalFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineForProviderSource {
    /// Value of the yum repo configuration. For information about other options available for your yum repository configuration, see the dnf.conf documentation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub configuration: Option<String>,
    /// Name specified to identify the patch source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Specific operating system versions a patch repository applies to, such as "Ubuntu16.04", "AmazonLinux2016.09", "RedhatEnterpriseLinux7.2" or "Suse12.7". For lists of supported product values, see PatchFilter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub products: Option<Vec<String>>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineInitProvider {
    /// Set of rules used to include patches in the baseline. Up to 10 approval rules can be specified. See approval_rule below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approvalRule"
    )]
    #[builder(default, setter(strip_option))]
    pub approval_rule: Option<Vec<PatchBaselineInitProviderApprovalRule>>,
    /// List of explicitly approved patches for the baseline. Cannot be specified with approval_rule.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approvedPatches"
    )]
    #[builder(default, setter(strip_option))]
    pub approved_patches: Option<Vec<String>>,
    /// Compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. Valid values are CRITICAL, HIGH, MEDIUM, LOW, INFORMATIONAL, UNSPECIFIED. The default value is UNSPECIFIED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approvedPatchesComplianceLevel"
    )]
    #[builder(default, setter(strip_option))]
    pub approved_patches_compliance_level: Option<String>,
    /// Whether the list of approved patches includes non-security updates that should be applied to the instances. Applies to Linux instances only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approvedPatchesEnableNonSecurity"
    )]
    #[builder(default, setter(strip_option))]
    pub approved_patches_enable_non_security: Option<bool>,
    /// Description of the patch baseline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Set of global filters used to exclude patches from the baseline. Up to 4 global filters can be specified using Key/Value pairs. Valid Keys are PRODUCT, CLASSIFICATION, MSRC_SEVERITY, and PATCH_ID.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "globalFilter"
    )]
    #[builder(default, setter(strip_option))]
    pub global_filter: Option<Vec<PatchBaselineInitProviderGlobalFilter>>,
    /// Name of the patch baseline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Operating system the patch baseline applies to. Valid values are ALMA_LINUX, AMAZON_LINUX, AMAZON_LINUX_2, AMAZON_LINUX_2022, AMAZON_LINUX_2023, CENTOS, DEBIAN, MACOS, ORACLE_LINUX, RASPBIAN, REDHAT_ENTERPRISE_LINUX, ROCKY_LINUX, SUSE, UBUNTU, and WINDOWS. The default value is WINDOWS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "operatingSystem"
    )]
    #[builder(default, setter(strip_option))]
    pub operating_system: Option<String>,
    /// List of rejected patches.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rejectedPatches"
    )]
    #[builder(default, setter(strip_option))]
    pub rejected_patches: Option<Vec<String>>,
    /// Action for Patch Manager to take on patches included in the rejected_patches list. Valid values are ALLOW_AS_DEPENDENCY and BLOCK.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rejectedPatchesAction"
    )]
    #[builder(default, setter(strip_option))]
    pub rejected_patches_action: Option<String>,
    /// Configuration block with alternate sources for patches. Applies to Linux instances only. See source below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub source: Option<Vec<PatchBaselineInitProviderSource>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineInitProviderApprovalRule {
    /// Number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline. Valid Range: 0 to 360. Conflicts with approve_until_date.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approveAfterDays"
    )]
    #[builder(default, setter(strip_option))]
    pub approve_after_days: Option<f64>,
    /// Cutoff date for auto approval of released patches. Any patches released on or before this date are installed automatically. Date is formatted as YYYY-MM-DD. Conflicts with approve_after_days
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approveUntilDate"
    )]
    #[builder(default, setter(strip_option))]
    pub approve_until_date: Option<String>,
    /// Compliance level for patches approved by this rule. Valid values are CRITICAL, HIGH, MEDIUM, LOW, INFORMATIONAL, and UNSPECIFIED. The default value is UNSPECIFIED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "complianceLevel"
    )]
    #[builder(default, setter(strip_option))]
    pub compliance_level: Option<String>,
    /// Boolean enabling the application of non-security updates. The default value is false. Valid for Linux instances only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableNonSecurity"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_non_security: Option<bool>,
    /// Patch filter group that defines the criteria for the rule. Up to 5 patch filters can be specified per approval rule using Key/Value pairs. Valid combinations of these Keys and the operating_system value can be found in the SSM DescribePatchProperties API Reference. Valid Values are exact values for the patch property given as the key, or a wildcard *, which matches all values. PATCH_SET defaults to OS if unspecified
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "patchFilter"
    )]
    #[builder(default, setter(strip_option))]
    pub patch_filter: Option<Vec<PatchBaselineInitProviderApprovalRulePatchFilter>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineInitProviderApprovalRulePatchFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineInitProviderGlobalFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineInitProviderSource {
    /// Value of the yum repo configuration. For information about other options available for your yum repository configuration, see the dnf.conf documentation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub configuration: Option<String>,
    /// Name specified to identify the patch source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Specific operating system versions a patch repository applies to, such as "Ubuntu16.04", "AmazonLinux2016.09", "RedhatEnterpriseLinux7.2" or "Suse12.7". For lists of supported product values, see PatchFilter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub products: Option<Vec<String>>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<PatchBaselineProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<PatchBaselineProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<PatchBaselineProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PatchBaselineProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PatchBaselineProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselinePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<PatchBaselinePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<PatchBaselinePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselinePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<PatchBaselinePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselinePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<PatchBaselinePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<PatchBaselinePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PatchBaselinePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PatchBaselinePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselinePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// PatchBaselineStatus defines the observed state of PatchBaseline.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<PatchBaselineStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineStatusAtProvider {
    /// Set of rules used to include patches in the baseline. Up to 10 approval rules can be specified. See approval_rule below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approvalRule"
    )]
    #[builder(default, setter(strip_option))]
    pub approval_rule: Option<Vec<PatchBaselineStatusAtProviderApprovalRule>>,
    /// List of explicitly approved patches for the baseline. Cannot be specified with approval_rule.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approvedPatches"
    )]
    #[builder(default, setter(strip_option))]
    pub approved_patches: Option<Vec<String>>,
    /// Compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. Valid values are CRITICAL, HIGH, MEDIUM, LOW, INFORMATIONAL, UNSPECIFIED. The default value is UNSPECIFIED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approvedPatchesComplianceLevel"
    )]
    #[builder(default, setter(strip_option))]
    pub approved_patches_compliance_level: Option<String>,
    /// Whether the list of approved patches includes non-security updates that should be applied to the instances. Applies to Linux instances only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approvedPatchesEnableNonSecurity"
    )]
    #[builder(default, setter(strip_option))]
    pub approved_patches_enable_non_security: Option<bool>,
    /// ARN of the baseline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Description of the patch baseline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Set of global filters used to exclude patches from the baseline. Up to 4 global filters can be specified using Key/Value pairs. Valid Keys are PRODUCT, CLASSIFICATION, MSRC_SEVERITY, and PATCH_ID.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "globalFilter"
    )]
    #[builder(default, setter(strip_option))]
    pub global_filter: Option<Vec<PatchBaselineStatusAtProviderGlobalFilter>>,
    /// ID of the baseline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// JSON definition of the baseline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub json: Option<String>,
    /// Name of the patch baseline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Operating system the patch baseline applies to. Valid values are ALMA_LINUX, AMAZON_LINUX, AMAZON_LINUX_2, AMAZON_LINUX_2022, AMAZON_LINUX_2023, CENTOS, DEBIAN, MACOS, ORACLE_LINUX, RASPBIAN, REDHAT_ENTERPRISE_LINUX, ROCKY_LINUX, SUSE, UBUNTU, and WINDOWS. The default value is WINDOWS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "operatingSystem"
    )]
    #[builder(default, setter(strip_option))]
    pub operating_system: Option<String>,
    /// List of rejected patches.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rejectedPatches"
    )]
    #[builder(default, setter(strip_option))]
    pub rejected_patches: Option<Vec<String>>,
    /// Action for Patch Manager to take on patches included in the rejected_patches list. Valid values are ALLOW_AS_DEPENDENCY and BLOCK.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rejectedPatchesAction"
    )]
    #[builder(default, setter(strip_option))]
    pub rejected_patches_action: Option<String>,
    /// Configuration block with alternate sources for patches. Applies to Linux instances only. See source below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub source: Option<Vec<PatchBaselineStatusAtProviderSource>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineStatusAtProviderApprovalRule {
    /// Number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline. Valid Range: 0 to 360. Conflicts with approve_until_date.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approveAfterDays"
    )]
    #[builder(default, setter(strip_option))]
    pub approve_after_days: Option<f64>,
    /// Cutoff date for auto approval of released patches. Any patches released on or before this date are installed automatically. Date is formatted as YYYY-MM-DD. Conflicts with approve_after_days
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "approveUntilDate"
    )]
    #[builder(default, setter(strip_option))]
    pub approve_until_date: Option<String>,
    /// Compliance level for patches approved by this rule. Valid values are CRITICAL, HIGH, MEDIUM, LOW, INFORMATIONAL, and UNSPECIFIED. The default value is UNSPECIFIED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "complianceLevel"
    )]
    #[builder(default, setter(strip_option))]
    pub compliance_level: Option<String>,
    /// Boolean enabling the application of non-security updates. The default value is false. Valid for Linux instances only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableNonSecurity"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_non_security: Option<bool>,
    /// Patch filter group that defines the criteria for the rule. Up to 5 patch filters can be specified per approval rule using Key/Value pairs. Valid combinations of these Keys and the operating_system value can be found in the SSM DescribePatchProperties API Reference. Valid Values are exact values for the patch property given as the key, or a wildcard *, which matches all values. PATCH_SET defaults to OS if unspecified
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "patchFilter"
    )]
    #[builder(default, setter(strip_option))]
    pub patch_filter: Option<Vec<PatchBaselineStatusAtProviderApprovalRulePatchFilter>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineStatusAtProviderApprovalRulePatchFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineStatusAtProviderGlobalFilter {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PatchBaselineStatusAtProviderSource {
    /// Value of the yum repo configuration. For information about other options available for your yum repository configuration, see the dnf.conf documentation
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub configuration: Option<String>,
    /// Name specified to identify the patch source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Specific operating system versions a patch repository applies to, such as "Ubuntu16.04", "AmazonLinux2016.09", "RedhatEnterpriseLinux7.2" or "Suse12.7". For lists of supported product values, see PatchFilter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub products: Option<Vec<String>>,
}

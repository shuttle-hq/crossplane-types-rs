// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// AssociationSpec defines the desired state of Association
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "ssm.aws.upbound.io",
    version = "v1beta2",
    kind = "Association",
    plural = "associations"
)]
#[kube(status = "AssociationStatus")]
pub struct AssociationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<AssociationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: AssociationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<AssociationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<AssociationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<AssociationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<AssociationWriteConnectionSecretToRef>,
}

/// AssociationSpec defines the desired state of Association
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationForProvider {
    /// By default, when you create a new or update associations, the system runs it immediately and then according to the schedule you specified. Enable this option if you do not want an association to run immediately after you create or update it. This parameter is not supported for rate expressions. Default: false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "applyOnlyAtCronInterval"
    )]
    #[builder(default, setter(strip_option))]
    pub apply_only_at_cron_interval: Option<bool>,
    /// The descriptive name for the association.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "associationName"
    )]
    #[builder(default, setter(strip_option))]
    pub association_name: Option<String>,
    /// Specify the target for the association. This target is required for associations that use an Automation document and target resources by using rate controls. This should be set to the SSM document parameter that will define how your automation will branch out.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "automationTargetParameterName"
    )]
    #[builder(default, setter(strip_option))]
    pub automation_target_parameter_name: Option<String>,
    /// The compliance severity for the association. Can be one of the following: UNSPECIFIED, LOW, MEDIUM, HIGH or CRITICAL
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "complianceSeverity"
    )]
    #[builder(default, setter(strip_option))]
    pub compliance_severity: Option<String>,
    /// The document version you want to associate with the target(s). Can be a specific version or the default version.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub document_version: Option<String>,
    /// The instance ID to apply an SSM document to. Use targets with key InstanceIds for document schema versions 2.0 and above. Use the targets attribute instead.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceId"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_id: Option<String>,
    /// The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxConcurrency"
    )]
    #[builder(default, setter(strip_option))]
    pub max_concurrency: Option<String>,
    /// The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify a number, for example 10, or a percentage of the target set, for example 10%. If you specify a threshold of 3, the stop command is sent when the fourth error is returned. If you specify a threshold of 10% for 50 associations, the stop command is sent when the sixth error is returned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxErrors")]
    #[builder(default, setter(strip_option))]
    pub max_errors: Option<String>,
    /// The name of the SSM document to apply.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Reference to a Document in ssm to populate name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameRef")]
    #[builder(default, setter(strip_option))]
    pub name_ref: Option<AssociationForProviderNameRef>,
    /// Selector for a Document in ssm to populate name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub name_selector: Option<AssociationForProviderNameSelector>,
    /// An output location block. Output Location is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputLocation"
    )]
    #[builder(default, setter(strip_option))]
    pub output_location: Option<AssociationForProviderOutputLocation>,
    /// A block of arbitrary string parameters to pass to the SSM document.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<BTreeMap<String, String>>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// A cron or rate expression that specifies when the association runs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scheduleExpression"
    )]
    #[builder(default, setter(strip_option))]
    pub schedule_expression: Option<String>,
    /// The mode for generating association compliance. You can specify AUTO or MANUAL.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "syncCompliance"
    )]
    #[builder(default, setter(strip_option))]
    pub sync_compliance: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// A block containing the targets of the SSM association. Targets are documented below. AWS currently supports a maximum of 5 targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub targets: Option<Vec<AssociationForProviderTargets>>,
    /// The number of seconds to wait for the association status to be Success. If Success status is not reached within the given time, create opration will fail.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "waitForSuccessTimeoutSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub wait_for_success_timeout_seconds: Option<f64>,
}

/// Reference to a Document in ssm to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationForProviderNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AssociationForProviderNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationForProviderNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AssociationForProviderNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AssociationForProviderNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationForProviderNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationForProviderNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Document in ssm to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationForProviderNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AssociationForProviderNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationForProviderNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AssociationForProviderNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AssociationForProviderNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationForProviderNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationForProviderNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// An output location block. Output Location is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationForProviderOutputLocation {
    /// The S3 bucket name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketName"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_name: Option<String>,
    /// The S3 bucket prefix. Results stored in the root if not configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3KeyPrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_key_prefix: Option<String>,
    /// The S3 bucket region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Region")]
    #[builder(default, setter(strip_option))]
    pub s3_region: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationForProviderTargets {
    /// Either InstanceIds or tag:Tag Name to specify an EC2 tag.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// A list of instance IDs or tag values. AWS currently limits this list size to one value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
    /// References to Instance in ec2 to populate values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valuesRefs"
    )]
    #[builder(default, setter(strip_option))]
    pub values_refs: Option<Vec<AssociationForProviderTargetsValuesRefs>>,
    /// Selector for a list of Instance in ec2 to populate values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valuesSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub values_selector: Option<AssociationForProviderTargetsValuesSelector>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationForProviderTargetsValuesRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AssociationForProviderTargetsValuesRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationForProviderTargetsValuesRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AssociationForProviderTargetsValuesRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AssociationForProviderTargetsValuesRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationForProviderTargetsValuesRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationForProviderTargetsValuesRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Instance in ec2 to populate values.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationForProviderTargetsValuesSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AssociationForProviderTargetsValuesSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationForProviderTargetsValuesSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AssociationForProviderTargetsValuesSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AssociationForProviderTargetsValuesSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationForProviderTargetsValuesSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationForProviderTargetsValuesSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationInitProvider {
    /// By default, when you create a new or update associations, the system runs it immediately and then according to the schedule you specified. Enable this option if you do not want an association to run immediately after you create or update it. This parameter is not supported for rate expressions. Default: false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "applyOnlyAtCronInterval"
    )]
    #[builder(default, setter(strip_option))]
    pub apply_only_at_cron_interval: Option<bool>,
    /// The descriptive name for the association.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "associationName"
    )]
    #[builder(default, setter(strip_option))]
    pub association_name: Option<String>,
    /// Specify the target for the association. This target is required for associations that use an Automation document and target resources by using rate controls. This should be set to the SSM document parameter that will define how your automation will branch out.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "automationTargetParameterName"
    )]
    #[builder(default, setter(strip_option))]
    pub automation_target_parameter_name: Option<String>,
    /// The compliance severity for the association. Can be one of the following: UNSPECIFIED, LOW, MEDIUM, HIGH or CRITICAL
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "complianceSeverity"
    )]
    #[builder(default, setter(strip_option))]
    pub compliance_severity: Option<String>,
    /// The document version you want to associate with the target(s). Can be a specific version or the default version.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub document_version: Option<String>,
    /// The instance ID to apply an SSM document to. Use targets with key InstanceIds for document schema versions 2.0 and above. Use the targets attribute instead.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceId"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_id: Option<String>,
    /// The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxConcurrency"
    )]
    #[builder(default, setter(strip_option))]
    pub max_concurrency: Option<String>,
    /// The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify a number, for example 10, or a percentage of the target set, for example 10%. If you specify a threshold of 3, the stop command is sent when the fourth error is returned. If you specify a threshold of 10% for 50 associations, the stop command is sent when the sixth error is returned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxErrors")]
    #[builder(default, setter(strip_option))]
    pub max_errors: Option<String>,
    /// The name of the SSM document to apply.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Reference to a Document in ssm to populate name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameRef")]
    #[builder(default, setter(strip_option))]
    pub name_ref: Option<AssociationInitProviderNameRef>,
    /// Selector for a Document in ssm to populate name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub name_selector: Option<AssociationInitProviderNameSelector>,
    /// An output location block. Output Location is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputLocation"
    )]
    #[builder(default, setter(strip_option))]
    pub output_location: Option<AssociationInitProviderOutputLocation>,
    /// A block of arbitrary string parameters to pass to the SSM document.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<BTreeMap<String, String>>,
    /// A cron or rate expression that specifies when the association runs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scheduleExpression"
    )]
    #[builder(default, setter(strip_option))]
    pub schedule_expression: Option<String>,
    /// The mode for generating association compliance. You can specify AUTO or MANUAL.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "syncCompliance"
    )]
    #[builder(default, setter(strip_option))]
    pub sync_compliance: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// A block containing the targets of the SSM association. Targets are documented below. AWS currently supports a maximum of 5 targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub targets: Option<Vec<AssociationInitProviderTargets>>,
    /// The number of seconds to wait for the association status to be Success. If Success status is not reached within the given time, create opration will fail.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "waitForSuccessTimeoutSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub wait_for_success_timeout_seconds: Option<f64>,
}

/// Reference to a Document in ssm to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationInitProviderNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AssociationInitProviderNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationInitProviderNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AssociationInitProviderNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AssociationInitProviderNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationInitProviderNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationInitProviderNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Document in ssm to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationInitProviderNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AssociationInitProviderNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationInitProviderNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AssociationInitProviderNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AssociationInitProviderNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationInitProviderNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationInitProviderNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// An output location block. Output Location is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationInitProviderOutputLocation {
    /// The S3 bucket name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketName"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_name: Option<String>,
    /// The S3 bucket prefix. Results stored in the root if not configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3KeyPrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_key_prefix: Option<String>,
    /// The S3 bucket region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Region")]
    #[builder(default, setter(strip_option))]
    pub s3_region: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationInitProviderTargets {
    /// Either InstanceIds or tag:Tag Name to specify an EC2 tag.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// A list of instance IDs or tag values. AWS currently limits this list size to one value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
    /// References to Instance in ec2 to populate values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valuesRefs"
    )]
    #[builder(default, setter(strip_option))]
    pub values_refs: Option<Vec<AssociationInitProviderTargetsValuesRefs>>,
    /// Selector for a list of Instance in ec2 to populate values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "valuesSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub values_selector: Option<AssociationInitProviderTargetsValuesSelector>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationInitProviderTargetsValuesRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AssociationInitProviderTargetsValuesRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationInitProviderTargetsValuesRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AssociationInitProviderTargetsValuesRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AssociationInitProviderTargetsValuesRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationInitProviderTargetsValuesRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationInitProviderTargetsValuesRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Instance in ec2 to populate values.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationInitProviderTargetsValuesSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AssociationInitProviderTargetsValuesSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationInitProviderTargetsValuesSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AssociationInitProviderTargetsValuesSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AssociationInitProviderTargetsValuesSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationInitProviderTargetsValuesSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationInitProviderTargetsValuesSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AssociationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AssociationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AssociationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<AssociationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<AssociationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AssociationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AssociationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AssociationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AssociationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// AssociationStatus defines the observed state of Association.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<AssociationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationStatusAtProvider {
    /// By default, when you create a new or update associations, the system runs it immediately and then according to the schedule you specified. Enable this option if you do not want an association to run immediately after you create or update it. This parameter is not supported for rate expressions. Default: false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "applyOnlyAtCronInterval"
    )]
    #[builder(default, setter(strip_option))]
    pub apply_only_at_cron_interval: Option<bool>,
    /// The ARN of the SSM association
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// The ID of the SSM association.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "associationId"
    )]
    #[builder(default, setter(strip_option))]
    pub association_id: Option<String>,
    /// The descriptive name for the association.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "associationName"
    )]
    #[builder(default, setter(strip_option))]
    pub association_name: Option<String>,
    /// Specify the target for the association. This target is required for associations that use an Automation document and target resources by using rate controls. This should be set to the SSM document parameter that will define how your automation will branch out.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "automationTargetParameterName"
    )]
    #[builder(default, setter(strip_option))]
    pub automation_target_parameter_name: Option<String>,
    /// The compliance severity for the association. Can be one of the following: UNSPECIFIED, LOW, MEDIUM, HIGH or CRITICAL
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "complianceSeverity"
    )]
    #[builder(default, setter(strip_option))]
    pub compliance_severity: Option<String>,
    /// The document version you want to associate with the target(s). Can be a specific version or the default version.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "documentVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub document_version: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// The instance ID to apply an SSM document to. Use targets with key InstanceIds for document schema versions 2.0 and above. Use the targets attribute instead.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceId"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_id: Option<String>,
    /// The maximum number of targets allowed to run the association at the same time. You can specify a number, for example 10, or a percentage of the target set, for example 10%.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxConcurrency"
    )]
    #[builder(default, setter(strip_option))]
    pub max_concurrency: Option<String>,
    /// The number of errors that are allowed before the system stops sending requests to run the association on additional targets. You can specify a number, for example 10, or a percentage of the target set, for example 10%. If you specify a threshold of 3, the stop command is sent when the fourth error is returned. If you specify a threshold of 10% for 50 associations, the stop command is sent when the sixth error is returned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxErrors")]
    #[builder(default, setter(strip_option))]
    pub max_errors: Option<String>,
    /// The name of the SSM document to apply.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// An output location block. Output Location is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputLocation"
    )]
    #[builder(default, setter(strip_option))]
    pub output_location: Option<AssociationStatusAtProviderOutputLocation>,
    /// A block of arbitrary string parameters to pass to the SSM document.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<BTreeMap<String, String>>,
    /// A cron or rate expression that specifies when the association runs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scheduleExpression"
    )]
    #[builder(default, setter(strip_option))]
    pub schedule_expression: Option<String>,
    /// The mode for generating association compliance. You can specify AUTO or MANUAL.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "syncCompliance"
    )]
    #[builder(default, setter(strip_option))]
    pub sync_compliance: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// A block containing the targets of the SSM association. Targets are documented below. AWS currently supports a maximum of 5 targets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub targets: Option<Vec<AssociationStatusAtProviderTargets>>,
    /// The number of seconds to wait for the association status to be Success. If Success status is not reached within the given time, create opration will fail.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "waitForSuccessTimeoutSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub wait_for_success_timeout_seconds: Option<f64>,
}

/// An output location block. Output Location is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationStatusAtProviderOutputLocation {
    /// The S3 bucket name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketName"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_name: Option<String>,
    /// The S3 bucket prefix. Results stored in the root if not configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3KeyPrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_key_prefix: Option<String>,
    /// The S3 bucket region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Region")]
    #[builder(default, setter(strip_option))]
    pub s3_region: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AssociationStatusAtProviderTargets {
    /// Either InstanceIds or tag:Tag Name to specify an EC2 tag.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// A list of instance IDs or tag values. AWS currently limits this list size to one value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// PolicySpec defines the desired state of Policy
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "appautoscaling.aws.upbound.io",
    version = "v1beta2",
    kind = "Policy",
    plural = "policies"
)]
#[kube(status = "PolicyStatus")]
pub struct PolicySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<PolicyDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: PolicyForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<PolicyInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<PolicyProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<PolicyPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<PolicyWriteConnectionSecretToRef>,
}

/// PolicySpec defines the desired state of Policy
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProvider {
    /// Policy type. Valid values are StepScaling and TargetTrackingScaling. Defaults to StepScaling. Certain services only support only one policy type. For more information see the Target Tracking Scaling Policies and Step Scaling Policies documentation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "policyType"
    )]
    #[builder(default, setter(strip_option))]
    pub policy_type: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Resource type and unique identifier string for the resource associated with the scaling policy. Documentation can be found in the ResourceId parameter at: AWS Application Auto Scaling API Reference
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceId"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_id: Option<String>,
    /// Reference to a Target in appautoscaling to populate resourceId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_id_ref: Option<PolicyForProviderResourceIdRef>,
    /// Selector for a Target in appautoscaling to populate resourceId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_id_selector: Option<PolicyForProviderResourceIdSelector>,
    /// Scalable dimension of the scalable target. Documentation can be found in the ScalableDimension parameter at: AWS Application Auto Scaling API Reference
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scalableDimension"
    )]
    #[builder(default, setter(strip_option))]
    pub scalable_dimension: Option<String>,
    /// Reference to a Target in appautoscaling to populate scalableDimension.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scalableDimensionRef"
    )]
    #[builder(default, setter(strip_option))]
    pub scalable_dimension_ref: Option<PolicyForProviderScalableDimensionRef>,
    /// Selector for a Target in appautoscaling to populate scalableDimension.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scalableDimensionSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub scalable_dimension_selector: Option<PolicyForProviderScalableDimensionSelector>,
    /// AWS service namespace of the scalable target. Documentation can be found in the ServiceNamespace parameter at: AWS Application Auto Scaling API Reference
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceNamespace"
    )]
    #[builder(default, setter(strip_option))]
    pub service_namespace: Option<String>,
    /// Reference to a Target in appautoscaling to populate serviceNamespace.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceNamespaceRef"
    )]
    #[builder(default, setter(strip_option))]
    pub service_namespace_ref: Option<PolicyForProviderServiceNamespaceRef>,
    /// Selector for a Target in appautoscaling to populate serviceNamespace.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceNamespaceSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub service_namespace_selector: Option<PolicyForProviderServiceNamespaceSelector>,
    /// Step scaling policy configuration, requires policy_type = "StepScaling" (default). See supported fields below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stepScalingPolicyConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub step_scaling_policy_configuration: Option<PolicyForProviderStepScalingPolicyConfiguration>,
    /// Target tracking policy, requires policy_type = "TargetTrackingScaling". See supported fields below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetTrackingScalingPolicyConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub target_tracking_scaling_policy_configuration:
        Option<PolicyForProviderTargetTrackingScalingPolicyConfiguration>,
}

/// Reference to a Target in appautoscaling to populate resourceId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderResourceIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<PolicyForProviderResourceIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderResourceIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<PolicyForProviderResourceIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<PolicyForProviderResourceIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderResourceIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderResourceIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Target in appautoscaling to populate resourceId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderResourceIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<PolicyForProviderResourceIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderResourceIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<PolicyForProviderResourceIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<PolicyForProviderResourceIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderResourceIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderResourceIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Target in appautoscaling to populate scalableDimension.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderScalableDimensionRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<PolicyForProviderScalableDimensionRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderScalableDimensionRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<PolicyForProviderScalableDimensionRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<PolicyForProviderScalableDimensionRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderScalableDimensionRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderScalableDimensionRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Target in appautoscaling to populate scalableDimension.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderScalableDimensionSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<PolicyForProviderScalableDimensionSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderScalableDimensionSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<PolicyForProviderScalableDimensionSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<PolicyForProviderScalableDimensionSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderScalableDimensionSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderScalableDimensionSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Target in appautoscaling to populate serviceNamespace.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderServiceNamespaceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<PolicyForProviderServiceNamespaceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderServiceNamespaceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<PolicyForProviderServiceNamespaceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<PolicyForProviderServiceNamespaceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderServiceNamespaceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderServiceNamespaceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Target in appautoscaling to populate serviceNamespace.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderServiceNamespaceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<PolicyForProviderServiceNamespaceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderServiceNamespaceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<PolicyForProviderServiceNamespaceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<PolicyForProviderServiceNamespaceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderServiceNamespaceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderServiceNamespaceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Step scaling policy configuration, requires policy_type = "StepScaling" (default). See supported fields below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderStepScalingPolicyConfiguration {
    /// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adjustmentType"
    )]
    #[builder(default, setter(strip_option))]
    pub adjustment_type: Option<String>,
    /// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cooldown: Option<f64>,
    /// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metricAggregationType"
    )]
    #[builder(default, setter(strip_option))]
    pub metric_aggregation_type: Option<String>,
    /// Minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minAdjustmentMagnitude"
    )]
    #[builder(default, setter(strip_option))]
    pub min_adjustment_magnitude: Option<f64>,
    /// Set of adjustments that manage scaling. These have the following structure:
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stepAdjustment"
    )]
    #[builder(default, setter(strip_option))]
    pub step_adjustment: Option<Vec<PolicyForProviderStepScalingPolicyConfigurationStepAdjustment>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderStepScalingPolicyConfigurationStepAdjustment {
    /// Lower bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as negative infinity.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metricIntervalLowerBound"
    )]
    #[builder(default, setter(strip_option))]
    pub metric_interval_lower_bound: Option<String>,
    /// Upper bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as infinity. The upper bound must be greater than the lower bound.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metricIntervalUpperBound"
    )]
    #[builder(default, setter(strip_option))]
    pub metric_interval_upper_bound: Option<String>,
    /// Number of members by which to scale, when the adjustment bounds are breached. A positive value scales up. A negative value scales down.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scalingAdjustment"
    )]
    #[builder(default, setter(strip_option))]
    pub scaling_adjustment: Option<f64>,
}

/// Target tracking policy, requires policy_type = "TargetTrackingScaling". See supported fields below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderTargetTrackingScalingPolicyConfiguration {
    /// Custom CloudWatch metric. Documentation can be found  at: AWS Customized Metric Specification. See supported fields below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customizedMetricSpecification"
    )]
    #[builder(default, setter(strip_option))]
    pub customized_metric_specification: Option<
        PolicyForProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification,
    >,
    /// Whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableScaleIn"
    )]
    #[builder(default, setter(strip_option))]
    pub disable_scale_in: Option<bool>,
    /// Predefined metric. See supported fields below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "predefinedMetricSpecification"
    )]
    #[builder(default, setter(strip_option))]
    pub predefined_metric_specification: Option<
        PolicyForProviderTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification,
    >,
    /// Amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleInCooldown"
    )]
    #[builder(default, setter(strip_option))]
    pub scale_in_cooldown: Option<f64>,
    /// Amount of time, in seconds, after a scale out activity completes before another scale out activity can start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleOutCooldown"
    )]
    #[builder(default, setter(strip_option))]
    pub scale_out_cooldown: Option<f64>,
    /// Target value for the metric.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetValue"
    )]
    #[builder(default, setter(strip_option))]
    pub target_value: Option<f64>,
}

/// Custom CloudWatch metric. Documentation can be found  at: AWS Customized Metric Specification. See supported fields below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification {
    /// Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub dimensions: Option<Vec<PolicyForProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensions>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default, setter(strip_option))]
    pub metric_name: Option<String>,
    /// Metrics to include, as a metric data query.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metrics: Option<Vec<PolicyForProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetrics>>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub namespace: Option<String>,
    /// Statistic of the metric. Valid values: Average, Minimum, Maximum, SampleCount, and Sum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub statistic: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensions
{
    /// Name of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetrics {
    /// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub expression: Option<String>,
    /// Short name for the metric used in target tracking scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Human-readable label for this metric or expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub label: Option<String>,
    /// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricStat")]
    #[builder(default, setter(strip_option))]
    pub metric_stat: Option<PolicyForProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricsMetricStat>,
    /// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnData")]
    #[builder(default, setter(strip_option))]
    pub return_data: Option<bool>,
}

/// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricsMetricStat {
    /// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metric: Option<PolicyForProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricsMetricStatMetric>,
    /// Statistic of the metrics to return.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub stat: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub unit: Option<String>,
}

/// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricsMetricStatMetric {
    /// Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub dimensions: Option<Vec<PolicyForProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricsMetricStatMetricDimensions>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default, setter(strip_option))]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricsMetricStatMetricDimensions
{
    /// Name of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Predefined metric. See supported fields below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyForProviderTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification {
    /// Metric type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "predefinedMetricType"
    )]
    #[builder(default, setter(strip_option))]
    pub predefined_metric_type: Option<String>,
    /// Reserved for future use if the predefined_metric_type is not ALBRequestCountPerTarget. If the predefined_metric_type is ALBRequestCountPerTarget, you must specify this argument. Documentation can be found at: AWS Predefined Scaling Metric Specification. Must be less than or equal to 1023 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceLabel"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_label: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyInitProvider {
    /// Policy type. Valid values are StepScaling and TargetTrackingScaling. Defaults to StepScaling. Certain services only support only one policy type. For more information see the Target Tracking Scaling Policies and Step Scaling Policies documentation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "policyType"
    )]
    #[builder(default, setter(strip_option))]
    pub policy_type: Option<String>,
    /// Step scaling policy configuration, requires policy_type = "StepScaling" (default). See supported fields below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stepScalingPolicyConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub step_scaling_policy_configuration: Option<PolicyInitProviderStepScalingPolicyConfiguration>,
    /// Target tracking policy, requires policy_type = "TargetTrackingScaling". See supported fields below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetTrackingScalingPolicyConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub target_tracking_scaling_policy_configuration:
        Option<PolicyInitProviderTargetTrackingScalingPolicyConfiguration>,
}

/// Step scaling policy configuration, requires policy_type = "StepScaling" (default). See supported fields below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyInitProviderStepScalingPolicyConfiguration {
    /// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adjustmentType"
    )]
    #[builder(default, setter(strip_option))]
    pub adjustment_type: Option<String>,
    /// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cooldown: Option<f64>,
    /// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metricAggregationType"
    )]
    #[builder(default, setter(strip_option))]
    pub metric_aggregation_type: Option<String>,
    /// Minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minAdjustmentMagnitude"
    )]
    #[builder(default, setter(strip_option))]
    pub min_adjustment_magnitude: Option<f64>,
    /// Set of adjustments that manage scaling. These have the following structure:
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stepAdjustment"
    )]
    #[builder(default, setter(strip_option))]
    pub step_adjustment:
        Option<Vec<PolicyInitProviderStepScalingPolicyConfigurationStepAdjustment>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyInitProviderStepScalingPolicyConfigurationStepAdjustment {
    /// Lower bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as negative infinity.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metricIntervalLowerBound"
    )]
    #[builder(default, setter(strip_option))]
    pub metric_interval_lower_bound: Option<String>,
    /// Upper bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as infinity. The upper bound must be greater than the lower bound.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metricIntervalUpperBound"
    )]
    #[builder(default, setter(strip_option))]
    pub metric_interval_upper_bound: Option<String>,
    /// Number of members by which to scale, when the adjustment bounds are breached. A positive value scales up. A negative value scales down.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scalingAdjustment"
    )]
    #[builder(default, setter(strip_option))]
    pub scaling_adjustment: Option<f64>,
}

/// Target tracking policy, requires policy_type = "TargetTrackingScaling". See supported fields below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyInitProviderTargetTrackingScalingPolicyConfiguration {
    /// Custom CloudWatch metric. Documentation can be found  at: AWS Customized Metric Specification. See supported fields below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customizedMetricSpecification"
    )]
    #[builder(default, setter(strip_option))]
    pub customized_metric_specification: Option<
        PolicyInitProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification,
    >,
    /// Whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableScaleIn"
    )]
    #[builder(default, setter(strip_option))]
    pub disable_scale_in: Option<bool>,
    /// Predefined metric. See supported fields below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "predefinedMetricSpecification"
    )]
    #[builder(default, setter(strip_option))]
    pub predefined_metric_specification: Option<
        PolicyInitProviderTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification,
    >,
    /// Amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleInCooldown"
    )]
    #[builder(default, setter(strip_option))]
    pub scale_in_cooldown: Option<f64>,
    /// Amount of time, in seconds, after a scale out activity completes before another scale out activity can start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleOutCooldown"
    )]
    #[builder(default, setter(strip_option))]
    pub scale_out_cooldown: Option<f64>,
    /// Target value for the metric.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetValue"
    )]
    #[builder(default, setter(strip_option))]
    pub target_value: Option<f64>,
}

/// Custom CloudWatch metric. Documentation can be found  at: AWS Customized Metric Specification. See supported fields below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyInitProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification {
    /// Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub dimensions: Option<Vec<PolicyInitProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensions>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default, setter(strip_option))]
    pub metric_name: Option<String>,
    /// Metrics to include, as a metric data query.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metrics: Option<Vec<PolicyInitProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetrics>>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub namespace: Option<String>,
    /// Statistic of the metric. Valid values: Average, Minimum, Maximum, SampleCount, and Sum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub statistic: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyInitProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensions
{
    /// Name of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyInitProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetrics {
    /// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub expression: Option<String>,
    /// Short name for the metric used in target tracking scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Human-readable label for this metric or expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub label: Option<String>,
    /// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricStat")]
    #[builder(default, setter(strip_option))]
    pub metric_stat: Option<PolicyInitProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricsMetricStat>,
    /// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnData")]
    #[builder(default, setter(strip_option))]
    pub return_data: Option<bool>,
}

/// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyInitProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricsMetricStat {
    /// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metric: Option<PolicyInitProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricsMetricStatMetric>,
    /// Statistic of the metrics to return.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub stat: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub unit: Option<String>,
}

/// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyInitProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricsMetricStatMetric {
    /// Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub dimensions: Option<Vec<PolicyInitProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricsMetricStatMetricDimensions>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default, setter(strip_option))]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyInitProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricsMetricStatMetricDimensions
{
    /// Name of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Predefined metric. See supported fields below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyInitProviderTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification {
    /// Metric type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "predefinedMetricType"
    )]
    #[builder(default, setter(strip_option))]
    pub predefined_metric_type: Option<String>,
    /// Reserved for future use if the predefined_metric_type is not ALBRequestCountPerTarget. If the predefined_metric_type is ALBRequestCountPerTarget, you must specify this argument. Documentation can be found at: AWS Predefined Scaling Metric Specification. Must be less than or equal to 1023 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceLabel"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_label: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<PolicyProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<PolicyProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<PolicyProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<PolicyPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<PolicyPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<PolicyPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<PolicyPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<PolicyPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// PolicyStatus defines the observed state of Policy.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<PolicyStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyStatusAtProvider {
    /// List of CloudWatch alarm ARNs associated with the scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alarmArns")]
    #[builder(default, setter(strip_option))]
    pub alarm_arns: Option<Vec<String>>,
    /// ARN assigned by AWS to the scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Short name for the metric used in target tracking scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Policy type. Valid values are StepScaling and TargetTrackingScaling. Defaults to StepScaling. Certain services only support only one policy type. For more information see the Target Tracking Scaling Policies and Step Scaling Policies documentation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "policyType"
    )]
    #[builder(default, setter(strip_option))]
    pub policy_type: Option<String>,
    /// Resource type and unique identifier string for the resource associated with the scaling policy. Documentation can be found in the ResourceId parameter at: AWS Application Auto Scaling API Reference
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceId"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_id: Option<String>,
    /// Scalable dimension of the scalable target. Documentation can be found in the ScalableDimension parameter at: AWS Application Auto Scaling API Reference
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scalableDimension"
    )]
    #[builder(default, setter(strip_option))]
    pub scalable_dimension: Option<String>,
    /// AWS service namespace of the scalable target. Documentation can be found in the ServiceNamespace parameter at: AWS Application Auto Scaling API Reference
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceNamespace"
    )]
    #[builder(default, setter(strip_option))]
    pub service_namespace: Option<String>,
    /// Step scaling policy configuration, requires policy_type = "StepScaling" (default). See supported fields below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stepScalingPolicyConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub step_scaling_policy_configuration:
        Option<PolicyStatusAtProviderStepScalingPolicyConfiguration>,
    /// Target tracking policy, requires policy_type = "TargetTrackingScaling". See supported fields below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetTrackingScalingPolicyConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub target_tracking_scaling_policy_configuration:
        Option<PolicyStatusAtProviderTargetTrackingScalingPolicyConfiguration>,
}

/// Step scaling policy configuration, requires policy_type = "StepScaling" (default). See supported fields below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyStatusAtProviderStepScalingPolicyConfiguration {
    /// Whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "adjustmentType"
    )]
    #[builder(default, setter(strip_option))]
    pub adjustment_type: Option<String>,
    /// Amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cooldown: Option<f64>,
    /// Aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metricAggregationType"
    )]
    #[builder(default, setter(strip_option))]
    pub metric_aggregation_type: Option<String>,
    /// Minimum number to adjust your scalable dimension as a result of a scaling activity. If the adjustment type is PercentChangeInCapacity, the scaling policy changes the scalable dimension of the scalable target by this amount.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minAdjustmentMagnitude"
    )]
    #[builder(default, setter(strip_option))]
    pub min_adjustment_magnitude: Option<f64>,
    /// Set of adjustments that manage scaling. These have the following structure:
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stepAdjustment"
    )]
    #[builder(default, setter(strip_option))]
    pub step_adjustment:
        Option<Vec<PolicyStatusAtProviderStepScalingPolicyConfigurationStepAdjustment>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyStatusAtProviderStepScalingPolicyConfigurationStepAdjustment {
    /// Lower bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as negative infinity.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metricIntervalLowerBound"
    )]
    #[builder(default, setter(strip_option))]
    pub metric_interval_lower_bound: Option<String>,
    /// Upper bound for the difference between the alarm threshold and the CloudWatch metric. Without a value, AWS will treat this bound as infinity. The upper bound must be greater than the lower bound.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metricIntervalUpperBound"
    )]
    #[builder(default, setter(strip_option))]
    pub metric_interval_upper_bound: Option<String>,
    /// Number of members by which to scale, when the adjustment bounds are breached. A positive value scales up. A negative value scales down.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scalingAdjustment"
    )]
    #[builder(default, setter(strip_option))]
    pub scaling_adjustment: Option<f64>,
}

/// Target tracking policy, requires policy_type = "TargetTrackingScaling". See supported fields below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyStatusAtProviderTargetTrackingScalingPolicyConfiguration {
    /// Custom CloudWatch metric. Documentation can be found  at: AWS Customized Metric Specification. See supported fields below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customizedMetricSpecification"
    )]
    #[builder(default, setter(strip_option))]
    pub customized_metric_specification: Option<
        PolicyStatusAtProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification,
    >,
    /// Whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableScaleIn"
    )]
    #[builder(default, setter(strip_option))]
    pub disable_scale_in: Option<bool>,
    /// Predefined metric. See supported fields below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "predefinedMetricSpecification"
    )]
    #[builder(default, setter(strip_option))]
    pub predefined_metric_specification: Option<
        PolicyStatusAtProviderTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification,
    >,
    /// Amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleInCooldown"
    )]
    #[builder(default, setter(strip_option))]
    pub scale_in_cooldown: Option<f64>,
    /// Amount of time, in seconds, after a scale out activity completes before another scale out activity can start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleOutCooldown"
    )]
    #[builder(default, setter(strip_option))]
    pub scale_out_cooldown: Option<f64>,
    /// Target value for the metric.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetValue"
    )]
    #[builder(default, setter(strip_option))]
    pub target_value: Option<f64>,
}

/// Custom CloudWatch metric. Documentation can be found  at: AWS Customized Metric Specification. See supported fields below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyStatusAtProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecification {
    /// Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub dimensions: Option<Vec<PolicyStatusAtProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensions>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default, setter(strip_option))]
    pub metric_name: Option<String>,
    /// Metrics to include, as a metric data query.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metrics: Option<Vec<PolicyStatusAtProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetrics>>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub namespace: Option<String>,
    /// Statistic of the metric. Valid values: Average, Minimum, Maximum, SampleCount, and Sum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub statistic: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyStatusAtProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationDimensions
{
    /// Name of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyStatusAtProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetrics {
    /// Math expression used on the returned metric. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub expression: Option<String>,
    /// Short name for the metric used in target tracking scaling policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Human-readable label for this metric or expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub label: Option<String>,
    /// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricStat")]
    #[builder(default, setter(strip_option))]
    pub metric_stat: Option<PolicyStatusAtProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricsMetricStat>,
    /// Boolean that indicates whether to return the timestamps and raw data values of this metric, the default is true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnData")]
    #[builder(default, setter(strip_option))]
    pub return_data: Option<bool>,
}

/// Structure that defines CloudWatch metric to be used in target tracking scaling policy. You must specify either expression or metric_stat, but not both.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyStatusAtProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricsMetricStat {
    /// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metric: Option<PolicyStatusAtProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricsMetricStatMetric>,
    /// Statistic of the metrics to return.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub stat: Option<String>,
    /// Unit of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub unit: Option<String>,
}

/// Structure that defines the CloudWatch metric to return, including the metric name, namespace, and dimensions.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyStatusAtProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricsMetricStatMetric {
    /// Configuration block(s) with the dimensions of the metric if the metric was published with dimensions. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub dimensions: Option<Vec<PolicyStatusAtProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricsMetricStatMetricDimensions>>,
    /// Name of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    #[builder(default, setter(strip_option))]
    pub metric_name: Option<String>,
    /// Namespace of the metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub namespace: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyStatusAtProviderTargetTrackingScalingPolicyConfigurationCustomizedMetricSpecificationMetricsMetricStatMetricDimensions
{
    /// Name of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Value of the dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Predefined metric. See supported fields below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PolicyStatusAtProviderTargetTrackingScalingPolicyConfigurationPredefinedMetricSpecification
{
    /// Metric type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "predefinedMetricType"
    )]
    #[builder(default, setter(strip_option))]
    pub predefined_metric_type: Option<String>,
    /// Reserved for future use if the predefined_metric_type is not ALBRequestCountPerTarget. If the predefined_metric_type is ALBRequestCountPerTarget, you must specify this argument. Documentation can be found at: AWS Predefined Scaling Metric Specification. Must be less than or equal to 1023 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceLabel"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_label: Option<String>,
}

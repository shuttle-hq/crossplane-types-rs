// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// TargetSpec defines the desired state of Target
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "cloudwatchevents.aws.upbound.io",
    version = "v1beta2",
    kind = "Target",
    plural = "targets"
)]
#[kube(status = "TargetStatus")]
pub struct TargetSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<TargetDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: TargetForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<TargetInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<TargetProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<TargetPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<TargetWriteConnectionSecretToRef>,
}

/// TargetSpec defines the desired state of Target
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProvider {
    /// Parameters used when you are using the rule to invoke an AppSync GraphQL API mutation. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appsyncTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub appsync_target: Option<TargetForProviderAppsyncTarget>,
    /// The Amazon Resource Name (ARN) of the target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Parameters used when you are using the rule to invoke an Amazon Batch Job. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "batchTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub batch_target: Option<TargetForProviderBatchTarget>,
    /// Parameters used when you are providing a dead letter config. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deadLetterConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub dead_letter_config: Option<TargetForProviderDeadLetterConfig>,
    /// Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecsTarget")]
    #[builder(default, setter(strip_option))]
    pub ecs_target: Option<TargetForProviderEcsTarget>,
    /// The name or ARN of the event bus to associate with the rule.
    /// If you omit this, the default event bus is used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventBusName"
    )]
    #[builder(default, setter(strip_option))]
    pub event_bus_name: Option<String>,
    /// Reference to a Bus in cloudwatchevents to populate eventBusName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventBusNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub event_bus_name_ref: Option<TargetForProviderEventBusNameRef>,
    /// Selector for a Bus in cloudwatchevents to populate eventBusName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventBusNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub event_bus_name_selector: Option<TargetForProviderEventBusNameSelector>,
    /// Used to delete managed rules created by AWS. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forceDestroy"
    )]
    #[builder(default, setter(strip_option))]
    pub force_destroy: Option<bool>,
    /// Parameters used when you are using the rule to invoke an API Gateway REST endpoint. Documented below. A maximum of 1 is allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub http_target: Option<TargetForProviderHttpTarget>,
    /// Valid JSON text passed to the target. Conflicts with input_path and input_transformer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub input: Option<String>,
    /// The value of the JSONPath that is used for extracting part of the matched event when passing it to the target. Conflicts with input and input_transformer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputPath")]
    #[builder(default, setter(strip_option))]
    pub input_path: Option<String>,
    /// Parameters used when you are providing a custom input to a target based on certain event data. Conflicts with input and input_path.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputTransformer"
    )]
    #[builder(default, setter(strip_option))]
    pub input_transformer: Option<TargetForProviderInputTransformer>,
    /// Parameters used when you are using the rule to invoke an Amazon Kinesis Stream. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub kinesis_target: Option<TargetForProviderKinesisTarget>,
    /// Parameters used when you are using the rule to invoke an Amazon Redshift Statement. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "redshiftTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub redshift_target: Option<TargetForProviderRedshiftTarget>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Parameters used when you are providing retry policies. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retryPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub retry_policy: Option<TargetForProviderRetryPolicy>,
    /// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. Required if ecs_target is used or target in arn is EC2 instance, Kinesis data stream, Step Functions state machine, or Event Bus in different account or region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default, setter(strip_option))]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub role_arn_ref: Option<TargetForProviderRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub role_arn_selector: Option<TargetForProviderRoleArnSelector>,
    /// The name of the rule you want to add targets to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub rule: Option<String>,
    /// Reference to a Rule in cloudwatchevents to populate rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleRef")]
    #[builder(default, setter(strip_option))]
    pub rule_ref: Option<TargetForProviderRuleRef>,
    /// Selector for a Rule in cloudwatchevents to populate rule.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ruleSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub rule_selector: Option<TargetForProviderRuleSelector>,
    /// Parameters used when you are using the rule to invoke Amazon EC2 Run Command. Documented below. A maximum of 5 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runCommandTargets"
    )]
    #[builder(default, setter(strip_option))]
    pub run_command_targets: Option<Vec<TargetForProviderRunCommandTargets>>,
    /// Parameters used when you are using the rule to invoke an Amazon SageMaker Pipeline. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerPipelineTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_pipeline_target: Option<TargetForProviderSagemakerPipelineTarget>,
    /// Parameters used when you are using the rule to invoke an Amazon SQS Queue. Documented below. A maximum of 1 are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqsTarget")]
    #[builder(default, setter(strip_option))]
    pub sqs_target: Option<TargetForProviderSqsTarget>,
    /// The unique target assignment ID. If missing, will generate a random, unique id.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetId")]
    #[builder(default, setter(strip_option))]
    pub target_id: Option<String>,
}

/// Parameters used when you are using the rule to invoke an AppSync GraphQL API mutation. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderAppsyncTarget {
    /// Contains the GraphQL mutation to be parsed and executed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "graphqlOperation"
    )]
    #[builder(default, setter(strip_option))]
    pub graphql_operation: Option<String>,
}

/// Parameters used when you are using the rule to invoke an Amazon Batch Job. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderBatchTarget {
    /// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "arraySize")]
    #[builder(default, setter(strip_option))]
    pub array_size: Option<f64>,
    /// The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jobAttempts"
    )]
    #[builder(default, setter(strip_option))]
    pub job_attempts: Option<f64>,
    /// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jobDefinition"
    )]
    #[builder(default, setter(strip_option))]
    pub job_definition: Option<String>,
    /// The name to use for this execution of the job, if the target is an AWS Batch job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobName")]
    #[builder(default, setter(strip_option))]
    pub job_name: Option<String>,
}

/// Parameters used when you are providing a dead letter config. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderDeadLetterConfig {
    /// - ARN of the SQS queue specified as the target for the dead-letter queue.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
}

/// Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderEcsTarget {
    /// The capacity provider strategy to use for the task. If a capacity_provider_strategy specified, the launch_type parameter must be omitted. If no capacity_provider_strategy or launch_type is specified, the default capacity provider strategy for the cluster is used. Can be one or more. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityProviderStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_provider_strategy: Option<Vec<TargetForProviderEcsTargetCapacityProviderStrategy>>,
    /// Specifies whether to enable Amazon ECS managed tags for the task.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableEcsManagedTags"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_ecs_managed_tags: Option<bool>,
    /// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableExecuteCommand"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_execute_command: Option<bool>,
    /// Specifies an ECS task group for the task. The maximum length is 255 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub group: Option<String>,
    /// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values include: EC2, EXTERNAL, or FARGATE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchType"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_type: Option<String>,
    /// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launch_type is FARGATE because the awsvpc mode is required for Fargate tasks.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub network_configuration: Option<TargetForProviderEcsTargetNetworkConfiguration>,
    /// An array of placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "orderedPlacementStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub ordered_placement_strategy: Option<Vec<TargetForProviderEcsTargetOrderedPlacementStrategy>>,
    /// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). See Below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementConstraint"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_constraint: Option<Vec<TargetForProviderEcsTargetPlacementConstraint>>,
    /// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see AWS Fargate Platform Versions.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "platformVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub platform_version: Option<String>,
    /// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. The only valid value is: TASK_DEFINITION.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "propagateTags"
    )]
    #[builder(default, setter(strip_option))]
    pub propagate_tags: Option<String>,
    /// A map of tags to assign to ecs resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// The number of tasks to create based on the TaskDefinition. Defaults to 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "taskCount")]
    #[builder(default, setter(strip_option))]
    pub task_count: Option<f64>,
    /// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "taskDefinitionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub task_definition_arn: Option<String>,
    /// Reference to a TaskDefinition in ecs to populate taskDefinitionArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "taskDefinitionArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub task_definition_arn_ref: Option<TargetForProviderEcsTargetTaskDefinitionArnRef>,
    /// Selector for a TaskDefinition in ecs to populate taskDefinitionArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "taskDefinitionArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub task_definition_arn_selector: Option<TargetForProviderEcsTargetTaskDefinitionArnSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderEcsTargetCapacityProviderStrategy {
    /// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Defaults to 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub base: Option<f64>,
    /// Short name of the capacity provider.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_provider: Option<String>,
    /// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub weight: Option<f64>,
}

/// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launch_type is FARGATE because the awsvpc mode is required for Fargate tasks.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderEcsTargetNetworkConfiguration {
    /// Assign a public IP address to the ENI (Fargate launch type only). Valid values are true or false. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "assignPublicIp"
    )]
    #[builder(default, setter(strip_option))]
    pub assign_public_ip: Option<bool>,
    /// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroups"
    )]
    #[builder(default, setter(strip_option))]
    pub security_groups: Option<Vec<String>>,
    /// The subnets associated with the task or service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub subnets: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderEcsTargetOrderedPlacementStrategy {
    /// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used. For more information, see Amazon ECS task placement strategies.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub field: Option<String>,
    /// Type of placement strategy. The only valid values at this time are binpack, random and spread.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderEcsTargetPlacementConstraint {
    /// Cluster Query Language expression to apply to the constraint. Does not need to be specified for the distinctInstance type. For more information, see Cluster Query Language in the Amazon EC2 Container Service Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub expression: Option<String>,
    /// Type of constraint. The only valid values at this time are memberOf and distinctInstance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Reference to a TaskDefinition in ecs to populate taskDefinitionArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderEcsTargetTaskDefinitionArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TargetForProviderEcsTargetTaskDefinitionArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderEcsTargetTaskDefinitionArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TargetForProviderEcsTargetTaskDefinitionArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TargetForProviderEcsTargetTaskDefinitionArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetForProviderEcsTargetTaskDefinitionArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetForProviderEcsTargetTaskDefinitionArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TaskDefinition in ecs to populate taskDefinitionArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderEcsTargetTaskDefinitionArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TargetForProviderEcsTargetTaskDefinitionArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderEcsTargetTaskDefinitionArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TargetForProviderEcsTargetTaskDefinitionArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TargetForProviderEcsTargetTaskDefinitionArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetForProviderEcsTargetTaskDefinitionArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetForProviderEcsTargetTaskDefinitionArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Bus in cloudwatchevents to populate eventBusName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderEventBusNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TargetForProviderEventBusNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderEventBusNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TargetForProviderEventBusNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TargetForProviderEventBusNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetForProviderEventBusNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetForProviderEventBusNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bus in cloudwatchevents to populate eventBusName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderEventBusNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TargetForProviderEventBusNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderEventBusNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TargetForProviderEventBusNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TargetForProviderEventBusNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetForProviderEventBusNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetForProviderEventBusNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Parameters used when you are using the rule to invoke an API Gateway REST endpoint. Documented below. A maximum of 1 is allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderHttpTarget {
    /// Enables you to specify HTTP headers to add to the request.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "headerParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub header_parameters: Option<BTreeMap<String, String>>,
    /// The list of values that correspond sequentially to any path variables in your endpoint ARN (for example arn:aws:execute-api:us-east-1:123456:myapi/*/POST/pets/*).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pathParameterValues"
    )]
    #[builder(default, setter(strip_option))]
    pub path_parameter_values: Option<Vec<String>>,
    /// Represents keys/values of query string parameters that are appended to the invoked endpoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "queryStringParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub query_string_parameters: Option<BTreeMap<String, String>>,
}

/// Parameters used when you are providing a custom input to a target based on certain event data. Conflicts with input and input_path.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderInputTransformer {
    /// Key value pairs specified in the form of JSONPath (for example, time = $.time)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputPaths"
    )]
    #[builder(default, setter(strip_option))]
    pub input_paths: Option<BTreeMap<String, String>>,
    /// Template to customize data sent to the target. Must be valid JSON. To send a string value, the string value must include double quotes.g., "\"Your string goes here.\\nA new line.\""
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub input_template: Option<String>,
}

/// Parameters used when you are using the rule to invoke an Amazon Kinesis Stream. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderKinesisTarget {
    /// The JSON path to be extracted from the event and used as the partition key.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "partitionKeyPath"
    )]
    #[builder(default, setter(strip_option))]
    pub partition_key_path: Option<String>,
}

/// Parameters used when you are using the rule to invoke an Amazon Redshift Statement. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderRedshiftTarget {
    /// The name of the database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub database: Option<String>,
    /// The database user name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbUser")]
    #[builder(default, setter(strip_option))]
    pub db_user: Option<String>,
    /// The name or ARN of the secret that enables access to the database.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secretsManagerArn"
    )]
    #[builder(default, setter(strip_option))]
    pub secrets_manager_arn: Option<String>,
    /// The SQL statement text to run.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub sql: Option<String>,
    /// The name of the SQL statement.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statementName"
    )]
    #[builder(default, setter(strip_option))]
    pub statement_name: Option<String>,
    /// Indicates whether to send an event back to EventBridge after the SQL statement runs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withEvent")]
    #[builder(default, setter(strip_option))]
    pub with_event: Option<bool>,
}

/// Parameters used when you are providing retry policies. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderRetryPolicy {
    /// The age in seconds to continue to make retry attempts.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumEventAgeInSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub maximum_event_age_in_seconds: Option<f64>,
    /// maximum number of retry attempts to make before the request fails
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumRetryAttempts"
    )]
    #[builder(default, setter(strip_option))]
    pub maximum_retry_attempts: Option<f64>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TargetForProviderRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TargetForProviderRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TargetForProviderRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetForProviderRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetForProviderRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TargetForProviderRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TargetForProviderRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TargetForProviderRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetForProviderRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetForProviderRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Rule in cloudwatchevents to populate rule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderRuleRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TargetForProviderRuleRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderRuleRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TargetForProviderRuleRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TargetForProviderRuleRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetForProviderRuleRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetForProviderRuleRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Rule in cloudwatchevents to populate rule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderRuleSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TargetForProviderRuleSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderRuleSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TargetForProviderRuleSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TargetForProviderRuleSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetForProviderRuleSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetForProviderRuleSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderRunCommandTargets {
    /// Can be either tag:tag-key or InstanceIds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// If Key is tag:tag-key, Values is a list of tag values. If Key is InstanceIds, Values is a list of Amazon EC2 instance IDs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

/// Parameters used when you are using the rule to invoke an Amazon SageMaker Pipeline. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderSagemakerPipelineTarget {
    /// List of Parameter names and values for SageMaker Model Building Pipeline execution.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pipelineParameterList"
    )]
    #[builder(default, setter(strip_option))]
    pub pipeline_parameter_list:
        Option<Vec<TargetForProviderSagemakerPipelineTargetPipelineParameterList>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderSagemakerPipelineTargetPipelineParameterList {
    /// Name of parameter to start execution of a SageMaker Model Building Pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Value of parameter to start execution of a SageMaker Model Building Pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Parameters used when you are using the rule to invoke an Amazon SQS Queue. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetForProviderSqsTarget {
    /// The FIFO message group ID to use as the target.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "messageGroupId"
    )]
    #[builder(default, setter(strip_option))]
    pub message_group_id: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProvider {
    /// Parameters used when you are using the rule to invoke an AppSync GraphQL API mutation. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appsyncTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub appsync_target: Option<TargetInitProviderAppsyncTarget>,
    /// The Amazon Resource Name (ARN) of the target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Parameters used when you are using the rule to invoke an Amazon Batch Job. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "batchTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub batch_target: Option<TargetInitProviderBatchTarget>,
    /// Parameters used when you are providing a dead letter config. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deadLetterConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub dead_letter_config: Option<TargetInitProviderDeadLetterConfig>,
    /// Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecsTarget")]
    #[builder(default, setter(strip_option))]
    pub ecs_target: Option<TargetInitProviderEcsTarget>,
    /// The name or ARN of the event bus to associate with the rule.
    /// If you omit this, the default event bus is used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventBusName"
    )]
    #[builder(default, setter(strip_option))]
    pub event_bus_name: Option<String>,
    /// Reference to a Bus in cloudwatchevents to populate eventBusName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventBusNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub event_bus_name_ref: Option<TargetInitProviderEventBusNameRef>,
    /// Selector for a Bus in cloudwatchevents to populate eventBusName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventBusNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub event_bus_name_selector: Option<TargetInitProviderEventBusNameSelector>,
    /// Used to delete managed rules created by AWS. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forceDestroy"
    )]
    #[builder(default, setter(strip_option))]
    pub force_destroy: Option<bool>,
    /// Parameters used when you are using the rule to invoke an API Gateway REST endpoint. Documented below. A maximum of 1 is allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub http_target: Option<TargetInitProviderHttpTarget>,
    /// Valid JSON text passed to the target. Conflicts with input_path and input_transformer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub input: Option<String>,
    /// The value of the JSONPath that is used for extracting part of the matched event when passing it to the target. Conflicts with input and input_transformer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputPath")]
    #[builder(default, setter(strip_option))]
    pub input_path: Option<String>,
    /// Parameters used when you are providing a custom input to a target based on certain event data. Conflicts with input and input_path.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputTransformer"
    )]
    #[builder(default, setter(strip_option))]
    pub input_transformer: Option<TargetInitProviderInputTransformer>,
    /// Parameters used when you are using the rule to invoke an Amazon Kinesis Stream. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub kinesis_target: Option<TargetInitProviderKinesisTarget>,
    /// Parameters used when you are using the rule to invoke an Amazon Redshift Statement. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "redshiftTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub redshift_target: Option<TargetInitProviderRedshiftTarget>,
    /// Parameters used when you are providing retry policies. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retryPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub retry_policy: Option<TargetInitProviderRetryPolicy>,
    /// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. Required if ecs_target is used or target in arn is EC2 instance, Kinesis data stream, Step Functions state machine, or Event Bus in different account or region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default, setter(strip_option))]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub role_arn_ref: Option<TargetInitProviderRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub role_arn_selector: Option<TargetInitProviderRoleArnSelector>,
    /// The name of the rule you want to add targets to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub rule: Option<String>,
    /// Reference to a Rule in cloudwatchevents to populate rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleRef")]
    #[builder(default, setter(strip_option))]
    pub rule_ref: Option<TargetInitProviderRuleRef>,
    /// Selector for a Rule in cloudwatchevents to populate rule.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ruleSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub rule_selector: Option<TargetInitProviderRuleSelector>,
    /// Parameters used when you are using the rule to invoke Amazon EC2 Run Command. Documented below. A maximum of 5 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runCommandTargets"
    )]
    #[builder(default, setter(strip_option))]
    pub run_command_targets: Option<Vec<TargetInitProviderRunCommandTargets>>,
    /// Parameters used when you are using the rule to invoke an Amazon SageMaker Pipeline. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerPipelineTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_pipeline_target: Option<TargetInitProviderSagemakerPipelineTarget>,
    /// Parameters used when you are using the rule to invoke an Amazon SQS Queue. Documented below. A maximum of 1 are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqsTarget")]
    #[builder(default, setter(strip_option))]
    pub sqs_target: Option<TargetInitProviderSqsTarget>,
    /// The unique target assignment ID. If missing, will generate a random, unique id.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetId")]
    #[builder(default, setter(strip_option))]
    pub target_id: Option<String>,
}

/// Parameters used when you are using the rule to invoke an AppSync GraphQL API mutation. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderAppsyncTarget {
    /// Contains the GraphQL mutation to be parsed and executed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "graphqlOperation"
    )]
    #[builder(default, setter(strip_option))]
    pub graphql_operation: Option<String>,
}

/// Parameters used when you are using the rule to invoke an Amazon Batch Job. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderBatchTarget {
    /// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "arraySize")]
    #[builder(default, setter(strip_option))]
    pub array_size: Option<f64>,
    /// The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jobAttempts"
    )]
    #[builder(default, setter(strip_option))]
    pub job_attempts: Option<f64>,
    /// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jobDefinition"
    )]
    #[builder(default, setter(strip_option))]
    pub job_definition: Option<String>,
    /// The name to use for this execution of the job, if the target is an AWS Batch job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobName")]
    #[builder(default, setter(strip_option))]
    pub job_name: Option<String>,
}

/// Parameters used when you are providing a dead letter config. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderDeadLetterConfig {
    /// - ARN of the SQS queue specified as the target for the dead-letter queue.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
}

/// Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderEcsTarget {
    /// The capacity provider strategy to use for the task. If a capacity_provider_strategy specified, the launch_type parameter must be omitted. If no capacity_provider_strategy or launch_type is specified, the default capacity provider strategy for the cluster is used. Can be one or more. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityProviderStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_provider_strategy:
        Option<Vec<TargetInitProviderEcsTargetCapacityProviderStrategy>>,
    /// Specifies whether to enable Amazon ECS managed tags for the task.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableEcsManagedTags"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_ecs_managed_tags: Option<bool>,
    /// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableExecuteCommand"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_execute_command: Option<bool>,
    /// Specifies an ECS task group for the task. The maximum length is 255 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub group: Option<String>,
    /// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values include: EC2, EXTERNAL, or FARGATE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchType"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_type: Option<String>,
    /// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launch_type is FARGATE because the awsvpc mode is required for Fargate tasks.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub network_configuration: Option<TargetInitProviderEcsTargetNetworkConfiguration>,
    /// An array of placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "orderedPlacementStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub ordered_placement_strategy:
        Option<Vec<TargetInitProviderEcsTargetOrderedPlacementStrategy>>,
    /// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). See Below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementConstraint"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_constraint: Option<Vec<TargetInitProviderEcsTargetPlacementConstraint>>,
    /// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see AWS Fargate Platform Versions.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "platformVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub platform_version: Option<String>,
    /// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. The only valid value is: TASK_DEFINITION.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "propagateTags"
    )]
    #[builder(default, setter(strip_option))]
    pub propagate_tags: Option<String>,
    /// A map of tags to assign to ecs resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// The number of tasks to create based on the TaskDefinition. Defaults to 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "taskCount")]
    #[builder(default, setter(strip_option))]
    pub task_count: Option<f64>,
    /// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "taskDefinitionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub task_definition_arn: Option<String>,
    /// Reference to a TaskDefinition in ecs to populate taskDefinitionArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "taskDefinitionArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub task_definition_arn_ref: Option<TargetInitProviderEcsTargetTaskDefinitionArnRef>,
    /// Selector for a TaskDefinition in ecs to populate taskDefinitionArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "taskDefinitionArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub task_definition_arn_selector: Option<TargetInitProviderEcsTargetTaskDefinitionArnSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderEcsTargetCapacityProviderStrategy {
    /// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Defaults to 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub base: Option<f64>,
    /// Short name of the capacity provider.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_provider: Option<String>,
    /// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub weight: Option<f64>,
}

/// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launch_type is FARGATE because the awsvpc mode is required for Fargate tasks.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderEcsTargetNetworkConfiguration {
    /// Assign a public IP address to the ENI (Fargate launch type only). Valid values are true or false. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "assignPublicIp"
    )]
    #[builder(default, setter(strip_option))]
    pub assign_public_ip: Option<bool>,
    /// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroups"
    )]
    #[builder(default, setter(strip_option))]
    pub security_groups: Option<Vec<String>>,
    /// The subnets associated with the task or service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub subnets: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderEcsTargetOrderedPlacementStrategy {
    /// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used. For more information, see Amazon ECS task placement strategies.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub field: Option<String>,
    /// Type of placement strategy. The only valid values at this time are binpack, random and spread.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderEcsTargetPlacementConstraint {
    /// Cluster Query Language expression to apply to the constraint. Does not need to be specified for the distinctInstance type. For more information, see Cluster Query Language in the Amazon EC2 Container Service Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub expression: Option<String>,
    /// Type of constraint. The only valid values at this time are memberOf and distinctInstance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Reference to a TaskDefinition in ecs to populate taskDefinitionArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderEcsTargetTaskDefinitionArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TargetInitProviderEcsTargetTaskDefinitionArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderEcsTargetTaskDefinitionArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TargetInitProviderEcsTargetTaskDefinitionArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TargetInitProviderEcsTargetTaskDefinitionArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetInitProviderEcsTargetTaskDefinitionArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetInitProviderEcsTargetTaskDefinitionArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TaskDefinition in ecs to populate taskDefinitionArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderEcsTargetTaskDefinitionArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TargetInitProviderEcsTargetTaskDefinitionArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderEcsTargetTaskDefinitionArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TargetInitProviderEcsTargetTaskDefinitionArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TargetInitProviderEcsTargetTaskDefinitionArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetInitProviderEcsTargetTaskDefinitionArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetInitProviderEcsTargetTaskDefinitionArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Bus in cloudwatchevents to populate eventBusName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderEventBusNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TargetInitProviderEventBusNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderEventBusNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TargetInitProviderEventBusNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TargetInitProviderEventBusNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetInitProviderEventBusNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetInitProviderEventBusNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bus in cloudwatchevents to populate eventBusName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderEventBusNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TargetInitProviderEventBusNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderEventBusNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TargetInitProviderEventBusNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TargetInitProviderEventBusNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetInitProviderEventBusNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetInitProviderEventBusNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Parameters used when you are using the rule to invoke an API Gateway REST endpoint. Documented below. A maximum of 1 is allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderHttpTarget {
    /// Enables you to specify HTTP headers to add to the request.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "headerParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub header_parameters: Option<BTreeMap<String, String>>,
    /// The list of values that correspond sequentially to any path variables in your endpoint ARN (for example arn:aws:execute-api:us-east-1:123456:myapi/*/POST/pets/*).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pathParameterValues"
    )]
    #[builder(default, setter(strip_option))]
    pub path_parameter_values: Option<Vec<String>>,
    /// Represents keys/values of query string parameters that are appended to the invoked endpoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "queryStringParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub query_string_parameters: Option<BTreeMap<String, String>>,
}

/// Parameters used when you are providing a custom input to a target based on certain event data. Conflicts with input and input_path.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderInputTransformer {
    /// Key value pairs specified in the form of JSONPath (for example, time = $.time)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputPaths"
    )]
    #[builder(default, setter(strip_option))]
    pub input_paths: Option<BTreeMap<String, String>>,
    /// Template to customize data sent to the target. Must be valid JSON. To send a string value, the string value must include double quotes.g., "\"Your string goes here.\\nA new line.\""
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub input_template: Option<String>,
}

/// Parameters used when you are using the rule to invoke an Amazon Kinesis Stream. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderKinesisTarget {
    /// The JSON path to be extracted from the event and used as the partition key.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "partitionKeyPath"
    )]
    #[builder(default, setter(strip_option))]
    pub partition_key_path: Option<String>,
}

/// Parameters used when you are using the rule to invoke an Amazon Redshift Statement. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderRedshiftTarget {
    /// The name of the database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub database: Option<String>,
    /// The database user name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbUser")]
    #[builder(default, setter(strip_option))]
    pub db_user: Option<String>,
    /// The name or ARN of the secret that enables access to the database.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secretsManagerArn"
    )]
    #[builder(default, setter(strip_option))]
    pub secrets_manager_arn: Option<String>,
    /// The SQL statement text to run.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub sql: Option<String>,
    /// The name of the SQL statement.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statementName"
    )]
    #[builder(default, setter(strip_option))]
    pub statement_name: Option<String>,
    /// Indicates whether to send an event back to EventBridge after the SQL statement runs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withEvent")]
    #[builder(default, setter(strip_option))]
    pub with_event: Option<bool>,
}

/// Parameters used when you are providing retry policies. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderRetryPolicy {
    /// The age in seconds to continue to make retry attempts.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumEventAgeInSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub maximum_event_age_in_seconds: Option<f64>,
    /// maximum number of retry attempts to make before the request fails
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumRetryAttempts"
    )]
    #[builder(default, setter(strip_option))]
    pub maximum_retry_attempts: Option<f64>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TargetInitProviderRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TargetInitProviderRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TargetInitProviderRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetInitProviderRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetInitProviderRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TargetInitProviderRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TargetInitProviderRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TargetInitProviderRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetInitProviderRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetInitProviderRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Rule in cloudwatchevents to populate rule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderRuleRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TargetInitProviderRuleRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderRuleRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TargetInitProviderRuleRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TargetInitProviderRuleRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetInitProviderRuleRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetInitProviderRuleRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Rule in cloudwatchevents to populate rule.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderRuleSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TargetInitProviderRuleSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderRuleSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TargetInitProviderRuleSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TargetInitProviderRuleSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetInitProviderRuleSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetInitProviderRuleSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderRunCommandTargets {
    /// Can be either tag:tag-key or InstanceIds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// If Key is tag:tag-key, Values is a list of tag values. If Key is InstanceIds, Values is a list of Amazon EC2 instance IDs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

/// Parameters used when you are using the rule to invoke an Amazon SageMaker Pipeline. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderSagemakerPipelineTarget {
    /// List of Parameter names and values for SageMaker Model Building Pipeline execution.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pipelineParameterList"
    )]
    #[builder(default, setter(strip_option))]
    pub pipeline_parameter_list:
        Option<Vec<TargetInitProviderSagemakerPipelineTargetPipelineParameterList>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderSagemakerPipelineTargetPipelineParameterList {
    /// Name of parameter to start execution of a SageMaker Model Building Pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Value of parameter to start execution of a SageMaker Model Building Pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Parameters used when you are using the rule to invoke an Amazon SQS Queue. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetInitProviderSqsTarget {
    /// The FIFO message group ID to use as the target.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "messageGroupId"
    )]
    #[builder(default, setter(strip_option))]
    pub message_group_id: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TargetProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TargetProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TargetProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<TargetPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<TargetPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TargetPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TargetPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TargetPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// TargetStatus defines the observed state of Target.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<TargetStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatusAtProvider {
    /// Parameters used when you are using the rule to invoke an AppSync GraphQL API mutation. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appsyncTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub appsync_target: Option<TargetStatusAtProviderAppsyncTarget>,
    /// The Amazon Resource Name (ARN) of the target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Parameters used when you are using the rule to invoke an Amazon Batch Job. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "batchTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub batch_target: Option<TargetStatusAtProviderBatchTarget>,
    /// Parameters used when you are providing a dead letter config. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deadLetterConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub dead_letter_config: Option<TargetStatusAtProviderDeadLetterConfig>,
    /// Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecsTarget")]
    #[builder(default, setter(strip_option))]
    pub ecs_target: Option<TargetStatusAtProviderEcsTarget>,
    /// The name or ARN of the event bus to associate with the rule.
    /// If you omit this, the default event bus is used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventBusName"
    )]
    #[builder(default, setter(strip_option))]
    pub event_bus_name: Option<String>,
    /// Used to delete managed rules created by AWS. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forceDestroy"
    )]
    #[builder(default, setter(strip_option))]
    pub force_destroy: Option<bool>,
    /// Parameters used when you are using the rule to invoke an API Gateway REST endpoint. Documented below. A maximum of 1 is allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub http_target: Option<TargetStatusAtProviderHttpTarget>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Valid JSON text passed to the target. Conflicts with input_path and input_transformer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub input: Option<String>,
    /// The value of the JSONPath that is used for extracting part of the matched event when passing it to the target. Conflicts with input and input_transformer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputPath")]
    #[builder(default, setter(strip_option))]
    pub input_path: Option<String>,
    /// Parameters used when you are providing a custom input to a target based on certain event data. Conflicts with input and input_path.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputTransformer"
    )]
    #[builder(default, setter(strip_option))]
    pub input_transformer: Option<TargetStatusAtProviderInputTransformer>,
    /// Parameters used when you are using the rule to invoke an Amazon Kinesis Stream. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub kinesis_target: Option<TargetStatusAtProviderKinesisTarget>,
    /// Parameters used when you are using the rule to invoke an Amazon Redshift Statement. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "redshiftTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub redshift_target: Option<TargetStatusAtProviderRedshiftTarget>,
    /// Parameters used when you are providing retry policies. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retryPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub retry_policy: Option<TargetStatusAtProviderRetryPolicy>,
    /// The Amazon Resource Name (ARN) of the IAM role to be used for this target when the rule is triggered. Required if ecs_target is used or target in arn is EC2 instance, Kinesis data stream, Step Functions state machine, or Event Bus in different account or region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default, setter(strip_option))]
    pub role_arn: Option<String>,
    /// The name of the rule you want to add targets to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub rule: Option<String>,
    /// Parameters used when you are using the rule to invoke Amazon EC2 Run Command. Documented below. A maximum of 5 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runCommandTargets"
    )]
    #[builder(default, setter(strip_option))]
    pub run_command_targets: Option<Vec<TargetStatusAtProviderRunCommandTargets>>,
    /// Parameters used when you are using the rule to invoke an Amazon SageMaker Pipeline. Documented below. A maximum of 1 are allowed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerPipelineTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_pipeline_target: Option<TargetStatusAtProviderSagemakerPipelineTarget>,
    /// Parameters used when you are using the rule to invoke an Amazon SQS Queue. Documented below. A maximum of 1 are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqsTarget")]
    #[builder(default, setter(strip_option))]
    pub sqs_target: Option<TargetStatusAtProviderSqsTarget>,
    /// The unique target assignment ID. If missing, will generate a random, unique id.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetId")]
    #[builder(default, setter(strip_option))]
    pub target_id: Option<String>,
}

/// Parameters used when you are using the rule to invoke an AppSync GraphQL API mutation. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatusAtProviderAppsyncTarget {
    /// Contains the GraphQL mutation to be parsed and executed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "graphqlOperation"
    )]
    #[builder(default, setter(strip_option))]
    pub graphql_operation: Option<String>,
}

/// Parameters used when you are using the rule to invoke an Amazon Batch Job. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatusAtProviderBatchTarget {
    /// The size of the array, if this is an array batch job. Valid values are integers between 2 and 10,000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "arraySize")]
    #[builder(default, setter(strip_option))]
    pub array_size: Option<f64>,
    /// The number of times to attempt to retry, if the job fails. Valid values are 1 to 10.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jobAttempts"
    )]
    #[builder(default, setter(strip_option))]
    pub job_attempts: Option<f64>,
    /// The ARN or name of the job definition to use if the event target is an AWS Batch job. This job definition must already exist.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jobDefinition"
    )]
    #[builder(default, setter(strip_option))]
    pub job_definition: Option<String>,
    /// The name to use for this execution of the job, if the target is an AWS Batch job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobName")]
    #[builder(default, setter(strip_option))]
    pub job_name: Option<String>,
}

/// Parameters used when you are providing a dead letter config. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatusAtProviderDeadLetterConfig {
    /// - ARN of the SQS queue specified as the target for the dead-letter queue.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
}

/// Parameters used when you are using the rule to invoke Amazon ECS Task. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatusAtProviderEcsTarget {
    /// The capacity provider strategy to use for the task. If a capacity_provider_strategy specified, the launch_type parameter must be omitted. If no capacity_provider_strategy or launch_type is specified, the default capacity provider strategy for the cluster is used. Can be one or more. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityProviderStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_provider_strategy:
        Option<Vec<TargetStatusAtProviderEcsTargetCapacityProviderStrategy>>,
    /// Specifies whether to enable Amazon ECS managed tags for the task.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableEcsManagedTags"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_ecs_managed_tags: Option<bool>,
    /// Whether or not to enable the execute command functionality for the containers in this task. If true, this enables execute command functionality on all containers in the task.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableExecuteCommand"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_execute_command: Option<bool>,
    /// Specifies an ECS task group for the task. The maximum length is 255 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub group: Option<String>,
    /// Specifies the launch type on which your task is running. The launch type that you specify here must match one of the launch type (compatibilities) of the target task. Valid values include: EC2, EXTERNAL, or FARGATE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchType"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_type: Option<String>,
    /// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launch_type is FARGATE because the awsvpc mode is required for Fargate tasks.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub network_configuration: Option<TargetStatusAtProviderEcsTargetNetworkConfiguration>,
    /// An array of placement strategy objects to use for the task. You can specify a maximum of five strategy rules per task.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "orderedPlacementStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub ordered_placement_strategy:
        Option<Vec<TargetStatusAtProviderEcsTargetOrderedPlacementStrategy>>,
    /// An array of placement constraint objects to use for the task. You can specify up to 10 constraints per task (including constraints in the task definition and those specified at runtime). See Below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementConstraint"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_constraint: Option<Vec<TargetStatusAtProviderEcsTargetPlacementConstraint>>,
    /// Specifies the platform version for the task. Specify only the numeric portion of the platform version, such as 1.1.0. This is used only if LaunchType is FARGATE. For more information about valid platform versions, see AWS Fargate Platform Versions.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "platformVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub platform_version: Option<String>,
    /// Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags are not propagated. Tags can only be propagated to the task during task creation. The only valid value is: TASK_DEFINITION.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "propagateTags"
    )]
    #[builder(default, setter(strip_option))]
    pub propagate_tags: Option<String>,
    /// A map of tags to assign to ecs resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// The number of tasks to create based on the TaskDefinition. Defaults to 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "taskCount")]
    #[builder(default, setter(strip_option))]
    pub task_count: Option<f64>,
    /// The ARN of the task definition to use if the event target is an Amazon ECS cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "taskDefinitionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub task_definition_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatusAtProviderEcsTargetCapacityProviderStrategy {
    /// The base value designates how many tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined. Defaults to 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub base: Option<f64>,
    /// Short name of the capacity provider.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_provider: Option<String>,
    /// The weight value designates the relative percentage of the total number of tasks launched that should use the specified capacity provider. The weight value is taken into consideration after the base value, if defined, is satisfied.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub weight: Option<f64>,
}

/// Use this if the ECS task uses the awsvpc network mode. This specifies the VPC subnets and security groups associated with the task, and whether a public IP address is to be used. Required if launch_type is FARGATE because the awsvpc mode is required for Fargate tasks.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatusAtProviderEcsTargetNetworkConfiguration {
    /// Assign a public IP address to the ENI (Fargate launch type only). Valid values are true or false. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "assignPublicIp"
    )]
    #[builder(default, setter(strip_option))]
    pub assign_public_ip: Option<bool>,
    /// The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroups"
    )]
    #[builder(default, setter(strip_option))]
    pub security_groups: Option<Vec<String>>,
    /// The subnets associated with the task or service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub subnets: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatusAtProviderEcsTargetOrderedPlacementStrategy {
    /// The field to apply the placement strategy against. For the spread placement strategy, valid values are instanceId (or host, which has the same effect), or any platform or custom attribute that is applied to a container instance, such as attribute:ecs.availability-zone. For the binpack placement strategy, valid values are cpu and memory. For the random placement strategy, this field is not used. For more information, see Amazon ECS task placement strategies.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub field: Option<String>,
    /// Type of placement strategy. The only valid values at this time are binpack, random and spread.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatusAtProviderEcsTargetPlacementConstraint {
    /// Cluster Query Language expression to apply to the constraint. Does not need to be specified for the distinctInstance type. For more information, see Cluster Query Language in the Amazon EC2 Container Service Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub expression: Option<String>,
    /// Type of constraint. The only valid values at this time are memberOf and distinctInstance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Parameters used when you are using the rule to invoke an API Gateway REST endpoint. Documented below. A maximum of 1 is allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatusAtProviderHttpTarget {
    /// Enables you to specify HTTP headers to add to the request.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "headerParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub header_parameters: Option<BTreeMap<String, String>>,
    /// The list of values that correspond sequentially to any path variables in your endpoint ARN (for example arn:aws:execute-api:us-east-1:123456:myapi/*/POST/pets/*).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pathParameterValues"
    )]
    #[builder(default, setter(strip_option))]
    pub path_parameter_values: Option<Vec<String>>,
    /// Represents keys/values of query string parameters that are appended to the invoked endpoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "queryStringParameters"
    )]
    #[builder(default, setter(strip_option))]
    pub query_string_parameters: Option<BTreeMap<String, String>>,
}

/// Parameters used when you are providing a custom input to a target based on certain event data. Conflicts with input and input_path.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatusAtProviderInputTransformer {
    /// Key value pairs specified in the form of JSONPath (for example, time = $.time)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputPaths"
    )]
    #[builder(default, setter(strip_option))]
    pub input_paths: Option<BTreeMap<String, String>>,
    /// Template to customize data sent to the target. Must be valid JSON. To send a string value, the string value must include double quotes.g., "\"Your string goes here.\\nA new line.\""
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub input_template: Option<String>,
}

/// Parameters used when you are using the rule to invoke an Amazon Kinesis Stream. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatusAtProviderKinesisTarget {
    /// The JSON path to be extracted from the event and used as the partition key.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "partitionKeyPath"
    )]
    #[builder(default, setter(strip_option))]
    pub partition_key_path: Option<String>,
}

/// Parameters used when you are using the rule to invoke an Amazon Redshift Statement. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatusAtProviderRedshiftTarget {
    /// The name of the database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub database: Option<String>,
    /// The database user name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbUser")]
    #[builder(default, setter(strip_option))]
    pub db_user: Option<String>,
    /// The name or ARN of the secret that enables access to the database.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secretsManagerArn"
    )]
    #[builder(default, setter(strip_option))]
    pub secrets_manager_arn: Option<String>,
    /// The SQL statement text to run.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub sql: Option<String>,
    /// The name of the SQL statement.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statementName"
    )]
    #[builder(default, setter(strip_option))]
    pub statement_name: Option<String>,
    /// Indicates whether to send an event back to EventBridge after the SQL statement runs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "withEvent")]
    #[builder(default, setter(strip_option))]
    pub with_event: Option<bool>,
}

/// Parameters used when you are providing retry policies. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatusAtProviderRetryPolicy {
    /// The age in seconds to continue to make retry attempts.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumEventAgeInSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub maximum_event_age_in_seconds: Option<f64>,
    /// maximum number of retry attempts to make before the request fails
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumRetryAttempts"
    )]
    #[builder(default, setter(strip_option))]
    pub maximum_retry_attempts: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatusAtProviderRunCommandTargets {
    /// Can be either tag:tag-key or InstanceIds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// If Key is tag:tag-key, Values is a list of tag values. If Key is InstanceIds, Values is a list of Amazon EC2 instance IDs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

/// Parameters used when you are using the rule to invoke an Amazon SageMaker Pipeline. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatusAtProviderSagemakerPipelineTarget {
    /// List of Parameter names and values for SageMaker Model Building Pipeline execution.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pipelineParameterList"
    )]
    #[builder(default, setter(strip_option))]
    pub pipeline_parameter_list:
        Option<Vec<TargetStatusAtProviderSagemakerPipelineTargetPipelineParameterList>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatusAtProviderSagemakerPipelineTargetPipelineParameterList {
    /// Name of parameter to start execution of a SageMaker Model Building Pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Value of parameter to start execution of a SageMaker Model Building Pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Parameters used when you are using the rule to invoke an Amazon SQS Queue. Documented below. A maximum of 1 are allowed.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TargetStatusAtProviderSqsTarget {
    /// The FIFO message group ID to use as the target.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "messageGroupId"
    )]
    #[builder(default, setter(strip_option))]
    pub message_group_id: Option<String>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// LayerVersionSpec defines the desired state of LayerVersion
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "lambda.aws.upbound.io",
    version = "v1beta1",
    kind = "LayerVersion",
    plural = "layerversions"
)]
#[kube(status = "LayerVersionStatus")]
pub struct LayerVersionSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<LayerVersionDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: LayerVersionForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<LayerVersionInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<LayerVersionProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<LayerVersionPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<LayerVersionWriteConnectionSecretToRef>,
}

/// LayerVersionSpec defines the desired state of LayerVersion
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LayerVersionDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct LayerVersionForProvider {
    /// List of Architectures this layer is compatible with. Currently x86_64 and arm64 can be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "compatibleArchitectures"
    )]
    #[builder(default, setter(strip_option))]
    pub compatible_architectures: Option<Vec<String>>,
    /// List of Runtimes this layer is compatible with. Up to 15 runtimes can be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "compatibleRuntimes"
    )]
    #[builder(default, setter(strip_option))]
    pub compatible_runtimes: Option<Vec<String>>,
    /// Description of what your Lambda Layer does.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// prefixed options cannot be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub filename: Option<String>,
    /// Unique name for your Lambda Layer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "layerName")]
    #[builder(default, setter(strip_option))]
    pub layer_name: Option<String>,
    /// License info for your Lambda Layer. See License Info.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "licenseInfo"
    )]
    #[builder(default, setter(strip_option))]
    pub license_info: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// S3 bucket location containing the function's deployment package. Conflicts with filename. This bucket must reside in the same AWS region where you are creating the Lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Bucket")]
    #[builder(default, setter(strip_option))]
    pub s3_bucket: Option<String>,
    /// S3 key of an object containing the function's deployment package. Conflicts with filename.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Key")]
    #[builder(default, setter(strip_option))]
    pub s3_key: Option<String>,
    /// Object version containing the function's deployment package. Conflicts with filename.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3ObjectVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_object_version: Option<String>,
    /// Whether to retain the old version of a previously deployed Lambda Layer. Default is false. When this is not set to true, changing any of compatible_architectures, compatible_runtimes, description, filename, layer_name, license_info, s3_bucket, s3_key, s3_object_version, or source_code_hash forces deletion of the existing layer version and creation of a new layer version.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipDestroy"
    )]
    #[builder(default, setter(strip_option))]
    pub skip_destroy: Option<bool>,
    /// Virtual attribute used to trigger replacement when source code changes. Must be set to a base64-encoded SHA256 hash of the package file specified with either filename or s3_key. The usual way to set this is ${filebase64sha256("file.11.12 or later) or ${base64sha256(file("file.11.11 and earlier), where "file.zip" is the local filename of the lambda layer source archive.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceCodeHash"
    )]
    #[builder(default, setter(strip_option))]
    pub source_code_hash: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct LayerVersionInitProvider {
    /// List of Architectures this layer is compatible with. Currently x86_64 and arm64 can be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "compatibleArchitectures"
    )]
    #[builder(default, setter(strip_option))]
    pub compatible_architectures: Option<Vec<String>>,
    /// List of Runtimes this layer is compatible with. Up to 15 runtimes can be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "compatibleRuntimes"
    )]
    #[builder(default, setter(strip_option))]
    pub compatible_runtimes: Option<Vec<String>>,
    /// Description of what your Lambda Layer does.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// prefixed options cannot be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub filename: Option<String>,
    /// Unique name for your Lambda Layer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "layerName")]
    #[builder(default, setter(strip_option))]
    pub layer_name: Option<String>,
    /// License info for your Lambda Layer. See License Info.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "licenseInfo"
    )]
    #[builder(default, setter(strip_option))]
    pub license_info: Option<String>,
    /// S3 bucket location containing the function's deployment package. Conflicts with filename. This bucket must reside in the same AWS region where you are creating the Lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Bucket")]
    #[builder(default, setter(strip_option))]
    pub s3_bucket: Option<String>,
    /// S3 key of an object containing the function's deployment package. Conflicts with filename.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Key")]
    #[builder(default, setter(strip_option))]
    pub s3_key: Option<String>,
    /// Object version containing the function's deployment package. Conflicts with filename.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3ObjectVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_object_version: Option<String>,
    /// Whether to retain the old version of a previously deployed Lambda Layer. Default is false. When this is not set to true, changing any of compatible_architectures, compatible_runtimes, description, filename, layer_name, license_info, s3_bucket, s3_key, s3_object_version, or source_code_hash forces deletion of the existing layer version and creation of a new layer version.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipDestroy"
    )]
    #[builder(default, setter(strip_option))]
    pub skip_destroy: Option<bool>,
    /// Virtual attribute used to trigger replacement when source code changes. Must be set to a base64-encoded SHA256 hash of the package file specified with either filename or s3_key. The usual way to set this is ${filebase64sha256("file.11.12 or later) or ${base64sha256(file("file.11.11 and earlier), where "file.zip" is the local filename of the lambda layer source archive.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceCodeHash"
    )]
    #[builder(default, setter(strip_option))]
    pub source_code_hash: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct LayerVersionProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<LayerVersionProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct LayerVersionProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<LayerVersionProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<LayerVersionProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LayerVersionProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LayerVersionProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct LayerVersionPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<LayerVersionPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<LayerVersionPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct LayerVersionPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<LayerVersionPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct LayerVersionPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<LayerVersionPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<LayerVersionPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LayerVersionPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LayerVersionPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct LayerVersionPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct LayerVersionWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// LayerVersionStatus defines the observed state of LayerVersion.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct LayerVersionStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<LayerVersionStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct LayerVersionStatusAtProvider {
    /// ARN of the Lambda Layer with version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Base64-encoded representation of raw SHA-256 sum of the zip file.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeSha256"
    )]
    #[builder(default, setter(strip_option))]
    pub code_sha256: Option<String>,
    /// List of Architectures this layer is compatible with. Currently x86_64 and arm64 can be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "compatibleArchitectures"
    )]
    #[builder(default, setter(strip_option))]
    pub compatible_architectures: Option<Vec<String>>,
    /// List of Runtimes this layer is compatible with. Up to 15 runtimes can be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "compatibleRuntimes"
    )]
    #[builder(default, setter(strip_option))]
    pub compatible_runtimes: Option<Vec<String>>,
    /// Date this resource was created.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createdDate"
    )]
    #[builder(default, setter(strip_option))]
    pub created_date: Option<String>,
    /// Description of what your Lambda Layer does.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// prefixed options cannot be used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub filename: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// ARN of the Lambda Layer without version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "layerArn")]
    #[builder(default, setter(strip_option))]
    pub layer_arn: Option<String>,
    /// Unique name for your Lambda Layer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "layerName")]
    #[builder(default, setter(strip_option))]
    pub layer_name: Option<String>,
    /// License info for your Lambda Layer. See License Info.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "licenseInfo"
    )]
    #[builder(default, setter(strip_option))]
    pub license_info: Option<String>,
    /// S3 bucket location containing the function's deployment package. Conflicts with filename. This bucket must reside in the same AWS region where you are creating the Lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Bucket")]
    #[builder(default, setter(strip_option))]
    pub s3_bucket: Option<String>,
    /// S3 key of an object containing the function's deployment package. Conflicts with filename.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Key")]
    #[builder(default, setter(strip_option))]
    pub s3_key: Option<String>,
    /// Object version containing the function's deployment package. Conflicts with filename.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3ObjectVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_object_version: Option<String>,
    /// ARN of a signing job.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingJobArn"
    )]
    #[builder(default, setter(strip_option))]
    pub signing_job_arn: Option<String>,
    /// ARN for a signing profile version.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingProfileVersionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub signing_profile_version_arn: Option<String>,
    /// Whether to retain the old version of a previously deployed Lambda Layer. Default is false. When this is not set to true, changing any of compatible_architectures, compatible_runtimes, description, filename, layer_name, license_info, s3_bucket, s3_key, s3_object_version, or source_code_hash forces deletion of the existing layer version and creation of a new layer version.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipDestroy"
    )]
    #[builder(default, setter(strip_option))]
    pub skip_destroy: Option<bool>,
    /// Virtual attribute used to trigger replacement when source code changes. Must be set to a base64-encoded SHA256 hash of the package file specified with either filename or s3_key. The usual way to set this is ${filebase64sha256("file.11.12 or later) or ${base64sha256(file("file.11.11 and earlier), where "file.zip" is the local filename of the lambda layer source archive.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceCodeHash"
    )]
    #[builder(default, setter(strip_option))]
    pub source_code_hash: Option<String>,
    /// Size in bytes of the function .zip file.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceCodeSize"
    )]
    #[builder(default, setter(strip_option))]
    pub source_code_size: Option<f64>,
    /// Lambda Layer version.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

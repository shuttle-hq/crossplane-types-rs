// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ReplicationTaskSpec defines the desired state of ReplicationTask
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "dms.aws.upbound.io",
    version = "v1beta1",
    kind = "ReplicationTask",
    plural = "replicationtasks"
)]
#[kube(status = "ReplicationTaskStatus")]
pub struct ReplicationTaskSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<ReplicationTaskDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ReplicationTaskForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<ReplicationTaskInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<ReplicationTaskProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<ReplicationTaskPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<ReplicationTaskWriteConnectionSecretToRef>,
}

/// ReplicationTaskSpec defines the desired state of ReplicationTask
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskForProvider {
    /// Indicates when you want a change data capture (CDC) operation to start. The value can be a RFC3339 formatted date, a checkpoint, or a LSN/SCN format depending on the source engine. For more information see Determining a CDC native start point.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cdcStartPosition"
    )]
    #[builder(default, setter(strip_option))]
    pub cdc_start_position: Option<String>,
    /// RFC3339 formatted date string or UNIX timestamp for the start of the Change Data Capture (CDC) operation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cdcStartTime"
    )]
    #[builder(default, setter(strip_option))]
    pub cdc_start_time: Option<String>,
    /// Migration type. Can be one of full-load | cdc | full-load-and-cdc.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "migrationType"
    )]
    #[builder(default, setter(strip_option))]
    pub migration_type: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// ARN of the replication instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replicationInstanceArn"
    )]
    #[builder(default, setter(strip_option))]
    pub replication_instance_arn: Option<String>,
    /// Reference to a ReplicationInstance in dms to populate replicationInstanceArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replicationInstanceArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub replication_instance_arn_ref: Option<ReplicationTaskForProviderReplicationInstanceArnRef>,
    /// Selector for a ReplicationInstance in dms to populate replicationInstanceArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replicationInstanceArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub replication_instance_arn_selector:
        Option<ReplicationTaskForProviderReplicationInstanceArnSelector>,
    /// Escaped JSON string that contains the task settings. For a complete list of task settings, see Task Settings for AWS Database Migration Service Tasks. Note that Logging.CloudWatchLogGroup and Logging.CloudWatchLogStream are read only and should not be defined, even as null, in the configuration since AWS provides a value for these settings.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replicationTaskSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub replication_task_settings: Option<String>,
    /// A friendly name for the resource identifier at the end of the EndpointArn response parameter that is returned in the created Endpoint object.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceIdentifier"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_identifier: Option<String>,
    /// ARN that uniquely identifies the source endpoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceEndpointArn"
    )]
    #[builder(default, setter(strip_option))]
    pub source_endpoint_arn: Option<String>,
    /// Reference to a Endpoint in dms to populate sourceEndpointArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceEndpointArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub source_endpoint_arn_ref: Option<ReplicationTaskForProviderSourceEndpointArnRef>,
    /// Selector for a Endpoint in dms to populate sourceEndpointArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceEndpointArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub source_endpoint_arn_selector: Option<ReplicationTaskForProviderSourceEndpointArnSelector>,
    /// Whether to run or stop the replication task.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startReplicationTask"
    )]
    #[builder(default, setter(strip_option))]
    pub start_replication_task: Option<bool>,
    /// Escaped JSON string that contains the table mappings. For information on table mapping see Using Table Mapping with an AWS Database Migration Service Task to Select and Filter Data
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tableMappings"
    )]
    #[builder(default, setter(strip_option))]
    pub table_mappings: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// ARN that uniquely identifies the target endpoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetEndpointArn"
    )]
    #[builder(default, setter(strip_option))]
    pub target_endpoint_arn: Option<String>,
    /// Reference to a Endpoint in dms to populate targetEndpointArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetEndpointArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub target_endpoint_arn_ref: Option<ReplicationTaskForProviderTargetEndpointArnRef>,
    /// Selector for a Endpoint in dms to populate targetEndpointArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetEndpointArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub target_endpoint_arn_selector: Option<ReplicationTaskForProviderTargetEndpointArnSelector>,
}

/// Reference to a ReplicationInstance in dms to populate replicationInstanceArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskForProviderReplicationInstanceArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ReplicationTaskForProviderReplicationInstanceArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskForProviderReplicationInstanceArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ReplicationTaskForProviderReplicationInstanceArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ReplicationTaskForProviderReplicationInstanceArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskForProviderReplicationInstanceArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskForProviderReplicationInstanceArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ReplicationInstance in dms to populate replicationInstanceArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskForProviderReplicationInstanceArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ReplicationTaskForProviderReplicationInstanceArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskForProviderReplicationInstanceArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ReplicationTaskForProviderReplicationInstanceArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ReplicationTaskForProviderReplicationInstanceArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskForProviderReplicationInstanceArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskForProviderReplicationInstanceArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Endpoint in dms to populate sourceEndpointArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskForProviderSourceEndpointArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ReplicationTaskForProviderSourceEndpointArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskForProviderSourceEndpointArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ReplicationTaskForProviderSourceEndpointArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ReplicationTaskForProviderSourceEndpointArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskForProviderSourceEndpointArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskForProviderSourceEndpointArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Endpoint in dms to populate sourceEndpointArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskForProviderSourceEndpointArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ReplicationTaskForProviderSourceEndpointArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskForProviderSourceEndpointArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ReplicationTaskForProviderSourceEndpointArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ReplicationTaskForProviderSourceEndpointArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskForProviderSourceEndpointArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskForProviderSourceEndpointArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Endpoint in dms to populate targetEndpointArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskForProviderTargetEndpointArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ReplicationTaskForProviderTargetEndpointArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskForProviderTargetEndpointArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ReplicationTaskForProviderTargetEndpointArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ReplicationTaskForProviderTargetEndpointArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskForProviderTargetEndpointArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskForProviderTargetEndpointArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Endpoint in dms to populate targetEndpointArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskForProviderTargetEndpointArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ReplicationTaskForProviderTargetEndpointArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskForProviderTargetEndpointArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ReplicationTaskForProviderTargetEndpointArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ReplicationTaskForProviderTargetEndpointArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskForProviderTargetEndpointArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskForProviderTargetEndpointArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskInitProvider {
    /// Indicates when you want a change data capture (CDC) operation to start. The value can be a RFC3339 formatted date, a checkpoint, or a LSN/SCN format depending on the source engine. For more information see Determining a CDC native start point.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cdcStartPosition"
    )]
    #[builder(default, setter(strip_option))]
    pub cdc_start_position: Option<String>,
    /// RFC3339 formatted date string or UNIX timestamp for the start of the Change Data Capture (CDC) operation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cdcStartTime"
    )]
    #[builder(default, setter(strip_option))]
    pub cdc_start_time: Option<String>,
    /// Migration type. Can be one of full-load | cdc | full-load-and-cdc.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "migrationType"
    )]
    #[builder(default, setter(strip_option))]
    pub migration_type: Option<String>,
    /// ARN of the replication instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replicationInstanceArn"
    )]
    #[builder(default, setter(strip_option))]
    pub replication_instance_arn: Option<String>,
    /// Reference to a ReplicationInstance in dms to populate replicationInstanceArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replicationInstanceArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub replication_instance_arn_ref: Option<ReplicationTaskInitProviderReplicationInstanceArnRef>,
    /// Selector for a ReplicationInstance in dms to populate replicationInstanceArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replicationInstanceArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub replication_instance_arn_selector:
        Option<ReplicationTaskInitProviderReplicationInstanceArnSelector>,
    /// Escaped JSON string that contains the task settings. For a complete list of task settings, see Task Settings for AWS Database Migration Service Tasks. Note that Logging.CloudWatchLogGroup and Logging.CloudWatchLogStream are read only and should not be defined, even as null, in the configuration since AWS provides a value for these settings.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replicationTaskSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub replication_task_settings: Option<String>,
    /// A friendly name for the resource identifier at the end of the EndpointArn response parameter that is returned in the created Endpoint object.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceIdentifier"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_identifier: Option<String>,
    /// ARN that uniquely identifies the source endpoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceEndpointArn"
    )]
    #[builder(default, setter(strip_option))]
    pub source_endpoint_arn: Option<String>,
    /// Reference to a Endpoint in dms to populate sourceEndpointArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceEndpointArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub source_endpoint_arn_ref: Option<ReplicationTaskInitProviderSourceEndpointArnRef>,
    /// Selector for a Endpoint in dms to populate sourceEndpointArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceEndpointArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub source_endpoint_arn_selector: Option<ReplicationTaskInitProviderSourceEndpointArnSelector>,
    /// Whether to run or stop the replication task.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startReplicationTask"
    )]
    #[builder(default, setter(strip_option))]
    pub start_replication_task: Option<bool>,
    /// Escaped JSON string that contains the table mappings. For information on table mapping see Using Table Mapping with an AWS Database Migration Service Task to Select and Filter Data
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tableMappings"
    )]
    #[builder(default, setter(strip_option))]
    pub table_mappings: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// ARN that uniquely identifies the target endpoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetEndpointArn"
    )]
    #[builder(default, setter(strip_option))]
    pub target_endpoint_arn: Option<String>,
    /// Reference to a Endpoint in dms to populate targetEndpointArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetEndpointArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub target_endpoint_arn_ref: Option<ReplicationTaskInitProviderTargetEndpointArnRef>,
    /// Selector for a Endpoint in dms to populate targetEndpointArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetEndpointArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub target_endpoint_arn_selector: Option<ReplicationTaskInitProviderTargetEndpointArnSelector>,
}

/// Reference to a ReplicationInstance in dms to populate replicationInstanceArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskInitProviderReplicationInstanceArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ReplicationTaskInitProviderReplicationInstanceArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskInitProviderReplicationInstanceArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ReplicationTaskInitProviderReplicationInstanceArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ReplicationTaskInitProviderReplicationInstanceArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskInitProviderReplicationInstanceArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskInitProviderReplicationInstanceArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ReplicationInstance in dms to populate replicationInstanceArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskInitProviderReplicationInstanceArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ReplicationTaskInitProviderReplicationInstanceArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskInitProviderReplicationInstanceArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ReplicationTaskInitProviderReplicationInstanceArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ReplicationTaskInitProviderReplicationInstanceArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskInitProviderReplicationInstanceArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskInitProviderReplicationInstanceArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Endpoint in dms to populate sourceEndpointArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskInitProviderSourceEndpointArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ReplicationTaskInitProviderSourceEndpointArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskInitProviderSourceEndpointArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ReplicationTaskInitProviderSourceEndpointArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ReplicationTaskInitProviderSourceEndpointArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskInitProviderSourceEndpointArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskInitProviderSourceEndpointArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Endpoint in dms to populate sourceEndpointArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskInitProviderSourceEndpointArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ReplicationTaskInitProviderSourceEndpointArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskInitProviderSourceEndpointArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ReplicationTaskInitProviderSourceEndpointArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ReplicationTaskInitProviderSourceEndpointArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskInitProviderSourceEndpointArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskInitProviderSourceEndpointArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Endpoint in dms to populate targetEndpointArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskInitProviderTargetEndpointArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ReplicationTaskInitProviderTargetEndpointArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskInitProviderTargetEndpointArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ReplicationTaskInitProviderTargetEndpointArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ReplicationTaskInitProviderTargetEndpointArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskInitProviderTargetEndpointArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskInitProviderTargetEndpointArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Endpoint in dms to populate targetEndpointArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskInitProviderTargetEndpointArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ReplicationTaskInitProviderTargetEndpointArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskInitProviderTargetEndpointArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ReplicationTaskInitProviderTargetEndpointArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ReplicationTaskInitProviderTargetEndpointArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskInitProviderTargetEndpointArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskInitProviderTargetEndpointArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ReplicationTaskProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ReplicationTaskProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ReplicationTaskProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<ReplicationTaskPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<ReplicationTaskPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ReplicationTaskPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ReplicationTaskPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ReplicationTaskPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReplicationTaskPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ReplicationTaskStatus defines the observed state of ReplicationTask.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<ReplicationTaskStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ReplicationTaskStatusAtProvider {
    /// Indicates when you want a change data capture (CDC) operation to start. The value can be a RFC3339 formatted date, a checkpoint, or a LSN/SCN format depending on the source engine. For more information see Determining a CDC native start point.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cdcStartPosition"
    )]
    #[builder(default, setter(strip_option))]
    pub cdc_start_position: Option<String>,
    /// RFC3339 formatted date string or UNIX timestamp for the start of the Change Data Capture (CDC) operation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cdcStartTime"
    )]
    #[builder(default, setter(strip_option))]
    pub cdc_start_time: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Migration type. Can be one of full-load | cdc | full-load-and-cdc.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "migrationType"
    )]
    #[builder(default, setter(strip_option))]
    pub migration_type: Option<String>,
    /// ARN of the replication instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replicationInstanceArn"
    )]
    #[builder(default, setter(strip_option))]
    pub replication_instance_arn: Option<String>,
    /// ARN for the replication task.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replicationTaskArn"
    )]
    #[builder(default, setter(strip_option))]
    pub replication_task_arn: Option<String>,
    /// Escaped JSON string that contains the task settings. For a complete list of task settings, see Task Settings for AWS Database Migration Service Tasks. Note that Logging.CloudWatchLogGroup and Logging.CloudWatchLogStream are read only and should not be defined, even as null, in the configuration since AWS provides a value for these settings.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replicationTaskSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub replication_task_settings: Option<String>,
    /// A friendly name for the resource identifier at the end of the EndpointArn response parameter that is returned in the created Endpoint object.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceIdentifier"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_identifier: Option<String>,
    /// ARN that uniquely identifies the source endpoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceEndpointArn"
    )]
    #[builder(default, setter(strip_option))]
    pub source_endpoint_arn: Option<String>,
    /// Whether to run or stop the replication task.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startReplicationTask"
    )]
    #[builder(default, setter(strip_option))]
    pub start_replication_task: Option<bool>,
    /// Replication Task status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub status: Option<String>,
    /// Escaped JSON string that contains the table mappings. For information on table mapping see Using Table Mapping with an AWS Database Migration Service Task to Select and Filter Data
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tableMappings"
    )]
    #[builder(default, setter(strip_option))]
    pub table_mappings: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// ARN that uniquely identifies the target endpoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetEndpointArn"
    )]
    #[builder(default, setter(strip_option))]
    pub target_endpoint_arn: Option<String>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ConfigurationSetEventDestinationSpec defines the desired state of ConfigurationSetEventDestination
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "sesv2.aws.upbound.io",
    version = "v1beta2",
    kind = "ConfigurationSetEventDestination",
    plural = "configurationseteventdestinations"
)]
#[kube(status = "ConfigurationSetEventDestinationStatus")]
pub struct ConfigurationSetEventDestinationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<ConfigurationSetEventDestinationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ConfigurationSetEventDestinationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<ConfigurationSetEventDestinationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<ConfigurationSetEventDestinationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to:
        Option<ConfigurationSetEventDestinationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref:
        Option<ConfigurationSetEventDestinationWriteConnectionSecretToRef>,
}

/// ConfigurationSetEventDestinationSpec defines the desired state of ConfigurationSetEventDestination
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProvider {
    /// The name of the configuration set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "configurationSetName"
    )]
    #[builder(default, setter(strip_option))]
    pub configuration_set_name: Option<String>,
    /// Reference to a ConfigurationSet in sesv2 to populate configurationSetName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "configurationSetNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub configuration_set_name_ref:
        Option<ConfigurationSetEventDestinationForProviderConfigurationSetNameRef>,
    /// Selector for a ConfigurationSet in sesv2 to populate configurationSetName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "configurationSetNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub configuration_set_name_selector:
        Option<ConfigurationSetEventDestinationForProviderConfigurationSetNameSelector>,
    /// A name that identifies the event destination within the configuration set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventDestination"
    )]
    #[builder(default, setter(strip_option))]
    pub event_destination: Option<ConfigurationSetEventDestinationForProviderEventDestination>,
    /// An object that defines the event destination. See event_destination Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventDestinationName"
    )]
    #[builder(default, setter(strip_option))]
    pub event_destination_name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
}

/// Reference to a ConfigurationSet in sesv2 to populate configurationSetName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderConfigurationSetNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetEventDestinationForProviderConfigurationSetNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderConfigurationSetNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ConfigurationSetEventDestinationForProviderConfigurationSetNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<ConfigurationSetEventDestinationForProviderConfigurationSetNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderConfigurationSetNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderConfigurationSetNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ConfigurationSet in sesv2 to populate configurationSetName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderConfigurationSetNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<ConfigurationSetEventDestinationForProviderConfigurationSetNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderConfigurationSetNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<
        ConfigurationSetEventDestinationForProviderConfigurationSetNameSelectorPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<
        ConfigurationSetEventDestinationForProviderConfigurationSetNameSelectorPolicyResolve,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderConfigurationSetNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderConfigurationSetNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A name that identifies the event destination within the configuration set.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestination {
    /// An object that defines an Amazon CloudWatch destination for email events. See cloud_watch_destination Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchDestination"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_destination:
        Option<ConfigurationSetEventDestinationForProviderEventDestinationCloudWatchDestination>,
    /// When the event destination is enabled, the specified event types are sent to the destinations. Default: false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventBridgeDestination"
    )]
    #[builder(default, setter(strip_option))]
    pub event_bridge_destination:
        Option<ConfigurationSetEventDestinationForProviderEventDestinationEventBridgeDestination>,
    /// An object that defines an Amazon Kinesis Data Firehose destination for email events. See kinesis_firehose_destination Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisFirehoseDestination"
    )]
    #[builder(default, setter(strip_option))]
    pub kinesis_firehose_destination: Option<
        ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestination,
    >,
    /// - An array that specifies which events the Amazon SES API v2 should send to the destinations. Valid values: SEND, REJECT, BOUNCE, COMPLAINT, DELIVERY, OPEN, CLICK, RENDERING_FAILURE, DELIVERY_DELAY, SUBSCRIPTION.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchingEventTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub matching_event_types: Option<Vec<String>>,
    /// An object that defines an Amazon Pinpoint project destination for email events. See pinpoint_destination Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pinpointDestination"
    )]
    #[builder(default, setter(strip_option))]
    pub pinpoint_destination:
        Option<ConfigurationSetEventDestinationForProviderEventDestinationPinpointDestination>,
    /// An object that defines an Amazon SNS destination for email events. See sns_destination Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snsDestination"
    )]
    #[builder(default, setter(strip_option))]
    pub sns_destination:
        Option<ConfigurationSetEventDestinationForProviderEventDestinationSnsDestination>,
}

/// An object that defines an Amazon CloudWatch destination for email events. See cloud_watch_destination Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationCloudWatchDestination {
    /// An array of objects that define the dimensions to use when you send email events to Amazon CloudWatch. See dimension_configuration Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dimensionConfiguration")]
    #[builder(default, setter(strip_option))]
    pub dimension_configuration: Option<Vec<ConfigurationSetEventDestinationForProviderEventDestinationCloudWatchDestinationDimensionConfiguration>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationCloudWatchDestinationDimensionConfiguration
{
    /// The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultDimensionValue"
    )]
    #[builder(default, setter(strip_option))]
    pub default_dimension_value: Option<String>,
    /// The name of an Amazon CloudWatch dimension associated with an email sending metric.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dimensionName"
    )]
    #[builder(default, setter(strip_option))]
    pub dimension_name: Option<String>,
    /// The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. Valid values: MESSAGE_TAG, EMAIL_HEADER, LINK_TAG.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dimensionValueSource"
    )]
    #[builder(default, setter(strip_option))]
    pub dimension_value_source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationEventBridgeDestination {
    /// The Amazon Resource Name (ARN) of the Amazon EventBridge bus to publish email events to. Only the default bus is supported.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventBusArn"
    )]
    #[builder(default, setter(strip_option))]
    pub event_bus_arn: Option<String>,
}

/// An object that defines an Amazon Kinesis Data Firehose destination for email events. See kinesis_firehose_destination Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestination {
    /// The Amazon Resource Name (ARN) of the Amazon Kinesis Data Firehose stream that the Amazon SES API v2 sends email events to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deliveryStreamArn")]
    #[builder(default, setter(strip_option))]
    pub delivery_stream_arn: Option<String>,
    /// Reference to a DeliveryStream in firehose to populate deliveryStreamArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deliveryStreamArnRef")]
    #[builder(default, setter(strip_option))]
    pub delivery_stream_arn_ref: Option<ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnRef>,
    /// Selector for a DeliveryStream in firehose to populate deliveryStreamArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deliveryStreamArnSelector")]
    #[builder(default, setter(strip_option))]
    pub delivery_stream_arn_selector: Option<ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnSelector>,
    /// The Amazon Resource Name (ARN) of the IAM role that the Amazon SES API v2 uses to send email events to the Amazon Kinesis Data Firehose stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArn")]
    #[builder(default, setter(strip_option))]
    pub iam_role_arn: Option<String>,
    /// Reference to a Role in iam to populate iamRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArnRef")]
    #[builder(default, setter(strip_option))]
    pub iam_role_arn_ref: Option<ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationIamRoleArnRef>,
    /// Selector for a Role in iam to populate iamRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArnSelector")]
    #[builder(default, setter(strip_option))]
    pub iam_role_arn_selector: Option<ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationIamRoleArnSelector>,
}

/// Reference to a DeliveryStream in firehose to populate deliveryStreamArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a DeliveryStream in firehose to populate deliveryStreamArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate iamRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationIamRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationIamRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationIamRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationIamRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationIamRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationIamRoleArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationIamRoleArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate iamRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationIamRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationIamRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationIamRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationIamRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationIamRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationIamRoleArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderEventDestinationKinesisFirehoseDestinationIamRoleArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// An object that defines an Amazon Pinpoint project destination for email events. See pinpoint_destination Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationPinpointDestination {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationArn")]
    #[builder(default, setter(strip_option))]
    pub application_arn: Option<String>,
    /// Reference to a App in pinpoint to populate applicationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationArnRef")]
    #[builder(default, setter(strip_option))]
    pub application_arn_ref: Option<ConfigurationSetEventDestinationForProviderEventDestinationPinpointDestinationApplicationArnRef>,
    /// Selector for a App in pinpoint to populate applicationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationArnSelector")]
    #[builder(default, setter(strip_option))]
    pub application_arn_selector: Option<ConfigurationSetEventDestinationForProviderEventDestinationPinpointDestinationApplicationArnSelector>,
}

/// Reference to a App in pinpoint to populate applicationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationPinpointDestinationApplicationArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetEventDestinationForProviderEventDestinationPinpointDestinationApplicationArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationPinpointDestinationApplicationArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetEventDestinationForProviderEventDestinationPinpointDestinationApplicationArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetEventDestinationForProviderEventDestinationPinpointDestinationApplicationArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderEventDestinationPinpointDestinationApplicationArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderEventDestinationPinpointDestinationApplicationArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a App in pinpoint to populate applicationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationPinpointDestinationApplicationArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetEventDestinationForProviderEventDestinationPinpointDestinationApplicationArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationPinpointDestinationApplicationArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetEventDestinationForProviderEventDestinationPinpointDestinationApplicationArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetEventDestinationForProviderEventDestinationPinpointDestinationApplicationArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderEventDestinationPinpointDestinationApplicationArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderEventDestinationPinpointDestinationApplicationArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// An object that defines an Amazon SNS destination for email events. See sns_destination Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationSnsDestination {
    /// The Amazon Resource Name (ARN) of the Amazon SNS topic to publish email events to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topicArn")]
    #[builder(default, setter(strip_option))]
    pub topic_arn: Option<String>,
    /// Reference to a Topic in sns to populate topicArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "topicArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub topic_arn_ref: Option<
        ConfigurationSetEventDestinationForProviderEventDestinationSnsDestinationTopicArnRef,
    >,
    /// Selector for a Topic in sns to populate topicArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "topicArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub topic_arn_selector: Option<
        ConfigurationSetEventDestinationForProviderEventDestinationSnsDestinationTopicArnSelector,
    >,
}

/// Reference to a Topic in sns to populate topicArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationSnsDestinationTopicArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        ConfigurationSetEventDestinationForProviderEventDestinationSnsDestinationTopicArnRefPolicy,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationSnsDestinationTopicArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetEventDestinationForProviderEventDestinationSnsDestinationTopicArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetEventDestinationForProviderEventDestinationSnsDestinationTopicArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderEventDestinationSnsDestinationTopicArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderEventDestinationSnsDestinationTopicArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Topic in sns to populate topicArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationSnsDestinationTopicArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetEventDestinationForProviderEventDestinationSnsDestinationTopicArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationForProviderEventDestinationSnsDestinationTopicArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetEventDestinationForProviderEventDestinationSnsDestinationTopicArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetEventDestinationForProviderEventDestinationSnsDestinationTopicArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderEventDestinationSnsDestinationTopicArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationForProviderEventDestinationSnsDestinationTopicArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProvider {
    /// The name of the configuration set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "configurationSetName"
    )]
    #[builder(default, setter(strip_option))]
    pub configuration_set_name: Option<String>,
    /// Reference to a ConfigurationSet in sesv2 to populate configurationSetName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "configurationSetNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub configuration_set_name_ref:
        Option<ConfigurationSetEventDestinationInitProviderConfigurationSetNameRef>,
    /// Selector for a ConfigurationSet in sesv2 to populate configurationSetName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "configurationSetNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub configuration_set_name_selector:
        Option<ConfigurationSetEventDestinationInitProviderConfigurationSetNameSelector>,
    /// A name that identifies the event destination within the configuration set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventDestination"
    )]
    #[builder(default, setter(strip_option))]
    pub event_destination: Option<ConfigurationSetEventDestinationInitProviderEventDestination>,
    /// An object that defines the event destination. See event_destination Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventDestinationName"
    )]
    #[builder(default, setter(strip_option))]
    pub event_destination_name: Option<String>,
}

/// Reference to a ConfigurationSet in sesv2 to populate configurationSetName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderConfigurationSetNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetEventDestinationInitProviderConfigurationSetNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderConfigurationSetNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ConfigurationSetEventDestinationInitProviderConfigurationSetNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<ConfigurationSetEventDestinationInitProviderConfigurationSetNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderConfigurationSetNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderConfigurationSetNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ConfigurationSet in sesv2 to populate configurationSetName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderConfigurationSetNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<ConfigurationSetEventDestinationInitProviderConfigurationSetNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderConfigurationSetNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<
        ConfigurationSetEventDestinationInitProviderConfigurationSetNameSelectorPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<
        ConfigurationSetEventDestinationInitProviderConfigurationSetNameSelectorPolicyResolve,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderConfigurationSetNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderConfigurationSetNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A name that identifies the event destination within the configuration set.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestination {
    /// An object that defines an Amazon CloudWatch destination for email events. See cloud_watch_destination Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchDestination"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_destination:
        Option<ConfigurationSetEventDestinationInitProviderEventDestinationCloudWatchDestination>,
    /// When the event destination is enabled, the specified event types are sent to the destinations. Default: false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventBridgeDestination"
    )]
    #[builder(default, setter(strip_option))]
    pub event_bridge_destination:
        Option<ConfigurationSetEventDestinationInitProviderEventDestinationEventBridgeDestination>,
    /// An object that defines an Amazon Kinesis Data Firehose destination for email events. See kinesis_firehose_destination Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisFirehoseDestination"
    )]
    #[builder(default, setter(strip_option))]
    pub kinesis_firehose_destination: Option<
        ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestination,
    >,
    /// - An array that specifies which events the Amazon SES API v2 should send to the destinations. Valid values: SEND, REJECT, BOUNCE, COMPLAINT, DELIVERY, OPEN, CLICK, RENDERING_FAILURE, DELIVERY_DELAY, SUBSCRIPTION.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchingEventTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub matching_event_types: Option<Vec<String>>,
    /// An object that defines an Amazon Pinpoint project destination for email events. See pinpoint_destination Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pinpointDestination"
    )]
    #[builder(default, setter(strip_option))]
    pub pinpoint_destination:
        Option<ConfigurationSetEventDestinationInitProviderEventDestinationPinpointDestination>,
    /// An object that defines an Amazon SNS destination for email events. See sns_destination Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snsDestination"
    )]
    #[builder(default, setter(strip_option))]
    pub sns_destination:
        Option<ConfigurationSetEventDestinationInitProviderEventDestinationSnsDestination>,
}

/// An object that defines an Amazon CloudWatch destination for email events. See cloud_watch_destination Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationCloudWatchDestination {
    /// An array of objects that define the dimensions to use when you send email events to Amazon CloudWatch. See dimension_configuration Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dimensionConfiguration")]
    #[builder(default, setter(strip_option))]
    pub dimension_configuration: Option<Vec<ConfigurationSetEventDestinationInitProviderEventDestinationCloudWatchDestinationDimensionConfiguration>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationCloudWatchDestinationDimensionConfiguration
{
    /// The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultDimensionValue"
    )]
    #[builder(default, setter(strip_option))]
    pub default_dimension_value: Option<String>,
    /// The name of an Amazon CloudWatch dimension associated with an email sending metric.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dimensionName"
    )]
    #[builder(default, setter(strip_option))]
    pub dimension_name: Option<String>,
    /// The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. Valid values: MESSAGE_TAG, EMAIL_HEADER, LINK_TAG.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dimensionValueSource"
    )]
    #[builder(default, setter(strip_option))]
    pub dimension_value_source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationEventBridgeDestination {
    /// The Amazon Resource Name (ARN) of the Amazon EventBridge bus to publish email events to. Only the default bus is supported.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventBusArn"
    )]
    #[builder(default, setter(strip_option))]
    pub event_bus_arn: Option<String>,
}

/// An object that defines an Amazon Kinesis Data Firehose destination for email events. See kinesis_firehose_destination Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestination {
    /// The Amazon Resource Name (ARN) of the Amazon Kinesis Data Firehose stream that the Amazon SES API v2 sends email events to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deliveryStreamArn")]
    #[builder(default, setter(strip_option))]
    pub delivery_stream_arn: Option<String>,
    /// Reference to a DeliveryStream in firehose to populate deliveryStreamArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deliveryStreamArnRef")]
    #[builder(default, setter(strip_option))]
    pub delivery_stream_arn_ref: Option<ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnRef>,
    /// Selector for a DeliveryStream in firehose to populate deliveryStreamArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deliveryStreamArnSelector")]
    #[builder(default, setter(strip_option))]
    pub delivery_stream_arn_selector: Option<ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnSelector>,
    /// The Amazon Resource Name (ARN) of the IAM role that the Amazon SES API v2 uses to send email events to the Amazon Kinesis Data Firehose stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArn")]
    #[builder(default, setter(strip_option))]
    pub iam_role_arn: Option<String>,
    /// Reference to a Role in iam to populate iamRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArnRef")]
    #[builder(default, setter(strip_option))]
    pub iam_role_arn_ref: Option<ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationIamRoleArnRef>,
    /// Selector for a Role in iam to populate iamRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleArnSelector")]
    #[builder(default, setter(strip_option))]
    pub iam_role_arn_selector: Option<ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationIamRoleArnSelector>,
}

/// Reference to a DeliveryStream in firehose to populate deliveryStreamArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a DeliveryStream in firehose to populate deliveryStreamArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationDeliveryStreamArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate iamRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationIamRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationIamRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationIamRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationIamRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationIamRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationIamRoleArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationIamRoleArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate iamRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationIamRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationIamRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationIamRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationIamRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationIamRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationIamRoleArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderEventDestinationKinesisFirehoseDestinationIamRoleArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// An object that defines an Amazon Pinpoint project destination for email events. See pinpoint_destination Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationPinpointDestination {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationArn")]
    #[builder(default, setter(strip_option))]
    pub application_arn: Option<String>,
    /// Reference to a App in pinpoint to populate applicationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationArnRef")]
    #[builder(default, setter(strip_option))]
    pub application_arn_ref: Option<ConfigurationSetEventDestinationInitProviderEventDestinationPinpointDestinationApplicationArnRef>,
    /// Selector for a App in pinpoint to populate applicationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applicationArnSelector")]
    #[builder(default, setter(strip_option))]
    pub application_arn_selector: Option<ConfigurationSetEventDestinationInitProviderEventDestinationPinpointDestinationApplicationArnSelector>,
}

/// Reference to a App in pinpoint to populate applicationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationPinpointDestinationApplicationArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetEventDestinationInitProviderEventDestinationPinpointDestinationApplicationArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationPinpointDestinationApplicationArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetEventDestinationInitProviderEventDestinationPinpointDestinationApplicationArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetEventDestinationInitProviderEventDestinationPinpointDestinationApplicationArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderEventDestinationPinpointDestinationApplicationArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderEventDestinationPinpointDestinationApplicationArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a App in pinpoint to populate applicationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationPinpointDestinationApplicationArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetEventDestinationInitProviderEventDestinationPinpointDestinationApplicationArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationPinpointDestinationApplicationArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetEventDestinationInitProviderEventDestinationPinpointDestinationApplicationArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetEventDestinationInitProviderEventDestinationPinpointDestinationApplicationArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderEventDestinationPinpointDestinationApplicationArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderEventDestinationPinpointDestinationApplicationArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// An object that defines an Amazon SNS destination for email events. See sns_destination Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationSnsDestination {
    /// The Amazon Resource Name (ARN) of the Amazon SNS topic to publish email events to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topicArn")]
    #[builder(default, setter(strip_option))]
    pub topic_arn: Option<String>,
    /// Reference to a Topic in sns to populate topicArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "topicArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub topic_arn_ref: Option<
        ConfigurationSetEventDestinationInitProviderEventDestinationSnsDestinationTopicArnRef,
    >,
    /// Selector for a Topic in sns to populate topicArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "topicArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub topic_arn_selector: Option<
        ConfigurationSetEventDestinationInitProviderEventDestinationSnsDestinationTopicArnSelector,
    >,
}

/// Reference to a Topic in sns to populate topicArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationSnsDestinationTopicArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        ConfigurationSetEventDestinationInitProviderEventDestinationSnsDestinationTopicArnRefPolicy,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationSnsDestinationTopicArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetEventDestinationInitProviderEventDestinationSnsDestinationTopicArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetEventDestinationInitProviderEventDestinationSnsDestinationTopicArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderEventDestinationSnsDestinationTopicArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderEventDestinationSnsDestinationTopicArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Topic in sns to populate topicArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationSnsDestinationTopicArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetEventDestinationInitProviderEventDestinationSnsDestinationTopicArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationInitProviderEventDestinationSnsDestinationTopicArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetEventDestinationInitProviderEventDestinationSnsDestinationTopicArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetEventDestinationInitProviderEventDestinationSnsDestinationTopicArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderEventDestinationSnsDestinationTopicArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationInitProviderEventDestinationSnsDestinationTopicArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetEventDestinationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetEventDestinationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetEventDestinationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<ConfigurationSetEventDestinationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<ConfigurationSetEventDestinationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetEventDestinationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ConfigurationSetEventDestinationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<ConfigurationSetEventDestinationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetEventDestinationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ConfigurationSetEventDestinationStatus defines the observed state of ConfigurationSetEventDestination.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<ConfigurationSetEventDestinationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationStatusAtProvider {
    /// The name of the configuration set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "configurationSetName"
    )]
    #[builder(default, setter(strip_option))]
    pub configuration_set_name: Option<String>,
    /// A name that identifies the event destination within the configuration set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventDestination"
    )]
    #[builder(default, setter(strip_option))]
    pub event_destination: Option<ConfigurationSetEventDestinationStatusAtProviderEventDestination>,
    /// An object that defines the event destination. See event_destination Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventDestinationName"
    )]
    #[builder(default, setter(strip_option))]
    pub event_destination_name: Option<String>,
    /// A pipe-delimited string combining configuration_set_name and event_destination_name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
}

/// A name that identifies the event destination within the configuration set.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationStatusAtProviderEventDestination {
    /// An object that defines an Amazon CloudWatch destination for email events. See cloud_watch_destination Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchDestination"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_destination: Option<
        ConfigurationSetEventDestinationStatusAtProviderEventDestinationCloudWatchDestination,
    >,
    /// When the event destination is enabled, the specified event types are sent to the destinations. Default: false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventBridgeDestination"
    )]
    #[builder(default, setter(strip_option))]
    pub event_bridge_destination: Option<
        ConfigurationSetEventDestinationStatusAtProviderEventDestinationEventBridgeDestination,
    >,
    /// An object that defines an Amazon Kinesis Data Firehose destination for email events. See kinesis_firehose_destination Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisFirehoseDestination"
    )]
    #[builder(default, setter(strip_option))]
    pub kinesis_firehose_destination: Option<
        ConfigurationSetEventDestinationStatusAtProviderEventDestinationKinesisFirehoseDestination,
    >,
    /// - An array that specifies which events the Amazon SES API v2 should send to the destinations. Valid values: SEND, REJECT, BOUNCE, COMPLAINT, DELIVERY, OPEN, CLICK, RENDERING_FAILURE, DELIVERY_DELAY, SUBSCRIPTION.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchingEventTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub matching_event_types: Option<Vec<String>>,
    /// An object that defines an Amazon Pinpoint project destination for email events. See pinpoint_destination Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "pinpointDestination"
    )]
    #[builder(default, setter(strip_option))]
    pub pinpoint_destination:
        Option<ConfigurationSetEventDestinationStatusAtProviderEventDestinationPinpointDestination>,
    /// An object that defines an Amazon SNS destination for email events. See sns_destination Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snsDestination"
    )]
    #[builder(default, setter(strip_option))]
    pub sns_destination:
        Option<ConfigurationSetEventDestinationStatusAtProviderEventDestinationSnsDestination>,
}

/// An object that defines an Amazon CloudWatch destination for email events. See cloud_watch_destination Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationStatusAtProviderEventDestinationCloudWatchDestination {
    /// An array of objects that define the dimensions to use when you send email events to Amazon CloudWatch. See dimension_configuration Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dimensionConfiguration")]
    #[builder(default, setter(strip_option))]
    pub dimension_configuration: Option<Vec<ConfigurationSetEventDestinationStatusAtProviderEventDestinationCloudWatchDestinationDimensionConfiguration>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationStatusAtProviderEventDestinationCloudWatchDestinationDimensionConfiguration
{
    /// The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultDimensionValue"
    )]
    #[builder(default, setter(strip_option))]
    pub default_dimension_value: Option<String>,
    /// The name of an Amazon CloudWatch dimension associated with an email sending metric.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dimensionName"
    )]
    #[builder(default, setter(strip_option))]
    pub dimension_name: Option<String>,
    /// The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. Valid values: MESSAGE_TAG, EMAIL_HEADER, LINK_TAG.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dimensionValueSource"
    )]
    #[builder(default, setter(strip_option))]
    pub dimension_value_source: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationStatusAtProviderEventDestinationEventBridgeDestination {
    /// The Amazon Resource Name (ARN) of the Amazon EventBridge bus to publish email events to. Only the default bus is supported.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventBusArn"
    )]
    #[builder(default, setter(strip_option))]
    pub event_bus_arn: Option<String>,
}

/// An object that defines an Amazon Kinesis Data Firehose destination for email events. See kinesis_firehose_destination Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationStatusAtProviderEventDestinationKinesisFirehoseDestination
{
    /// The Amazon Resource Name (ARN) of the Amazon Kinesis Data Firehose stream that the Amazon SES API v2 sends email events to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryStreamArn"
    )]
    #[builder(default, setter(strip_option))]
    pub delivery_stream_arn: Option<String>,
    /// The Amazon Resource Name (ARN) of the IAM role that the Amazon SES API v2 uses to send email events to the Amazon Kinesis Data Firehose stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "iamRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub iam_role_arn: Option<String>,
}

/// An object that defines an Amazon Pinpoint project destination for email events. See pinpoint_destination Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationStatusAtProviderEventDestinationPinpointDestination {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "applicationArn"
    )]
    #[builder(default, setter(strip_option))]
    pub application_arn: Option<String>,
}

/// An object that defines an Amazon SNS destination for email events. See sns_destination Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetEventDestinationStatusAtProviderEventDestinationSnsDestination {
    /// The Amazon Resource Name (ARN) of the Amazon SNS topic to publish email events to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topicArn")]
    #[builder(default, setter(strip_option))]
    pub topic_arn: Option<String>,
}

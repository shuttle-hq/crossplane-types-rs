// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ConfigurationSetSpec defines the desired state of ConfigurationSet
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "sesv2.aws.upbound.io",
    version = "v1beta2",
    kind = "ConfigurationSet",
    plural = "configurationsets"
)]
#[kube(status = "ConfigurationSetStatus")]
pub struct ConfigurationSetSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<ConfigurationSetDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ConfigurationSetForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<ConfigurationSetInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<ConfigurationSetProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<ConfigurationSetPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<ConfigurationSetWriteConnectionSecretToRef>,
}

/// ConfigurationSetSpec defines the desired state of ConfigurationSet
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetForProvider {
    /// An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set. See delivery_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub delivery_options: Option<ConfigurationSetForProviderDeliveryOptions>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// An object that defines whether or not Amazon SES collects reputation metrics for the emails that you send that use the configuration set. See reputation_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "reputationOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub reputation_options: Option<ConfigurationSetForProviderReputationOptions>,
    /// An object that defines whether or not Amazon SES can send email that you send using the configuration set. See sending_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendingOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub sending_options: Option<ConfigurationSetForProviderSendingOptions>,
    /// An object that contains information about the suppression list preferences for your account. See suppression_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "suppressionOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub suppression_options: Option<ConfigurationSetForProviderSuppressionOptions>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// An object that defines the open and click tracking options for emails that you send using the configuration set. See tracking_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trackingOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub tracking_options: Option<ConfigurationSetForProviderTrackingOptions>,
    /// An object that defines the VDM settings that apply to emails that you send using the configuration set. See vdm_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vdmOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub vdm_options: Option<ConfigurationSetForProviderVdmOptions>,
}

/// An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set. See delivery_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetForProviderDeliveryOptions {
    /// The maximum amount of time, in seconds, that Amazon SES API v2 will attempt delivery of email. If specified, the value must greater than or equal to 300 seconds (5 minutes) and less than or equal to 50400 seconds (840 minutes).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxDeliverySeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub max_delivery_seconds: Option<f64>,
    /// The name of the dedicated IP pool to associate with the configuration set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendingPoolName"
    )]
    #[builder(default, setter(strip_option))]
    pub sending_pool_name: Option<String>,
    /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). Valid values: REQUIRE, OPTIONAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsPolicy")]
    #[builder(default, setter(strip_option))]
    pub tls_policy: Option<String>,
}

/// An object that defines whether or not Amazon SES collects reputation metrics for the emails that you send that use the configuration set. See reputation_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetForProviderReputationOptions {
    /// If true, tracking of reputation metrics is enabled for the configuration set. If false, tracking of reputation metrics is disabled for the configuration set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "reputationMetricsEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub reputation_metrics_enabled: Option<bool>,
}

/// An object that defines whether or not Amazon SES can send email that you send using the configuration set. See sending_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetForProviderSendingOptions {
    /// If true, email sending is enabled for the configuration set. If false, email sending is disabled for the configuration set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendingEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub sending_enabled: Option<bool>,
}

/// An object that contains information about the suppression list preferences for your account. See suppression_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetForProviderSuppressionOptions {
    /// A list that contains the reasons that email addresses are automatically added to the suppression list for your account. Valid values: BOUNCE, COMPLAINT.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "suppressedReasons"
    )]
    #[builder(default, setter(strip_option))]
    pub suppressed_reasons: Option<Vec<String>>,
}

/// An object that defines the open and click tracking options for emails that you send using the configuration set. See tracking_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetForProviderTrackingOptions {
    /// The domain to use for tracking open and click events.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customRedirectDomain"
    )]
    #[builder(default, setter(strip_option))]
    pub custom_redirect_domain: Option<String>,
    /// : The https policy to use for tracking open and click events. Valid values are REQUIRE, REQUIRE_OPEN_ONLY or OPTIONAL.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpsPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub https_policy: Option<String>,
}

/// An object that defines the VDM settings that apply to emails that you send using the configuration set. See vdm_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetForProviderVdmOptions {
    /// Specifies additional settings for your VDM configuration as applicable to the Dashboard. See dashboard_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dashboardOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub dashboard_options: Option<ConfigurationSetForProviderVdmOptionsDashboardOptions>,
    /// Specifies additional settings for your VDM configuration as applicable to the Guardian. See guardian_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guardianOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub guardian_options: Option<ConfigurationSetForProviderVdmOptionsGuardianOptions>,
}

/// Specifies additional settings for your VDM configuration as applicable to the Dashboard. See dashboard_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetForProviderVdmOptionsDashboardOptions {
    /// Specifies the status of your VDM engagement metrics collection. Valid values: ENABLED, DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "engagementMetrics"
    )]
    #[builder(default, setter(strip_option))]
    pub engagement_metrics: Option<String>,
}

/// Specifies additional settings for your VDM configuration as applicable to the Guardian. See guardian_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetForProviderVdmOptionsGuardianOptions {
    /// Specifies the status of your VDM optimized shared delivery. Valid values: ENABLED, DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "optimizedSharedDelivery"
    )]
    #[builder(default, setter(strip_option))]
    pub optimized_shared_delivery: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetInitProvider {
    /// An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set. See delivery_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub delivery_options: Option<ConfigurationSetInitProviderDeliveryOptions>,
    /// An object that defines whether or not Amazon SES collects reputation metrics for the emails that you send that use the configuration set. See reputation_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "reputationOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub reputation_options: Option<ConfigurationSetInitProviderReputationOptions>,
    /// An object that defines whether or not Amazon SES can send email that you send using the configuration set. See sending_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendingOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub sending_options: Option<ConfigurationSetInitProviderSendingOptions>,
    /// An object that contains information about the suppression list preferences for your account. See suppression_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "suppressionOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub suppression_options: Option<ConfigurationSetInitProviderSuppressionOptions>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// An object that defines the open and click tracking options for emails that you send using the configuration set. See tracking_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trackingOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub tracking_options: Option<ConfigurationSetInitProviderTrackingOptions>,
    /// An object that defines the VDM settings that apply to emails that you send using the configuration set. See vdm_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vdmOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub vdm_options: Option<ConfigurationSetInitProviderVdmOptions>,
}

/// An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set. See delivery_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetInitProviderDeliveryOptions {
    /// The maximum amount of time, in seconds, that Amazon SES API v2 will attempt delivery of email. If specified, the value must greater than or equal to 300 seconds (5 minutes) and less than or equal to 50400 seconds (840 minutes).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxDeliverySeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub max_delivery_seconds: Option<f64>,
    /// The name of the dedicated IP pool to associate with the configuration set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendingPoolName"
    )]
    #[builder(default, setter(strip_option))]
    pub sending_pool_name: Option<String>,
    /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). Valid values: REQUIRE, OPTIONAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsPolicy")]
    #[builder(default, setter(strip_option))]
    pub tls_policy: Option<String>,
}

/// An object that defines whether or not Amazon SES collects reputation metrics for the emails that you send that use the configuration set. See reputation_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetInitProviderReputationOptions {
    /// If true, tracking of reputation metrics is enabled for the configuration set. If false, tracking of reputation metrics is disabled for the configuration set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "reputationMetricsEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub reputation_metrics_enabled: Option<bool>,
}

/// An object that defines whether or not Amazon SES can send email that you send using the configuration set. See sending_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetInitProviderSendingOptions {
    /// If true, email sending is enabled for the configuration set. If false, email sending is disabled for the configuration set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendingEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub sending_enabled: Option<bool>,
}

/// An object that contains information about the suppression list preferences for your account. See suppression_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetInitProviderSuppressionOptions {
    /// A list that contains the reasons that email addresses are automatically added to the suppression list for your account. Valid values: BOUNCE, COMPLAINT.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "suppressedReasons"
    )]
    #[builder(default, setter(strip_option))]
    pub suppressed_reasons: Option<Vec<String>>,
}

/// An object that defines the open and click tracking options for emails that you send using the configuration set. See tracking_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetInitProviderTrackingOptions {
    /// The domain to use for tracking open and click events.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customRedirectDomain"
    )]
    #[builder(default, setter(strip_option))]
    pub custom_redirect_domain: Option<String>,
    /// : The https policy to use for tracking open and click events. Valid values are REQUIRE, REQUIRE_OPEN_ONLY or OPTIONAL.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpsPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub https_policy: Option<String>,
}

/// An object that defines the VDM settings that apply to emails that you send using the configuration set. See vdm_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetInitProviderVdmOptions {
    /// Specifies additional settings for your VDM configuration as applicable to the Dashboard. See dashboard_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dashboardOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub dashboard_options: Option<ConfigurationSetInitProviderVdmOptionsDashboardOptions>,
    /// Specifies additional settings for your VDM configuration as applicable to the Guardian. See guardian_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guardianOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub guardian_options: Option<ConfigurationSetInitProviderVdmOptionsGuardianOptions>,
}

/// Specifies additional settings for your VDM configuration as applicable to the Dashboard. See dashboard_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetInitProviderVdmOptionsDashboardOptions {
    /// Specifies the status of your VDM engagement metrics collection. Valid values: ENABLED, DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "engagementMetrics"
    )]
    #[builder(default, setter(strip_option))]
    pub engagement_metrics: Option<String>,
}

/// Specifies additional settings for your VDM configuration as applicable to the Guardian. See guardian_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetInitProviderVdmOptionsGuardianOptions {
    /// Specifies the status of your VDM optimized shared delivery. Valid values: ENABLED, DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "optimizedSharedDelivery"
    )]
    #[builder(default, setter(strip_option))]
    pub optimized_shared_delivery: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<ConfigurationSetPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<ConfigurationSetPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationSetPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationSetPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationSetPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationSetPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ConfigurationSetStatus defines the observed state of ConfigurationSet.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<ConfigurationSetStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetStatusAtProvider {
    /// ARN of the Configuration Set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set. See delivery_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub delivery_options: Option<ConfigurationSetStatusAtProviderDeliveryOptions>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// An object that defines whether or not Amazon SES collects reputation metrics for the emails that you send that use the configuration set. See reputation_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "reputationOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub reputation_options: Option<ConfigurationSetStatusAtProviderReputationOptions>,
    /// An object that defines whether or not Amazon SES can send email that you send using the configuration set. See sending_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendingOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub sending_options: Option<ConfigurationSetStatusAtProviderSendingOptions>,
    /// An object that contains information about the suppression list preferences for your account. See suppression_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "suppressionOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub suppression_options: Option<ConfigurationSetStatusAtProviderSuppressionOptions>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// An object that defines the open and click tracking options for emails that you send using the configuration set. See tracking_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trackingOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub tracking_options: Option<ConfigurationSetStatusAtProviderTrackingOptions>,
    /// An object that defines the VDM settings that apply to emails that you send using the configuration set. See vdm_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vdmOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub vdm_options: Option<ConfigurationSetStatusAtProviderVdmOptions>,
}

/// An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set. See delivery_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetStatusAtProviderDeliveryOptions {
    /// The maximum amount of time, in seconds, that Amazon SES API v2 will attempt delivery of email. If specified, the value must greater than or equal to 300 seconds (5 minutes) and less than or equal to 50400 seconds (840 minutes).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxDeliverySeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub max_delivery_seconds: Option<f64>,
    /// The name of the dedicated IP pool to associate with the configuration set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendingPoolName"
    )]
    #[builder(default, setter(strip_option))]
    pub sending_pool_name: Option<String>,
    /// Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). Valid values: REQUIRE, OPTIONAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsPolicy")]
    #[builder(default, setter(strip_option))]
    pub tls_policy: Option<String>,
}

/// An object that defines whether or not Amazon SES collects reputation metrics for the emails that you send that use the configuration set. See reputation_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetStatusAtProviderReputationOptions {
    /// The date and time (in Unix time) when the reputation metrics were last given a fresh start. When your account is given a fresh start, your reputation metrics are calculated starting from the date of the fresh start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastFreshStart"
    )]
    #[builder(default, setter(strip_option))]
    pub last_fresh_start: Option<String>,
    /// If true, tracking of reputation metrics is enabled for the configuration set. If false, tracking of reputation metrics is disabled for the configuration set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "reputationMetricsEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub reputation_metrics_enabled: Option<bool>,
}

/// An object that defines whether or not Amazon SES can send email that you send using the configuration set. See sending_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetStatusAtProviderSendingOptions {
    /// If true, email sending is enabled for the configuration set. If false, email sending is disabled for the configuration set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sendingEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub sending_enabled: Option<bool>,
}

/// An object that contains information about the suppression list preferences for your account. See suppression_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetStatusAtProviderSuppressionOptions {
    /// A list that contains the reasons that email addresses are automatically added to the suppression list for your account. Valid values: BOUNCE, COMPLAINT.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "suppressedReasons"
    )]
    #[builder(default, setter(strip_option))]
    pub suppressed_reasons: Option<Vec<String>>,
}

/// An object that defines the open and click tracking options for emails that you send using the configuration set. See tracking_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetStatusAtProviderTrackingOptions {
    /// The domain to use for tracking open and click events.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customRedirectDomain"
    )]
    #[builder(default, setter(strip_option))]
    pub custom_redirect_domain: Option<String>,
    /// : The https policy to use for tracking open and click events. Valid values are REQUIRE, REQUIRE_OPEN_ONLY or OPTIONAL.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpsPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub https_policy: Option<String>,
}

/// An object that defines the VDM settings that apply to emails that you send using the configuration set. See vdm_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetStatusAtProviderVdmOptions {
    /// Specifies additional settings for your VDM configuration as applicable to the Dashboard. See dashboard_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dashboardOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub dashboard_options: Option<ConfigurationSetStatusAtProviderVdmOptionsDashboardOptions>,
    /// Specifies additional settings for your VDM configuration as applicable to the Guardian. See guardian_options Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guardianOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub guardian_options: Option<ConfigurationSetStatusAtProviderVdmOptionsGuardianOptions>,
}

/// Specifies additional settings for your VDM configuration as applicable to the Dashboard. See dashboard_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetStatusAtProviderVdmOptionsDashboardOptions {
    /// Specifies the status of your VDM engagement metrics collection. Valid values: ENABLED, DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "engagementMetrics"
    )]
    #[builder(default, setter(strip_option))]
    pub engagement_metrics: Option<String>,
}

/// Specifies additional settings for your VDM configuration as applicable to the Guardian. See guardian_options Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationSetStatusAtProviderVdmOptionsGuardianOptions {
    /// Specifies the status of your VDM optimized shared delivery. Valid values: ENABLED, DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "optimizedSharedDelivery"
    )]
    #[builder(default, setter(strip_option))]
    pub optimized_shared_delivery: Option<String>,
}

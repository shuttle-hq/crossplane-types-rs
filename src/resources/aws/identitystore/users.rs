// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// UserSpec defines the desired state of User
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "identitystore.aws.upbound.io",
    version = "v1beta2",
    kind = "User",
    plural = "users"
)]
#[kube(status = "UserStatus")]
pub struct UserSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<UserDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: UserForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<UserInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<UserProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<UserPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<UserWriteConnectionSecretToRef>,
}

/// UserSpec defines the desired state of User
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UserDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserForProvider {
    /// Details about the user's address. At most 1 address is allowed. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub addresses: Option<UserForProviderAddresses>,
    /// The name that is typically displayed when the user is referenced.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayName"
    )]
    #[builder(default, setter(strip_option))]
    pub display_name: Option<String>,
    /// Details about the user's email. At most 1 email is allowed. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub emails: Option<UserForProviderEmails>,
    /// The globally unique identifier for the identity store that this user is in.
    #[serde(rename = "identityStoreId")]
    pub identity_store_id: String,
    /// The user's geographical region or location.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub locale: Option<String>,
    /// Details about the user's full name. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<UserForProviderName>,
    /// An alternate name for the user.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub nickname: Option<String>,
    /// Details about the user's phone number. At most 1 phone number is allowed. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phoneNumbers"
    )]
    #[builder(default, setter(strip_option))]
    pub phone_numbers: Option<UserForProviderPhoneNumbers>,
    /// The preferred language of the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredLanguage"
    )]
    #[builder(default, setter(strip_option))]
    pub preferred_language: Option<String>,
    /// An URL that may be associated with the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "profileUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub profile_url: Option<String>,
    /// The region of the address.
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The user's time zone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub timezone: Option<String>,
    /// The user's title.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub title: Option<String>,
    /// A unique string used to identify the user. This value can consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is created and stored as an attribute of the user object in the identity store. The limit is 128 characters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userName")]
    #[builder(default, setter(strip_option))]
    pub user_name: Option<String>,
    /// The user type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userType")]
    #[builder(default, setter(strip_option))]
    pub user_type: Option<String>,
}

/// Details about the user's address. At most 1 address is allowed. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserForProviderAddresses {
    /// The country that this address is in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub country: Option<String>,
    /// The name that is typically displayed when the address is shown for display.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub formatted: Option<String>,
    /// The address locality.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub locality: Option<String>,
    /// The postal code of the address.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postalCode"
    )]
    #[builder(default, setter(strip_option))]
    pub postal_code: Option<String>,
    /// When true, this is the primary address associated with the user.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub primary: Option<bool>,
    /// The region of the address.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub region: Option<String>,
    /// The street of the address.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streetAddress"
    )]
    #[builder(default, setter(strip_option))]
    pub street_address: Option<String>,
    /// The type of address.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Details about the user's email. At most 1 email is allowed. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserForProviderEmails {
    /// When true, this is the primary email associated with the user.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub primary: Option<bool>,
    /// The type of email.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// The email address. This value must be unique across the identity store.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Details about the user's full name. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserForProviderName {
    /// The family name of the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "familyName"
    )]
    #[builder(default, setter(strip_option))]
    pub family_name: Option<String>,
    /// The name that is typically displayed when the name is shown for display.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub formatted: Option<String>,
    /// The given name of the user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "givenName")]
    #[builder(default, setter(strip_option))]
    pub given_name: Option<String>,
    /// The honorific prefix of the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "honorificPrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub honorific_prefix: Option<String>,
    /// The honorific suffix of the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "honorificSuffix"
    )]
    #[builder(default, setter(strip_option))]
    pub honorific_suffix: Option<String>,
    /// The middle name of the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "middleName"
    )]
    #[builder(default, setter(strip_option))]
    pub middle_name: Option<String>,
}

/// Details about the user's phone number. At most 1 phone number is allowed. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserForProviderPhoneNumbers {
    /// When true, this is the primary phone number associated with the user.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub primary: Option<bool>,
    /// The type of phone number.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// The user's phone number.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserInitProvider {
    /// Details about the user's address. At most 1 address is allowed. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub addresses: Option<UserInitProviderAddresses>,
    /// The name that is typically displayed when the user is referenced.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayName"
    )]
    #[builder(default, setter(strip_option))]
    pub display_name: Option<String>,
    /// Details about the user's email. At most 1 email is allowed. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub emails: Option<UserInitProviderEmails>,
    /// The user's geographical region or location.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub locale: Option<String>,
    /// Details about the user's full name. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<UserInitProviderName>,
    /// An alternate name for the user.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub nickname: Option<String>,
    /// Details about the user's phone number. At most 1 phone number is allowed. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phoneNumbers"
    )]
    #[builder(default, setter(strip_option))]
    pub phone_numbers: Option<UserInitProviderPhoneNumbers>,
    /// The preferred language of the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredLanguage"
    )]
    #[builder(default, setter(strip_option))]
    pub preferred_language: Option<String>,
    /// An URL that may be associated with the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "profileUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub profile_url: Option<String>,
    /// The user's time zone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub timezone: Option<String>,
    /// The user's title.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub title: Option<String>,
    /// A unique string used to identify the user. This value can consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is created and stored as an attribute of the user object in the identity store. The limit is 128 characters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userName")]
    #[builder(default, setter(strip_option))]
    pub user_name: Option<String>,
    /// The user type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userType")]
    #[builder(default, setter(strip_option))]
    pub user_type: Option<String>,
}

/// Details about the user's address. At most 1 address is allowed. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserInitProviderAddresses {
    /// The country that this address is in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub country: Option<String>,
    /// The name that is typically displayed when the address is shown for display.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub formatted: Option<String>,
    /// The address locality.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub locality: Option<String>,
    /// The postal code of the address.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postalCode"
    )]
    #[builder(default, setter(strip_option))]
    pub postal_code: Option<String>,
    /// When true, this is the primary address associated with the user.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub primary: Option<bool>,
    /// The street of the address.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streetAddress"
    )]
    #[builder(default, setter(strip_option))]
    pub street_address: Option<String>,
    /// The type of address.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Details about the user's email. At most 1 email is allowed. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserInitProviderEmails {
    /// When true, this is the primary email associated with the user.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub primary: Option<bool>,
    /// The type of email.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// The email address. This value must be unique across the identity store.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Details about the user's full name. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserInitProviderName {
    /// The family name of the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "familyName"
    )]
    #[builder(default, setter(strip_option))]
    pub family_name: Option<String>,
    /// The name that is typically displayed when the name is shown for display.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub formatted: Option<String>,
    /// The given name of the user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "givenName")]
    #[builder(default, setter(strip_option))]
    pub given_name: Option<String>,
    /// The honorific prefix of the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "honorificPrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub honorific_prefix: Option<String>,
    /// The honorific suffix of the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "honorificSuffix"
    )]
    #[builder(default, setter(strip_option))]
    pub honorific_suffix: Option<String>,
    /// The middle name of the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "middleName"
    )]
    #[builder(default, setter(strip_option))]
    pub middle_name: Option<String>,
}

/// Details about the user's phone number. At most 1 phone number is allowed. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserInitProviderPhoneNumbers {
    /// When true, this is the primary phone number associated with the user.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub primary: Option<bool>,
    /// The type of phone number.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// The user's phone number.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<UserProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<UserProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<UserProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UserProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UserProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<UserPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<UserPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<UserPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<UserPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<UserPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UserPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UserPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// UserStatus defines the observed state of User.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<UserStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserStatusAtProvider {
    /// Details about the user's address. At most 1 address is allowed. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub addresses: Option<UserStatusAtProviderAddresses>,
    /// The name that is typically displayed when the user is referenced.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayName"
    )]
    #[builder(default, setter(strip_option))]
    pub display_name: Option<String>,
    /// Details about the user's email. At most 1 email is allowed. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub emails: Option<UserStatusAtProviderEmails>,
    /// A list of identifiers issued to this resource by an external identity provider.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "externalIds"
    )]
    #[builder(default, setter(strip_option))]
    pub external_ids: Option<Vec<UserStatusAtProviderExternalIds>>,
    /// The identifier issued to this resource by an external identity provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// The globally unique identifier for the identity store that this user is in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityStoreId"
    )]
    #[builder(default, setter(strip_option))]
    pub identity_store_id: Option<String>,
    /// The user's geographical region or location.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub locale: Option<String>,
    /// Details about the user's full name. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<UserStatusAtProviderName>,
    /// An alternate name for the user.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub nickname: Option<String>,
    /// Details about the user's phone number. At most 1 phone number is allowed. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "phoneNumbers"
    )]
    #[builder(default, setter(strip_option))]
    pub phone_numbers: Option<UserStatusAtProviderPhoneNumbers>,
    /// The preferred language of the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredLanguage"
    )]
    #[builder(default, setter(strip_option))]
    pub preferred_language: Option<String>,
    /// An URL that may be associated with the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "profileUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub profile_url: Option<String>,
    /// The user's time zone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub timezone: Option<String>,
    /// The user's title.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub title: Option<String>,
    /// The identifier for this user in the identity store.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userId")]
    #[builder(default, setter(strip_option))]
    pub user_id: Option<String>,
    /// A unique string used to identify the user. This value can consist of letters, accented characters, symbols, numbers, and punctuation. This value is specified at the time the user is created and stored as an attribute of the user object in the identity store. The limit is 128 characters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userName")]
    #[builder(default, setter(strip_option))]
    pub user_name: Option<String>,
    /// The user type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userType")]
    #[builder(default, setter(strip_option))]
    pub user_type: Option<String>,
}

/// Details about the user's address. At most 1 address is allowed. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserStatusAtProviderAddresses {
    /// The country that this address is in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub country: Option<String>,
    /// The name that is typically displayed when the address is shown for display.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub formatted: Option<String>,
    /// The address locality.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub locality: Option<String>,
    /// The postal code of the address.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "postalCode"
    )]
    #[builder(default, setter(strip_option))]
    pub postal_code: Option<String>,
    /// When true, this is the primary address associated with the user.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub primary: Option<bool>,
    /// The region of the address.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub region: Option<String>,
    /// The street of the address.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streetAddress"
    )]
    #[builder(default, setter(strip_option))]
    pub street_address: Option<String>,
    /// The type of address.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Details about the user's email. At most 1 email is allowed. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserStatusAtProviderEmails {
    /// When true, this is the primary email associated with the user.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub primary: Option<bool>,
    /// The type of email.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// The email address. This value must be unique across the identity store.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserStatusAtProviderExternalIds {
    /// The identifier issued to this resource by an external identity provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// The issuer for an external identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub issuer: Option<String>,
}

/// Details about the user's full name. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserStatusAtProviderName {
    /// The family name of the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "familyName"
    )]
    #[builder(default, setter(strip_option))]
    pub family_name: Option<String>,
    /// The name that is typically displayed when the name is shown for display.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub formatted: Option<String>,
    /// The given name of the user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "givenName")]
    #[builder(default, setter(strip_option))]
    pub given_name: Option<String>,
    /// The honorific prefix of the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "honorificPrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub honorific_prefix: Option<String>,
    /// The honorific suffix of the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "honorificSuffix"
    )]
    #[builder(default, setter(strip_option))]
    pub honorific_suffix: Option<String>,
    /// The middle name of the user.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "middleName"
    )]
    #[builder(default, setter(strip_option))]
    pub middle_name: Option<String>,
}

/// Details about the user's phone number. At most 1 phone number is allowed. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct UserStatusAtProviderPhoneNumbers {
    /// When true, this is the primary phone number associated with the user.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub primary: Option<bool>,
    /// The type of phone number.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// The user's phone number.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

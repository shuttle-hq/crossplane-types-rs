// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// StackSpec defines the desired state of Stack
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "appstream.aws.upbound.io",
    version = "v1beta2",
    kind = "Stack",
    plural = "stacks"
)]
#[kube(status = "StackStatus")]
pub struct StackSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<StackDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: StackForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<StackInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<StackProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<StackPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<StackWriteConnectionSecretToRef>,
}

/// StackSpec defines the desired state of Stack
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackForProvider {
    /// Set of configuration blocks defining the interface VPC endpoints. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.
    /// See access_endpoints below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessEndpoints"
    )]
    #[builder(default, setter(strip_option))]
    pub access_endpoints: Option<Vec<StackForProviderAccessEndpoints>>,
    /// Settings for application settings persistence.
    /// See application_settings below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "applicationSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub application_settings: Option<StackForProviderApplicationSettings>,
    /// Description for the AppStream stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Stack name to display.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayName"
    )]
    #[builder(default, setter(strip_option))]
    pub display_name: Option<String>,
    /// Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "embedHostDomains"
    )]
    #[builder(default, setter(strip_option))]
    pub embed_host_domains: Option<Vec<String>>,
    /// URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "feedbackUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub feedback_url: Option<String>,
    /// Unique name for the AppStream stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// URL that users are redirected to after their streaming session ends.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "redirectUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub redirect_url: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Configuration block for the storage connectors to enable.
    /// See storage_connectors below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageConnectors"
    )]
    #[builder(default, setter(strip_option))]
    pub storage_connectors: Option<Vec<StackForProviderStorageConnectors>>,
    /// The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
    /// See streaming_experience_settings below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streamingExperienceSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub streaming_experience_settings: Option<StackForProviderStreamingExperienceSettings>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Configuration block for the actions that are enabled or disabled for users during their streaming sessions. If not provided, these settings are configured automatically by AWS.
    /// See user_settings below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub user_settings: Option<Vec<StackForProviderUserSettings>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackForProviderAccessEndpoints {
    /// Type of the interface endpoint.
    /// See the AccessEndpoint AWS API documentation for valid values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointType"
    )]
    #[builder(default, setter(strip_option))]
    pub endpoint_type: Option<String>,
    /// ID of the VPC in which the interface endpoint is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpceId")]
    #[builder(default, setter(strip_option))]
    pub vpce_id: Option<String>,
}

/// Settings for application settings persistence.
/// See application_settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackForProviderApplicationSettings {
    /// Whether application settings should be persisted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// Name of the settings group.
    /// Required when enabled is true.
    /// Can be up to 100 characters.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "settingsGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub settings_group: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackForProviderStorageConnectors {
    /// Type of storage connector.
    /// Valid values are HOMEFOLDERS, GOOGLE_DRIVE, or ONE_DRIVE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectorType"
    )]
    #[builder(default, setter(strip_option))]
    pub connector_type: Option<String>,
    /// Names of the domains for the account.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub domains: Option<Vec<String>>,
    /// ARN of the storage connector.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceIdentifier"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_identifier: Option<String>,
}

/// The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
/// See streaming_experience_settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackForProviderStreamingExperienceSettings {
    /// The preferred protocol that you want to use while streaming your application.
    /// Valid values are TCP and UDP.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredProtocol"
    )]
    #[builder(default, setter(strip_option))]
    pub preferred_protocol: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackForProviderUserSettings {
    /// Action that is enabled or disabled.
    /// Valid values are AUTO_TIME_ZONE_REDIRECTION, CLIPBOARD_COPY_FROM_LOCAL_DEVICE, CLIPBOARD_COPY_TO_LOCAL_DEVICE, DOMAIN_PASSWORD_SIGNIN, DOMAIN_SMART_CARD_SIGNIN, FILE_UPLOAD, FILE_DOWNLOAD, or PRINTING_TO_LOCAL_DEVICE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub action: Option<String>,
    /// Whether the action is enabled or disabled.
    /// Valid values are ENABLED or DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub permission: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackInitProvider {
    /// Set of configuration blocks defining the interface VPC endpoints. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.
    /// See access_endpoints below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessEndpoints"
    )]
    #[builder(default, setter(strip_option))]
    pub access_endpoints: Option<Vec<StackInitProviderAccessEndpoints>>,
    /// Settings for application settings persistence.
    /// See application_settings below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "applicationSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub application_settings: Option<StackInitProviderApplicationSettings>,
    /// Description for the AppStream stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Stack name to display.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayName"
    )]
    #[builder(default, setter(strip_option))]
    pub display_name: Option<String>,
    /// Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "embedHostDomains"
    )]
    #[builder(default, setter(strip_option))]
    pub embed_host_domains: Option<Vec<String>>,
    /// URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "feedbackUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub feedback_url: Option<String>,
    /// Unique name for the AppStream stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// URL that users are redirected to after their streaming session ends.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "redirectUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub redirect_url: Option<String>,
    /// Configuration block for the storage connectors to enable.
    /// See storage_connectors below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageConnectors"
    )]
    #[builder(default, setter(strip_option))]
    pub storage_connectors: Option<Vec<StackInitProviderStorageConnectors>>,
    /// The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
    /// See streaming_experience_settings below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streamingExperienceSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub streaming_experience_settings: Option<StackInitProviderStreamingExperienceSettings>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Configuration block for the actions that are enabled or disabled for users during their streaming sessions. If not provided, these settings are configured automatically by AWS.
    /// See user_settings below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub user_settings: Option<Vec<StackInitProviderUserSettings>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackInitProviderAccessEndpoints {
    /// Type of the interface endpoint.
    /// See the AccessEndpoint AWS API documentation for valid values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointType"
    )]
    #[builder(default, setter(strip_option))]
    pub endpoint_type: Option<String>,
    /// ID of the VPC in which the interface endpoint is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpceId")]
    #[builder(default, setter(strip_option))]
    pub vpce_id: Option<String>,
}

/// Settings for application settings persistence.
/// See application_settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackInitProviderApplicationSettings {
    /// Whether application settings should be persisted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// Name of the settings group.
    /// Required when enabled is true.
    /// Can be up to 100 characters.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "settingsGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub settings_group: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackInitProviderStorageConnectors {
    /// Type of storage connector.
    /// Valid values are HOMEFOLDERS, GOOGLE_DRIVE, or ONE_DRIVE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectorType"
    )]
    #[builder(default, setter(strip_option))]
    pub connector_type: Option<String>,
    /// Names of the domains for the account.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub domains: Option<Vec<String>>,
    /// ARN of the storage connector.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceIdentifier"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_identifier: Option<String>,
}

/// The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
/// See streaming_experience_settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackInitProviderStreamingExperienceSettings {
    /// The preferred protocol that you want to use while streaming your application.
    /// Valid values are TCP and UDP.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredProtocol"
    )]
    #[builder(default, setter(strip_option))]
    pub preferred_protocol: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackInitProviderUserSettings {
    /// Action that is enabled or disabled.
    /// Valid values are AUTO_TIME_ZONE_REDIRECTION, CLIPBOARD_COPY_FROM_LOCAL_DEVICE, CLIPBOARD_COPY_TO_LOCAL_DEVICE, DOMAIN_PASSWORD_SIGNIN, DOMAIN_SMART_CARD_SIGNIN, FILE_UPLOAD, FILE_DOWNLOAD, or PRINTING_TO_LOCAL_DEVICE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub action: Option<String>,
    /// Whether the action is enabled or disabled.
    /// Valid values are ENABLED or DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub permission: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<StackProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<StackProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<StackProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<StackPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<StackPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<StackPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<StackPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<StackPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// StackStatus defines the observed state of Stack.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<StackStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackStatusAtProvider {
    /// Set of configuration blocks defining the interface VPC endpoints. Users of the stack can connect to AppStream 2.0 only through the specified endpoints.
    /// See access_endpoints below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessEndpoints"
    )]
    #[builder(default, setter(strip_option))]
    pub access_endpoints: Option<Vec<StackStatusAtProviderAccessEndpoints>>,
    /// Settings for application settings persistence.
    /// See application_settings below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "applicationSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub application_settings: Option<StackStatusAtProviderApplicationSettings>,
    /// ARN of the appstream stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Date and time, in UTC and extended RFC 3339 format, when the stack was created.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createdTime"
    )]
    #[builder(default, setter(strip_option))]
    pub created_time: Option<String>,
    /// Description for the AppStream stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Stack name to display.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayName"
    )]
    #[builder(default, setter(strip_option))]
    pub display_name: Option<String>,
    /// Domains where AppStream 2.0 streaming sessions can be embedded in an iframe. You must approve the domains that you want to host embedded AppStream 2.0 streaming sessions.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "embedHostDomains"
    )]
    #[builder(default, setter(strip_option))]
    pub embed_host_domains: Option<Vec<String>>,
    /// URL that users are redirected to after they click the Send Feedback link. If no URL is specified, no Send Feedback link is displayed. .
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "feedbackUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub feedback_url: Option<String>,
    /// Unique ID of the appstream stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Unique name for the AppStream stack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// URL that users are redirected to after their streaming session ends.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "redirectUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub redirect_url: Option<String>,
    /// Configuration block for the storage connectors to enable.
    /// See storage_connectors below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageConnectors"
    )]
    #[builder(default, setter(strip_option))]
    pub storage_connectors: Option<Vec<StackStatusAtProviderStorageConnectors>>,
    /// The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
    /// See streaming_experience_settings below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streamingExperienceSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub streaming_experience_settings: Option<StackStatusAtProviderStreamingExperienceSettings>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// Configuration block for the actions that are enabled or disabled for users during their streaming sessions. If not provided, these settings are configured automatically by AWS.
    /// See user_settings below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub user_settings: Option<Vec<StackStatusAtProviderUserSettings>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackStatusAtProviderAccessEndpoints {
    /// Type of the interface endpoint.
    /// See the AccessEndpoint AWS API documentation for valid values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointType"
    )]
    #[builder(default, setter(strip_option))]
    pub endpoint_type: Option<String>,
    /// ID of the VPC in which the interface endpoint is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpceId")]
    #[builder(default, setter(strip_option))]
    pub vpce_id: Option<String>,
}

/// Settings for application settings persistence.
/// See application_settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackStatusAtProviderApplicationSettings {
    /// Whether application settings should be persisted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// Name of the settings group.
    /// Required when enabled is true.
    /// Can be up to 100 characters.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "settingsGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub settings_group: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackStatusAtProviderStorageConnectors {
    /// Type of storage connector.
    /// Valid values are HOMEFOLDERS, GOOGLE_DRIVE, or ONE_DRIVE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectorType"
    )]
    #[builder(default, setter(strip_option))]
    pub connector_type: Option<String>,
    /// Names of the domains for the account.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub domains: Option<Vec<String>>,
    /// ARN of the storage connector.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceIdentifier"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_identifier: Option<String>,
}

/// The streaming protocol you want your stack to prefer. This can be UDP or TCP. Currently, UDP is only supported in the Windows native client.
/// See streaming_experience_settings below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackStatusAtProviderStreamingExperienceSettings {
    /// The preferred protocol that you want to use while streaming your application.
    /// Valid values are TCP and UDP.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "preferredProtocol"
    )]
    #[builder(default, setter(strip_option))]
    pub preferred_protocol: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StackStatusAtProviderUserSettings {
    /// Action that is enabled or disabled.
    /// Valid values are AUTO_TIME_ZONE_REDIRECTION, CLIPBOARD_COPY_FROM_LOCAL_DEVICE, CLIPBOARD_COPY_TO_LOCAL_DEVICE, DOMAIN_PASSWORD_SIGNIN, DOMAIN_SMART_CARD_SIGNIN, FILE_UPLOAD, FILE_DOWNLOAD, or PRINTING_TO_LOCAL_DEVICE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub action: Option<String>,
    /// Whether the action is enabled or disabled.
    /// Valid values are ENABLED or DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub permission: Option<String>,
}

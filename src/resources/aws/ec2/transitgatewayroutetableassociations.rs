// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// TransitGatewayRouteTableAssociationSpec defines the desired state of TransitGatewayRouteTableAssociation
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "ec2.aws.upbound.io",
    version = "v1beta1",
    kind = "TransitGatewayRouteTableAssociation",
    plural = "transitgatewayroutetableassociations"
)]
#[kube(status = "TransitGatewayRouteTableAssociationStatus")]
pub struct TransitGatewayRouteTableAssociationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<TransitGatewayRouteTableAssociationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: TransitGatewayRouteTableAssociationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<TransitGatewayRouteTableAssociationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<TransitGatewayRouteTableAssociationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to:
        Option<TransitGatewayRouteTableAssociationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref:
        Option<TransitGatewayRouteTableAssociationWriteConnectionSecretToRef>,
}

/// TransitGatewayRouteTableAssociationSpec defines the desired state of TransitGatewayRouteTableAssociation
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationForProvider {
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Boolean whether the Gateway Attachment should remove any current Route Table association before associating with the specified Route Table. Default value: false. This argument is intended for use with EC2 Transit Gateways shared into the current account, otherwise the transit_gateway_default_route_table_association argument of the aws_ec2_transit_gateway_vpc_attachment resource should be used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replaceExistingAssociation"
    )]
    #[builder(default, setter(strip_option))]
    pub replace_existing_association: Option<bool>,
    /// Identifier of EC2 Transit Gateway Attachment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayAttachmentId"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_attachment_id: Option<String>,
    /// Reference to a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayAttachmentIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_attachment_id_ref:
        Option<TransitGatewayRouteTableAssociationForProviderTransitGatewayAttachmentIdRef>,
    /// Selector for a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayAttachmentIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_attachment_id_selector:
        Option<TransitGatewayRouteTableAssociationForProviderTransitGatewayAttachmentIdSelector>,
    /// Identifier of EC2 Transit Gateway Route Table.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayRouteTableId"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_route_table_id: Option<String>,
    /// Reference to a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayRouteTableIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_route_table_id_ref:
        Option<TransitGatewayRouteTableAssociationForProviderTransitGatewayRouteTableIdRef>,
    /// Selector for a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayRouteTableIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_route_table_id_selector:
        Option<TransitGatewayRouteTableAssociationForProviderTransitGatewayRouteTableIdSelector>,
}

/// Reference to a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationForProviderTransitGatewayAttachmentIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<TransitGatewayRouteTableAssociationForProviderTransitGatewayAttachmentIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationForProviderTransitGatewayAttachmentIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<
        TransitGatewayRouteTableAssociationForProviderTransitGatewayAttachmentIdRefPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<
        TransitGatewayRouteTableAssociationForProviderTransitGatewayAttachmentIdRefPolicyResolve,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationForProviderTransitGatewayAttachmentIdRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationForProviderTransitGatewayAttachmentIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationForProviderTransitGatewayAttachmentIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        TransitGatewayRouteTableAssociationForProviderTransitGatewayAttachmentIdSelectorPolicy,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationForProviderTransitGatewayAttachmentIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TransitGatewayRouteTableAssociationForProviderTransitGatewayAttachmentIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TransitGatewayRouteTableAssociationForProviderTransitGatewayAttachmentIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationForProviderTransitGatewayAttachmentIdSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationForProviderTransitGatewayAttachmentIdSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Reference to a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationForProviderTransitGatewayRouteTableIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<TransitGatewayRouteTableAssociationForProviderTransitGatewayRouteTableIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationForProviderTransitGatewayRouteTableIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<
        TransitGatewayRouteTableAssociationForProviderTransitGatewayRouteTableIdRefPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<
        TransitGatewayRouteTableAssociationForProviderTransitGatewayRouteTableIdRefPolicyResolve,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationForProviderTransitGatewayRouteTableIdRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationForProviderTransitGatewayRouteTableIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationForProviderTransitGatewayRouteTableIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        TransitGatewayRouteTableAssociationForProviderTransitGatewayRouteTableIdSelectorPolicy,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationForProviderTransitGatewayRouteTableIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TransitGatewayRouteTableAssociationForProviderTransitGatewayRouteTableIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TransitGatewayRouteTableAssociationForProviderTransitGatewayRouteTableIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationForProviderTransitGatewayRouteTableIdSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationForProviderTransitGatewayRouteTableIdSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationInitProvider {
    /// Boolean whether the Gateway Attachment should remove any current Route Table association before associating with the specified Route Table. Default value: false. This argument is intended for use with EC2 Transit Gateways shared into the current account, otherwise the transit_gateway_default_route_table_association argument of the aws_ec2_transit_gateway_vpc_attachment resource should be used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replaceExistingAssociation"
    )]
    #[builder(default, setter(strip_option))]
    pub replace_existing_association: Option<bool>,
    /// Identifier of EC2 Transit Gateway Attachment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayAttachmentId"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_attachment_id: Option<String>,
    /// Reference to a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayAttachmentIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_attachment_id_ref:
        Option<TransitGatewayRouteTableAssociationInitProviderTransitGatewayAttachmentIdRef>,
    /// Selector for a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayAttachmentIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_attachment_id_selector:
        Option<TransitGatewayRouteTableAssociationInitProviderTransitGatewayAttachmentIdSelector>,
    /// Identifier of EC2 Transit Gateway Route Table.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayRouteTableId"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_route_table_id: Option<String>,
    /// Reference to a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayRouteTableIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_route_table_id_ref:
        Option<TransitGatewayRouteTableAssociationInitProviderTransitGatewayRouteTableIdRef>,
    /// Selector for a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayRouteTableIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_route_table_id_selector:
        Option<TransitGatewayRouteTableAssociationInitProviderTransitGatewayRouteTableIdSelector>,
}

/// Reference to a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationInitProviderTransitGatewayAttachmentIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<TransitGatewayRouteTableAssociationInitProviderTransitGatewayAttachmentIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationInitProviderTransitGatewayAttachmentIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TransitGatewayRouteTableAssociationInitProviderTransitGatewayAttachmentIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TransitGatewayRouteTableAssociationInitProviderTransitGatewayAttachmentIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationInitProviderTransitGatewayAttachmentIdRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationInitProviderTransitGatewayAttachmentIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationInitProviderTransitGatewayAttachmentIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        TransitGatewayRouteTableAssociationInitProviderTransitGatewayAttachmentIdSelectorPolicy,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationInitProviderTransitGatewayAttachmentIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TransitGatewayRouteTableAssociationInitProviderTransitGatewayAttachmentIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TransitGatewayRouteTableAssociationInitProviderTransitGatewayAttachmentIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationInitProviderTransitGatewayAttachmentIdSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationInitProviderTransitGatewayAttachmentIdSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Reference to a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationInitProviderTransitGatewayRouteTableIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<TransitGatewayRouteTableAssociationInitProviderTransitGatewayRouteTableIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationInitProviderTransitGatewayRouteTableIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TransitGatewayRouteTableAssociationInitProviderTransitGatewayRouteTableIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TransitGatewayRouteTableAssociationInitProviderTransitGatewayRouteTableIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationInitProviderTransitGatewayRouteTableIdRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationInitProviderTransitGatewayRouteTableIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationInitProviderTransitGatewayRouteTableIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        TransitGatewayRouteTableAssociationInitProviderTransitGatewayRouteTableIdSelectorPolicy,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationInitProviderTransitGatewayRouteTableIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TransitGatewayRouteTableAssociationInitProviderTransitGatewayRouteTableIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TransitGatewayRouteTableAssociationInitProviderTransitGatewayRouteTableIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationInitProviderTransitGatewayRouteTableIdSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationInitProviderTransitGatewayRouteTableIdSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TransitGatewayRouteTableAssociationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TransitGatewayRouteTableAssociationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TransitGatewayRouteTableAssociationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<TransitGatewayRouteTableAssociationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<TransitGatewayRouteTableAssociationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<TransitGatewayRouteTableAssociationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<
        TransitGatewayRouteTableAssociationPublishConnectionDetailsToConfigRefPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<TransitGatewayRouteTableAssociationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTableAssociationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// TransitGatewayRouteTableAssociationStatus defines the observed state of TransitGatewayRouteTableAssociation.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<TransitGatewayRouteTableAssociationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TransitGatewayRouteTableAssociationStatusAtProvider {
    /// EC2 Transit Gateway Route Table identifier combined with EC2 Transit Gateway Attachment identifier
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Boolean whether the Gateway Attachment should remove any current Route Table association before associating with the specified Route Table. Default value: false. This argument is intended for use with EC2 Transit Gateways shared into the current account, otherwise the transit_gateway_default_route_table_association argument of the aws_ec2_transit_gateway_vpc_attachment resource should be used.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "replaceExistingAssociation"
    )]
    #[builder(default, setter(strip_option))]
    pub replace_existing_association: Option<bool>,
    /// Identifier of the resource
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceId"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_id: Option<String>,
    /// Type of the resource
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceType"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_type: Option<String>,
    /// Identifier of EC2 Transit Gateway Attachment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayAttachmentId"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_attachment_id: Option<String>,
    /// Identifier of EC2 Transit Gateway Route Table.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayRouteTableId"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_route_table_id: Option<String>,
}

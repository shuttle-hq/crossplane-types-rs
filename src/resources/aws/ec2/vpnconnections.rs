// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// VPNConnectionSpec defines the desired state of VPNConnection
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "ec2.aws.upbound.io",
    version = "v1beta2",
    kind = "VPNConnection",
    plural = "vpnconnections"
)]
#[kube(status = "VPNConnectionStatus")]
pub struct VPNConnectionSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<VPNConnectionDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: VPNConnectionForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<VPNConnectionInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<VPNConnectionProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<VPNConnectionPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<VPNConnectionWriteConnectionSecretToRef>,
}

/// VPNConnectionSpec defines the desired state of VPNConnection
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProvider {
    /// The ID of the customer gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customerGatewayId"
    )]
    #[builder(default, setter(strip_option))]
    pub customer_gateway_id: Option<String>,
    /// Reference to a CustomerGateway in ec2 to populate customerGatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customerGatewayIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub customer_gateway_id_ref: Option<VPNConnectionForProviderCustomerGatewayIdRef>,
    /// Selector for a CustomerGateway in ec2 to populate customerGatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customerGatewayIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub customer_gateway_id_selector: Option<VPNConnectionForProviderCustomerGatewayIdSelector>,
    /// Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableAcceleration"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_acceleration: Option<bool>,
    /// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localIpv4NetworkCidr"
    )]
    #[builder(default, setter(strip_option))]
    pub local_ipv4_network_cidr: Option<String>,
    /// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localIpv6NetworkCidr"
    )]
    #[builder(default, setter(strip_option))]
    pub local_ipv6_network_cidr: Option<String>,
    /// Indicates if a Public S2S VPN or Private S2S VPN over AWS Direct Connect. Valid values are PublicIpv4 | PrivateIpv4
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outsideIpAddressType"
    )]
    #[builder(default, setter(strip_option))]
    pub outside_ip_address_type: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The IPv4 CIDR on the AWS side of the VPN connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "remoteIpv4NetworkCidr"
    )]
    #[builder(default, setter(strip_option))]
    pub remote_ipv4_network_cidr: Option<String>,
    /// The IPv6 CIDR on the AWS side of the VPN connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "remoteIpv6NetworkCidr"
    )]
    #[builder(default, setter(strip_option))]
    pub remote_ipv6_network_cidr: Option<String>,
    /// Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "staticRoutesOnly"
    )]
    #[builder(default, setter(strip_option))]
    pub static_routes_only: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// The ID of the EC2 Transit Gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayId"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_id: Option<String>,
    /// Reference to a TransitGateway in ec2 to populate transitGatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_id_ref: Option<VPNConnectionForProviderTransitGatewayIdRef>,
    /// Selector for a TransitGateway in ec2 to populate transitGatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_id_selector: Option<VPNConnectionForProviderTransitGatewayIdSelector>,
    /// . The attachment ID of the Transit Gateway attachment to Direct Connect Gateway. The ID is obtained through a data source only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transportTransitGatewayAttachmentId"
    )]
    #[builder(default, setter(strip_option))]
    pub transport_transit_gateway_attachment_id: Option<String>,
    /// The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are clear | none | restart.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1DpdTimeoutAction"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_dpd_timeout_action: Option<String>,
    /// The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than 30.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1DpdTimeoutSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_dpd_timeout_seconds: Option<f64>,
    /// Turn on or off tunnel endpoint lifecycle control feature for the first VPN tunnel. Valid values are true | false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1EnableTunnelLifecycleControl"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_enable_tunnel_lifecycle_control: Option<bool>,
    /// The IKE versions that are permitted for the first VPN tunnel. Valid values are ikev1 | ikev2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1IkeVersions"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_ike_versions: Option<Vec<String>>,
    /// The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1InsideCidr"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_inside_cidr: Option<String>,
    /// The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1InsideIpv6Cidr"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_inside_ipv6_cidr: Option<String>,
    /// Options for logging VPN tunnel activity. See Log Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1LogOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_log_options: Option<VPNConnectionForProviderTunnel1LogOptions>,
    /// List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase1DhGroupNumbers"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase1_dh_group_numbers: Option<Vec<f64>>,
    /// List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase1EncryptionAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase1_encryption_algorithms: Option<Vec<String>>,
    /// One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase1IntegrityAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase1_integrity_algorithms: Option<Vec<String>>,
    /// The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between 900 and 28800.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase1LifetimeSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase1_lifetime_seconds: Option<f64>,
    /// List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase2DhGroupNumbers"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase2_dh_group_numbers: Option<Vec<f64>>,
    /// List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase2EncryptionAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase2_encryption_algorithms: Option<Vec<String>>,
    /// List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase2IntegrityAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase2_integrity_algorithms: Option<Vec<String>>,
    /// The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between 900 and 3600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase2LifetimeSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase2_lifetime_seconds: Option<f64>,
    /// The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1PresharedKeySecretRef"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_preshared_key_secret_ref:
        Option<VPNConnectionForProviderTunnel1PresharedKeySecretRef>,
    /// The percentage of the rekey window for the first VPN tunnel (determined by tunnel1_rekey_margin_time_seconds) during which the rekey time is randomly selected. Valid value is between 0 and 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1RekeyFuzzPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_rekey_fuzz_percentage: Option<f64>,
    /// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for tunnel1_rekey_fuzz_percentage. Valid value is between 60 and half of tunnel1_phase2_lifetime_seconds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1RekeyMarginTimeSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_rekey_margin_time_seconds: Option<f64>,
    /// The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between 64 and 2048.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1ReplayWindowSize"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_replay_window_size: Option<f64>,
    /// The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are add | start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1StartupAction"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_startup_action: Option<String>,
    /// The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are clear | none | restart.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2DpdTimeoutAction"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_dpd_timeout_action: Option<String>,
    /// The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than 30.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2DpdTimeoutSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_dpd_timeout_seconds: Option<f64>,
    /// Turn on or off tunnel endpoint lifecycle control feature for the second VPN tunnel. Valid values are true | false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2EnableTunnelLifecycleControl"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_enable_tunnel_lifecycle_control: Option<bool>,
    /// The IKE versions that are permitted for the second VPN tunnel. Valid values are ikev1 | ikev2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2IkeVersions"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_ike_versions: Option<Vec<String>>,
    /// The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2InsideCidr"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_inside_cidr: Option<String>,
    /// The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2InsideIpv6Cidr"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_inside_ipv6_cidr: Option<String>,
    /// Options for logging VPN tunnel activity. See Log Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2LogOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_log_options: Option<VPNConnectionForProviderTunnel2LogOptions>,
    /// List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase1DhGroupNumbers"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase1_dh_group_numbers: Option<Vec<f64>>,
    /// List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase1EncryptionAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase1_encryption_algorithms: Option<Vec<String>>,
    /// One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase1IntegrityAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase1_integrity_algorithms: Option<Vec<String>>,
    /// The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between 900 and 28800.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase1LifetimeSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase1_lifetime_seconds: Option<f64>,
    /// List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase2DhGroupNumbers"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase2_dh_group_numbers: Option<Vec<f64>>,
    /// List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase2EncryptionAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase2_encryption_algorithms: Option<Vec<String>>,
    /// List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase2IntegrityAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase2_integrity_algorithms: Option<Vec<String>>,
    /// The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between 900 and 3600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase2LifetimeSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase2_lifetime_seconds: Option<f64>,
    /// The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2PresharedKeySecretRef"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_preshared_key_secret_ref:
        Option<VPNConnectionForProviderTunnel2PresharedKeySecretRef>,
    /// The percentage of the rekey window for the second VPN tunnel (determined by tunnel2_rekey_margin_time_seconds) during which the rekey time is randomly selected. Valid value is between 0 and 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2RekeyFuzzPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_rekey_fuzz_percentage: Option<f64>,
    /// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for tunnel2_rekey_fuzz_percentage. Valid value is between 60 and half of tunnel2_phase2_lifetime_seconds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2RekeyMarginTimeSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_rekey_margin_time_seconds: Option<f64>,
    /// The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between 64 and 2048.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2ReplayWindowSize"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_replay_window_size: Option<f64>,
    /// The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are add | start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2StartupAction"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_startup_action: Option<String>,
    /// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are ipv4 | ipv6. ipv6 Supports only EC2 Transit Gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnelInsideIpVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel_inside_ip_version: Option<String>,
    /// The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// Reference to a CustomerGateway in ec2 to populate type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typeRef")]
    #[builder(default, setter(strip_option))]
    pub type_ref: Option<VPNConnectionForProviderTypeRef>,
    /// Selector for a CustomerGateway in ec2 to populate type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "typeSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub type_selector: Option<VPNConnectionForProviderTypeSelector>,
    /// The ID of the Virtual Private Gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpnGatewayId"
    )]
    #[builder(default, setter(strip_option))]
    pub vpn_gateway_id: Option<String>,
    /// Reference to a VPNGateway in ec2 to populate vpnGatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpnGatewayIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub vpn_gateway_id_ref: Option<VPNConnectionForProviderVpnGatewayIdRef>,
    /// Selector for a VPNGateway in ec2 to populate vpnGatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpnGatewayIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub vpn_gateway_id_selector: Option<VPNConnectionForProviderVpnGatewayIdSelector>,
}

/// Reference to a CustomerGateway in ec2 to populate customerGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderCustomerGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPNConnectionForProviderCustomerGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderCustomerGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPNConnectionForProviderCustomerGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPNConnectionForProviderCustomerGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionForProviderCustomerGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionForProviderCustomerGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CustomerGateway in ec2 to populate customerGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderCustomerGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPNConnectionForProviderCustomerGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderCustomerGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPNConnectionForProviderCustomerGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPNConnectionForProviderCustomerGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionForProviderCustomerGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionForProviderCustomerGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a TransitGateway in ec2 to populate transitGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderTransitGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPNConnectionForProviderTransitGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderTransitGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPNConnectionForProviderTransitGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPNConnectionForProviderTransitGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionForProviderTransitGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionForProviderTransitGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGateway in ec2 to populate transitGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderTransitGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPNConnectionForProviderTransitGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderTransitGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPNConnectionForProviderTransitGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPNConnectionForProviderTransitGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionForProviderTransitGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionForProviderTransitGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Options for logging VPN tunnel activity. See Log Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderTunnel1LogOptions {
    /// Options for sending VPN tunnel logs to CloudWatch. See CloudWatch Log Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_log_options:
        Option<VPNConnectionForProviderTunnel1LogOptionsCloudwatchLogOptions>,
}

/// Options for sending VPN tunnel logs to CloudWatch. See CloudWatch Log Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderTunnel1LogOptionsCloudwatchLogOptions {
    /// Enable or disable VPN tunnel logging feature. The default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub log_enabled: Option<bool>,
    /// The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logGroupArn"
    )]
    #[builder(default, setter(strip_option))]
    pub log_group_arn: Option<String>,
    /// Set log format. Default format is json. Possible values are: json and text. The default is json.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logOutputFormat"
    )]
    #[builder(default, setter(strip_option))]
    pub log_output_format: Option<String>,
}

/// The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderTunnel1PresharedKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Options for logging VPN tunnel activity. See Log Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderTunnel2LogOptions {
    /// Options for sending VPN tunnel logs to CloudWatch. See CloudWatch Log Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_log_options:
        Option<VPNConnectionForProviderTunnel2LogOptionsCloudwatchLogOptions>,
}

/// Options for sending VPN tunnel logs to CloudWatch. See CloudWatch Log Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderTunnel2LogOptionsCloudwatchLogOptions {
    /// Enable or disable VPN tunnel logging feature. The default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub log_enabled: Option<bool>,
    /// The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logGroupArn"
    )]
    #[builder(default, setter(strip_option))]
    pub log_group_arn: Option<String>,
    /// Set log format. Default format is json. Possible values are: json and text. The default is json.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logOutputFormat"
    )]
    #[builder(default, setter(strip_option))]
    pub log_output_format: Option<String>,
}

/// The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderTunnel2PresharedKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a CustomerGateway in ec2 to populate type.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderTypeRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPNConnectionForProviderTypeRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderTypeRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPNConnectionForProviderTypeRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPNConnectionForProviderTypeRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionForProviderTypeRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionForProviderTypeRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CustomerGateway in ec2 to populate type.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderTypeSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPNConnectionForProviderTypeSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderTypeSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPNConnectionForProviderTypeSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPNConnectionForProviderTypeSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionForProviderTypeSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionForProviderTypeSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a VPNGateway in ec2 to populate vpnGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderVpnGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPNConnectionForProviderVpnGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderVpnGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPNConnectionForProviderVpnGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPNConnectionForProviderVpnGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionForProviderVpnGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionForProviderVpnGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPNGateway in ec2 to populate vpnGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderVpnGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPNConnectionForProviderVpnGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionForProviderVpnGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPNConnectionForProviderVpnGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPNConnectionForProviderVpnGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionForProviderVpnGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionForProviderVpnGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProvider {
    /// The ID of the customer gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customerGatewayId"
    )]
    #[builder(default, setter(strip_option))]
    pub customer_gateway_id: Option<String>,
    /// Reference to a CustomerGateway in ec2 to populate customerGatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customerGatewayIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub customer_gateway_id_ref: Option<VPNConnectionInitProviderCustomerGatewayIdRef>,
    /// Selector for a CustomerGateway in ec2 to populate customerGatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customerGatewayIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub customer_gateway_id_selector: Option<VPNConnectionInitProviderCustomerGatewayIdSelector>,
    /// Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableAcceleration"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_acceleration: Option<bool>,
    /// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localIpv4NetworkCidr"
    )]
    #[builder(default, setter(strip_option))]
    pub local_ipv4_network_cidr: Option<String>,
    /// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localIpv6NetworkCidr"
    )]
    #[builder(default, setter(strip_option))]
    pub local_ipv6_network_cidr: Option<String>,
    /// Indicates if a Public S2S VPN or Private S2S VPN over AWS Direct Connect. Valid values are PublicIpv4 | PrivateIpv4
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outsideIpAddressType"
    )]
    #[builder(default, setter(strip_option))]
    pub outside_ip_address_type: Option<String>,
    /// The IPv4 CIDR on the AWS side of the VPN connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "remoteIpv4NetworkCidr"
    )]
    #[builder(default, setter(strip_option))]
    pub remote_ipv4_network_cidr: Option<String>,
    /// The IPv6 CIDR on the AWS side of the VPN connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "remoteIpv6NetworkCidr"
    )]
    #[builder(default, setter(strip_option))]
    pub remote_ipv6_network_cidr: Option<String>,
    /// Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "staticRoutesOnly"
    )]
    #[builder(default, setter(strip_option))]
    pub static_routes_only: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// The ID of the EC2 Transit Gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayId"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_id: Option<String>,
    /// Reference to a TransitGateway in ec2 to populate transitGatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_id_ref: Option<VPNConnectionInitProviderTransitGatewayIdRef>,
    /// Selector for a TransitGateway in ec2 to populate transitGatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_id_selector: Option<VPNConnectionInitProviderTransitGatewayIdSelector>,
    /// . The attachment ID of the Transit Gateway attachment to Direct Connect Gateway. The ID is obtained through a data source only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transportTransitGatewayAttachmentId"
    )]
    #[builder(default, setter(strip_option))]
    pub transport_transit_gateway_attachment_id: Option<String>,
    /// The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are clear | none | restart.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1DpdTimeoutAction"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_dpd_timeout_action: Option<String>,
    /// The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than 30.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1DpdTimeoutSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_dpd_timeout_seconds: Option<f64>,
    /// Turn on or off tunnel endpoint lifecycle control feature for the first VPN tunnel. Valid values are true | false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1EnableTunnelLifecycleControl"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_enable_tunnel_lifecycle_control: Option<bool>,
    /// The IKE versions that are permitted for the first VPN tunnel. Valid values are ikev1 | ikev2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1IkeVersions"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_ike_versions: Option<Vec<String>>,
    /// The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1InsideCidr"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_inside_cidr: Option<String>,
    /// The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1InsideIpv6Cidr"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_inside_ipv6_cidr: Option<String>,
    /// Options for logging VPN tunnel activity. See Log Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1LogOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_log_options: Option<VPNConnectionInitProviderTunnel1LogOptions>,
    /// List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase1DhGroupNumbers"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase1_dh_group_numbers: Option<Vec<f64>>,
    /// List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase1EncryptionAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase1_encryption_algorithms: Option<Vec<String>>,
    /// One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase1IntegrityAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase1_integrity_algorithms: Option<Vec<String>>,
    /// The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between 900 and 28800.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase1LifetimeSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase1_lifetime_seconds: Option<f64>,
    /// List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase2DhGroupNumbers"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase2_dh_group_numbers: Option<Vec<f64>>,
    /// List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase2EncryptionAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase2_encryption_algorithms: Option<Vec<String>>,
    /// List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase2IntegrityAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase2_integrity_algorithms: Option<Vec<String>>,
    /// The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between 900 and 3600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase2LifetimeSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase2_lifetime_seconds: Option<f64>,
    /// The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1PresharedKeySecretRef"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_preshared_key_secret_ref:
        Option<VPNConnectionInitProviderTunnel1PresharedKeySecretRef>,
    /// The percentage of the rekey window for the first VPN tunnel (determined by tunnel1_rekey_margin_time_seconds) during which the rekey time is randomly selected. Valid value is between 0 and 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1RekeyFuzzPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_rekey_fuzz_percentage: Option<f64>,
    /// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for tunnel1_rekey_fuzz_percentage. Valid value is between 60 and half of tunnel1_phase2_lifetime_seconds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1RekeyMarginTimeSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_rekey_margin_time_seconds: Option<f64>,
    /// The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between 64 and 2048.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1ReplayWindowSize"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_replay_window_size: Option<f64>,
    /// The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are add | start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1StartupAction"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_startup_action: Option<String>,
    /// The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are clear | none | restart.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2DpdTimeoutAction"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_dpd_timeout_action: Option<String>,
    /// The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than 30.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2DpdTimeoutSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_dpd_timeout_seconds: Option<f64>,
    /// Turn on or off tunnel endpoint lifecycle control feature for the second VPN tunnel. Valid values are true | false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2EnableTunnelLifecycleControl"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_enable_tunnel_lifecycle_control: Option<bool>,
    /// The IKE versions that are permitted for the second VPN tunnel. Valid values are ikev1 | ikev2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2IkeVersions"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_ike_versions: Option<Vec<String>>,
    /// The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2InsideCidr"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_inside_cidr: Option<String>,
    /// The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2InsideIpv6Cidr"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_inside_ipv6_cidr: Option<String>,
    /// Options for logging VPN tunnel activity. See Log Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2LogOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_log_options: Option<VPNConnectionInitProviderTunnel2LogOptions>,
    /// List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase1DhGroupNumbers"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase1_dh_group_numbers: Option<Vec<f64>>,
    /// List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase1EncryptionAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase1_encryption_algorithms: Option<Vec<String>>,
    /// One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase1IntegrityAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase1_integrity_algorithms: Option<Vec<String>>,
    /// The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between 900 and 28800.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase1LifetimeSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase1_lifetime_seconds: Option<f64>,
    /// List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase2DhGroupNumbers"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase2_dh_group_numbers: Option<Vec<f64>>,
    /// List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase2EncryptionAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase2_encryption_algorithms: Option<Vec<String>>,
    /// List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase2IntegrityAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase2_integrity_algorithms: Option<Vec<String>>,
    /// The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between 900 and 3600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase2LifetimeSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase2_lifetime_seconds: Option<f64>,
    /// The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2PresharedKeySecretRef"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_preshared_key_secret_ref:
        Option<VPNConnectionInitProviderTunnel2PresharedKeySecretRef>,
    /// The percentage of the rekey window for the second VPN tunnel (determined by tunnel2_rekey_margin_time_seconds) during which the rekey time is randomly selected. Valid value is between 0 and 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2RekeyFuzzPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_rekey_fuzz_percentage: Option<f64>,
    /// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for tunnel2_rekey_fuzz_percentage. Valid value is between 60 and half of tunnel2_phase2_lifetime_seconds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2RekeyMarginTimeSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_rekey_margin_time_seconds: Option<f64>,
    /// The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between 64 and 2048.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2ReplayWindowSize"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_replay_window_size: Option<f64>,
    /// The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are add | start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2StartupAction"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_startup_action: Option<String>,
    /// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are ipv4 | ipv6. ipv6 Supports only EC2 Transit Gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnelInsideIpVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel_inside_ip_version: Option<String>,
    /// The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// Reference to a CustomerGateway in ec2 to populate type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typeRef")]
    #[builder(default, setter(strip_option))]
    pub type_ref: Option<VPNConnectionInitProviderTypeRef>,
    /// Selector for a CustomerGateway in ec2 to populate type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "typeSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub type_selector: Option<VPNConnectionInitProviderTypeSelector>,
    /// The ID of the Virtual Private Gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpnGatewayId"
    )]
    #[builder(default, setter(strip_option))]
    pub vpn_gateway_id: Option<String>,
    /// Reference to a VPNGateway in ec2 to populate vpnGatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpnGatewayIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub vpn_gateway_id_ref: Option<VPNConnectionInitProviderVpnGatewayIdRef>,
    /// Selector for a VPNGateway in ec2 to populate vpnGatewayId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpnGatewayIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub vpn_gateway_id_selector: Option<VPNConnectionInitProviderVpnGatewayIdSelector>,
}

/// Reference to a CustomerGateway in ec2 to populate customerGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderCustomerGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPNConnectionInitProviderCustomerGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderCustomerGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPNConnectionInitProviderCustomerGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPNConnectionInitProviderCustomerGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionInitProviderCustomerGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionInitProviderCustomerGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CustomerGateway in ec2 to populate customerGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderCustomerGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPNConnectionInitProviderCustomerGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderCustomerGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPNConnectionInitProviderCustomerGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPNConnectionInitProviderCustomerGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionInitProviderCustomerGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionInitProviderCustomerGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a TransitGateway in ec2 to populate transitGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderTransitGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPNConnectionInitProviderTransitGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderTransitGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPNConnectionInitProviderTransitGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPNConnectionInitProviderTransitGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionInitProviderTransitGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionInitProviderTransitGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGateway in ec2 to populate transitGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderTransitGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPNConnectionInitProviderTransitGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderTransitGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPNConnectionInitProviderTransitGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPNConnectionInitProviderTransitGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionInitProviderTransitGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionInitProviderTransitGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Options for logging VPN tunnel activity. See Log Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderTunnel1LogOptions {
    /// Options for sending VPN tunnel logs to CloudWatch. See CloudWatch Log Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_log_options:
        Option<VPNConnectionInitProviderTunnel1LogOptionsCloudwatchLogOptions>,
}

/// Options for sending VPN tunnel logs to CloudWatch. See CloudWatch Log Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderTunnel1LogOptionsCloudwatchLogOptions {
    /// Enable or disable VPN tunnel logging feature. The default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub log_enabled: Option<bool>,
    /// The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logGroupArn"
    )]
    #[builder(default, setter(strip_option))]
    pub log_group_arn: Option<String>,
    /// Set log format. Default format is json. Possible values are: json and text. The default is json.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logOutputFormat"
    )]
    #[builder(default, setter(strip_option))]
    pub log_output_format: Option<String>,
}

/// The preshared key of the first VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderTunnel1PresharedKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Options for logging VPN tunnel activity. See Log Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderTunnel2LogOptions {
    /// Options for sending VPN tunnel logs to CloudWatch. See CloudWatch Log Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_log_options:
        Option<VPNConnectionInitProviderTunnel2LogOptionsCloudwatchLogOptions>,
}

/// Options for sending VPN tunnel logs to CloudWatch. See CloudWatch Log Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderTunnel2LogOptionsCloudwatchLogOptions {
    /// Enable or disable VPN tunnel logging feature. The default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub log_enabled: Option<bool>,
    /// The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logGroupArn"
    )]
    #[builder(default, setter(strip_option))]
    pub log_group_arn: Option<String>,
    /// Set log format. Default format is json. Possible values are: json and text. The default is json.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logOutputFormat"
    )]
    #[builder(default, setter(strip_option))]
    pub log_output_format: Option<String>,
}

/// The preshared key of the second VPN tunnel. The preshared key must be between 8 and 64 characters in length and cannot start with zero(0). Allowed characters are alphanumeric characters, periods(.) and underscores(_).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderTunnel2PresharedKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a CustomerGateway in ec2 to populate type.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderTypeRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPNConnectionInitProviderTypeRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderTypeRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPNConnectionInitProviderTypeRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPNConnectionInitProviderTypeRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionInitProviderTypeRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionInitProviderTypeRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CustomerGateway in ec2 to populate type.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderTypeSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPNConnectionInitProviderTypeSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderTypeSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPNConnectionInitProviderTypeSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPNConnectionInitProviderTypeSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionInitProviderTypeSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionInitProviderTypeSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a VPNGateway in ec2 to populate vpnGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderVpnGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPNConnectionInitProviderVpnGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderVpnGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPNConnectionInitProviderVpnGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPNConnectionInitProviderVpnGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionInitProviderVpnGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionInitProviderVpnGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPNGateway in ec2 to populate vpnGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderVpnGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPNConnectionInitProviderVpnGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionInitProviderVpnGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPNConnectionInitProviderVpnGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPNConnectionInitProviderVpnGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionInitProviderVpnGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionInitProviderVpnGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPNConnectionProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPNConnectionProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPNConnectionProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<VPNConnectionPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<VPNConnectionPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPNConnectionPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPNConnectionPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPNConnectionPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNConnectionPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// VPNConnectionStatus defines the observed state of VPNConnection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<VPNConnectionStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionStatusAtProvider {
    /// Amazon Resource Name (ARN) of the VPN Connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// The ARN of the core network.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "coreNetworkArn"
    )]
    #[builder(default, setter(strip_option))]
    pub core_network_arn: Option<String>,
    /// The ARN of the core network attachment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "coreNetworkAttachmentArn"
    )]
    #[builder(default, setter(strip_option))]
    pub core_network_attachment_arn: Option<String>,
    /// The ID of the customer gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customerGatewayId"
    )]
    #[builder(default, setter(strip_option))]
    pub customer_gateway_id: Option<String>,
    /// Indicate whether to enable acceleration for the VPN connection. Supports only EC2 Transit Gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableAcceleration"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_acceleration: Option<bool>,
    /// The amazon-assigned ID of the VPN connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// The IPv4 CIDR on the customer gateway (on-premises) side of the VPN connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localIpv4NetworkCidr"
    )]
    #[builder(default, setter(strip_option))]
    pub local_ipv4_network_cidr: Option<String>,
    /// The IPv6 CIDR on the customer gateway (on-premises) side of the VPN connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "localIpv6NetworkCidr"
    )]
    #[builder(default, setter(strip_option))]
    pub local_ipv6_network_cidr: Option<String>,
    /// Indicates if a Public S2S VPN or Private S2S VPN over AWS Direct Connect. Valid values are PublicIpv4 | PrivateIpv4
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outsideIpAddressType"
    )]
    #[builder(default, setter(strip_option))]
    pub outside_ip_address_type: Option<String>,
    /// The IPv4 CIDR on the AWS side of the VPN connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "remoteIpv4NetworkCidr"
    )]
    #[builder(default, setter(strip_option))]
    pub remote_ipv4_network_cidr: Option<String>,
    /// The IPv6 CIDR on the AWS side of the VPN connection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "remoteIpv6NetworkCidr"
    )]
    #[builder(default, setter(strip_option))]
    pub remote_ipv6_network_cidr: Option<String>,
    /// The static routes associated with the VPN connection. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub routes: Option<Vec<VPNConnectionStatusAtProviderRoutes>>,
    /// Whether the VPN connection uses static routes exclusively. Static routes must be used for devices that don't support BGP.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "staticRoutesOnly"
    )]
    #[builder(default, setter(strip_option))]
    pub static_routes_only: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// When associated with an EC2 Transit Gateway (transit_gateway_id argument), the attachment ID. See also the aws_ec2_tag resource for tagging the EC2 Transit Gateway VPN Attachment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayAttachmentId"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_attachment_id: Option<String>,
    /// The ID of the EC2 Transit Gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transitGatewayId"
    )]
    #[builder(default, setter(strip_option))]
    pub transit_gateway_id: Option<String>,
    /// . The attachment ID of the Transit Gateway attachment to Direct Connect Gateway. The ID is obtained through a data source only.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transportTransitGatewayAttachmentId"
    )]
    #[builder(default, setter(strip_option))]
    pub transport_transit_gateway_attachment_id: Option<String>,
    /// The public IP address of the first VPN tunnel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Address"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_address: Option<String>,
    /// The bgp asn number of the first VPN tunnel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1BgpAsn"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_bgp_asn: Option<String>,
    /// The bgp holdtime of the first VPN tunnel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1BgpHoldtime"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_bgp_holdtime: Option<f64>,
    /// The RFC 6890 link-local address of the first VPN tunnel (Customer Gateway Side).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1CgwInsideAddress"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_cgw_inside_address: Option<String>,
    /// The action to take after DPD timeout occurs for the first VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are clear | none | restart.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1DpdTimeoutAction"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_dpd_timeout_action: Option<String>,
    /// The number of seconds after which a DPD timeout occurs for the first VPN tunnel. Valid value is equal or higher than 30.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1DpdTimeoutSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_dpd_timeout_seconds: Option<f64>,
    /// Turn on or off tunnel endpoint lifecycle control feature for the first VPN tunnel. Valid values are true | false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1EnableTunnelLifecycleControl"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_enable_tunnel_lifecycle_control: Option<bool>,
    /// The IKE versions that are permitted for the first VPN tunnel. Valid values are ikev1 | ikev2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1IkeVersions"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_ike_versions: Option<Vec<String>>,
    /// The CIDR block of the inside IP addresses for the first VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1InsideCidr"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_inside_cidr: Option<String>,
    /// The range of inside IPv6 addresses for the first VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1InsideIpv6Cidr"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_inside_ipv6_cidr: Option<String>,
    /// Options for logging VPN tunnel activity. See Log Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1LogOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_log_options: Option<VPNConnectionStatusAtProviderTunnel1LogOptions>,
    /// List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase1DhGroupNumbers"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase1_dh_group_numbers: Option<Vec<f64>>,
    /// List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase1EncryptionAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase1_encryption_algorithms: Option<Vec<String>>,
    /// One or more integrity algorithms that are permitted for the first VPN tunnel for phase 1 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase1IntegrityAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase1_integrity_algorithms: Option<Vec<String>>,
    /// The lifetime for phase 1 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between 900 and 28800.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase1LifetimeSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase1_lifetime_seconds: Option<f64>,
    /// List of one or more Diffie-Hellman group numbers that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase2DhGroupNumbers"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase2_dh_group_numbers: Option<Vec<f64>>,
    /// List of one or more encryption algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase2EncryptionAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase2_encryption_algorithms: Option<Vec<String>>,
    /// List of one or more integrity algorithms that are permitted for the first VPN tunnel for phase 2 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase2IntegrityAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase2_integrity_algorithms: Option<Vec<String>>,
    /// The lifetime for phase 2 of the IKE negotiation for the first VPN tunnel, in seconds. Valid value is between 900 and 3600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1Phase2LifetimeSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_phase2_lifetime_seconds: Option<f64>,
    /// The percentage of the rekey window for the first VPN tunnel (determined by tunnel1_rekey_margin_time_seconds) during which the rekey time is randomly selected. Valid value is between 0 and 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1RekeyFuzzPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_rekey_fuzz_percentage: Option<f64>,
    /// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the first VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for tunnel1_rekey_fuzz_percentage. Valid value is between 60 and half of tunnel1_phase2_lifetime_seconds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1RekeyMarginTimeSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_rekey_margin_time_seconds: Option<f64>,
    /// The number of packets in an IKE replay window for the first VPN tunnel. Valid value is between 64 and 2048.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1ReplayWindowSize"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_replay_window_size: Option<f64>,
    /// The action to take when the establishing the tunnel for the first VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are add | start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1StartupAction"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_startup_action: Option<String>,
    /// The RFC 6890 link-local address of the first VPN tunnel (VPN Gateway Side).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel1VgwInsideAddress"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel1_vgw_inside_address: Option<String>,
    /// The public IP address of the second VPN tunnel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Address"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_address: Option<String>,
    /// The bgp asn number of the second VPN tunnel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2BgpAsn"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_bgp_asn: Option<String>,
    /// The bgp holdtime of the second VPN tunnel.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2BgpHoldtime"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_bgp_holdtime: Option<f64>,
    /// The RFC 6890 link-local address of the second VPN tunnel (Customer Gateway Side).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2CgwInsideAddress"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_cgw_inside_address: Option<String>,
    /// The action to take after DPD timeout occurs for the second VPN tunnel. Specify restart to restart the IKE initiation. Specify clear to end the IKE session. Valid values are clear | none | restart.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2DpdTimeoutAction"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_dpd_timeout_action: Option<String>,
    /// The number of seconds after which a DPD timeout occurs for the second VPN tunnel. Valid value is equal or higher than 30.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2DpdTimeoutSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_dpd_timeout_seconds: Option<f64>,
    /// Turn on or off tunnel endpoint lifecycle control feature for the second VPN tunnel. Valid values are true | false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2EnableTunnelLifecycleControl"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_enable_tunnel_lifecycle_control: Option<bool>,
    /// The IKE versions that are permitted for the second VPN tunnel. Valid values are ikev1 | ikev2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2IkeVersions"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_ike_versions: Option<Vec<String>>,
    /// The CIDR block of the inside IP addresses for the second VPN tunnel. Valid value is a size /30 CIDR block from the 169.254.0.0/16 range.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2InsideCidr"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_inside_cidr: Option<String>,
    /// The range of inside IPv6 addresses for the second VPN tunnel. Supports only EC2 Transit Gateway. Valid value is a size /126 CIDR block from the local fd00::/8 range.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2InsideIpv6Cidr"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_inside_ipv6_cidr: Option<String>,
    /// Options for logging VPN tunnel activity. See Log Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2LogOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_log_options: Option<VPNConnectionStatusAtProviderTunnel2LogOptions>,
    /// List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are  2 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase1DhGroupNumbers"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase1_dh_group_numbers: Option<Vec<f64>>,
    /// List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase1EncryptionAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase1_encryption_algorithms: Option<Vec<String>>,
    /// One or more integrity algorithms that are permitted for the second VPN tunnel for phase 1 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase1IntegrityAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase1_integrity_algorithms: Option<Vec<String>>,
    /// The lifetime for phase 1 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between 900 and 28800.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase1LifetimeSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase1_lifetime_seconds: Option<f64>,
    /// List of one or more Diffie-Hellman group numbers that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are 2 | 5 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase2DhGroupNumbers"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase2_dh_group_numbers: Option<Vec<f64>>,
    /// List of one or more encryption algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are AES128 | AES256 | AES128-GCM-16 | AES256-GCM-16.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase2EncryptionAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase2_encryption_algorithms: Option<Vec<String>>,
    /// List of one or more integrity algorithms that are permitted for the second VPN tunnel for phase 2 IKE negotiations. Valid values are SHA1 | SHA2-256 | SHA2-384 | SHA2-512.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase2IntegrityAlgorithms"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase2_integrity_algorithms: Option<Vec<String>>,
    /// The lifetime for phase 2 of the IKE negotiation for the second VPN tunnel, in seconds. Valid value is between 900 and 3600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2Phase2LifetimeSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_phase2_lifetime_seconds: Option<f64>,
    /// The percentage of the rekey window for the second VPN tunnel (determined by tunnel2_rekey_margin_time_seconds) during which the rekey time is randomly selected. Valid value is between 0 and 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2RekeyFuzzPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_rekey_fuzz_percentage: Option<f64>,
    /// The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the second VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for tunnel2_rekey_fuzz_percentage. Valid value is between 60 and half of tunnel2_phase2_lifetime_seconds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2RekeyMarginTimeSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_rekey_margin_time_seconds: Option<f64>,
    /// The number of packets in an IKE replay window for the second VPN tunnel. Valid value is between 64 and 2048.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2ReplayWindowSize"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_replay_window_size: Option<f64>,
    /// The action to take when the establishing the tunnel for the second VPN connection. By default, your customer gateway device must initiate the IKE negotiation and bring up the tunnel. Specify start for AWS to initiate the IKE negotiation. Valid values are add | start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2StartupAction"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_startup_action: Option<String>,
    /// The RFC 6890 link-local address of the second VPN tunnel (VPN Gateway Side).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnel2VgwInsideAddress"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel2_vgw_inside_address: Option<String>,
    /// Indicate whether the VPN tunnels process IPv4 or IPv6 traffic. Valid values are ipv4 | ipv6. ipv6 Supports only EC2 Transit Gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "tunnelInsideIpVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub tunnel_inside_ip_version: Option<String>,
    /// The type of VPN connection. The only type AWS supports at this time is "ipsec.1".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// Telemetry for the VPN tunnels. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vgwTelemetry"
    )]
    #[builder(default, setter(strip_option))]
    pub vgw_telemetry: Option<Vec<VPNConnectionStatusAtProviderVgwTelemetry>>,
    /// The ID of the Virtual Private Gateway.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpnGatewayId"
    )]
    #[builder(default, setter(strip_option))]
    pub vpn_gateway_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionStatusAtProviderRoutes {
    /// The CIDR block associated with the local subnet of the customer data center.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationCidrBlock"
    )]
    #[builder(default, setter(strip_option))]
    pub destination_cidr_block: Option<String>,
    /// Indicates how the routes were provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub source: Option<String>,
    /// The current state of the static route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub state: Option<String>,
}

/// Options for logging VPN tunnel activity. See Log Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionStatusAtProviderTunnel1LogOptions {
    /// Options for sending VPN tunnel logs to CloudWatch. See CloudWatch Log Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_log_options:
        Option<VPNConnectionStatusAtProviderTunnel1LogOptionsCloudwatchLogOptions>,
}

/// Options for sending VPN tunnel logs to CloudWatch. See CloudWatch Log Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionStatusAtProviderTunnel1LogOptionsCloudwatchLogOptions {
    /// Enable or disable VPN tunnel logging feature. The default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub log_enabled: Option<bool>,
    /// The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logGroupArn"
    )]
    #[builder(default, setter(strip_option))]
    pub log_group_arn: Option<String>,
    /// Set log format. Default format is json. Possible values are: json and text. The default is json.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logOutputFormat"
    )]
    #[builder(default, setter(strip_option))]
    pub log_output_format: Option<String>,
}

/// Options for logging VPN tunnel activity. See Log Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionStatusAtProviderTunnel2LogOptions {
    /// Options for sending VPN tunnel logs to CloudWatch. See CloudWatch Log Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_log_options:
        Option<VPNConnectionStatusAtProviderTunnel2LogOptionsCloudwatchLogOptions>,
}

/// Options for sending VPN tunnel logs to CloudWatch. See CloudWatch Log Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionStatusAtProviderTunnel2LogOptionsCloudwatchLogOptions {
    /// Enable or disable VPN tunnel logging feature. The default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub log_enabled: Option<bool>,
    /// The Amazon Resource Name (ARN) of the CloudWatch log group to send logs to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logGroupArn"
    )]
    #[builder(default, setter(strip_option))]
    pub log_group_arn: Option<String>,
    /// Set log format. Default format is json. Possible values are: json and text. The default is json.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logOutputFormat"
    )]
    #[builder(default, setter(strip_option))]
    pub log_output_format: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPNConnectionStatusAtProviderVgwTelemetry {
    /// The number of accepted routes.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "acceptedRouteCount"
    )]
    #[builder(default, setter(strip_option))]
    pub accepted_route_count: Option<f64>,
    /// The Amazon Resource Name (ARN) of the VPN tunnel endpoint certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateArn"
    )]
    #[builder(default, setter(strip_option))]
    pub certificate_arn: Option<String>,
    /// The date and time of the last change in status.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastStatusChange"
    )]
    #[builder(default, setter(strip_option))]
    pub last_status_change: Option<String>,
    /// The Internet-routable IP address of the virtual private gateway's outside interface.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outsideIpAddress"
    )]
    #[builder(default, setter(strip_option))]
    pub outside_ip_address: Option<String>,
    /// The status of the VPN tunnel.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub status: Option<String>,
    /// If an error occurs, a description of the error.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusMessage"
    )]
    #[builder(default, setter(strip_option))]
    pub status_message: Option<String>,
}

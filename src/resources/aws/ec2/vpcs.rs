// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// VPCSpec defines the desired state of VPC
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "ec2.aws.upbound.io",
    version = "v1beta1",
    kind = "VPC",
    plural = "vpcs"
)]
#[kube(status = "VPCStatus")]
pub struct VPCSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<VPCDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: VPCForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<VPCInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<VPCProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<VPCPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<VPCWriteConnectionSecretToRef>,
}

/// VPCSpec defines the desired state of VPC
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPCDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCForProvider {
    /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is false. Conflicts with ipv6_ipam_pool_id
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "assignGeneratedIpv6CidrBlock"
    )]
    #[builder(default, setter(strip_option))]
    pub assign_generated_ipv6_cidr_block: Option<bool>,
    /// The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using ipv4_netmask_length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlock")]
    #[builder(default, setter(strip_option))]
    pub cidr_block: Option<String>,
    /// A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableDnsHostnames"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_dns_hostnames: Option<bool>,
    /// A boolean flag to enable/disable DNS support in the VPC. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableDnsSupport"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_dns_support: Option<bool>,
    /// Indicates whether Network Address Usage metrics are enabled for your VPC. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableNetworkAddressUsageMetrics"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_network_address_usage_metrics: Option<bool>,
    /// A tenancy option for instances launched into the VPC. Default is default, which ensures that EC2 instances launched in this VPC use the EC2 instance tenancy attribute specified when the EC2 instance is launched. The only other option is dedicated, which ensures that EC2 instances launched in this VPC are run on dedicated tenancy instances regardless of the tenancy attribute specified at launch. This has a dedicated per region fee of $2 per hour, plus an hourly per instance usage fee.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceTenancy"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_tenancy: Option<String>,
    /// The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv4IpamPoolId"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv4_ipam_pool_id: Option<String>,
    /// Reference to a VPCIpamPool in ec2 to populate ipv4IpamPoolId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv4IpamPoolIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv4_ipam_pool_id_ref: Option<VPCForProviderIpv4IpamPoolIdRef>,
    /// Selector for a VPCIpamPool in ec2 to populate ipv4IpamPoolId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv4IpamPoolIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv4_ipam_pool_id_selector: Option<VPCForProviderIpv4IpamPoolIdSelector>,
    /// The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a ipv4_ipam_pool_id.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv4NetmaskLength"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv4_netmask_length: Option<f64>,
    /// IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using ipv6_netmask_length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6CidrBlock"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_cidr_block: Option<String>,
    /// By default when an IPv6 CIDR is assigned to a VPC a default ipv6_cidr_block_network_border_group will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6CidrBlockNetworkBorderGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_cidr_block_network_border_group: Option<String>,
    /// IPAM Pool ID for a IPv6 pool. Conflicts with assign_generated_ipv6_cidr_block.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6IpamPoolId"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_ipam_pool_id: Option<String>,
    /// Netmask length to request from IPAM Pool. Conflicts with ipv6_cidr_block. This can be omitted if IPAM pool as a allocation_default_netmask_length set. Valid values are from 44 to 60 in increments of 4.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6NetmaskLength"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_netmask_length: Option<f64>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

/// Reference to a VPCIpamPool in ec2 to populate ipv4IpamPoolId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCForProviderIpv4IpamPoolIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPCForProviderIpv4IpamPoolIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCForProviderIpv4IpamPoolIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPCForProviderIpv4IpamPoolIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPCForProviderIpv4IpamPoolIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPCForProviderIpv4IpamPoolIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPCForProviderIpv4IpamPoolIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPCIpamPool in ec2 to populate ipv4IpamPoolId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCForProviderIpv4IpamPoolIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPCForProviderIpv4IpamPoolIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCForProviderIpv4IpamPoolIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPCForProviderIpv4IpamPoolIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPCForProviderIpv4IpamPoolIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPCForProviderIpv4IpamPoolIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPCForProviderIpv4IpamPoolIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCInitProvider {
    /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is false. Conflicts with ipv6_ipam_pool_id
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "assignGeneratedIpv6CidrBlock"
    )]
    #[builder(default, setter(strip_option))]
    pub assign_generated_ipv6_cidr_block: Option<bool>,
    /// The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using ipv4_netmask_length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlock")]
    #[builder(default, setter(strip_option))]
    pub cidr_block: Option<String>,
    /// A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableDnsHostnames"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_dns_hostnames: Option<bool>,
    /// A boolean flag to enable/disable DNS support in the VPC. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableDnsSupport"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_dns_support: Option<bool>,
    /// Indicates whether Network Address Usage metrics are enabled for your VPC. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableNetworkAddressUsageMetrics"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_network_address_usage_metrics: Option<bool>,
    /// A tenancy option for instances launched into the VPC. Default is default, which ensures that EC2 instances launched in this VPC use the EC2 instance tenancy attribute specified when the EC2 instance is launched. The only other option is dedicated, which ensures that EC2 instances launched in this VPC are run on dedicated tenancy instances regardless of the tenancy attribute specified at launch. This has a dedicated per region fee of $2 per hour, plus an hourly per instance usage fee.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceTenancy"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_tenancy: Option<String>,
    /// The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv4IpamPoolId"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv4_ipam_pool_id: Option<String>,
    /// Reference to a VPCIpamPool in ec2 to populate ipv4IpamPoolId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv4IpamPoolIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv4_ipam_pool_id_ref: Option<VPCInitProviderIpv4IpamPoolIdRef>,
    /// Selector for a VPCIpamPool in ec2 to populate ipv4IpamPoolId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv4IpamPoolIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv4_ipam_pool_id_selector: Option<VPCInitProviderIpv4IpamPoolIdSelector>,
    /// The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a ipv4_ipam_pool_id.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv4NetmaskLength"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv4_netmask_length: Option<f64>,
    /// IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using ipv6_netmask_length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6CidrBlock"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_cidr_block: Option<String>,
    /// By default when an IPv6 CIDR is assigned to a VPC a default ipv6_cidr_block_network_border_group will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6CidrBlockNetworkBorderGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_cidr_block_network_border_group: Option<String>,
    /// IPAM Pool ID for a IPv6 pool. Conflicts with assign_generated_ipv6_cidr_block.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6IpamPoolId"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_ipam_pool_id: Option<String>,
    /// Netmask length to request from IPAM Pool. Conflicts with ipv6_cidr_block. This can be omitted if IPAM pool as a allocation_default_netmask_length set. Valid values are from 44 to 60 in increments of 4.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6NetmaskLength"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_netmask_length: Option<f64>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

/// Reference to a VPCIpamPool in ec2 to populate ipv4IpamPoolId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCInitProviderIpv4IpamPoolIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPCInitProviderIpv4IpamPoolIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCInitProviderIpv4IpamPoolIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPCInitProviderIpv4IpamPoolIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPCInitProviderIpv4IpamPoolIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPCInitProviderIpv4IpamPoolIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPCInitProviderIpv4IpamPoolIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPCIpamPool in ec2 to populate ipv4IpamPoolId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCInitProviderIpv4IpamPoolIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPCInitProviderIpv4IpamPoolIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCInitProviderIpv4IpamPoolIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPCInitProviderIpv4IpamPoolIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPCInitProviderIpv4IpamPoolIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPCInitProviderIpv4IpamPoolIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPCInitProviderIpv4IpamPoolIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPCProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPCProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPCProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPCProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPCProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<VPCPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<VPCPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VPCPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VPCPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VPCPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPCPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPCPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// VPCStatus defines the observed state of VPC.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<VPCStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VPCStatusAtProvider {
    /// Amazon Resource Name (ARN) of VPC
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block. Default is false. Conflicts with ipv6_ipam_pool_id
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "assignGeneratedIpv6CidrBlock"
    )]
    #[builder(default, setter(strip_option))]
    pub assign_generated_ipv6_cidr_block: Option<bool>,
    /// The IPv4 CIDR block for the VPC. CIDR can be explicitly set or it can be derived from IPAM using ipv4_netmask_length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlock")]
    #[builder(default, setter(strip_option))]
    pub cidr_block: Option<String>,
    /// The ID of the network ACL created by default on VPC creation
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultNetworkAclId"
    )]
    #[builder(default, setter(strip_option))]
    pub default_network_acl_id: Option<String>,
    /// The ID of the route table created by default on VPC creation
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultRouteTableId"
    )]
    #[builder(default, setter(strip_option))]
    pub default_route_table_id: Option<String>,
    /// The ID of the security group created by default on VPC creation
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultSecurityGroupId"
    )]
    #[builder(default, setter(strip_option))]
    pub default_security_group_id: Option<String>,
    /// DHCP options id of the desired VPC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dhcpOptionsId"
    )]
    #[builder(default, setter(strip_option))]
    pub dhcp_options_id: Option<String>,
    /// A boolean flag to enable/disable DNS hostnames in the VPC. Defaults false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableDnsHostnames"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_dns_hostnames: Option<bool>,
    /// A boolean flag to enable/disable DNS support in the VPC. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableDnsSupport"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_dns_support: Option<bool>,
    /// Indicates whether Network Address Usage metrics are enabled for your VPC. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableNetworkAddressUsageMetrics"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_network_address_usage_metrics: Option<bool>,
    /// The ID of the VPC
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// A tenancy option for instances launched into the VPC. Default is default, which ensures that EC2 instances launched in this VPC use the EC2 instance tenancy attribute specified when the EC2 instance is launched. The only other option is dedicated, which ensures that EC2 instances launched in this VPC are run on dedicated tenancy instances regardless of the tenancy attribute specified at launch. This has a dedicated per region fee of $2 per hour, plus an hourly per instance usage fee.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceTenancy"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_tenancy: Option<String>,
    /// The ID of an IPv4 IPAM pool you want to use for allocating this VPC's CIDR. IPAM is a VPC feature that you can use to automate your IP address management workflows including assigning, tracking, troubleshooting, and auditing IP addresses across AWS Regions and accounts. Using IPAM you can monitor IP address usage throughout your AWS Organization.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv4IpamPoolId"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv4_ipam_pool_id: Option<String>,
    /// The netmask length of the IPv4 CIDR you want to allocate to this VPC. Requires specifying a ipv4_ipam_pool_id.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv4NetmaskLength"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv4_netmask_length: Option<f64>,
    /// The association ID for the IPv6 CIDR block.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6AssociationId"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_association_id: Option<String>,
    /// IPv6 CIDR block to request from an IPAM Pool. Can be set explicitly or derived from IPAM using ipv6_netmask_length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6CidrBlock"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_cidr_block: Option<String>,
    /// By default when an IPv6 CIDR is assigned to a VPC a default ipv6_cidr_block_network_border_group will be set to the region of the VPC. This can be changed to restrict advertisement of public addresses to specific Network Border Groups such as LocalZones.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6CidrBlockNetworkBorderGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_cidr_block_network_border_group: Option<String>,
    /// IPAM Pool ID for a IPv6 pool. Conflicts with assign_generated_ipv6_cidr_block.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6IpamPoolId"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_ipam_pool_id: Option<String>,
    /// Netmask length to request from IPAM Pool. Conflicts with ipv6_cidr_block. This can be omitted if IPAM pool as a allocation_default_netmask_length set. Valid values are from 44 to 60 in increments of 4.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6NetmaskLength"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_netmask_length: Option<f64>,
    /// The ID of the main route table associated with
    /// this VPC. Note that you can change a VPC's main route table by using an
    /// aws_main_route_table_association.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mainRouteTableId"
    )]
    #[builder(default, setter(strip_option))]
    pub main_route_table_id: Option<String>,
    /// The ID of the AWS account that owns the VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerId")]
    #[builder(default, setter(strip_option))]
    pub owner_id: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
}

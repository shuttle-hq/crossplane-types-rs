// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// InstanceSpec defines the desired state of Instance
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "ec2.aws.upbound.io",
    version = "v1beta2",
    kind = "Instance",
    plural = "instances"
)]
#[kube(status = "InstanceStatus")]
pub struct InstanceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<InstanceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: InstanceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<InstanceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<InstanceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<InstancePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<InstanceWriteConnectionSecretToRef>,
}

/// InstanceSpec defines the desired state of Instance
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProvider {
    /// AMI to use for the instance. Required unless launch_template is specified and the Launch Template specifes an AMI. If an AMI is specified in the Launch Template, setting ami will override the AMI specified in the Launch Template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub ami: Option<String>,
    /// Whether to associate a public IP address with an instance in a VPC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "associatePublicIpAddress"
    )]
    #[builder(default, setter(strip_option))]
    pub associate_public_ip_address: Option<bool>,
    /// AZ to start the instance in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZone"
    )]
    #[builder(default, setter(strip_option))]
    pub availability_zone: Option<String>,
    /// Describes an instance's Capacity Reservation targeting option. See Capacity Reservation Specification below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityReservationSpecification"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_reservation_specification:
        Option<InstanceForProviderCapacityReservationSpecification>,
    /// Sets the number of CPU cores for an instance. This option is only supported on creation of instance type that support CPU Options CPU Cores and Threads Per CPU Core Per Instance Type - specifying this option for unsupported instance types will return an error from the EC2 API.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cpuCoreCount"
    )]
    #[builder(default, setter(strip_option))]
    pub cpu_core_count: Option<f64>,
    /// The CPU options for the instance. See CPU Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cpuOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub cpu_options: Option<InstanceForProviderCpuOptions>,
    /// If set to 1, hyperthreading is disabled on the launched instance. Defaults to 2 if not set. See Optimizing CPU Options for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cpuThreadsPerCore"
    )]
    #[builder(default, setter(strip_option))]
    pub cpu_threads_per_core: Option<f64>,
    /// Configuration block for customizing the credit specification of the instance. See Credit Specification below for more details. Removing this configuration on existing instances will only stop managing it. It will not change the configuration back to the default for the instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "creditSpecification"
    )]
    #[builder(default, setter(strip_option))]
    pub credit_specification: Option<InstanceForProviderCreditSpecification>,
    /// If true, enables EC2 Instance Stop Protection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableApiStop"
    )]
    #[builder(default, setter(strip_option))]
    pub disable_api_stop: Option<bool>,
    /// If true, enables EC2 Instance Termination Protection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableApiTermination"
    )]
    #[builder(default, setter(strip_option))]
    pub disable_api_termination: Option<bool>,
    /// One or more configuration blocks with additional EBS block devices to attach to the instance. Block device configurations only apply on resource creation. See Block Devices below for details on attributes and drift detection. When accessing this as an attribute reference, it is a set of objects.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsBlockDevice"
    )]
    #[builder(default, setter(strip_option))]
    pub ebs_block_device: Option<Vec<InstanceForProviderEbsBlockDevice>>,
    /// If true, the launched EC2 instance will be EBS-optimized. Note that if this is not set on an instance type that is optimized by default then this will show as disabled but if the instance type is optimized by default then there is no need to set this and there is no effect to disabling it. See the EBS Optimized section of the AWS User Guide for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsOptimized"
    )]
    #[builder(default, setter(strip_option))]
    pub ebs_optimized: Option<bool>,
    /// Whether to assign a primary IPv6 Global Unicast Address (GUA) to the instance when launched in a dual-stack or IPv6-only subnet. A primary IPv6 address ensures a consistent IPv6 address for the instance and is automatically assigned by AWS to the ENI. Once enabled, the first IPv6 GUA becomes the primary IPv6 address and cannot be disabled. The primary IPv6 address remains until the instance is terminated or the ENI is detached. Disabling enable_primary_ipv6 after it has been enabled forces recreation of the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enablePrimaryIpv6"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_primary_ipv6: Option<bool>,
    /// Enable Nitro Enclaves on launched instances. See Enclave Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enclaveOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub enclave_options: Option<InstanceForProviderEnclaveOptions>,
    /// One or more configuration blocks to customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a set of objects.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ephemeralBlockDevice"
    )]
    #[builder(default, setter(strip_option))]
    pub ephemeral_block_device: Option<Vec<InstanceForProviderEphemeralBlockDevice>>,
    /// If true, wait for password data to become available and retrieve it. Useful for getting the administrator password for instances running Microsoft Windows. The password data is exported to the password_data attribute. See GetPasswordData for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "getPasswordData"
    )]
    #[builder(default, setter(strip_option))]
    pub get_password_data: Option<bool>,
    /// If true, the launched EC2 instance will support hibernation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub hibernation: Option<bool>,
    /// ID of a dedicated host that the instance will be assigned to. Use when an instance is to be launched on a specific dedicated host.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostId")]
    #[builder(default, setter(strip_option))]
    pub host_id: Option<String>,
    /// ARN of the host resource group in which to launch the instances. If you specify an ARN, omit the tenancy parameter or set it to host.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hostResourceGroupArn"
    )]
    #[builder(default, setter(strip_option))]
    pub host_resource_group_arn: Option<String>,
    /// IAM Instance Profile to launch the instance with. Specified as the name of the Instance Profile. Ensure your credentials have the correct permission to assign the instance profile according to the EC2 documentation, notably iam:PassRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "iamInstanceProfile"
    )]
    #[builder(default, setter(strip_option))]
    pub iam_instance_profile: Option<String>,
    /// Shutdown behavior for the instance. Amazon defaults this to stop for EBS-backed instances and terminate for instance-store instances. Cannot be set on instance-store instances. See Shutdown Behavior for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceInitiatedShutdownBehavior"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_initiated_shutdown_behavior: Option<String>,
    /// Describes the market (purchasing) option for the instances. See Market Options below for details on attributes.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceMarketOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_market_options: Option<InstanceForProviderInstanceMarketOptions>,
    /// Instance type to use for the instance. Required unless launch_template is specified and the Launch Template specifies an instance type. If an instance type is specified in the Launch Template, setting instance_type will override the instance type specified in the Launch Template. Updates to this field will trigger a stop/start of the EC2 instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<String>,
    /// Number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6AddressCount"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_address_count: Option<f64>,
    /// Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6Addresses"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_addresses: Option<Vec<String>>,
    /// Key name of the Key Pair to use for the instance; which can be managed using the .
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyName")]
    #[builder(default, setter(strip_option))]
    pub key_name: Option<String>,
    /// Specifies a Launch Template to configure the instance. Parameters configured on this resource will override the corresponding parameters in the Launch Template. See Launch Template Specification below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template: Option<InstanceForProviderLaunchTemplate>,
    /// Maintenance and recovery options for the instance. See Maintenance Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maintenanceOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub maintenance_options: Option<InstanceForProviderMaintenanceOptions>,
    /// Customize the metadata options of the instance. See Metadata Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metadataOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub metadata_options: Option<InstanceForProviderMetadataOptions>,
    /// If true, the launched EC2 instance will have detailed monitoring enabled. (Available since v0.6.0)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub monitoring: Option<bool>,
    /// Customize network interfaces to be attached at instance boot time. See Network Interfaces below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkInterface"
    )]
    #[builder(default, setter(strip_option))]
    pub network_interface: Option<Vec<InstanceForProviderNetworkInterface>>,
    /// Placement Group to start the instance in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_group: Option<String>,
    /// Number of the partition the instance is in. Valid only if the  strategy argument is set to "partition".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementPartitionNumber"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_partition_number: Option<f64>,
    /// Options for the instance hostname. The default values are inherited from the subnet. See Private DNS Name Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateDnsNameOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub private_dns_name_options: Option<InstanceForProviderPrivateDnsNameOptions>,
    /// Private IP address to associate with the instance in a VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIp")]
    #[builder(default, setter(strip_option))]
    pub private_ip: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Configuration block to customize details about the root block device of the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a list containing one object.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rootBlockDevice"
    )]
    #[builder(default, setter(strip_option))]
    pub root_block_device: Option<InstanceForProviderRootBlockDevice>,
    /// List of secondary private IPv4 addresses to assign to the instance's primary network interface (eth0) in a VPC. Can only be assigned to the primary network interface (eth0) attached at instance creation, not a pre-existing network interface i.e., referenced in a network_interface block. Refer to the Elastic network interfaces documentation to see the maximum number of private IP addresses allowed per instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secondaryPrivateIps"
    )]
    #[builder(default, setter(strip_option))]
    pub secondary_private_ips: Option<Vec<String>>,
    /// Controls if traffic is routed to the instance when the destination address does not match the instance. Used for NAT or VPNs. Defaults true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceDestCheck"
    )]
    #[builder(default, setter(strip_option))]
    pub source_dest_check: Option<bool>,
    /// VPC Subnet ID to launch in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    #[builder(default, setter(strip_option))]
    pub subnet_id: Option<String>,
    /// Reference to a Subnet in ec2 to populate subnetId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub subnet_id_ref: Option<InstanceForProviderSubnetIdRef>,
    /// Selector for a Subnet in ec2 to populate subnetId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub subnet_id_selector: Option<InstanceForProviderSubnetIdSelector>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for the import-instance command. Valid values are default, dedicated, and host.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tenancy: Option<String>,
    /// User data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see user_data_base64 instead. Updates to this field will trigger a stop/start of the EC2 instance by default. If the user_data_replace_on_change is set then updates to this field will trigger a destroy and recreate of the EC2 instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userData")]
    #[builder(default, setter(strip_option))]
    pub user_data: Option<String>,
    /// Can be used instead of user_data to pass base64-encoded binary data directly. Use this instead of user_data whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption. Updates to this field will trigger a stop/start of the EC2 instance by default. If the user_data_replace_on_change is set then updates to this field will trigger a destroy and recreate of the EC2 instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userDataBase64"
    )]
    #[builder(default, setter(strip_option))]
    pub user_data_base64: Option<String>,
    /// When used in combination with user_data or user_data_base64 will trigger a destroy and recreate of the EC2 instance when set to true. Defaults to false if not set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userDataReplaceOnChange"
    )]
    #[builder(default, setter(strip_option))]
    pub user_data_replace_on_change: Option<bool>,
    /// Map of tags to assign, at instance-creation time, to root and EBS volumes.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeTags"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_tags: Option<BTreeMap<String, String>>,
    /// References to SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcSecurityGroupIdRefs"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_security_group_id_refs: Option<Vec<InstanceForProviderVpcSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcSecurityGroupIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_security_group_id_selector: Option<InstanceForProviderVpcSecurityGroupIdSelector>,
    /// List of security group IDs to associate with.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcSecurityGroupIds"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Describes an instance's Capacity Reservation targeting option. See Capacity Reservation Specification below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderCapacityReservationSpecification {
    /// Indicates the instance's Capacity Reservation preferences. Can be "open" or "none". (Default: "open").
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityReservationPreference"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_reservation_preference: Option<String>,
    /// Information about the target Capacity Reservation. See Capacity Reservation Target below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityReservationTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_reservation_target:
        Option<InstanceForProviderCapacityReservationSpecificationCapacityReservationTarget>,
}

/// Information about the target Capacity Reservation. See Capacity Reservation Target below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderCapacityReservationSpecificationCapacityReservationTarget {
    /// ID of the Capacity Reservation in which to run the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityReservationId"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_reservation_id: Option<String>,
    /// ARN of the Capacity Reservation resource group in which to run the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityReservationResourceGroupArn"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_reservation_resource_group_arn: Option<String>,
}

/// The CPU options for the instance. See CPU Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderCpuOptions {
    /// Indicates whether to enable the instance for AMD SEV-SNP. AMD SEV-SNP is supported with M6a, R6a, and C6a instance types only. Valid values are enabled and disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amdSevSnp")]
    #[builder(default, setter(strip_option))]
    pub amd_sev_snp: Option<String>,
    /// Sets the number of CPU cores for an instance. This option is only supported on creation of instance type that support CPU Options CPU Cores and Threads Per CPU Core Per Instance Type - specifying this option for unsupported instance types will return an error from the EC2 API.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreCount")]
    #[builder(default, setter(strip_option))]
    pub core_count: Option<f64>,
    /// If set to 1, hyperthreading is disabled on the launched instance. Defaults to 2 if not set. See Optimizing CPU Options for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "threadsPerCore"
    )]
    #[builder(default, setter(strip_option))]
    pub threads_per_core: Option<f64>,
}

/// Configuration block for customizing the credit specification of the instance. See Credit Specification below for more details. Removing this configuration on existing instances will only stop managing it. It will not change the configuration back to the default for the instance type.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderCreditSpecification {
    /// Credit option for CPU usage. Valid values include standard or unlimited. T3 instances are launched as unlimited by default. T2 instances are launched as standard by default.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cpuCredits"
    )]
    #[builder(default, setter(strip_option))]
    pub cpu_credits: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderEbsBlockDevice {
    /// Whether the volume should be destroyed on instance termination. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteOnTermination"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_on_termination: Option<bool>,
    /// Name of the device to mount.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub device_name: Option<String>,
    /// Enables EBS encryption on the volume. Defaults to false. Cannot be used with snapshot_id. Must be configured to perform drift detection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub encrypted: Option<bool>,
    /// Amount of provisioned IOPS. Only valid for volume_type of io1, io2 or gp3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub iops: Option<f64>,
    /// Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_id_ref: Option<InstanceForProviderEbsBlockDeviceKmsKeyIdRef>,
    /// Selector for a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_id_selector: Option<InstanceForProviderEbsBlockDeviceKmsKeyIdSelector>,
    /// Snapshot ID to mount.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotId"
    )]
    #[builder(default, setter(strip_option))]
    pub snapshot_id: Option<String>,
    /// Map of tags to assign to the device.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// Throughput to provision for a volume in mebibytes per second (MiB/s). This is only valid for volume_type of gp3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub throughput: Option<f64>,
    /// Size of the volume in gibibytes (GiB).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_size: Option<f64>,
    /// Type of volume. Valid values include standard, gp2, gp3, io1, io2, sc1, or st1. Defaults to gp2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_type: Option<String>,
}

/// Reference to a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderEbsBlockDeviceKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceForProviderEbsBlockDeviceKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderEbsBlockDeviceKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceForProviderEbsBlockDeviceKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceForProviderEbsBlockDeviceKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderEbsBlockDeviceKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderEbsBlockDeviceKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderEbsBlockDeviceKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceForProviderEbsBlockDeviceKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderEbsBlockDeviceKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceForProviderEbsBlockDeviceKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceForProviderEbsBlockDeviceKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderEbsBlockDeviceKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderEbsBlockDeviceKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Enable Nitro Enclaves on launched instances. See Enclave Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderEnclaveOptions {
    /// Whether Nitro Enclaves will be enabled on the instance. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderEphemeralBlockDevice {
    /// Name of the block device to mount on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub device_name: Option<String>,
    /// Suppresses the specified device included in the AMI's block device mapping.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    #[builder(default, setter(strip_option))]
    pub no_device: Option<bool>,
    /// Instance Store Device Name (e.g., ephemeral0).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualName"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_name: Option<String>,
}

/// Describes the market (purchasing) option for the instances. See Market Options below for details on attributes.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderInstanceMarketOptions {
    /// Type of market for the instance. Valid values are spot and capacity-block. Defaults to spot. Required if spot_options is specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "marketType"
    )]
    #[builder(default, setter(strip_option))]
    pub market_type: Option<String>,
    /// Block to configure the options for Spot Instances. See Spot Options below for details on attributes.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_options: Option<InstanceForProviderInstanceMarketOptionsSpotOptions>,
}

/// Block to configure the options for Spot Instances. See Spot Options below for details on attributes.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderInstanceMarketOptionsSpotOptions {
    /// The behavior when a Spot Instance is interrupted. Valid values include hibernate, stop, terminate . The default is terminate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceInterruptionBehavior"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_interruption_behavior: Option<String>,
    /// The maximum hourly price that you're willing to pay for a Spot Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPrice")]
    #[builder(default, setter(strip_option))]
    pub max_price: Option<String>,
    /// The Spot Instance request type. Valid values include one-time, persistent. Persistent Spot Instance requests are only supported when the instance interruption behavior is either hibernate or stop. The default is one-time.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotInstanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_instance_type: Option<String>,
    /// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). Supported only for persistent requests.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validUntil"
    )]
    #[builder(default, setter(strip_option))]
    pub valid_until: Option<String>,
}

/// Specifies a Launch Template to configure the instance. Parameters configured on this resource will override the corresponding parameters in the Launch Template. See Launch Template Specification below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderLaunchTemplate {
    /// ID of the launch template. Conflicts with name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Name of the launch template. Conflicts with id.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Template version. Can be a specific version number, $Latest or $Default. The default value is $Default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

/// Maintenance and recovery options for the instance. See Maintenance Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderMaintenanceOptions {
    /// Automatic recovery behavior of the Instance. Can be "default" or "disabled". See Recover your instance for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoRecovery"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_recovery: Option<String>,
}

/// Customize the metadata options of the instance. See Metadata Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderMetadataOptions {
    /// Whether the metadata service is available. Valid values include enabled or disabled. Defaults to enabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpEndpoint"
    )]
    #[builder(default, setter(strip_option))]
    pub http_endpoint: Option<String>,
    /// Whether the IPv6 endpoint for the instance metadata service is enabled. Defaults to disabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpProtocolIpv6"
    )]
    #[builder(default, setter(strip_option))]
    pub http_protocol_ipv6: Option<String>,
    /// Desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Valid values are integer from 1 to 64. Defaults to 1.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpPutResponseHopLimit"
    )]
    #[builder(default, setter(strip_option))]
    pub http_put_response_hop_limit: Option<f64>,
    /// Whether or not the metadata service requires session tokens, also referred to as Instance Metadata Service Version 2 (IMDSv2). Valid values include optional or required.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpTokens"
    )]
    #[builder(default, setter(strip_option))]
    pub http_tokens: Option<String>,
    /// Enables or disables access to instance tags from the instance metadata service. Valid values include enabled or disabled. Defaults to disabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceMetadataTags"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_metadata_tags: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderNetworkInterface {
    /// Whether or not to delete the network interface on instance termination. Defaults to false. Currently, the only valid value is false, as this is only supported when creating new network interfaces when launching an instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteOnTermination"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_on_termination: Option<bool>,
    /// Integer index of the network interface attachment. Limited by instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceIndex"
    )]
    #[builder(default, setter(strip_option))]
    pub device_index: Option<f64>,
    /// Integer index of the network card. Limited by instance type. The default index is 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkCardIndex"
    )]
    #[builder(default, setter(strip_option))]
    pub network_card_index: Option<f64>,
    /// ID of the network interface to attach.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkInterfaceId"
    )]
    #[builder(default, setter(strip_option))]
    pub network_interface_id: Option<String>,
    /// Reference to a NetworkInterface in ec2 to populate networkInterfaceId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkInterfaceIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub network_interface_id_ref: Option<InstanceForProviderNetworkInterfaceNetworkInterfaceIdRef>,
    /// Selector for a NetworkInterface in ec2 to populate networkInterfaceId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkInterfaceIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub network_interface_id_selector:
        Option<InstanceForProviderNetworkInterfaceNetworkInterfaceIdSelector>,
}

/// Reference to a NetworkInterface in ec2 to populate networkInterfaceId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderNetworkInterfaceNetworkInterfaceIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceForProviderNetworkInterfaceNetworkInterfaceIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderNetworkInterfaceNetworkInterfaceIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<InstanceForProviderNetworkInterfaceNetworkInterfaceIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceForProviderNetworkInterfaceNetworkInterfaceIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderNetworkInterfaceNetworkInterfaceIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderNetworkInterfaceNetworkInterfaceIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a NetworkInterface in ec2 to populate networkInterfaceId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderNetworkInterfaceNetworkInterfaceIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceForProviderNetworkInterfaceNetworkInterfaceIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderNetworkInterfaceNetworkInterfaceIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<InstanceForProviderNetworkInterfaceNetworkInterfaceIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceForProviderNetworkInterfaceNetworkInterfaceIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderNetworkInterfaceNetworkInterfaceIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderNetworkInterfaceNetworkInterfaceIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Options for the instance hostname. The default values are inherited from the subnet. See Private DNS Name Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderPrivateDnsNameOptions {
    /// Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableResourceNameDnsARecord"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_resource_name_dns_a_record: Option<bool>,
    /// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableResourceNameDnsAaaaRecord"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_resource_name_dns_aaaa_record: Option<bool>,
    /// Type of hostname for Amazon EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 native subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: ip-name and resource-name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hostnameType"
    )]
    #[builder(default, setter(strip_option))]
    pub hostname_type: Option<String>,
}

/// Configuration block to customize details about the root block device of the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a list containing one object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderRootBlockDevice {
    /// Whether the volume should be destroyed on instance termination. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteOnTermination"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_on_termination: Option<bool>,
    /// Whether to enable volume encryption. Defaults to false. Must be configured to perform drift detection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub encrypted: Option<bool>,
    /// Amount of provisioned IOPS. Only valid for volume_type of io1, io2 or gp3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub iops: Option<f64>,
    /// Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_id_ref: Option<InstanceForProviderRootBlockDeviceKmsKeyIdRef>,
    /// Selector for a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_id_selector: Option<InstanceForProviderRootBlockDeviceKmsKeyIdSelector>,
    /// Map of tags to assign to the device.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// Throughput to provision for a volume in mebibytes per second (MiB/s). This is only valid for volume_type of gp3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub throughput: Option<f64>,
    /// Size of the volume in gibibytes (GiB).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_size: Option<f64>,
    /// Type of volume. Valid values include standard, gp2, gp3, io1, io2, sc1, or st1. Defaults to the volume type that the AMI uses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_type: Option<String>,
}

/// Reference to a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderRootBlockDeviceKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceForProviderRootBlockDeviceKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderRootBlockDeviceKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceForProviderRootBlockDeviceKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceForProviderRootBlockDeviceKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderRootBlockDeviceKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderRootBlockDeviceKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderRootBlockDeviceKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceForProviderRootBlockDeviceKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderRootBlockDeviceKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceForProviderRootBlockDeviceKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceForProviderRootBlockDeviceKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderRootBlockDeviceKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderRootBlockDeviceKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Subnet in ec2 to populate subnetId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderSubnetIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceForProviderSubnetIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderSubnetIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceForProviderSubnetIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceForProviderSubnetIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderSubnetIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderSubnetIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Subnet in ec2 to populate subnetId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceForProviderSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceForProviderSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceForProviderSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderVpcSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceForProviderVpcSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderVpcSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceForProviderVpcSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceForProviderVpcSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderVpcSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderVpcSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderVpcSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceForProviderVpcSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceForProviderVpcSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceForProviderVpcSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceForProviderVpcSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderVpcSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderVpcSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProvider {
    /// AMI to use for the instance. Required unless launch_template is specified and the Launch Template specifes an AMI. If an AMI is specified in the Launch Template, setting ami will override the AMI specified in the Launch Template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub ami: Option<String>,
    /// Whether to associate a public IP address with an instance in a VPC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "associatePublicIpAddress"
    )]
    #[builder(default, setter(strip_option))]
    pub associate_public_ip_address: Option<bool>,
    /// AZ to start the instance in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZone"
    )]
    #[builder(default, setter(strip_option))]
    pub availability_zone: Option<String>,
    /// Describes an instance's Capacity Reservation targeting option. See Capacity Reservation Specification below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityReservationSpecification"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_reservation_specification:
        Option<InstanceInitProviderCapacityReservationSpecification>,
    /// Sets the number of CPU cores for an instance. This option is only supported on creation of instance type that support CPU Options CPU Cores and Threads Per CPU Core Per Instance Type - specifying this option for unsupported instance types will return an error from the EC2 API.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cpuCoreCount"
    )]
    #[builder(default, setter(strip_option))]
    pub cpu_core_count: Option<f64>,
    /// The CPU options for the instance. See CPU Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cpuOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub cpu_options: Option<InstanceInitProviderCpuOptions>,
    /// If set to 1, hyperthreading is disabled on the launched instance. Defaults to 2 if not set. See Optimizing CPU Options for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cpuThreadsPerCore"
    )]
    #[builder(default, setter(strip_option))]
    pub cpu_threads_per_core: Option<f64>,
    /// Configuration block for customizing the credit specification of the instance. See Credit Specification below for more details. Removing this configuration on existing instances will only stop managing it. It will not change the configuration back to the default for the instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "creditSpecification"
    )]
    #[builder(default, setter(strip_option))]
    pub credit_specification: Option<InstanceInitProviderCreditSpecification>,
    /// If true, enables EC2 Instance Stop Protection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableApiStop"
    )]
    #[builder(default, setter(strip_option))]
    pub disable_api_stop: Option<bool>,
    /// If true, enables EC2 Instance Termination Protection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableApiTermination"
    )]
    #[builder(default, setter(strip_option))]
    pub disable_api_termination: Option<bool>,
    /// One or more configuration blocks with additional EBS block devices to attach to the instance. Block device configurations only apply on resource creation. See Block Devices below for details on attributes and drift detection. When accessing this as an attribute reference, it is a set of objects.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsBlockDevice"
    )]
    #[builder(default, setter(strip_option))]
    pub ebs_block_device: Option<Vec<InstanceInitProviderEbsBlockDevice>>,
    /// If true, the launched EC2 instance will be EBS-optimized. Note that if this is not set on an instance type that is optimized by default then this will show as disabled but if the instance type is optimized by default then there is no need to set this and there is no effect to disabling it. See the EBS Optimized section of the AWS User Guide for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsOptimized"
    )]
    #[builder(default, setter(strip_option))]
    pub ebs_optimized: Option<bool>,
    /// Whether to assign a primary IPv6 Global Unicast Address (GUA) to the instance when launched in a dual-stack or IPv6-only subnet. A primary IPv6 address ensures a consistent IPv6 address for the instance and is automatically assigned by AWS to the ENI. Once enabled, the first IPv6 GUA becomes the primary IPv6 address and cannot be disabled. The primary IPv6 address remains until the instance is terminated or the ENI is detached. Disabling enable_primary_ipv6 after it has been enabled forces recreation of the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enablePrimaryIpv6"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_primary_ipv6: Option<bool>,
    /// Enable Nitro Enclaves on launched instances. See Enclave Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enclaveOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub enclave_options: Option<InstanceInitProviderEnclaveOptions>,
    /// One or more configuration blocks to customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a set of objects.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ephemeralBlockDevice"
    )]
    #[builder(default, setter(strip_option))]
    pub ephemeral_block_device: Option<Vec<InstanceInitProviderEphemeralBlockDevice>>,
    /// If true, wait for password data to become available and retrieve it. Useful for getting the administrator password for instances running Microsoft Windows. The password data is exported to the password_data attribute. See GetPasswordData for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "getPasswordData"
    )]
    #[builder(default, setter(strip_option))]
    pub get_password_data: Option<bool>,
    /// If true, the launched EC2 instance will support hibernation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub hibernation: Option<bool>,
    /// ID of a dedicated host that the instance will be assigned to. Use when an instance is to be launched on a specific dedicated host.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostId")]
    #[builder(default, setter(strip_option))]
    pub host_id: Option<String>,
    /// ARN of the host resource group in which to launch the instances. If you specify an ARN, omit the tenancy parameter or set it to host.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hostResourceGroupArn"
    )]
    #[builder(default, setter(strip_option))]
    pub host_resource_group_arn: Option<String>,
    /// IAM Instance Profile to launch the instance with. Specified as the name of the Instance Profile. Ensure your credentials have the correct permission to assign the instance profile according to the EC2 documentation, notably iam:PassRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "iamInstanceProfile"
    )]
    #[builder(default, setter(strip_option))]
    pub iam_instance_profile: Option<String>,
    /// Shutdown behavior for the instance. Amazon defaults this to stop for EBS-backed instances and terminate for instance-store instances. Cannot be set on instance-store instances. See Shutdown Behavior for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceInitiatedShutdownBehavior"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_initiated_shutdown_behavior: Option<String>,
    /// Describes the market (purchasing) option for the instances. See Market Options below for details on attributes.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceMarketOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_market_options: Option<InstanceInitProviderInstanceMarketOptions>,
    /// Instance type to use for the instance. Required unless launch_template is specified and the Launch Template specifies an instance type. If an instance type is specified in the Launch Template, setting instance_type will override the instance type specified in the Launch Template. Updates to this field will trigger a stop/start of the EC2 instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<String>,
    /// Number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6AddressCount"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_address_count: Option<f64>,
    /// Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6Addresses"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_addresses: Option<Vec<String>>,
    /// Key name of the Key Pair to use for the instance; which can be managed using the .
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyName")]
    #[builder(default, setter(strip_option))]
    pub key_name: Option<String>,
    /// Specifies a Launch Template to configure the instance. Parameters configured on this resource will override the corresponding parameters in the Launch Template. See Launch Template Specification below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template: Option<InstanceInitProviderLaunchTemplate>,
    /// Maintenance and recovery options for the instance. See Maintenance Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maintenanceOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub maintenance_options: Option<InstanceInitProviderMaintenanceOptions>,
    /// Customize the metadata options of the instance. See Metadata Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metadataOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub metadata_options: Option<InstanceInitProviderMetadataOptions>,
    /// If true, the launched EC2 instance will have detailed monitoring enabled. (Available since v0.6.0)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub monitoring: Option<bool>,
    /// Customize network interfaces to be attached at instance boot time. See Network Interfaces below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkInterface"
    )]
    #[builder(default, setter(strip_option))]
    pub network_interface: Option<Vec<InstanceInitProviderNetworkInterface>>,
    /// Placement Group to start the instance in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_group: Option<String>,
    /// Number of the partition the instance is in. Valid only if the  strategy argument is set to "partition".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementPartitionNumber"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_partition_number: Option<f64>,
    /// Options for the instance hostname. The default values are inherited from the subnet. See Private DNS Name Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateDnsNameOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub private_dns_name_options: Option<InstanceInitProviderPrivateDnsNameOptions>,
    /// Private IP address to associate with the instance in a VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIp")]
    #[builder(default, setter(strip_option))]
    pub private_ip: Option<String>,
    /// Configuration block to customize details about the root block device of the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a list containing one object.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rootBlockDevice"
    )]
    #[builder(default, setter(strip_option))]
    pub root_block_device: Option<InstanceInitProviderRootBlockDevice>,
    /// List of secondary private IPv4 addresses to assign to the instance's primary network interface (eth0) in a VPC. Can only be assigned to the primary network interface (eth0) attached at instance creation, not a pre-existing network interface i.e., referenced in a network_interface block. Refer to the Elastic network interfaces documentation to see the maximum number of private IP addresses allowed per instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secondaryPrivateIps"
    )]
    #[builder(default, setter(strip_option))]
    pub secondary_private_ips: Option<Vec<String>>,
    /// Controls if traffic is routed to the instance when the destination address does not match the instance. Used for NAT or VPNs. Defaults true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceDestCheck"
    )]
    #[builder(default, setter(strip_option))]
    pub source_dest_check: Option<bool>,
    /// VPC Subnet ID to launch in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    #[builder(default, setter(strip_option))]
    pub subnet_id: Option<String>,
    /// Reference to a Subnet in ec2 to populate subnetId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub subnet_id_ref: Option<InstanceInitProviderSubnetIdRef>,
    /// Selector for a Subnet in ec2 to populate subnetId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub subnet_id_selector: Option<InstanceInitProviderSubnetIdSelector>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for the import-instance command. Valid values are default, dedicated, and host.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tenancy: Option<String>,
    /// User data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see user_data_base64 instead. Updates to this field will trigger a stop/start of the EC2 instance by default. If the user_data_replace_on_change is set then updates to this field will trigger a destroy and recreate of the EC2 instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userData")]
    #[builder(default, setter(strip_option))]
    pub user_data: Option<String>,
    /// Can be used instead of user_data to pass base64-encoded binary data directly. Use this instead of user_data whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption. Updates to this field will trigger a stop/start of the EC2 instance by default. If the user_data_replace_on_change is set then updates to this field will trigger a destroy and recreate of the EC2 instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userDataBase64"
    )]
    #[builder(default, setter(strip_option))]
    pub user_data_base64: Option<String>,
    /// When used in combination with user_data or user_data_base64 will trigger a destroy and recreate of the EC2 instance when set to true. Defaults to false if not set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userDataReplaceOnChange"
    )]
    #[builder(default, setter(strip_option))]
    pub user_data_replace_on_change: Option<bool>,
    /// Map of tags to assign, at instance-creation time, to root and EBS volumes.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeTags"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_tags: Option<BTreeMap<String, String>>,
    /// References to SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcSecurityGroupIdRefs"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_security_group_id_refs: Option<Vec<InstanceInitProviderVpcSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcSecurityGroupIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_security_group_id_selector: Option<InstanceInitProviderVpcSecurityGroupIdSelector>,
    /// List of security group IDs to associate with.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcSecurityGroupIds"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Describes an instance's Capacity Reservation targeting option. See Capacity Reservation Specification below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderCapacityReservationSpecification {
    /// Indicates the instance's Capacity Reservation preferences. Can be "open" or "none". (Default: "open").
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityReservationPreference"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_reservation_preference: Option<String>,
    /// Information about the target Capacity Reservation. See Capacity Reservation Target below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityReservationTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_reservation_target:
        Option<InstanceInitProviderCapacityReservationSpecificationCapacityReservationTarget>,
}

/// Information about the target Capacity Reservation. See Capacity Reservation Target below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderCapacityReservationSpecificationCapacityReservationTarget {
    /// ID of the Capacity Reservation in which to run the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityReservationId"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_reservation_id: Option<String>,
    /// ARN of the Capacity Reservation resource group in which to run the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityReservationResourceGroupArn"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_reservation_resource_group_arn: Option<String>,
}

/// The CPU options for the instance. See CPU Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderCpuOptions {
    /// Indicates whether to enable the instance for AMD SEV-SNP. AMD SEV-SNP is supported with M6a, R6a, and C6a instance types only. Valid values are enabled and disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amdSevSnp")]
    #[builder(default, setter(strip_option))]
    pub amd_sev_snp: Option<String>,
    /// Sets the number of CPU cores for an instance. This option is only supported on creation of instance type that support CPU Options CPU Cores and Threads Per CPU Core Per Instance Type - specifying this option for unsupported instance types will return an error from the EC2 API.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreCount")]
    #[builder(default, setter(strip_option))]
    pub core_count: Option<f64>,
    /// If set to 1, hyperthreading is disabled on the launched instance. Defaults to 2 if not set. See Optimizing CPU Options for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "threadsPerCore"
    )]
    #[builder(default, setter(strip_option))]
    pub threads_per_core: Option<f64>,
}

/// Configuration block for customizing the credit specification of the instance. See Credit Specification below for more details. Removing this configuration on existing instances will only stop managing it. It will not change the configuration back to the default for the instance type.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderCreditSpecification {
    /// Credit option for CPU usage. Valid values include standard or unlimited. T3 instances are launched as unlimited by default. T2 instances are launched as standard by default.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cpuCredits"
    )]
    #[builder(default, setter(strip_option))]
    pub cpu_credits: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderEbsBlockDevice {
    /// Whether the volume should be destroyed on instance termination. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteOnTermination"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_on_termination: Option<bool>,
    /// Name of the device to mount.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub device_name: Option<String>,
    /// Enables EBS encryption on the volume. Defaults to false. Cannot be used with snapshot_id. Must be configured to perform drift detection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub encrypted: Option<bool>,
    /// Amount of provisioned IOPS. Only valid for volume_type of io1, io2 or gp3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub iops: Option<f64>,
    /// Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_id_ref: Option<InstanceInitProviderEbsBlockDeviceKmsKeyIdRef>,
    /// Selector for a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_id_selector: Option<InstanceInitProviderEbsBlockDeviceKmsKeyIdSelector>,
    /// Snapshot ID to mount.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotId"
    )]
    #[builder(default, setter(strip_option))]
    pub snapshot_id: Option<String>,
    /// Map of tags to assign to the device.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// Throughput to provision for a volume in mebibytes per second (MiB/s). This is only valid for volume_type of gp3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub throughput: Option<f64>,
    /// Size of the volume in gibibytes (GiB).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_size: Option<f64>,
    /// Type of volume. Valid values include standard, gp2, gp3, io1, io2, sc1, or st1. Defaults to gp2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_type: Option<String>,
}

/// Reference to a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderEbsBlockDeviceKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceInitProviderEbsBlockDeviceKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderEbsBlockDeviceKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceInitProviderEbsBlockDeviceKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceInitProviderEbsBlockDeviceKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderEbsBlockDeviceKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderEbsBlockDeviceKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderEbsBlockDeviceKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceInitProviderEbsBlockDeviceKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderEbsBlockDeviceKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceInitProviderEbsBlockDeviceKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceInitProviderEbsBlockDeviceKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderEbsBlockDeviceKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderEbsBlockDeviceKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Enable Nitro Enclaves on launched instances. See Enclave Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderEnclaveOptions {
    /// Whether Nitro Enclaves will be enabled on the instance. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderEphemeralBlockDevice {
    /// Name of the block device to mount on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub device_name: Option<String>,
    /// Suppresses the specified device included in the AMI's block device mapping.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    #[builder(default, setter(strip_option))]
    pub no_device: Option<bool>,
    /// Instance Store Device Name (e.g., ephemeral0).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualName"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_name: Option<String>,
}

/// Describes the market (purchasing) option for the instances. See Market Options below for details on attributes.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderInstanceMarketOptions {
    /// Type of market for the instance. Valid values are spot and capacity-block. Defaults to spot. Required if spot_options is specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "marketType"
    )]
    #[builder(default, setter(strip_option))]
    pub market_type: Option<String>,
    /// Block to configure the options for Spot Instances. See Spot Options below for details on attributes.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_options: Option<InstanceInitProviderInstanceMarketOptionsSpotOptions>,
}

/// Block to configure the options for Spot Instances. See Spot Options below for details on attributes.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderInstanceMarketOptionsSpotOptions {
    /// The behavior when a Spot Instance is interrupted. Valid values include hibernate, stop, terminate . The default is terminate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceInterruptionBehavior"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_interruption_behavior: Option<String>,
    /// The maximum hourly price that you're willing to pay for a Spot Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPrice")]
    #[builder(default, setter(strip_option))]
    pub max_price: Option<String>,
    /// The Spot Instance request type. Valid values include one-time, persistent. Persistent Spot Instance requests are only supported when the instance interruption behavior is either hibernate or stop. The default is one-time.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotInstanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_instance_type: Option<String>,
    /// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). Supported only for persistent requests.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validUntil"
    )]
    #[builder(default, setter(strip_option))]
    pub valid_until: Option<String>,
}

/// Specifies a Launch Template to configure the instance. Parameters configured on this resource will override the corresponding parameters in the Launch Template. See Launch Template Specification below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderLaunchTemplate {
    /// ID of the launch template. Conflicts with name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Name of the launch template. Conflicts with id.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Template version. Can be a specific version number, $Latest or $Default. The default value is $Default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

/// Maintenance and recovery options for the instance. See Maintenance Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderMaintenanceOptions {
    /// Automatic recovery behavior of the Instance. Can be "default" or "disabled". See Recover your instance for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoRecovery"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_recovery: Option<String>,
}

/// Customize the metadata options of the instance. See Metadata Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderMetadataOptions {
    /// Whether the metadata service is available. Valid values include enabled or disabled. Defaults to enabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpEndpoint"
    )]
    #[builder(default, setter(strip_option))]
    pub http_endpoint: Option<String>,
    /// Whether the IPv6 endpoint for the instance metadata service is enabled. Defaults to disabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpProtocolIpv6"
    )]
    #[builder(default, setter(strip_option))]
    pub http_protocol_ipv6: Option<String>,
    /// Desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Valid values are integer from 1 to 64. Defaults to 1.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpPutResponseHopLimit"
    )]
    #[builder(default, setter(strip_option))]
    pub http_put_response_hop_limit: Option<f64>,
    /// Whether or not the metadata service requires session tokens, also referred to as Instance Metadata Service Version 2 (IMDSv2). Valid values include optional or required.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpTokens"
    )]
    #[builder(default, setter(strip_option))]
    pub http_tokens: Option<String>,
    /// Enables or disables access to instance tags from the instance metadata service. Valid values include enabled or disabled. Defaults to disabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceMetadataTags"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_metadata_tags: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderNetworkInterface {
    /// Whether or not to delete the network interface on instance termination. Defaults to false. Currently, the only valid value is false, as this is only supported when creating new network interfaces when launching an instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteOnTermination"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_on_termination: Option<bool>,
    /// Integer index of the network interface attachment. Limited by instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceIndex"
    )]
    #[builder(default, setter(strip_option))]
    pub device_index: Option<f64>,
    /// Integer index of the network card. Limited by instance type. The default index is 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkCardIndex"
    )]
    #[builder(default, setter(strip_option))]
    pub network_card_index: Option<f64>,
    /// ID of the network interface to attach.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkInterfaceId"
    )]
    #[builder(default, setter(strip_option))]
    pub network_interface_id: Option<String>,
    /// Reference to a NetworkInterface in ec2 to populate networkInterfaceId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkInterfaceIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub network_interface_id_ref: Option<InstanceInitProviderNetworkInterfaceNetworkInterfaceIdRef>,
    /// Selector for a NetworkInterface in ec2 to populate networkInterfaceId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkInterfaceIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub network_interface_id_selector:
        Option<InstanceInitProviderNetworkInterfaceNetworkInterfaceIdSelector>,
}

/// Reference to a NetworkInterface in ec2 to populate networkInterfaceId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderNetworkInterfaceNetworkInterfaceIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceInitProviderNetworkInterfaceNetworkInterfaceIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderNetworkInterfaceNetworkInterfaceIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<InstanceInitProviderNetworkInterfaceNetworkInterfaceIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceInitProviderNetworkInterfaceNetworkInterfaceIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderNetworkInterfaceNetworkInterfaceIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderNetworkInterfaceNetworkInterfaceIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a NetworkInterface in ec2 to populate networkInterfaceId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderNetworkInterfaceNetworkInterfaceIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceInitProviderNetworkInterfaceNetworkInterfaceIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderNetworkInterfaceNetworkInterfaceIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<InstanceInitProviderNetworkInterfaceNetworkInterfaceIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<InstanceInitProviderNetworkInterfaceNetworkInterfaceIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderNetworkInterfaceNetworkInterfaceIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderNetworkInterfaceNetworkInterfaceIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Options for the instance hostname. The default values are inherited from the subnet. See Private DNS Name Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderPrivateDnsNameOptions {
    /// Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableResourceNameDnsARecord"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_resource_name_dns_a_record: Option<bool>,
    /// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableResourceNameDnsAaaaRecord"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_resource_name_dns_aaaa_record: Option<bool>,
    /// Type of hostname for Amazon EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 native subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: ip-name and resource-name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hostnameType"
    )]
    #[builder(default, setter(strip_option))]
    pub hostname_type: Option<String>,
}

/// Configuration block to customize details about the root block device of the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a list containing one object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderRootBlockDevice {
    /// Whether the volume should be destroyed on instance termination. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteOnTermination"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_on_termination: Option<bool>,
    /// Whether to enable volume encryption. Defaults to false. Must be configured to perform drift detection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub encrypted: Option<bool>,
    /// Amount of provisioned IOPS. Only valid for volume_type of io1, io2 or gp3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub iops: Option<f64>,
    /// Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_id_ref: Option<InstanceInitProviderRootBlockDeviceKmsKeyIdRef>,
    /// Selector for a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_id_selector: Option<InstanceInitProviderRootBlockDeviceKmsKeyIdSelector>,
    /// Map of tags to assign to the device.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// Throughput to provision for a volume in mebibytes per second (MiB/s). This is only valid for volume_type of gp3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub throughput: Option<f64>,
    /// Size of the volume in gibibytes (GiB).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_size: Option<f64>,
    /// Type of volume. Valid values include standard, gp2, gp3, io1, io2, sc1, or st1. Defaults to the volume type that the AMI uses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_type: Option<String>,
}

/// Reference to a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderRootBlockDeviceKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceInitProviderRootBlockDeviceKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderRootBlockDeviceKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceInitProviderRootBlockDeviceKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceInitProviderRootBlockDeviceKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderRootBlockDeviceKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderRootBlockDeviceKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderRootBlockDeviceKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceInitProviderRootBlockDeviceKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderRootBlockDeviceKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceInitProviderRootBlockDeviceKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceInitProviderRootBlockDeviceKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderRootBlockDeviceKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderRootBlockDeviceKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Subnet in ec2 to populate subnetId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderSubnetIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceInitProviderSubnetIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderSubnetIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceInitProviderSubnetIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceInitProviderSubnetIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderSubnetIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderSubnetIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Subnet in ec2 to populate subnetId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceInitProviderSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceInitProviderSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceInitProviderSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderVpcSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceInitProviderVpcSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderVpcSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceInitProviderVpcSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceInitProviderVpcSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderVpcSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderVpcSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderVpcSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceInitProviderVpcSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceInitProviderVpcSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceInitProviderVpcSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceInitProviderVpcSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderVpcSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderVpcSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstancePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<InstancePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<InstancePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstancePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstancePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstancePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstancePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// InstanceStatus defines the observed state of Instance.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<InstanceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStatusAtProvider {
    /// AMI to use for the instance. Required unless launch_template is specified and the Launch Template specifes an AMI. If an AMI is specified in the Launch Template, setting ami will override the AMI specified in the Launch Template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub ami: Option<String>,
    /// ARN of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Whether to associate a public IP address with an instance in a VPC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "associatePublicIpAddress"
    )]
    #[builder(default, setter(strip_option))]
    pub associate_public_ip_address: Option<bool>,
    /// AZ to start the instance in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZone"
    )]
    #[builder(default, setter(strip_option))]
    pub availability_zone: Option<String>,
    /// Describes an instance's Capacity Reservation targeting option. See Capacity Reservation Specification below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityReservationSpecification"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_reservation_specification:
        Option<InstanceStatusAtProviderCapacityReservationSpecification>,
    /// Sets the number of CPU cores for an instance. This option is only supported on creation of instance type that support CPU Options CPU Cores and Threads Per CPU Core Per Instance Type - specifying this option for unsupported instance types will return an error from the EC2 API.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cpuCoreCount"
    )]
    #[builder(default, setter(strip_option))]
    pub cpu_core_count: Option<f64>,
    /// The CPU options for the instance. See CPU Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cpuOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub cpu_options: Option<InstanceStatusAtProviderCpuOptions>,
    /// If set to 1, hyperthreading is disabled on the launched instance. Defaults to 2 if not set. See Optimizing CPU Options for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cpuThreadsPerCore"
    )]
    #[builder(default, setter(strip_option))]
    pub cpu_threads_per_core: Option<f64>,
    /// Configuration block for customizing the credit specification of the instance. See Credit Specification below for more details. Removing this configuration on existing instances will only stop managing it. It will not change the configuration back to the default for the instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "creditSpecification"
    )]
    #[builder(default, setter(strip_option))]
    pub credit_specification: Option<InstanceStatusAtProviderCreditSpecification>,
    /// If true, enables EC2 Instance Stop Protection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableApiStop"
    )]
    #[builder(default, setter(strip_option))]
    pub disable_api_stop: Option<bool>,
    /// If true, enables EC2 Instance Termination Protection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "disableApiTermination"
    )]
    #[builder(default, setter(strip_option))]
    pub disable_api_termination: Option<bool>,
    /// One or more configuration blocks with additional EBS block devices to attach to the instance. Block device configurations only apply on resource creation. See Block Devices below for details on attributes and drift detection. When accessing this as an attribute reference, it is a set of objects.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsBlockDevice"
    )]
    #[builder(default, setter(strip_option))]
    pub ebs_block_device: Option<Vec<InstanceStatusAtProviderEbsBlockDevice>>,
    /// If true, the launched EC2 instance will be EBS-optimized. Note that if this is not set on an instance type that is optimized by default then this will show as disabled but if the instance type is optimized by default then there is no need to set this and there is no effect to disabling it. See the EBS Optimized section of the AWS User Guide for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsOptimized"
    )]
    #[builder(default, setter(strip_option))]
    pub ebs_optimized: Option<bool>,
    /// Whether to assign a primary IPv6 Global Unicast Address (GUA) to the instance when launched in a dual-stack or IPv6-only subnet. A primary IPv6 address ensures a consistent IPv6 address for the instance and is automatically assigned by AWS to the ENI. Once enabled, the first IPv6 GUA becomes the primary IPv6 address and cannot be disabled. The primary IPv6 address remains until the instance is terminated or the ENI is detached. Disabling enable_primary_ipv6 after it has been enabled forces recreation of the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enablePrimaryIpv6"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_primary_ipv6: Option<bool>,
    /// Enable Nitro Enclaves on launched instances. See Enclave Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enclaveOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub enclave_options: Option<InstanceStatusAtProviderEnclaveOptions>,
    /// One or more configuration blocks to customize Ephemeral (also known as "Instance Store") volumes on the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a set of objects.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ephemeralBlockDevice"
    )]
    #[builder(default, setter(strip_option))]
    pub ephemeral_block_device: Option<Vec<InstanceStatusAtProviderEphemeralBlockDevice>>,
    /// If true, wait for password data to become available and retrieve it. Useful for getting the administrator password for instances running Microsoft Windows. The password data is exported to the password_data attribute. See GetPasswordData for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "getPasswordData"
    )]
    #[builder(default, setter(strip_option))]
    pub get_password_data: Option<bool>,
    /// If true, the launched EC2 instance will support hibernation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub hibernation: Option<bool>,
    /// ID of a dedicated host that the instance will be assigned to. Use when an instance is to be launched on a specific dedicated host.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostId")]
    #[builder(default, setter(strip_option))]
    pub host_id: Option<String>,
    /// ARN of the host resource group in which to launch the instances. If you specify an ARN, omit the tenancy parameter or set it to host.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hostResourceGroupArn"
    )]
    #[builder(default, setter(strip_option))]
    pub host_resource_group_arn: Option<String>,
    /// IAM Instance Profile to launch the instance with. Specified as the name of the Instance Profile. Ensure your credentials have the correct permission to assign the instance profile according to the EC2 documentation, notably iam:PassRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "iamInstanceProfile"
    )]
    #[builder(default, setter(strip_option))]
    pub iam_instance_profile: Option<String>,
    /// ID of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Shutdown behavior for the instance. Amazon defaults this to stop for EBS-backed instances and terminate for instance-store instances. Cannot be set on instance-store instances. See Shutdown Behavior for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceInitiatedShutdownBehavior"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_initiated_shutdown_behavior: Option<String>,
    /// Indicates whether this is a Spot Instance or a Scheduled Instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceLifecycle"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_lifecycle: Option<String>,
    /// Describes the market (purchasing) option for the instances. See Market Options below for details on attributes.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceMarketOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_market_options: Option<InstanceStatusAtProviderInstanceMarketOptions>,
    /// State of the instance. One of: pending, running, shutting-down, terminated, stopping, stopped. See Instance Lifecycle for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceState"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_state: Option<String>,
    /// Instance type to use for the instance. Required unless launch_template is specified and the Launch Template specifies an instance type. If an instance type is specified in the Launch Template, setting instance_type will override the instance type specified in the Launch Template. Updates to this field will trigger a stop/start of the EC2 instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<String>,
    /// Number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6AddressCount"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_address_count: Option<f64>,
    /// Specify one or more IPv6 addresses from the range of the subnet to associate with the primary network interface
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipv6Addresses"
    )]
    #[builder(default, setter(strip_option))]
    pub ipv6_addresses: Option<Vec<String>>,
    /// Key name of the Key Pair to use for the instance; which can be managed using the .
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyName")]
    #[builder(default, setter(strip_option))]
    pub key_name: Option<String>,
    /// Specifies a Launch Template to configure the instance. Parameters configured on this resource will override the corresponding parameters in the Launch Template. See Launch Template Specification below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template: Option<InstanceStatusAtProviderLaunchTemplate>,
    /// Maintenance and recovery options for the instance. See Maintenance Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maintenanceOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub maintenance_options: Option<InstanceStatusAtProviderMaintenanceOptions>,
    /// Customize the metadata options of the instance. See Metadata Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metadataOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub metadata_options: Option<InstanceStatusAtProviderMetadataOptions>,
    /// If true, the launched EC2 instance will have detailed monitoring enabled. (Available since v0.6.0)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub monitoring: Option<bool>,
    /// Customize network interfaces to be attached at instance boot time. See Network Interfaces below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkInterface"
    )]
    #[builder(default, setter(strip_option))]
    pub network_interface: Option<Vec<InstanceStatusAtProviderNetworkInterface>>,
    /// ARN of the Outpost the instance is assigned to.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outpostArn"
    )]
    #[builder(default, setter(strip_option))]
    pub outpost_arn: Option<String>,
    /// Base-64 encoded encrypted password data for the instance. Useful for getting the administrator password for instances running Microsoft Windows. This attribute is only exported if get_password_data is true. Note that this encrypted value will be stored in the state file, as with all exported attributes. See GetPasswordData for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "passwordData"
    )]
    #[builder(default, setter(strip_option))]
    pub password_data: Option<String>,
    /// Placement Group to start the instance in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_group: Option<String>,
    /// Number of the partition the instance is in. Valid only if the  strategy argument is set to "partition".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementPartitionNumber"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_partition_number: Option<f64>,
    /// ID of the instance's primary network interface.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "primaryNetworkInterfaceId"
    )]
    #[builder(default, setter(strip_option))]
    pub primary_network_interface_id: Option<String>,
    /// Private DNS name assigned to the instance. Can only be used inside the Amazon EC2, and only available if you've enabled DNS hostnames for your VPC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateDns"
    )]
    #[builder(default, setter(strip_option))]
    pub private_dns: Option<String>,
    /// Options for the instance hostname. The default values are inherited from the subnet. See Private DNS Name Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "privateDnsNameOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub private_dns_name_options: Option<InstanceStatusAtProviderPrivateDnsNameOptions>,
    /// Private IP address to associate with the instance in a VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIp")]
    #[builder(default, setter(strip_option))]
    pub private_ip: Option<String>,
    /// Public DNS name assigned to the instance. For EC2-VPC, this is only available if you've enabled DNS hostnames for your VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicDns")]
    #[builder(default, setter(strip_option))]
    pub public_dns: Option<String>,
    /// Public IP address assigned to the instance, if applicable. NOTE: If you are using an aws_eip with your instance, you should refer to the EIP's address directly and not use public_ip as this field will change after the EIP is attached.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicIp")]
    #[builder(default, setter(strip_option))]
    pub public_ip: Option<String>,
    /// Configuration block to customize details about the root block device of the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a list containing one object.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "rootBlockDevice"
    )]
    #[builder(default, setter(strip_option))]
    pub root_block_device: Option<InstanceStatusAtProviderRootBlockDevice>,
    /// List of secondary private IPv4 addresses to assign to the instance's primary network interface (eth0) in a VPC. Can only be assigned to the primary network interface (eth0) attached at instance creation, not a pre-existing network interface i.e., referenced in a network_interface block. Refer to the Elastic network interfaces documentation to see the maximum number of private IP addresses allowed per instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "secondaryPrivateIps"
    )]
    #[builder(default, setter(strip_option))]
    pub secondary_private_ips: Option<Vec<String>>,
    /// List of security group names to associate with.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroups"
    )]
    #[builder(default, setter(strip_option))]
    pub security_groups: Option<Vec<String>>,
    /// Controls if traffic is routed to the instance when the destination address does not match the instance. Used for NAT or VPNs. Defaults true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceDestCheck"
    )]
    #[builder(default, setter(strip_option))]
    pub source_dest_check: Option<bool>,
    /// If the request is a Spot Instance request, the ID of the request.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotInstanceRequestId"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_instance_request_id: Option<String>,
    /// VPC Subnet ID to launch in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetId")]
    #[builder(default, setter(strip_option))]
    pub subnet_id: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// Tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of dedicated runs on single-tenant hardware. The host tenancy is not supported for the import-instance command. Valid values are default, dedicated, and host.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tenancy: Option<String>,
    /// User data to provide when launching the instance. Do not pass gzip-compressed data via this argument; see user_data_base64 instead. Updates to this field will trigger a stop/start of the EC2 instance by default. If the user_data_replace_on_change is set then updates to this field will trigger a destroy and recreate of the EC2 instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userData")]
    #[builder(default, setter(strip_option))]
    pub user_data: Option<String>,
    /// Can be used instead of user_data to pass base64-encoded binary data directly. Use this instead of user_data whenever the value is not a valid UTF-8 string. For example, gzip-encoded user data must be base64-encoded and passed via this argument to avoid corruption. Updates to this field will trigger a stop/start of the EC2 instance by default. If the user_data_replace_on_change is set then updates to this field will trigger a destroy and recreate of the EC2 instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userDataBase64"
    )]
    #[builder(default, setter(strip_option))]
    pub user_data_base64: Option<String>,
    /// When used in combination with user_data or user_data_base64 will trigger a destroy and recreate of the EC2 instance when set to true. Defaults to false if not set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userDataReplaceOnChange"
    )]
    #[builder(default, setter(strip_option))]
    pub user_data_replace_on_change: Option<bool>,
    /// Map of tags to assign, at instance-creation time, to root and EBS volumes.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeTags"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_tags: Option<BTreeMap<String, String>>,
    /// List of security group IDs to associate with.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcSecurityGroupIds"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Describes an instance's Capacity Reservation targeting option. See Capacity Reservation Specification below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStatusAtProviderCapacityReservationSpecification {
    /// Indicates the instance's Capacity Reservation preferences. Can be "open" or "none". (Default: "open").
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityReservationPreference"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_reservation_preference: Option<String>,
    /// Information about the target Capacity Reservation. See Capacity Reservation Target below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityReservationTarget"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_reservation_target:
        Option<InstanceStatusAtProviderCapacityReservationSpecificationCapacityReservationTarget>,
}

/// Information about the target Capacity Reservation. See Capacity Reservation Target below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStatusAtProviderCapacityReservationSpecificationCapacityReservationTarget {
    /// ID of the Capacity Reservation in which to run the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityReservationId"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_reservation_id: Option<String>,
    /// ARN of the Capacity Reservation resource group in which to run the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityReservationResourceGroupArn"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_reservation_resource_group_arn: Option<String>,
}

/// The CPU options for the instance. See CPU Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStatusAtProviderCpuOptions {
    /// Indicates whether to enable the instance for AMD SEV-SNP. AMD SEV-SNP is supported with M6a, R6a, and C6a instance types only. Valid values are enabled and disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amdSevSnp")]
    #[builder(default, setter(strip_option))]
    pub amd_sev_snp: Option<String>,
    /// Sets the number of CPU cores for an instance. This option is only supported on creation of instance type that support CPU Options CPU Cores and Threads Per CPU Core Per Instance Type - specifying this option for unsupported instance types will return an error from the EC2 API.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreCount")]
    #[builder(default, setter(strip_option))]
    pub core_count: Option<f64>,
    /// If set to 1, hyperthreading is disabled on the launched instance. Defaults to 2 if not set. See Optimizing CPU Options for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "threadsPerCore"
    )]
    #[builder(default, setter(strip_option))]
    pub threads_per_core: Option<f64>,
}

/// Configuration block for customizing the credit specification of the instance. See Credit Specification below for more details. Removing this configuration on existing instances will only stop managing it. It will not change the configuration back to the default for the instance type.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStatusAtProviderCreditSpecification {
    /// Credit option for CPU usage. Valid values include standard or unlimited. T3 instances are launched as unlimited by default. T2 instances are launched as standard by default.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cpuCredits"
    )]
    #[builder(default, setter(strip_option))]
    pub cpu_credits: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStatusAtProviderEbsBlockDevice {
    /// Whether the volume should be destroyed on instance termination. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteOnTermination"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_on_termination: Option<bool>,
    /// Name of the device to mount.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub device_name: Option<String>,
    /// Enables EBS encryption on the volume. Defaults to false. Cannot be used with snapshot_id. Must be configured to perform drift detection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub encrypted: Option<bool>,
    /// Amount of provisioned IOPS. Only valid for volume_type of io1, io2 or gp3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub iops: Option<f64>,
    /// Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Snapshot ID to mount.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotId"
    )]
    #[builder(default, setter(strip_option))]
    pub snapshot_id: Option<String>,
    /// Map of tags to assign to the device.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// Throughput to provision for a volume in mebibytes per second (MiB/s). This is only valid for volume_type of gp3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub throughput: Option<f64>,
    /// ID of the volume. For example, the ID can be accessed like this, aws_instance.web.ebs_block_device.2.volume_id.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeId")]
    #[builder(default, setter(strip_option))]
    pub volume_id: Option<String>,
    /// Size of the volume in gibibytes (GiB).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_size: Option<f64>,
    /// Type of volume. Valid values include standard, gp2, gp3, io1, io2, sc1, or st1. Defaults to gp2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_type: Option<String>,
}

/// Enable Nitro Enclaves on launched instances. See Enclave Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStatusAtProviderEnclaveOptions {
    /// Whether Nitro Enclaves will be enabled on the instance. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStatusAtProviderEphemeralBlockDevice {
    /// Name of the block device to mount on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub device_name: Option<String>,
    /// Suppresses the specified device included in the AMI's block device mapping.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    #[builder(default, setter(strip_option))]
    pub no_device: Option<bool>,
    /// Instance Store Device Name (e.g., ephemeral0).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualName"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_name: Option<String>,
}

/// Describes the market (purchasing) option for the instances. See Market Options below for details on attributes.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStatusAtProviderInstanceMarketOptions {
    /// Type of market for the instance. Valid values are spot and capacity-block. Defaults to spot. Required if spot_options is specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "marketType"
    )]
    #[builder(default, setter(strip_option))]
    pub market_type: Option<String>,
    /// Block to configure the options for Spot Instances. See Spot Options below for details on attributes.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_options: Option<InstanceStatusAtProviderInstanceMarketOptionsSpotOptions>,
}

/// Block to configure the options for Spot Instances. See Spot Options below for details on attributes.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStatusAtProviderInstanceMarketOptionsSpotOptions {
    /// The behavior when a Spot Instance is interrupted. Valid values include hibernate, stop, terminate . The default is terminate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceInterruptionBehavior"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_interruption_behavior: Option<String>,
    /// The maximum hourly price that you're willing to pay for a Spot Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPrice")]
    #[builder(default, setter(strip_option))]
    pub max_price: Option<String>,
    /// The Spot Instance request type. Valid values include one-time, persistent. Persistent Spot Instance requests are only supported when the instance interruption behavior is either hibernate or stop. The default is one-time.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotInstanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_instance_type: Option<String>,
    /// The end date of the request, in UTC format (YYYY-MM-DDTHH:MM:SSZ). Supported only for persistent requests.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "validUntil"
    )]
    #[builder(default, setter(strip_option))]
    pub valid_until: Option<String>,
}

/// Specifies a Launch Template to configure the instance. Parameters configured on this resource will override the corresponding parameters in the Launch Template. See Launch Template Specification below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStatusAtProviderLaunchTemplate {
    /// ID of the launch template. Conflicts with name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Name of the launch template. Conflicts with id.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Template version. Can be a specific version number, $Latest or $Default. The default value is $Default.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

/// Maintenance and recovery options for the instance. See Maintenance Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStatusAtProviderMaintenanceOptions {
    /// Automatic recovery behavior of the Instance. Can be "default" or "disabled". See Recover your instance for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoRecovery"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_recovery: Option<String>,
}

/// Customize the metadata options of the instance. See Metadata Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStatusAtProviderMetadataOptions {
    /// Whether the metadata service is available. Valid values include enabled or disabled. Defaults to enabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpEndpoint"
    )]
    #[builder(default, setter(strip_option))]
    pub http_endpoint: Option<String>,
    /// Whether the IPv6 endpoint for the instance metadata service is enabled. Defaults to disabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpProtocolIpv6"
    )]
    #[builder(default, setter(strip_option))]
    pub http_protocol_ipv6: Option<String>,
    /// Desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Valid values are integer from 1 to 64. Defaults to 1.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpPutResponseHopLimit"
    )]
    #[builder(default, setter(strip_option))]
    pub http_put_response_hop_limit: Option<f64>,
    /// Whether or not the metadata service requires session tokens, also referred to as Instance Metadata Service Version 2 (IMDSv2). Valid values include optional or required.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "httpTokens"
    )]
    #[builder(default, setter(strip_option))]
    pub http_tokens: Option<String>,
    /// Enables or disables access to instance tags from the instance metadata service. Valid values include enabled or disabled. Defaults to disabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceMetadataTags"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_metadata_tags: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStatusAtProviderNetworkInterface {
    /// Whether or not to delete the network interface on instance termination. Defaults to false. Currently, the only valid value is false, as this is only supported when creating new network interfaces when launching an instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteOnTermination"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_on_termination: Option<bool>,
    /// Integer index of the network interface attachment. Limited by instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceIndex"
    )]
    #[builder(default, setter(strip_option))]
    pub device_index: Option<f64>,
    /// Integer index of the network card. Limited by instance type. The default index is 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkCardIndex"
    )]
    #[builder(default, setter(strip_option))]
    pub network_card_index: Option<f64>,
    /// ID of the network interface to attach.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkInterfaceId"
    )]
    #[builder(default, setter(strip_option))]
    pub network_interface_id: Option<String>,
}

/// Options for the instance hostname. The default values are inherited from the subnet. See Private DNS Name Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStatusAtProviderPrivateDnsNameOptions {
    /// Indicates whether to respond to DNS queries for instance hostnames with DNS A records.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableResourceNameDnsARecord"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_resource_name_dns_a_record: Option<bool>,
    /// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableResourceNameDnsAaaaRecord"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_resource_name_dns_aaaa_record: Option<bool>,
    /// Type of hostname for Amazon EC2 instances. For IPv4 only subnets, an instance DNS name must be based on the instance IPv4 address. For IPv6 native subnets, an instance DNS name must be based on the instance ID. For dual-stack subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: ip-name and resource-name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "hostnameType"
    )]
    #[builder(default, setter(strip_option))]
    pub hostname_type: Option<String>,
}

/// Configuration block to customize details about the root block device of the instance. See Block Devices below for details. When accessing this as an attribute reference, it is a list containing one object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStatusAtProviderRootBlockDevice {
    /// Whether the volume should be destroyed on instance termination. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteOnTermination"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_on_termination: Option<bool>,
    /// Device name, e.g., /dev/sdh or xvdh.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub device_name: Option<String>,
    /// Whether to enable volume encryption. Defaults to false. Must be configured to perform drift detection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub encrypted: Option<bool>,
    /// Amount of provisioned IOPS. Only valid for volume_type of io1, io2 or gp3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub iops: Option<f64>,
    /// Amazon Resource Name (ARN) of the KMS Key to use when encrypting the volume. Must be configured to perform drift detection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Map of tags to assign to the device.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// Throughput to provision for a volume in mebibytes per second (MiB/s). This is only valid for volume_type of gp3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub throughput: Option<f64>,
    /// ID of the volume. For example, the ID can be accessed like this, aws_instance.web.root_block_device.0.volume_id.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeId")]
    #[builder(default, setter(strip_option))]
    pub volume_id: Option<String>,
    /// Size of the volume in gibibytes (GiB).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_size: Option<f64>,
    /// Type of volume. Valid values include standard, gp2, gp3, io1, io2, sc1, or st1. Defaults to the volume type that the AMI uses.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_type: Option<String>,
}

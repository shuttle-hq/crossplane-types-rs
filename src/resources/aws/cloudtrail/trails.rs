// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// TrailSpec defines the desired state of Trail
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "cloudtrail.aws.upbound.io",
    version = "v1beta1",
    kind = "Trail",
    plural = "trails"
)]
#[kube(status = "TrailStatus")]
pub struct TrailSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<TrailDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: TrailForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<TrailInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<TrailProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<TrailPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<TrailWriteConnectionSecretToRef>,
}

/// TrailSpec defines the desired state of Trail
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailForProvider {
    /// Specifies an advanced event selector for enabling data event logging. Fields documented below. Conflicts with event_selector.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "advancedEventSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub advanced_event_selector: Option<Vec<TrailForProviderAdvancedEventSelector>>,
    /// Log group name using an ARN that represents the log group to which CloudTrail logs will be delivered. Note that CloudTrail requires the Log Stream wildcard.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchLogsGroupArn"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_logs_group_arn: Option<String>,
    /// Role for the CloudWatch Logs endpoint to assume to write to a userâ€™s log group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchLogsRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_logs_role_arn: Option<String>,
    /// Reference to a Role in iam to populate cloudWatchLogsRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchLogsRoleArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_logs_role_arn_ref: Option<TrailForProviderCloudWatchLogsRoleArnRef>,
    /// Selector for a Role in iam to populate cloudWatchLogsRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchLogsRoleArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_logs_role_arn_selector: Option<TrailForProviderCloudWatchLogsRoleArnSelector>,
    /// Whether log file integrity validation is enabled. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableLogFileValidation"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_log_file_validation: Option<bool>,
    /// Enables logging for the trail. Defaults to true. Setting this to false will pause logging.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableLogging"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_logging: Option<bool>,
    /// Specifies an event selector for enabling data event logging. Fields documented below. Please note the CloudTrail limits when configuring these. Conflicts with advanced_event_selector.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub event_selector: Option<Vec<TrailForProviderEventSelector>>,
    /// Whether the trail is publishing events from global services such as IAM to the log files. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includeGlobalServiceEvents"
    )]
    #[builder(default, setter(strip_option))]
    pub include_global_service_events: Option<bool>,
    /// Configuration block for identifying unusual operational activity. See details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "insightSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub insight_selector: Option<Vec<TrailForProviderInsightSelector>>,
    /// Whether the trail is created in the current region or in all regions. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "isMultiRegionTrail"
    )]
    #[builder(default, setter(strip_option))]
    pub is_multi_region_trail: Option<bool>,
    /// Whether the trail is an AWS Organizations trail. Organization trails log events for the master account and all member accounts. Can only be created in the organization master account. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "isOrganizationTrail"
    )]
    #[builder(default, setter(strip_option))]
    pub is_organization_trail: Option<bool>,
    /// KMS key ARN to use to encrypt the logs delivered by CloudTrail.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_id_ref: Option<TrailForProviderKmsKeyIdRef>,
    /// Selector for a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_id_selector: Option<TrailForProviderKmsKeyIdSelector>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Name of the S3 bucket designated for publishing log files.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketName"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_name: Option<String>,
    /// Reference to a Bucket in s3 to populate s3BucketName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_name_ref: Option<TrailForProviderS3BucketNameRef>,
    /// Selector for a Bucket in s3 to populate s3BucketName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_name_selector: Option<TrailForProviderS3BucketNameSelector>,
    /// S3 key prefix that follows the name of the bucket you have designated for log file delivery.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3KeyPrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_key_prefix: Option<String>,
    /// Name of the Amazon SNS topic defined for notification of log file delivery.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snsTopicName"
    )]
    #[builder(default, setter(strip_option))]
    pub sns_topic_name: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailForProviderAdvancedEventSelector {
    /// Specifies the selector statements in an advanced event selector. Fields documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fieldSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub field_selector: Option<Vec<TrailForProviderAdvancedEventSelectorFieldSelector>>,
    /// Name of the trail.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailForProviderAdvancedEventSelectorFieldSelector {
    /// A list of values that includes events that match the last few characters of the event record field specified as the value of field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endsWith")]
    #[builder(default, setter(strip_option))]
    pub ends_with: Option<Vec<String>>,
    /// A list of values that includes events that match the exact value of the event record field specified as the value of field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub equals: Option<Vec<String>>,
    /// Field in an event record on which to filter events to be logged. You can specify only the following values: readOnly, eventSource, eventName, eventCategory, resources.type, resources.ARN.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub field: Option<String>,
    /// A list of values that excludes events that match the last few characters of the event record field specified as the value of field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notEndsWith"
    )]
    #[builder(default, setter(strip_option))]
    pub not_ends_with: Option<Vec<String>>,
    /// A list of values that excludes events that match the exact value of the event record field specified as the value of field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notEquals")]
    #[builder(default, setter(strip_option))]
    pub not_equals: Option<Vec<String>>,
    /// A list of values that excludes events that match the first few characters of the event record field specified as the value of field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notStartsWith"
    )]
    #[builder(default, setter(strip_option))]
    pub not_starts_with: Option<Vec<String>>,
    /// A list of values that includes events that match the first few characters of the event record field specified as the value of field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startsWith"
    )]
    #[builder(default, setter(strip_option))]
    pub starts_with: Option<Vec<String>>,
}

/// Reference to a Role in iam to populate cloudWatchLogsRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailForProviderCloudWatchLogsRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TrailForProviderCloudWatchLogsRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailForProviderCloudWatchLogsRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TrailForProviderCloudWatchLogsRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TrailForProviderCloudWatchLogsRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailForProviderCloudWatchLogsRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailForProviderCloudWatchLogsRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate cloudWatchLogsRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailForProviderCloudWatchLogsRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TrailForProviderCloudWatchLogsRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailForProviderCloudWatchLogsRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TrailForProviderCloudWatchLogsRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TrailForProviderCloudWatchLogsRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailForProviderCloudWatchLogsRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailForProviderCloudWatchLogsRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailForProviderEventSelector {
    /// Configuration block for data events. See details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataResource"
    )]
    #[builder(default, setter(strip_option))]
    pub data_resource: Option<Vec<TrailForProviderEventSelectorDataResource>>,
    /// A set of event sources to exclude. Valid values include: kms.amazonaws.com and rdsdata.amazonaws.com. include_management_events must be set totrue to allow this.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludeManagementEventSources"
    )]
    #[builder(default, setter(strip_option))]
    pub exclude_management_event_sources: Option<Vec<String>>,
    /// Whether to include management events for your trail. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includeManagementEvents"
    )]
    #[builder(default, setter(strip_option))]
    pub include_management_events: Option<bool>,
    /// Type of events to log. Valid values are ReadOnly, WriteOnly, All. Default value is All.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "readWriteType"
    )]
    #[builder(default, setter(strip_option))]
    pub read_write_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailForProviderEventSelectorDataResource {
    /// Resource type in which you want to log data events. You can specify only the following value: "AWS::S3::Object", "AWS::Lambda::Function" and "AWS::DynamoDB::Table".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// List of ARN strings or partial ARN strings to specify selectors for data audit events over data resources. ARN list is specific to single-valued type. For example, arn:aws:s3:::<bucket name>/ for all objects in a bucket, arn:aws:s3:::<bucket name>/key for specific objects, arn:aws:lambda for all lambda events within an account, arn:aws:lambda:<region>:<account number>:function:<function name> for a specific Lambda function, arn:aws:dynamodb for all DDB events for all tables within an account, or arn:aws:dynamodb:<region>:<account number>:table/<table name> for a specific DynamoDB table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailForProviderInsightSelector {
    /// Type of insights to log on a trail. Valid values are: ApiCallRateInsight and ApiErrorRateInsight.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "insightType"
    )]
    #[builder(default, setter(strip_option))]
    pub insight_type: Option<String>,
}

/// Reference to a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailForProviderKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TrailForProviderKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailForProviderKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TrailForProviderKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TrailForProviderKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailForProviderKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailForProviderKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailForProviderKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TrailForProviderKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailForProviderKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TrailForProviderKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TrailForProviderKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailForProviderKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailForProviderKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Bucket in s3 to populate s3BucketName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailForProviderS3BucketNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TrailForProviderS3BucketNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailForProviderS3BucketNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TrailForProviderS3BucketNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TrailForProviderS3BucketNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailForProviderS3BucketNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailForProviderS3BucketNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate s3BucketName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailForProviderS3BucketNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TrailForProviderS3BucketNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailForProviderS3BucketNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TrailForProviderS3BucketNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TrailForProviderS3BucketNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailForProviderS3BucketNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailForProviderS3BucketNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailInitProvider {
    /// Specifies an advanced event selector for enabling data event logging. Fields documented below. Conflicts with event_selector.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "advancedEventSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub advanced_event_selector: Option<Vec<TrailInitProviderAdvancedEventSelector>>,
    /// Log group name using an ARN that represents the log group to which CloudTrail logs will be delivered. Note that CloudTrail requires the Log Stream wildcard.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchLogsGroupArn"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_logs_group_arn: Option<String>,
    /// Role for the CloudWatch Logs endpoint to assume to write to a userâ€™s log group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchLogsRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_logs_role_arn: Option<String>,
    /// Reference to a Role in iam to populate cloudWatchLogsRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchLogsRoleArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_logs_role_arn_ref: Option<TrailInitProviderCloudWatchLogsRoleArnRef>,
    /// Selector for a Role in iam to populate cloudWatchLogsRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchLogsRoleArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_logs_role_arn_selector: Option<TrailInitProviderCloudWatchLogsRoleArnSelector>,
    /// Whether log file integrity validation is enabled. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableLogFileValidation"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_log_file_validation: Option<bool>,
    /// Enables logging for the trail. Defaults to true. Setting this to false will pause logging.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableLogging"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_logging: Option<bool>,
    /// Specifies an event selector for enabling data event logging. Fields documented below. Please note the CloudTrail limits when configuring these. Conflicts with advanced_event_selector.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub event_selector: Option<Vec<TrailInitProviderEventSelector>>,
    /// Whether the trail is publishing events from global services such as IAM to the log files. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includeGlobalServiceEvents"
    )]
    #[builder(default, setter(strip_option))]
    pub include_global_service_events: Option<bool>,
    /// Configuration block for identifying unusual operational activity. See details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "insightSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub insight_selector: Option<Vec<TrailInitProviderInsightSelector>>,
    /// Whether the trail is created in the current region or in all regions. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "isMultiRegionTrail"
    )]
    #[builder(default, setter(strip_option))]
    pub is_multi_region_trail: Option<bool>,
    /// Whether the trail is an AWS Organizations trail. Organization trails log events for the master account and all member accounts. Can only be created in the organization master account. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "isOrganizationTrail"
    )]
    #[builder(default, setter(strip_option))]
    pub is_organization_trail: Option<bool>,
    /// KMS key ARN to use to encrypt the logs delivered by CloudTrail.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_id_ref: Option<TrailInitProviderKmsKeyIdRef>,
    /// Selector for a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_id_selector: Option<TrailInitProviderKmsKeyIdSelector>,
    /// Name of the S3 bucket designated for publishing log files.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketName"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_name: Option<String>,
    /// Reference to a Bucket in s3 to populate s3BucketName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_name_ref: Option<TrailInitProviderS3BucketNameRef>,
    /// Selector for a Bucket in s3 to populate s3BucketName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_name_selector: Option<TrailInitProviderS3BucketNameSelector>,
    /// S3 key prefix that follows the name of the bucket you have designated for log file delivery.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3KeyPrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_key_prefix: Option<String>,
    /// Name of the Amazon SNS topic defined for notification of log file delivery.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snsTopicName"
    )]
    #[builder(default, setter(strip_option))]
    pub sns_topic_name: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailInitProviderAdvancedEventSelector {
    /// Specifies the selector statements in an advanced event selector. Fields documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fieldSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub field_selector: Option<Vec<TrailInitProviderAdvancedEventSelectorFieldSelector>>,
    /// Name of the trail.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailInitProviderAdvancedEventSelectorFieldSelector {
    /// A list of values that includes events that match the last few characters of the event record field specified as the value of field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endsWith")]
    #[builder(default, setter(strip_option))]
    pub ends_with: Option<Vec<String>>,
    /// A list of values that includes events that match the exact value of the event record field specified as the value of field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub equals: Option<Vec<String>>,
    /// Field in an event record on which to filter events to be logged. You can specify only the following values: readOnly, eventSource, eventName, eventCategory, resources.type, resources.ARN.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub field: Option<String>,
    /// A list of values that excludes events that match the last few characters of the event record field specified as the value of field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notEndsWith"
    )]
    #[builder(default, setter(strip_option))]
    pub not_ends_with: Option<Vec<String>>,
    /// A list of values that excludes events that match the exact value of the event record field specified as the value of field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notEquals")]
    #[builder(default, setter(strip_option))]
    pub not_equals: Option<Vec<String>>,
    /// A list of values that excludes events that match the first few characters of the event record field specified as the value of field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notStartsWith"
    )]
    #[builder(default, setter(strip_option))]
    pub not_starts_with: Option<Vec<String>>,
    /// A list of values that includes events that match the first few characters of the event record field specified as the value of field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startsWith"
    )]
    #[builder(default, setter(strip_option))]
    pub starts_with: Option<Vec<String>>,
}

/// Reference to a Role in iam to populate cloudWatchLogsRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailInitProviderCloudWatchLogsRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TrailInitProviderCloudWatchLogsRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailInitProviderCloudWatchLogsRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TrailInitProviderCloudWatchLogsRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TrailInitProviderCloudWatchLogsRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailInitProviderCloudWatchLogsRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailInitProviderCloudWatchLogsRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate cloudWatchLogsRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailInitProviderCloudWatchLogsRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TrailInitProviderCloudWatchLogsRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailInitProviderCloudWatchLogsRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TrailInitProviderCloudWatchLogsRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TrailInitProviderCloudWatchLogsRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailInitProviderCloudWatchLogsRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailInitProviderCloudWatchLogsRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailInitProviderEventSelector {
    /// Configuration block for data events. See details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataResource"
    )]
    #[builder(default, setter(strip_option))]
    pub data_resource: Option<Vec<TrailInitProviderEventSelectorDataResource>>,
    /// A set of event sources to exclude. Valid values include: kms.amazonaws.com and rdsdata.amazonaws.com. include_management_events must be set totrue to allow this.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludeManagementEventSources"
    )]
    #[builder(default, setter(strip_option))]
    pub exclude_management_event_sources: Option<Vec<String>>,
    /// Whether to include management events for your trail. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includeManagementEvents"
    )]
    #[builder(default, setter(strip_option))]
    pub include_management_events: Option<bool>,
    /// Type of events to log. Valid values are ReadOnly, WriteOnly, All. Default value is All.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "readWriteType"
    )]
    #[builder(default, setter(strip_option))]
    pub read_write_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailInitProviderEventSelectorDataResource {
    /// Resource type in which you want to log data events. You can specify only the following value: "AWS::S3::Object", "AWS::Lambda::Function" and "AWS::DynamoDB::Table".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// List of ARN strings or partial ARN strings to specify selectors for data audit events over data resources. ARN list is specific to single-valued type. For example, arn:aws:s3:::<bucket name>/ for all objects in a bucket, arn:aws:s3:::<bucket name>/key for specific objects, arn:aws:lambda for all lambda events within an account, arn:aws:lambda:<region>:<account number>:function:<function name> for a specific Lambda function, arn:aws:dynamodb for all DDB events for all tables within an account, or arn:aws:dynamodb:<region>:<account number>:table/<table name> for a specific DynamoDB table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailInitProviderInsightSelector {
    /// Type of insights to log on a trail. Valid values are: ApiCallRateInsight and ApiErrorRateInsight.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "insightType"
    )]
    #[builder(default, setter(strip_option))]
    pub insight_type: Option<String>,
}

/// Reference to a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailInitProviderKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TrailInitProviderKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailInitProviderKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TrailInitProviderKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TrailInitProviderKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailInitProviderKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailInitProviderKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailInitProviderKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TrailInitProviderKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailInitProviderKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TrailInitProviderKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TrailInitProviderKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailInitProviderKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailInitProviderKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Bucket in s3 to populate s3BucketName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailInitProviderS3BucketNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TrailInitProviderS3BucketNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailInitProviderS3BucketNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TrailInitProviderS3BucketNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TrailInitProviderS3BucketNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailInitProviderS3BucketNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailInitProviderS3BucketNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate s3BucketName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailInitProviderS3BucketNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TrailInitProviderS3BucketNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailInitProviderS3BucketNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TrailInitProviderS3BucketNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TrailInitProviderS3BucketNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailInitProviderS3BucketNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailInitProviderS3BucketNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TrailProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TrailProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TrailProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<TrailPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<TrailPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<TrailPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<TrailPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<TrailPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TrailPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// TrailStatus defines the observed state of Trail.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<TrailStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailStatusAtProvider {
    /// Specifies an advanced event selector for enabling data event logging. Fields documented below. Conflicts with event_selector.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "advancedEventSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub advanced_event_selector: Option<Vec<TrailStatusAtProviderAdvancedEventSelector>>,
    /// ARN of the trail.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Log group name using an ARN that represents the log group to which CloudTrail logs will be delivered. Note that CloudTrail requires the Log Stream wildcard.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchLogsGroupArn"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_logs_group_arn: Option<String>,
    /// Role for the CloudWatch Logs endpoint to assume to write to a userâ€™s log group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchLogsRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_logs_role_arn: Option<String>,
    /// Whether log file integrity validation is enabled. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableLogFileValidation"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_log_file_validation: Option<bool>,
    /// Enables logging for the trail. Defaults to true. Setting this to false will pause logging.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableLogging"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_logging: Option<bool>,
    /// Specifies an event selector for enabling data event logging. Fields documented below. Please note the CloudTrail limits when configuring these. Conflicts with advanced_event_selector.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eventSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub event_selector: Option<Vec<TrailStatusAtProviderEventSelector>>,
    /// Region in which the trail was created.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "homeRegion"
    )]
    #[builder(default, setter(strip_option))]
    pub home_region: Option<String>,
    /// ARN of the trail.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Whether the trail is publishing events from global services such as IAM to the log files. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includeGlobalServiceEvents"
    )]
    #[builder(default, setter(strip_option))]
    pub include_global_service_events: Option<bool>,
    /// Configuration block for identifying unusual operational activity. See details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "insightSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub insight_selector: Option<Vec<TrailStatusAtProviderInsightSelector>>,
    /// Whether the trail is created in the current region or in all regions. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "isMultiRegionTrail"
    )]
    #[builder(default, setter(strip_option))]
    pub is_multi_region_trail: Option<bool>,
    /// Whether the trail is an AWS Organizations trail. Organization trails log events for the master account and all member accounts. Can only be created in the organization master account. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "isOrganizationTrail"
    )]
    #[builder(default, setter(strip_option))]
    pub is_organization_trail: Option<bool>,
    /// KMS key ARN to use to encrypt the logs delivered by CloudTrail.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Name of the S3 bucket designated for publishing log files.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketName"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_name: Option<String>,
    /// S3 key prefix that follows the name of the bucket you have designated for log file delivery.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3KeyPrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_key_prefix: Option<String>,
    /// Name of the Amazon SNS topic defined for notification of log file delivery.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snsTopicName"
    )]
    #[builder(default, setter(strip_option))]
    pub sns_topic_name: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailStatusAtProviderAdvancedEventSelector {
    /// Specifies the selector statements in an advanced event selector. Fields documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fieldSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub field_selector: Option<Vec<TrailStatusAtProviderAdvancedEventSelectorFieldSelector>>,
    /// Name of the trail.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailStatusAtProviderAdvancedEventSelectorFieldSelector {
    /// A list of values that includes events that match the last few characters of the event record field specified as the value of field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endsWith")]
    #[builder(default, setter(strip_option))]
    pub ends_with: Option<Vec<String>>,
    /// A list of values that includes events that match the exact value of the event record field specified as the value of field. This is the only valid operator that you can use with the readOnly, eventCategory, and resources.type fields.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub equals: Option<Vec<String>>,
    /// Field in an event record on which to filter events to be logged. You can specify only the following values: readOnly, eventSource, eventName, eventCategory, resources.type, resources.ARN.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub field: Option<String>,
    /// A list of values that excludes events that match the last few characters of the event record field specified as the value of field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notEndsWith"
    )]
    #[builder(default, setter(strip_option))]
    pub not_ends_with: Option<Vec<String>>,
    /// A list of values that excludes events that match the exact value of the event record field specified as the value of field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notEquals")]
    #[builder(default, setter(strip_option))]
    pub not_equals: Option<Vec<String>>,
    /// A list of values that excludes events that match the first few characters of the event record field specified as the value of field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notStartsWith"
    )]
    #[builder(default, setter(strip_option))]
    pub not_starts_with: Option<Vec<String>>,
    /// A list of values that includes events that match the first few characters of the event record field specified as the value of field.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startsWith"
    )]
    #[builder(default, setter(strip_option))]
    pub starts_with: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailStatusAtProviderEventSelector {
    /// Configuration block for data events. See details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataResource"
    )]
    #[builder(default, setter(strip_option))]
    pub data_resource: Option<Vec<TrailStatusAtProviderEventSelectorDataResource>>,
    /// A set of event sources to exclude. Valid values include: kms.amazonaws.com and rdsdata.amazonaws.com. include_management_events must be set totrue to allow this.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludeManagementEventSources"
    )]
    #[builder(default, setter(strip_option))]
    pub exclude_management_event_sources: Option<Vec<String>>,
    /// Whether to include management events for your trail. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includeManagementEvents"
    )]
    #[builder(default, setter(strip_option))]
    pub include_management_events: Option<bool>,
    /// Type of events to log. Valid values are ReadOnly, WriteOnly, All. Default value is All.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "readWriteType"
    )]
    #[builder(default, setter(strip_option))]
    pub read_write_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailStatusAtProviderEventSelectorDataResource {
    /// Resource type in which you want to log data events. You can specify only the following value: "AWS::S3::Object", "AWS::Lambda::Function" and "AWS::DynamoDB::Table".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// List of ARN strings or partial ARN strings to specify selectors for data audit events over data resources. ARN list is specific to single-valued type. For example, arn:aws:s3:::<bucket name>/ for all objects in a bucket, arn:aws:s3:::<bucket name>/key for specific objects, arn:aws:lambda for all lambda events within an account, arn:aws:lambda:<region>:<account number>:function:<function name> for a specific Lambda function, arn:aws:dynamodb for all DDB events for all tables within an account, or arn:aws:dynamodb:<region>:<account number>:table/<table name> for a specific DynamoDB table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct TrailStatusAtProviderInsightSelector {
    /// Type of insights to log on a trail. Valid values are: ApiCallRateInsight and ApiErrorRateInsight.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "insightType"
    )]
    #[builder(default, setter(strip_option))]
    pub insight_type: Option<String>,
}

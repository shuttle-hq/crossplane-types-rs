// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// StageSpec defines the desired state of Stage
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "apigatewayv2.aws.upbound.io",
    version = "v1beta2",
    kind = "Stage",
    plural = "stages"
)]
#[kube(status = "StageStatus")]
pub struct StageSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<StageDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: StageForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<StageInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<StageProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<StagePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<StageWriteConnectionSecretToRef>,
}

/// StageSpec defines the desired state of Stage
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageForProvider {
    /// Settings for logging access in this stage.
    /// Use the aws_api_gateway_account resource to configure permissions for CloudWatch Logging.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessLogSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub access_log_settings: Option<StageForProviderAccessLogSettings>,
    /// API identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiId")]
    #[builder(default, setter(strip_option))]
    pub api_id: Option<String>,
    /// Reference to a API in apigatewayv2 to populate apiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiIdRef")]
    #[builder(default, setter(strip_option))]
    pub api_id_ref: Option<StageForProviderApiIdRef>,
    /// Selector for a API in apigatewayv2 to populate apiId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "apiIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub api_id_selector: Option<StageForProviderApiIdSelector>,
    /// Whether updates to an API automatically trigger a new deployment. Defaults to false. Applicable for HTTP APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoDeploy"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_deploy: Option<bool>,
    /// Identifier of a client certificate for the stage. Use the aws_api_gateway_client_certificate resource to configure a client certificate.
    /// Supported only for WebSocket APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientCertificateId"
    )]
    #[builder(default, setter(strip_option))]
    pub client_certificate_id: Option<String>,
    /// Default route settings for the stage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultRouteSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub default_route_settings: Option<StageForProviderDefaultRouteSettings>,
    /// Deployment identifier of the stage. Use the aws_apigatewayv2_deployment resource to configure a deployment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentId"
    )]
    #[builder(default, setter(strip_option))]
    pub deployment_id: Option<String>,
    /// Reference to a Deployment in apigatewayv2 to populate deploymentId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub deployment_id_ref: Option<StageForProviderDeploymentIdRef>,
    /// Selector for a Deployment in apigatewayv2 to populate deploymentId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub deployment_id_selector: Option<StageForProviderDeploymentIdSelector>,
    /// Description for the stage. Must be less than or equal to 1024 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Route settings for the stage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routeSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub route_settings: Option<Vec<StageForProviderRouteSettings>>,
    /// Map that defines the stage variables for the stage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stageVariables"
    )]
    #[builder(default, setter(strip_option))]
    pub stage_variables: Option<BTreeMap<String, String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

/// Settings for logging access in this stage.
/// Use the aws_api_gateway_account resource to configure permissions for CloudWatch Logging.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageForProviderAccessLogSettings {
    /// ARN of the CloudWatch Logs log group to receive access logs. Any trailing :* is trimmed from the ARN.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationArn"
    )]
    #[builder(default, setter(strip_option))]
    pub destination_arn: Option<String>,
    /// Single line format of the access logs of data. Refer to log settings for HTTP or Websocket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub format: Option<String>,
}

/// Reference to a API in apigatewayv2 to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageForProviderApiIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<StageForProviderApiIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageForProviderApiIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<StageForProviderApiIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<StageForProviderApiIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageForProviderApiIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageForProviderApiIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a API in apigatewayv2 to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageForProviderApiIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<StageForProviderApiIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageForProviderApiIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<StageForProviderApiIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<StageForProviderApiIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageForProviderApiIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageForProviderApiIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Default route settings for the stage.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageForProviderDefaultRouteSettings {
    /// Whether data trace logging is enabled for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
    /// Defaults to false. Supported only for WebSocket APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataTraceEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub data_trace_enabled: Option<bool>,
    /// Whether detailed metrics are enabled for the default route. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "detailedMetricsEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub detailed_metrics_enabled: Option<bool>,
    /// Logging level for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
    /// Valid values: ERROR, INFO, OFF. Defaults to OFF. Supported only for WebSocket APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loggingLevel"
    )]
    #[builder(default, setter(strip_option))]
    pub logging_level: Option<String>,
    /// Throttling burst limit for the default route.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "throttlingBurstLimit"
    )]
    #[builder(default, setter(strip_option))]
    pub throttling_burst_limit: Option<f64>,
    /// Throttling rate limit for the default route.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "throttlingRateLimit"
    )]
    #[builder(default, setter(strip_option))]
    pub throttling_rate_limit: Option<f64>,
}

/// Reference to a Deployment in apigatewayv2 to populate deploymentId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageForProviderDeploymentIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<StageForProviderDeploymentIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageForProviderDeploymentIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<StageForProviderDeploymentIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<StageForProviderDeploymentIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageForProviderDeploymentIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageForProviderDeploymentIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Deployment in apigatewayv2 to populate deploymentId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageForProviderDeploymentIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<StageForProviderDeploymentIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageForProviderDeploymentIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<StageForProviderDeploymentIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<StageForProviderDeploymentIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageForProviderDeploymentIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageForProviderDeploymentIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageForProviderRouteSettings {
    /// Whether data trace logging is enabled for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
    /// Defaults to false. Supported only for WebSocket APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataTraceEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub data_trace_enabled: Option<bool>,
    /// Whether detailed metrics are enabled for the route. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "detailedMetricsEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub detailed_metrics_enabled: Option<bool>,
    /// Logging level for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
    /// Valid values: ERROR, INFO, OFF. Defaults to OFF. Supported only for WebSocket APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loggingLevel"
    )]
    #[builder(default, setter(strip_option))]
    pub logging_level: Option<String>,
    /// Route key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeKey")]
    #[builder(default, setter(strip_option))]
    pub route_key: Option<String>,
    /// Throttling burst limit for the route.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "throttlingBurstLimit"
    )]
    #[builder(default, setter(strip_option))]
    pub throttling_burst_limit: Option<f64>,
    /// Throttling rate limit for the route.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "throttlingRateLimit"
    )]
    #[builder(default, setter(strip_option))]
    pub throttling_rate_limit: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageInitProvider {
    /// Settings for logging access in this stage.
    /// Use the aws_api_gateway_account resource to configure permissions for CloudWatch Logging.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessLogSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub access_log_settings: Option<StageInitProviderAccessLogSettings>,
    /// API identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiId")]
    #[builder(default, setter(strip_option))]
    pub api_id: Option<String>,
    /// Reference to a API in apigatewayv2 to populate apiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiIdRef")]
    #[builder(default, setter(strip_option))]
    pub api_id_ref: Option<StageInitProviderApiIdRef>,
    /// Selector for a API in apigatewayv2 to populate apiId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "apiIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub api_id_selector: Option<StageInitProviderApiIdSelector>,
    /// Whether updates to an API automatically trigger a new deployment. Defaults to false. Applicable for HTTP APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoDeploy"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_deploy: Option<bool>,
    /// Identifier of a client certificate for the stage. Use the aws_api_gateway_client_certificate resource to configure a client certificate.
    /// Supported only for WebSocket APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientCertificateId"
    )]
    #[builder(default, setter(strip_option))]
    pub client_certificate_id: Option<String>,
    /// Default route settings for the stage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultRouteSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub default_route_settings: Option<StageInitProviderDefaultRouteSettings>,
    /// Deployment identifier of the stage. Use the aws_apigatewayv2_deployment resource to configure a deployment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentId"
    )]
    #[builder(default, setter(strip_option))]
    pub deployment_id: Option<String>,
    /// Reference to a Deployment in apigatewayv2 to populate deploymentId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub deployment_id_ref: Option<StageInitProviderDeploymentIdRef>,
    /// Selector for a Deployment in apigatewayv2 to populate deploymentId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub deployment_id_selector: Option<StageInitProviderDeploymentIdSelector>,
    /// Description for the stage. Must be less than or equal to 1024 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Route settings for the stage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routeSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub route_settings: Option<Vec<StageInitProviderRouteSettings>>,
    /// Map that defines the stage variables for the stage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stageVariables"
    )]
    #[builder(default, setter(strip_option))]
    pub stage_variables: Option<BTreeMap<String, String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

/// Settings for logging access in this stage.
/// Use the aws_api_gateway_account resource to configure permissions for CloudWatch Logging.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageInitProviderAccessLogSettings {
    /// ARN of the CloudWatch Logs log group to receive access logs. Any trailing :* is trimmed from the ARN.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationArn"
    )]
    #[builder(default, setter(strip_option))]
    pub destination_arn: Option<String>,
    /// Single line format of the access logs of data. Refer to log settings for HTTP or Websocket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub format: Option<String>,
}

/// Reference to a API in apigatewayv2 to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageInitProviderApiIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<StageInitProviderApiIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageInitProviderApiIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<StageInitProviderApiIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<StageInitProviderApiIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageInitProviderApiIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageInitProviderApiIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a API in apigatewayv2 to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageInitProviderApiIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<StageInitProviderApiIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageInitProviderApiIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<StageInitProviderApiIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<StageInitProviderApiIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageInitProviderApiIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageInitProviderApiIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Default route settings for the stage.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageInitProviderDefaultRouteSettings {
    /// Whether data trace logging is enabled for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
    /// Defaults to false. Supported only for WebSocket APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataTraceEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub data_trace_enabled: Option<bool>,
    /// Whether detailed metrics are enabled for the default route. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "detailedMetricsEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub detailed_metrics_enabled: Option<bool>,
    /// Logging level for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
    /// Valid values: ERROR, INFO, OFF. Defaults to OFF. Supported only for WebSocket APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loggingLevel"
    )]
    #[builder(default, setter(strip_option))]
    pub logging_level: Option<String>,
    /// Throttling burst limit for the default route.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "throttlingBurstLimit"
    )]
    #[builder(default, setter(strip_option))]
    pub throttling_burst_limit: Option<f64>,
    /// Throttling rate limit for the default route.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "throttlingRateLimit"
    )]
    #[builder(default, setter(strip_option))]
    pub throttling_rate_limit: Option<f64>,
}

/// Reference to a Deployment in apigatewayv2 to populate deploymentId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageInitProviderDeploymentIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<StageInitProviderDeploymentIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageInitProviderDeploymentIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<StageInitProviderDeploymentIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<StageInitProviderDeploymentIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageInitProviderDeploymentIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageInitProviderDeploymentIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Deployment in apigatewayv2 to populate deploymentId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageInitProviderDeploymentIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<StageInitProviderDeploymentIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageInitProviderDeploymentIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<StageInitProviderDeploymentIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<StageInitProviderDeploymentIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageInitProviderDeploymentIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageInitProviderDeploymentIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageInitProviderRouteSettings {
    /// Whether data trace logging is enabled for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
    /// Defaults to false. Supported only for WebSocket APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataTraceEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub data_trace_enabled: Option<bool>,
    /// Whether detailed metrics are enabled for the route. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "detailedMetricsEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub detailed_metrics_enabled: Option<bool>,
    /// Logging level for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
    /// Valid values: ERROR, INFO, OFF. Defaults to OFF. Supported only for WebSocket APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loggingLevel"
    )]
    #[builder(default, setter(strip_option))]
    pub logging_level: Option<String>,
    /// Route key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeKey")]
    #[builder(default, setter(strip_option))]
    pub route_key: Option<String>,
    /// Throttling burst limit for the route.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "throttlingBurstLimit"
    )]
    #[builder(default, setter(strip_option))]
    pub throttling_burst_limit: Option<f64>,
    /// Throttling rate limit for the route.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "throttlingRateLimit"
    )]
    #[builder(default, setter(strip_option))]
    pub throttling_rate_limit: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<StageProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<StageProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<StageProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StageProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StagePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<StagePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<StagePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StagePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<StagePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StagePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<StagePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<StagePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StagePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StagePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StagePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// StageStatus defines the observed state of Stage.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<StageStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageStatusAtProvider {
    /// Settings for logging access in this stage.
    /// Use the aws_api_gateway_account resource to configure permissions for CloudWatch Logging.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessLogSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub access_log_settings: Option<StageStatusAtProviderAccessLogSettings>,
    /// API identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiId")]
    #[builder(default, setter(strip_option))]
    pub api_id: Option<String>,
    /// ARN of the stage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Whether updates to an API automatically trigger a new deployment. Defaults to false. Applicable for HTTP APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoDeploy"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_deploy: Option<bool>,
    /// Identifier of a client certificate for the stage. Use the aws_api_gateway_client_certificate resource to configure a client certificate.
    /// Supported only for WebSocket APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clientCertificateId"
    )]
    #[builder(default, setter(strip_option))]
    pub client_certificate_id: Option<String>,
    /// Default route settings for the stage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultRouteSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub default_route_settings: Option<StageStatusAtProviderDefaultRouteSettings>,
    /// Deployment identifier of the stage. Use the aws_apigatewayv2_deployment resource to configure a deployment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deploymentId"
    )]
    #[builder(default, setter(strip_option))]
    pub deployment_id: Option<String>,
    /// Description for the stage. Must be less than or equal to 1024 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// ARN prefix to be used in an aws_lambda_permission's source_arn attribute.
    /// For WebSocket APIs this attribute can additionally be used in an aws_iam_policy to authorize access to the @connections API.
    /// See the Amazon API Gateway Developer Guide for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "executionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub execution_arn: Option<String>,
    /// Stage identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// URL to invoke the API pointing to the stage,
    /// e.g., wss://z4675bid1j.execute-api.eu-west-2.amazonaws.com/example-stage, or https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invokeUrl")]
    #[builder(default, setter(strip_option))]
    pub invoke_url: Option<String>,
    /// Route settings for the stage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "routeSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub route_settings: Option<Vec<StageStatusAtProviderRouteSettings>>,
    /// Map that defines the stage variables for the stage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stageVariables"
    )]
    #[builder(default, setter(strip_option))]
    pub stage_variables: Option<BTreeMap<String, String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
}

/// Settings for logging access in this stage.
/// Use the aws_api_gateway_account resource to configure permissions for CloudWatch Logging.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageStatusAtProviderAccessLogSettings {
    /// ARN of the CloudWatch Logs log group to receive access logs. Any trailing :* is trimmed from the ARN.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationArn"
    )]
    #[builder(default, setter(strip_option))]
    pub destination_arn: Option<String>,
    /// Single line format of the access logs of data. Refer to log settings for HTTP or Websocket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub format: Option<String>,
}

/// Default route settings for the stage.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageStatusAtProviderDefaultRouteSettings {
    /// Whether data trace logging is enabled for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
    /// Defaults to false. Supported only for WebSocket APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataTraceEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub data_trace_enabled: Option<bool>,
    /// Whether detailed metrics are enabled for the default route. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "detailedMetricsEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub detailed_metrics_enabled: Option<bool>,
    /// Logging level for the default route. Affects the log entries pushed to Amazon CloudWatch Logs.
    /// Valid values: ERROR, INFO, OFF. Defaults to OFF. Supported only for WebSocket APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loggingLevel"
    )]
    #[builder(default, setter(strip_option))]
    pub logging_level: Option<String>,
    /// Throttling burst limit for the default route.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "throttlingBurstLimit"
    )]
    #[builder(default, setter(strip_option))]
    pub throttling_burst_limit: Option<f64>,
    /// Throttling rate limit for the default route.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "throttlingRateLimit"
    )]
    #[builder(default, setter(strip_option))]
    pub throttling_rate_limit: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct StageStatusAtProviderRouteSettings {
    /// Whether data trace logging is enabled for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
    /// Defaults to false. Supported only for WebSocket APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataTraceEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub data_trace_enabled: Option<bool>,
    /// Whether detailed metrics are enabled for the route. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "detailedMetricsEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub detailed_metrics_enabled: Option<bool>,
    /// Logging level for the route. Affects the log entries pushed to Amazon CloudWatch Logs.
    /// Valid values: ERROR, INFO, OFF. Defaults to OFF. Supported only for WebSocket APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loggingLevel"
    )]
    #[builder(default, setter(strip_option))]
    pub logging_level: Option<String>,
    /// Route key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeKey")]
    #[builder(default, setter(strip_option))]
    pub route_key: Option<String>,
    /// Throttling burst limit for the route.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "throttlingBurstLimit"
    )]
    #[builder(default, setter(strip_option))]
    pub throttling_burst_limit: Option<f64>,
    /// Throttling rate limit for the route.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "throttlingRateLimit"
    )]
    #[builder(default, setter(strip_option))]
    pub throttling_rate_limit: Option<f64>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// AuthorizerSpec defines the desired state of Authorizer
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "apigatewayv2.aws.upbound.io",
    version = "v1beta2",
    kind = "Authorizer",
    plural = "authorizers"
)]
#[kube(status = "AuthorizerStatus")]
pub struct AuthorizerSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<AuthorizerDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: AuthorizerForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<AuthorizerInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<AuthorizerProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<AuthorizerPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<AuthorizerWriteConnectionSecretToRef>,
}

/// AuthorizerSpec defines the desired state of Authorizer
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerForProvider {
    /// API identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiId")]
    #[builder(default, setter(strip_option))]
    pub api_id: Option<String>,
    /// Reference to a API in apigatewayv2 to populate apiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiIdRef")]
    #[builder(default, setter(strip_option))]
    pub api_id_ref: Option<AuthorizerForProviderApiIdRef>,
    /// Selector for a API in apigatewayv2 to populate apiId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "apiIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub api_id_selector: Option<AuthorizerForProviderApiIdSelector>,
    /// Required credentials as an IAM role for API Gateway to invoke the authorizer.
    /// Supported only for REQUEST authorizers.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerCredentialsArn"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_credentials_arn: Option<String>,
    /// Format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
    /// Valid values: 1.0, 2.0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerPayloadFormatVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_payload_format_version: Option<String>,
    /// Time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled.
    /// If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Defaults to 300.
    /// Supported only for HTTP API Lambda authorizers.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerResultTtlInSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_result_ttl_in_seconds: Option<f64>,
    /// Authorizer type. Valid values: JWT, REQUEST.
    /// Specify REQUEST for a Lambda function using incoming request parameters.
    /// For HTTP APIs, specify JWT to use JSON Web Tokens.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerType"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_type: Option<String>,
    /// Authorizer's Uniform Resource Identifier (URI).
    /// For REQUEST authorizers this must be a well-formed Lambda function URI, such as the invoke_arn attribute of the aws_lambda_function resource.
    /// Supported only for REQUEST authorizers. Must be between 1 and 2048 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerUri"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_uri: Option<String>,
    /// Reference to a Function in lambda to populate authorizerUri.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerUriRef"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_uri_ref: Option<AuthorizerForProviderAuthorizerUriRef>,
    /// Selector for a Function in lambda to populate authorizerUri.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerUriSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_uri_selector: Option<AuthorizerForProviderAuthorizerUriSelector>,
    /// Whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy.
    /// Supported only for HTTP APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSimpleResponses"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_simple_responses: Option<bool>,
    /// Identity sources for which authorization is requested.
    /// For REQUEST authorizers the value is a list of one or more mapping expressions of the specified request parameters.
    /// For JWT authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identitySources"
    )]
    #[builder(default, setter(strip_option))]
    pub identity_sources: Option<Vec<String>>,
    /// Configuration of a JWT authorizer. Required for the JWT authorizer type.
    /// Supported only for HTTP APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jwtConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub jwt_configuration: Option<AuthorizerForProviderJwtConfiguration>,
    /// Name of the authorizer. Must be between 1 and 128 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
}

/// Reference to a API in apigatewayv2 to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerForProviderApiIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AuthorizerForProviderApiIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerForProviderApiIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AuthorizerForProviderApiIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AuthorizerForProviderApiIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerForProviderApiIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerForProviderApiIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a API in apigatewayv2 to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerForProviderApiIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AuthorizerForProviderApiIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerForProviderApiIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AuthorizerForProviderApiIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AuthorizerForProviderApiIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerForProviderApiIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerForProviderApiIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Function in lambda to populate authorizerUri.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerForProviderAuthorizerUriRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AuthorizerForProviderAuthorizerUriRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerForProviderAuthorizerUriRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AuthorizerForProviderAuthorizerUriRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AuthorizerForProviderAuthorizerUriRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerForProviderAuthorizerUriRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerForProviderAuthorizerUriRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Function in lambda to populate authorizerUri.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerForProviderAuthorizerUriSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AuthorizerForProviderAuthorizerUriSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerForProviderAuthorizerUriSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AuthorizerForProviderAuthorizerUriSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AuthorizerForProviderAuthorizerUriSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerForProviderAuthorizerUriSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerForProviderAuthorizerUriSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration of a JWT authorizer. Required for the JWT authorizer type.
/// Supported only for HTTP APIs.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerForProviderJwtConfiguration {
    /// List of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub audience: Option<Vec<String>>,
    /// Base domain of the identity provider that issues JSON Web Tokens, such as the endpoint attribute of the aws_cognito_user_pool resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub issuer: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerInitProvider {
    /// API identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiId")]
    #[builder(default, setter(strip_option))]
    pub api_id: Option<String>,
    /// Reference to a API in apigatewayv2 to populate apiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiIdRef")]
    #[builder(default, setter(strip_option))]
    pub api_id_ref: Option<AuthorizerInitProviderApiIdRef>,
    /// Selector for a API in apigatewayv2 to populate apiId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "apiIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub api_id_selector: Option<AuthorizerInitProviderApiIdSelector>,
    /// Required credentials as an IAM role for API Gateway to invoke the authorizer.
    /// Supported only for REQUEST authorizers.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerCredentialsArn"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_credentials_arn: Option<String>,
    /// Format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
    /// Valid values: 1.0, 2.0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerPayloadFormatVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_payload_format_version: Option<String>,
    /// Time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled.
    /// If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Defaults to 300.
    /// Supported only for HTTP API Lambda authorizers.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerResultTtlInSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_result_ttl_in_seconds: Option<f64>,
    /// Authorizer type. Valid values: JWT, REQUEST.
    /// Specify REQUEST for a Lambda function using incoming request parameters.
    /// For HTTP APIs, specify JWT to use JSON Web Tokens.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerType"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_type: Option<String>,
    /// Authorizer's Uniform Resource Identifier (URI).
    /// For REQUEST authorizers this must be a well-formed Lambda function URI, such as the invoke_arn attribute of the aws_lambda_function resource.
    /// Supported only for REQUEST authorizers. Must be between 1 and 2048 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerUri"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_uri: Option<String>,
    /// Reference to a Function in lambda to populate authorizerUri.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerUriRef"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_uri_ref: Option<AuthorizerInitProviderAuthorizerUriRef>,
    /// Selector for a Function in lambda to populate authorizerUri.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerUriSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_uri_selector: Option<AuthorizerInitProviderAuthorizerUriSelector>,
    /// Whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy.
    /// Supported only for HTTP APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSimpleResponses"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_simple_responses: Option<bool>,
    /// Identity sources for which authorization is requested.
    /// For REQUEST authorizers the value is a list of one or more mapping expressions of the specified request parameters.
    /// For JWT authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identitySources"
    )]
    #[builder(default, setter(strip_option))]
    pub identity_sources: Option<Vec<String>>,
    /// Configuration of a JWT authorizer. Required for the JWT authorizer type.
    /// Supported only for HTTP APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jwtConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub jwt_configuration: Option<AuthorizerInitProviderJwtConfiguration>,
    /// Name of the authorizer. Must be between 1 and 128 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
}

/// Reference to a API in apigatewayv2 to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerInitProviderApiIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AuthorizerInitProviderApiIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerInitProviderApiIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AuthorizerInitProviderApiIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AuthorizerInitProviderApiIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerInitProviderApiIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerInitProviderApiIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a API in apigatewayv2 to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerInitProviderApiIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AuthorizerInitProviderApiIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerInitProviderApiIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AuthorizerInitProviderApiIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AuthorizerInitProviderApiIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerInitProviderApiIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerInitProviderApiIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Function in lambda to populate authorizerUri.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerInitProviderAuthorizerUriRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AuthorizerInitProviderAuthorizerUriRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerInitProviderAuthorizerUriRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AuthorizerInitProviderAuthorizerUriRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AuthorizerInitProviderAuthorizerUriRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerInitProviderAuthorizerUriRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerInitProviderAuthorizerUriRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Function in lambda to populate authorizerUri.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerInitProviderAuthorizerUriSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AuthorizerInitProviderAuthorizerUriSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerInitProviderAuthorizerUriSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AuthorizerInitProviderAuthorizerUriSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AuthorizerInitProviderAuthorizerUriSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerInitProviderAuthorizerUriSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerInitProviderAuthorizerUriSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration of a JWT authorizer. Required for the JWT authorizer type.
/// Supported only for HTTP APIs.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerInitProviderJwtConfiguration {
    /// List of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub audience: Option<Vec<String>>,
    /// Base domain of the identity provider that issues JSON Web Tokens, such as the endpoint attribute of the aws_cognito_user_pool resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub issuer: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AuthorizerProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AuthorizerProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AuthorizerProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<AuthorizerPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<AuthorizerPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AuthorizerPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AuthorizerPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AuthorizerPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AuthorizerPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// AuthorizerStatus defines the observed state of Authorizer.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<AuthorizerStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerStatusAtProvider {
    /// API identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiId")]
    #[builder(default, setter(strip_option))]
    pub api_id: Option<String>,
    /// Required credentials as an IAM role for API Gateway to invoke the authorizer.
    /// Supported only for REQUEST authorizers.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerCredentialsArn"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_credentials_arn: Option<String>,
    /// Format of the payload sent to an HTTP API Lambda authorizer. Required for HTTP API Lambda authorizers.
    /// Valid values: 1.0, 2.0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerPayloadFormatVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_payload_format_version: Option<String>,
    /// Time to live (TTL) for cached authorizer results, in seconds. If it equals 0, authorization caching is disabled.
    /// If it is greater than 0, API Gateway caches authorizer responses. The maximum value is 3600, or 1 hour. Defaults to 300.
    /// Supported only for HTTP API Lambda authorizers.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerResultTtlInSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_result_ttl_in_seconds: Option<f64>,
    /// Authorizer type. Valid values: JWT, REQUEST.
    /// Specify REQUEST for a Lambda function using incoming request parameters.
    /// For HTTP APIs, specify JWT to use JSON Web Tokens.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerType"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_type: Option<String>,
    /// Authorizer's Uniform Resource Identifier (URI).
    /// For REQUEST authorizers this must be a well-formed Lambda function URI, such as the invoke_arn attribute of the aws_lambda_function resource.
    /// Supported only for REQUEST authorizers. Must be between 1 and 2048 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authorizerUri"
    )]
    #[builder(default, setter(strip_option))]
    pub authorizer_uri: Option<String>,
    /// Whether a Lambda authorizer returns a response in a simple format. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy.
    /// Supported only for HTTP APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableSimpleResponses"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_simple_responses: Option<bool>,
    /// Authorizer identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Identity sources for which authorization is requested.
    /// For REQUEST authorizers the value is a list of one or more mapping expressions of the specified request parameters.
    /// For JWT authorizers the single entry specifies where to extract the JSON Web Token (JWT) from inbound requests.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identitySources"
    )]
    #[builder(default, setter(strip_option))]
    pub identity_sources: Option<Vec<String>>,
    /// Configuration of a JWT authorizer. Required for the JWT authorizer type.
    /// Supported only for HTTP APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jwtConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub jwt_configuration: Option<AuthorizerStatusAtProviderJwtConfiguration>,
    /// Name of the authorizer. Must be between 1 and 128 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
}

/// Configuration of a JWT authorizer. Required for the JWT authorizer type.
/// Supported only for HTTP APIs.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AuthorizerStatusAtProviderJwtConfiguration {
    /// List of the intended recipients of the JWT. A valid JWT must provide an aud that matches at least one entry in this list.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub audience: Option<Vec<String>>,
    /// Base domain of the identity provider that issues JSON Web Tokens, such as the endpoint attribute of the aws_cognito_user_pool resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub issuer: Option<String>,
}

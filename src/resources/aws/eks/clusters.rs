// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ClusterSpec defines the desired state of Cluster
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "eks.aws.upbound.io",
    version = "v1beta2",
    kind = "Cluster",
    plural = "clusters"
)]
#[kube(status = "ClusterStatus")]
pub struct ClusterSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<ClusterDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ClusterForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<ClusterInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<ClusterProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<ClusterPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<ClusterWriteConnectionSecretToRef>,
}

/// ClusterSpec defines the desired state of Cluster
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProvider {
    /// Configuration block for the access config associated with your cluster, see Amazon EKS Access Entries.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub access_config: Option<ClusterForProviderAccessConfig>,
    /// Install default unmanaged add-ons, such as aws-cni, kube-proxy, and CoreDNS during cluster creation. If false, you must manually install desired add-ons. Changing this value will force a new cluster to be created. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bootstrapSelfManagedAddons"
    )]
    #[builder(default, setter(strip_option))]
    pub bootstrap_self_managed_addons: Option<bool>,
    /// Configuration block with compute configuration for EKS Auto Mode. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "computeConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub compute_config: Option<ClusterForProviderComputeConfig>,
    /// List of the desired control plane logging to enable. For more information, see Amazon EKS Control Plane Logging.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enabledClusterLogTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub enabled_cluster_log_types: Option<Vec<String>>,
    /// Configuration block with encryption configuration for the cluster. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_config: Option<ClusterForProviderEncryptionConfig>,
    /// Configuration block with kubernetes network configuration for the cluster. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kubernetesNetworkConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub kubernetes_network_config: Option<ClusterForProviderKubernetesNetworkConfig>,
    /// Configuration block representing the configuration of your local Amazon EKS cluster on an AWS Outpost. This block isn't available for creating Amazon EKS clusters on the AWS cloud.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outpostConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub outpost_config: Option<ClusterForProviderOutpostConfig>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Configuration block with remote network configuration for EKS Hybrid Nodes. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "remoteNetworkConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub remote_network_config: Option<ClusterForProviderRemoteNetworkConfig>,
    /// ARN of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf. Ensure the resource configuration includes explicit dependencies on the IAM Role permissions by adding depends_on if using the aws_iam_role_policy resource or aws_iam_role_policy_attachment resource, otherwise EKS cannot delete EKS managed EC2 infrastructure such as Security Groups on EKS Cluster deletion.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default, setter(strip_option))]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub role_arn_ref: Option<ClusterForProviderRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub role_arn_selector: Option<ClusterForProviderRoleArnSelector>,
    /// Configuration block with storage configuration for EKS Auto Mode. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub storage_config: Option<ClusterForProviderStorageConfig>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Configuration block for the support policy to use for the cluster.  See upgrade_policy for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "upgradePolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub upgrade_policy: Option<ClusterForProviderUpgradePolicy>,
    /// –  Desired Kubernetes master version. If you do not specify a value, the latest available version at resource creation is used and no upgrades will occur except those automatically triggered by EKS. The value must be configured and increased to upgrade the version when desired. Downgrades are not supported by EKS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
    /// Configuration block for the VPC associated with your cluster. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see Cluster VPC Considerations and Cluster Security Group Considerations in the Amazon EKS User Guide. Detailed below. Also contains attributes detailed in the Attributes section.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConfig")]
    #[builder(default, setter(strip_option))]
    pub vpc_config: Option<ClusterForProviderVpcConfig>,
    /// Configuration block with zonal shift configuration for the cluster. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "zonalShiftConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub zonal_shift_config: Option<ClusterForProviderZonalShiftConfig>,
}

/// Configuration block for the access config associated with your cluster, see Amazon EKS Access Entries.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderAccessConfig {
    /// The authentication mode for the cluster. Valid values are CONFIG_MAP, API or API_AND_CONFIG_MAP
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authenticationMode"
    )]
    #[builder(default, setter(strip_option))]
    pub authentication_mode: Option<String>,
    /// Whether or not to bootstrap the access config values to the cluster. Default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bootstrapClusterCreatorAdminPermissions"
    )]
    #[builder(default, setter(strip_option))]
    pub bootstrap_cluster_creator_admin_permissions: Option<bool>,
}

/// Configuration block with compute configuration for EKS Auto Mode. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderComputeConfig {
    /// Request to enable or disable the compute capability on your EKS Auto Mode cluster. If the compute capability is enabled, EKS Auto Mode will create and delete EC2 Managed Instances in your Amazon Web Services account.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// Configuration for node pools that defines the compute resources for your EKS Auto Mode cluster. Valid options are general-purpose and system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePools")]
    #[builder(default, setter(strip_option))]
    pub node_pools: Option<Vec<String>>,
    /// The ARN of the IAM Role EKS will assign to EC2 Managed Instances in your EKS Auto Mode cluster. This value cannot be changed after the compute capability of EKS Auto Mode is enabled..
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nodeRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub node_role_arn: Option<String>,
}

/// Configuration block with encryption configuration for the cluster. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderEncryptionConfig {
    /// Configuration block with provider for encryption. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub provider: Option<ClusterForProviderEncryptionConfigProvider>,
    /// List of strings with resources to be encrypted. Valid values: secrets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resources: Option<Vec<String>>,
}

/// Configuration block with provider for encryption. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderEncryptionConfigProvider {
    /// ARN of the Key Management Service (KMS) customer master key (CMK). The CMK must be symmetric, created in the same region as the cluster, and if the CMK was created in a different account, the user must have access to the CMK. For more information, see Allowing Users in Other Accounts to Use a CMK in the AWS Key Management Service Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyArn")]
    #[builder(default, setter(strip_option))]
    pub key_arn: Option<String>,
}

/// Configuration block with kubernetes network configuration for the cluster. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderKubernetesNetworkConfig {
    /// Configuration block with elastic load balancing configuration for the cluster. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "elasticLoadBalancing"
    )]
    #[builder(default, setter(strip_option))]
    pub elastic_load_balancing:
        Option<ClusterForProviderKubernetesNetworkConfigElasticLoadBalancing>,
    /// The IP family used to assign Kubernetes pod and service addresses. Valid values are ipv4 (default) and ipv6. You can only specify an IP family when you create a cluster, changing this value will force a new cluster to be created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipFamily")]
    #[builder(default, setter(strip_option))]
    pub ip_family: Option<String>,
    /// The CIDR block to assign Kubernetes pod and service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. You can only specify a custom CIDR block when you create a cluster, changing this value will force a new cluster to be created. The block must meet the following requirements:
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceIpv4Cidr"
    )]
    #[builder(default, setter(strip_option))]
    pub service_ipv4_cidr: Option<String>,
}

/// Configuration block with elastic load balancing configuration for the cluster. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderKubernetesNetworkConfigElasticLoadBalancing {
    /// Whether zonal shift is enabled for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
}

/// Configuration block representing the configuration of your local Amazon EKS cluster on an AWS Outpost. This block isn't available for creating Amazon EKS clusters on the AWS cloud.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderOutpostConfig {
    /// The Amazon EC2 instance type that you want to use for your local Amazon EKS cluster on Outposts. The instance type that you specify is used for all Kubernetes control plane instances. The instance type can't be changed after cluster creation. Choose an instance type based on the number of nodes that your cluster will have. If your cluster will have:
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "controlPlaneInstanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub control_plane_instance_type: Option<String>,
    /// An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on AWS Outpost.
    /// The control_plane_placement configuration block supports the following arguments:
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "controlPlanePlacement"
    )]
    #[builder(default, setter(strip_option))]
    pub control_plane_placement: Option<ClusterForProviderOutpostConfigControlPlanePlacement>,
    /// The ARN of the Outpost that you want to use for your local Amazon EKS cluster on Outposts. This argument is a list of arns, but only a single Outpost ARN is supported currently.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outpostArns"
    )]
    #[builder(default, setter(strip_option))]
    pub outpost_arns: Option<Vec<String>>,
}

/// An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on AWS Outpost.
/// The control_plane_placement configuration block supports the following arguments:
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderOutpostConfigControlPlanePlacement {
    /// The name of the placement group for the Kubernetes control plane instances. This setting can't be changed after cluster creation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupName")]
    #[builder(default, setter(strip_option))]
    pub group_name: Option<String>,
}

/// Configuration block with remote network configuration for EKS Hybrid Nodes. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderRemoteNetworkConfig {
    /// Configuration block with remote node network configuration for EKS Hybrid Nodes. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "remoteNodeNetworks"
    )]
    #[builder(default, setter(strip_option))]
    pub remote_node_networks: Option<ClusterForProviderRemoteNetworkConfigRemoteNodeNetworks>,
    /// Configuration block with remote pod network configuration for EKS Hybrid Nodes. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "remotePodNetworks"
    )]
    #[builder(default, setter(strip_option))]
    pub remote_pod_networks: Option<ClusterForProviderRemoteNetworkConfigRemotePodNetworks>,
}

/// Configuration block with remote node network configuration for EKS Hybrid Nodes. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderRemoteNetworkConfigRemoteNodeNetworks {
    /// List of network CIDRs that can contain hybrid nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cidrs: Option<Vec<String>>,
}

/// Configuration block with remote pod network configuration for EKS Hybrid Nodes. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderRemoteNetworkConfigRemotePodNetworks {
    /// List of network CIDRs that can contain pods that run Kubernetes webhooks on hybrid nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cidrs: Option<Vec<String>>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ClusterForProviderRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ClusterForProviderRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ClusterForProviderRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ClusterForProviderRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ClusterForProviderRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ClusterForProviderRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block with storage configuration for EKS Auto Mode. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderStorageConfig {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blockStorage"
    )]
    #[builder(default, setter(strip_option))]
    pub block_storage: Option<ClusterForProviderStorageConfigBlockStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderStorageConfigBlockStorage {
    /// Whether zonal shift is enabled for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
}

/// Configuration block for the support policy to use for the cluster.  See upgrade_policy for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderUpgradePolicy {
    /// Support type to use for the cluster. If the cluster is set to EXTENDED, it will enter extended support at the end of standard support. If the cluster is set to STANDARD, it will be automatically upgraded at the end of standard support. Valid values are EXTENDED, STANDARD
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supportType"
    )]
    #[builder(default, setter(strip_option))]
    pub support_type: Option<String>,
}

/// Configuration block for the VPC associated with your cluster. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see Cluster VPC Considerations and Cluster Security Group Considerations in the Amazon EKS User Guide. Detailed below. Also contains attributes detailed in the Attributes section.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderVpcConfig {
    /// Whether the Amazon EKS private API server endpoint is enabled. Default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointPrivateAccess"
    )]
    #[builder(default, setter(strip_option))]
    pub endpoint_private_access: Option<bool>,
    /// Whether the Amazon EKS public API server endpoint is enabled. Default is true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointPublicAccess"
    )]
    #[builder(default, setter(strip_option))]
    pub endpoint_public_access: Option<bool>,
    /// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint when enabled. EKS defaults this to a list with 0.0.0.0/0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publicAccessCidrs"
    )]
    #[builder(default, setter(strip_option))]
    pub public_access_cidrs: Option<Vec<String>>,
    /// References to SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIdRefs"
    )]
    #[builder(default, setter(strip_option))]
    pub security_group_id_refs: Option<Vec<ClusterForProviderVpcConfigSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub security_group_id_selector: Option<ClusterForProviderVpcConfigSecurityGroupIdSelector>,
    /// account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    #[builder(default, setter(strip_option))]
    pub security_group_ids: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdRefs"
    )]
    #[builder(default, setter(strip_option))]
    pub subnet_id_refs: Option<Vec<ClusterForProviderVpcConfigSubnetIdRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub subnet_id_selector: Option<ClusterForProviderVpcConfigSubnetIdSelector>,
    /// account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default, setter(strip_option))]
    pub subnet_ids: Option<Vec<String>>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderVpcConfigSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ClusterForProviderVpcConfigSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderVpcConfigSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ClusterForProviderVpcConfigSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ClusterForProviderVpcConfigSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderVpcConfigSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderVpcConfigSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderVpcConfigSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ClusterForProviderVpcConfigSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderVpcConfigSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ClusterForProviderVpcConfigSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ClusterForProviderVpcConfigSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderVpcConfigSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderVpcConfigSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderVpcConfigSubnetIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ClusterForProviderVpcConfigSubnetIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderVpcConfigSubnetIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ClusterForProviderVpcConfigSubnetIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ClusterForProviderVpcConfigSubnetIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderVpcConfigSubnetIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderVpcConfigSubnetIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderVpcConfigSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ClusterForProviderVpcConfigSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderVpcConfigSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ClusterForProviderVpcConfigSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ClusterForProviderVpcConfigSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderVpcConfigSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderVpcConfigSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block with zonal shift configuration for the cluster. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterForProviderZonalShiftConfig {
    /// Whether zonal shift is enabled for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProvider {
    /// Configuration block for the access config associated with your cluster, see Amazon EKS Access Entries.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub access_config: Option<ClusterInitProviderAccessConfig>,
    /// Install default unmanaged add-ons, such as aws-cni, kube-proxy, and CoreDNS during cluster creation. If false, you must manually install desired add-ons. Changing this value will force a new cluster to be created. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bootstrapSelfManagedAddons"
    )]
    #[builder(default, setter(strip_option))]
    pub bootstrap_self_managed_addons: Option<bool>,
    /// Configuration block with compute configuration for EKS Auto Mode. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "computeConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub compute_config: Option<ClusterInitProviderComputeConfig>,
    /// List of the desired control plane logging to enable. For more information, see Amazon EKS Control Plane Logging.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enabledClusterLogTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub enabled_cluster_log_types: Option<Vec<String>>,
    /// Configuration block with encryption configuration for the cluster. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_config: Option<ClusterInitProviderEncryptionConfig>,
    /// Configuration block with kubernetes network configuration for the cluster. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kubernetesNetworkConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub kubernetes_network_config: Option<ClusterInitProviderKubernetesNetworkConfig>,
    /// Configuration block representing the configuration of your local Amazon EKS cluster on an AWS Outpost. This block isn't available for creating Amazon EKS clusters on the AWS cloud.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outpostConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub outpost_config: Option<ClusterInitProviderOutpostConfig>,
    /// Configuration block with remote network configuration for EKS Hybrid Nodes. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "remoteNetworkConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub remote_network_config: Option<ClusterInitProviderRemoteNetworkConfig>,
    /// ARN of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf. Ensure the resource configuration includes explicit dependencies on the IAM Role permissions by adding depends_on if using the aws_iam_role_policy resource or aws_iam_role_policy_attachment resource, otherwise EKS cannot delete EKS managed EC2 infrastructure such as Security Groups on EKS Cluster deletion.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default, setter(strip_option))]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub role_arn_ref: Option<ClusterInitProviderRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub role_arn_selector: Option<ClusterInitProviderRoleArnSelector>,
    /// Configuration block with storage configuration for EKS Auto Mode. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub storage_config: Option<ClusterInitProviderStorageConfig>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Configuration block for the support policy to use for the cluster.  See upgrade_policy for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "upgradePolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub upgrade_policy: Option<ClusterInitProviderUpgradePolicy>,
    /// –  Desired Kubernetes master version. If you do not specify a value, the latest available version at resource creation is used and no upgrades will occur except those automatically triggered by EKS. The value must be configured and increased to upgrade the version when desired. Downgrades are not supported by EKS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
    /// Configuration block for the VPC associated with your cluster. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see Cluster VPC Considerations and Cluster Security Group Considerations in the Amazon EKS User Guide. Detailed below. Also contains attributes detailed in the Attributes section.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConfig")]
    #[builder(default, setter(strip_option))]
    pub vpc_config: Option<ClusterInitProviderVpcConfig>,
    /// Configuration block with zonal shift configuration for the cluster. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "zonalShiftConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub zonal_shift_config: Option<ClusterInitProviderZonalShiftConfig>,
}

/// Configuration block for the access config associated with your cluster, see Amazon EKS Access Entries.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderAccessConfig {
    /// The authentication mode for the cluster. Valid values are CONFIG_MAP, API or API_AND_CONFIG_MAP
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authenticationMode"
    )]
    #[builder(default, setter(strip_option))]
    pub authentication_mode: Option<String>,
    /// Whether or not to bootstrap the access config values to the cluster. Default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bootstrapClusterCreatorAdminPermissions"
    )]
    #[builder(default, setter(strip_option))]
    pub bootstrap_cluster_creator_admin_permissions: Option<bool>,
}

/// Configuration block with compute configuration for EKS Auto Mode. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderComputeConfig {
    /// Request to enable or disable the compute capability on your EKS Auto Mode cluster. If the compute capability is enabled, EKS Auto Mode will create and delete EC2 Managed Instances in your Amazon Web Services account.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// Configuration for node pools that defines the compute resources for your EKS Auto Mode cluster. Valid options are general-purpose and system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePools")]
    #[builder(default, setter(strip_option))]
    pub node_pools: Option<Vec<String>>,
    /// The ARN of the IAM Role EKS will assign to EC2 Managed Instances in your EKS Auto Mode cluster. This value cannot be changed after the compute capability of EKS Auto Mode is enabled..
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nodeRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub node_role_arn: Option<String>,
}

/// Configuration block with encryption configuration for the cluster. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderEncryptionConfig {
    /// Configuration block with provider for encryption. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub provider: Option<ClusterInitProviderEncryptionConfigProvider>,
    /// List of strings with resources to be encrypted. Valid values: secrets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resources: Option<Vec<String>>,
}

/// Configuration block with provider for encryption. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderEncryptionConfigProvider {
    /// ARN of the Key Management Service (KMS) customer master key (CMK). The CMK must be symmetric, created in the same region as the cluster, and if the CMK was created in a different account, the user must have access to the CMK. For more information, see Allowing Users in Other Accounts to Use a CMK in the AWS Key Management Service Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyArn")]
    #[builder(default, setter(strip_option))]
    pub key_arn: Option<String>,
}

/// Configuration block with kubernetes network configuration for the cluster. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderKubernetesNetworkConfig {
    /// Configuration block with elastic load balancing configuration for the cluster. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "elasticLoadBalancing"
    )]
    #[builder(default, setter(strip_option))]
    pub elastic_load_balancing:
        Option<ClusterInitProviderKubernetesNetworkConfigElasticLoadBalancing>,
    /// The IP family used to assign Kubernetes pod and service addresses. Valid values are ipv4 (default) and ipv6. You can only specify an IP family when you create a cluster, changing this value will force a new cluster to be created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipFamily")]
    #[builder(default, setter(strip_option))]
    pub ip_family: Option<String>,
    /// The CIDR block to assign Kubernetes pod and service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. You can only specify a custom CIDR block when you create a cluster, changing this value will force a new cluster to be created. The block must meet the following requirements:
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceIpv4Cidr"
    )]
    #[builder(default, setter(strip_option))]
    pub service_ipv4_cidr: Option<String>,
}

/// Configuration block with elastic load balancing configuration for the cluster. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderKubernetesNetworkConfigElasticLoadBalancing {
    /// Whether zonal shift is enabled for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
}

/// Configuration block representing the configuration of your local Amazon EKS cluster on an AWS Outpost. This block isn't available for creating Amazon EKS clusters on the AWS cloud.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderOutpostConfig {
    /// The Amazon EC2 instance type that you want to use for your local Amazon EKS cluster on Outposts. The instance type that you specify is used for all Kubernetes control plane instances. The instance type can't be changed after cluster creation. Choose an instance type based on the number of nodes that your cluster will have. If your cluster will have:
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "controlPlaneInstanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub control_plane_instance_type: Option<String>,
    /// An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on AWS Outpost.
    /// The control_plane_placement configuration block supports the following arguments:
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "controlPlanePlacement"
    )]
    #[builder(default, setter(strip_option))]
    pub control_plane_placement: Option<ClusterInitProviderOutpostConfigControlPlanePlacement>,
    /// The ARN of the Outpost that you want to use for your local Amazon EKS cluster on Outposts. This argument is a list of arns, but only a single Outpost ARN is supported currently.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outpostArns"
    )]
    #[builder(default, setter(strip_option))]
    pub outpost_arns: Option<Vec<String>>,
}

/// An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on AWS Outpost.
/// The control_plane_placement configuration block supports the following arguments:
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderOutpostConfigControlPlanePlacement {
    /// The name of the placement group for the Kubernetes control plane instances. This setting can't be changed after cluster creation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupName")]
    #[builder(default, setter(strip_option))]
    pub group_name: Option<String>,
}

/// Configuration block with remote network configuration for EKS Hybrid Nodes. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderRemoteNetworkConfig {
    /// Configuration block with remote node network configuration for EKS Hybrid Nodes. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "remoteNodeNetworks"
    )]
    #[builder(default, setter(strip_option))]
    pub remote_node_networks: Option<ClusterInitProviderRemoteNetworkConfigRemoteNodeNetworks>,
    /// Configuration block with remote pod network configuration for EKS Hybrid Nodes. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "remotePodNetworks"
    )]
    #[builder(default, setter(strip_option))]
    pub remote_pod_networks: Option<ClusterInitProviderRemoteNetworkConfigRemotePodNetworks>,
}

/// Configuration block with remote node network configuration for EKS Hybrid Nodes. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderRemoteNetworkConfigRemoteNodeNetworks {
    /// List of network CIDRs that can contain hybrid nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cidrs: Option<Vec<String>>,
}

/// Configuration block with remote pod network configuration for EKS Hybrid Nodes. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderRemoteNetworkConfigRemotePodNetworks {
    /// List of network CIDRs that can contain pods that run Kubernetes webhooks on hybrid nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cidrs: Option<Vec<String>>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ClusterInitProviderRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ClusterInitProviderRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ClusterInitProviderRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ClusterInitProviderRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ClusterInitProviderRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ClusterInitProviderRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block with storage configuration for EKS Auto Mode. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderStorageConfig {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blockStorage"
    )]
    #[builder(default, setter(strip_option))]
    pub block_storage: Option<ClusterInitProviderStorageConfigBlockStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderStorageConfigBlockStorage {
    /// Whether zonal shift is enabled for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
}

/// Configuration block for the support policy to use for the cluster.  See upgrade_policy for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderUpgradePolicy {
    /// Support type to use for the cluster. If the cluster is set to EXTENDED, it will enter extended support at the end of standard support. If the cluster is set to STANDARD, it will be automatically upgraded at the end of standard support. Valid values are EXTENDED, STANDARD
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supportType"
    )]
    #[builder(default, setter(strip_option))]
    pub support_type: Option<String>,
}

/// Configuration block for the VPC associated with your cluster. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see Cluster VPC Considerations and Cluster Security Group Considerations in the Amazon EKS User Guide. Detailed below. Also contains attributes detailed in the Attributes section.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderVpcConfig {
    /// Whether the Amazon EKS private API server endpoint is enabled. Default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointPrivateAccess"
    )]
    #[builder(default, setter(strip_option))]
    pub endpoint_private_access: Option<bool>,
    /// Whether the Amazon EKS public API server endpoint is enabled. Default is true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointPublicAccess"
    )]
    #[builder(default, setter(strip_option))]
    pub endpoint_public_access: Option<bool>,
    /// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint when enabled. EKS defaults this to a list with 0.0.0.0/0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publicAccessCidrs"
    )]
    #[builder(default, setter(strip_option))]
    pub public_access_cidrs: Option<Vec<String>>,
    /// References to SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIdRefs"
    )]
    #[builder(default, setter(strip_option))]
    pub security_group_id_refs: Option<Vec<ClusterInitProviderVpcConfigSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub security_group_id_selector: Option<ClusterInitProviderVpcConfigSecurityGroupIdSelector>,
    /// account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    #[builder(default, setter(strip_option))]
    pub security_group_ids: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdRefs"
    )]
    #[builder(default, setter(strip_option))]
    pub subnet_id_refs: Option<Vec<ClusterInitProviderVpcConfigSubnetIdRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub subnet_id_selector: Option<ClusterInitProviderVpcConfigSubnetIdSelector>,
    /// account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default, setter(strip_option))]
    pub subnet_ids: Option<Vec<String>>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderVpcConfigSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ClusterInitProviderVpcConfigSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderVpcConfigSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ClusterInitProviderVpcConfigSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ClusterInitProviderVpcConfigSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderVpcConfigSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderVpcConfigSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderVpcConfigSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ClusterInitProviderVpcConfigSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderVpcConfigSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ClusterInitProviderVpcConfigSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ClusterInitProviderVpcConfigSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderVpcConfigSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderVpcConfigSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderVpcConfigSubnetIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ClusterInitProviderVpcConfigSubnetIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderVpcConfigSubnetIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ClusterInitProviderVpcConfigSubnetIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ClusterInitProviderVpcConfigSubnetIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderVpcConfigSubnetIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderVpcConfigSubnetIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderVpcConfigSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ClusterInitProviderVpcConfigSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderVpcConfigSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ClusterInitProviderVpcConfigSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ClusterInitProviderVpcConfigSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderVpcConfigSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderVpcConfigSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block with zonal shift configuration for the cluster. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterInitProviderZonalShiftConfig {
    /// Whether zonal shift is enabled for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ClusterProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ClusterProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ClusterProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<ClusterPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<ClusterPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ClusterPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ClusterPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ClusterPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ClusterStatus defines the observed state of Cluster.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<ClusterStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProvider {
    /// Configuration block for the access config associated with your cluster, see Amazon EKS Access Entries.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub access_config: Option<ClusterStatusAtProviderAccessConfig>,
    /// ARN of the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Install default unmanaged add-ons, such as aws-cni, kube-proxy, and CoreDNS during cluster creation. If false, you must manually install desired add-ons. Changing this value will force a new cluster to be created. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bootstrapSelfManagedAddons"
    )]
    #[builder(default, setter(strip_option))]
    pub bootstrap_self_managed_addons: Option<bool>,
    /// Attribute block containing certificate-authority-data for your cluster. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthority"
    )]
    #[builder(default, setter(strip_option))]
    pub certificate_authority: Option<Vec<ClusterStatusAtProviderCertificateAuthority>>,
    /// The ID of your local Amazon EKS cluster on the AWS Outpost. This attribute isn't available for an AWS EKS cluster on AWS cloud.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterId")]
    #[builder(default, setter(strip_option))]
    pub cluster_id: Option<String>,
    /// Configuration block with compute configuration for EKS Auto Mode. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "computeConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub compute_config: Option<ClusterStatusAtProviderComputeConfig>,
    /// Unix epoch timestamp in seconds for when the cluster was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdAt")]
    #[builder(default, setter(strip_option))]
    pub created_at: Option<String>,
    /// List of the desired control plane logging to enable. For more information, see Amazon EKS Control Plane Logging.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enabledClusterLogTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub enabled_cluster_log_types: Option<Vec<String>>,
    /// Configuration block with encryption configuration for the cluster. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_config: Option<ClusterStatusAtProviderEncryptionConfig>,
    /// Endpoint for your Kubernetes API server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub endpoint: Option<String>,
    /// Name of the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Attribute block containing identity provider information for your cluster. Only available on Kubernetes version 1.13 and 1.14 clusters created or upgraded on or after September 3, 2019. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub identity: Option<Vec<ClusterStatusAtProviderIdentity>>,
    /// Configuration block with kubernetes network configuration for the cluster. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kubernetesNetworkConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub kubernetes_network_config: Option<ClusterStatusAtProviderKubernetesNetworkConfig>,
    /// Configuration block representing the configuration of your local Amazon EKS cluster on an AWS Outpost. This block isn't available for creating Amazon EKS clusters on the AWS cloud.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outpostConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub outpost_config: Option<ClusterStatusAtProviderOutpostConfig>,
    /// Platform version for the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "platformVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub platform_version: Option<String>,
    /// Configuration block with remote network configuration for EKS Hybrid Nodes. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "remoteNetworkConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub remote_network_config: Option<ClusterStatusAtProviderRemoteNetworkConfig>,
    /// ARN of the IAM role that provides permissions for the Kubernetes control plane to make calls to AWS API operations on your behalf. Ensure the resource configuration includes explicit dependencies on the IAM Role permissions by adding depends_on if using the aws_iam_role_policy resource or aws_iam_role_policy_attachment resource, otherwise EKS cannot delete EKS managed EC2 infrastructure such as Security Groups on EKS Cluster deletion.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default, setter(strip_option))]
    pub role_arn: Option<String>,
    /// Status of the EKS cluster. One of CREATING, ACTIVE, DELETING, FAILED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub status: Option<String>,
    /// Configuration block with storage configuration for EKS Auto Mode. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub storage_config: Option<ClusterStatusAtProviderStorageConfig>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// Configuration block for the support policy to use for the cluster.  See upgrade_policy for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "upgradePolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub upgrade_policy: Option<ClusterStatusAtProviderUpgradePolicy>,
    /// –  Desired Kubernetes master version. If you do not specify a value, the latest available version at resource creation is used and no upgrades will occur except those automatically triggered by EKS. The value must be configured and increased to upgrade the version when desired. Downgrades are not supported by EKS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
    /// Configuration block for the VPC associated with your cluster. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see Cluster VPC Considerations and Cluster Security Group Considerations in the Amazon EKS User Guide. Detailed below. Also contains attributes detailed in the Attributes section.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConfig")]
    #[builder(default, setter(strip_option))]
    pub vpc_config: Option<ClusterStatusAtProviderVpcConfig>,
    /// Configuration block with zonal shift configuration for the cluster. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "zonalShiftConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub zonal_shift_config: Option<ClusterStatusAtProviderZonalShiftConfig>,
}

/// Configuration block for the access config associated with your cluster, see Amazon EKS Access Entries.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderAccessConfig {
    /// The authentication mode for the cluster. Valid values are CONFIG_MAP, API or API_AND_CONFIG_MAP
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authenticationMode"
    )]
    #[builder(default, setter(strip_option))]
    pub authentication_mode: Option<String>,
    /// Whether or not to bootstrap the access config values to the cluster. Default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bootstrapClusterCreatorAdminPermissions"
    )]
    #[builder(default, setter(strip_option))]
    pub bootstrap_cluster_creator_admin_permissions: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderCertificateAuthority {
    /// Base64 encoded certificate data required to communicate with your cluster. Add this to the certificate-authority-data section of the kubeconfig file for your cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub data: Option<String>,
}

/// Configuration block with compute configuration for EKS Auto Mode. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderComputeConfig {
    /// Request to enable or disable the compute capability on your EKS Auto Mode cluster. If the compute capability is enabled, EKS Auto Mode will create and delete EC2 Managed Instances in your Amazon Web Services account.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// Configuration for node pools that defines the compute resources for your EKS Auto Mode cluster. Valid options are general-purpose and system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodePools")]
    #[builder(default, setter(strip_option))]
    pub node_pools: Option<Vec<String>>,
    /// The ARN of the IAM Role EKS will assign to EC2 Managed Instances in your EKS Auto Mode cluster. This value cannot be changed after the compute capability of EKS Auto Mode is enabled..
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "nodeRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub node_role_arn: Option<String>,
}

/// Configuration block with encryption configuration for the cluster. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderEncryptionConfig {
    /// Configuration block with provider for encryption. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub provider: Option<ClusterStatusAtProviderEncryptionConfigProvider>,
    /// List of strings with resources to be encrypted. Valid values: secrets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resources: Option<Vec<String>>,
}

/// Configuration block with provider for encryption. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderEncryptionConfigProvider {
    /// ARN of the Key Management Service (KMS) customer master key (CMK). The CMK must be symmetric, created in the same region as the cluster, and if the CMK was created in a different account, the user must have access to the CMK. For more information, see Allowing Users in Other Accounts to Use a CMK in the AWS Key Management Service Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyArn")]
    #[builder(default, setter(strip_option))]
    pub key_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderIdentity {
    /// Nested block containing OpenID Connect identity provider information for the cluster. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub oidc: Option<Vec<ClusterStatusAtProviderIdentityOidc>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderIdentityOidc {
    /// Issuer URL for the OpenID Connect identity provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub issuer: Option<String>,
}

/// Configuration block with kubernetes network configuration for the cluster. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderKubernetesNetworkConfig {
    /// Configuration block with elastic load balancing configuration for the cluster. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "elasticLoadBalancing"
    )]
    #[builder(default, setter(strip_option))]
    pub elastic_load_balancing:
        Option<ClusterStatusAtProviderKubernetesNetworkConfigElasticLoadBalancing>,
    /// The IP family used to assign Kubernetes pod and service addresses. Valid values are ipv4 (default) and ipv6. You can only specify an IP family when you create a cluster, changing this value will force a new cluster to be created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipFamily")]
    #[builder(default, setter(strip_option))]
    pub ip_family: Option<String>,
    /// The CIDR block to assign Kubernetes pod and service IP addresses from. If you don't specify a block, Kubernetes assigns addresses from either the 10.100.0.0/16 or 172.20.0.0/16 CIDR blocks. We recommend that you specify a block that does not overlap with resources in other networks that are peered or connected to your VPC. You can only specify a custom CIDR block when you create a cluster, changing this value will force a new cluster to be created. The block must meet the following requirements:
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceIpv4Cidr"
    )]
    #[builder(default, setter(strip_option))]
    pub service_ipv4_cidr: Option<String>,
    /// The CIDR block that Kubernetes pod and service IP addresses are assigned from if you specified ipv6 for ip_family when you created the cluster. Kubernetes assigns service addresses from the unique local address range (fc00::/7) because you can't specify a custom IPv6 CIDR block when you create the cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceIpv6Cidr"
    )]
    #[builder(default, setter(strip_option))]
    pub service_ipv6_cidr: Option<String>,
}

/// Configuration block with elastic load balancing configuration for the cluster. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderKubernetesNetworkConfigElasticLoadBalancing {
    /// Whether zonal shift is enabled for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
}

/// Configuration block representing the configuration of your local Amazon EKS cluster on an AWS Outpost. This block isn't available for creating Amazon EKS clusters on the AWS cloud.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderOutpostConfig {
    /// The Amazon EC2 instance type that you want to use for your local Amazon EKS cluster on Outposts. The instance type that you specify is used for all Kubernetes control plane instances. The instance type can't be changed after cluster creation. Choose an instance type based on the number of nodes that your cluster will have. If your cluster will have:
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "controlPlaneInstanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub control_plane_instance_type: Option<String>,
    /// An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on AWS Outpost.
    /// The control_plane_placement configuration block supports the following arguments:
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "controlPlanePlacement"
    )]
    #[builder(default, setter(strip_option))]
    pub control_plane_placement: Option<ClusterStatusAtProviderOutpostConfigControlPlanePlacement>,
    /// The ARN of the Outpost that you want to use for your local Amazon EKS cluster on Outposts. This argument is a list of arns, but only a single Outpost ARN is supported currently.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outpostArns"
    )]
    #[builder(default, setter(strip_option))]
    pub outpost_arns: Option<Vec<String>>,
}

/// An object representing the placement configuration for all the control plane instances of your local Amazon EKS cluster on AWS Outpost.
/// The control_plane_placement configuration block supports the following arguments:
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderOutpostConfigControlPlanePlacement {
    /// The name of the placement group for the Kubernetes control plane instances. This setting can't be changed after cluster creation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupName")]
    #[builder(default, setter(strip_option))]
    pub group_name: Option<String>,
}

/// Configuration block with remote network configuration for EKS Hybrid Nodes. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderRemoteNetworkConfig {
    /// Configuration block with remote node network configuration for EKS Hybrid Nodes. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "remoteNodeNetworks"
    )]
    #[builder(default, setter(strip_option))]
    pub remote_node_networks: Option<ClusterStatusAtProviderRemoteNetworkConfigRemoteNodeNetworks>,
    /// Configuration block with remote pod network configuration for EKS Hybrid Nodes. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "remotePodNetworks"
    )]
    #[builder(default, setter(strip_option))]
    pub remote_pod_networks: Option<ClusterStatusAtProviderRemoteNetworkConfigRemotePodNetworks>,
}

/// Configuration block with remote node network configuration for EKS Hybrid Nodes. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderRemoteNetworkConfigRemoteNodeNetworks {
    /// List of network CIDRs that can contain hybrid nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cidrs: Option<Vec<String>>,
}

/// Configuration block with remote pod network configuration for EKS Hybrid Nodes. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderRemoteNetworkConfigRemotePodNetworks {
    /// List of network CIDRs that can contain pods that run Kubernetes webhooks on hybrid nodes.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cidrs: Option<Vec<String>>,
}

/// Configuration block with storage configuration for EKS Auto Mode. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderStorageConfig {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blockStorage"
    )]
    #[builder(default, setter(strip_option))]
    pub block_storage: Option<ClusterStatusAtProviderStorageConfigBlockStorage>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderStorageConfigBlockStorage {
    /// Whether zonal shift is enabled for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
}

/// Configuration block for the support policy to use for the cluster.  See upgrade_policy for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderUpgradePolicy {
    /// Support type to use for the cluster. If the cluster is set to EXTENDED, it will enter extended support at the end of standard support. If the cluster is set to STANDARD, it will be automatically upgraded at the end of standard support. Valid values are EXTENDED, STANDARD
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supportType"
    )]
    #[builder(default, setter(strip_option))]
    pub support_type: Option<String>,
}

/// Configuration block for the VPC associated with your cluster. Amazon EKS VPC resources have specific requirements to work properly with Kubernetes. For more information, see Cluster VPC Considerations and Cluster Security Group Considerations in the Amazon EKS User Guide. Detailed below. Also contains attributes detailed in the Attributes section.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderVpcConfig {
    /// Cluster security group that was created by Amazon EKS for the cluster. Managed node groups use this security group for control-plane-to-data-plane communication.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "clusterSecurityGroupId"
    )]
    #[builder(default, setter(strip_option))]
    pub cluster_security_group_id: Option<String>,
    /// Whether the Amazon EKS private API server endpoint is enabled. Default is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointPrivateAccess"
    )]
    #[builder(default, setter(strip_option))]
    pub endpoint_private_access: Option<bool>,
    /// Whether the Amazon EKS public API server endpoint is enabled. Default is true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "endpointPublicAccess"
    )]
    #[builder(default, setter(strip_option))]
    pub endpoint_public_access: Option<bool>,
    /// List of CIDR blocks. Indicates which CIDR blocks can access the Amazon EKS public API server endpoint when enabled. EKS defaults this to a list with 0.0.0.0/0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publicAccessCidrs"
    )]
    #[builder(default, setter(strip_option))]
    pub public_access_cidrs: Option<Vec<String>>,
    /// account elastic network interfaces that Amazon EKS creates to use to allow communication between your worker nodes and the Kubernetes control plane.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    #[builder(default, setter(strip_option))]
    pub security_group_ids: Option<Vec<String>>,
    /// account elastic network interfaces in these subnets to allow communication between your worker nodes and the Kubernetes control plane.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    #[builder(default, setter(strip_option))]
    pub subnet_ids: Option<Vec<String>>,
    /// ID of the VPC associated with your cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    #[builder(default, setter(strip_option))]
    pub vpc_id: Option<String>,
}

/// Configuration block with zonal shift configuration for the cluster. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ClusterStatusAtProviderZonalShiftConfig {
    /// Whether zonal shift is enabled for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
}

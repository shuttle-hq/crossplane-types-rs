// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ServiceSpec defines the desired state of Service
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "apprunner.aws.upbound.io",
    version = "v1beta2",
    kind = "Service",
    plural = "services"
)]
#[kube(status = "ServiceStatus")]
pub struct ServiceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<ServiceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ServiceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<ServiceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<ServiceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<ServicePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<ServiceWriteConnectionSecretToRef>,
}

/// ServiceSpec defines the desired state of Service
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProvider {
    /// ARN of an App Runner automatic scaling configuration resource that you want to associate with your service. If not provided, App Runner associates the latest revision of a default auto scaling configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoScalingConfigurationArn"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_scaling_configuration_arn: Option<String>,
    /// (Forces new resource) An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed CMK. See Encryption Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_configuration: Option<ServiceForProviderEncryptionConfiguration>,
    /// Settings of the health check that AWS App Runner performs to monitor the health of your service. See Health Check Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "healthCheckConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub health_check_configuration: Option<ServiceForProviderHealthCheckConfiguration>,
    /// The runtime configuration of instances (scaling units) of the App Runner service. See Instance Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_configuration: Option<ServiceForProviderInstanceConfiguration>,
    /// Configuration settings related to network traffic of the web application that the App Runner service runs. See Network Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub network_configuration: Option<ServiceForProviderNetworkConfiguration>,
    /// The observability configuration of your service. See Observability Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observabilityConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub observability_configuration: Option<ServiceForProviderObservabilityConfiguration>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// (Forces new resource) Name of the service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub service_name: Option<String>,
    /// The source to deploy to the App Runner service. Can be a code or an image repository. See Source Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub source_configuration: Option<ServiceForProviderSourceConfiguration>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

/// (Forces new resource) An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed CMK. See Encryption Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderEncryptionConfiguration {
    /// ARN of the KMS key used for encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKey")]
    #[builder(default, setter(strip_option))]
    pub kms_key: Option<String>,
}

/// Settings of the health check that AWS App Runner performs to monitor the health of your service. See Health Check Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderHealthCheckConfiguration {
    /// Number of consecutive checks that must succeed before App Runner decides that the service is healthy. Defaults to 1. Minimum value of 1. Maximum value of 20.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "healthyThreshold"
    )]
    #[builder(default, setter(strip_option))]
    pub healthy_threshold: Option<f64>,
    /// Time interval, in seconds, between health checks. Defaults to 5. Minimum value of 1. Maximum value of 20.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub interval: Option<f64>,
    /// URL to send requests to for health checks. Defaults to /. Minimum length of 0. Maximum length of 51200.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub path: Option<String>,
    /// IP protocol that App Runner uses to perform health checks for your service. Valid values: TCP, HTTP. Defaults to TCP. If you set protocol to HTTP, App Runner sends health check requests to the HTTP path specified by path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub protocol: Option<String>,
    /// Time, in seconds, to wait for a health check response before deciding it failed. Defaults to 2. Minimum value of  1. Maximum value of 20.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub timeout: Option<f64>,
    /// Number of consecutive checks that must fail before App Runner decides that the service is unhealthy. Defaults to 5. Minimum value of  1. Maximum value of 20.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "unhealthyThreshold"
    )]
    #[builder(default, setter(strip_option))]
    pub unhealthy_threshold: Option<f64>,
}

/// The runtime configuration of instances (scaling units) of the App Runner service. See Instance Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderInstanceConfiguration {
    /// Number of CPU units reserved for each instance of your App Runner service represented as a String. Defaults to 1024. Valid values: 256|512|1024|2048|4096|(0.25|0.5|1|2|4) vCPU.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cpu: Option<String>,
    /// ARN of an IAM role that provides permissions to your App Runner service. These are permissions that your code needs when it calls any AWS APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_role_arn: Option<String>,
    /// Amount of memory, in MB or GB, reserved for each instance of your App Runner service. Defaults to 2048. Valid values: 512|1024|2048|3072|4096|6144|8192|10240|12288|(0.5|1|2|3|4|6|8|10|12) GB.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub memory: Option<String>,
}

/// Configuration settings related to network traffic of the web application that the App Runner service runs. See Network Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderNetworkConfiguration {
    /// Network configuration settings for outbound message traffic. See Egress Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "egressConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub egress_configuration: Option<ServiceForProviderNetworkConfigurationEgressConfiguration>,
    /// Network configuration settings for inbound network traffic. See Ingress Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ingressConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub ingress_configuration: Option<ServiceForProviderNetworkConfigurationIngressConfiguration>,
    /// App Runner provides you with the option to choose between Internet Protocol version 4 (IPv4) and dual stack (IPv4 and IPv6) for your incoming public network configuration. Valid values: IPV4, DUAL_STACK. Default: IPV4.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipAddressType"
    )]
    #[builder(default, setter(strip_option))]
    pub ip_address_type: Option<String>,
}

/// Network configuration settings for outbound message traffic. See Egress Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderNetworkConfigurationEgressConfiguration {
    /// The type of egress configuration. Valid values are: DEFAULT and VPC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "egressType"
    )]
    #[builder(default, setter(strip_option))]
    pub egress_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the App Runner VPC connector that you want to associate with your App Runner service. Only valid when EgressType = VPC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcConnectorArn"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_connector_arn: Option<String>,
    /// Reference to a VPCConnector in apprunner to populate vpcConnectorArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcConnectorArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_connector_arn_ref:
        Option<ServiceForProviderNetworkConfigurationEgressConfigurationVpcConnectorArnRef>,
    /// Selector for a VPCConnector in apprunner to populate vpcConnectorArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcConnectorArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_connector_arn_selector:
        Option<ServiceForProviderNetworkConfigurationEgressConfigurationVpcConnectorArnSelector>,
}

/// Reference to a VPCConnector in apprunner to populate vpcConnectorArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderNetworkConfigurationEgressConfigurationVpcConnectorArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<ServiceForProviderNetworkConfigurationEgressConfigurationVpcConnectorArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderNetworkConfigurationEgressConfigurationVpcConnectorArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<
        ServiceForProviderNetworkConfigurationEgressConfigurationVpcConnectorArnRefPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<
        ServiceForProviderNetworkConfigurationEgressConfigurationVpcConnectorArnRefPolicyResolve,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderNetworkConfigurationEgressConfigurationVpcConnectorArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderNetworkConfigurationEgressConfigurationVpcConnectorArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPCConnector in apprunner to populate vpcConnectorArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderNetworkConfigurationEgressConfigurationVpcConnectorArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        ServiceForProviderNetworkConfigurationEgressConfigurationVpcConnectorArnSelectorPolicy,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderNetworkConfigurationEgressConfigurationVpcConnectorArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ServiceForProviderNetworkConfigurationEgressConfigurationVpcConnectorArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ServiceForProviderNetworkConfigurationEgressConfigurationVpcConnectorArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderNetworkConfigurationEgressConfigurationVpcConnectorArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderNetworkConfigurationEgressConfigurationVpcConnectorArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Network configuration settings for inbound network traffic. See Ingress Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderNetworkConfigurationIngressConfiguration {
    /// Specifies whether your App Runner service is publicly accessible. To make the service publicly accessible set it to True. To make the service privately accessible, from only within an Amazon VPC set it to False.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "isPubliclyAccessible"
    )]
    #[builder(default, setter(strip_option))]
    pub is_publicly_accessible: Option<bool>,
}

/// The observability configuration of your service. See Observability Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderObservabilityConfiguration {
    /// ARN of the observability configuration that is associated with the service. Specified only when observability_enabled is true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observabilityConfigurationArn"
    )]
    #[builder(default, setter(strip_option))]
    pub observability_configuration_arn: Option<String>,
    /// Reference to a ObservabilityConfiguration in apprunner to populate observabilityConfigurationArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observabilityConfigurationArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub observability_configuration_arn_ref:
        Option<ServiceForProviderObservabilityConfigurationObservabilityConfigurationArnRef>,
    /// Selector for a ObservabilityConfiguration in apprunner to populate observabilityConfigurationArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observabilityConfigurationArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub observability_configuration_arn_selector:
        Option<ServiceForProviderObservabilityConfigurationObservabilityConfigurationArnSelector>,
    /// When true, an observability configuration resource is associated with the service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observabilityEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub observability_enabled: Option<bool>,
}

/// Reference to a ObservabilityConfiguration in apprunner to populate observabilityConfigurationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderObservabilityConfigurationObservabilityConfigurationArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<ServiceForProviderObservabilityConfigurationObservabilityConfigurationArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderObservabilityConfigurationObservabilityConfigurationArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ServiceForProviderObservabilityConfigurationObservabilityConfigurationArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ServiceForProviderObservabilityConfigurationObservabilityConfigurationArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderObservabilityConfigurationObservabilityConfigurationArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderObservabilityConfigurationObservabilityConfigurationArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ObservabilityConfiguration in apprunner to populate observabilityConfigurationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderObservabilityConfigurationObservabilityConfigurationArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        ServiceForProviderObservabilityConfigurationObservabilityConfigurationArnSelectorPolicy,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderObservabilityConfigurationObservabilityConfigurationArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ServiceForProviderObservabilityConfigurationObservabilityConfigurationArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ServiceForProviderObservabilityConfigurationObservabilityConfigurationArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderObservabilityConfigurationObservabilityConfigurationArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderObservabilityConfigurationObservabilityConfigurationArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// The source to deploy to the App Runner service. Can be a code or an image repository. See Source Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderSourceConfiguration {
    /// Describes resources needed to authenticate access to some source repositories. See Authentication Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authenticationConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub authentication_configuration:
        Option<ServiceForProviderSourceConfigurationAuthenticationConfiguration>,
    /// Whether continuous integration from the source repository is enabled for the App Runner service. If set to true, each repository change (source code commit or new image version) starts a deployment. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoDeploymentsEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_deployments_enabled: Option<bool>,
    /// Description of a source code repository. See Code Repository below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default, setter(strip_option))]
    pub code_repository: Option<ServiceForProviderSourceConfigurationCodeRepository>,
    /// Description of a source image repository. See Image Repository below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageRepository"
    )]
    #[builder(default, setter(strip_option))]
    pub image_repository: Option<ServiceForProviderSourceConfigurationImageRepository>,
}

/// Describes resources needed to authenticate access to some source repositories. See Authentication Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderSourceConfigurationAuthenticationConfiguration {
    /// ARN of the IAM role that grants the App Runner service access to a source repository. Required for ECR image repositories (but not for ECR Public)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub access_role_arn: Option<String>,
    /// ARN of the App Runner connection that enables the App Runner service to connect to a source repository. Required for GitHub code repositories.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub connection_arn: Option<String>,
    /// Reference to a Connection in apprunner to populate connectionArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub connection_arn_ref:
        Option<ServiceForProviderSourceConfigurationAuthenticationConfigurationConnectionArnRef>,
    /// Selector for a Connection in apprunner to populate connectionArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub connection_arn_selector: Option<
        ServiceForProviderSourceConfigurationAuthenticationConfigurationConnectionArnSelector,
    >,
}

/// Reference to a Connection in apprunner to populate connectionArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderSourceConfigurationAuthenticationConfigurationConnectionArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        ServiceForProviderSourceConfigurationAuthenticationConfigurationConnectionArnRefPolicy,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderSourceConfigurationAuthenticationConfigurationConnectionArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ServiceForProviderSourceConfigurationAuthenticationConfigurationConnectionArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ServiceForProviderSourceConfigurationAuthenticationConfigurationConnectionArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderSourceConfigurationAuthenticationConfigurationConnectionArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderSourceConfigurationAuthenticationConfigurationConnectionArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Connection in apprunner to populate connectionArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderSourceConfigurationAuthenticationConfigurationConnectionArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        ServiceForProviderSourceConfigurationAuthenticationConfigurationConnectionArnSelectorPolicy,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderSourceConfigurationAuthenticationConfigurationConnectionArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ServiceForProviderSourceConfigurationAuthenticationConfigurationConnectionArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ServiceForProviderSourceConfigurationAuthenticationConfigurationConnectionArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderSourceConfigurationAuthenticationConfigurationConnectionArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceForProviderSourceConfigurationAuthenticationConfigurationConnectionArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Description of a source code repository. See Code Repository below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderSourceConfigurationCodeRepository {
    /// Configuration for building and running the service from a source code repository. See Code Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub code_configuration:
        Option<ServiceForProviderSourceConfigurationCodeRepositoryCodeConfiguration>,
    /// Location of the repository that contains the source code.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_url: Option<String>,
    /// Version that should be used within the source code repository. See Source Code Version below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceCodeVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub source_code_version:
        Option<ServiceForProviderSourceConfigurationCodeRepositorySourceCodeVersion>,
    /// The path of the directory that stores source code and configuration files. The build and start commands also execute from here. The path is absolute from root and, if not specified, defaults to the repository root.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceDirectory"
    )]
    #[builder(default, setter(strip_option))]
    pub source_directory: Option<String>,
}

/// Configuration for building and running the service from a source code repository. See Code Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderSourceConfigurationCodeRepositoryCodeConfiguration {
    /// Basic configuration for building and running the App Runner service. Use this parameter to quickly launch an App Runner service without providing an apprunner.yaml file in the source code repository (or ignoring the file if it exists). See Code Configuration Values below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeConfigurationValues"
    )]
    #[builder(default, setter(strip_option))]
    pub code_configuration_values: Option<
        ServiceForProviderSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues,
    >,
    /// Source of the App Runner configuration. Valid values: REPOSITORY, API. Values are interpreted as follows:
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "configurationSource"
    )]
    #[builder(default, setter(strip_option))]
    pub configuration_source: Option<String>,
}

/// Basic configuration for building and running the App Runner service. Use this parameter to quickly launch an App Runner service without providing an apprunner.yaml file in the source code repository (or ignoring the file if it exists). See Code Configuration Values below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues
{
    /// Command App Runner runs to build your application.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "buildCommand"
    )]
    #[builder(default, setter(strip_option))]
    pub build_command: Option<String>,
    /// Port that your application listens to in the container. Defaults to "8080".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub port: Option<String>,
    /// Runtime environment type for building and running an App Runner service. Represents a programming language runtime. Valid values: PYTHON_3, NODEJS_12, NODEJS_14, NODEJS_16, CORRETTO_8, CORRETTO_11, GO_1, DOTNET_6, PHP_81, RUBY_31.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub runtime: Option<String>,
    /// Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimeEnvironmentSecrets"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_environment_secrets: Option<BTreeMap<String, String>>,
    /// Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of AWSAPPRUNNER are reserved for system use and aren't valid.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimeEnvironmentVariables"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_environment_variables: Option<BTreeMap<String, String>>,
    /// Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image’s default start command.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startCommand"
    )]
    #[builder(default, setter(strip_option))]
    pub start_command: Option<String>,
}

/// Version that should be used within the source code repository. See Source Code Version below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderSourceConfigurationCodeRepositorySourceCodeVersion {
    /// Type of version identifier. For a git-based repository, branches represent versions. Valid values: BRANCH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// Source code version. For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Description of a source image repository. See Image Repository below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderSourceConfigurationImageRepository {
    /// Configuration for running the identified image. See Image Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub image_configuration:
        Option<ServiceForProviderSourceConfigurationImageRepositoryImageConfiguration>,
    /// Identifier of an image. For an image in Amazon Elastic Container Registry (Amazon ECR), this is an image name. For the
    /// image name format, see Pulling an image in the Amazon ECR User Guide.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageIdentifier"
    )]
    #[builder(default, setter(strip_option))]
    pub image_identifier: Option<String>,
    /// Type of the image repository. This reflects the repository provider and whether the repository is private or public. Valid values: ECR , ECR_PUBLIC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageRepositoryType"
    )]
    #[builder(default, setter(strip_option))]
    pub image_repository_type: Option<String>,
}

/// Configuration for running the identified image. See Image Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceForProviderSourceConfigurationImageRepositoryImageConfiguration {
    /// Port that your application listens to in the container. Defaults to "8080".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub port: Option<String>,
    /// Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimeEnvironmentSecrets"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_environment_secrets: Option<BTreeMap<String, String>>,
    /// Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of AWSAPPRUNNER are reserved for system use and aren't valid.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimeEnvironmentVariables"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_environment_variables: Option<BTreeMap<String, String>>,
    /// Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image’s default start command.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startCommand"
    )]
    #[builder(default, setter(strip_option))]
    pub start_command: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProvider {
    /// ARN of an App Runner automatic scaling configuration resource that you want to associate with your service. If not provided, App Runner associates the latest revision of a default auto scaling configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoScalingConfigurationArn"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_scaling_configuration_arn: Option<String>,
    /// (Forces new resource) An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed CMK. See Encryption Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_configuration: Option<ServiceInitProviderEncryptionConfiguration>,
    /// Settings of the health check that AWS App Runner performs to monitor the health of your service. See Health Check Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "healthCheckConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub health_check_configuration: Option<ServiceInitProviderHealthCheckConfiguration>,
    /// The runtime configuration of instances (scaling units) of the App Runner service. See Instance Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_configuration: Option<ServiceInitProviderInstanceConfiguration>,
    /// Configuration settings related to network traffic of the web application that the App Runner service runs. See Network Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub network_configuration: Option<ServiceInitProviderNetworkConfiguration>,
    /// The observability configuration of your service. See Observability Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observabilityConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub observability_configuration: Option<ServiceInitProviderObservabilityConfiguration>,
    /// (Forces new resource) Name of the service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub service_name: Option<String>,
    /// The source to deploy to the App Runner service. Can be a code or an image repository. See Source Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub source_configuration: Option<ServiceInitProviderSourceConfiguration>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

/// (Forces new resource) An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed CMK. See Encryption Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderEncryptionConfiguration {
    /// ARN of the KMS key used for encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKey")]
    #[builder(default, setter(strip_option))]
    pub kms_key: Option<String>,
}

/// Settings of the health check that AWS App Runner performs to monitor the health of your service. See Health Check Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderHealthCheckConfiguration {
    /// Number of consecutive checks that must succeed before App Runner decides that the service is healthy. Defaults to 1. Minimum value of 1. Maximum value of 20.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "healthyThreshold"
    )]
    #[builder(default, setter(strip_option))]
    pub healthy_threshold: Option<f64>,
    /// Time interval, in seconds, between health checks. Defaults to 5. Minimum value of 1. Maximum value of 20.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub interval: Option<f64>,
    /// URL to send requests to for health checks. Defaults to /. Minimum length of 0. Maximum length of 51200.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub path: Option<String>,
    /// IP protocol that App Runner uses to perform health checks for your service. Valid values: TCP, HTTP. Defaults to TCP. If you set protocol to HTTP, App Runner sends health check requests to the HTTP path specified by path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub protocol: Option<String>,
    /// Time, in seconds, to wait for a health check response before deciding it failed. Defaults to 2. Minimum value of  1. Maximum value of 20.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub timeout: Option<f64>,
    /// Number of consecutive checks that must fail before App Runner decides that the service is unhealthy. Defaults to 5. Minimum value of  1. Maximum value of 20.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "unhealthyThreshold"
    )]
    #[builder(default, setter(strip_option))]
    pub unhealthy_threshold: Option<f64>,
}

/// The runtime configuration of instances (scaling units) of the App Runner service. See Instance Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderInstanceConfiguration {
    /// Number of CPU units reserved for each instance of your App Runner service represented as a String. Defaults to 1024. Valid values: 256|512|1024|2048|4096|(0.25|0.5|1|2|4) vCPU.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cpu: Option<String>,
    /// ARN of an IAM role that provides permissions to your App Runner service. These are permissions that your code needs when it calls any AWS APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_role_arn: Option<String>,
    /// Amount of memory, in MB or GB, reserved for each instance of your App Runner service. Defaults to 2048. Valid values: 512|1024|2048|3072|4096|6144|8192|10240|12288|(0.5|1|2|3|4|6|8|10|12) GB.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub memory: Option<String>,
}

/// Configuration settings related to network traffic of the web application that the App Runner service runs. See Network Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderNetworkConfiguration {
    /// Network configuration settings for outbound message traffic. See Egress Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "egressConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub egress_configuration: Option<ServiceInitProviderNetworkConfigurationEgressConfiguration>,
    /// Network configuration settings for inbound network traffic. See Ingress Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ingressConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub ingress_configuration: Option<ServiceInitProviderNetworkConfigurationIngressConfiguration>,
    /// App Runner provides you with the option to choose between Internet Protocol version 4 (IPv4) and dual stack (IPv4 and IPv6) for your incoming public network configuration. Valid values: IPV4, DUAL_STACK. Default: IPV4.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipAddressType"
    )]
    #[builder(default, setter(strip_option))]
    pub ip_address_type: Option<String>,
}

/// Network configuration settings for outbound message traffic. See Egress Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderNetworkConfigurationEgressConfiguration {
    /// The type of egress configuration. Valid values are: DEFAULT and VPC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "egressType"
    )]
    #[builder(default, setter(strip_option))]
    pub egress_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the App Runner VPC connector that you want to associate with your App Runner service. Only valid when EgressType = VPC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcConnectorArn"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_connector_arn: Option<String>,
    /// Reference to a VPCConnector in apprunner to populate vpcConnectorArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcConnectorArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_connector_arn_ref:
        Option<ServiceInitProviderNetworkConfigurationEgressConfigurationVpcConnectorArnRef>,
    /// Selector for a VPCConnector in apprunner to populate vpcConnectorArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcConnectorArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_connector_arn_selector:
        Option<ServiceInitProviderNetworkConfigurationEgressConfigurationVpcConnectorArnSelector>,
}

/// Reference to a VPCConnector in apprunner to populate vpcConnectorArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderNetworkConfigurationEgressConfigurationVpcConnectorArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<ServiceInitProviderNetworkConfigurationEgressConfigurationVpcConnectorArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderNetworkConfigurationEgressConfigurationVpcConnectorArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ServiceInitProviderNetworkConfigurationEgressConfigurationVpcConnectorArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ServiceInitProviderNetworkConfigurationEgressConfigurationVpcConnectorArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderNetworkConfigurationEgressConfigurationVpcConnectorArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderNetworkConfigurationEgressConfigurationVpcConnectorArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPCConnector in apprunner to populate vpcConnectorArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderNetworkConfigurationEgressConfigurationVpcConnectorArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        ServiceInitProviderNetworkConfigurationEgressConfigurationVpcConnectorArnSelectorPolicy,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderNetworkConfigurationEgressConfigurationVpcConnectorArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ServiceInitProviderNetworkConfigurationEgressConfigurationVpcConnectorArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ServiceInitProviderNetworkConfigurationEgressConfigurationVpcConnectorArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderNetworkConfigurationEgressConfigurationVpcConnectorArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderNetworkConfigurationEgressConfigurationVpcConnectorArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Network configuration settings for inbound network traffic. See Ingress Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderNetworkConfigurationIngressConfiguration {
    /// Specifies whether your App Runner service is publicly accessible. To make the service publicly accessible set it to True. To make the service privately accessible, from only within an Amazon VPC set it to False.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "isPubliclyAccessible"
    )]
    #[builder(default, setter(strip_option))]
    pub is_publicly_accessible: Option<bool>,
}

/// The observability configuration of your service. See Observability Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderObservabilityConfiguration {
    /// ARN of the observability configuration that is associated with the service. Specified only when observability_enabled is true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observabilityConfigurationArn"
    )]
    #[builder(default, setter(strip_option))]
    pub observability_configuration_arn: Option<String>,
    /// Reference to a ObservabilityConfiguration in apprunner to populate observabilityConfigurationArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observabilityConfigurationArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub observability_configuration_arn_ref:
        Option<ServiceInitProviderObservabilityConfigurationObservabilityConfigurationArnRef>,
    /// Selector for a ObservabilityConfiguration in apprunner to populate observabilityConfigurationArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observabilityConfigurationArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub observability_configuration_arn_selector:
        Option<ServiceInitProviderObservabilityConfigurationObservabilityConfigurationArnSelector>,
    /// When true, an observability configuration resource is associated with the service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observabilityEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub observability_enabled: Option<bool>,
}

/// Reference to a ObservabilityConfiguration in apprunner to populate observabilityConfigurationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderObservabilityConfigurationObservabilityConfigurationArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<ServiceInitProviderObservabilityConfigurationObservabilityConfigurationArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderObservabilityConfigurationObservabilityConfigurationArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ServiceInitProviderObservabilityConfigurationObservabilityConfigurationArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ServiceInitProviderObservabilityConfigurationObservabilityConfigurationArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderObservabilityConfigurationObservabilityConfigurationArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderObservabilityConfigurationObservabilityConfigurationArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a ObservabilityConfiguration in apprunner to populate observabilityConfigurationArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderObservabilityConfigurationObservabilityConfigurationArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        ServiceInitProviderObservabilityConfigurationObservabilityConfigurationArnSelectorPolicy,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderObservabilityConfigurationObservabilityConfigurationArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ServiceInitProviderObservabilityConfigurationObservabilityConfigurationArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ServiceInitProviderObservabilityConfigurationObservabilityConfigurationArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderObservabilityConfigurationObservabilityConfigurationArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderObservabilityConfigurationObservabilityConfigurationArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// The source to deploy to the App Runner service. Can be a code or an image repository. See Source Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderSourceConfiguration {
    /// Describes resources needed to authenticate access to some source repositories. See Authentication Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authenticationConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub authentication_configuration:
        Option<ServiceInitProviderSourceConfigurationAuthenticationConfiguration>,
    /// Whether continuous integration from the source repository is enabled for the App Runner service. If set to true, each repository change (source code commit or new image version) starts a deployment. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoDeploymentsEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_deployments_enabled: Option<bool>,
    /// Description of a source code repository. See Code Repository below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default, setter(strip_option))]
    pub code_repository: Option<ServiceInitProviderSourceConfigurationCodeRepository>,
    /// Description of a source image repository. See Image Repository below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageRepository"
    )]
    #[builder(default, setter(strip_option))]
    pub image_repository: Option<ServiceInitProviderSourceConfigurationImageRepository>,
}

/// Describes resources needed to authenticate access to some source repositories. See Authentication Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderSourceConfigurationAuthenticationConfiguration {
    /// ARN of the IAM role that grants the App Runner service access to a source repository. Required for ECR image repositories (but not for ECR Public)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub access_role_arn: Option<String>,
    /// ARN of the App Runner connection that enables the App Runner service to connect to a source repository. Required for GitHub code repositories.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub connection_arn: Option<String>,
    /// Reference to a Connection in apprunner to populate connectionArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub connection_arn_ref:
        Option<ServiceInitProviderSourceConfigurationAuthenticationConfigurationConnectionArnRef>,
    /// Selector for a Connection in apprunner to populate connectionArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub connection_arn_selector: Option<
        ServiceInitProviderSourceConfigurationAuthenticationConfigurationConnectionArnSelector,
    >,
}

/// Reference to a Connection in apprunner to populate connectionArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderSourceConfigurationAuthenticationConfigurationConnectionArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        ServiceInitProviderSourceConfigurationAuthenticationConfigurationConnectionArnRefPolicy,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderSourceConfigurationAuthenticationConfigurationConnectionArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ServiceInitProviderSourceConfigurationAuthenticationConfigurationConnectionArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ServiceInitProviderSourceConfigurationAuthenticationConfigurationConnectionArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderSourceConfigurationAuthenticationConfigurationConnectionArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderSourceConfigurationAuthenticationConfigurationConnectionArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Connection in apprunner to populate connectionArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderSourceConfigurationAuthenticationConfigurationConnectionArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ServiceInitProviderSourceConfigurationAuthenticationConfigurationConnectionArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderSourceConfigurationAuthenticationConfigurationConnectionArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ServiceInitProviderSourceConfigurationAuthenticationConfigurationConnectionArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ServiceInitProviderSourceConfigurationAuthenticationConfigurationConnectionArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderSourceConfigurationAuthenticationConfigurationConnectionArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceInitProviderSourceConfigurationAuthenticationConfigurationConnectionArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Description of a source code repository. See Code Repository below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderSourceConfigurationCodeRepository {
    /// Configuration for building and running the service from a source code repository. See Code Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub code_configuration:
        Option<ServiceInitProviderSourceConfigurationCodeRepositoryCodeConfiguration>,
    /// Location of the repository that contains the source code.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_url: Option<String>,
    /// Version that should be used within the source code repository. See Source Code Version below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceCodeVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub source_code_version:
        Option<ServiceInitProviderSourceConfigurationCodeRepositorySourceCodeVersion>,
    /// The path of the directory that stores source code and configuration files. The build and start commands also execute from here. The path is absolute from root and, if not specified, defaults to the repository root.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceDirectory"
    )]
    #[builder(default, setter(strip_option))]
    pub source_directory: Option<String>,
}

/// Configuration for building and running the service from a source code repository. See Code Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderSourceConfigurationCodeRepositoryCodeConfiguration {
    /// Basic configuration for building and running the App Runner service. Use this parameter to quickly launch an App Runner service without providing an apprunner.yaml file in the source code repository (or ignoring the file if it exists). See Code Configuration Values below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeConfigurationValues")]
    #[builder(default, setter(strip_option))]
    pub code_configuration_values: Option<ServiceInitProviderSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues>,
    /// Source of the App Runner configuration. Valid values: REPOSITORY, API. Values are interpreted as follows:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configurationSource")]
    #[builder(default, setter(strip_option))]
    pub configuration_source: Option<String>,
}

/// Basic configuration for building and running the App Runner service. Use this parameter to quickly launch an App Runner service without providing an apprunner.yaml file in the source code repository (or ignoring the file if it exists). See Code Configuration Values below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues
{
    /// Command App Runner runs to build your application.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "buildCommand"
    )]
    #[builder(default, setter(strip_option))]
    pub build_command: Option<String>,
    /// Port that your application listens to in the container. Defaults to "8080".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub port: Option<String>,
    /// Runtime environment type for building and running an App Runner service. Represents a programming language runtime. Valid values: PYTHON_3, NODEJS_12, NODEJS_14, NODEJS_16, CORRETTO_8, CORRETTO_11, GO_1, DOTNET_6, PHP_81, RUBY_31.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub runtime: Option<String>,
    /// Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimeEnvironmentSecrets"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_environment_secrets: Option<BTreeMap<String, String>>,
    /// Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of AWSAPPRUNNER are reserved for system use and aren't valid.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimeEnvironmentVariables"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_environment_variables: Option<BTreeMap<String, String>>,
    /// Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image’s default start command.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startCommand"
    )]
    #[builder(default, setter(strip_option))]
    pub start_command: Option<String>,
}

/// Version that should be used within the source code repository. See Source Code Version below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderSourceConfigurationCodeRepositorySourceCodeVersion {
    /// Type of version identifier. For a git-based repository, branches represent versions. Valid values: BRANCH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// Source code version. For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Description of a source image repository. See Image Repository below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderSourceConfigurationImageRepository {
    /// Configuration for running the identified image. See Image Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub image_configuration:
        Option<ServiceInitProviderSourceConfigurationImageRepositoryImageConfiguration>,
    /// Identifier of an image. For an image in Amazon Elastic Container Registry (Amazon ECR), this is an image name. For the
    /// image name format, see Pulling an image in the Amazon ECR User Guide.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageIdentifier"
    )]
    #[builder(default, setter(strip_option))]
    pub image_identifier: Option<String>,
    /// Type of the image repository. This reflects the repository provider and whether the repository is private or public. Valid values: ECR , ECR_PUBLIC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageRepositoryType"
    )]
    #[builder(default, setter(strip_option))]
    pub image_repository_type: Option<String>,
}

/// Configuration for running the identified image. See Image Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceInitProviderSourceConfigurationImageRepositoryImageConfiguration {
    /// Port that your application listens to in the container. Defaults to "8080".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub port: Option<String>,
    /// Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimeEnvironmentSecrets"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_environment_secrets: Option<BTreeMap<String, String>>,
    /// Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of AWSAPPRUNNER are reserved for system use and aren't valid.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimeEnvironmentVariables"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_environment_variables: Option<BTreeMap<String, String>>,
    /// Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image’s default start command.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startCommand"
    )]
    #[builder(default, setter(strip_option))]
    pub start_command: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ServiceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ServiceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ServiceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServicePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<ServicePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<ServicePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServicePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ServicePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServicePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ServicePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ServicePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServicePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServicePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServicePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ServiceStatus defines the observed state of Service.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<ServiceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceStatusAtProvider {
    /// ARN of the App Runner service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// ARN of an App Runner automatic scaling configuration resource that you want to associate with your service. If not provided, App Runner associates the latest revision of a default auto scaling configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoScalingConfigurationArn"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_scaling_configuration_arn: Option<String>,
    /// (Forces new resource) An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed CMK. See Encryption Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_configuration: Option<ServiceStatusAtProviderEncryptionConfiguration>,
    /// Settings of the health check that AWS App Runner performs to monitor the health of your service. See Health Check Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "healthCheckConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub health_check_configuration: Option<ServiceStatusAtProviderHealthCheckConfiguration>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// The runtime configuration of instances (scaling units) of the App Runner service. See Instance Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_configuration: Option<ServiceStatusAtProviderInstanceConfiguration>,
    /// Configuration settings related to network traffic of the web application that the App Runner service runs. See Network Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub network_configuration: Option<ServiceStatusAtProviderNetworkConfiguration>,
    /// The observability configuration of your service. See Observability Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observabilityConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub observability_configuration: Option<ServiceStatusAtProviderObservabilityConfiguration>,
    /// An alphanumeric ID that App Runner generated for this service. Unique within the AWS Region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceId")]
    #[builder(default, setter(strip_option))]
    pub service_id: Option<String>,
    /// (Forces new resource) Name of the service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub service_name: Option<String>,
    /// Subdomain URL that App Runner generated for this service. You can use this URL to access your service web application.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub service_url: Option<String>,
    /// The source to deploy to the App Runner service. Can be a code or an image repository. See Source Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub source_configuration: Option<ServiceStatusAtProviderSourceConfiguration>,
    /// Current state of the App Runner service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub status: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
}

/// (Forces new resource) An optional custom encryption key that App Runner uses to encrypt the copy of your source repository that it maintains and your service logs. By default, App Runner uses an AWS managed CMK. See Encryption Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceStatusAtProviderEncryptionConfiguration {
    /// ARN of the KMS key used for encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKey")]
    #[builder(default, setter(strip_option))]
    pub kms_key: Option<String>,
}

/// Settings of the health check that AWS App Runner performs to monitor the health of your service. See Health Check Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceStatusAtProviderHealthCheckConfiguration {
    /// Number of consecutive checks that must succeed before App Runner decides that the service is healthy. Defaults to 1. Minimum value of 1. Maximum value of 20.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "healthyThreshold"
    )]
    #[builder(default, setter(strip_option))]
    pub healthy_threshold: Option<f64>,
    /// Time interval, in seconds, between health checks. Defaults to 5. Minimum value of 1. Maximum value of 20.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub interval: Option<f64>,
    /// URL to send requests to for health checks. Defaults to /. Minimum length of 0. Maximum length of 51200.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub path: Option<String>,
    /// IP protocol that App Runner uses to perform health checks for your service. Valid values: TCP, HTTP. Defaults to TCP. If you set protocol to HTTP, App Runner sends health check requests to the HTTP path specified by path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub protocol: Option<String>,
    /// Time, in seconds, to wait for a health check response before deciding it failed. Defaults to 2. Minimum value of  1. Maximum value of 20.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub timeout: Option<f64>,
    /// Number of consecutive checks that must fail before App Runner decides that the service is unhealthy. Defaults to 5. Minimum value of  1. Maximum value of 20.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "unhealthyThreshold"
    )]
    #[builder(default, setter(strip_option))]
    pub unhealthy_threshold: Option<f64>,
}

/// The runtime configuration of instances (scaling units) of the App Runner service. See Instance Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceStatusAtProviderInstanceConfiguration {
    /// Number of CPU units reserved for each instance of your App Runner service represented as a String. Defaults to 1024. Valid values: 256|512|1024|2048|4096|(0.25|0.5|1|2|4) vCPU.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cpu: Option<String>,
    /// ARN of an IAM role that provides permissions to your App Runner service. These are permissions that your code needs when it calls any AWS APIs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_role_arn: Option<String>,
    /// Amount of memory, in MB or GB, reserved for each instance of your App Runner service. Defaults to 2048. Valid values: 512|1024|2048|3072|4096|6144|8192|10240|12288|(0.5|1|2|3|4|6|8|10|12) GB.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub memory: Option<String>,
}

/// Configuration settings related to network traffic of the web application that the App Runner service runs. See Network Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceStatusAtProviderNetworkConfiguration {
    /// Network configuration settings for outbound message traffic. See Egress Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "egressConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub egress_configuration:
        Option<ServiceStatusAtProviderNetworkConfigurationEgressConfiguration>,
    /// Network configuration settings for inbound network traffic. See Ingress Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ingressConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub ingress_configuration:
        Option<ServiceStatusAtProviderNetworkConfigurationIngressConfiguration>,
    /// App Runner provides you with the option to choose between Internet Protocol version 4 (IPv4) and dual stack (IPv4 and IPv6) for your incoming public network configuration. Valid values: IPV4, DUAL_STACK. Default: IPV4.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ipAddressType"
    )]
    #[builder(default, setter(strip_option))]
    pub ip_address_type: Option<String>,
}

/// Network configuration settings for outbound message traffic. See Egress Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceStatusAtProviderNetworkConfigurationEgressConfiguration {
    /// The type of egress configuration. Valid values are: DEFAULT and VPC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "egressType"
    )]
    #[builder(default, setter(strip_option))]
    pub egress_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the App Runner VPC connector that you want to associate with your App Runner service. Only valid when EgressType = VPC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcConnectorArn"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_connector_arn: Option<String>,
}

/// Network configuration settings for inbound network traffic. See Ingress Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceStatusAtProviderNetworkConfigurationIngressConfiguration {
    /// Specifies whether your App Runner service is publicly accessible. To make the service publicly accessible set it to True. To make the service privately accessible, from only within an Amazon VPC set it to False.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "isPubliclyAccessible"
    )]
    #[builder(default, setter(strip_option))]
    pub is_publicly_accessible: Option<bool>,
}

/// The observability configuration of your service. See Observability Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceStatusAtProviderObservabilityConfiguration {
    /// ARN of the observability configuration that is associated with the service. Specified only when observability_enabled is true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observabilityConfigurationArn"
    )]
    #[builder(default, setter(strip_option))]
    pub observability_configuration_arn: Option<String>,
    /// When true, an observability configuration resource is associated with the service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observabilityEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub observability_enabled: Option<bool>,
}

/// The source to deploy to the App Runner service. Can be a code or an image repository. See Source Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceStatusAtProviderSourceConfiguration {
    /// Describes resources needed to authenticate access to some source repositories. See Authentication Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "authenticationConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub authentication_configuration:
        Option<ServiceStatusAtProviderSourceConfigurationAuthenticationConfiguration>,
    /// Whether continuous integration from the source repository is enabled for the App Runner service. If set to true, each repository change (source code commit or new image version) starts a deployment. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoDeploymentsEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_deployments_enabled: Option<bool>,
    /// Description of a source code repository. See Code Repository below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default, setter(strip_option))]
    pub code_repository: Option<ServiceStatusAtProviderSourceConfigurationCodeRepository>,
    /// Description of a source image repository. See Image Repository below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageRepository"
    )]
    #[builder(default, setter(strip_option))]
    pub image_repository: Option<ServiceStatusAtProviderSourceConfigurationImageRepository>,
}

/// Describes resources needed to authenticate access to some source repositories. See Authentication Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceStatusAtProviderSourceConfigurationAuthenticationConfiguration {
    /// ARN of the IAM role that grants the App Runner service access to a source repository. Required for ECR image repositories (but not for ECR Public)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub access_role_arn: Option<String>,
    /// ARN of the App Runner connection that enables the App Runner service to connect to a source repository. Required for GitHub code repositories.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "connectionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub connection_arn: Option<String>,
}

/// Description of a source code repository. See Code Repository below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceStatusAtProviderSourceConfigurationCodeRepository {
    /// Configuration for building and running the service from a source code repository. See Code Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub code_configuration:
        Option<ServiceStatusAtProviderSourceConfigurationCodeRepositoryCodeConfiguration>,
    /// Location of the repository that contains the source code.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_url: Option<String>,
    /// Version that should be used within the source code repository. See Source Code Version below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceCodeVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub source_code_version:
        Option<ServiceStatusAtProviderSourceConfigurationCodeRepositorySourceCodeVersion>,
    /// The path of the directory that stores source code and configuration files. The build and start commands also execute from here. The path is absolute from root and, if not specified, defaults to the repository root.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sourceDirectory"
    )]
    #[builder(default, setter(strip_option))]
    pub source_directory: Option<String>,
}

/// Configuration for building and running the service from a source code repository. See Code Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceStatusAtProviderSourceConfigurationCodeRepositoryCodeConfiguration {
    /// Basic configuration for building and running the App Runner service. Use this parameter to quickly launch an App Runner service without providing an apprunner.yaml file in the source code repository (or ignoring the file if it exists). See Code Configuration Values below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeConfigurationValues")]
    #[builder(default, setter(strip_option))]
    pub code_configuration_values: Option<ServiceStatusAtProviderSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues>,
    /// Source of the App Runner configuration. Valid values: REPOSITORY, API. Values are interpreted as follows:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configurationSource")]
    #[builder(default, setter(strip_option))]
    pub configuration_source: Option<String>,
}

/// Basic configuration for building and running the App Runner service. Use this parameter to quickly launch an App Runner service without providing an apprunner.yaml file in the source code repository (or ignoring the file if it exists). See Code Configuration Values below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceStatusAtProviderSourceConfigurationCodeRepositoryCodeConfigurationCodeConfigurationValues
{
    /// Command App Runner runs to build your application.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "buildCommand"
    )]
    #[builder(default, setter(strip_option))]
    pub build_command: Option<String>,
    /// Port that your application listens to in the container. Defaults to "8080".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub port: Option<String>,
    /// Runtime environment type for building and running an App Runner service. Represents a programming language runtime. Valid values: PYTHON_3, NODEJS_12, NODEJS_14, NODEJS_16, CORRETTO_8, CORRETTO_11, GO_1, DOTNET_6, PHP_81, RUBY_31.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub runtime: Option<String>,
    /// Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimeEnvironmentSecrets"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_environment_secrets: Option<BTreeMap<String, String>>,
    /// Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of AWSAPPRUNNER are reserved for system use and aren't valid.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimeEnvironmentVariables"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_environment_variables: Option<BTreeMap<String, String>>,
    /// Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image’s default start command.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startCommand"
    )]
    #[builder(default, setter(strip_option))]
    pub start_command: Option<String>,
}

/// Version that should be used within the source code repository. See Source Code Version below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceStatusAtProviderSourceConfigurationCodeRepositorySourceCodeVersion {
    /// Type of version identifier. For a git-based repository, branches represent versions. Valid values: BRANCH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// Source code version. For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Description of a source image repository. See Image Repository below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceStatusAtProviderSourceConfigurationImageRepository {
    /// Configuration for running the identified image. See Image Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub image_configuration:
        Option<ServiceStatusAtProviderSourceConfigurationImageRepositoryImageConfiguration>,
    /// Identifier of an image. For an image in Amazon Elastic Container Registry (Amazon ECR), this is an image name. For the
    /// image name format, see Pulling an image in the Amazon ECR User Guide.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageIdentifier"
    )]
    #[builder(default, setter(strip_option))]
    pub image_identifier: Option<String>,
    /// Type of the image repository. This reflects the repository provider and whether the repository is private or public. Valid values: ECR , ECR_PUBLIC.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageRepositoryType"
    )]
    #[builder(default, setter(strip_option))]
    pub image_repository_type: Option<String>,
}

/// Configuration for running the identified image. See Image Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ServiceStatusAtProviderSourceConfigurationImageRepositoryImageConfiguration {
    /// Port that your application listens to in the container. Defaults to "8080".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub port: Option<String>,
    /// Secrets and parameters available to your service as environment variables. A map of key/value pairs, where the key is the desired name of the Secret in the environment (i.e. it does not have to match the name of the secret in Secrets Manager or SSM Parameter Store), and the value is the ARN of the secret from AWS Secrets Manager or the ARN of the parameter in AWS SSM Parameter Store.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimeEnvironmentSecrets"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_environment_secrets: Option<BTreeMap<String, String>>,
    /// Environment variables available to your running App Runner service. A map of key/value pairs. Keys with a prefix of AWSAPPRUNNER are reserved for system use and aren't valid.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimeEnvironmentVariables"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_environment_variables: Option<BTreeMap<String, String>>,
    /// Command App Runner runs to start the application in the source image. If specified, this command overrides the Docker image’s default start command.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startCommand"
    )]
    #[builder(default, setter(strip_option))]
    pub start_command: Option<String>,
}

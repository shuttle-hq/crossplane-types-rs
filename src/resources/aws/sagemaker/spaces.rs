// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// SpaceSpec defines the desired state of Space
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "sagemaker.aws.upbound.io",
    version = "v1beta2",
    kind = "Space",
    plural = "spaces"
)]
#[kube(status = "SpaceStatus")]
pub struct SpaceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<SpaceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: SpaceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<SpaceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<SpaceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<SpacePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<SpaceWriteConnectionSecretToRef>,
}

/// SpaceSpec defines the desired state of Space
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpaceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProvider {
    /// The ID of the associated Domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainId")]
    #[builder(default, setter(strip_option))]
    pub domain_id: Option<String>,
    /// Reference to a Domain in sagemaker to populate domainId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub domain_id_ref: Option<SpaceForProviderDomainIdRef>,
    /// Selector for a Domain in sagemaker to populate domainId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub domain_id_selector: Option<SpaceForProviderDomainIdSelector>,
    /// A collection of ownership settings. Required if space_sharing_settings is set. See ownership_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ownershipSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub ownership_settings: Option<SpaceForProviderOwnershipSettings>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The name of the space that appears in the SageMaker Studio UI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spaceDisplayName"
    )]
    #[builder(default, setter(strip_option))]
    pub space_display_name: Option<String>,
    /// The name of the space.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spaceName")]
    #[builder(default, setter(strip_option))]
    pub space_name: Option<String>,
    /// A collection of space settings. See space_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spaceSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub space_settings: Option<SpaceForProviderSpaceSettings>,
    /// A collection of space sharing settings. Required if ownership_settings is set. See space_sharing_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spaceSharingSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub space_sharing_settings: Option<SpaceForProviderSpaceSharingSettings>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

/// Reference to a Domain in sagemaker to populate domainId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderDomainIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SpaceForProviderDomainIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderDomainIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SpaceForProviderDomainIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SpaceForProviderDomainIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpaceForProviderDomainIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpaceForProviderDomainIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Domain in sagemaker to populate domainId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderDomainIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SpaceForProviderDomainIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderDomainIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SpaceForProviderDomainIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SpaceForProviderDomainIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpaceForProviderDomainIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpaceForProviderDomainIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A collection of ownership settings. Required if space_sharing_settings is set. See ownership_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderOwnershipSettings {
    /// The user profile who is the owner of the private space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ownerUserProfileName"
    )]
    #[builder(default, setter(strip_option))]
    pub owner_user_profile_name: Option<String>,
}

/// A collection of space settings. See space_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettings {
    /// The type of app created within the space.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appType")]
    #[builder(default, setter(strip_option))]
    pub app_type: Option<String>,
    /// The Code Editor application settings. See code_editor_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeEditorAppSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub code_editor_app_settings: Option<SpaceForProviderSpaceSettingsCodeEditorAppSettings>,
    /// A file system, created by you, that you assign to a space for an Amazon SageMaker Domain. See custom_file_system Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customFileSystem"
    )]
    #[builder(default, setter(strip_option))]
    pub custom_file_system: Option<Vec<SpaceForProviderSpaceSettingsCustomFileSystem>>,
    /// The settings for the JupyterLab application. See jupyter_lab_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterLabAppSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub jupyter_lab_app_settings: Option<SpaceForProviderSpaceSettingsJupyterLabAppSettings>,
    /// The Jupyter server's app settings. See jupyter_server_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterServerAppSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub jupyter_server_app_settings: Option<SpaceForProviderSpaceSettingsJupyterServerAppSettings>,
    /// The kernel gateway app settings. See kernel_gateway_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kernelGatewayAppSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub kernel_gateway_app_settings: Option<SpaceForProviderSpaceSettingsKernelGatewayAppSettings>,
    /// The storage settings. See space_storage_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spaceStorageSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub space_storage_settings: Option<SpaceForProviderSpaceSettingsSpaceStorageSettings>,
}

/// The Code Editor application settings. See code_editor_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsCodeEditorAppSettings {
    /// Settings that are used to configure and manage the lifecycle of JupyterLab applications in a space. See app_lifecycle_management Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appLifecycleManagement"
    )]
    #[builder(default, setter(strip_option))]
    pub app_lifecycle_management:
        Option<SpaceForProviderSpaceSettingsCodeEditorAppSettingsAppLifecycleManagement>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default, setter(strip_option))]
    pub default_resource_spec:
        Option<SpaceForProviderSpaceSettingsCodeEditorAppSettingsDefaultResourceSpec>,
}

/// Settings that are used to configure and manage the lifecycle of JupyterLab applications in a space. See app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsCodeEditorAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. See idle_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub idle_settings: Option<
        SpaceForProviderSpaceSettingsCodeEditorAppSettingsAppLifecycleManagementIdleSettings,
    >,
}

/// Settings related to idle shutdown of Studio applications. See idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsCodeEditorAppSettingsAppLifecycleManagementIdleSettings {
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleTimeoutInMinutes"
    )]
    #[builder(default, setter(strip_option))]
    pub idle_timeout_in_minutes: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsCodeEditorAppSettingsDefaultResourceSpec {
    /// The instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_config_arn: Option<String>,
    /// The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsCustomFileSystem {
    /// A custom file system in Amazon EFS. See efs_file_system Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "efsFileSystem"
    )]
    #[builder(default, setter(strip_option))]
    pub efs_file_system: Option<SpaceForProviderSpaceSettingsCustomFileSystemEfsFileSystem>,
}

/// A custom file system in Amazon EFS. See efs_file_system Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsCustomFileSystemEfsFileSystem {
    /// The ID of your Amazon EFS file system.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemId"
    )]
    #[builder(default, setter(strip_option))]
    pub file_system_id: Option<String>,
}

/// The settings for the JupyterLab application. See jupyter_lab_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsJupyterLabAppSettings {
    /// Settings that are used to configure and manage the lifecycle of JupyterLab applications in a space. See app_lifecycle_management Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appLifecycleManagement"
    )]
    #[builder(default, setter(strip_option))]
    pub app_lifecycle_management:
        Option<SpaceForProviderSpaceSettingsJupyterLabAppSettingsAppLifecycleManagement>,
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. See code_repository Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default, setter(strip_option))]
    pub code_repository:
        Option<Vec<SpaceForProviderSpaceSettingsJupyterLabAppSettingsCodeRepository>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default, setter(strip_option))]
    pub default_resource_spec:
        Option<SpaceForProviderSpaceSettingsJupyterLabAppSettingsDefaultResourceSpec>,
}

/// Settings that are used to configure and manage the lifecycle of JupyterLab applications in a space. See app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsJupyterLabAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. See idle_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub idle_settings: Option<
        SpaceForProviderSpaceSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings,
    >,
}

/// Settings related to idle shutdown of Studio applications. See idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings {
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleTimeoutInMinutes"
    )]
    #[builder(default, setter(strip_option))]
    pub idle_timeout_in_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsJupyterLabAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_url: Option<String>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsJupyterLabAppSettingsDefaultResourceSpec {
    /// The instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_config_arn: Option<String>,
    /// The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The Jupyter server's app settings. See jupyter_server_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsJupyterServerAppSettings {
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. See code_repository Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default, setter(strip_option))]
    pub code_repository:
        Option<Vec<SpaceForProviderSpaceSettingsJupyterServerAppSettingsCodeRepository>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default, setter(strip_option))]
    pub default_resource_spec:
        Option<SpaceForProviderSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsJupyterServerAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_url: Option<String>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec {
    /// The instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_config_arn: Option<String>,
    /// The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The kernel gateway app settings. See kernel_gateway_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsKernelGatewayAppSettings {
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. See custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default, setter(strip_option))]
    pub custom_image: Option<Vec<SpaceForProviderSpaceSettingsKernelGatewayAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default, setter(strip_option))]
    pub default_resource_spec:
        Option<SpaceForProviderSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsKernelGatewayAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default, setter(strip_option))]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default, setter(strip_option))]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default, setter(strip_option))]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec {
    /// The instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_config_arn: Option<String>,
    /// The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The storage settings. See space_storage_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsSpaceStorageSettings {
    /// A collection of EBS storage settings for a space. See ebs_storage_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsStorageSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub ebs_storage_settings:
        Option<SpaceForProviderSpaceSettingsSpaceStorageSettingsEbsStorageSettings>,
}

/// A collection of EBS storage settings for a space. See ebs_storage_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSettingsSpaceStorageSettingsEbsStorageSettings {
    /// The size of an EBS storage volume for a space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsVolumeSizeInGb"
    )]
    #[builder(default, setter(strip_option))]
    pub ebs_volume_size_in_gb: Option<f64>,
}

/// A collection of space sharing settings. Required if ownership_settings is set. See space_sharing_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceForProviderSpaceSharingSettings {
    /// Specifies the sharing type of the space. Valid values are Private and Shared.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharingType"
    )]
    #[builder(default, setter(strip_option))]
    pub sharing_type: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProvider {
    /// The ID of the associated Domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainId")]
    #[builder(default, setter(strip_option))]
    pub domain_id: Option<String>,
    /// Reference to a Domain in sagemaker to populate domainId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub domain_id_ref: Option<SpaceInitProviderDomainIdRef>,
    /// Selector for a Domain in sagemaker to populate domainId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "domainIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub domain_id_selector: Option<SpaceInitProviderDomainIdSelector>,
    /// A collection of ownership settings. Required if space_sharing_settings is set. See ownership_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ownershipSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub ownership_settings: Option<SpaceInitProviderOwnershipSettings>,
    /// The name of the space that appears in the SageMaker Studio UI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spaceDisplayName"
    )]
    #[builder(default, setter(strip_option))]
    pub space_display_name: Option<String>,
    /// The name of the space.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spaceName")]
    #[builder(default, setter(strip_option))]
    pub space_name: Option<String>,
    /// A collection of space settings. See space_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spaceSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub space_settings: Option<SpaceInitProviderSpaceSettings>,
    /// A collection of space sharing settings. Required if ownership_settings is set. See space_sharing_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spaceSharingSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub space_sharing_settings: Option<SpaceInitProviderSpaceSharingSettings>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

/// Reference to a Domain in sagemaker to populate domainId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderDomainIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SpaceInitProviderDomainIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderDomainIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SpaceInitProviderDomainIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SpaceInitProviderDomainIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpaceInitProviderDomainIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpaceInitProviderDomainIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Domain in sagemaker to populate domainId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderDomainIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SpaceInitProviderDomainIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderDomainIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SpaceInitProviderDomainIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SpaceInitProviderDomainIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpaceInitProviderDomainIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpaceInitProviderDomainIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A collection of ownership settings. Required if space_sharing_settings is set. See ownership_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderOwnershipSettings {
    /// The user profile who is the owner of the private space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ownerUserProfileName"
    )]
    #[builder(default, setter(strip_option))]
    pub owner_user_profile_name: Option<String>,
}

/// A collection of space settings. See space_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettings {
    /// The type of app created within the space.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appType")]
    #[builder(default, setter(strip_option))]
    pub app_type: Option<String>,
    /// The Code Editor application settings. See code_editor_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeEditorAppSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub code_editor_app_settings: Option<SpaceInitProviderSpaceSettingsCodeEditorAppSettings>,
    /// A file system, created by you, that you assign to a space for an Amazon SageMaker Domain. See custom_file_system Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customFileSystem"
    )]
    #[builder(default, setter(strip_option))]
    pub custom_file_system: Option<Vec<SpaceInitProviderSpaceSettingsCustomFileSystem>>,
    /// The settings for the JupyterLab application. See jupyter_lab_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterLabAppSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub jupyter_lab_app_settings: Option<SpaceInitProviderSpaceSettingsJupyterLabAppSettings>,
    /// The Jupyter server's app settings. See jupyter_server_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterServerAppSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub jupyter_server_app_settings: Option<SpaceInitProviderSpaceSettingsJupyterServerAppSettings>,
    /// The kernel gateway app settings. See kernel_gateway_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kernelGatewayAppSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub kernel_gateway_app_settings: Option<SpaceInitProviderSpaceSettingsKernelGatewayAppSettings>,
    /// The storage settings. See space_storage_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spaceStorageSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub space_storage_settings: Option<SpaceInitProviderSpaceSettingsSpaceStorageSettings>,
}

/// The Code Editor application settings. See code_editor_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsCodeEditorAppSettings {
    /// Settings that are used to configure and manage the lifecycle of JupyterLab applications in a space. See app_lifecycle_management Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appLifecycleManagement"
    )]
    #[builder(default, setter(strip_option))]
    pub app_lifecycle_management:
        Option<SpaceInitProviderSpaceSettingsCodeEditorAppSettingsAppLifecycleManagement>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default, setter(strip_option))]
    pub default_resource_spec:
        Option<SpaceInitProviderSpaceSettingsCodeEditorAppSettingsDefaultResourceSpec>,
}

/// Settings that are used to configure and manage the lifecycle of JupyterLab applications in a space. See app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsCodeEditorAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. See idle_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub idle_settings: Option<
        SpaceInitProviderSpaceSettingsCodeEditorAppSettingsAppLifecycleManagementIdleSettings,
    >,
}

/// Settings related to idle shutdown of Studio applications. See idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsCodeEditorAppSettingsAppLifecycleManagementIdleSettings {
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleTimeoutInMinutes"
    )]
    #[builder(default, setter(strip_option))]
    pub idle_timeout_in_minutes: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsCodeEditorAppSettingsDefaultResourceSpec {
    /// The instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_config_arn: Option<String>,
    /// The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsCustomFileSystem {
    /// A custom file system in Amazon EFS. See efs_file_system Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "efsFileSystem"
    )]
    #[builder(default, setter(strip_option))]
    pub efs_file_system: Option<SpaceInitProviderSpaceSettingsCustomFileSystemEfsFileSystem>,
}

/// A custom file system in Amazon EFS. See efs_file_system Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsCustomFileSystemEfsFileSystem {
    /// The ID of your Amazon EFS file system.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemId"
    )]
    #[builder(default, setter(strip_option))]
    pub file_system_id: Option<String>,
}

/// The settings for the JupyterLab application. See jupyter_lab_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsJupyterLabAppSettings {
    /// Settings that are used to configure and manage the lifecycle of JupyterLab applications in a space. See app_lifecycle_management Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appLifecycleManagement"
    )]
    #[builder(default, setter(strip_option))]
    pub app_lifecycle_management:
        Option<SpaceInitProviderSpaceSettingsJupyterLabAppSettingsAppLifecycleManagement>,
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. See code_repository Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default, setter(strip_option))]
    pub code_repository:
        Option<Vec<SpaceInitProviderSpaceSettingsJupyterLabAppSettingsCodeRepository>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default, setter(strip_option))]
    pub default_resource_spec:
        Option<SpaceInitProviderSpaceSettingsJupyterLabAppSettingsDefaultResourceSpec>,
}

/// Settings that are used to configure and manage the lifecycle of JupyterLab applications in a space. See app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsJupyterLabAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. See idle_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub idle_settings: Option<
        SpaceInitProviderSpaceSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings,
    >,
}

/// Settings related to idle shutdown of Studio applications. See idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings {
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleTimeoutInMinutes"
    )]
    #[builder(default, setter(strip_option))]
    pub idle_timeout_in_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsJupyterLabAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_url: Option<String>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsJupyterLabAppSettingsDefaultResourceSpec {
    /// The instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_config_arn: Option<String>,
    /// The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The Jupyter server's app settings. See jupyter_server_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsJupyterServerAppSettings {
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. See code_repository Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default, setter(strip_option))]
    pub code_repository:
        Option<Vec<SpaceInitProviderSpaceSettingsJupyterServerAppSettingsCodeRepository>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default, setter(strip_option))]
    pub default_resource_spec:
        Option<SpaceInitProviderSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsJupyterServerAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_url: Option<String>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec {
    /// The instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_config_arn: Option<String>,
    /// The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The kernel gateway app settings. See kernel_gateway_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsKernelGatewayAppSettings {
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. See custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default, setter(strip_option))]
    pub custom_image:
        Option<Vec<SpaceInitProviderSpaceSettingsKernelGatewayAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default, setter(strip_option))]
    pub default_resource_spec:
        Option<SpaceInitProviderSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsKernelGatewayAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default, setter(strip_option))]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default, setter(strip_option))]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default, setter(strip_option))]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec {
    /// The instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_config_arn: Option<String>,
    /// The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The storage settings. See space_storage_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsSpaceStorageSettings {
    /// A collection of EBS storage settings for a space. See ebs_storage_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsStorageSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub ebs_storage_settings:
        Option<SpaceInitProviderSpaceSettingsSpaceStorageSettingsEbsStorageSettings>,
}

/// A collection of EBS storage settings for a space. See ebs_storage_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSettingsSpaceStorageSettingsEbsStorageSettings {
    /// The size of an EBS storage volume for a space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsVolumeSizeInGb"
    )]
    #[builder(default, setter(strip_option))]
    pub ebs_volume_size_in_gb: Option<f64>,
}

/// A collection of space sharing settings. Required if ownership_settings is set. See space_sharing_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceInitProviderSpaceSharingSettings {
    /// Specifies the sharing type of the space. Valid values are Private and Shared.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharingType"
    )]
    #[builder(default, setter(strip_option))]
    pub sharing_type: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SpaceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SpaceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SpaceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpaceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpaceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpacePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<SpacePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<SpacePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpacePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SpacePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpacePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SpacePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SpacePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpacePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpacePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpacePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// SpaceStatus defines the observed state of Space.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<SpaceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProvider {
    /// The space's Amazon Resource Name (ARN).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// The ID of the associated Domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainId")]
    #[builder(default, setter(strip_option))]
    pub domain_id: Option<String>,
    /// The ID of the space's profile in the Amazon Elastic File System volume.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "homeEfsFileSystemUid"
    )]
    #[builder(default, setter(strip_option))]
    pub home_efs_file_system_uid: Option<String>,
    /// The space's Amazon Resource Name (ARN).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// A collection of ownership settings. Required if space_sharing_settings is set. See ownership_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ownershipSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub ownership_settings: Option<SpaceStatusAtProviderOwnershipSettings>,
    /// The name of the space that appears in the SageMaker Studio UI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spaceDisplayName"
    )]
    #[builder(default, setter(strip_option))]
    pub space_display_name: Option<String>,
    /// The name of the space.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spaceName")]
    #[builder(default, setter(strip_option))]
    pub space_name: Option<String>,
    /// A collection of space settings. See space_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spaceSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub space_settings: Option<SpaceStatusAtProviderSpaceSettings>,
    /// A collection of space sharing settings. Required if ownership_settings is set. See space_sharing_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spaceSharingSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub space_sharing_settings: Option<SpaceStatusAtProviderSpaceSharingSettings>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// Returns the URL of the space. If the space is created with Amazon Web Services IAM Identity Center (Successor to Amazon Web Services Single Sign-On) authentication, users can navigate to the URL after appending the respective redirect parameter for the application type to be federated through Amazon Web Services IAM Identity Center.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub url: Option<String>,
}

/// A collection of ownership settings. Required if space_sharing_settings is set. See ownership_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderOwnershipSettings {
    /// The user profile who is the owner of the private space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ownerUserProfileName"
    )]
    #[builder(default, setter(strip_option))]
    pub owner_user_profile_name: Option<String>,
}

/// A collection of space settings. See space_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettings {
    /// The type of app created within the space.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appType")]
    #[builder(default, setter(strip_option))]
    pub app_type: Option<String>,
    /// The Code Editor application settings. See code_editor_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeEditorAppSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub code_editor_app_settings: Option<SpaceStatusAtProviderSpaceSettingsCodeEditorAppSettings>,
    /// A file system, created by you, that you assign to a space for an Amazon SageMaker Domain. See custom_file_system Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customFileSystem"
    )]
    #[builder(default, setter(strip_option))]
    pub custom_file_system: Option<Vec<SpaceStatusAtProviderSpaceSettingsCustomFileSystem>>,
    /// The settings for the JupyterLab application. See jupyter_lab_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterLabAppSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub jupyter_lab_app_settings: Option<SpaceStatusAtProviderSpaceSettingsJupyterLabAppSettings>,
    /// The Jupyter server's app settings. See jupyter_server_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jupyterServerAppSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub jupyter_server_app_settings:
        Option<SpaceStatusAtProviderSpaceSettingsJupyterServerAppSettings>,
    /// The kernel gateway app settings. See kernel_gateway_app_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kernelGatewayAppSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub kernel_gateway_app_settings:
        Option<SpaceStatusAtProviderSpaceSettingsKernelGatewayAppSettings>,
    /// The storage settings. See space_storage_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spaceStorageSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub space_storage_settings: Option<SpaceStatusAtProviderSpaceSettingsSpaceStorageSettings>,
}

/// The Code Editor application settings. See code_editor_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsCodeEditorAppSettings {
    /// Settings that are used to configure and manage the lifecycle of JupyterLab applications in a space. See app_lifecycle_management Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appLifecycleManagement"
    )]
    #[builder(default, setter(strip_option))]
    pub app_lifecycle_management:
        Option<SpaceStatusAtProviderSpaceSettingsCodeEditorAppSettingsAppLifecycleManagement>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default, setter(strip_option))]
    pub default_resource_spec:
        Option<SpaceStatusAtProviderSpaceSettingsCodeEditorAppSettingsDefaultResourceSpec>,
}

/// Settings that are used to configure and manage the lifecycle of JupyterLab applications in a space. See app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsCodeEditorAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. See idle_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub idle_settings: Option<
        SpaceStatusAtProviderSpaceSettingsCodeEditorAppSettingsAppLifecycleManagementIdleSettings,
    >,
}

/// Settings related to idle shutdown of Studio applications. See idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsCodeEditorAppSettingsAppLifecycleManagementIdleSettings
{
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleTimeoutInMinutes"
    )]
    #[builder(default, setter(strip_option))]
    pub idle_timeout_in_minutes: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsCodeEditorAppSettingsDefaultResourceSpec {
    /// The instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_config_arn: Option<String>,
    /// The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsCustomFileSystem {
    /// A custom file system in Amazon EFS. See efs_file_system Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "efsFileSystem"
    )]
    #[builder(default, setter(strip_option))]
    pub efs_file_system: Option<SpaceStatusAtProviderSpaceSettingsCustomFileSystemEfsFileSystem>,
}

/// A custom file system in Amazon EFS. See efs_file_system Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsCustomFileSystemEfsFileSystem {
    /// The ID of your Amazon EFS file system.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemId"
    )]
    #[builder(default, setter(strip_option))]
    pub file_system_id: Option<String>,
}

/// The settings for the JupyterLab application. See jupyter_lab_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsJupyterLabAppSettings {
    /// Settings that are used to configure and manage the lifecycle of JupyterLab applications in a space. See app_lifecycle_management Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appLifecycleManagement"
    )]
    #[builder(default, setter(strip_option))]
    pub app_lifecycle_management:
        Option<SpaceStatusAtProviderSpaceSettingsJupyterLabAppSettingsAppLifecycleManagement>,
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. See code_repository Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default, setter(strip_option))]
    pub code_repository:
        Option<Vec<SpaceStatusAtProviderSpaceSettingsJupyterLabAppSettingsCodeRepository>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default, setter(strip_option))]
    pub default_resource_spec:
        Option<SpaceStatusAtProviderSpaceSettingsJupyterLabAppSettingsDefaultResourceSpec>,
}

/// Settings that are used to configure and manage the lifecycle of JupyterLab applications in a space. See app_lifecycle_management Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsJupyterLabAppSettingsAppLifecycleManagement {
    /// Settings related to idle shutdown of Studio applications. See idle_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub idle_settings: Option<
        SpaceStatusAtProviderSpaceSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings,
    >,
}

/// Settings related to idle shutdown of Studio applications. See idle_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsJupyterLabAppSettingsAppLifecycleManagementIdleSettings
{
    /// The time that SageMaker waits after the application becomes idle before shutting it down. Valid values are between 60 and 525600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleTimeoutInMinutes"
    )]
    #[builder(default, setter(strip_option))]
    pub idle_timeout_in_minutes: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsJupyterLabAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_url: Option<String>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsJupyterLabAppSettingsDefaultResourceSpec {
    /// The instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_config_arn: Option<String>,
    /// The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The Jupyter server's app settings. See jupyter_server_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsJupyterServerAppSettings {
    /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application. See code_repository Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "codeRepository"
    )]
    #[builder(default, setter(strip_option))]
    pub code_repository:
        Option<Vec<SpaceStatusAtProviderSpaceSettingsJupyterServerAppSettingsCodeRepository>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default, setter(strip_option))]
    pub default_resource_spec:
        Option<SpaceStatusAtProviderSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsJupyterServerAppSettingsCodeRepository {
    /// The URL of the Git repository.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryUrl"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_url: Option<String>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsJupyterServerAppSettingsDefaultResourceSpec {
    /// The instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_config_arn: Option<String>,
    /// The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The kernel gateway app settings. See kernel_gateway_app_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsKernelGatewayAppSettings {
    /// A list of custom SageMaker images that are configured to run as a KernelGateway app. See custom_image Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customImage"
    )]
    #[builder(default, setter(strip_option))]
    pub custom_image:
        Option<Vec<SpaceStatusAtProviderSpaceSettingsKernelGatewayAppSettingsCustomImage>>,
    /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResourceSpec"
    )]
    #[builder(default, setter(strip_option))]
    pub default_resource_spec:
        Option<SpaceStatusAtProviderSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArns"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_config_arns: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsKernelGatewayAppSettingsCustomImage {
    /// The name of the App Image Config.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appImageConfigName"
    )]
    #[builder(default, setter(strip_option))]
    pub app_image_config_name: Option<String>,
    /// The name of the Custom Image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    #[builder(default, setter(strip_option))]
    pub image_name: Option<String>,
    /// The version number of the Custom Image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageVersionNumber"
    )]
    #[builder(default, setter(strip_option))]
    pub image_version_number: Option<f64>,
}

/// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. See default_resource_spec Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsKernelGatewayAppSettingsDefaultResourceSpec {
    /// The instance type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleConfigArn"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_config_arn: Option<String>,
    /// The Amazon Resource Name (ARN) of the SageMaker image created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionAlias"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sagemakerImageVersionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub sagemaker_image_version_arn: Option<String>,
}

/// The storage settings. See space_storage_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsSpaceStorageSettings {
    /// A collection of EBS storage settings for a space. See ebs_storage_settings Block below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsStorageSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub ebs_storage_settings:
        Option<SpaceStatusAtProviderSpaceSettingsSpaceStorageSettingsEbsStorageSettings>,
}

/// A collection of EBS storage settings for a space. See ebs_storage_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSettingsSpaceStorageSettingsEbsStorageSettings {
    /// The size of an EBS storage volume for a space.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ebsVolumeSizeInGb"
    )]
    #[builder(default, setter(strip_option))]
    pub ebs_volume_size_in_gb: Option<f64>,
}

/// A collection of space sharing settings. Required if ownership_settings is set. See space_sharing_settings Block below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SpaceStatusAtProviderSpaceSharingSettings {
    /// Specifies the sharing type of the space. Valid values are Private and Shared.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sharingType"
    )]
    #[builder(default, setter(strip_option))]
    pub sharing_type: Option<String>,
}

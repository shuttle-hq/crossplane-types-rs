// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// PlanSpec defines the desired state of Plan
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "backup.aws.upbound.io",
    version = "v1beta2",
    kind = "Plan",
    plural = "plans"
)]
#[kube(status = "PlanStatus")]
pub struct PlanSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<PlanDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: PlanForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<PlanInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<PlanProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<PlanPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<PlanWriteConnectionSecretToRef>,
}

/// PlanSpec defines the desired state of Plan
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PlanDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanForProvider {
    /// An object that specifies backup options for each resource type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "advancedBackupSetting"
    )]
    #[builder(default, setter(strip_option))]
    pub advanced_backup_setting: Option<Vec<PlanForProviderAdvancedBackupSetting>>,
    /// The display name of a backup plan.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// A rule object that specifies a scheduled task that is used to back up a selection of resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub rule: Option<Vec<PlanForProviderRule>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanForProviderAdvancedBackupSetting {
    /// Specifies the backup option for a selected resource. This option is only available for Windows VSS backup jobs. Set to { WindowsVSS = "enabled" } to enable Windows VSS backup option and create a VSS Windows backup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "backupOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub backup_options: Option<BTreeMap<String, String>>,
    /// The type of AWS resource to be backed up. For VSS Windows backups, the only supported resource type is Amazon EC2. Valid values: EC2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceType"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanForProviderRule {
    /// The amount of time in minutes AWS Backup attempts a backup before canceling the job and returning an error.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "completionWindow"
    )]
    #[builder(default, setter(strip_option))]
    pub completion_window: Option<f64>,
    /// Configuration block(s) with copy operation settings. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "copyAction"
    )]
    #[builder(default, setter(strip_option))]
    pub copy_action: Option<Vec<PlanForProviderRuleCopyAction>>,
    /// Enable continuous backups for supported resources.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableContinuousBackup"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_continuous_backup: Option<bool>,
    /// The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub lifecycle: Option<PlanForProviderRuleLifecycle>,
    /// Metadata that you can assign to help organize the resources that you create.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recoveryPointTags"
    )]
    #[builder(default, setter(strip_option))]
    pub recovery_point_tags: Option<BTreeMap<String, String>>,
    /// An display name for a backup rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleName")]
    #[builder(default, setter(strip_option))]
    pub rule_name: Option<String>,
    /// A CRON expression specifying when AWS Backup initiates a backup job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub schedule: Option<String>,
    /// The timezone in which the schedule expression is set. Default value: "Etc/UTC".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scheduleExpressionTimezone"
    )]
    #[builder(default, setter(strip_option))]
    pub schedule_expression_timezone: Option<String>,
    /// The amount of time in minutes before beginning a backup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startWindow"
    )]
    #[builder(default, setter(strip_option))]
    pub start_window: Option<f64>,
    /// The name of a logical container where backups are stored.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetVaultName"
    )]
    #[builder(default, setter(strip_option))]
    pub target_vault_name: Option<String>,
    /// Reference to a Vault in backup to populate targetVaultName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetVaultNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub target_vault_name_ref: Option<PlanForProviderRuleTargetVaultNameRef>,
    /// Selector for a Vault in backup to populate targetVaultName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetVaultNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub target_vault_name_selector: Option<PlanForProviderRuleTargetVaultNameSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanForProviderRuleCopyAction {
    /// An Amazon Resource Name (ARN) that uniquely identifies the destination backup vault for the copied backup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationVaultArn"
    )]
    #[builder(default, setter(strip_option))]
    pub destination_vault_arn: Option<String>,
    /// The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub lifecycle: Option<PlanForProviderRuleCopyActionLifecycle>,
}

/// The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanForProviderRuleCopyActionLifecycle {
    /// Specifies the number of days after creation that a recovery point is moved to cold storage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "coldStorageAfter"
    )]
    #[builder(default, setter(strip_option))]
    pub cold_storage_after: Option<f64>,
    /// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than cold_storage_after.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteAfter"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_after: Option<f64>,
    /// This setting will instruct your backup plan to transition supported resources to archive (cold) storage tier in accordance with your lifecycle settings.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "optInToArchiveForSupportedResources"
    )]
    #[builder(default, setter(strip_option))]
    pub opt_in_to_archive_for_supported_resources: Option<bool>,
}

/// The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanForProviderRuleLifecycle {
    /// Specifies the number of days after creation that a recovery point is moved to cold storage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "coldStorageAfter"
    )]
    #[builder(default, setter(strip_option))]
    pub cold_storage_after: Option<f64>,
    /// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than cold_storage_after.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteAfter"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_after: Option<f64>,
    /// This setting will instruct your backup plan to transition supported resources to archive (cold) storage tier in accordance with your lifecycle settings.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "optInToArchiveForSupportedResources"
    )]
    #[builder(default, setter(strip_option))]
    pub opt_in_to_archive_for_supported_resources: Option<bool>,
}

/// Reference to a Vault in backup to populate targetVaultName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanForProviderRuleTargetVaultNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<PlanForProviderRuleTargetVaultNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanForProviderRuleTargetVaultNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<PlanForProviderRuleTargetVaultNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<PlanForProviderRuleTargetVaultNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PlanForProviderRuleTargetVaultNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PlanForProviderRuleTargetVaultNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Vault in backup to populate targetVaultName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanForProviderRuleTargetVaultNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<PlanForProviderRuleTargetVaultNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanForProviderRuleTargetVaultNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<PlanForProviderRuleTargetVaultNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<PlanForProviderRuleTargetVaultNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PlanForProviderRuleTargetVaultNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PlanForProviderRuleTargetVaultNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanInitProvider {
    /// An object that specifies backup options for each resource type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "advancedBackupSetting"
    )]
    #[builder(default, setter(strip_option))]
    pub advanced_backup_setting: Option<Vec<PlanInitProviderAdvancedBackupSetting>>,
    /// The display name of a backup plan.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// A rule object that specifies a scheduled task that is used to back up a selection of resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub rule: Option<Vec<PlanInitProviderRule>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanInitProviderAdvancedBackupSetting {
    /// Specifies the backup option for a selected resource. This option is only available for Windows VSS backup jobs. Set to { WindowsVSS = "enabled" } to enable Windows VSS backup option and create a VSS Windows backup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "backupOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub backup_options: Option<BTreeMap<String, String>>,
    /// The type of AWS resource to be backed up. For VSS Windows backups, the only supported resource type is Amazon EC2. Valid values: EC2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceType"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanInitProviderRule {
    /// The amount of time in minutes AWS Backup attempts a backup before canceling the job and returning an error.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "completionWindow"
    )]
    #[builder(default, setter(strip_option))]
    pub completion_window: Option<f64>,
    /// Configuration block(s) with copy operation settings. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "copyAction"
    )]
    #[builder(default, setter(strip_option))]
    pub copy_action: Option<Vec<PlanInitProviderRuleCopyAction>>,
    /// Enable continuous backups for supported resources.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableContinuousBackup"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_continuous_backup: Option<bool>,
    /// The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub lifecycle: Option<PlanInitProviderRuleLifecycle>,
    /// Metadata that you can assign to help organize the resources that you create.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recoveryPointTags"
    )]
    #[builder(default, setter(strip_option))]
    pub recovery_point_tags: Option<BTreeMap<String, String>>,
    /// An display name for a backup rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleName")]
    #[builder(default, setter(strip_option))]
    pub rule_name: Option<String>,
    /// A CRON expression specifying when AWS Backup initiates a backup job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub schedule: Option<String>,
    /// The timezone in which the schedule expression is set. Default value: "Etc/UTC".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scheduleExpressionTimezone"
    )]
    #[builder(default, setter(strip_option))]
    pub schedule_expression_timezone: Option<String>,
    /// The amount of time in minutes before beginning a backup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startWindow"
    )]
    #[builder(default, setter(strip_option))]
    pub start_window: Option<f64>,
    /// The name of a logical container where backups are stored.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetVaultName"
    )]
    #[builder(default, setter(strip_option))]
    pub target_vault_name: Option<String>,
    /// Reference to a Vault in backup to populate targetVaultName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetVaultNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub target_vault_name_ref: Option<PlanInitProviderRuleTargetVaultNameRef>,
    /// Selector for a Vault in backup to populate targetVaultName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetVaultNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub target_vault_name_selector: Option<PlanInitProviderRuleTargetVaultNameSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanInitProviderRuleCopyAction {
    /// An Amazon Resource Name (ARN) that uniquely identifies the destination backup vault for the copied backup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationVaultArn"
    )]
    #[builder(default, setter(strip_option))]
    pub destination_vault_arn: Option<String>,
    /// The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub lifecycle: Option<PlanInitProviderRuleCopyActionLifecycle>,
}

/// The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanInitProviderRuleCopyActionLifecycle {
    /// Specifies the number of days after creation that a recovery point is moved to cold storage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "coldStorageAfter"
    )]
    #[builder(default, setter(strip_option))]
    pub cold_storage_after: Option<f64>,
    /// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than cold_storage_after.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteAfter"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_after: Option<f64>,
    /// This setting will instruct your backup plan to transition supported resources to archive (cold) storage tier in accordance with your lifecycle settings.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "optInToArchiveForSupportedResources"
    )]
    #[builder(default, setter(strip_option))]
    pub opt_in_to_archive_for_supported_resources: Option<bool>,
}

/// The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanInitProviderRuleLifecycle {
    /// Specifies the number of days after creation that a recovery point is moved to cold storage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "coldStorageAfter"
    )]
    #[builder(default, setter(strip_option))]
    pub cold_storage_after: Option<f64>,
    /// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than cold_storage_after.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteAfter"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_after: Option<f64>,
    /// This setting will instruct your backup plan to transition supported resources to archive (cold) storage tier in accordance with your lifecycle settings.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "optInToArchiveForSupportedResources"
    )]
    #[builder(default, setter(strip_option))]
    pub opt_in_to_archive_for_supported_resources: Option<bool>,
}

/// Reference to a Vault in backup to populate targetVaultName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanInitProviderRuleTargetVaultNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<PlanInitProviderRuleTargetVaultNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanInitProviderRuleTargetVaultNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<PlanInitProviderRuleTargetVaultNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<PlanInitProviderRuleTargetVaultNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PlanInitProviderRuleTargetVaultNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PlanInitProviderRuleTargetVaultNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Vault in backup to populate targetVaultName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanInitProviderRuleTargetVaultNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<PlanInitProviderRuleTargetVaultNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanInitProviderRuleTargetVaultNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<PlanInitProviderRuleTargetVaultNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<PlanInitProviderRuleTargetVaultNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PlanInitProviderRuleTargetVaultNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PlanInitProviderRuleTargetVaultNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<PlanProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<PlanProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<PlanProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PlanProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PlanProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<PlanPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<PlanPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<PlanPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<PlanPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<PlanPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PlanPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PlanPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// PlanStatus defines the observed state of Plan.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<PlanStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanStatusAtProvider {
    /// An object that specifies backup options for each resource type.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "advancedBackupSetting"
    )]
    #[builder(default, setter(strip_option))]
    pub advanced_backup_setting: Option<Vec<PlanStatusAtProviderAdvancedBackupSetting>>,
    /// The ARN of the backup plan.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// The id of the backup plan.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// The display name of a backup plan.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// A rule object that specifies a scheduled task that is used to back up a selection of resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub rule: Option<Vec<PlanStatusAtProviderRule>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// Unique, randomly generated, Unicode, UTF-8 encoded string that serves as the version ID of the backup plan.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanStatusAtProviderAdvancedBackupSetting {
    /// Specifies the backup option for a selected resource. This option is only available for Windows VSS backup jobs. Set to { WindowsVSS = "enabled" } to enable Windows VSS backup option and create a VSS Windows backup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "backupOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub backup_options: Option<BTreeMap<String, String>>,
    /// The type of AWS resource to be backed up. For VSS Windows backups, the only supported resource type is Amazon EC2. Valid values: EC2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceType"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanStatusAtProviderRule {
    /// The amount of time in minutes AWS Backup attempts a backup before canceling the job and returning an error.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "completionWindow"
    )]
    #[builder(default, setter(strip_option))]
    pub completion_window: Option<f64>,
    /// Configuration block(s) with copy operation settings. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "copyAction"
    )]
    #[builder(default, setter(strip_option))]
    pub copy_action: Option<Vec<PlanStatusAtProviderRuleCopyAction>>,
    /// Enable continuous backups for supported resources.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableContinuousBackup"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_continuous_backup: Option<bool>,
    /// The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub lifecycle: Option<PlanStatusAtProviderRuleLifecycle>,
    /// Metadata that you can assign to help organize the resources that you create.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recoveryPointTags"
    )]
    #[builder(default, setter(strip_option))]
    pub recovery_point_tags: Option<BTreeMap<String, String>>,
    /// An display name for a backup rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleName")]
    #[builder(default, setter(strip_option))]
    pub rule_name: Option<String>,
    /// A CRON expression specifying when AWS Backup initiates a backup job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub schedule: Option<String>,
    /// The timezone in which the schedule expression is set. Default value: "Etc/UTC".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scheduleExpressionTimezone"
    )]
    #[builder(default, setter(strip_option))]
    pub schedule_expression_timezone: Option<String>,
    /// The amount of time in minutes before beginning a backup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startWindow"
    )]
    #[builder(default, setter(strip_option))]
    pub start_window: Option<f64>,
    /// The name of a logical container where backups are stored.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetVaultName"
    )]
    #[builder(default, setter(strip_option))]
    pub target_vault_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanStatusAtProviderRuleCopyAction {
    /// An Amazon Resource Name (ARN) that uniquely identifies the destination backup vault for the copied backup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "destinationVaultArn"
    )]
    #[builder(default, setter(strip_option))]
    pub destination_vault_arn: Option<String>,
    /// The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub lifecycle: Option<PlanStatusAtProviderRuleCopyActionLifecycle>,
}

/// The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanStatusAtProviderRuleCopyActionLifecycle {
    /// Specifies the number of days after creation that a recovery point is moved to cold storage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "coldStorageAfter"
    )]
    #[builder(default, setter(strip_option))]
    pub cold_storage_after: Option<f64>,
    /// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than cold_storage_after.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteAfter"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_after: Option<f64>,
    /// This setting will instruct your backup plan to transition supported resources to archive (cold) storage tier in accordance with your lifecycle settings.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "optInToArchiveForSupportedResources"
    )]
    #[builder(default, setter(strip_option))]
    pub opt_in_to_archive_for_supported_resources: Option<bool>,
}

/// The lifecycle defines when a protected resource is transitioned to cold storage and when it expires.  Fields documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct PlanStatusAtProviderRuleLifecycle {
    /// Specifies the number of days after creation that a recovery point is moved to cold storage.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "coldStorageAfter"
    )]
    #[builder(default, setter(strip_option))]
    pub cold_storage_after: Option<f64>,
    /// Specifies the number of days after creation that a recovery point is deleted. Must be 90 days greater than cold_storage_after.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteAfter"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_after: Option<f64>,
    /// This setting will instruct your backup plan to transition supported resources to archive (cold) storage tier in accordance with your lifecycle settings.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "optInToArchiveForSupportedResources"
    )]
    #[builder(default, setter(strip_option))]
    pub opt_in_to_archive_for_supported_resources: Option<bool>,
}

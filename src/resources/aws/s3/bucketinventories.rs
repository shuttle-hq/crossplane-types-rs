// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// BucketInventorySpec defines the desired state of BucketInventory
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "s3.aws.upbound.io",
    version = "v1beta2",
    kind = "BucketInventory",
    plural = "bucketinventories"
)]
#[kube(status = "BucketInventoryStatus")]
pub struct BucketInventorySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<BucketInventoryDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: BucketInventoryForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<BucketInventoryInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<BucketInventoryProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<BucketInventoryPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<BucketInventoryWriteConnectionSecretToRef>,
}

/// BucketInventorySpec defines the desired state of BucketInventory
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryForProvider {
    /// Name of the source bucket that inventory lists the objects for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub bucket: Option<String>,
    /// Reference to a Bucket in s3 to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketRef")]
    #[builder(default, setter(strip_option))]
    pub bucket_ref: Option<BucketInventoryForProviderBucketRef>,
    /// Selector for a Bucket in s3 to populate bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_selector: Option<BucketInventoryForProviderBucketSelector>,
    /// Contains information about where to publish the inventory results (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub destination: Option<BucketInventoryForProviderDestination>,
    /// Specifies whether the inventory is enabled or disabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub filter: Option<BucketInventoryForProviderFilter>,
    /// Object versions to include in the inventory list. Valid values: All, Current.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includedObjectVersions"
    )]
    #[builder(default, setter(strip_option))]
    pub included_object_versions: Option<String>,
    /// Unique identifier of the inventory configuration for the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// List of optional fields that are included in the inventory results. Please refer to the S3 documentation for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "optionalFields"
    )]
    #[builder(default, setter(strip_option))]
    pub optional_fields: Option<Vec<String>>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Specifies the schedule for generating inventory results (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub schedule: Option<BucketInventoryForProviderSchedule>,
}

/// Reference to a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryForProviderBucketRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<BucketInventoryForProviderBucketRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryForProviderBucketRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<BucketInventoryForProviderBucketRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<BucketInventoryForProviderBucketRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryForProviderBucketRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryForProviderBucketRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryForProviderBucketSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<BucketInventoryForProviderBucketSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryForProviderBucketSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<BucketInventoryForProviderBucketSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<BucketInventoryForProviderBucketSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryForProviderBucketSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryForProviderBucketSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Contains information about where to publish the inventory results (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryForProviderDestination {
    /// Name of the source bucket that inventory lists the objects for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub bucket: Option<BucketInventoryForProviderDestinationBucket>,
}

/// Name of the source bucket that inventory lists the objects for.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryForProviderDestinationBucket {
    /// ID of the account that owns the destination bucket. Recommended to be set to prevent problems if the destination bucket ownership changes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default, setter(strip_option))]
    pub account_id: Option<String>,
    /// Amazon S3 bucket ARN of the destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    #[builder(default, setter(strip_option))]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_arn_ref: Option<BucketInventoryForProviderDestinationBucketBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_arn_selector: Option<BucketInventoryForProviderDestinationBucketBucketArnSelector>,
    /// Contains the type of server-side encryption to use to encrypt the inventory (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub encryption: Option<BucketInventoryForProviderDestinationBucketEncryption>,
    /// Specifies the output format of the inventory results. Can be CSV, ORC or Parquet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub format: Option<String>,
    /// Prefix that an object must have to be included in the inventory results.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub prefix: Option<String>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryForProviderDestinationBucketBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<BucketInventoryForProviderDestinationBucketBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryForProviderDestinationBucketBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<BucketInventoryForProviderDestinationBucketBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<BucketInventoryForProviderDestinationBucketBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryForProviderDestinationBucketBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryForProviderDestinationBucketBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryForProviderDestinationBucketBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<BucketInventoryForProviderDestinationBucketBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryForProviderDestinationBucketBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<BucketInventoryForProviderDestinationBucketBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<BucketInventoryForProviderDestinationBucketBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryForProviderDestinationBucketBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryForProviderDestinationBucketBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Contains the type of server-side encryption to use to encrypt the inventory (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryForProviderDestinationBucketEncryption {
    /// Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseKms")]
    #[builder(default, setter(strip_option))]
    pub sse_kms: Option<BucketInventoryForProviderDestinationBucketEncryptionSseKms>,
    /// Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseS3")]
    #[builder(default, setter(strip_option))]
    pub sse_s3: Option<BucketInventoryForProviderDestinationBucketEncryptionSseS3>,
}

/// Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryForProviderDestinationBucketEncryptionSseKms {
    /// ARN of the KMS customer master key (CMK) used to encrypt the inventory file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default, setter(strip_option))]
    pub key_id: Option<String>,
}

/// Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryForProviderDestinationBucketEncryptionSseS3 {}

/// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryForProviderFilter {
    /// Prefix that an object must have to be included in the inventory results.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub prefix: Option<String>,
}

/// Specifies the schedule for generating inventory results (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryForProviderSchedule {
    /// Specifies how frequently inventory results are produced. Valid values: Daily, Weekly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub frequency: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryInitProvider {
    /// Name of the source bucket that inventory lists the objects for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub bucket: Option<String>,
    /// Reference to a Bucket in s3 to populate bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketRef")]
    #[builder(default, setter(strip_option))]
    pub bucket_ref: Option<BucketInventoryInitProviderBucketRef>,
    /// Selector for a Bucket in s3 to populate bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_selector: Option<BucketInventoryInitProviderBucketSelector>,
    /// Contains information about where to publish the inventory results (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub destination: Option<BucketInventoryInitProviderDestination>,
    /// Specifies whether the inventory is enabled or disabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub filter: Option<BucketInventoryInitProviderFilter>,
    /// Object versions to include in the inventory list. Valid values: All, Current.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includedObjectVersions"
    )]
    #[builder(default, setter(strip_option))]
    pub included_object_versions: Option<String>,
    /// Unique identifier of the inventory configuration for the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// List of optional fields that are included in the inventory results. Please refer to the S3 documentation for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "optionalFields"
    )]
    #[builder(default, setter(strip_option))]
    pub optional_fields: Option<Vec<String>>,
    /// Specifies the schedule for generating inventory results (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub schedule: Option<BucketInventoryInitProviderSchedule>,
}

/// Reference to a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryInitProviderBucketRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<BucketInventoryInitProviderBucketRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryInitProviderBucketRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<BucketInventoryInitProviderBucketRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<BucketInventoryInitProviderBucketRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryInitProviderBucketRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryInitProviderBucketRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucket.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryInitProviderBucketSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<BucketInventoryInitProviderBucketSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryInitProviderBucketSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<BucketInventoryInitProviderBucketSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<BucketInventoryInitProviderBucketSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryInitProviderBucketSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryInitProviderBucketSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Contains information about where to publish the inventory results (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryInitProviderDestination {
    /// Name of the source bucket that inventory lists the objects for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub bucket: Option<BucketInventoryInitProviderDestinationBucket>,
}

/// Name of the source bucket that inventory lists the objects for.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryInitProviderDestinationBucket {
    /// ID of the account that owns the destination bucket. Recommended to be set to prevent problems if the destination bucket ownership changes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default, setter(strip_option))]
    pub account_id: Option<String>,
    /// Amazon S3 bucket ARN of the destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    #[builder(default, setter(strip_option))]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_arn_ref: Option<BucketInventoryInitProviderDestinationBucketBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_arn_selector: Option<BucketInventoryInitProviderDestinationBucketBucketArnSelector>,
    /// Contains the type of server-side encryption to use to encrypt the inventory (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub encryption: Option<BucketInventoryInitProviderDestinationBucketEncryption>,
    /// Specifies the output format of the inventory results. Can be CSV, ORC or Parquet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub format: Option<String>,
    /// Prefix that an object must have to be included in the inventory results.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub prefix: Option<String>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryInitProviderDestinationBucketBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<BucketInventoryInitProviderDestinationBucketBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryInitProviderDestinationBucketBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<BucketInventoryInitProviderDestinationBucketBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<BucketInventoryInitProviderDestinationBucketBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryInitProviderDestinationBucketBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryInitProviderDestinationBucketBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryInitProviderDestinationBucketBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<BucketInventoryInitProviderDestinationBucketBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryInitProviderDestinationBucketBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<BucketInventoryInitProviderDestinationBucketBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<BucketInventoryInitProviderDestinationBucketBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryInitProviderDestinationBucketBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryInitProviderDestinationBucketBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Contains the type of server-side encryption to use to encrypt the inventory (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryInitProviderDestinationBucketEncryption {
    /// Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseKms")]
    #[builder(default, setter(strip_option))]
    pub sse_kms: Option<BucketInventoryInitProviderDestinationBucketEncryptionSseKms>,
    /// Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseS3")]
    #[builder(default, setter(strip_option))]
    pub sse_s3: Option<BucketInventoryInitProviderDestinationBucketEncryptionSseS3>,
}

/// Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryInitProviderDestinationBucketEncryptionSseKms {
    /// ARN of the KMS customer master key (CMK) used to encrypt the inventory file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default, setter(strip_option))]
    pub key_id: Option<String>,
}

/// Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryInitProviderDestinationBucketEncryptionSseS3 {}

/// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryInitProviderFilter {
    /// Prefix that an object must have to be included in the inventory results.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub prefix: Option<String>,
}

/// Specifies the schedule for generating inventory results (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryInitProviderSchedule {
    /// Specifies how frequently inventory results are produced. Valid values: Daily, Weekly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub frequency: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<BucketInventoryProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<BucketInventoryProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<BucketInventoryProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<BucketInventoryPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<BucketInventoryPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<BucketInventoryPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<BucketInventoryPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<BucketInventoryPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BucketInventoryPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// BucketInventoryStatus defines the observed state of BucketInventory.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<BucketInventoryStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryStatusAtProvider {
    /// Name of the source bucket that inventory lists the objects for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub bucket: Option<String>,
    /// Contains information about where to publish the inventory results (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub destination: Option<BucketInventoryStatusAtProviderDestination>,
    /// Specifies whether the inventory is enabled or disabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub filter: Option<BucketInventoryStatusAtProviderFilter>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Object versions to include in the inventory list. Valid values: All, Current.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includedObjectVersions"
    )]
    #[builder(default, setter(strip_option))]
    pub included_object_versions: Option<String>,
    /// Unique identifier of the inventory configuration for the bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// List of optional fields that are included in the inventory results. Please refer to the S3 documentation for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "optionalFields"
    )]
    #[builder(default, setter(strip_option))]
    pub optional_fields: Option<Vec<String>>,
    /// Specifies the schedule for generating inventory results (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub schedule: Option<BucketInventoryStatusAtProviderSchedule>,
}

/// Contains information about where to publish the inventory results (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryStatusAtProviderDestination {
    /// Name of the source bucket that inventory lists the objects for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub bucket: Option<BucketInventoryStatusAtProviderDestinationBucket>,
}

/// Name of the source bucket that inventory lists the objects for.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryStatusAtProviderDestinationBucket {
    /// ID of the account that owns the destination bucket. Recommended to be set to prevent problems if the destination bucket ownership changes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default, setter(strip_option))]
    pub account_id: Option<String>,
    /// Amazon S3 bucket ARN of the destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    #[builder(default, setter(strip_option))]
    pub bucket_arn: Option<String>,
    /// Contains the type of server-side encryption to use to encrypt the inventory (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub encryption: Option<BucketInventoryStatusAtProviderDestinationBucketEncryption>,
    /// Specifies the output format of the inventory results. Can be CSV, ORC or Parquet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub format: Option<String>,
    /// Prefix that an object must have to be included in the inventory results.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub prefix: Option<String>,
}

/// Contains the type of server-side encryption to use to encrypt the inventory (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryStatusAtProviderDestinationBucketEncryption {
    /// Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseKms")]
    #[builder(default, setter(strip_option))]
    pub sse_kms: Option<BucketInventoryStatusAtProviderDestinationBucketEncryptionSseKms>,
    /// Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sseS3")]
    #[builder(default, setter(strip_option))]
    pub sse_s3: Option<BucketInventoryStatusAtProviderDestinationBucketEncryptionSseS3>,
}

/// Specifies to use server-side encryption with AWS KMS-managed keys to encrypt the inventory file (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryStatusAtProviderDestinationBucketEncryptionSseKms {
    /// ARN of the KMS customer master key (CMK) used to encrypt the inventory file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default, setter(strip_option))]
    pub key_id: Option<String>,
}

/// Specifies to use server-side encryption with Amazon S3-managed keys (SSE-S3) to encrypt the inventory file.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryStatusAtProviderDestinationBucketEncryptionSseS3 {}

/// Specifies an inventory filter. The inventory only includes objects that meet the filter's criteria (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryStatusAtProviderFilter {
    /// Prefix that an object must have to be included in the inventory results.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub prefix: Option<String>,
}

/// Specifies the schedule for generating inventory results (documented below).
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BucketInventoryStatusAtProviderSchedule {
    /// Specifies how frequently inventory results are produced. Valid values: Daily, Weekly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub frequency: Option<String>,
}

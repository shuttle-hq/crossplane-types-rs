// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// RegexMatchSetSpec defines the desired state of RegexMatchSet
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "waf.aws.upbound.io",
    version = "v1beta2",
    kind = "RegexMatchSet",
    plural = "regexmatchsets"
)]
#[kube(status = "RegexMatchSetStatus")]
pub struct RegexMatchSetSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<RegexMatchSetDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: RegexMatchSetForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<RegexMatchSetInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<RegexMatchSetProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<RegexMatchSetPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<RegexMatchSetWriteConnectionSecretToRef>,
}

/// RegexMatchSetSpec defines the desired state of RegexMatchSet
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegexMatchSetDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetForProvider {
    /// The name or description of the Regex Match Set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The regular expression pattern that you want AWS WAF to search for in web requests, the location in requests that you want AWS WAF to search, and other settings. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "regexMatchTuple"
    )]
    #[builder(default, setter(strip_option))]
    pub regex_match_tuple: Option<Vec<RegexMatchSetForProviderRegexMatchTuple>>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetForProviderRegexMatchTuple {
    /// The part of a web request that you want to search, such as a specified header or a query string.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fieldToMatch"
    )]
    #[builder(default, setter(strip_option))]
    pub field_to_match: Option<RegexMatchSetForProviderRegexMatchTupleFieldToMatch>,
    /// The ID of a Regex Pattern Set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "regexPatternSetId"
    )]
    #[builder(default, setter(strip_option))]
    pub regex_pattern_set_id: Option<String>,
    /// Reference to a RegexPatternSet in waf to populate regexPatternSetId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "regexPatternSetIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub regex_pattern_set_id_ref:
        Option<RegexMatchSetForProviderRegexMatchTupleRegexPatternSetIdRef>,
    /// Selector for a RegexPatternSet in waf to populate regexPatternSetId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "regexPatternSetIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub regex_pattern_set_id_selector:
        Option<RegexMatchSetForProviderRegexMatchTupleRegexPatternSetIdSelector>,
    /// Text transformations used to eliminate unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
    /// e.g., CMD_LINE, HTML_ENTITY_DECODE or NONE.
    /// See docs
    /// for all supported values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "textTransformation"
    )]
    #[builder(default, setter(strip_option))]
    pub text_transformation: Option<String>,
}

/// The part of a web request that you want to search, such as a specified header or a query string.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetForProviderRegexMatchTupleFieldToMatch {
    /// When type is HEADER, enter the name of the header that you want to search, e.g., User-Agent or Referer.
    /// If type is any other value, omit this field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub data: Option<String>,
    /// The part of the web request that you want AWS WAF to search for a specified string.
    /// e.g., HEADER, METHOD or BODY.
    /// See docs
    /// for all supported values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Reference to a RegexPatternSet in waf to populate regexPatternSetId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetForProviderRegexMatchTupleRegexPatternSetIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<RegexMatchSetForProviderRegexMatchTupleRegexPatternSetIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetForProviderRegexMatchTupleRegexPatternSetIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<RegexMatchSetForProviderRegexMatchTupleRegexPatternSetIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<RegexMatchSetForProviderRegexMatchTupleRegexPatternSetIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegexMatchSetForProviderRegexMatchTupleRegexPatternSetIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegexMatchSetForProviderRegexMatchTupleRegexPatternSetIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a RegexPatternSet in waf to populate regexPatternSetId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetForProviderRegexMatchTupleRegexPatternSetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<RegexMatchSetForProviderRegexMatchTupleRegexPatternSetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetForProviderRegexMatchTupleRegexPatternSetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<RegexMatchSetForProviderRegexMatchTupleRegexPatternSetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<RegexMatchSetForProviderRegexMatchTupleRegexPatternSetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegexMatchSetForProviderRegexMatchTupleRegexPatternSetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegexMatchSetForProviderRegexMatchTupleRegexPatternSetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetInitProvider {
    /// The name or description of the Regex Match Set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The regular expression pattern that you want AWS WAF to search for in web requests, the location in requests that you want AWS WAF to search, and other settings. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "regexMatchTuple"
    )]
    #[builder(default, setter(strip_option))]
    pub regex_match_tuple: Option<Vec<RegexMatchSetInitProviderRegexMatchTuple>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetInitProviderRegexMatchTuple {
    /// The part of a web request that you want to search, such as a specified header or a query string.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fieldToMatch"
    )]
    #[builder(default, setter(strip_option))]
    pub field_to_match: Option<RegexMatchSetInitProviderRegexMatchTupleFieldToMatch>,
    /// The ID of a Regex Pattern Set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "regexPatternSetId"
    )]
    #[builder(default, setter(strip_option))]
    pub regex_pattern_set_id: Option<String>,
    /// Reference to a RegexPatternSet in waf to populate regexPatternSetId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "regexPatternSetIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub regex_pattern_set_id_ref:
        Option<RegexMatchSetInitProviderRegexMatchTupleRegexPatternSetIdRef>,
    /// Selector for a RegexPatternSet in waf to populate regexPatternSetId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "regexPatternSetIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub regex_pattern_set_id_selector:
        Option<RegexMatchSetInitProviderRegexMatchTupleRegexPatternSetIdSelector>,
    /// Text transformations used to eliminate unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
    /// e.g., CMD_LINE, HTML_ENTITY_DECODE or NONE.
    /// See docs
    /// for all supported values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "textTransformation"
    )]
    #[builder(default, setter(strip_option))]
    pub text_transformation: Option<String>,
}

/// The part of a web request that you want to search, such as a specified header or a query string.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetInitProviderRegexMatchTupleFieldToMatch {
    /// When type is HEADER, enter the name of the header that you want to search, e.g., User-Agent or Referer.
    /// If type is any other value, omit this field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub data: Option<String>,
    /// The part of the web request that you want AWS WAF to search for a specified string.
    /// e.g., HEADER, METHOD or BODY.
    /// See docs
    /// for all supported values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Reference to a RegexPatternSet in waf to populate regexPatternSetId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetInitProviderRegexMatchTupleRegexPatternSetIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<RegexMatchSetInitProviderRegexMatchTupleRegexPatternSetIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetInitProviderRegexMatchTupleRegexPatternSetIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<RegexMatchSetInitProviderRegexMatchTupleRegexPatternSetIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<RegexMatchSetInitProviderRegexMatchTupleRegexPatternSetIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegexMatchSetInitProviderRegexMatchTupleRegexPatternSetIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegexMatchSetInitProviderRegexMatchTupleRegexPatternSetIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a RegexPatternSet in waf to populate regexPatternSetId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetInitProviderRegexMatchTupleRegexPatternSetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<RegexMatchSetInitProviderRegexMatchTupleRegexPatternSetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetInitProviderRegexMatchTupleRegexPatternSetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<RegexMatchSetInitProviderRegexMatchTupleRegexPatternSetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<RegexMatchSetInitProviderRegexMatchTupleRegexPatternSetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegexMatchSetInitProviderRegexMatchTupleRegexPatternSetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegexMatchSetInitProviderRegexMatchTupleRegexPatternSetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<RegexMatchSetProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<RegexMatchSetProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<RegexMatchSetProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegexMatchSetProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegexMatchSetProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<RegexMatchSetPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<RegexMatchSetPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<RegexMatchSetPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<RegexMatchSetPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<RegexMatchSetPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegexMatchSetPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RegexMatchSetPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// RegexMatchSetStatus defines the observed state of RegexMatchSet.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<RegexMatchSetStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetStatusAtProvider {
    /// Amazon Resource Name (ARN)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// The ID of the WAF Regex Match Set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// The name or description of the Regex Match Set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The regular expression pattern that you want AWS WAF to search for in web requests, the location in requests that you want AWS WAF to search, and other settings. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "regexMatchTuple"
    )]
    #[builder(default, setter(strip_option))]
    pub regex_match_tuple: Option<Vec<RegexMatchSetStatusAtProviderRegexMatchTuple>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetStatusAtProviderRegexMatchTuple {
    /// The part of a web request that you want to search, such as a specified header or a query string.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fieldToMatch"
    )]
    #[builder(default, setter(strip_option))]
    pub field_to_match: Option<RegexMatchSetStatusAtProviderRegexMatchTupleFieldToMatch>,
    /// The ID of a Regex Pattern Set.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "regexPatternSetId"
    )]
    #[builder(default, setter(strip_option))]
    pub regex_pattern_set_id: Option<String>,
    /// Text transformations used to eliminate unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
    /// e.g., CMD_LINE, HTML_ENTITY_DECODE or NONE.
    /// See docs
    /// for all supported values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "textTransformation"
    )]
    #[builder(default, setter(strip_option))]
    pub text_transformation: Option<String>,
}

/// The part of a web request that you want to search, such as a specified header or a query string.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct RegexMatchSetStatusAtProviderRegexMatchTupleFieldToMatch {
    /// When type is HEADER, enter the name of the header that you want to search, e.g., User-Agent or Referer.
    /// If type is any other value, omit this field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub data: Option<String>,
    /// The part of the web request that you want AWS WAF to search for a specified string.
    /// e.g., HEADER, METHOD or BODY.
    /// See docs
    /// for all supported values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

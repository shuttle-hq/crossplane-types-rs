// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// CatalogTableSpec defines the desired state of CatalogTable
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "glue.aws.upbound.io",
    version = "v1beta2",
    kind = "CatalogTable",
    plural = "catalogtables"
)]
#[kube(status = "CatalogTableStatus")]
pub struct CatalogTableSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<CatalogTableDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: CatalogTableForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<CatalogTableInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<CatalogTableProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<CatalogTablePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<CatalogTableWriteConnectionSecretToRef>,
}

/// CatalogTableSpec defines the desired state of CatalogTable
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CatalogTableDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableForProvider {
    /// ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.
    #[serde(rename = "catalogId")]
    pub catalog_id: String,
    /// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseName"
    )]
    #[builder(default, setter(strip_option))]
    pub database_name: Option<String>,
    /// Reference to a CatalogDatabase in glue to populate databaseName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub database_name_ref: Option<CatalogTableForProviderDatabaseNameRef>,
    /// Selector for a CatalogDatabase in glue to populate databaseName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub database_name_selector: Option<CatalogTableForProviderDatabaseNameSelector>,
    /// Description of the table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Configuration block for open table formats. See open_table_format_input below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "openTableFormatInput"
    )]
    #[builder(default, setter(strip_option))]
    pub open_table_format_input: Option<CatalogTableForProviderOpenTableFormatInput>,
    /// Owner of the table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub owner: Option<String>,
    /// Properties associated with this table, as a list of key-value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<BTreeMap<String, String>>,
    /// Configuration block for a maximum of 3 partition indexes. See partition_index below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "partitionIndex"
    )]
    #[builder(default, setter(strip_option))]
    pub partition_index: Option<Vec<CatalogTableForProviderPartitionIndex>>,
    /// Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See partition_keys below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "partitionKeys"
    )]
    #[builder(default, setter(strip_option))]
    pub partition_keys: Option<Vec<CatalogTableForProviderPartitionKeys>>,
    /// Region of the target table.
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Retention time for this table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub retention: Option<f64>,
    /// Configuration block for information about the physical storage of this table. For more information, refer to the Glue Developer Guide. See storage_descriptor below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageDescriptor"
    )]
    #[builder(default, setter(strip_option))]
    pub storage_descriptor: Option<CatalogTableForProviderStorageDescriptor>,
    /// Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as ALTER TABLE and SHOW CREATE TABLE will fail if this argument is empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableType")]
    #[builder(default, setter(strip_option))]
    pub table_type: Option<String>,
    /// Configuration block of a target table for resource linking. See target_table below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetTable"
    )]
    #[builder(default, setter(strip_option))]
    pub target_table: Option<CatalogTableForProviderTargetTable>,
    /// If the table is a view, the expanded text of the view; otherwise null.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "viewExpandedText"
    )]
    #[builder(default, setter(strip_option))]
    pub view_expanded_text: Option<String>,
    /// If the table is a view, the original text of the view; otherwise null.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "viewOriginalText"
    )]
    #[builder(default, setter(strip_option))]
    pub view_original_text: Option<String>,
}

/// Reference to a CatalogDatabase in glue to populate databaseName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableForProviderDatabaseNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<CatalogTableForProviderDatabaseNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableForProviderDatabaseNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<CatalogTableForProviderDatabaseNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<CatalogTableForProviderDatabaseNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CatalogTableForProviderDatabaseNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CatalogTableForProviderDatabaseNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CatalogDatabase in glue to populate databaseName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableForProviderDatabaseNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<CatalogTableForProviderDatabaseNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableForProviderDatabaseNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<CatalogTableForProviderDatabaseNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<CatalogTableForProviderDatabaseNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CatalogTableForProviderDatabaseNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CatalogTableForProviderDatabaseNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block for open table formats. See open_table_format_input below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableForProviderOpenTableFormatInput {
    /// Configuration block for iceberg table config. See iceberg_input below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "icebergInput"
    )]
    #[builder(default, setter(strip_option))]
    pub iceberg_input: Option<CatalogTableForProviderOpenTableFormatInputIcebergInput>,
}

/// Configuration block for iceberg table config. See iceberg_input below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableForProviderOpenTableFormatInputIcebergInput {
    /// A required metadata operation. Can only be set to CREATE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metadataOperation"
    )]
    #[builder(default, setter(strip_option))]
    pub metadata_operation: Option<String>,
    /// The table version for the Iceberg table. Defaults to 2.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableForProviderPartitionIndex {
    /// Name of the partition index.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexName")]
    #[builder(default, setter(strip_option))]
    pub index_name: Option<String>,
    /// Keys for the partition index.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub keys: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableForProviderPartitionKeys {
    /// Free-form text comment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub comment: Option<String>,
    /// Name of the Partition Key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Datatype of data in the Partition Key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Configuration block for information about the physical storage of this table. For more information, refer to the Glue Developer Guide. See storage_descriptor below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableForProviderStorageDescriptor {
    /// List of locations that point to the path where a Delta table is located.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "additionalLocations"
    )]
    #[builder(default, setter(strip_option))]
    pub additional_locations: Option<Vec<String>>,
    /// List of reducer grouping columns, clustering columns, and bucketing columns in the table.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketColumns"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_columns: Option<Vec<String>>,
    /// Configuration block for columns in the table. See columns below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub columns: Option<Vec<CatalogTableForProviderStorageDescriptorColumns>>,
    /// Whether the data in the table is compressed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub compressed: Option<bool>,
    /// Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputFormat"
    )]
    #[builder(default, setter(strip_option))]
    pub input_format: Option<String>,
    /// Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub location: Option<String>,
    /// Must be specified if the table contains any dimension columns.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numberOfBuckets"
    )]
    #[builder(default, setter(strip_option))]
    pub number_of_buckets: Option<f64>,
    /// Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputFormat"
    )]
    #[builder(default, setter(strip_option))]
    pub output_format: Option<String>,
    /// User-supplied properties in key-value form.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<BTreeMap<String, String>>,
    /// Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "schemaReference"
    )]
    #[builder(default, setter(strip_option))]
    pub schema_reference: Option<CatalogTableForProviderStorageDescriptorSchemaReference>,
    /// Configuration block for serialization and deserialization ("SerDe") information. See ser_de_info below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serDeInfo")]
    #[builder(default, setter(strip_option))]
    pub ser_de_info: Option<CatalogTableForProviderStorageDescriptorSerDeInfo>,
    /// Configuration block with information about values that appear very frequently in a column (skewed values). See skewed_info below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skewedInfo"
    )]
    #[builder(default, setter(strip_option))]
    pub skewed_info: Option<CatalogTableForProviderStorageDescriptorSkewedInfo>,
    /// Configuration block for the sort order of each bucket in the table. See sort_columns below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sortColumns"
    )]
    #[builder(default, setter(strip_option))]
    pub sort_columns: Option<Vec<CatalogTableForProviderStorageDescriptorSortColumns>>,
    /// Whether the table data is stored in subdirectories.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storedAsSubDirectories"
    )]
    #[builder(default, setter(strip_option))]
    pub stored_as_sub_directories: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableForProviderStorageDescriptorColumns {
    /// Free-form text comment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub comment: Option<String>,
    /// Name of the Column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Key-value pairs defining properties associated with the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<BTreeMap<String, String>>,
    /// Datatype of data in the Column.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableForProviderStorageDescriptorSchemaReference {
    /// Configuration block that contains schema identity fields. Either this or the schema_version_id has to be provided. See schema_id below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schemaId")]
    #[builder(default, setter(strip_option))]
    pub schema_id: Option<CatalogTableForProviderStorageDescriptorSchemaReferenceSchemaId>,
    /// Unique ID assigned to a version of the schema. Either this or the schema_id has to be provided.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "schemaVersionId"
    )]
    #[builder(default, setter(strip_option))]
    pub schema_version_id: Option<String>,
    /// Version number of the schema.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "schemaVersionNumber"
    )]
    #[builder(default, setter(strip_option))]
    pub schema_version_number: Option<f64>,
}

/// Configuration block that contains schema identity fields. Either this or the schema_version_id has to be provided. See schema_id below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableForProviderStorageDescriptorSchemaReferenceSchemaId {
    /// Name of the schema registry that contains the schema. Must be provided when schema_name is specified and conflicts with schema_arn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "registryName"
    )]
    #[builder(default, setter(strip_option))]
    pub registry_name: Option<String>,
    /// ARN of the schema. One of schema_arn or schema_name has to be provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schemaArn")]
    #[builder(default, setter(strip_option))]
    pub schema_arn: Option<String>,
    /// Name of the schema. One of schema_arn or schema_name has to be provided.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "schemaName"
    )]
    #[builder(default, setter(strip_option))]
    pub schema_name: Option<String>,
}

/// Configuration block for serialization and deserialization ("SerDe") information. See ser_de_info below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableForProviderStorageDescriptorSerDeInfo {
    /// Name of the SerDe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Map of initialization parameters for the SerDe, in key-value form.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<BTreeMap<String, String>>,
    /// Usually the class that implements the SerDe. An example is org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serializationLibrary"
    )]
    #[builder(default, setter(strip_option))]
    pub serialization_library: Option<String>,
}

/// Configuration block with information about values that appear very frequently in a column (skewed values). See skewed_info below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableForProviderStorageDescriptorSkewedInfo {
    /// List of names of columns that contain skewed values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skewedColumnNames"
    )]
    #[builder(default, setter(strip_option))]
    pub skewed_column_names: Option<Vec<String>>,
    /// List of values that appear so frequently as to be considered skewed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skewedColumnValueLocationMaps"
    )]
    #[builder(default, setter(strip_option))]
    pub skewed_column_value_location_maps: Option<BTreeMap<String, String>>,
    /// Map of skewed values to the columns that contain them.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skewedColumnValues"
    )]
    #[builder(default, setter(strip_option))]
    pub skewed_column_values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableForProviderStorageDescriptorSortColumns {
    /// Name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub column: Option<String>,
    /// Whether the column is sorted in ascending (1) or descending order (0).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sortOrder")]
    #[builder(default, setter(strip_option))]
    pub sort_order: Option<f64>,
}

/// Configuration block of a target table for resource linking. See target_table below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableForProviderTargetTable {
    /// ID of the Data Catalog in which the table resides.
    #[serde(rename = "catalogId")]
    pub catalog_id: String,
    /// Name of the catalog database that contains the target table.
    #[serde(rename = "databaseName")]
    pub database_name: String,
    /// Name of the target table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Region of the target table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub region: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableInitProvider {
    /// Description of the table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Configuration block for open table formats. See open_table_format_input below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "openTableFormatInput"
    )]
    #[builder(default, setter(strip_option))]
    pub open_table_format_input: Option<CatalogTableInitProviderOpenTableFormatInput>,
    /// Owner of the table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub owner: Option<String>,
    /// Properties associated with this table, as a list of key-value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<BTreeMap<String, String>>,
    /// Configuration block for a maximum of 3 partition indexes. See partition_index below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "partitionIndex"
    )]
    #[builder(default, setter(strip_option))]
    pub partition_index: Option<Vec<CatalogTableInitProviderPartitionIndex>>,
    /// Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See partition_keys below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "partitionKeys"
    )]
    #[builder(default, setter(strip_option))]
    pub partition_keys: Option<Vec<CatalogTableInitProviderPartitionKeys>>,
    /// Retention time for this table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub retention: Option<f64>,
    /// Configuration block for information about the physical storage of this table. For more information, refer to the Glue Developer Guide. See storage_descriptor below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageDescriptor"
    )]
    #[builder(default, setter(strip_option))]
    pub storage_descriptor: Option<CatalogTableInitProviderStorageDescriptor>,
    /// Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as ALTER TABLE and SHOW CREATE TABLE will fail if this argument is empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableType")]
    #[builder(default, setter(strip_option))]
    pub table_type: Option<String>,
    /// Configuration block of a target table for resource linking. See target_table below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetTable"
    )]
    #[builder(default, setter(strip_option))]
    pub target_table: Option<CatalogTableInitProviderTargetTable>,
    /// If the table is a view, the expanded text of the view; otherwise null.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "viewExpandedText"
    )]
    #[builder(default, setter(strip_option))]
    pub view_expanded_text: Option<String>,
    /// If the table is a view, the original text of the view; otherwise null.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "viewOriginalText"
    )]
    #[builder(default, setter(strip_option))]
    pub view_original_text: Option<String>,
}

/// Configuration block for open table formats. See open_table_format_input below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableInitProviderOpenTableFormatInput {
    /// Configuration block for iceberg table config. See iceberg_input below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "icebergInput"
    )]
    #[builder(default, setter(strip_option))]
    pub iceberg_input: Option<CatalogTableInitProviderOpenTableFormatInputIcebergInput>,
}

/// Configuration block for iceberg table config. See iceberg_input below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableInitProviderOpenTableFormatInputIcebergInput {
    /// A required metadata operation. Can only be set to CREATE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metadataOperation"
    )]
    #[builder(default, setter(strip_option))]
    pub metadata_operation: Option<String>,
    /// The table version for the Iceberg table. Defaults to 2.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableInitProviderPartitionIndex {
    /// Name of the partition index.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexName")]
    #[builder(default, setter(strip_option))]
    pub index_name: Option<String>,
    /// Keys for the partition index.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub keys: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableInitProviderPartitionKeys {
    /// Free-form text comment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub comment: Option<String>,
    /// Name of the Partition Key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Datatype of data in the Partition Key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Configuration block for information about the physical storage of this table. For more information, refer to the Glue Developer Guide. See storage_descriptor below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableInitProviderStorageDescriptor {
    /// List of locations that point to the path where a Delta table is located.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "additionalLocations"
    )]
    #[builder(default, setter(strip_option))]
    pub additional_locations: Option<Vec<String>>,
    /// List of reducer grouping columns, clustering columns, and bucketing columns in the table.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketColumns"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_columns: Option<Vec<String>>,
    /// Configuration block for columns in the table. See columns below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub columns: Option<Vec<CatalogTableInitProviderStorageDescriptorColumns>>,
    /// Whether the data in the table is compressed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub compressed: Option<bool>,
    /// Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputFormat"
    )]
    #[builder(default, setter(strip_option))]
    pub input_format: Option<String>,
    /// Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub location: Option<String>,
    /// Must be specified if the table contains any dimension columns.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numberOfBuckets"
    )]
    #[builder(default, setter(strip_option))]
    pub number_of_buckets: Option<f64>,
    /// Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputFormat"
    )]
    #[builder(default, setter(strip_option))]
    pub output_format: Option<String>,
    /// User-supplied properties in key-value form.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<BTreeMap<String, String>>,
    /// Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "schemaReference"
    )]
    #[builder(default, setter(strip_option))]
    pub schema_reference: Option<CatalogTableInitProviderStorageDescriptorSchemaReference>,
    /// Configuration block for serialization and deserialization ("SerDe") information. See ser_de_info below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serDeInfo")]
    #[builder(default, setter(strip_option))]
    pub ser_de_info: Option<CatalogTableInitProviderStorageDescriptorSerDeInfo>,
    /// Configuration block with information about values that appear very frequently in a column (skewed values). See skewed_info below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skewedInfo"
    )]
    #[builder(default, setter(strip_option))]
    pub skewed_info: Option<CatalogTableInitProviderStorageDescriptorSkewedInfo>,
    /// Configuration block for the sort order of each bucket in the table. See sort_columns below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sortColumns"
    )]
    #[builder(default, setter(strip_option))]
    pub sort_columns: Option<Vec<CatalogTableInitProviderStorageDescriptorSortColumns>>,
    /// Whether the table data is stored in subdirectories.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storedAsSubDirectories"
    )]
    #[builder(default, setter(strip_option))]
    pub stored_as_sub_directories: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableInitProviderStorageDescriptorColumns {
    /// Free-form text comment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub comment: Option<String>,
    /// Name of the Column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Key-value pairs defining properties associated with the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<BTreeMap<String, String>>,
    /// Datatype of data in the Column.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableInitProviderStorageDescriptorSchemaReference {
    /// Configuration block that contains schema identity fields. Either this or the schema_version_id has to be provided. See schema_id below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schemaId")]
    #[builder(default, setter(strip_option))]
    pub schema_id: Option<CatalogTableInitProviderStorageDescriptorSchemaReferenceSchemaId>,
    /// Unique ID assigned to a version of the schema. Either this or the schema_id has to be provided.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "schemaVersionId"
    )]
    #[builder(default, setter(strip_option))]
    pub schema_version_id: Option<String>,
    /// Version number of the schema.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "schemaVersionNumber"
    )]
    #[builder(default, setter(strip_option))]
    pub schema_version_number: Option<f64>,
}

/// Configuration block that contains schema identity fields. Either this or the schema_version_id has to be provided. See schema_id below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableInitProviderStorageDescriptorSchemaReferenceSchemaId {
    /// Name of the schema registry that contains the schema. Must be provided when schema_name is specified and conflicts with schema_arn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "registryName"
    )]
    #[builder(default, setter(strip_option))]
    pub registry_name: Option<String>,
    /// ARN of the schema. One of schema_arn or schema_name has to be provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schemaArn")]
    #[builder(default, setter(strip_option))]
    pub schema_arn: Option<String>,
    /// Name of the schema. One of schema_arn or schema_name has to be provided.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "schemaName"
    )]
    #[builder(default, setter(strip_option))]
    pub schema_name: Option<String>,
}

/// Configuration block for serialization and deserialization ("SerDe") information. See ser_de_info below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableInitProviderStorageDescriptorSerDeInfo {
    /// Name of the SerDe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Map of initialization parameters for the SerDe, in key-value form.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<BTreeMap<String, String>>,
    /// Usually the class that implements the SerDe. An example is org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serializationLibrary"
    )]
    #[builder(default, setter(strip_option))]
    pub serialization_library: Option<String>,
}

/// Configuration block with information about values that appear very frequently in a column (skewed values). See skewed_info below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableInitProviderStorageDescriptorSkewedInfo {
    /// List of names of columns that contain skewed values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skewedColumnNames"
    )]
    #[builder(default, setter(strip_option))]
    pub skewed_column_names: Option<Vec<String>>,
    /// List of values that appear so frequently as to be considered skewed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skewedColumnValueLocationMaps"
    )]
    #[builder(default, setter(strip_option))]
    pub skewed_column_value_location_maps: Option<BTreeMap<String, String>>,
    /// Map of skewed values to the columns that contain them.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skewedColumnValues"
    )]
    #[builder(default, setter(strip_option))]
    pub skewed_column_values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableInitProviderStorageDescriptorSortColumns {
    /// Name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub column: Option<String>,
    /// Whether the column is sorted in ascending (1) or descending order (0).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sortOrder")]
    #[builder(default, setter(strip_option))]
    pub sort_order: Option<f64>,
}

/// Configuration block of a target table for resource linking. See target_table below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableInitProviderTargetTable {
    /// Name of the target table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<CatalogTableProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<CatalogTableProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<CatalogTableProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CatalogTableProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CatalogTableProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTablePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<CatalogTablePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<CatalogTablePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTablePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<CatalogTablePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTablePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<CatalogTablePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<CatalogTablePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CatalogTablePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CatalogTablePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTablePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// CatalogTableStatus defines the observed state of CatalogTable.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<CatalogTableStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableStatusAtProvider {
    /// The ARN of the Glue Table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogId")]
    #[builder(default, setter(strip_option))]
    pub catalog_id: Option<String>,
    /// Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseName"
    )]
    #[builder(default, setter(strip_option))]
    pub database_name: Option<String>,
    /// Description of the table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Catalog ID, Database name and of the name table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Configuration block for open table formats. See open_table_format_input below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "openTableFormatInput"
    )]
    #[builder(default, setter(strip_option))]
    pub open_table_format_input: Option<CatalogTableStatusAtProviderOpenTableFormatInput>,
    /// Owner of the table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub owner: Option<String>,
    /// Properties associated with this table, as a list of key-value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<BTreeMap<String, String>>,
    /// Configuration block for a maximum of 3 partition indexes. See partition_index below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "partitionIndex"
    )]
    #[builder(default, setter(strip_option))]
    pub partition_index: Option<Vec<CatalogTableStatusAtProviderPartitionIndex>>,
    /// Configuration block of columns by which the table is partitioned. Only primitive types are supported as partition keys. See partition_keys below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "partitionKeys"
    )]
    #[builder(default, setter(strip_option))]
    pub partition_keys: Option<Vec<CatalogTableStatusAtProviderPartitionKeys>>,
    /// Retention time for this table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub retention: Option<f64>,
    /// Configuration block for information about the physical storage of this table. For more information, refer to the Glue Developer Guide. See storage_descriptor below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageDescriptor"
    )]
    #[builder(default, setter(strip_option))]
    pub storage_descriptor: Option<CatalogTableStatusAtProviderStorageDescriptor>,
    /// Type of this table (EXTERNAL_TABLE, VIRTUAL_VIEW, etc.). While optional, some Athena DDL queries such as ALTER TABLE and SHOW CREATE TABLE will fail if this argument is empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableType")]
    #[builder(default, setter(strip_option))]
    pub table_type: Option<String>,
    /// Configuration block of a target table for resource linking. See target_table below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetTable"
    )]
    #[builder(default, setter(strip_option))]
    pub target_table: Option<CatalogTableStatusAtProviderTargetTable>,
    /// If the table is a view, the expanded text of the view; otherwise null.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "viewExpandedText"
    )]
    #[builder(default, setter(strip_option))]
    pub view_expanded_text: Option<String>,
    /// If the table is a view, the original text of the view; otherwise null.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "viewOriginalText"
    )]
    #[builder(default, setter(strip_option))]
    pub view_original_text: Option<String>,
}

/// Configuration block for open table formats. See open_table_format_input below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableStatusAtProviderOpenTableFormatInput {
    /// Configuration block for iceberg table config. See iceberg_input below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "icebergInput"
    )]
    #[builder(default, setter(strip_option))]
    pub iceberg_input: Option<CatalogTableStatusAtProviderOpenTableFormatInputIcebergInput>,
}

/// Configuration block for iceberg table config. See iceberg_input below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableStatusAtProviderOpenTableFormatInputIcebergInput {
    /// A required metadata operation. Can only be set to CREATE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metadataOperation"
    )]
    #[builder(default, setter(strip_option))]
    pub metadata_operation: Option<String>,
    /// The table version for the Iceberg table. Defaults to 2.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableStatusAtProviderPartitionIndex {
    /// Name of the partition index.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexName")]
    #[builder(default, setter(strip_option))]
    pub index_name: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "indexStatus"
    )]
    #[builder(default, setter(strip_option))]
    pub index_status: Option<String>,
    /// Keys for the partition index.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub keys: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableStatusAtProviderPartitionKeys {
    /// Free-form text comment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub comment: Option<String>,
    /// Name of the Partition Key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Datatype of data in the Partition Key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Configuration block for information about the physical storage of this table. For more information, refer to the Glue Developer Guide. See storage_descriptor below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableStatusAtProviderStorageDescriptor {
    /// List of locations that point to the path where a Delta table is located.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "additionalLocations"
    )]
    #[builder(default, setter(strip_option))]
    pub additional_locations: Option<Vec<String>>,
    /// List of reducer grouping columns, clustering columns, and bucketing columns in the table.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketColumns"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_columns: Option<Vec<String>>,
    /// Configuration block for columns in the table. See columns below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub columns: Option<Vec<CatalogTableStatusAtProviderStorageDescriptorColumns>>,
    /// Whether the data in the table is compressed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub compressed: Option<bool>,
    /// Input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputFormat"
    )]
    #[builder(default, setter(strip_option))]
    pub input_format: Option<String>,
    /// Physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub location: Option<String>,
    /// Must be specified if the table contains any dimension columns.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "numberOfBuckets"
    )]
    #[builder(default, setter(strip_option))]
    pub number_of_buckets: Option<f64>,
    /// Output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "outputFormat"
    )]
    #[builder(default, setter(strip_option))]
    pub output_format: Option<String>,
    /// User-supplied properties in key-value form.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<BTreeMap<String, String>>,
    /// Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "schemaReference"
    )]
    #[builder(default, setter(strip_option))]
    pub schema_reference: Option<CatalogTableStatusAtProviderStorageDescriptorSchemaReference>,
    /// Configuration block for serialization and deserialization ("SerDe") information. See ser_de_info below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serDeInfo")]
    #[builder(default, setter(strip_option))]
    pub ser_de_info: Option<CatalogTableStatusAtProviderStorageDescriptorSerDeInfo>,
    /// Configuration block with information about values that appear very frequently in a column (skewed values). See skewed_info below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skewedInfo"
    )]
    #[builder(default, setter(strip_option))]
    pub skewed_info: Option<CatalogTableStatusAtProviderStorageDescriptorSkewedInfo>,
    /// Configuration block for the sort order of each bucket in the table. See sort_columns below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sortColumns"
    )]
    #[builder(default, setter(strip_option))]
    pub sort_columns: Option<Vec<CatalogTableStatusAtProviderStorageDescriptorSortColumns>>,
    /// Whether the table data is stored in subdirectories.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storedAsSubDirectories"
    )]
    #[builder(default, setter(strip_option))]
    pub stored_as_sub_directories: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableStatusAtProviderStorageDescriptorColumns {
    /// Free-form text comment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub comment: Option<String>,
    /// Name of the Column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Key-value pairs defining properties associated with the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<BTreeMap<String, String>>,
    /// Datatype of data in the Column.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// Object that references a schema stored in the AWS Glue Schema Registry. When creating a table, you can pass an empty list of columns for the schema, and instead use a schema reference. See Schema Reference below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableStatusAtProviderStorageDescriptorSchemaReference {
    /// Configuration block that contains schema identity fields. Either this or the schema_version_id has to be provided. See schema_id below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schemaId")]
    #[builder(default, setter(strip_option))]
    pub schema_id: Option<CatalogTableStatusAtProviderStorageDescriptorSchemaReferenceSchemaId>,
    /// Unique ID assigned to a version of the schema. Either this or the schema_id has to be provided.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "schemaVersionId"
    )]
    #[builder(default, setter(strip_option))]
    pub schema_version_id: Option<String>,
    /// Version number of the schema.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "schemaVersionNumber"
    )]
    #[builder(default, setter(strip_option))]
    pub schema_version_number: Option<f64>,
}

/// Configuration block that contains schema identity fields. Either this or the schema_version_id has to be provided. See schema_id below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableStatusAtProviderStorageDescriptorSchemaReferenceSchemaId {
    /// Name of the schema registry that contains the schema. Must be provided when schema_name is specified and conflicts with schema_arn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "registryName"
    )]
    #[builder(default, setter(strip_option))]
    pub registry_name: Option<String>,
    /// ARN of the schema. One of schema_arn or schema_name has to be provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schemaArn")]
    #[builder(default, setter(strip_option))]
    pub schema_arn: Option<String>,
    /// Name of the schema. One of schema_arn or schema_name has to be provided.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "schemaName"
    )]
    #[builder(default, setter(strip_option))]
    pub schema_name: Option<String>,
}

/// Configuration block for serialization and deserialization ("SerDe") information. See ser_de_info below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableStatusAtProviderStorageDescriptorSerDeInfo {
    /// Name of the SerDe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Map of initialization parameters for the SerDe, in key-value form.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<BTreeMap<String, String>>,
    /// Usually the class that implements the SerDe. An example is org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serializationLibrary"
    )]
    #[builder(default, setter(strip_option))]
    pub serialization_library: Option<String>,
}

/// Configuration block with information about values that appear very frequently in a column (skewed values). See skewed_info below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableStatusAtProviderStorageDescriptorSkewedInfo {
    /// List of names of columns that contain skewed values.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skewedColumnNames"
    )]
    #[builder(default, setter(strip_option))]
    pub skewed_column_names: Option<Vec<String>>,
    /// List of values that appear so frequently as to be considered skewed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skewedColumnValueLocationMaps"
    )]
    #[builder(default, setter(strip_option))]
    pub skewed_column_value_location_maps: Option<BTreeMap<String, String>>,
    /// Map of skewed values to the columns that contain them.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skewedColumnValues"
    )]
    #[builder(default, setter(strip_option))]
    pub skewed_column_values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableStatusAtProviderStorageDescriptorSortColumns {
    /// Name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub column: Option<String>,
    /// Whether the column is sorted in ascending (1) or descending order (0).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sortOrder")]
    #[builder(default, setter(strip_option))]
    pub sort_order: Option<f64>,
}

/// Configuration block of a target table for resource linking. See target_table below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CatalogTableStatusAtProviderTargetTable {
    /// ID of the Data Catalog in which the table resides.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogId")]
    #[builder(default, setter(strip_option))]
    pub catalog_id: Option<String>,
    /// Name of the catalog database that contains the target table.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "databaseName"
    )]
    #[builder(default, setter(strip_option))]
    pub database_name: Option<String>,
    /// Name of the target table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Region of the target table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub region: Option<String>,
}

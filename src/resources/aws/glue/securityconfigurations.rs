// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// SecurityConfigurationSpec defines the desired state of SecurityConfiguration
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "glue.aws.upbound.io",
    version = "v1beta2",
    kind = "SecurityConfiguration",
    plural = "securityconfigurations"
)]
#[kube(status = "SecurityConfigurationStatus")]
pub struct SecurityConfigurationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<SecurityConfigurationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: SecurityConfigurationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<SecurityConfigurationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<SecurityConfigurationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<SecurityConfigurationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<SecurityConfigurationWriteConnectionSecretToRef>,
}

/// SecurityConfigurationSpec defines the desired state of SecurityConfiguration
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationForProvider {
    /// –  Configuration block containing encryption configuration. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_configuration: Option<SecurityConfigurationForProviderEncryptionConfiguration>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
}

/// –  Configuration block containing encryption configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationForProviderEncryptionConfiguration {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchEncryption"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_encryption:
        Option<SecurityConfigurationForProviderEncryptionConfigurationCloudwatchEncryption>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jobBookmarksEncryption"
    )]
    #[builder(default, setter(strip_option))]
    pub job_bookmarks_encryption:
        Option<SecurityConfigurationForProviderEncryptionConfigurationJobBookmarksEncryption>,
    /// A s3_encryption  block as described below, which contains encryption configuration for S3 data.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3Encryption"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_encryption: Option<SecurityConfigurationForProviderEncryptionConfigurationS3Encryption>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationForProviderEncryptionConfigurationCloudwatchEncryption {
    /// Encryption mode to use for CloudWatch data. Valid values: DISABLED, SSE-KMS. Default value: DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchEncryptionMode")]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_encryption_mode: Option<String>,
    /// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArnRef")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn_ref: Option<SecurityConfigurationForProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnRef>,
    /// Selector for a Key in kms to populate kmsKeyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArnSelector")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn_selector: Option<SecurityConfigurationForProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnSelector>,
}

/// Reference to a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationForProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SecurityConfigurationForProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationForProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SecurityConfigurationForProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SecurityConfigurationForProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationForProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationForProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationForProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SecurityConfigurationForProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationForProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SecurityConfigurationForProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SecurityConfigurationForProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationForProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationForProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationForProviderEncryptionConfigurationJobBookmarksEncryption {
    /// Encryption mode to use for job bookmarks data. Valid values: CSE-KMS, DISABLED. Default value: DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobBookmarksEncryptionMode")]
    #[builder(default, setter(strip_option))]
    pub job_bookmarks_encryption_mode: Option<String>,
    /// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArnRef")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn_ref: Option<SecurityConfigurationForProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnRef>,
    /// Selector for a Key in kms to populate kmsKeyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArnSelector")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn_selector: Option<SecurityConfigurationForProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnSelector>,
}

/// Reference to a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationForProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SecurityConfigurationForProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationForProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SecurityConfigurationForProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SecurityConfigurationForProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationForProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationForProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationForProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SecurityConfigurationForProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationForProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SecurityConfigurationForProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SecurityConfigurationForProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationForProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationForProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// A s3_encryption  block as described below, which contains encryption configuration for S3 data.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationForProviderEncryptionConfigurationS3Encryption {
    /// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn_ref:
        Option<SecurityConfigurationForProviderEncryptionConfigurationS3EncryptionKmsKeyArnRef>,
    /// Selector for a Key in kms to populate kmsKeyArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn_selector: Option<
        SecurityConfigurationForProviderEncryptionConfigurationS3EncryptionKmsKeyArnSelector,
    >,
    /// Encryption mode to use for S3 data. Valid values: DISABLED, SSE-KMS, SSE-S3. Default value: DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3EncryptionMode"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_encryption_mode: Option<String>,
}

/// Reference to a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationForProviderEncryptionConfigurationS3EncryptionKmsKeyArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        SecurityConfigurationForProviderEncryptionConfigurationS3EncryptionKmsKeyArnRefPolicy,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationForProviderEncryptionConfigurationS3EncryptionKmsKeyArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SecurityConfigurationForProviderEncryptionConfigurationS3EncryptionKmsKeyArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SecurityConfigurationForProviderEncryptionConfigurationS3EncryptionKmsKeyArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationForProviderEncryptionConfigurationS3EncryptionKmsKeyArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationForProviderEncryptionConfigurationS3EncryptionKmsKeyArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationForProviderEncryptionConfigurationS3EncryptionKmsKeyArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        SecurityConfigurationForProviderEncryptionConfigurationS3EncryptionKmsKeyArnSelectorPolicy,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationForProviderEncryptionConfigurationS3EncryptionKmsKeyArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SecurityConfigurationForProviderEncryptionConfigurationS3EncryptionKmsKeyArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SecurityConfigurationForProviderEncryptionConfigurationS3EncryptionKmsKeyArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationForProviderEncryptionConfigurationS3EncryptionKmsKeyArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationForProviderEncryptionConfigurationS3EncryptionKmsKeyArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationInitProvider {
    /// –  Configuration block containing encryption configuration. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_configuration: Option<SecurityConfigurationInitProviderEncryptionConfiguration>,
}

/// –  Configuration block containing encryption configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationInitProviderEncryptionConfiguration {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchEncryption"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_encryption:
        Option<SecurityConfigurationInitProviderEncryptionConfigurationCloudwatchEncryption>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jobBookmarksEncryption"
    )]
    #[builder(default, setter(strip_option))]
    pub job_bookmarks_encryption:
        Option<SecurityConfigurationInitProviderEncryptionConfigurationJobBookmarksEncryption>,
    /// A s3_encryption  block as described below, which contains encryption configuration for S3 data.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3Encryption"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_encryption: Option<SecurityConfigurationInitProviderEncryptionConfigurationS3Encryption>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationInitProviderEncryptionConfigurationCloudwatchEncryption {
    /// Encryption mode to use for CloudWatch data. Valid values: DISABLED, SSE-KMS. Default value: DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchEncryptionMode")]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_encryption_mode: Option<String>,
    /// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArnRef")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn_ref: Option<SecurityConfigurationInitProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnRef>,
    /// Selector for a Key in kms to populate kmsKeyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArnSelector")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn_selector: Option<SecurityConfigurationInitProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnSelector>,
}

/// Reference to a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationInitProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SecurityConfigurationInitProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationInitProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SecurityConfigurationInitProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SecurityConfigurationInitProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationInitProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationInitProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationInitProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SecurityConfigurationInitProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationInitProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SecurityConfigurationInitProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SecurityConfigurationInitProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationInitProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationInitProviderEncryptionConfigurationCloudwatchEncryptionKmsKeyArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationInitProviderEncryptionConfigurationJobBookmarksEncryption {
    /// Encryption mode to use for job bookmarks data. Valid values: CSE-KMS, DISABLED. Default value: DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobBookmarksEncryptionMode")]
    #[builder(default, setter(strip_option))]
    pub job_bookmarks_encryption_mode: Option<String>,
    /// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArnRef")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn_ref: Option<SecurityConfigurationInitProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnRef>,
    /// Selector for a Key in kms to populate kmsKeyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArnSelector")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn_selector: Option<SecurityConfigurationInitProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnSelector>,
}

/// Reference to a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationInitProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SecurityConfigurationInitProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationInitProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SecurityConfigurationInitProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SecurityConfigurationInitProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationInitProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationInitProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationInitProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SecurityConfigurationInitProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationInitProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SecurityConfigurationInitProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SecurityConfigurationInitProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationInitProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationInitProviderEncryptionConfigurationJobBookmarksEncryptionKmsKeyArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// A s3_encryption  block as described below, which contains encryption configuration for S3 data.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationInitProviderEncryptionConfigurationS3Encryption {
    /// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn_ref:
        Option<SecurityConfigurationInitProviderEncryptionConfigurationS3EncryptionKmsKeyArnRef>,
    /// Selector for a Key in kms to populate kmsKeyArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn_selector: Option<
        SecurityConfigurationInitProviderEncryptionConfigurationS3EncryptionKmsKeyArnSelector,
    >,
    /// Encryption mode to use for S3 data. Valid values: DISABLED, SSE-KMS, SSE-S3. Default value: DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3EncryptionMode"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_encryption_mode: Option<String>,
}

/// Reference to a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationInitProviderEncryptionConfigurationS3EncryptionKmsKeyArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        SecurityConfigurationInitProviderEncryptionConfigurationS3EncryptionKmsKeyArnRefPolicy,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationInitProviderEncryptionConfigurationS3EncryptionKmsKeyArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SecurityConfigurationInitProviderEncryptionConfigurationS3EncryptionKmsKeyArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SecurityConfigurationInitProviderEncryptionConfigurationS3EncryptionKmsKeyArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationInitProviderEncryptionConfigurationS3EncryptionKmsKeyArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationInitProviderEncryptionConfigurationS3EncryptionKmsKeyArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationInitProviderEncryptionConfigurationS3EncryptionKmsKeyArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        SecurityConfigurationInitProviderEncryptionConfigurationS3EncryptionKmsKeyArnSelectorPolicy,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationInitProviderEncryptionConfigurationS3EncryptionKmsKeyArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SecurityConfigurationInitProviderEncryptionConfigurationS3EncryptionKmsKeyArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SecurityConfigurationInitProviderEncryptionConfigurationS3EncryptionKmsKeyArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationInitProviderEncryptionConfigurationS3EncryptionKmsKeyArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationInitProviderEncryptionConfigurationS3EncryptionKmsKeyArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SecurityConfigurationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SecurityConfigurationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SecurityConfigurationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<SecurityConfigurationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<SecurityConfigurationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SecurityConfigurationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<SecurityConfigurationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SecurityConfigurationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SecurityConfigurationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// SecurityConfigurationStatus defines the observed state of SecurityConfiguration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<SecurityConfigurationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationStatusAtProvider {
    /// –  Configuration block containing encryption configuration. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_configuration:
        Option<SecurityConfigurationStatusAtProviderEncryptionConfiguration>,
    /// Glue security configuration name
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
}

/// –  Configuration block containing encryption configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationStatusAtProviderEncryptionConfiguration {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchEncryption"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_encryption:
        Option<SecurityConfigurationStatusAtProviderEncryptionConfigurationCloudwatchEncryption>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jobBookmarksEncryption"
    )]
    #[builder(default, setter(strip_option))]
    pub job_bookmarks_encryption:
        Option<SecurityConfigurationStatusAtProviderEncryptionConfigurationJobBookmarksEncryption>,
    /// A s3_encryption  block as described below, which contains encryption configuration for S3 data.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3Encryption"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_encryption:
        Option<SecurityConfigurationStatusAtProviderEncryptionConfigurationS3Encryption>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationStatusAtProviderEncryptionConfigurationCloudwatchEncryption {
    /// Encryption mode to use for CloudWatch data. Valid values: DISABLED, SSE-KMS. Default value: DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchEncryptionMode"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_encryption_mode: Option<String>,
    /// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationStatusAtProviderEncryptionConfigurationJobBookmarksEncryption {
    /// Encryption mode to use for job bookmarks data. Valid values: CSE-KMS, DISABLED. Default value: DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jobBookmarksEncryptionMode"
    )]
    #[builder(default, setter(strip_option))]
    pub job_bookmarks_encryption_mode: Option<String>,
    /// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn: Option<String>,
}

/// A s3_encryption  block as described below, which contains encryption configuration for S3 data.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SecurityConfigurationStatusAtProviderEncryptionConfigurationS3Encryption {
    /// Amazon Resource Name (ARN) of the KMS key to be used to encrypt the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn: Option<String>,
    /// Encryption mode to use for S3 data. Valid values: DISABLED, SSE-KMS, SSE-S3. Default value: DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3EncryptionMode"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_encryption_mode: Option<String>,
}

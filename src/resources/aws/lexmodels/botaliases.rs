// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// BotAliasSpec defines the desired state of BotAlias
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "lexmodels.aws.upbound.io",
    version = "v1beta2",
    kind = "BotAlias",
    plural = "botaliases"
)]
#[kube(status = "BotAliasStatus")]
pub struct BotAliasSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<BotAliasDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: BotAliasForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<BotAliasInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<BotAliasProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<BotAliasPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<BotAliasWriteConnectionSecretToRef>,
}

/// BotAliasSpec defines the desired state of BotAlias
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BotAliasDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BotAliasForProvider {
    /// The name of the bot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "botName")]
    #[builder(default, setter(strip_option))]
    pub bot_name: Option<String>,
    /// The version of the bot.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "botVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub bot_version: Option<String>,
    /// The settings that determine how Amazon Lex uses conversation logs for the alias. Attributes are documented under conversation_logs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conversationLogs"
    )]
    #[builder(default, setter(strip_option))]
    pub conversation_logs: Option<BotAliasForProviderConversationLogs>,
    /// A description of the alias. Must be less than or equal to 200 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
}

/// The settings that determine how Amazon Lex uses conversation logs for the alias. Attributes are documented under conversation_logs.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BotAliasForProviderConversationLogs {
    /// The Amazon Resource Name (ARN) of the IAM role used to write your logs to CloudWatch Logs or an S3 bucket. Must be between 20 and 2048 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "iamRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub iam_role_arn: Option<String>,
    /// The settings for your conversation logs. You can log text, audio, or both. Attributes are documented under log_settings.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub log_settings: Option<Vec<BotAliasForProviderConversationLogsLogSettings>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BotAliasForProviderConversationLogsLogSettings {
    /// The destination where logs are delivered. Options are CLOUDWATCH_LOGS or S3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub destination: Option<String>,
    /// The Amazon Resource Name (ARN) of the key used to encrypt audio logs in an S3 bucket. This can only be specified when destination is set to S3. Must be between 20 and 2048 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn: Option<String>,
    /// The type of logging that is enabled. Options are AUDIO or TEXT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logType")]
    #[builder(default, setter(strip_option))]
    pub log_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the CloudWatch Logs log group or S3 bucket where the logs are delivered. Must be less than or equal to 2048 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_arn: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BotAliasInitProvider {
    /// The name of the bot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "botName")]
    #[builder(default, setter(strip_option))]
    pub bot_name: Option<String>,
    /// The version of the bot.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "botVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub bot_version: Option<String>,
    /// The settings that determine how Amazon Lex uses conversation logs for the alias. Attributes are documented under conversation_logs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conversationLogs"
    )]
    #[builder(default, setter(strip_option))]
    pub conversation_logs: Option<BotAliasInitProviderConversationLogs>,
    /// A description of the alias. Must be less than or equal to 200 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
}

/// The settings that determine how Amazon Lex uses conversation logs for the alias. Attributes are documented under conversation_logs.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BotAliasInitProviderConversationLogs {
    /// The Amazon Resource Name (ARN) of the IAM role used to write your logs to CloudWatch Logs or an S3 bucket. Must be between 20 and 2048 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "iamRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub iam_role_arn: Option<String>,
    /// The settings for your conversation logs. You can log text, audio, or both. Attributes are documented under log_settings.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub log_settings: Option<Vec<BotAliasInitProviderConversationLogsLogSettings>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BotAliasInitProviderConversationLogsLogSettings {
    /// The destination where logs are delivered. Options are CLOUDWATCH_LOGS or S3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub destination: Option<String>,
    /// The Amazon Resource Name (ARN) of the key used to encrypt audio logs in an S3 bucket. This can only be specified when destination is set to S3. Must be between 20 and 2048 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn: Option<String>,
    /// The type of logging that is enabled. Options are AUDIO or TEXT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logType")]
    #[builder(default, setter(strip_option))]
    pub log_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the CloudWatch Logs log group or S3 bucket where the logs are delivered. Must be less than or equal to 2048 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_arn: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BotAliasProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<BotAliasProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BotAliasProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<BotAliasProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<BotAliasProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BotAliasProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BotAliasProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BotAliasPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<BotAliasPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<BotAliasPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BotAliasPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<BotAliasPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BotAliasPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<BotAliasPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<BotAliasPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BotAliasPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BotAliasPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BotAliasPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BotAliasWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// BotAliasStatus defines the observed state of BotAlias.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BotAliasStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<BotAliasStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BotAliasStatusAtProvider {
    /// The ARN of the bot alias.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// The name of the bot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "botName")]
    #[builder(default, setter(strip_option))]
    pub bot_name: Option<String>,
    /// The version of the bot.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "botVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub bot_version: Option<String>,
    /// Checksum of the bot alias.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub checksum: Option<String>,
    /// The settings that determine how Amazon Lex uses conversation logs for the alias. Attributes are documented under conversation_logs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "conversationLogs"
    )]
    #[builder(default, setter(strip_option))]
    pub conversation_logs: Option<BotAliasStatusAtProviderConversationLogs>,
    /// The date that the bot alias was created.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createdDate"
    )]
    #[builder(default, setter(strip_option))]
    pub created_date: Option<String>,
    /// A description of the alias. Must be less than or equal to 200 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// The date that the bot alias was updated. When you create a resource, the creation date and the last updated date are the same.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastUpdatedDate"
    )]
    #[builder(default, setter(strip_option))]
    pub last_updated_date: Option<String>,
}

/// The settings that determine how Amazon Lex uses conversation logs for the alias. Attributes are documented under conversation_logs.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BotAliasStatusAtProviderConversationLogs {
    /// The Amazon Resource Name (ARN) of the IAM role used to write your logs to CloudWatch Logs or an S3 bucket. Must be between 20 and 2048 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "iamRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub iam_role_arn: Option<String>,
    /// The settings for your conversation logs. You can log text, audio, or both. Attributes are documented under log_settings.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logSettings"
    )]
    #[builder(default, setter(strip_option))]
    pub log_settings: Option<Vec<BotAliasStatusAtProviderConversationLogsLogSettings>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct BotAliasStatusAtProviderConversationLogsLogSettings {
    /// The destination where logs are delivered. Options are CLOUDWATCH_LOGS or S3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub destination: Option<String>,
    /// The Amazon Resource Name (ARN) of the key used to encrypt audio logs in an S3 bucket. This can only be specified when destination is set to S3. Must be between 20 and 2048 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    #[builder(default, setter(strip_option))]
    pub kms_key_arn: Option<String>,
    /// The type of logging that is enabled. Options are AUDIO or TEXT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logType")]
    #[builder(default, setter(strip_option))]
    pub log_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the CloudWatch Logs log group or S3 bucket where the logs are delivered. Must be less than or equal to 2048 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_arn: Option<String>,
    /// (Computed) The prefix of the S3 object key for AUDIO logs or the log stream name for TEXT logs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourcePrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_prefix: Option<String>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// VirtualServiceSpec defines the desired state of VirtualService
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "appmesh.aws.upbound.io",
    version = "v1beta2",
    kind = "VirtualService",
    plural = "virtualservices"
)]
#[kube(status = "VirtualServiceStatus")]
pub struct VirtualServiceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<VirtualServiceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: VirtualServiceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<VirtualServiceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<VirtualServiceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<VirtualServicePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<VirtualServiceWriteConnectionSecretToRef>,
}

/// VirtualServiceSpec defines the desired state of VirtualService
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceForProvider {
    /// Name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshName")]
    #[builder(default, setter(strip_option))]
    pub mesh_name: Option<String>,
    /// Reference to a Mesh in appmesh to populate meshName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "meshNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub mesh_name_ref: Option<VirtualServiceForProviderMeshNameRef>,
    /// Selector for a Mesh in appmesh to populate meshName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "meshNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub mesh_name_selector: Option<VirtualServiceForProviderMeshNameSelector>,
    /// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshOwner")]
    #[builder(default, setter(strip_option))]
    pub mesh_owner: Option<String>,
    /// Name to use for the virtual service. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Virtual service specification to apply.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub spec: Option<VirtualServiceForProviderSpec>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

/// Reference to a Mesh in appmesh to populate meshName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceForProviderMeshNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VirtualServiceForProviderMeshNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceForProviderMeshNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VirtualServiceForProviderMeshNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VirtualServiceForProviderMeshNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceForProviderMeshNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceForProviderMeshNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Mesh in appmesh to populate meshName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceForProviderMeshNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VirtualServiceForProviderMeshNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceForProviderMeshNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VirtualServiceForProviderMeshNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VirtualServiceForProviderMeshNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceForProviderMeshNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceForProviderMeshNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Virtual service specification to apply.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceForProviderSpec {
    /// App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub provider: Option<VirtualServiceForProviderSpecProvider>,
}

/// App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceForProviderSpecProvider {
    /// Virtual node associated with a virtual service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualNode"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_node: Option<VirtualServiceForProviderSpecProviderVirtualNode>,
    /// Virtual router associated with a virtual service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualRouter"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_router: Option<VirtualServiceForProviderSpecProviderVirtualRouter>,
}

/// Virtual node associated with a virtual service.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceForProviderSpecProviderVirtualNode {
    /// Name of the virtual node that is acting as a service provider. Must be between 1 and 255 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualNodeName"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_node_name: Option<String>,
    /// Reference to a VirtualNode in appmesh to populate virtualNodeName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualNodeNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_node_name_ref:
        Option<VirtualServiceForProviderSpecProviderVirtualNodeVirtualNodeNameRef>,
    /// Selector for a VirtualNode in appmesh to populate virtualNodeName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualNodeNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_node_name_selector:
        Option<VirtualServiceForProviderSpecProviderVirtualNodeVirtualNodeNameSelector>,
}

/// Reference to a VirtualNode in appmesh to populate virtualNodeName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceForProviderSpecProviderVirtualNodeVirtualNodeNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VirtualServiceForProviderSpecProviderVirtualNodeVirtualNodeNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceForProviderSpecProviderVirtualNodeVirtualNodeNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<VirtualServiceForProviderSpecProviderVirtualNodeVirtualNodeNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<VirtualServiceForProviderSpecProviderVirtualNodeVirtualNodeNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceForProviderSpecProviderVirtualNodeVirtualNodeNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceForProviderSpecProviderVirtualNodeVirtualNodeNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VirtualNode in appmesh to populate virtualNodeName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceForProviderSpecProviderVirtualNodeVirtualNodeNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<VirtualServiceForProviderSpecProviderVirtualNodeVirtualNodeNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceForProviderSpecProviderVirtualNodeVirtualNodeNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<
        VirtualServiceForProviderSpecProviderVirtualNodeVirtualNodeNameSelectorPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<
        VirtualServiceForProviderSpecProviderVirtualNodeVirtualNodeNameSelectorPolicyResolve,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceForProviderSpecProviderVirtualNodeVirtualNodeNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceForProviderSpecProviderVirtualNodeVirtualNodeNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Virtual router associated with a virtual service.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceForProviderSpecProviderVirtualRouter {
    /// Name of the virtual router that is acting as a service provider. Must be between 1 and 255 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualRouterName"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_router_name: Option<String>,
    /// Reference to a VirtualRouter in appmesh to populate virtualRouterName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualRouterNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_router_name_ref:
        Option<VirtualServiceForProviderSpecProviderVirtualRouterVirtualRouterNameRef>,
    /// Selector for a VirtualRouter in appmesh to populate virtualRouterName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualRouterNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_router_name_selector:
        Option<VirtualServiceForProviderSpecProviderVirtualRouterVirtualRouterNameSelector>,
}

/// Reference to a VirtualRouter in appmesh to populate virtualRouterName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceForProviderSpecProviderVirtualRouterVirtualRouterNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<VirtualServiceForProviderSpecProviderVirtualRouterVirtualRouterNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceForProviderSpecProviderVirtualRouterVirtualRouterNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<
        VirtualServiceForProviderSpecProviderVirtualRouterVirtualRouterNameRefPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<VirtualServiceForProviderSpecProviderVirtualRouterVirtualRouterNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceForProviderSpecProviderVirtualRouterVirtualRouterNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceForProviderSpecProviderVirtualRouterVirtualRouterNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VirtualRouter in appmesh to populate virtualRouterName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceForProviderSpecProviderVirtualRouterVirtualRouterNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<VirtualServiceForProviderSpecProviderVirtualRouterVirtualRouterNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceForProviderSpecProviderVirtualRouterVirtualRouterNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<
        VirtualServiceForProviderSpecProviderVirtualRouterVirtualRouterNameSelectorPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<
        VirtualServiceForProviderSpecProviderVirtualRouterVirtualRouterNameSelectorPolicyResolve,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceForProviderSpecProviderVirtualRouterVirtualRouterNameSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceForProviderSpecProviderVirtualRouterVirtualRouterNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceInitProvider {
    /// Name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshName")]
    #[builder(default, setter(strip_option))]
    pub mesh_name: Option<String>,
    /// Reference to a Mesh in appmesh to populate meshName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "meshNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub mesh_name_ref: Option<VirtualServiceInitProviderMeshNameRef>,
    /// Selector for a Mesh in appmesh to populate meshName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "meshNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub mesh_name_selector: Option<VirtualServiceInitProviderMeshNameSelector>,
    /// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshOwner")]
    #[builder(default, setter(strip_option))]
    pub mesh_owner: Option<String>,
    /// Name to use for the virtual service. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Virtual service specification to apply.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub spec: Option<VirtualServiceInitProviderSpec>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

/// Reference to a Mesh in appmesh to populate meshName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceInitProviderMeshNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VirtualServiceInitProviderMeshNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceInitProviderMeshNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VirtualServiceInitProviderMeshNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VirtualServiceInitProviderMeshNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceInitProviderMeshNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceInitProviderMeshNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Mesh in appmesh to populate meshName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceInitProviderMeshNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VirtualServiceInitProviderMeshNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceInitProviderMeshNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VirtualServiceInitProviderMeshNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VirtualServiceInitProviderMeshNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceInitProviderMeshNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceInitProviderMeshNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Virtual service specification to apply.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceInitProviderSpec {
    /// App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub provider: Option<VirtualServiceInitProviderSpecProvider>,
}

/// App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceInitProviderSpecProvider {
    /// Virtual node associated with a virtual service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualNode"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_node: Option<VirtualServiceInitProviderSpecProviderVirtualNode>,
    /// Virtual router associated with a virtual service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualRouter"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_router: Option<VirtualServiceInitProviderSpecProviderVirtualRouter>,
}

/// Virtual node associated with a virtual service.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceInitProviderSpecProviderVirtualNode {
    /// Name of the virtual node that is acting as a service provider. Must be between 1 and 255 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualNodeName"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_node_name: Option<String>,
    /// Reference to a VirtualNode in appmesh to populate virtualNodeName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualNodeNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_node_name_ref:
        Option<VirtualServiceInitProviderSpecProviderVirtualNodeVirtualNodeNameRef>,
    /// Selector for a VirtualNode in appmesh to populate virtualNodeName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualNodeNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_node_name_selector:
        Option<VirtualServiceInitProviderSpecProviderVirtualNodeVirtualNodeNameSelector>,
}

/// Reference to a VirtualNode in appmesh to populate virtualNodeName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceInitProviderSpecProviderVirtualNodeVirtualNodeNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VirtualServiceInitProviderSpecProviderVirtualNodeVirtualNodeNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceInitProviderSpecProviderVirtualNodeVirtualNodeNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<VirtualServiceInitProviderSpecProviderVirtualNodeVirtualNodeNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<VirtualServiceInitProviderSpecProviderVirtualNodeVirtualNodeNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceInitProviderSpecProviderVirtualNodeVirtualNodeNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceInitProviderSpecProviderVirtualNodeVirtualNodeNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VirtualNode in appmesh to populate virtualNodeName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceInitProviderSpecProviderVirtualNodeVirtualNodeNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<VirtualServiceInitProviderSpecProviderVirtualNodeVirtualNodeNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceInitProviderSpecProviderVirtualNodeVirtualNodeNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<
        VirtualServiceInitProviderSpecProviderVirtualNodeVirtualNodeNameSelectorPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<
        VirtualServiceInitProviderSpecProviderVirtualNodeVirtualNodeNameSelectorPolicyResolve,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceInitProviderSpecProviderVirtualNodeVirtualNodeNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceInitProviderSpecProviderVirtualNodeVirtualNodeNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Virtual router associated with a virtual service.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceInitProviderSpecProviderVirtualRouter {
    /// Name of the virtual router that is acting as a service provider. Must be between 1 and 255 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualRouterName"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_router_name: Option<String>,
    /// Reference to a VirtualRouter in appmesh to populate virtualRouterName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualRouterNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_router_name_ref:
        Option<VirtualServiceInitProviderSpecProviderVirtualRouterVirtualRouterNameRef>,
    /// Selector for a VirtualRouter in appmesh to populate virtualRouterName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualRouterNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_router_name_selector:
        Option<VirtualServiceInitProviderSpecProviderVirtualRouterVirtualRouterNameSelector>,
}

/// Reference to a VirtualRouter in appmesh to populate virtualRouterName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceInitProviderSpecProviderVirtualRouterVirtualRouterNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<VirtualServiceInitProviderSpecProviderVirtualRouterVirtualRouterNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceInitProviderSpecProviderVirtualRouterVirtualRouterNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<
        VirtualServiceInitProviderSpecProviderVirtualRouterVirtualRouterNameRefPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<
        VirtualServiceInitProviderSpecProviderVirtualRouterVirtualRouterNameRefPolicyResolve,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceInitProviderSpecProviderVirtualRouterVirtualRouterNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceInitProviderSpecProviderVirtualRouterVirtualRouterNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VirtualRouter in appmesh to populate virtualRouterName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceInitProviderSpecProviderVirtualRouterVirtualRouterNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<VirtualServiceInitProviderSpecProviderVirtualRouterVirtualRouterNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceInitProviderSpecProviderVirtualRouterVirtualRouterNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VirtualServiceInitProviderSpecProviderVirtualRouterVirtualRouterNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VirtualServiceInitProviderSpecProviderVirtualRouterVirtualRouterNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceInitProviderSpecProviderVirtualRouterVirtualRouterNameSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceInitProviderSpecProviderVirtualRouterVirtualRouterNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VirtualServiceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VirtualServiceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VirtualServiceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServiceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServicePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<VirtualServicePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<VirtualServicePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServicePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<VirtualServicePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServicePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<VirtualServicePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<VirtualServicePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServicePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualServicePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServicePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// VirtualServiceStatus defines the observed state of VirtualService.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<VirtualServiceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceStatusAtProvider {
    /// ARN of the virtual service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Creation date of the virtual service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createdDate"
    )]
    #[builder(default, setter(strip_option))]
    pub created_date: Option<String>,
    /// ID of the virtual service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Last update date of the virtual service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastUpdatedDate"
    )]
    #[builder(default, setter(strip_option))]
    pub last_updated_date: Option<String>,
    /// Name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshName")]
    #[builder(default, setter(strip_option))]
    pub mesh_name: Option<String>,
    /// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshOwner")]
    #[builder(default, setter(strip_option))]
    pub mesh_owner: Option<String>,
    /// Name to use for the virtual service. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Resource owner's AWS account ID.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceOwner"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_owner: Option<String>,
    /// Virtual service specification to apply.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub spec: Option<VirtualServiceStatusAtProviderSpec>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
}

/// Virtual service specification to apply.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceStatusAtProviderSpec {
    /// App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub provider: Option<VirtualServiceStatusAtProviderSpecProvider>,
}

/// App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceStatusAtProviderSpecProvider {
    /// Virtual node associated with a virtual service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualNode"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_node: Option<VirtualServiceStatusAtProviderSpecProviderVirtualNode>,
    /// Virtual router associated with a virtual service.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualRouter"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_router: Option<VirtualServiceStatusAtProviderSpecProviderVirtualRouter>,
}

/// Virtual node associated with a virtual service.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceStatusAtProviderSpecProviderVirtualNode {
    /// Name of the virtual node that is acting as a service provider. Must be between 1 and 255 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualNodeName"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_node_name: Option<String>,
}

/// Virtual router associated with a virtual service.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct VirtualServiceStatusAtProviderSpecProviderVirtualRouter {
    /// Name of the virtual router that is acting as a service provider. Must be between 1 and 255 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualRouterName"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_router_name: Option<String>,
}

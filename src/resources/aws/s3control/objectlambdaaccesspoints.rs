// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ObjectLambdaAccessPointSpec defines the desired state of ObjectLambdaAccessPoint
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "s3control.aws.upbound.io",
    version = "v1beta2",
    kind = "ObjectLambdaAccessPoint",
    plural = "objectlambdaaccesspoints"
)]
#[kube(status = "ObjectLambdaAccessPointStatus")]
pub struct ObjectLambdaAccessPointSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<ObjectLambdaAccessPointDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ObjectLambdaAccessPointForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<ObjectLambdaAccessPointInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<ObjectLambdaAccessPointProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<ObjectLambdaAccessPointPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<ObjectLambdaAccessPointWriteConnectionSecretToRef>,
}

/// ObjectLambdaAccessPointSpec defines the desired state of ObjectLambdaAccessPoint
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointForProvider {
    /// The AWS account ID for the owner of the bucket for which you want to create an Object Lambda Access Point.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default, setter(strip_option))]
    pub account_id: Option<String>,
    /// A configuration block containing details about the Object Lambda Access Point. See Configuration below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub configuration: Option<ObjectLambdaAccessPointForProviderConfiguration>,
    /// The name for this Object Lambda Access Point.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
}

/// A configuration block containing details about the Object Lambda Access Point. See Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointForProviderConfiguration {
    /// Allowed features. Valid values: GetObject-Range, GetObject-PartNumber.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowedFeatures"
    )]
    #[builder(default, setter(strip_option))]
    pub allowed_features: Option<Vec<String>>,
    /// Whether or not the CloudWatch metrics configuration is enabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchMetricsEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_metrics_enabled: Option<bool>,
    /// Standard access point associated with the Object Lambda Access Point.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supportingAccessPoint"
    )]
    #[builder(default, setter(strip_option))]
    pub supporting_access_point: Option<String>,
    /// Reference to a AccessPoint in s3control to populate supportingAccessPoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supportingAccessPointRef"
    )]
    #[builder(default, setter(strip_option))]
    pub supporting_access_point_ref:
        Option<ObjectLambdaAccessPointForProviderConfigurationSupportingAccessPointRef>,
    /// Selector for a AccessPoint in s3control to populate supportingAccessPoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supportingAccessPointSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub supporting_access_point_selector:
        Option<ObjectLambdaAccessPointForProviderConfigurationSupportingAccessPointSelector>,
    /// List of transformation configurations for the Object Lambda Access Point. See Transformation Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transformationConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub transformation_configuration:
        Option<Vec<ObjectLambdaAccessPointForProviderConfigurationTransformationConfiguration>>,
}

/// Reference to a AccessPoint in s3control to populate supportingAccessPoint.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointForProviderConfigurationSupportingAccessPointRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<ObjectLambdaAccessPointForProviderConfigurationSupportingAccessPointRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointForProviderConfigurationSupportingAccessPointRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<
        ObjectLambdaAccessPointForProviderConfigurationSupportingAccessPointRefPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<
        ObjectLambdaAccessPointForProviderConfigurationSupportingAccessPointRefPolicyResolve,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointForProviderConfigurationSupportingAccessPointRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointForProviderConfigurationSupportingAccessPointRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a AccessPoint in s3control to populate supportingAccessPoint.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointForProviderConfigurationSupportingAccessPointSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<ObjectLambdaAccessPointForProviderConfigurationSupportingAccessPointSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointForProviderConfigurationSupportingAccessPointSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ObjectLambdaAccessPointForProviderConfigurationSupportingAccessPointSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ObjectLambdaAccessPointForProviderConfigurationSupportingAccessPointSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointForProviderConfigurationSupportingAccessPointSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointForProviderConfigurationSupportingAccessPointSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointForProviderConfigurationTransformationConfiguration {
    /// The actions of an Object Lambda Access Point configuration. Valid values: GetObject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub actions: Option<Vec<String>>,
    /// The content transformation of an Object Lambda Access Point configuration. See Content Transformation below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentTransformation")]
    #[builder(default, setter(strip_option))]
    pub content_transformation: Option<ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformation>,
}

/// The content transformation of an Object Lambda Access Point configuration. See Content Transformation below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformation {
    /// Configuration for an AWS Lambda function. See AWS Lambda below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsLambda")]
    #[builder(default, setter(strip_option))]
    pub aws_lambda: Option<ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformationAwsLambda>,
}

/// Configuration for an AWS Lambda function. See AWS Lambda below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformationAwsLambda {
    /// The Amazon Resource Name (ARN) of the AWS Lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionArn")]
    #[builder(default, setter(strip_option))]
    pub function_arn: Option<String>,
    /// Reference to a Function in lambda to populate functionArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionArnRef")]
    #[builder(default, setter(strip_option))]
    pub function_arn_ref: Option<ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnRef>,
    /// Selector for a Function in lambda to populate functionArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionArnSelector")]
    #[builder(default, setter(strip_option))]
    pub function_arn_selector: Option<ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnSelector>,
    /// Additional JSON that provides supplemental data to the Lambda function used to transform objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionPayload")]
    #[builder(default, setter(strip_option))]
    pub function_payload: Option<String>,
}

/// Reference to a Function in lambda to populate functionArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Function in lambda to populate functionArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointForProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointInitProvider {
    /// The AWS account ID for the owner of the bucket for which you want to create an Object Lambda Access Point.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default, setter(strip_option))]
    pub account_id: Option<String>,
    /// A configuration block containing details about the Object Lambda Access Point. See Configuration below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub configuration: Option<ObjectLambdaAccessPointInitProviderConfiguration>,
    /// The name for this Object Lambda Access Point.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
}

/// A configuration block containing details about the Object Lambda Access Point. See Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointInitProviderConfiguration {
    /// Allowed features. Valid values: GetObject-Range, GetObject-PartNumber.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowedFeatures"
    )]
    #[builder(default, setter(strip_option))]
    pub allowed_features: Option<Vec<String>>,
    /// Whether or not the CloudWatch metrics configuration is enabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchMetricsEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_metrics_enabled: Option<bool>,
    /// Standard access point associated with the Object Lambda Access Point.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supportingAccessPoint"
    )]
    #[builder(default, setter(strip_option))]
    pub supporting_access_point: Option<String>,
    /// Reference to a AccessPoint in s3control to populate supportingAccessPoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supportingAccessPointRef"
    )]
    #[builder(default, setter(strip_option))]
    pub supporting_access_point_ref:
        Option<ObjectLambdaAccessPointInitProviderConfigurationSupportingAccessPointRef>,
    /// Selector for a AccessPoint in s3control to populate supportingAccessPoint.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supportingAccessPointSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub supporting_access_point_selector:
        Option<ObjectLambdaAccessPointInitProviderConfigurationSupportingAccessPointSelector>,
    /// List of transformation configurations for the Object Lambda Access Point. See Transformation Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transformationConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub transformation_configuration:
        Option<Vec<ObjectLambdaAccessPointInitProviderConfigurationTransformationConfiguration>>,
}

/// Reference to a AccessPoint in s3control to populate supportingAccessPoint.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointInitProviderConfigurationSupportingAccessPointRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<ObjectLambdaAccessPointInitProviderConfigurationSupportingAccessPointRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointInitProviderConfigurationSupportingAccessPointRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<
        ObjectLambdaAccessPointInitProviderConfigurationSupportingAccessPointRefPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<
        ObjectLambdaAccessPointInitProviderConfigurationSupportingAccessPointRefPolicyResolve,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointInitProviderConfigurationSupportingAccessPointRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointInitProviderConfigurationSupportingAccessPointRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a AccessPoint in s3control to populate supportingAccessPoint.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointInitProviderConfigurationSupportingAccessPointSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<ObjectLambdaAccessPointInitProviderConfigurationSupportingAccessPointSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointInitProviderConfigurationSupportingAccessPointSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ObjectLambdaAccessPointInitProviderConfigurationSupportingAccessPointSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ObjectLambdaAccessPointInitProviderConfigurationSupportingAccessPointSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointInitProviderConfigurationSupportingAccessPointSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointInitProviderConfigurationSupportingAccessPointSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointInitProviderConfigurationTransformationConfiguration {
    /// The actions of an Object Lambda Access Point configuration. Valid values: GetObject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub actions: Option<Vec<String>>,
    /// The content transformation of an Object Lambda Access Point configuration. See Content Transformation below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentTransformation")]
    #[builder(default, setter(strip_option))]
    pub content_transformation: Option<ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformation>,
}

/// The content transformation of an Object Lambda Access Point configuration. See Content Transformation below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformation {
    /// Configuration for an AWS Lambda function. See AWS Lambda below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsLambda")]
    #[builder(default, setter(strip_option))]
    pub aws_lambda: Option<ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformationAwsLambda>,
}

/// Configuration for an AWS Lambda function. See AWS Lambda below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformationAwsLambda {
    /// The Amazon Resource Name (ARN) of the AWS Lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionArn")]
    #[builder(default, setter(strip_option))]
    pub function_arn: Option<String>,
    /// Reference to a Function in lambda to populate functionArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionArnRef")]
    #[builder(default, setter(strip_option))]
    pub function_arn_ref: Option<ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnRef>,
    /// Selector for a Function in lambda to populate functionArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionArnSelector")]
    #[builder(default, setter(strip_option))]
    pub function_arn_selector: Option<ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnSelector>,
    /// Additional JSON that provides supplemental data to the Lambda function used to transform objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionPayload")]
    #[builder(default, setter(strip_option))]
    pub function_payload: Option<String>,
}

/// Reference to a Function in lambda to populate functionArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Function in lambda to populate functionArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointInitProviderConfigurationTransformationConfigurationContentTransformationAwsLambdaFunctionArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ObjectLambdaAccessPointProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ObjectLambdaAccessPointProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ObjectLambdaAccessPointProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<ObjectLambdaAccessPointPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<ObjectLambdaAccessPointPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ObjectLambdaAccessPointPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ObjectLambdaAccessPointPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ObjectLambdaAccessPointPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ObjectLambdaAccessPointPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ObjectLambdaAccessPointStatus defines the observed state of ObjectLambdaAccessPoint.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<ObjectLambdaAccessPointStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointStatusAtProvider {
    /// The AWS account ID for the owner of the bucket for which you want to create an Object Lambda Access Point.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default, setter(strip_option))]
    pub account_id: Option<String>,
    /// Alias for the S3 Object Lambda Access Point.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub alias: Option<String>,
    /// Amazon Resource Name (ARN) of the Object Lambda Access Point.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// A configuration block containing details about the Object Lambda Access Point. See Configuration below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub configuration: Option<ObjectLambdaAccessPointStatusAtProviderConfiguration>,
    /// The AWS account ID and access point name separated by a colon (:).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// The name for this Object Lambda Access Point.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
}

/// A configuration block containing details about the Object Lambda Access Point. See Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointStatusAtProviderConfiguration {
    /// Allowed features. Valid values: GetObject-Range, GetObject-PartNumber.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowedFeatures"
    )]
    #[builder(default, setter(strip_option))]
    pub allowed_features: Option<Vec<String>>,
    /// Whether or not the CloudWatch metrics configuration is enabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudWatchMetricsEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub cloud_watch_metrics_enabled: Option<bool>,
    /// Standard access point associated with the Object Lambda Access Point.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "supportingAccessPoint"
    )]
    #[builder(default, setter(strip_option))]
    pub supporting_access_point: Option<String>,
    /// List of transformation configurations for the Object Lambda Access Point. See Transformation Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "transformationConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub transformation_configuration: Option<
        Vec<ObjectLambdaAccessPointStatusAtProviderConfigurationTransformationConfiguration>,
    >,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointStatusAtProviderConfigurationTransformationConfiguration {
    /// The actions of an Object Lambda Access Point configuration. Valid values: GetObject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub actions: Option<Vec<String>>,
    /// The content transformation of an Object Lambda Access Point configuration. See Content Transformation below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentTransformation")]
    #[builder(default, setter(strip_option))]
    pub content_transformation: Option<ObjectLambdaAccessPointStatusAtProviderConfigurationTransformationConfigurationContentTransformation>,
}

/// The content transformation of an Object Lambda Access Point configuration. See Content Transformation below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointStatusAtProviderConfigurationTransformationConfigurationContentTransformation {
    /// Configuration for an AWS Lambda function. See AWS Lambda below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsLambda")]
    #[builder(default, setter(strip_option))]
    pub aws_lambda: Option<ObjectLambdaAccessPointStatusAtProviderConfigurationTransformationConfigurationContentTransformationAwsLambda>,
}

/// Configuration for an AWS Lambda function. See AWS Lambda below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ObjectLambdaAccessPointStatusAtProviderConfigurationTransformationConfigurationContentTransformationAwsLambda
{
    /// The Amazon Resource Name (ARN) of the AWS Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "functionArn"
    )]
    #[builder(default, setter(strip_option))]
    pub function_arn: Option<String>,
    /// Additional JSON that provides supplemental data to the Lambda function used to transform objects.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "functionPayload"
    )]
    #[builder(default, setter(strip_option))]
    pub function_payload: Option<String>,
}

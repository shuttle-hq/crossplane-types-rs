// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ConformancePackSpec defines the desired state of ConformancePack
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "configservice.aws.upbound.io",
    version = "v1beta1",
    kind = "ConformancePack",
    plural = "conformancepacks"
)]
#[kube(status = "ConformancePackStatus")]
pub struct ConformancePackSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<ConformancePackDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ConformancePackForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<ConformancePackInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<ConformancePackProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<ConformancePackPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<ConformancePackWriteConnectionSecretToRef>,
}

/// ConformancePackSpec defines the desired state of ConformancePack
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConformancePackDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConformancePackForProvider {
    /// Amazon S3 bucket where AWS Config stores conformance pack templates. Maximum length of 63.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryS3Bucket"
    )]
    #[builder(default, setter(strip_option))]
    pub delivery_s3_bucket: Option<String>,
    /// The prefix for the Amazon S3 bucket. Maximum length of 1024.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryS3KeyPrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub delivery_s3_key_prefix: Option<String>,
    /// Set of configuration blocks describing input parameters passed to the conformance pack template. Documented below. When configured, the parameters must also be included in the template_body or in the template stored in Amazon S3 if using template_s3_uri.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputParameter"
    )]
    #[builder(default, setter(strip_option))]
    pub input_parameter: Option<Vec<ConformancePackForProviderInputParameter>>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// A string containing full conformance pack template body. Maximum length of 51200. Drift detection is not possible with this argument.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateBody"
    )]
    #[builder(default, setter(strip_option))]
    pub template_body: Option<String>,
    /// Location of file, e.g., s3://bucketname/prefix, containing the template body. The uri must point to the conformance pack template that is located in an Amazon S3 bucket in the same region as the conformance pack. Maximum length of 1024. Drift detection is not possible with this argument.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateS3Uri"
    )]
    #[builder(default, setter(strip_option))]
    pub template_s3_uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConformancePackForProviderInputParameter {
    /// The input key.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parameterName"
    )]
    #[builder(default, setter(strip_option))]
    pub parameter_name: Option<String>,
    /// The input value.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parameterValue"
    )]
    #[builder(default, setter(strip_option))]
    pub parameter_value: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConformancePackInitProvider {
    /// Amazon S3 bucket where AWS Config stores conformance pack templates. Maximum length of 63.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryS3Bucket"
    )]
    #[builder(default, setter(strip_option))]
    pub delivery_s3_bucket: Option<String>,
    /// The prefix for the Amazon S3 bucket. Maximum length of 1024.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryS3KeyPrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub delivery_s3_key_prefix: Option<String>,
    /// Set of configuration blocks describing input parameters passed to the conformance pack template. Documented below. When configured, the parameters must also be included in the template_body or in the template stored in Amazon S3 if using template_s3_uri.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputParameter"
    )]
    #[builder(default, setter(strip_option))]
    pub input_parameter: Option<Vec<ConformancePackInitProviderInputParameter>>,
    /// A string containing full conformance pack template body. Maximum length of 51200. Drift detection is not possible with this argument.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateBody"
    )]
    #[builder(default, setter(strip_option))]
    pub template_body: Option<String>,
    /// Location of file, e.g., s3://bucketname/prefix, containing the template body. The uri must point to the conformance pack template that is located in an Amazon S3 bucket in the same region as the conformance pack. Maximum length of 1024. Drift detection is not possible with this argument.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateS3Uri"
    )]
    #[builder(default, setter(strip_option))]
    pub template_s3_uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConformancePackInitProviderInputParameter {
    /// The input key.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parameterName"
    )]
    #[builder(default, setter(strip_option))]
    pub parameter_name: Option<String>,
    /// The input value.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parameterValue"
    )]
    #[builder(default, setter(strip_option))]
    pub parameter_value: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConformancePackProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConformancePackProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConformancePackProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConformancePackProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConformancePackProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConformancePackProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConformancePackProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConformancePackPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<ConformancePackPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<ConformancePackPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConformancePackPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConformancePackPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConformancePackPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConformancePackPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConformancePackPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConformancePackPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConformancePackPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConformancePackPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConformancePackWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ConformancePackStatus defines the observed state of ConformancePack.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConformancePackStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<ConformancePackStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConformancePackStatusAtProvider {
    /// Amazon Resource Name (ARN) of the conformance pack.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Amazon S3 bucket where AWS Config stores conformance pack templates. Maximum length of 63.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryS3Bucket"
    )]
    #[builder(default, setter(strip_option))]
    pub delivery_s3_bucket: Option<String>,
    /// The prefix for the Amazon S3 bucket. Maximum length of 1024.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deliveryS3KeyPrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub delivery_s3_key_prefix: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Set of configuration blocks describing input parameters passed to the conformance pack template. Documented below. When configured, the parameters must also be included in the template_body or in the template stored in Amazon S3 if using template_s3_uri.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inputParameter"
    )]
    #[builder(default, setter(strip_option))]
    pub input_parameter: Option<Vec<ConformancePackStatusAtProviderInputParameter>>,
    /// A string containing full conformance pack template body. Maximum length of 51200. Drift detection is not possible with this argument.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateBody"
    )]
    #[builder(default, setter(strip_option))]
    pub template_body: Option<String>,
    /// Location of file, e.g., s3://bucketname/prefix, containing the template body. The uri must point to the conformance pack template that is located in an Amazon S3 bucket in the same region as the conformance pack. Maximum length of 1024. Drift detection is not possible with this argument.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "templateS3Uri"
    )]
    #[builder(default, setter(strip_option))]
    pub template_s3_uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConformancePackStatusAtProviderInputParameter {
    /// The input key.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parameterName"
    )]
    #[builder(default, setter(strip_option))]
    pub parameter_name: Option<String>,
    /// The input value.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parameterValue"
    )]
    #[builder(default, setter(strip_option))]
    pub parameter_value: Option<String>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ConfigurationRecorderSpec defines the desired state of ConfigurationRecorder
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "configservice.aws.upbound.io",
    version = "v1beta2",
    kind = "ConfigurationRecorder",
    plural = "configurationrecorders"
)]
#[kube(status = "ConfigurationRecorderStatus")]
pub struct ConfigurationRecorderSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<ConfigurationRecorderDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ConfigurationRecorderForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<ConfigurationRecorderInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<ConfigurationRecorderProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<ConfigurationRecorderPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<ConfigurationRecorderWriteConnectionSecretToRef>,
}

/// ConfigurationRecorderSpec defines the desired state of ConfigurationRecorder
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationRecorderDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderForProvider {
    /// Recording group - see below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordingGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub recording_group: Option<ConfigurationRecorderForProviderRecordingGroup>,
    /// Recording mode - see below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordingMode"
    )]
    #[builder(default, setter(strip_option))]
    pub recording_mode: Option<ConfigurationRecorderForProviderRecordingMode>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Amazon Resource Name (ARN) of the IAM role. Used to make read or write requests to the delivery channel and to describe the AWS resources associated with the account. See AWS Docs for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default, setter(strip_option))]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub role_arn_ref: Option<ConfigurationRecorderForProviderRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub role_arn_selector: Option<ConfigurationRecorderForProviderRoleArnSelector>,
}

/// Recording group - see below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderForProviderRecordingGroup {
    /// Specifies whether AWS Config records configuration changes for every supported type of regional resource (which includes any new type that will become supported in the future). Conflicts with resource_types. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allSupported"
    )]
    #[builder(default, setter(strip_option))]
    pub all_supported: Option<bool>,
    /// An object that specifies how AWS Config excludes resource types from being recorded by the configuration recorder.To use this option, you must set the useOnly field of RecordingStrategy to EXCLUSION_BY_RESOURCE_TYPES Requires all_supported = false. Conflicts with resource_types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "exclusionByResourceTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub exclusion_by_resource_types:
        Option<Vec<ConfigurationRecorderForProviderRecordingGroupExclusionByResourceTypes>>,
    /// Specifies whether AWS Config includes all supported types of global resources with the resources that it records. Requires all_supported = true. Conflicts with resource_types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includeGlobalResourceTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub include_global_resource_types: Option<bool>,
    /// Recording Strategy. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordingStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub recording_strategy:
        Option<Vec<ConfigurationRecorderForProviderRecordingGroupRecordingStrategy>>,
    /// A list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, AWS::EC2::Instance or AWS::CloudTrail::Trail). See relevant part of AWS Docs for available types. In order to use this attribute, all_supported must be set to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_types: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderForProviderRecordingGroupExclusionByResourceTypes {
    /// A list that specifies the types of AWS resources for which AWS Config excludes records configuration changes. See relevant part of AWS Docs for available types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_types: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderForProviderRecordingGroupRecordingStrategy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useOnly")]
    #[builder(default, setter(strip_option))]
    pub use_only: Option<String>,
}

/// Recording mode - see below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderForProviderRecordingMode {
    /// Default reecording frequency. CONTINUOUS or DAILY.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordingFrequency"
    )]
    #[builder(default, setter(strip_option))]
    pub recording_frequency: Option<String>,
    /// Recording mode overrides. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordingModeOverride"
    )]
    #[builder(default, setter(strip_option))]
    pub recording_mode_override:
        Option<ConfigurationRecorderForProviderRecordingModeRecordingModeOverride>,
}

/// Recording mode overrides. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderForProviderRecordingModeRecordingModeOverride {
    /// A description you provide of the override.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Default reecording frequency. CONTINUOUS or DAILY.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordingFrequency"
    )]
    #[builder(default, setter(strip_option))]
    pub recording_frequency: Option<String>,
    /// A list that specifies the types of AWS resources for which AWS Config excludes records configuration changes. See relevant part of AWS Docs for available types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_types: Option<Vec<String>>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderForProviderRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationRecorderForProviderRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderForProviderRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationRecorderForProviderRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationRecorderForProviderRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationRecorderForProviderRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationRecorderForProviderRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderForProviderRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationRecorderForProviderRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderForProviderRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationRecorderForProviderRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationRecorderForProviderRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationRecorderForProviderRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationRecorderForProviderRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderInitProvider {
    /// Recording group - see below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordingGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub recording_group: Option<ConfigurationRecorderInitProviderRecordingGroup>,
    /// Recording mode - see below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordingMode"
    )]
    #[builder(default, setter(strip_option))]
    pub recording_mode: Option<ConfigurationRecorderInitProviderRecordingMode>,
    /// Amazon Resource Name (ARN) of the IAM role. Used to make read or write requests to the delivery channel and to describe the AWS resources associated with the account. See AWS Docs for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default, setter(strip_option))]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub role_arn_ref: Option<ConfigurationRecorderInitProviderRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub role_arn_selector: Option<ConfigurationRecorderInitProviderRoleArnSelector>,
}

/// Recording group - see below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderInitProviderRecordingGroup {
    /// Specifies whether AWS Config records configuration changes for every supported type of regional resource (which includes any new type that will become supported in the future). Conflicts with resource_types. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allSupported"
    )]
    #[builder(default, setter(strip_option))]
    pub all_supported: Option<bool>,
    /// An object that specifies how AWS Config excludes resource types from being recorded by the configuration recorder.To use this option, you must set the useOnly field of RecordingStrategy to EXCLUSION_BY_RESOURCE_TYPES Requires all_supported = false. Conflicts with resource_types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "exclusionByResourceTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub exclusion_by_resource_types:
        Option<Vec<ConfigurationRecorderInitProviderRecordingGroupExclusionByResourceTypes>>,
    /// Specifies whether AWS Config includes all supported types of global resources with the resources that it records. Requires all_supported = true. Conflicts with resource_types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includeGlobalResourceTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub include_global_resource_types: Option<bool>,
    /// Recording Strategy. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordingStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub recording_strategy:
        Option<Vec<ConfigurationRecorderInitProviderRecordingGroupRecordingStrategy>>,
    /// A list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, AWS::EC2::Instance or AWS::CloudTrail::Trail). See relevant part of AWS Docs for available types. In order to use this attribute, all_supported must be set to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_types: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderInitProviderRecordingGroupExclusionByResourceTypes {
    /// A list that specifies the types of AWS resources for which AWS Config excludes records configuration changes. See relevant part of AWS Docs for available types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_types: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderInitProviderRecordingGroupRecordingStrategy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useOnly")]
    #[builder(default, setter(strip_option))]
    pub use_only: Option<String>,
}

/// Recording mode - see below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderInitProviderRecordingMode {
    /// Default reecording frequency. CONTINUOUS or DAILY.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordingFrequency"
    )]
    #[builder(default, setter(strip_option))]
    pub recording_frequency: Option<String>,
    /// Recording mode overrides. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordingModeOverride"
    )]
    #[builder(default, setter(strip_option))]
    pub recording_mode_override:
        Option<ConfigurationRecorderInitProviderRecordingModeRecordingModeOverride>,
}

/// Recording mode overrides. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderInitProviderRecordingModeRecordingModeOverride {
    /// A description you provide of the override.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Default reecording frequency. CONTINUOUS or DAILY.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordingFrequency"
    )]
    #[builder(default, setter(strip_option))]
    pub recording_frequency: Option<String>,
    /// A list that specifies the types of AWS resources for which AWS Config excludes records configuration changes. See relevant part of AWS Docs for available types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_types: Option<Vec<String>>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderInitProviderRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationRecorderInitProviderRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderInitProviderRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationRecorderInitProviderRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationRecorderInitProviderRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationRecorderInitProviderRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationRecorderInitProviderRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderInitProviderRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationRecorderInitProviderRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderInitProviderRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationRecorderInitProviderRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationRecorderInitProviderRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationRecorderInitProviderRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationRecorderInitProviderRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationRecorderProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ConfigurationRecorderProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationRecorderProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationRecorderProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationRecorderProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<ConfigurationRecorderPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<ConfigurationRecorderPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ConfigurationRecorderPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ConfigurationRecorderPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ConfigurationRecorderPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationRecorderPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigurationRecorderPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ConfigurationRecorderStatus defines the observed state of ConfigurationRecorder.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<ConfigurationRecorderStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderStatusAtProvider {
    /// Name of the recorder
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Recording group - see below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordingGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub recording_group: Option<ConfigurationRecorderStatusAtProviderRecordingGroup>,
    /// Recording mode - see below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordingMode"
    )]
    #[builder(default, setter(strip_option))]
    pub recording_mode: Option<ConfigurationRecorderStatusAtProviderRecordingMode>,
    /// Amazon Resource Name (ARN) of the IAM role. Used to make read or write requests to the delivery channel and to describe the AWS resources associated with the account. See AWS Docs for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default, setter(strip_option))]
    pub role_arn: Option<String>,
}

/// Recording group - see below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderStatusAtProviderRecordingGroup {
    /// Specifies whether AWS Config records configuration changes for every supported type of regional resource (which includes any new type that will become supported in the future). Conflicts with resource_types. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allSupported"
    )]
    #[builder(default, setter(strip_option))]
    pub all_supported: Option<bool>,
    /// An object that specifies how AWS Config excludes resource types from being recorded by the configuration recorder.To use this option, you must set the useOnly field of RecordingStrategy to EXCLUSION_BY_RESOURCE_TYPES Requires all_supported = false. Conflicts with resource_types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "exclusionByResourceTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub exclusion_by_resource_types:
        Option<Vec<ConfigurationRecorderStatusAtProviderRecordingGroupExclusionByResourceTypes>>,
    /// Specifies whether AWS Config includes all supported types of global resources with the resources that it records. Requires all_supported = true. Conflicts with resource_types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includeGlobalResourceTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub include_global_resource_types: Option<bool>,
    /// Recording Strategy. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordingStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub recording_strategy:
        Option<Vec<ConfigurationRecorderStatusAtProviderRecordingGroupRecordingStrategy>>,
    /// A list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, AWS::EC2::Instance or AWS::CloudTrail::Trail). See relevant part of AWS Docs for available types. In order to use this attribute, all_supported must be set to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_types: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderStatusAtProviderRecordingGroupExclusionByResourceTypes {
    /// A list that specifies the types of AWS resources for which AWS Config excludes records configuration changes. See relevant part of AWS Docs for available types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_types: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderStatusAtProviderRecordingGroupRecordingStrategy {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useOnly")]
    #[builder(default, setter(strip_option))]
    pub use_only: Option<String>,
}

/// Recording mode - see below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderStatusAtProviderRecordingMode {
    /// Default reecording frequency. CONTINUOUS or DAILY.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordingFrequency"
    )]
    #[builder(default, setter(strip_option))]
    pub recording_frequency: Option<String>,
    /// Recording mode overrides. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordingModeOverride"
    )]
    #[builder(default, setter(strip_option))]
    pub recording_mode_override:
        Option<ConfigurationRecorderStatusAtProviderRecordingModeRecordingModeOverride>,
}

/// Recording mode overrides. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ConfigurationRecorderStatusAtProviderRecordingModeRecordingModeOverride {
    /// A description you provide of the override.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Default reecording frequency. CONTINUOUS or DAILY.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordingFrequency"
    )]
    #[builder(default, setter(strip_option))]
    pub recording_frequency: Option<String>,
    /// A list that specifies the types of AWS resources for which AWS Config excludes records configuration changes. See relevant part of AWS Docs for available types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceTypes"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_types: Option<Vec<String>>,
}

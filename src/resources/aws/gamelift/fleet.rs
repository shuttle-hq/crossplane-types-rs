// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// FleetSpec defines the desired state of Fleet
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "gamelift.aws.upbound.io",
    version = "v1beta2",
    kind = "Fleet",
    plural = "fleet"
)]
#[kube(status = "FleetStatus")]
pub struct FleetSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<FleetDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: FleetForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<FleetInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<FleetProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<FleetPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<FleetWriteConnectionSecretToRef>,
}

/// FleetSpec defines the desired state of Fleet
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetForProvider {
    /// ID of the GameLift Build to be deployed on the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildId")]
    #[builder(default, setter(strip_option))]
    pub build_id: Option<String>,
    /// Reference to a Build in gamelift to populate buildId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "buildIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub build_id_ref: Option<FleetForProviderBuildIdRef>,
    /// Selector for a Build in gamelift to populate buildId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "buildIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub build_id_selector: Option<FleetForProviderBuildIdSelector>,
    /// Prompts GameLift to generate a TLS/SSL certificate for the fleet. See certificate_configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub certificate_configuration: Option<FleetForProviderCertificateConfiguration>,
    /// Human-readable description of the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Range of IP addresses and port settings that permit inbound traffic to access server processes running on the fleet. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2InboundPermission"
    )]
    #[builder(default, setter(strip_option))]
    pub ec2_inbound_permission: Option<Vec<FleetForProviderEc2InboundPermission>>,
    /// Name of an EC2 instance typeE.g., t2.micro
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2InstanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub ec2_instance_type: Option<String>,
    /// Type of fleet. This value must be ON_DEMAND or SPOT. Defaults to ON_DEMAND.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fleetType")]
    #[builder(default, setter(strip_option))]
    pub fleet_type: Option<String>,
    /// ARN of an IAM role that instances in the fleet can assume.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_role_arn: Option<String>,
    /// Reference to a Role in iam to populate instanceRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRoleArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_role_arn_ref: Option<FleetForProviderInstanceRoleArnRef>,
    /// Selector for a Role in iam to populate instanceRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRoleArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_role_arn_selector: Option<FleetForProviderInstanceRoleArnSelector>,
    /// List of names of metric groups to add this fleet to. A metric group tracks metrics across all fleets in the group. Defaults to default.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metricGroups"
    )]
    #[builder(default, setter(strip_option))]
    pub metric_groups: Option<Vec<String>>,
    /// The name of the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Game session protection policy to apply to all instances in this fleetE.g., FullProtection. Defaults to NoProtection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "newGameSessionProtectionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub new_game_session_protection_policy: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceCreationLimitPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_creation_limit_policy: Option<FleetForProviderResourceCreationLimitPolicy>,
    /// Instructions for launching server processes on each instance in the fleet. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimeConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_configuration: Option<FleetForProviderRuntimeConfiguration>,
    /// ID of the GameLift Script to be deployed on the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scriptId")]
    #[builder(default, setter(strip_option))]
    pub script_id: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

/// Reference to a Build in gamelift to populate buildId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetForProviderBuildIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FleetForProviderBuildIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetForProviderBuildIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FleetForProviderBuildIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FleetForProviderBuildIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderBuildIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderBuildIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Build in gamelift to populate buildId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetForProviderBuildIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FleetForProviderBuildIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetForProviderBuildIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FleetForProviderBuildIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FleetForProviderBuildIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderBuildIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderBuildIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Prompts GameLift to generate a TLS/SSL certificate for the fleet. See certificate_configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetForProviderCertificateConfiguration {
    /// Indicates whether a TLS/SSL certificate is generated for a fleet. Valid values are DISABLED and GENERATED. Default value is DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateType"
    )]
    #[builder(default, setter(strip_option))]
    pub certificate_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetForProviderEc2InboundPermission {
    /// Starting value for a range of allowed port numbers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromPort")]
    #[builder(default, setter(strip_option))]
    pub from_port: Option<f64>,
    /// Range of allowed IP addresses expressed in CIDR notationE.g., 000.000.000.000/[subnet mask] or 0.0.0.0/[subnet mask].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipRange")]
    #[builder(default, setter(strip_option))]
    pub ip_range: Option<String>,
    /// Network communication protocol used by the fleetE.g., TCP or UDP
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub protocol: Option<String>,
    /// Ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than from_port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toPort")]
    #[builder(default, setter(strip_option))]
    pub to_port: Option<f64>,
}

/// Reference to a Role in iam to populate instanceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetForProviderInstanceRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FleetForProviderInstanceRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetForProviderInstanceRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FleetForProviderInstanceRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FleetForProviderInstanceRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderInstanceRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderInstanceRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate instanceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetForProviderInstanceRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FleetForProviderInstanceRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetForProviderInstanceRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FleetForProviderInstanceRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FleetForProviderInstanceRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderInstanceRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetForProviderInstanceRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetForProviderResourceCreationLimitPolicy {
    /// Maximum number of game sessions that an individual can create during the policy period.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "newGameSessionsPerCreator"
    )]
    #[builder(default, setter(strip_option))]
    pub new_game_sessions_per_creator: Option<f64>,
    /// Time span used in evaluating the resource creation limit policy.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "policyPeriodInMinutes"
    )]
    #[builder(default, setter(strip_option))]
    pub policy_period_in_minutes: Option<f64>,
}

/// Instructions for launching server processes on each instance in the fleet. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetForProviderRuntimeConfiguration {
    /// Maximum amount of time (in seconds) that a game session can remain in status ACTIVATING.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gameSessionActivationTimeoutSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub game_session_activation_timeout_seconds: Option<f64>,
    /// Maximum number of game sessions with status ACTIVATING to allow on an instance simultaneously.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxConcurrentGameSessionActivations"
    )]
    #[builder(default, setter(strip_option))]
    pub max_concurrent_game_session_activations: Option<f64>,
    /// Collection of server process configurations that describe which server processes to run on each instance in a fleet. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverProcess"
    )]
    #[builder(default, setter(strip_option))]
    pub server_process: Option<Vec<FleetForProviderRuntimeConfigurationServerProcess>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetForProviderRuntimeConfigurationServerProcess {
    /// Number of server processes using this configuration to run concurrently on an instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "concurrentExecutions"
    )]
    #[builder(default, setter(strip_option))]
    pub concurrent_executions: Option<f64>,
    /// Location of the server executable in a game build. All game builds are installed on instances at the root : for Windows instances C:\game, and for Linux instances /local/game.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchPath"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_path: Option<String>,
    /// Optional list of parameters to pass to the server executable on launch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetInitProvider {
    /// ID of the GameLift Build to be deployed on the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildId")]
    #[builder(default, setter(strip_option))]
    pub build_id: Option<String>,
    /// Reference to a Build in gamelift to populate buildId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "buildIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub build_id_ref: Option<FleetInitProviderBuildIdRef>,
    /// Selector for a Build in gamelift to populate buildId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "buildIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub build_id_selector: Option<FleetInitProviderBuildIdSelector>,
    /// Prompts GameLift to generate a TLS/SSL certificate for the fleet. See certificate_configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub certificate_configuration: Option<FleetInitProviderCertificateConfiguration>,
    /// Human-readable description of the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Range of IP addresses and port settings that permit inbound traffic to access server processes running on the fleet. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2InboundPermission"
    )]
    #[builder(default, setter(strip_option))]
    pub ec2_inbound_permission: Option<Vec<FleetInitProviderEc2InboundPermission>>,
    /// Name of an EC2 instance typeE.g., t2.micro
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2InstanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub ec2_instance_type: Option<String>,
    /// Type of fleet. This value must be ON_DEMAND or SPOT. Defaults to ON_DEMAND.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fleetType")]
    #[builder(default, setter(strip_option))]
    pub fleet_type: Option<String>,
    /// ARN of an IAM role that instances in the fleet can assume.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_role_arn: Option<String>,
    /// Reference to a Role in iam to populate instanceRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRoleArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_role_arn_ref: Option<FleetInitProviderInstanceRoleArnRef>,
    /// Selector for a Role in iam to populate instanceRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRoleArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_role_arn_selector: Option<FleetInitProviderInstanceRoleArnSelector>,
    /// List of names of metric groups to add this fleet to. A metric group tracks metrics across all fleets in the group. Defaults to default.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metricGroups"
    )]
    #[builder(default, setter(strip_option))]
    pub metric_groups: Option<Vec<String>>,
    /// The name of the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Game session protection policy to apply to all instances in this fleetE.g., FullProtection. Defaults to NoProtection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "newGameSessionProtectionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub new_game_session_protection_policy: Option<String>,
    /// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceCreationLimitPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_creation_limit_policy: Option<FleetInitProviderResourceCreationLimitPolicy>,
    /// Instructions for launching server processes on each instance in the fleet. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimeConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_configuration: Option<FleetInitProviderRuntimeConfiguration>,
    /// ID of the GameLift Script to be deployed on the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scriptId")]
    #[builder(default, setter(strip_option))]
    pub script_id: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

/// Reference to a Build in gamelift to populate buildId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetInitProviderBuildIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FleetInitProviderBuildIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetInitProviderBuildIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FleetInitProviderBuildIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FleetInitProviderBuildIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderBuildIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderBuildIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Build in gamelift to populate buildId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetInitProviderBuildIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FleetInitProviderBuildIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetInitProviderBuildIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FleetInitProviderBuildIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FleetInitProviderBuildIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderBuildIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderBuildIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Prompts GameLift to generate a TLS/SSL certificate for the fleet. See certificate_configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetInitProviderCertificateConfiguration {
    /// Indicates whether a TLS/SSL certificate is generated for a fleet. Valid values are DISABLED and GENERATED. Default value is DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateType"
    )]
    #[builder(default, setter(strip_option))]
    pub certificate_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetInitProviderEc2InboundPermission {
    /// Starting value for a range of allowed port numbers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromPort")]
    #[builder(default, setter(strip_option))]
    pub from_port: Option<f64>,
    /// Range of allowed IP addresses expressed in CIDR notationE.g., 000.000.000.000/[subnet mask] or 0.0.0.0/[subnet mask].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipRange")]
    #[builder(default, setter(strip_option))]
    pub ip_range: Option<String>,
    /// Network communication protocol used by the fleetE.g., TCP or UDP
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub protocol: Option<String>,
    /// Ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than from_port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toPort")]
    #[builder(default, setter(strip_option))]
    pub to_port: Option<f64>,
}

/// Reference to a Role in iam to populate instanceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetInitProviderInstanceRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FleetInitProviderInstanceRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetInitProviderInstanceRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FleetInitProviderInstanceRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FleetInitProviderInstanceRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderInstanceRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderInstanceRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate instanceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetInitProviderInstanceRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FleetInitProviderInstanceRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetInitProviderInstanceRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FleetInitProviderInstanceRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FleetInitProviderInstanceRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderInstanceRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetInitProviderInstanceRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetInitProviderResourceCreationLimitPolicy {
    /// Maximum number of game sessions that an individual can create during the policy period.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "newGameSessionsPerCreator"
    )]
    #[builder(default, setter(strip_option))]
    pub new_game_sessions_per_creator: Option<f64>,
    /// Time span used in evaluating the resource creation limit policy.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "policyPeriodInMinutes"
    )]
    #[builder(default, setter(strip_option))]
    pub policy_period_in_minutes: Option<f64>,
}

/// Instructions for launching server processes on each instance in the fleet. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetInitProviderRuntimeConfiguration {
    /// Maximum amount of time (in seconds) that a game session can remain in status ACTIVATING.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gameSessionActivationTimeoutSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub game_session_activation_timeout_seconds: Option<f64>,
    /// Maximum number of game sessions with status ACTIVATING to allow on an instance simultaneously.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxConcurrentGameSessionActivations"
    )]
    #[builder(default, setter(strip_option))]
    pub max_concurrent_game_session_activations: Option<f64>,
    /// Collection of server process configurations that describe which server processes to run on each instance in a fleet. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverProcess"
    )]
    #[builder(default, setter(strip_option))]
    pub server_process: Option<Vec<FleetInitProviderRuntimeConfigurationServerProcess>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetInitProviderRuntimeConfigurationServerProcess {
    /// Number of server processes using this configuration to run concurrently on an instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "concurrentExecutions"
    )]
    #[builder(default, setter(strip_option))]
    pub concurrent_executions: Option<f64>,
    /// Location of the server executable in a game build. All game builds are installed on instances at the root : for Windows instances C:\game, and for Linux instances /local/game.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchPath"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_path: Option<String>,
    /// Optional list of parameters to pass to the server executable on launch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FleetProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FleetProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FleetProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<FleetPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<FleetPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<FleetPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<FleetPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<FleetPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FleetPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// FleetStatus defines the observed state of Fleet.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<FleetStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetStatusAtProvider {
    /// Fleet ARN.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Build ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildArn")]
    #[builder(default, setter(strip_option))]
    pub build_arn: Option<String>,
    /// ID of the GameLift Build to be deployed on the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildId")]
    #[builder(default, setter(strip_option))]
    pub build_id: Option<String>,
    /// Prompts GameLift to generate a TLS/SSL certificate for the fleet. See certificate_configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub certificate_configuration: Option<FleetStatusAtProviderCertificateConfiguration>,
    /// Human-readable description of the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Range of IP addresses and port settings that permit inbound traffic to access server processes running on the fleet. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2InboundPermission"
    )]
    #[builder(default, setter(strip_option))]
    pub ec2_inbound_permission: Option<Vec<FleetStatusAtProviderEc2InboundPermission>>,
    /// Name of an EC2 instance typeE.g., t2.micro
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2InstanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub ec2_instance_type: Option<String>,
    /// Type of fleet. This value must be ON_DEMAND or SPOT. Defaults to ON_DEMAND.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fleetType")]
    #[builder(default, setter(strip_option))]
    pub fleet_type: Option<String>,
    /// Fleet ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// ARN of an IAM role that instances in the fleet can assume.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_role_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logPaths")]
    #[builder(default, setter(strip_option))]
    pub log_paths: Option<Vec<String>>,
    /// List of names of metric groups to add this fleet to. A metric group tracks metrics across all fleets in the group. Defaults to default.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metricGroups"
    )]
    #[builder(default, setter(strip_option))]
    pub metric_groups: Option<Vec<String>>,
    /// The name of the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Game session protection policy to apply to all instances in this fleetE.g., FullProtection. Defaults to NoProtection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "newGameSessionProtectionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub new_game_session_protection_policy: Option<String>,
    /// Operating system of the fleet's computing resources.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "operatingSystem"
    )]
    #[builder(default, setter(strip_option))]
    pub operating_system: Option<String>,
    /// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceCreationLimitPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_creation_limit_policy: Option<FleetStatusAtProviderResourceCreationLimitPolicy>,
    /// Instructions for launching server processes on each instance in the fleet. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "runtimeConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub runtime_configuration: Option<FleetStatusAtProviderRuntimeConfiguration>,
    /// Script ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scriptArn")]
    #[builder(default, setter(strip_option))]
    pub script_arn: Option<String>,
    /// ID of the GameLift Script to be deployed on the fleet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scriptId")]
    #[builder(default, setter(strip_option))]
    pub script_id: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
}

/// Prompts GameLift to generate a TLS/SSL certificate for the fleet. See certificate_configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetStatusAtProviderCertificateConfiguration {
    /// Indicates whether a TLS/SSL certificate is generated for a fleet. Valid values are DISABLED and GENERATED. Default value is DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateType"
    )]
    #[builder(default, setter(strip_option))]
    pub certificate_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetStatusAtProviderEc2InboundPermission {
    /// Starting value for a range of allowed port numbers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromPort")]
    #[builder(default, setter(strip_option))]
    pub from_port: Option<f64>,
    /// Range of allowed IP addresses expressed in CIDR notationE.g., 000.000.000.000/[subnet mask] or 0.0.0.0/[subnet mask].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipRange")]
    #[builder(default, setter(strip_option))]
    pub ip_range: Option<String>,
    /// Network communication protocol used by the fleetE.g., TCP or UDP
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub protocol: Option<String>,
    /// Ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than from_port.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toPort")]
    #[builder(default, setter(strip_option))]
    pub to_port: Option<f64>,
}

/// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetStatusAtProviderResourceCreationLimitPolicy {
    /// Maximum number of game sessions that an individual can create during the policy period.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "newGameSessionsPerCreator"
    )]
    #[builder(default, setter(strip_option))]
    pub new_game_sessions_per_creator: Option<f64>,
    /// Time span used in evaluating the resource creation limit policy.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "policyPeriodInMinutes"
    )]
    #[builder(default, setter(strip_option))]
    pub policy_period_in_minutes: Option<f64>,
}

/// Instructions for launching server processes on each instance in the fleet. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetStatusAtProviderRuntimeConfiguration {
    /// Maximum amount of time (in seconds) that a game session can remain in status ACTIVATING.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "gameSessionActivationTimeoutSeconds"
    )]
    #[builder(default, setter(strip_option))]
    pub game_session_activation_timeout_seconds: Option<f64>,
    /// Maximum number of game sessions with status ACTIVATING to allow on an instance simultaneously.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxConcurrentGameSessionActivations"
    )]
    #[builder(default, setter(strip_option))]
    pub max_concurrent_game_session_activations: Option<f64>,
    /// Collection of server process configurations that describe which server processes to run on each instance in a fleet. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverProcess"
    )]
    #[builder(default, setter(strip_option))]
    pub server_process: Option<Vec<FleetStatusAtProviderRuntimeConfigurationServerProcess>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct FleetStatusAtProviderRuntimeConfigurationServerProcess {
    /// Number of server processes using this configuration to run concurrently on an instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "concurrentExecutions"
    )]
    #[builder(default, setter(strip_option))]
    pub concurrent_executions: Option<f64>,
    /// Location of the server executable in a game build. All game builds are installed on instances at the root : for Windows instances C:\game, and for Linux instances /local/game.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchPath"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_path: Option<String>,
    /// Optional list of parameters to pass to the server executable on launch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<String>,
}

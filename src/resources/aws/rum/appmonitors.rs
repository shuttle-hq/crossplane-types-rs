// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// AppMonitorSpec defines the desired state of AppMonitor
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "rum.aws.upbound.io",
    version = "v1beta2",
    kind = "AppMonitor",
    plural = "appmonitors"
)]
#[kube(status = "AppMonitorStatus")]
pub struct AppMonitorSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<AppMonitorDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: AppMonitorForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<AppMonitorInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<AppMonitorProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<AppMonitorPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<AppMonitorWriteConnectionSecretToRef>,
}

/// AppMonitorSpec defines the desired state of AppMonitor
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppMonitorDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AppMonitorForProvider {
    /// configuration data for the app monitor. See app_monitor_configuration below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appMonitorConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub app_monitor_configuration: Option<AppMonitorForProviderAppMonitorConfiguration>,
    /// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are DISABLED. See custom_events below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customEvents"
    )]
    #[builder(default, setter(strip_option))]
    pub custom_events: Option<AppMonitorForProviderCustomEvents>,
    /// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter  specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges. Default value is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cwLogEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub cw_log_enabled: Option<bool>,
    /// The top-level internet domain name for which your application has administrative authority.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub domain: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

/// configuration data for the app monitor. See app_monitor_configuration below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AppMonitorForProviderAppMonitorConfiguration {
    /// If you set this to true, RUM web client sets two cookies, a session cookie  and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowCookies"
    )]
    #[builder(default, setter(strip_option))]
    pub allow_cookies: Option<bool>,
    /// If you set this to true, RUM enables X-Ray tracing for the user sessions  that RUM samples. RUM adds an X-Ray trace header to allowed HTTP requests. It also records an X-Ray segment for allowed HTTP requests.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableXray"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_xray: Option<bool>,
    /// A list of URLs in your website or application to exclude from RUM data collection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedPages"
    )]
    #[builder(default, setter(strip_option))]
    pub excluded_pages: Option<Vec<String>>,
    /// A list of pages in the CloudWatch RUM console that are to be displayed with a "favorite" icon.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "favoritePages"
    )]
    #[builder(default, setter(strip_option))]
    pub favorite_pages: Option<Vec<String>>,
    /// The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guestRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub guest_role_arn: Option<String>,
    /// The ID of the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityPoolId"
    )]
    #[builder(default, setter(strip_option))]
    pub identity_pool_id: Option<String>,
    /// If this app monitor is to collect data from only certain pages in your application, this structure lists those pages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includedPages"
    )]
    #[builder(default, setter(strip_option))]
    pub included_pages: Option<Vec<String>>,
    /// Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. Default value is 0.1.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sessionSampleRate"
    )]
    #[builder(default, setter(strip_option))]
    pub session_sample_rate: Option<f64>,
    /// An array that lists the types of telemetry data that this app monitor is to collect. Valid values are errors, performance, and http.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub telemetries: Option<Vec<String>>,
}

/// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are DISABLED. See custom_events below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AppMonitorForProviderCustomEvents {
    /// Specifies whether this app monitor allows the web client to define and send custom events. The default is for custom events to be DISABLED. Valid values are DISABLED and ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub status: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AppMonitorInitProvider {
    /// configuration data for the app monitor. See app_monitor_configuration below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appMonitorConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub app_monitor_configuration: Option<AppMonitorInitProviderAppMonitorConfiguration>,
    /// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are DISABLED. See custom_events below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customEvents"
    )]
    #[builder(default, setter(strip_option))]
    pub custom_events: Option<AppMonitorInitProviderCustomEvents>,
    /// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter  specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges. Default value is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cwLogEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub cw_log_enabled: Option<bool>,
    /// The top-level internet domain name for which your application has administrative authority.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub domain: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

/// configuration data for the app monitor. See app_monitor_configuration below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AppMonitorInitProviderAppMonitorConfiguration {
    /// If you set this to true, RUM web client sets two cookies, a session cookie  and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowCookies"
    )]
    #[builder(default, setter(strip_option))]
    pub allow_cookies: Option<bool>,
    /// If you set this to true, RUM enables X-Ray tracing for the user sessions  that RUM samples. RUM adds an X-Ray trace header to allowed HTTP requests. It also records an X-Ray segment for allowed HTTP requests.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableXray"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_xray: Option<bool>,
    /// A list of URLs in your website or application to exclude from RUM data collection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedPages"
    )]
    #[builder(default, setter(strip_option))]
    pub excluded_pages: Option<Vec<String>>,
    /// A list of pages in the CloudWatch RUM console that are to be displayed with a "favorite" icon.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "favoritePages"
    )]
    #[builder(default, setter(strip_option))]
    pub favorite_pages: Option<Vec<String>>,
    /// The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guestRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub guest_role_arn: Option<String>,
    /// The ID of the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityPoolId"
    )]
    #[builder(default, setter(strip_option))]
    pub identity_pool_id: Option<String>,
    /// If this app monitor is to collect data from only certain pages in your application, this structure lists those pages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includedPages"
    )]
    #[builder(default, setter(strip_option))]
    pub included_pages: Option<Vec<String>>,
    /// Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. Default value is 0.1.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sessionSampleRate"
    )]
    #[builder(default, setter(strip_option))]
    pub session_sample_rate: Option<f64>,
    /// An array that lists the types of telemetry data that this app monitor is to collect. Valid values are errors, performance, and http.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub telemetries: Option<Vec<String>>,
}

/// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are DISABLED. See custom_events below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AppMonitorInitProviderCustomEvents {
    /// Specifies whether this app monitor allows the web client to define and send custom events. The default is for custom events to be DISABLED. Valid values are DISABLED and ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub status: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AppMonitorProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AppMonitorProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AppMonitorProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AppMonitorProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AppMonitorProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppMonitorProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppMonitorProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AppMonitorPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<AppMonitorPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<AppMonitorPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AppMonitorPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AppMonitorPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AppMonitorPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AppMonitorPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AppMonitorPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppMonitorPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppMonitorPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AppMonitorPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AppMonitorWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// AppMonitorStatus defines the observed state of AppMonitor.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AppMonitorStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<AppMonitorStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AppMonitorStatusAtProvider {
    /// configuration data for the app monitor. See app_monitor_configuration below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appMonitorConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub app_monitor_configuration: Option<AppMonitorStatusAtProviderAppMonitorConfiguration>,
    /// The unique ID of the app monitor. Useful for JS templates.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "appMonitorId"
    )]
    #[builder(default, setter(strip_option))]
    pub app_monitor_id: Option<String>,
    /// The Amazon Resource Name (ARN) specifying the app monitor.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are DISABLED. See custom_events below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customEvents"
    )]
    #[builder(default, setter(strip_option))]
    pub custom_events: Option<AppMonitorStatusAtProviderCustomEvents>,
    /// Data collected by RUM is kept by RUM for 30 days and then deleted. This parameter  specifies whether RUM sends a copy of this telemetry data to Amazon CloudWatch Logs in your account. This enables you to keep the telemetry data for more than 30 days, but it does incur Amazon CloudWatch Logs charges. Default value is false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cwLogEnabled"
    )]
    #[builder(default, setter(strip_option))]
    pub cw_log_enabled: Option<bool>,
    /// The name of the log group where the copies are stored.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cwLogGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub cw_log_group: Option<String>,
    /// The top-level internet domain name for which your application has administrative authority.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub domain: Option<String>,
    /// The CloudWatch RUM name as it is the identifier of a RUM.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
}

/// configuration data for the app monitor. See app_monitor_configuration below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AppMonitorStatusAtProviderAppMonitorConfiguration {
    /// If you set this to true, RUM web client sets two cookies, a session cookie  and a user cookie. The cookies allow the RUM web client to collect data relating to the number of users an application has and the behavior of the application across a sequence of events. Cookies are stored in the top-level domain of the current page.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allowCookies"
    )]
    #[builder(default, setter(strip_option))]
    pub allow_cookies: Option<bool>,
    /// If you set this to true, RUM enables X-Ray tracing for the user sessions  that RUM samples. RUM adds an X-Ray trace header to allowed HTTP requests. It also records an X-Ray segment for allowed HTTP requests.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableXray"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_xray: Option<bool>,
    /// A list of URLs in your website or application to exclude from RUM data collection.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "excludedPages"
    )]
    #[builder(default, setter(strip_option))]
    pub excluded_pages: Option<Vec<String>>,
    /// A list of pages in the CloudWatch RUM console that are to be displayed with a "favorite" icon.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "favoritePages"
    )]
    #[builder(default, setter(strip_option))]
    pub favorite_pages: Option<Vec<String>>,
    /// The ARN of the guest IAM role that is attached to the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guestRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub guest_role_arn: Option<String>,
    /// The ID of the Amazon Cognito identity pool that is used to authorize the sending of data to RUM.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "identityPoolId"
    )]
    #[builder(default, setter(strip_option))]
    pub identity_pool_id: Option<String>,
    /// If this app monitor is to collect data from only certain pages in your application, this structure lists those pages.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includedPages"
    )]
    #[builder(default, setter(strip_option))]
    pub included_pages: Option<Vec<String>>,
    /// Specifies the percentage of user sessions to use for RUM data collection. Choosing a higher percentage gives you more data but also incurs more costs. The number you specify is the percentage of user sessions that will be used. Default value is 0.1.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "sessionSampleRate"
    )]
    #[builder(default, setter(strip_option))]
    pub session_sample_rate: Option<f64>,
    /// An array that lists the types of telemetry data that this app monitor is to collect. Valid values are errors, performance, and http.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub telemetries: Option<Vec<String>>,
}

/// Specifies whether this app monitor allows the web client to define and send custom events. If you omit this parameter, custom events are DISABLED. See custom_events below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AppMonitorStatusAtProviderCustomEvents {
    /// Specifies whether this app monitor allows the web client to define and send custom events. The default is for custom events to be DISABLED. Valid values are DISABLED and ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub status: Option<String>,
}

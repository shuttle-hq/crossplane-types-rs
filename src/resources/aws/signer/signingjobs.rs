// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// SigningJobSpec defines the desired state of SigningJob
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "signer.aws.upbound.io",
    version = "v1beta2",
    kind = "SigningJob",
    plural = "signingjobs"
)]
#[kube(status = "SigningJobStatus")]
pub struct SigningJobSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<SigningJobDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: SigningJobForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<SigningJobInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<SigningJobProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<SigningJobPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<SigningJobWriteConnectionSecretToRef>,
}

/// SigningJobSpec defines the desired state of SigningJob
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SigningJobDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobForProvider {
    /// The S3 bucket in which to save your signed object. See Destination below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub destination: Option<SigningJobForProviderDestination>,
    /// Set this argument to true to ignore signing job failures and retrieve failed status and reason. Default false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ignoreSigningJobFailure"
    )]
    #[builder(default, setter(strip_option))]
    pub ignore_signing_job_failure: Option<bool>,
    /// The name of the profile to initiate the signing operation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "profileName"
    )]
    #[builder(default, setter(strip_option))]
    pub profile_name: Option<String>,
    /// Reference to a SigningProfile in signer to populate profileName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "profileNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub profile_name_ref: Option<SigningJobForProviderProfileNameRef>,
    /// Selector for a SigningProfile in signer to populate profileName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "profileNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub profile_name_selector: Option<SigningJobForProviderProfileNameSelector>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The S3 bucket that contains the object to sign. See Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub source: Option<SigningJobForProviderSource>,
}

/// The S3 bucket in which to save your signed object. See Destination below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobForProviderDestination {
    /// A configuration block describing the S3 Source object: See S3 Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub s3: Option<SigningJobForProviderDestinationS3>,
}

/// A configuration block describing the S3 Source object: See S3 Source below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobForProviderDestinationS3 {
    /// Name of the S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub bucket: Option<String>,
    /// An Amazon S3 object key prefix that you can use to limit signed objects keys to begin with the specified prefix.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub prefix: Option<String>,
}

/// Reference to a SigningProfile in signer to populate profileName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobForProviderProfileNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SigningJobForProviderProfileNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobForProviderProfileNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SigningJobForProviderProfileNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SigningJobForProviderProfileNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SigningJobForProviderProfileNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SigningJobForProviderProfileNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a SigningProfile in signer to populate profileName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobForProviderProfileNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SigningJobForProviderProfileNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobForProviderProfileNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SigningJobForProviderProfileNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SigningJobForProviderProfileNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SigningJobForProviderProfileNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SigningJobForProviderProfileNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The S3 bucket that contains the object to sign. See Source below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobForProviderSource {
    /// A configuration block describing the S3 Source object: See S3 Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub s3: Option<SigningJobForProviderSourceS3>,
}

/// A configuration block describing the S3 Source object: See S3 Source below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobForProviderSourceS3 {
    /// Name of the S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub bucket: Option<String>,
    /// Key name of the object that contains your unsigned code.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// Version of your source image in your version enabled S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobInitProvider {
    /// The S3 bucket in which to save your signed object. See Destination below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub destination: Option<SigningJobInitProviderDestination>,
    /// Set this argument to true to ignore signing job failures and retrieve failed status and reason. Default false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ignoreSigningJobFailure"
    )]
    #[builder(default, setter(strip_option))]
    pub ignore_signing_job_failure: Option<bool>,
    /// The name of the profile to initiate the signing operation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "profileName"
    )]
    #[builder(default, setter(strip_option))]
    pub profile_name: Option<String>,
    /// Reference to a SigningProfile in signer to populate profileName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "profileNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub profile_name_ref: Option<SigningJobInitProviderProfileNameRef>,
    /// Selector for a SigningProfile in signer to populate profileName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "profileNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub profile_name_selector: Option<SigningJobInitProviderProfileNameSelector>,
    /// The S3 bucket that contains the object to sign. See Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub source: Option<SigningJobInitProviderSource>,
}

/// The S3 bucket in which to save your signed object. See Destination below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobInitProviderDestination {
    /// A configuration block describing the S3 Source object: See S3 Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub s3: Option<SigningJobInitProviderDestinationS3>,
}

/// A configuration block describing the S3 Source object: See S3 Source below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobInitProviderDestinationS3 {
    /// Name of the S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub bucket: Option<String>,
    /// An Amazon S3 object key prefix that you can use to limit signed objects keys to begin with the specified prefix.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub prefix: Option<String>,
}

/// Reference to a SigningProfile in signer to populate profileName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobInitProviderProfileNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SigningJobInitProviderProfileNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobInitProviderProfileNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SigningJobInitProviderProfileNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SigningJobInitProviderProfileNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SigningJobInitProviderProfileNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SigningJobInitProviderProfileNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a SigningProfile in signer to populate profileName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobInitProviderProfileNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SigningJobInitProviderProfileNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobInitProviderProfileNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SigningJobInitProviderProfileNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SigningJobInitProviderProfileNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SigningJobInitProviderProfileNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SigningJobInitProviderProfileNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The S3 bucket that contains the object to sign. See Source below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobInitProviderSource {
    /// A configuration block describing the S3 Source object: See S3 Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub s3: Option<SigningJobInitProviderSourceS3>,
}

/// A configuration block describing the S3 Source object: See S3 Source below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobInitProviderSourceS3 {
    /// Name of the S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub bucket: Option<String>,
    /// Key name of the object that contains your unsigned code.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// Version of your source image in your version enabled S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SigningJobProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SigningJobProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SigningJobProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SigningJobProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SigningJobProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<SigningJobPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<SigningJobPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<SigningJobPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<SigningJobPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<SigningJobPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SigningJobPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SigningJobPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// SigningJobStatus defines the observed state of SigningJob.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<SigningJobStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobStatusAtProvider {
    /// Date and time in RFC3339 format that the signing job was completed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "completedAt"
    )]
    #[builder(default, setter(strip_option))]
    pub completed_at: Option<String>,
    /// Date and time in RFC3339 format that the signing job was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdAt")]
    #[builder(default, setter(strip_option))]
    pub created_at: Option<String>,
    /// The S3 bucket in which to save your signed object. See Destination below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub destination: Option<SigningJobStatusAtProviderDestination>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Set this argument to true to ignore signing job failures and retrieve failed status and reason. Default false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ignoreSigningJobFailure"
    )]
    #[builder(default, setter(strip_option))]
    pub ignore_signing_job_failure: Option<bool>,
    /// The ID of the signing job on output.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobId")]
    #[builder(default, setter(strip_option))]
    pub job_id: Option<String>,
    /// The IAM entity that initiated the signing job.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jobInvoker"
    )]
    #[builder(default, setter(strip_option))]
    pub job_invoker: Option<String>,
    /// The AWS account ID of the job owner.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobOwner")]
    #[builder(default, setter(strip_option))]
    pub job_owner: Option<String>,
    /// A human-readable name for the signing platform associated with the signing job.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "platformDisplayName"
    )]
    #[builder(default, setter(strip_option))]
    pub platform_display_name: Option<String>,
    /// The platform to which your signed code image will be distributed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "platformId"
    )]
    #[builder(default, setter(strip_option))]
    pub platform_id: Option<String>,
    /// The name of the profile to initiate the signing operation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "profileName"
    )]
    #[builder(default, setter(strip_option))]
    pub profile_name: Option<String>,
    /// The version of the signing profile used to initiate the signing job.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "profileVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub profile_version: Option<String>,
    /// The IAM principal that requested the signing job.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requestedBy"
    )]
    #[builder(default, setter(strip_option))]
    pub requested_by: Option<String>,
    /// A revocation record if the signature generated by the signing job has been revoked. Contains a timestamp and the ID of the IAM entity that revoked the signature.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "revocationRecord"
    )]
    #[builder(default, setter(strip_option))]
    pub revocation_record: Option<Vec<SigningJobStatusAtProviderRevocationRecord>>,
    /// The time when the signature of a signing job expires.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signatureExpiresAt"
    )]
    #[builder(default, setter(strip_option))]
    pub signature_expires_at: Option<String>,
    /// Name of the S3 bucket where the signed code image is saved by code signing.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signedObject"
    )]
    #[builder(default, setter(strip_option))]
    pub signed_object: Option<Vec<SigningJobStatusAtProviderSignedObject>>,
    /// The S3 bucket that contains the object to sign. See Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub source: Option<SigningJobStatusAtProviderSource>,
    /// Status of the signing job.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub status: Option<String>,
    /// String value that contains the status reason.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusReason"
    )]
    #[builder(default, setter(strip_option))]
    pub status_reason: Option<String>,
}

/// The S3 bucket in which to save your signed object. See Destination below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobStatusAtProviderDestination {
    /// A configuration block describing the S3 Source object: See S3 Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub s3: Option<SigningJobStatusAtProviderDestinationS3>,
}

/// A configuration block describing the S3 Source object: See S3 Source below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobStatusAtProviderDestinationS3 {
    /// Name of the S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub bucket: Option<String>,
    /// An Amazon S3 object key prefix that you can use to limit signed objects keys to begin with the specified prefix.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobStatusAtProviderRevocationRecord {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub reason: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revokedAt")]
    #[builder(default, setter(strip_option))]
    pub revoked_at: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revokedBy")]
    #[builder(default, setter(strip_option))]
    pub revoked_by: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobStatusAtProviderSignedObject {
    /// A configuration block describing the S3 Source object: See S3 Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub s3: Option<Vec<SigningJobStatusAtProviderSignedObjectS3>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobStatusAtProviderSignedObjectS3 {
    /// Name of the S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub bucket: Option<String>,
    /// Key name of the object that contains your unsigned code.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
}

/// The S3 bucket that contains the object to sign. See Source below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobStatusAtProviderSource {
    /// A configuration block describing the S3 Source object: See S3 Source below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub s3: Option<SigningJobStatusAtProviderSourceS3>,
}

/// A configuration block describing the S3 Source object: See S3 Source below for details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct SigningJobStatusAtProviderSourceS3 {
    /// Name of the S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub bucket: Option<String>,
    /// Key name of the object that contains your unsigned code.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// Version of your source image in your version enabled S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

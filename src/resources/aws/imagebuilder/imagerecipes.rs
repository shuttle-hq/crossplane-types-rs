// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ImageRecipeSpec defines the desired state of ImageRecipe
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "imagebuilder.aws.upbound.io",
    version = "v1beta2",
    kind = "ImageRecipe",
    plural = "imagerecipes"
)]
#[kube(status = "ImageRecipeStatus")]
pub struct ImageRecipeSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<ImageRecipeDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ImageRecipeForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<ImageRecipeInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<ImageRecipeProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<ImageRecipePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<ImageRecipeWriteConnectionSecretToRef>,
}

/// ImageRecipeSpec defines the desired state of ImageRecipe
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageRecipeDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeForProvider {
    /// Configuration block(s) with block device mappings for the image recipe. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blockDeviceMapping"
    )]
    #[builder(default, setter(strip_option))]
    pub block_device_mapping: Option<Vec<ImageRecipeForProviderBlockDeviceMapping>>,
    /// Ordered configuration block(s) with components for the image recipe. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub component: Option<Vec<ImageRecipeForProviderComponent>>,
    /// Description of the image recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Name of the image recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The image recipe uses this image as a base from which to build your customized image. The value can be the base image ARN or an AMI ID.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parentImage"
    )]
    #[builder(default, setter(strip_option))]
    pub parent_image: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Configuration block for the Systems Manager Agent installed by default by Image Builder. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "systemsManagerAgent"
    )]
    #[builder(default, setter(strip_option))]
    pub systems_manager_agent: Option<ImageRecipeForProviderSystemsManagerAgent>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Base64 encoded user data. Use this to provide commands or a command script to run when you launch your build instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userDataBase64"
    )]
    #[builder(default, setter(strip_option))]
    pub user_data_base64: Option<String>,
    /// The semantic version of the image recipe, which specifies the version in the following format, with numeric values in each position to indicate a specific version: major.minor.patch. For example: 1.0.0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
    /// The working directory to be used during build and test workflows.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workingDirectory"
    )]
    #[builder(default, setter(strip_option))]
    pub working_directory: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeForProviderBlockDeviceMapping {
    /// Name of the device. For example, /dev/sda or /dev/xvdb.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub device_name: Option<String>,
    /// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub ebs: Option<ImageRecipeForProviderBlockDeviceMappingEbs>,
    /// Set to true to remove a mapping from the parent image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    #[builder(default, setter(strip_option))]
    pub no_device: Option<bool>,
    /// Virtual device name. For example, ephemeral0. Instance store volumes are numbered starting from 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualName"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_name: Option<String>,
}

/// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeForProviderBlockDeviceMappingEbs {
    /// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteOnTermination"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_on_termination: Option<String>,
    /// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub encrypted: Option<String>,
    /// Number of Input/Output (I/O) operations per second to provision for an io1 or io2 volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub iops: Option<f64>,
    /// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Identifier of the EC2 Volume Snapshot.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotId"
    )]
    #[builder(default, setter(strip_option))]
    pub snapshot_id: Option<String>,
    /// For GP3 volumes only. The throughput in MiB/s that the volume supports.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub throughput: Option<f64>,
    /// Size of the volume, in GiB.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_size: Option<f64>,
    /// Type of the volume. For example, gp2 or io2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeForProviderComponent {
    /// Amazon Resource Name (ARN) of the Image Builder Component to associate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "componentArn"
    )]
    #[builder(default, setter(strip_option))]
    pub component_arn: Option<String>,
    /// Reference to a Component in imagebuilder to populate componentArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "componentArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub component_arn_ref: Option<ImageRecipeForProviderComponentComponentArnRef>,
    /// Selector for a Component in imagebuilder to populate componentArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "componentArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub component_arn_selector: Option<ImageRecipeForProviderComponentComponentArnSelector>,
    /// Configuration block(s) for parameters to configure the component. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameter: Option<Vec<ImageRecipeForProviderComponentParameter>>,
}

/// Reference to a Component in imagebuilder to populate componentArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeForProviderComponentComponentArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ImageRecipeForProviderComponentComponentArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeForProviderComponentComponentArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ImageRecipeForProviderComponentComponentArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ImageRecipeForProviderComponentComponentArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageRecipeForProviderComponentComponentArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageRecipeForProviderComponentComponentArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Component in imagebuilder to populate componentArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeForProviderComponentComponentArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ImageRecipeForProviderComponentComponentArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeForProviderComponentComponentArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ImageRecipeForProviderComponentComponentArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ImageRecipeForProviderComponentComponentArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageRecipeForProviderComponentComponentArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageRecipeForProviderComponentComponentArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeForProviderComponentParameter {
    /// The name of the component parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The value for the named component parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Configuration block for the Systems Manager Agent installed by default by Image Builder. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeForProviderSystemsManagerAgent {
    /// Whether to remove the Systems Manager Agent after the image has been built.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "uninstallAfterBuild"
    )]
    #[builder(default, setter(strip_option))]
    pub uninstall_after_build: Option<bool>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeInitProvider {
    /// Configuration block(s) with block device mappings for the image recipe. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blockDeviceMapping"
    )]
    #[builder(default, setter(strip_option))]
    pub block_device_mapping: Option<Vec<ImageRecipeInitProviderBlockDeviceMapping>>,
    /// Ordered configuration block(s) with components for the image recipe. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub component: Option<Vec<ImageRecipeInitProviderComponent>>,
    /// Description of the image recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Name of the image recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The image recipe uses this image as a base from which to build your customized image. The value can be the base image ARN or an AMI ID.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parentImage"
    )]
    #[builder(default, setter(strip_option))]
    pub parent_image: Option<String>,
    /// Configuration block for the Systems Manager Agent installed by default by Image Builder. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "systemsManagerAgent"
    )]
    #[builder(default, setter(strip_option))]
    pub systems_manager_agent: Option<ImageRecipeInitProviderSystemsManagerAgent>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Base64 encoded user data. Use this to provide commands or a command script to run when you launch your build instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userDataBase64"
    )]
    #[builder(default, setter(strip_option))]
    pub user_data_base64: Option<String>,
    /// The semantic version of the image recipe, which specifies the version in the following format, with numeric values in each position to indicate a specific version: major.minor.patch. For example: 1.0.0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
    /// The working directory to be used during build and test workflows.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workingDirectory"
    )]
    #[builder(default, setter(strip_option))]
    pub working_directory: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeInitProviderBlockDeviceMapping {
    /// Name of the device. For example, /dev/sda or /dev/xvdb.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub device_name: Option<String>,
    /// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub ebs: Option<ImageRecipeInitProviderBlockDeviceMappingEbs>,
    /// Set to true to remove a mapping from the parent image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    #[builder(default, setter(strip_option))]
    pub no_device: Option<bool>,
    /// Virtual device name. For example, ephemeral0. Instance store volumes are numbered starting from 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualName"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_name: Option<String>,
}

/// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeInitProviderBlockDeviceMappingEbs {
    /// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteOnTermination"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_on_termination: Option<String>,
    /// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub encrypted: Option<String>,
    /// Number of Input/Output (I/O) operations per second to provision for an io1 or io2 volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub iops: Option<f64>,
    /// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Identifier of the EC2 Volume Snapshot.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotId"
    )]
    #[builder(default, setter(strip_option))]
    pub snapshot_id: Option<String>,
    /// For GP3 volumes only. The throughput in MiB/s that the volume supports.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub throughput: Option<f64>,
    /// Size of the volume, in GiB.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_size: Option<f64>,
    /// Type of the volume. For example, gp2 or io2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeInitProviderComponent {
    /// Amazon Resource Name (ARN) of the Image Builder Component to associate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "componentArn"
    )]
    #[builder(default, setter(strip_option))]
    pub component_arn: Option<String>,
    /// Reference to a Component in imagebuilder to populate componentArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "componentArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub component_arn_ref: Option<ImageRecipeInitProviderComponentComponentArnRef>,
    /// Selector for a Component in imagebuilder to populate componentArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "componentArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub component_arn_selector: Option<ImageRecipeInitProviderComponentComponentArnSelector>,
    /// Configuration block(s) for parameters to configure the component. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameter: Option<Vec<ImageRecipeInitProviderComponentParameter>>,
}

/// Reference to a Component in imagebuilder to populate componentArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeInitProviderComponentComponentArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ImageRecipeInitProviderComponentComponentArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeInitProviderComponentComponentArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ImageRecipeInitProviderComponentComponentArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ImageRecipeInitProviderComponentComponentArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageRecipeInitProviderComponentComponentArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageRecipeInitProviderComponentComponentArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Component in imagebuilder to populate componentArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeInitProviderComponentComponentArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ImageRecipeInitProviderComponentComponentArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeInitProviderComponentComponentArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ImageRecipeInitProviderComponentComponentArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ImageRecipeInitProviderComponentComponentArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageRecipeInitProviderComponentComponentArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageRecipeInitProviderComponentComponentArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeInitProviderComponentParameter {
    /// The name of the component parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The value for the named component parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Configuration block for the Systems Manager Agent installed by default by Image Builder. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeInitProviderSystemsManagerAgent {
    /// Whether to remove the Systems Manager Agent after the image has been built.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "uninstallAfterBuild"
    )]
    #[builder(default, setter(strip_option))]
    pub uninstall_after_build: Option<bool>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ImageRecipeProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ImageRecipeProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ImageRecipeProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageRecipeProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageRecipeProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<ImageRecipePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<ImageRecipePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ImageRecipePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ImageRecipePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ImageRecipePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageRecipePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImageRecipePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ImageRecipeStatus defines the observed state of ImageRecipe.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<ImageRecipeStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeStatusAtProvider {
    /// Amazon Resource Name (ARN) of the image recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Configuration block(s) with block device mappings for the image recipe. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blockDeviceMapping"
    )]
    #[builder(default, setter(strip_option))]
    pub block_device_mapping: Option<Vec<ImageRecipeStatusAtProviderBlockDeviceMapping>>,
    /// Ordered configuration block(s) with components for the image recipe. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub component: Option<Vec<ImageRecipeStatusAtProviderComponent>>,
    /// Date the image recipe was created.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dateCreated"
    )]
    #[builder(default, setter(strip_option))]
    pub date_created: Option<String>,
    /// Description of the image recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Name of the image recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Owner of the image recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub owner: Option<String>,
    /// The image recipe uses this image as a base from which to build your customized image. The value can be the base image ARN or an AMI ID.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parentImage"
    )]
    #[builder(default, setter(strip_option))]
    pub parent_image: Option<String>,
    /// Platform of the image recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub platform: Option<String>,
    /// Configuration block for the Systems Manager Agent installed by default by Image Builder. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "systemsManagerAgent"
    )]
    #[builder(default, setter(strip_option))]
    pub systems_manager_agent: Option<ImageRecipeStatusAtProviderSystemsManagerAgent>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// Base64 encoded user data. Use this to provide commands or a command script to run when you launch your build instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userDataBase64"
    )]
    #[builder(default, setter(strip_option))]
    pub user_data_base64: Option<String>,
    /// The semantic version of the image recipe, which specifies the version in the following format, with numeric values in each position to indicate a specific version: major.minor.patch. For example: 1.0.0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
    /// The working directory to be used during build and test workflows.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workingDirectory"
    )]
    #[builder(default, setter(strip_option))]
    pub working_directory: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeStatusAtProviderBlockDeviceMapping {
    /// Name of the device. For example, /dev/sda or /dev/xvdb.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub device_name: Option<String>,
    /// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub ebs: Option<ImageRecipeStatusAtProviderBlockDeviceMappingEbs>,
    /// Set to true to remove a mapping from the parent image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    #[builder(default, setter(strip_option))]
    pub no_device: Option<bool>,
    /// Virtual device name. For example, ephemeral0. Instance store volumes are numbered starting from 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualName"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_name: Option<String>,
}

/// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeStatusAtProviderBlockDeviceMappingEbs {
    /// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteOnTermination"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_on_termination: Option<String>,
    /// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub encrypted: Option<String>,
    /// Number of Input/Output (I/O) operations per second to provision for an io1 or io2 volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub iops: Option<f64>,
    /// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Identifier of the EC2 Volume Snapshot.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotId"
    )]
    #[builder(default, setter(strip_option))]
    pub snapshot_id: Option<String>,
    /// For GP3 volumes only. The throughput in MiB/s that the volume supports.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub throughput: Option<f64>,
    /// Size of the volume, in GiB.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_size: Option<f64>,
    /// Type of the volume. For example, gp2 or io2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeStatusAtProviderComponent {
    /// Amazon Resource Name (ARN) of the Image Builder Component to associate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "componentArn"
    )]
    #[builder(default, setter(strip_option))]
    pub component_arn: Option<String>,
    /// Configuration block(s) for parameters to configure the component. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameter: Option<Vec<ImageRecipeStatusAtProviderComponentParameter>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeStatusAtProviderComponentParameter {
    /// The name of the component parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The value for the named component parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Configuration block for the Systems Manager Agent installed by default by Image Builder. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ImageRecipeStatusAtProviderSystemsManagerAgent {
    /// Whether to remove the Systems Manager Agent after the image has been built.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "uninstallAfterBuild"
    )]
    #[builder(default, setter(strip_option))]
    pub uninstall_after_build: Option<bool>,
}

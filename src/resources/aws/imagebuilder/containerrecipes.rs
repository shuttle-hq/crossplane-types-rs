// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ContainerRecipeSpec defines the desired state of ContainerRecipe
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "imagebuilder.aws.upbound.io",
    version = "v1beta2",
    kind = "ContainerRecipe",
    plural = "containerrecipes"
)]
#[kube(status = "ContainerRecipeStatus")]
pub struct ContainerRecipeSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<ContainerRecipeDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ContainerRecipeForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<ContainerRecipeInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<ContainerRecipeProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<ContainerRecipePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<ContainerRecipeWriteConnectionSecretToRef>,
}

/// ContainerRecipeSpec defines the desired state of ContainerRecipe
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProvider {
    /// Ordered configuration block(s) with components for the container recipe. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub component: Option<Vec<ContainerRecipeForProviderComponent>>,
    /// The type of the container to create. Valid values: DOCKER.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerType"
    )]
    #[builder(default, setter(strip_option))]
    pub container_type: Option<String>,
    /// The description of the container recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// The Dockerfile template used to build the image as an inline data blob.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dockerfileTemplateData"
    )]
    #[builder(default, setter(strip_option))]
    pub dockerfile_template_data: Option<String>,
    /// The Amazon S3 URI for the Dockerfile that will be used to build the container image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dockerfileTemplateUri"
    )]
    #[builder(default, setter(strip_option))]
    pub dockerfile_template_uri: Option<String>,
    /// Configuration block used to configure an instance for building and testing container images. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_configuration: Option<ContainerRecipeForProviderInstanceConfiguration>,
    /// The KMS key used to encrypt the container image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_id_ref: Option<ContainerRecipeForProviderKmsKeyIdRef>,
    /// Selector for a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_id_selector: Option<ContainerRecipeForProviderKmsKeyIdSelector>,
    /// The name of the container recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The base image for the container recipe.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parentImage"
    )]
    #[builder(default, setter(strip_option))]
    pub parent_image: Option<String>,
    /// Specifies the operating system platform when you use a custom base image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "platformOverride"
    )]
    #[builder(default, setter(strip_option))]
    pub platform_override: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// The destination repository for the container image. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetRepository"
    )]
    #[builder(default, setter(strip_option))]
    pub target_repository: Option<ContainerRecipeForProviderTargetRepository>,
    /// Version of the container recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
    /// The working directory to be used during build and test workflows.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workingDirectory"
    )]
    #[builder(default, setter(strip_option))]
    pub working_directory: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProviderComponent {
    /// Amazon Resource Name (ARN) of the Image Builder Component to associate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "componentArn"
    )]
    #[builder(default, setter(strip_option))]
    pub component_arn: Option<String>,
    /// Reference to a Component in imagebuilder to populate componentArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "componentArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub component_arn_ref: Option<ContainerRecipeForProviderComponentComponentArnRef>,
    /// Selector for a Component in imagebuilder to populate componentArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "componentArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub component_arn_selector: Option<ContainerRecipeForProviderComponentComponentArnSelector>,
    /// Configuration block(s) for parameters to configure the component. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameter: Option<Vec<ContainerRecipeForProviderComponentParameter>>,
}

/// Reference to a Component in imagebuilder to populate componentArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProviderComponentComponentArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ContainerRecipeForProviderComponentComponentArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProviderComponentComponentArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ContainerRecipeForProviderComponentComponentArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ContainerRecipeForProviderComponentComponentArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeForProviderComponentComponentArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeForProviderComponentComponentArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Component in imagebuilder to populate componentArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProviderComponentComponentArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ContainerRecipeForProviderComponentComponentArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProviderComponentComponentArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ContainerRecipeForProviderComponentComponentArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ContainerRecipeForProviderComponentComponentArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeForProviderComponentComponentArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeForProviderComponentComponentArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProviderComponentParameter {
    /// The name of the component parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The value for the named component parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Configuration block used to configure an instance for building and testing container images. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProviderInstanceConfiguration {
    /// Configuration block(s) with block device mappings for the container recipe. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blockDeviceMapping"
    )]
    #[builder(default, setter(strip_option))]
    pub block_device_mapping:
        Option<Vec<ContainerRecipeForProviderInstanceConfigurationBlockDeviceMapping>>,
    /// The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub image: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProviderInstanceConfigurationBlockDeviceMapping {
    /// Name of the device. For example, /dev/sda or /dev/xvdb.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub device_name: Option<String>,
    /// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub ebs: Option<ContainerRecipeForProviderInstanceConfigurationBlockDeviceMappingEbs>,
    /// Set to true to remove a mapping from the parent image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    #[builder(default, setter(strip_option))]
    pub no_device: Option<bool>,
    /// Virtual device name. For example, ephemeral0. Instance store volumes are numbered starting from 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualName"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_name: Option<String>,
}

/// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProviderInstanceConfigurationBlockDeviceMappingEbs {
    /// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteOnTermination"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_on_termination: Option<String>,
    /// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub encrypted: Option<String>,
    /// Number of Input/Output (I/O) operations per second to provision for an io1 or io2 volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub iops: Option<f64>,
    /// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Identifier of the EC2 Volume Snapshot.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotId"
    )]
    #[builder(default, setter(strip_option))]
    pub snapshot_id: Option<String>,
    /// For GP3 volumes only. The throughput in MiB/s that the volume supports.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub throughput: Option<f64>,
    /// Size of the volume, in GiB.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_size: Option<f64>,
    /// Type of the volume. For example, gp2 or io2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_type: Option<String>,
}

/// Reference to a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProviderKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ContainerRecipeForProviderKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProviderKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ContainerRecipeForProviderKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ContainerRecipeForProviderKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeForProviderKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeForProviderKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProviderKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ContainerRecipeForProviderKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProviderKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ContainerRecipeForProviderKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ContainerRecipeForProviderKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeForProviderKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeForProviderKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The destination repository for the container image. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProviderTargetRepository {
    /// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryName"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_name: Option<String>,
    /// Reference to a Repository in ecr to populate repositoryName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_name_ref: Option<ContainerRecipeForProviderTargetRepositoryRepositoryNameRef>,
    /// Selector for a Repository in ecr to populate repositoryName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_name_selector:
        Option<ContainerRecipeForProviderTargetRepositoryRepositoryNameSelector>,
    /// The service in which this image is registered. Valid values: ECR.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub service: Option<String>,
}

/// Reference to a Repository in ecr to populate repositoryName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProviderTargetRepositoryRepositoryNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ContainerRecipeForProviderTargetRepositoryRepositoryNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProviderTargetRepositoryRepositoryNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ContainerRecipeForProviderTargetRepositoryRepositoryNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ContainerRecipeForProviderTargetRepositoryRepositoryNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeForProviderTargetRepositoryRepositoryNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeForProviderTargetRepositoryRepositoryNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Repository in ecr to populate repositoryName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProviderTargetRepositoryRepositoryNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ContainerRecipeForProviderTargetRepositoryRepositoryNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeForProviderTargetRepositoryRepositoryNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ContainerRecipeForProviderTargetRepositoryRepositoryNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<ContainerRecipeForProviderTargetRepositoryRepositoryNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeForProviderTargetRepositoryRepositoryNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeForProviderTargetRepositoryRepositoryNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProvider {
    /// Ordered configuration block(s) with components for the container recipe. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub component: Option<Vec<ContainerRecipeInitProviderComponent>>,
    /// The type of the container to create. Valid values: DOCKER.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerType"
    )]
    #[builder(default, setter(strip_option))]
    pub container_type: Option<String>,
    /// The description of the container recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// The Dockerfile template used to build the image as an inline data blob.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dockerfileTemplateData"
    )]
    #[builder(default, setter(strip_option))]
    pub dockerfile_template_data: Option<String>,
    /// The Amazon S3 URI for the Dockerfile that will be used to build the container image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dockerfileTemplateUri"
    )]
    #[builder(default, setter(strip_option))]
    pub dockerfile_template_uri: Option<String>,
    /// Configuration block used to configure an instance for building and testing container images. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_configuration: Option<ContainerRecipeInitProviderInstanceConfiguration>,
    /// The KMS key used to encrypt the container image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_id_ref: Option<ContainerRecipeInitProviderKmsKeyIdRef>,
    /// Selector for a Key in kms to populate kmsKeyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kmsKeyIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub kms_key_id_selector: Option<ContainerRecipeInitProviderKmsKeyIdSelector>,
    /// The name of the container recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The base image for the container recipe.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parentImage"
    )]
    #[builder(default, setter(strip_option))]
    pub parent_image: Option<String>,
    /// Specifies the operating system platform when you use a custom base image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "platformOverride"
    )]
    #[builder(default, setter(strip_option))]
    pub platform_override: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// The destination repository for the container image. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetRepository"
    )]
    #[builder(default, setter(strip_option))]
    pub target_repository: Option<ContainerRecipeInitProviderTargetRepository>,
    /// Version of the container recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
    /// The working directory to be used during build and test workflows.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workingDirectory"
    )]
    #[builder(default, setter(strip_option))]
    pub working_directory: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProviderComponent {
    /// Amazon Resource Name (ARN) of the Image Builder Component to associate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "componentArn"
    )]
    #[builder(default, setter(strip_option))]
    pub component_arn: Option<String>,
    /// Reference to a Component in imagebuilder to populate componentArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "componentArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub component_arn_ref: Option<ContainerRecipeInitProviderComponentComponentArnRef>,
    /// Selector for a Component in imagebuilder to populate componentArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "componentArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub component_arn_selector: Option<ContainerRecipeInitProviderComponentComponentArnSelector>,
    /// Configuration block(s) for parameters to configure the component. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameter: Option<Vec<ContainerRecipeInitProviderComponentParameter>>,
}

/// Reference to a Component in imagebuilder to populate componentArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProviderComponentComponentArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ContainerRecipeInitProviderComponentComponentArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProviderComponentComponentArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ContainerRecipeInitProviderComponentComponentArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ContainerRecipeInitProviderComponentComponentArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeInitProviderComponentComponentArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeInitProviderComponentComponentArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Component in imagebuilder to populate componentArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProviderComponentComponentArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ContainerRecipeInitProviderComponentComponentArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProviderComponentComponentArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ContainerRecipeInitProviderComponentComponentArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ContainerRecipeInitProviderComponentComponentArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeInitProviderComponentComponentArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeInitProviderComponentComponentArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProviderComponentParameter {
    /// The name of the component parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The value for the named component parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Configuration block used to configure an instance for building and testing container images. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProviderInstanceConfiguration {
    /// Configuration block(s) with block device mappings for the container recipe. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blockDeviceMapping"
    )]
    #[builder(default, setter(strip_option))]
    pub block_device_mapping:
        Option<Vec<ContainerRecipeInitProviderInstanceConfigurationBlockDeviceMapping>>,
    /// The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub image: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProviderInstanceConfigurationBlockDeviceMapping {
    /// Name of the device. For example, /dev/sda or /dev/xvdb.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub device_name: Option<String>,
    /// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub ebs: Option<ContainerRecipeInitProviderInstanceConfigurationBlockDeviceMappingEbs>,
    /// Set to true to remove a mapping from the parent image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    #[builder(default, setter(strip_option))]
    pub no_device: Option<bool>,
    /// Virtual device name. For example, ephemeral0. Instance store volumes are numbered starting from 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualName"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_name: Option<String>,
}

/// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProviderInstanceConfigurationBlockDeviceMappingEbs {
    /// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteOnTermination"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_on_termination: Option<String>,
    /// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub encrypted: Option<String>,
    /// Number of Input/Output (I/O) operations per second to provision for an io1 or io2 volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub iops: Option<f64>,
    /// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Identifier of the EC2 Volume Snapshot.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotId"
    )]
    #[builder(default, setter(strip_option))]
    pub snapshot_id: Option<String>,
    /// For GP3 volumes only. The throughput in MiB/s that the volume supports.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub throughput: Option<f64>,
    /// Size of the volume, in GiB.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_size: Option<f64>,
    /// Type of the volume. For example, gp2 or io2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_type: Option<String>,
}

/// Reference to a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProviderKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ContainerRecipeInitProviderKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProviderKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ContainerRecipeInitProviderKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ContainerRecipeInitProviderKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeInitProviderKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeInitProviderKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProviderKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ContainerRecipeInitProviderKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProviderKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ContainerRecipeInitProviderKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ContainerRecipeInitProviderKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeInitProviderKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeInitProviderKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The destination repository for the container image. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProviderTargetRepository {
    /// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryName"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_name: Option<String>,
    /// Reference to a Repository in ecr to populate repositoryName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_name_ref: Option<ContainerRecipeInitProviderTargetRepositoryRepositoryNameRef>,
    /// Selector for a Repository in ecr to populate repositoryName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_name_selector:
        Option<ContainerRecipeInitProviderTargetRepositoryRepositoryNameSelector>,
    /// The service in which this image is registered. Valid values: ECR.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub service: Option<String>,
}

/// Reference to a Repository in ecr to populate repositoryName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProviderTargetRepositoryRepositoryNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ContainerRecipeInitProviderTargetRepositoryRepositoryNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProviderTargetRepositoryRepositoryNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ContainerRecipeInitProviderTargetRepositoryRepositoryNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ContainerRecipeInitProviderTargetRepositoryRepositoryNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeInitProviderTargetRepositoryRepositoryNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeInitProviderTargetRepositoryRepositoryNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Repository in ecr to populate repositoryName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProviderTargetRepositoryRepositoryNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ContainerRecipeInitProviderTargetRepositoryRepositoryNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeInitProviderTargetRepositoryRepositoryNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ContainerRecipeInitProviderTargetRepositoryRepositoryNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<ContainerRecipeInitProviderTargetRepositoryRepositoryNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeInitProviderTargetRepositoryRepositoryNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeInitProviderTargetRepositoryRepositoryNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ContainerRecipeProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ContainerRecipeProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ContainerRecipeProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipeProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<ContainerRecipePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<ContainerRecipePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ContainerRecipePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ContainerRecipePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ContainerRecipePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ContainerRecipePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ContainerRecipeStatus defines the observed state of ContainerRecipe.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<ContainerRecipeStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeStatusAtProvider {
    /// Amazon Resource Name (ARN) of the container recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Ordered configuration block(s) with components for the container recipe. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub component: Option<Vec<ContainerRecipeStatusAtProviderComponent>>,
    /// The type of the container to create. Valid values: DOCKER.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerType"
    )]
    #[builder(default, setter(strip_option))]
    pub container_type: Option<String>,
    /// Date the container recipe was created.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dateCreated"
    )]
    #[builder(default, setter(strip_option))]
    pub date_created: Option<String>,
    /// The description of the container recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// The Dockerfile template used to build the image as an inline data blob.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dockerfileTemplateData"
    )]
    #[builder(default, setter(strip_option))]
    pub dockerfile_template_data: Option<String>,
    /// The Amazon S3 URI for the Dockerfile that will be used to build the container image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dockerfileTemplateUri"
    )]
    #[builder(default, setter(strip_option))]
    pub dockerfile_template_uri: Option<String>,
    /// A flag that indicates if the target container is encrypted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub encrypted: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Configuration block used to configure an instance for building and testing container images. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_configuration: Option<ContainerRecipeStatusAtProviderInstanceConfiguration>,
    /// The KMS key used to encrypt the container image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// The name of the container recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Owner of the container recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub owner: Option<String>,
    /// The base image for the container recipe.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parentImage"
    )]
    #[builder(default, setter(strip_option))]
    pub parent_image: Option<String>,
    /// Platform of the container recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub platform: Option<String>,
    /// Specifies the operating system platform when you use a custom base image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "platformOverride"
    )]
    #[builder(default, setter(strip_option))]
    pub platform_override: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// The destination repository for the container image. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetRepository"
    )]
    #[builder(default, setter(strip_option))]
    pub target_repository: Option<ContainerRecipeStatusAtProviderTargetRepository>,
    /// Version of the container recipe.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
    /// The working directory to be used during build and test workflows.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workingDirectory"
    )]
    #[builder(default, setter(strip_option))]
    pub working_directory: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeStatusAtProviderComponent {
    /// Amazon Resource Name (ARN) of the Image Builder Component to associate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "componentArn"
    )]
    #[builder(default, setter(strip_option))]
    pub component_arn: Option<String>,
    /// Configuration block(s) for parameters to configure the component. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameter: Option<Vec<ContainerRecipeStatusAtProviderComponentParameter>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeStatusAtProviderComponentParameter {
    /// The name of the component parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The value for the named component parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Configuration block used to configure an instance for building and testing container images. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeStatusAtProviderInstanceConfiguration {
    /// Configuration block(s) with block device mappings for the container recipe. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "blockDeviceMapping"
    )]
    #[builder(default, setter(strip_option))]
    pub block_device_mapping:
        Option<Vec<ContainerRecipeStatusAtProviderInstanceConfigurationBlockDeviceMapping>>,
    /// The AMI ID to use as the base image for a container build and test instance. If not specified, Image Builder will use the appropriate ECS-optimized AMI as a base image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub image: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeStatusAtProviderInstanceConfigurationBlockDeviceMapping {
    /// Name of the device. For example, /dev/sda or /dev/xvdb.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deviceName"
    )]
    #[builder(default, setter(strip_option))]
    pub device_name: Option<String>,
    /// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub ebs: Option<ContainerRecipeStatusAtProviderInstanceConfigurationBlockDeviceMappingEbs>,
    /// Set to true to remove a mapping from the parent image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noDevice")]
    #[builder(default, setter(strip_option))]
    pub no_device: Option<bool>,
    /// Virtual device name. For example, ephemeral0. Instance store volumes are numbered starting from 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "virtualName"
    )]
    #[builder(default, setter(strip_option))]
    pub virtual_name: Option<String>,
}

/// Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeStatusAtProviderInstanceConfigurationBlockDeviceMappingEbs {
    /// Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteOnTermination"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_on_termination: Option<String>,
    /// Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub encrypted: Option<String>,
    /// Number of Input/Output (I/O) operations per second to provision for an io1 or io2 volume.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub iops: Option<f64>,
    /// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Identifier of the EC2 Volume Snapshot.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "snapshotId"
    )]
    #[builder(default, setter(strip_option))]
    pub snapshot_id: Option<String>,
    /// For GP3 volumes only. The throughput in MiB/s that the volume supports.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub throughput: Option<f64>,
    /// Size of the volume, in GiB.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeSize"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_size: Option<f64>,
    /// Type of the volume. For example, gp2 or io2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "volumeType"
    )]
    #[builder(default, setter(strip_option))]
    pub volume_type: Option<String>,
}

/// The destination repository for the container image. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ContainerRecipeStatusAtProviderTargetRepository {
    /// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryName"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_name: Option<String>,
    /// The service in which this image is registered. Valid values: ECR.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub service: Option<String>,
}

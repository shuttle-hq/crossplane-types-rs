// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// DistributionConfigurationSpec defines the desired state of DistributionConfiguration
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "imagebuilder.aws.upbound.io",
    version = "v1beta2",
    kind = "DistributionConfiguration",
    plural = "distributionconfigurations"
)]
#[kube(status = "DistributionConfigurationStatus")]
pub struct DistributionConfigurationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<DistributionConfigurationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: DistributionConfigurationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<DistributionConfigurationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<DistributionConfigurationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<DistributionConfigurationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<DistributionConfigurationWriteConnectionSecretToRef>,
}

/// DistributionConfigurationSpec defines the desired state of DistributionConfiguration
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DistributionConfigurationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationForProvider {
    /// Description of the distribution configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// One or more configuration blocks with distribution settings. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub distribution: Option<Vec<DistributionConfigurationForProviderDistribution>>,
    /// Name of the distribution configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// AWS Region for the distribution.
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationForProviderDistribution {
    /// Configuration block with Amazon Machine Image (AMI) distribution settings. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "amiDistributionConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub ami_distribution_configuration:
        Option<DistributionConfigurationForProviderDistributionAmiDistributionConfiguration>,
    /// Configuration block with container distribution settings. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerDistributionConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub container_distribution_configuration:
        Option<DistributionConfigurationForProviderDistributionContainerDistributionConfiguration>,
    /// Set of Windows faster-launching configurations to use for AMI distribution. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fastLaunchConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub fast_launch_configuration:
        Option<Vec<DistributionConfigurationForProviderDistributionFastLaunchConfiguration>>,
    /// Set of launch template configuration settings that apply to image distribution. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_configuration:
        Option<Vec<DistributionConfigurationForProviderDistributionLaunchTemplateConfiguration>>,
    /// Set of Amazon Resource Names (ARNs) of License Manager License Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "licenseConfigurationArns"
    )]
    #[builder(default, setter(strip_option))]
    pub license_configuration_arns: Option<Vec<String>>,
    /// AWS Region for the distribution.
    pub region: String,
    /// Configuration block with S3 export settings. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3ExportConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_export_configuration:
        Option<DistributionConfigurationForProviderDistributionS3ExportConfiguration>,
}

/// Configuration block with Amazon Machine Image (AMI) distribution settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationForProviderDistributionAmiDistributionConfiguration {
    /// Key-value map of tags to apply to the distributed AMI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amiTags")]
    #[builder(default, setter(strip_option))]
    pub ami_tags: Option<BTreeMap<String, String>>,
    /// Description to apply to the distributed AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key to encrypt the distributed AMI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Configuration block of EC2 launch permissions to apply to the distributed AMI. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchPermission")]
    #[builder(default, setter(strip_option))]
    pub launch_permission: Option<DistributionConfigurationForProviderDistributionAmiDistributionConfigurationLaunchPermission>,
    /// Name to apply to the distributed AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Set of AWS Account identifiers to distribute the AMI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetAccountIds")]
    #[builder(default, setter(strip_option))]
    pub target_account_ids: Option<Vec<String>>,
}

/// Configuration block of EC2 launch permissions to apply to the distributed AMI. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationForProviderDistributionAmiDistributionConfigurationLaunchPermission
{
    /// Set of AWS Organization ARNs to assign.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "organizationArns"
    )]
    #[builder(default, setter(strip_option))]
    pub organization_arns: Option<Vec<String>>,
    /// Set of AWS Organizational Unit ARNs to assign.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "organizationalUnitArns"
    )]
    #[builder(default, setter(strip_option))]
    pub organizational_unit_arns: Option<Vec<String>>,
    /// Set of EC2 launch permission user groups to assign. Use all to distribute a public AMI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userGroups"
    )]
    #[builder(default, setter(strip_option))]
    pub user_groups: Option<Vec<String>>,
    /// Set of AWS Account identifiers to assign.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userIds")]
    #[builder(default, setter(strip_option))]
    pub user_ids: Option<Vec<String>>,
}

/// Configuration block with container distribution settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationForProviderDistributionContainerDistributionConfiguration {
    /// Set of tags that are attached to the container distribution configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerTags")]
    #[builder(default, setter(strip_option))]
    pub container_tags: Option<Vec<String>>,
    /// Description of the container distribution configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Configuration block with the destination repository for the container distribution configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRepository")]
    #[builder(default, setter(strip_option))]
    pub target_repository: Option<DistributionConfigurationForProviderDistributionContainerDistributionConfigurationTargetRepository>,
}

/// Configuration block with the destination repository for the container distribution configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationForProviderDistributionContainerDistributionConfigurationTargetRepository
{
    /// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryName"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_name: Option<String>,
    /// The service in which this image is registered. Valid values: ECR.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationForProviderDistributionFastLaunchConfiguration {
    /// The owner account ID for the fast-launch enabled Windows AMI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default, setter(strip_option))]
    pub account_id: Option<String>,
    /// A Boolean that represents the current state of faster launching for the Windows AMI. Set to true to start using Windows faster launching, or false to stop using it.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// Configuration block for the launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplate")]
    #[builder(default, setter(strip_option))]
    pub launch_template: Option<DistributionConfigurationForProviderDistributionFastLaunchConfigurationLaunchTemplate>,
    /// The maximum number of parallel instances that are launched for creating resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxParallelLaunches")]
    #[builder(default, setter(strip_option))]
    pub max_parallel_launches: Option<f64>,
    /// Configuration block for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotConfiguration")]
    #[builder(default, setter(strip_option))]
    pub snapshot_configuration: Option<DistributionConfigurationForProviderDistributionFastLaunchConfigurationSnapshotConfiguration>,
}

/// Configuration block for the launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationForProviderDistributionFastLaunchConfigurationLaunchTemplate {
    /// The ID of the launch template to use for faster launching for a Windows AMI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateId"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_id: Option<String>,
    /// The name of the launch template to use for faster launching for a Windows AMI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateName"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_name: Option<String>,
    /// The version of the launch template to use for faster launching for a Windows AMI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_version: Option<String>,
}

/// Configuration block for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationForProviderDistributionFastLaunchConfigurationSnapshotConfiguration
{
    /// The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetResourceCount"
    )]
    #[builder(default, setter(strip_option))]
    pub target_resource_count: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationForProviderDistributionLaunchTemplateConfiguration {
    /// The account ID that this configuration applies to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default, setter(strip_option))]
    pub account_id: Option<String>,
    /// Indicates whether to set the specified Amazon EC2 launch template as the default launch template. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub default: Option<bool>,
    /// The ID of the Amazon EC2 launch template to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateId"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_id: Option<String>,
}

/// Configuration block with S3 export settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationForProviderDistributionS3ExportConfiguration {
    /// The disk image format of the exported image (RAW, VHD, or VMDK)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "diskImageFormat"
    )]
    #[builder(default, setter(strip_option))]
    pub disk_image_format: Option<String>,
    /// The name of the IAM role to use for exporting.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleName")]
    #[builder(default, setter(strip_option))]
    pub role_name: Option<String>,
    /// The name of the S3 bucket to store the exported image in. The bucket needs to exist before the export configuration is created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Bucket")]
    #[builder(default, setter(strip_option))]
    pub s3_bucket: Option<String>,
    /// The prefix for the exported image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Prefix")]
    #[builder(default, setter(strip_option))]
    pub s3_prefix: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationInitProvider {
    /// Description of the distribution configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// One or more configuration blocks with distribution settings. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub distribution: Option<Vec<DistributionConfigurationInitProviderDistribution>>,
    /// Name of the distribution configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationInitProviderDistribution {
    /// Configuration block with Amazon Machine Image (AMI) distribution settings. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "amiDistributionConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub ami_distribution_configuration:
        Option<DistributionConfigurationInitProviderDistributionAmiDistributionConfiguration>,
    /// Configuration block with container distribution settings. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerDistributionConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub container_distribution_configuration:
        Option<DistributionConfigurationInitProviderDistributionContainerDistributionConfiguration>,
    /// Set of Windows faster-launching configurations to use for AMI distribution. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fastLaunchConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub fast_launch_configuration:
        Option<Vec<DistributionConfigurationInitProviderDistributionFastLaunchConfiguration>>,
    /// Set of launch template configuration settings that apply to image distribution. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_configuration:
        Option<Vec<DistributionConfigurationInitProviderDistributionLaunchTemplateConfiguration>>,
    /// Set of Amazon Resource Names (ARNs) of License Manager License Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "licenseConfigurationArns"
    )]
    #[builder(default, setter(strip_option))]
    pub license_configuration_arns: Option<Vec<String>>,
    /// Configuration block with S3 export settings. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3ExportConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_export_configuration:
        Option<DistributionConfigurationInitProviderDistributionS3ExportConfiguration>,
}

/// Configuration block with Amazon Machine Image (AMI) distribution settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationInitProviderDistributionAmiDistributionConfiguration {
    /// Key-value map of tags to apply to the distributed AMI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amiTags")]
    #[builder(default, setter(strip_option))]
    pub ami_tags: Option<BTreeMap<String, String>>,
    /// Description to apply to the distributed AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key to encrypt the distributed AMI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Configuration block of EC2 launch permissions to apply to the distributed AMI. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchPermission")]
    #[builder(default, setter(strip_option))]
    pub launch_permission: Option<DistributionConfigurationInitProviderDistributionAmiDistributionConfigurationLaunchPermission>,
    /// Name to apply to the distributed AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Set of AWS Account identifiers to distribute the AMI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetAccountIds")]
    #[builder(default, setter(strip_option))]
    pub target_account_ids: Option<Vec<String>>,
}

/// Configuration block of EC2 launch permissions to apply to the distributed AMI. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationInitProviderDistributionAmiDistributionConfigurationLaunchPermission
{
    /// Set of AWS Organization ARNs to assign.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "organizationArns"
    )]
    #[builder(default, setter(strip_option))]
    pub organization_arns: Option<Vec<String>>,
    /// Set of AWS Organizational Unit ARNs to assign.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "organizationalUnitArns"
    )]
    #[builder(default, setter(strip_option))]
    pub organizational_unit_arns: Option<Vec<String>>,
    /// Set of EC2 launch permission user groups to assign. Use all to distribute a public AMI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userGroups"
    )]
    #[builder(default, setter(strip_option))]
    pub user_groups: Option<Vec<String>>,
    /// Set of AWS Account identifiers to assign.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userIds")]
    #[builder(default, setter(strip_option))]
    pub user_ids: Option<Vec<String>>,
}

/// Configuration block with container distribution settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationInitProviderDistributionContainerDistributionConfiguration {
    /// Set of tags that are attached to the container distribution configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerTags")]
    #[builder(default, setter(strip_option))]
    pub container_tags: Option<Vec<String>>,
    /// Description of the container distribution configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Configuration block with the destination repository for the container distribution configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRepository")]
    #[builder(default, setter(strip_option))]
    pub target_repository: Option<DistributionConfigurationInitProviderDistributionContainerDistributionConfigurationTargetRepository>,
}

/// Configuration block with the destination repository for the container distribution configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationInitProviderDistributionContainerDistributionConfigurationTargetRepository
{
    /// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryName"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_name: Option<String>,
    /// The service in which this image is registered. Valid values: ECR.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationInitProviderDistributionFastLaunchConfiguration {
    /// The owner account ID for the fast-launch enabled Windows AMI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default, setter(strip_option))]
    pub account_id: Option<String>,
    /// A Boolean that represents the current state of faster launching for the Windows AMI. Set to true to start using Windows faster launching, or false to stop using it.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// Configuration block for the launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplate")]
    #[builder(default, setter(strip_option))]
    pub launch_template: Option<DistributionConfigurationInitProviderDistributionFastLaunchConfigurationLaunchTemplate>,
    /// The maximum number of parallel instances that are launched for creating resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxParallelLaunches")]
    #[builder(default, setter(strip_option))]
    pub max_parallel_launches: Option<f64>,
    /// Configuration block for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotConfiguration")]
    #[builder(default, setter(strip_option))]
    pub snapshot_configuration: Option<DistributionConfigurationInitProviderDistributionFastLaunchConfigurationSnapshotConfiguration>,
}

/// Configuration block for the launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationInitProviderDistributionFastLaunchConfigurationLaunchTemplate {
    /// The ID of the launch template to use for faster launching for a Windows AMI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateId"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_id: Option<String>,
    /// The name of the launch template to use for faster launching for a Windows AMI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateName"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_name: Option<String>,
    /// The version of the launch template to use for faster launching for a Windows AMI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_version: Option<String>,
}

/// Configuration block for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationInitProviderDistributionFastLaunchConfigurationSnapshotConfiguration
{
    /// The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetResourceCount"
    )]
    #[builder(default, setter(strip_option))]
    pub target_resource_count: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationInitProviderDistributionLaunchTemplateConfiguration {
    /// The account ID that this configuration applies to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default, setter(strip_option))]
    pub account_id: Option<String>,
    /// Indicates whether to set the specified Amazon EC2 launch template as the default launch template. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub default: Option<bool>,
    /// The ID of the Amazon EC2 launch template to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateId"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_id: Option<String>,
}

/// Configuration block with S3 export settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationInitProviderDistributionS3ExportConfiguration {
    /// The disk image format of the exported image (RAW, VHD, or VMDK)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "diskImageFormat"
    )]
    #[builder(default, setter(strip_option))]
    pub disk_image_format: Option<String>,
    /// The name of the IAM role to use for exporting.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleName")]
    #[builder(default, setter(strip_option))]
    pub role_name: Option<String>,
    /// The name of the S3 bucket to store the exported image in. The bucket needs to exist before the export configuration is created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Bucket")]
    #[builder(default, setter(strip_option))]
    pub s3_bucket: Option<String>,
    /// The prefix for the exported image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Prefix")]
    #[builder(default, setter(strip_option))]
    pub s3_prefix: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<DistributionConfigurationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<DistributionConfigurationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<DistributionConfigurationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DistributionConfigurationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DistributionConfigurationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<DistributionConfigurationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<DistributionConfigurationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<DistributionConfigurationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<DistributionConfigurationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<DistributionConfigurationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DistributionConfigurationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DistributionConfigurationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// DistributionConfigurationStatus defines the observed state of DistributionConfiguration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<DistributionConfigurationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationStatusAtProvider {
    /// Amazon Resource Name (ARN) of the distribution configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Date the distribution configuration was created.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dateCreated"
    )]
    #[builder(default, setter(strip_option))]
    pub date_created: Option<String>,
    /// Date the distribution configuration was updated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dateUpdated"
    )]
    #[builder(default, setter(strip_option))]
    pub date_updated: Option<String>,
    /// Description of the distribution configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// One or more configuration blocks with distribution settings. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub distribution: Option<Vec<DistributionConfigurationStatusAtProviderDistribution>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Name of the distribution configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationStatusAtProviderDistribution {
    /// Configuration block with Amazon Machine Image (AMI) distribution settings. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "amiDistributionConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub ami_distribution_configuration:
        Option<DistributionConfigurationStatusAtProviderDistributionAmiDistributionConfiguration>,
    /// Configuration block with container distribution settings. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "containerDistributionConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub container_distribution_configuration: Option<
        DistributionConfigurationStatusAtProviderDistributionContainerDistributionConfiguration,
    >,
    /// Set of Windows faster-launching configurations to use for AMI distribution. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fastLaunchConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub fast_launch_configuration:
        Option<Vec<DistributionConfigurationStatusAtProviderDistributionFastLaunchConfiguration>>,
    /// Set of launch template configuration settings that apply to image distribution. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_configuration: Option<
        Vec<DistributionConfigurationStatusAtProviderDistributionLaunchTemplateConfiguration>,
    >,
    /// Set of Amazon Resource Names (ARNs) of License Manager License Configurations.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "licenseConfigurationArns"
    )]
    #[builder(default, setter(strip_option))]
    pub license_configuration_arns: Option<Vec<String>>,
    /// AWS Region for the distribution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub region: Option<String>,
    /// Configuration block with S3 export settings. Detailed below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3ExportConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_export_configuration:
        Option<DistributionConfigurationStatusAtProviderDistributionS3ExportConfiguration>,
}

/// Configuration block with Amazon Machine Image (AMI) distribution settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationStatusAtProviderDistributionAmiDistributionConfiguration {
    /// Key-value map of tags to apply to the distributed AMI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "amiTags")]
    #[builder(default, setter(strip_option))]
    pub ami_tags: Option<BTreeMap<String, String>>,
    /// Description to apply to the distributed AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Amazon Resource Name (ARN) of the Key Management Service (KMS) Key to encrypt the distributed AMI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    #[builder(default, setter(strip_option))]
    pub kms_key_id: Option<String>,
    /// Configuration block of EC2 launch permissions to apply to the distributed AMI. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchPermission")]
    #[builder(default, setter(strip_option))]
    pub launch_permission: Option<DistributionConfigurationStatusAtProviderDistributionAmiDistributionConfigurationLaunchPermission>,
    /// Name to apply to the distributed AMI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Set of AWS Account identifiers to distribute the AMI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetAccountIds")]
    #[builder(default, setter(strip_option))]
    pub target_account_ids: Option<Vec<String>>,
}

/// Configuration block of EC2 launch permissions to apply to the distributed AMI. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationStatusAtProviderDistributionAmiDistributionConfigurationLaunchPermission
{
    /// Set of AWS Organization ARNs to assign.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "organizationArns"
    )]
    #[builder(default, setter(strip_option))]
    pub organization_arns: Option<Vec<String>>,
    /// Set of AWS Organizational Unit ARNs to assign.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "organizationalUnitArns"
    )]
    #[builder(default, setter(strip_option))]
    pub organizational_unit_arns: Option<Vec<String>>,
    /// Set of EC2 launch permission user groups to assign. Use all to distribute a public AMI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "userGroups"
    )]
    #[builder(default, setter(strip_option))]
    pub user_groups: Option<Vec<String>>,
    /// Set of AWS Account identifiers to assign.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userIds")]
    #[builder(default, setter(strip_option))]
    pub user_ids: Option<Vec<String>>,
}

/// Configuration block with container distribution settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationStatusAtProviderDistributionContainerDistributionConfiguration {
    /// Set of tags that are attached to the container distribution configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerTags")]
    #[builder(default, setter(strip_option))]
    pub container_tags: Option<Vec<String>>,
    /// Description of the container distribution configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Configuration block with the destination repository for the container distribution configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRepository")]
    #[builder(default, setter(strip_option))]
    pub target_repository: Option<DistributionConfigurationStatusAtProviderDistributionContainerDistributionConfigurationTargetRepository>,
}

/// Configuration block with the destination repository for the container distribution configuration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationStatusAtProviderDistributionContainerDistributionConfigurationTargetRepository
{
    /// The name of the container repository where the output container image is stored. This name is prefixed by the repository location.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "repositoryName"
    )]
    #[builder(default, setter(strip_option))]
    pub repository_name: Option<String>,
    /// The service in which this image is registered. Valid values: ECR.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationStatusAtProviderDistributionFastLaunchConfiguration {
    /// The owner account ID for the fast-launch enabled Windows AMI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default, setter(strip_option))]
    pub account_id: Option<String>,
    /// A Boolean that represents the current state of faster launching for the Windows AMI. Set to true to start using Windows faster launching, or false to stop using it.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// Configuration block for the launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplate")]
    #[builder(default, setter(strip_option))]
    pub launch_template: Option<DistributionConfigurationStatusAtProviderDistributionFastLaunchConfigurationLaunchTemplate>,
    /// The maximum number of parallel instances that are launched for creating resources.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxParallelLaunches")]
    #[builder(default, setter(strip_option))]
    pub max_parallel_launches: Option<f64>,
    /// Configuration block for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotConfiguration")]
    #[builder(default, setter(strip_option))]
    pub snapshot_configuration: Option<DistributionConfigurationStatusAtProviderDistributionFastLaunchConfigurationSnapshotConfiguration>,
}

/// Configuration block for the launch template that the fast-launch enabled Windows AMI uses when it launches Windows instances to create pre-provisioned snapshots. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationStatusAtProviderDistributionFastLaunchConfigurationLaunchTemplate
{
    /// The ID of the launch template to use for faster launching for a Windows AMI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateId"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_id: Option<String>,
    /// The name of the launch template to use for faster launching for a Windows AMI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateName"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_name: Option<String>,
    /// The version of the launch template to use for faster launching for a Windows AMI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_version: Option<String>,
}

/// Configuration block for managing the number of snapshots that are created from pre-provisioned instances for the Windows AMI when faster launching is enabled. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationStatusAtProviderDistributionFastLaunchConfigurationSnapshotConfiguration
{
    /// The number of pre-provisioned snapshots to keep on hand for a fast-launch enabled Windows AMI.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetResourceCount"
    )]
    #[builder(default, setter(strip_option))]
    pub target_resource_count: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationStatusAtProviderDistributionLaunchTemplateConfiguration {
    /// The account ID that this configuration applies to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    #[builder(default, setter(strip_option))]
    pub account_id: Option<String>,
    /// Indicates whether to set the specified Amazon EC2 launch template as the default launch template. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub default: Option<bool>,
    /// The ID of the Amazon EC2 launch template to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateId"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_id: Option<String>,
}

/// Configuration block with S3 export settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DistributionConfigurationStatusAtProviderDistributionS3ExportConfiguration {
    /// The disk image format of the exported image (RAW, VHD, or VMDK)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "diskImageFormat"
    )]
    #[builder(default, setter(strip_option))]
    pub disk_image_format: Option<String>,
    /// The name of the IAM role to use for exporting.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleName")]
    #[builder(default, setter(strip_option))]
    pub role_name: Option<String>,
    /// The name of the S3 bucket to store the exported image in. The bucket needs to exist before the export configuration is created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Bucket")]
    #[builder(default, setter(strip_option))]
    pub s3_bucket: Option<String>,
    /// The prefix for the exported image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Prefix")]
    #[builder(default, setter(strip_option))]
    pub s3_prefix: Option<String>,
}

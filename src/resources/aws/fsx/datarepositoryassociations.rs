// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// DataRepositoryAssociationSpec defines the desired state of DataRepositoryAssociation
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "fsx.aws.upbound.io",
    version = "v1beta2",
    kind = "DataRepositoryAssociation",
    plural = "datarepositoryassociations"
)]
#[kube(status = "DataRepositoryAssociationStatus")]
pub struct DataRepositoryAssociationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<DataRepositoryAssociationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: DataRepositoryAssociationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<DataRepositoryAssociationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<DataRepositoryAssociationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<DataRepositoryAssociationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<DataRepositoryAssociationWriteConnectionSecretToRef>,
}

/// DataRepositoryAssociationSpec defines the desired state of DataRepositoryAssociation
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataRepositoryAssociationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationForProvider {
    /// Set to true to run an import data repository task to import metadata from the data repository to the file system after the data repository association is created. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "batchImportMetaDataOnCreate"
    )]
    #[builder(default, setter(strip_option))]
    pub batch_import_meta_data_on_create: Option<bool>,
    /// The path to the Amazon S3 data repository that will be linked to the file system. The path must be an S3 bucket s3://myBucket/myPrefix/. This path specifies where in the S3 data repository files will be imported from or exported to. The same S3 bucket cannot be linked more than once to the same file system.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataRepositoryPath"
    )]
    #[builder(default, setter(strip_option))]
    pub data_repository_path: Option<String>,
    /// Set to true to delete files from the file system upon deleting this data repository association. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteDataInFilesystem"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_data_in_filesystem: Option<bool>,
    /// The ID of the Amazon FSx file system to on which to create a data repository association.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemId"
    )]
    #[builder(default, setter(strip_option))]
    pub file_system_id: Option<String>,
    /// Reference to a LustreFileSystem in fsx to populate fileSystemId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub file_system_id_ref: Option<DataRepositoryAssociationForProviderFileSystemIdRef>,
    /// Selector for a LustreFileSystem in fsx to populate fileSystemId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub file_system_id_selector: Option<DataRepositoryAssociationForProviderFileSystemIdSelector>,
    /// A path on the file system that points to a high-level directory (such as /ns1/) or subdirectory (such as /ns1/subdir/) that will be mapped 1-1 with data_repository_path. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path /ns1/, then you cannot link another data repository with file system path /ns1/ns2. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemPath"
    )]
    #[builder(default, setter(strip_option))]
    pub file_system_path: Option<String>,
    /// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "importedFileChunkSize"
    )]
    #[builder(default, setter(strip_option))]
    pub imported_file_chunk_size: Option<f64>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// See the s3 configuration block. Max of 1.
    /// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub s3: Option<DataRepositoryAssociationForProviderS3>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

/// Reference to a LustreFileSystem in fsx to populate fileSystemId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationForProviderFileSystemIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<DataRepositoryAssociationForProviderFileSystemIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationForProviderFileSystemIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<DataRepositoryAssociationForProviderFileSystemIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<DataRepositoryAssociationForProviderFileSystemIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataRepositoryAssociationForProviderFileSystemIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataRepositoryAssociationForProviderFileSystemIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a LustreFileSystem in fsx to populate fileSystemId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationForProviderFileSystemIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<DataRepositoryAssociationForProviderFileSystemIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationForProviderFileSystemIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<DataRepositoryAssociationForProviderFileSystemIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<DataRepositoryAssociationForProviderFileSystemIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataRepositoryAssociationForProviderFileSystemIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataRepositoryAssociationForProviderFileSystemIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// See the s3 configuration block. Max of 1.
/// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationForProviderS3 {
    /// Specifies the type of updated objects that will be automatically exported from your file system to the linked S3 bucket. See the events configuration block.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoExportPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_export_policy: Option<DataRepositoryAssociationForProviderS3AutoExportPolicy>,
    /// Specifies the type of updated objects that will be automatically imported from the linked S3 bucket to your file system. See the events configuration block.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoImportPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_import_policy: Option<DataRepositoryAssociationForProviderS3AutoImportPolicy>,
}

/// Specifies the type of updated objects that will be automatically exported from your file system to the linked S3 bucket. See the events configuration block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationForProviderS3AutoExportPolicy {
    /// A list of file event types to automatically export to your linked S3 bucket or import from the linked S3 bucket. Valid values are NEW, CHANGED, DELETED. Max of 3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub events: Option<Vec<String>>,
}

/// Specifies the type of updated objects that will be automatically imported from the linked S3 bucket to your file system. See the events configuration block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationForProviderS3AutoImportPolicy {
    /// A list of file event types to automatically export to your linked S3 bucket or import from the linked S3 bucket. Valid values are NEW, CHANGED, DELETED. Max of 3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub events: Option<Vec<String>>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationInitProvider {
    /// Set to true to run an import data repository task to import metadata from the data repository to the file system after the data repository association is created. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "batchImportMetaDataOnCreate"
    )]
    #[builder(default, setter(strip_option))]
    pub batch_import_meta_data_on_create: Option<bool>,
    /// The path to the Amazon S3 data repository that will be linked to the file system. The path must be an S3 bucket s3://myBucket/myPrefix/. This path specifies where in the S3 data repository files will be imported from or exported to. The same S3 bucket cannot be linked more than once to the same file system.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataRepositoryPath"
    )]
    #[builder(default, setter(strip_option))]
    pub data_repository_path: Option<String>,
    /// Set to true to delete files from the file system upon deleting this data repository association. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteDataInFilesystem"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_data_in_filesystem: Option<bool>,
    /// The ID of the Amazon FSx file system to on which to create a data repository association.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemId"
    )]
    #[builder(default, setter(strip_option))]
    pub file_system_id: Option<String>,
    /// Reference to a LustreFileSystem in fsx to populate fileSystemId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub file_system_id_ref: Option<DataRepositoryAssociationInitProviderFileSystemIdRef>,
    /// Selector for a LustreFileSystem in fsx to populate fileSystemId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub file_system_id_selector: Option<DataRepositoryAssociationInitProviderFileSystemIdSelector>,
    /// A path on the file system that points to a high-level directory (such as /ns1/) or subdirectory (such as /ns1/subdir/) that will be mapped 1-1 with data_repository_path. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path /ns1/, then you cannot link another data repository with file system path /ns1/ns2. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemPath"
    )]
    #[builder(default, setter(strip_option))]
    pub file_system_path: Option<String>,
    /// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "importedFileChunkSize"
    )]
    #[builder(default, setter(strip_option))]
    pub imported_file_chunk_size: Option<f64>,
    /// See the s3 configuration block. Max of 1.
    /// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub s3: Option<DataRepositoryAssociationInitProviderS3>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
}

/// Reference to a LustreFileSystem in fsx to populate fileSystemId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationInitProviderFileSystemIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<DataRepositoryAssociationInitProviderFileSystemIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationInitProviderFileSystemIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<DataRepositoryAssociationInitProviderFileSystemIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<DataRepositoryAssociationInitProviderFileSystemIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataRepositoryAssociationInitProviderFileSystemIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataRepositoryAssociationInitProviderFileSystemIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a LustreFileSystem in fsx to populate fileSystemId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationInitProviderFileSystemIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<DataRepositoryAssociationInitProviderFileSystemIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationInitProviderFileSystemIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<DataRepositoryAssociationInitProviderFileSystemIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<DataRepositoryAssociationInitProviderFileSystemIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataRepositoryAssociationInitProviderFileSystemIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataRepositoryAssociationInitProviderFileSystemIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// See the s3 configuration block. Max of 1.
/// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationInitProviderS3 {
    /// Specifies the type of updated objects that will be automatically exported from your file system to the linked S3 bucket. See the events configuration block.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoExportPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_export_policy: Option<DataRepositoryAssociationInitProviderS3AutoExportPolicy>,
    /// Specifies the type of updated objects that will be automatically imported from the linked S3 bucket to your file system. See the events configuration block.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoImportPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_import_policy: Option<DataRepositoryAssociationInitProviderS3AutoImportPolicy>,
}

/// Specifies the type of updated objects that will be automatically exported from your file system to the linked S3 bucket. See the events configuration block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationInitProviderS3AutoExportPolicy {
    /// A list of file event types to automatically export to your linked S3 bucket or import from the linked S3 bucket. Valid values are NEW, CHANGED, DELETED. Max of 3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub events: Option<Vec<String>>,
}

/// Specifies the type of updated objects that will be automatically imported from the linked S3 bucket to your file system. See the events configuration block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationInitProviderS3AutoImportPolicy {
    /// A list of file event types to automatically export to your linked S3 bucket or import from the linked S3 bucket. Valid values are NEW, CHANGED, DELETED. Max of 3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub events: Option<Vec<String>>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<DataRepositoryAssociationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<DataRepositoryAssociationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<DataRepositoryAssociationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataRepositoryAssociationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataRepositoryAssociationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<DataRepositoryAssociationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<DataRepositoryAssociationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<DataRepositoryAssociationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<DataRepositoryAssociationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<DataRepositoryAssociationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataRepositoryAssociationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DataRepositoryAssociationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// DataRepositoryAssociationStatus defines the observed state of DataRepositoryAssociation.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<DataRepositoryAssociationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationStatusAtProvider {
    /// Amazon Resource Name of the file system.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Identifier of the data repository association, e.g., dra-12345678
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "associationId"
    )]
    #[builder(default, setter(strip_option))]
    pub association_id: Option<String>,
    /// Set to true to run an import data repository task to import metadata from the data repository to the file system after the data repository association is created. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "batchImportMetaDataOnCreate"
    )]
    #[builder(default, setter(strip_option))]
    pub batch_import_meta_data_on_create: Option<bool>,
    /// The path to the Amazon S3 data repository that will be linked to the file system. The path must be an S3 bucket s3://myBucket/myPrefix/. This path specifies where in the S3 data repository files will be imported from or exported to. The same S3 bucket cannot be linked more than once to the same file system.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataRepositoryPath"
    )]
    #[builder(default, setter(strip_option))]
    pub data_repository_path: Option<String>,
    /// Set to true to delete files from the file system upon deleting this data repository association. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deleteDataInFilesystem"
    )]
    #[builder(default, setter(strip_option))]
    pub delete_data_in_filesystem: Option<bool>,
    /// The ID of the Amazon FSx file system to on which to create a data repository association.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemId"
    )]
    #[builder(default, setter(strip_option))]
    pub file_system_id: Option<String>,
    /// A path on the file system that points to a high-level directory (such as /ns1/) or subdirectory (such as /ns1/subdir/) that will be mapped 1-1 with data_repository_path. The leading forward slash in the name is required. Two data repository associations cannot have overlapping file system paths. For example, if a data repository is associated with file system path /ns1/, then you cannot link another data repository with file system path /ns1/ns2. This path specifies where in your file system files will be exported from or imported to. This file system directory can be linked to only one Amazon S3 bucket, and no other S3 bucket can be linked to the directory.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "fileSystemPath"
    )]
    #[builder(default, setter(strip_option))]
    pub file_system_path: Option<String>,
    /// Identifier of the data repository association, e.g., dra-12345678
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// For files imported from a data repository, this value determines the stripe count and maximum amount of data per file (in MiB) stored on a single physical disk. The maximum number of disks that a single file can be striped across is limited by the total number of disks that make up the file system.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "importedFileChunkSize"
    )]
    #[builder(default, setter(strip_option))]
    pub imported_file_chunk_size: Option<f64>,
    /// See the s3 configuration block. Max of 1.
    /// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub s3: Option<DataRepositoryAssociationStatusAtProviderS3>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
}

/// See the s3 configuration block. Max of 1.
/// The configuration for an Amazon S3 data repository linked to an Amazon FSx Lustre file system with a data repository association. The configuration defines which file events (new, changed, or deleted files or directories) are automatically imported from the linked data repository to the file system or automatically exported from the file system to the data repository.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationStatusAtProviderS3 {
    /// Specifies the type of updated objects that will be automatically exported from your file system to the linked S3 bucket. See the events configuration block.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoExportPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_export_policy: Option<DataRepositoryAssociationStatusAtProviderS3AutoExportPolicy>,
    /// Specifies the type of updated objects that will be automatically imported from the linked S3 bucket to your file system. See the events configuration block.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoImportPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_import_policy: Option<DataRepositoryAssociationStatusAtProviderS3AutoImportPolicy>,
}

/// Specifies the type of updated objects that will be automatically exported from your file system to the linked S3 bucket. See the events configuration block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationStatusAtProviderS3AutoExportPolicy {
    /// A list of file event types to automatically export to your linked S3 bucket or import from the linked S3 bucket. Valid values are NEW, CHANGED, DELETED. Max of 3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub events: Option<Vec<String>>,
}

/// Specifies the type of updated objects that will be automatically imported from the linked S3 bucket to your file system. See the events configuration block.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct DataRepositoryAssociationStatusAtProviderS3AutoImportPolicy {
    /// A list of file event types to automatically export to your linked S3 bucket or import from the linked S3 bucket. Valid values are NEW, CHANGED, DELETED. Max of 3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub events: Option<Vec<String>>,
}

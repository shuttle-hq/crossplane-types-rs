// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ExperimentTemplateSpec defines the desired state of ExperimentTemplate
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "fis.aws.upbound.io",
    version = "v1beta2",
    kind = "ExperimentTemplate",
    plural = "experimenttemplates"
)]
#[kube(status = "ExperimentTemplateStatus")]
pub struct ExperimentTemplateSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<ExperimentTemplateDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ExperimentTemplateForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<ExperimentTemplateInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<ExperimentTemplateProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<ExperimentTemplatePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<ExperimentTemplateWriteConnectionSecretToRef>,
}

/// ExperimentTemplateSpec defines the desired state of ExperimentTemplate
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ExperimentTemplateDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateForProvider {
    /// Action to be performed during an experiment. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub action: Option<Vec<ExperimentTemplateForProviderAction>>,
    /// Description for the experiment template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// The experiment options for the experiment template. See experiment_options below for more details!
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "experimentOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub experiment_options: Option<ExperimentTemplateForProviderExperimentOptions>,
    /// The configuration for experiment logging. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub log_configuration: Option<ExperimentTemplateForProviderLogConfiguration>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// ARN of an IAM role that grants the AWS FIS service permission to perform service actions on your behalf.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default, setter(strip_option))]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub role_arn_ref: Option<ExperimentTemplateForProviderRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub role_arn_selector: Option<ExperimentTemplateForProviderRoleArnSelector>,
    /// When an ongoing experiment should be stopped. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stopCondition"
    )]
    #[builder(default, setter(strip_option))]
    pub stop_condition: Option<Vec<ExperimentTemplateForProviderStopCondition>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Target of an action. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub target: Option<Vec<ExperimentTemplateForProviderTarget>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateForProviderAction {
    /// ID of the action. To find out what actions are supported see AWS FIS actions reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionId")]
    #[builder(default, setter(strip_option))]
    pub action_id: Option<String>,
    /// Description of the action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Friendly name of the action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Parameter(s) for the action, if applicable. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameter: Option<Vec<ExperimentTemplateForProviderActionParameter>>,
    /// Set of action names that must complete before this action can be executed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startAfter"
    )]
    #[builder(default, setter(strip_option))]
    pub start_after: Option<Vec<String>>,
    /// Action's target, if applicable. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub target: Option<ExperimentTemplateForProviderActionTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateForProviderActionParameter {
    /// Parameter name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// Parameter value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Action's target, if applicable. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateForProviderActionTarget {
    /// Tag key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// Target name, referencing a corresponding target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// The experiment options for the experiment template. See experiment_options below for more details!
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateForProviderExperimentOptions {
    /// Specifies the account targeting setting for experiment options. Supports single-account and multi-account.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accountTargeting"
    )]
    #[builder(default, setter(strip_option))]
    pub account_targeting: Option<String>,
    /// Specifies the empty target resolution mode for experiment options. Supports fail and skip.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emptyTargetResolutionMode"
    )]
    #[builder(default, setter(strip_option))]
    pub empty_target_resolution_mode: Option<String>,
}

/// The configuration for experiment logging. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateForProviderLogConfiguration {
    /// The configuration for experiment logging to Amazon CloudWatch Logs. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogsConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_logs_configuration:
        Option<ExperimentTemplateForProviderLogConfigurationCloudwatchLogsConfiguration>,
    /// The schema version. See documentation for the list of schema versions.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logSchemaVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub log_schema_version: Option<f64>,
    /// The configuration for experiment logging to Amazon S3. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3Configuration"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_configuration: Option<ExperimentTemplateForProviderLogConfigurationS3Configuration>,
}

/// The configuration for experiment logging to Amazon CloudWatch Logs. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateForProviderLogConfigurationCloudwatchLogsConfiguration {
    /// The Amazon Resource Name (ARN) of the destination Amazon CloudWatch Logs log group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logGroupArn"
    )]
    #[builder(default, setter(strip_option))]
    pub log_group_arn: Option<String>,
}

/// The configuration for experiment logging to Amazon S3. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateForProviderLogConfigurationS3Configuration {
    /// The name of the destination bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketName"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_name: Option<String>,
    /// The bucket prefix.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub prefix: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateForProviderRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ExperimentTemplateForProviderRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateForProviderRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ExperimentTemplateForProviderRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ExperimentTemplateForProviderRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ExperimentTemplateForProviderRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ExperimentTemplateForProviderRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateForProviderRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ExperimentTemplateForProviderRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateForProviderRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ExperimentTemplateForProviderRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ExperimentTemplateForProviderRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ExperimentTemplateForProviderRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ExperimentTemplateForProviderRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateForProviderStopCondition {
    /// Source of the condition. One of none, aws:cloudwatch:alarm.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub source: Option<String>,
    /// ARN of the CloudWatch alarm. Required if the source is a CloudWatch alarm.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateForProviderTarget {
    /// Filter(s) for the target. Filters can be used to select resources based on specific attributes returned by the respective describe action of the resource type. For more information, see Targets for AWS FIS. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub filter: Option<Vec<ExperimentTemplateForProviderTargetFilter>>,
    /// Friendly name given to the target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The resource type parameters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<BTreeMap<String, String>>,
    /// Set of ARNs of the resources to target with an action. Conflicts with resource_tag.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArns"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_arns: Option<Vec<String>>,
    /// Tag(s) the resources need to have to be considered a valid target for an action. Conflicts with resource_arns. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceTag"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_tag: Option<Vec<ExperimentTemplateForProviderTargetResourceTag>>,
    /// AWS resource type. The resource type must be supported for the specified action. To find out what resource types are supported, see Targets for AWS FIS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceType"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_type: Option<String>,
    /// Scopes the identified resources. Valid values are ALL (all identified resources), COUNT(n) (randomly select n of the identified resources), PERCENT(n) (randomly select n percent of the identified resources).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selectionMode"
    )]
    #[builder(default, setter(strip_option))]
    pub selection_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateForProviderTargetFilter {
    /// Attribute path for the filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub path: Option<String>,
    /// Set of attribute values for the filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateForProviderTargetResourceTag {
    /// Tag key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// Tag value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateInitProvider {
    /// Action to be performed during an experiment. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub action: Option<Vec<ExperimentTemplateInitProviderAction>>,
    /// Description for the experiment template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// The experiment options for the experiment template. See experiment_options below for more details!
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "experimentOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub experiment_options: Option<ExperimentTemplateInitProviderExperimentOptions>,
    /// The configuration for experiment logging. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub log_configuration: Option<ExperimentTemplateInitProviderLogConfiguration>,
    /// ARN of an IAM role that grants the AWS FIS service permission to perform service actions on your behalf.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default, setter(strip_option))]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub role_arn_ref: Option<ExperimentTemplateInitProviderRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub role_arn_selector: Option<ExperimentTemplateInitProviderRoleArnSelector>,
    /// When an ongoing experiment should be stopped. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stopCondition"
    )]
    #[builder(default, setter(strip_option))]
    pub stop_condition: Option<Vec<ExperimentTemplateInitProviderStopCondition>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Target of an action. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub target: Option<Vec<ExperimentTemplateInitProviderTarget>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateInitProviderAction {
    /// ID of the action. To find out what actions are supported see AWS FIS actions reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionId")]
    #[builder(default, setter(strip_option))]
    pub action_id: Option<String>,
    /// Description of the action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Friendly name of the action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Parameter(s) for the action, if applicable. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameter: Option<Vec<ExperimentTemplateInitProviderActionParameter>>,
    /// Set of action names that must complete before this action can be executed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startAfter"
    )]
    #[builder(default, setter(strip_option))]
    pub start_after: Option<Vec<String>>,
    /// Action's target, if applicable. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub target: Option<ExperimentTemplateInitProviderActionTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateInitProviderActionParameter {
    /// Parameter name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// Parameter value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Action's target, if applicable. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateInitProviderActionTarget {
    /// Tag key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// Target name, referencing a corresponding target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// The experiment options for the experiment template. See experiment_options below for more details!
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateInitProviderExperimentOptions {
    /// Specifies the account targeting setting for experiment options. Supports single-account and multi-account.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accountTargeting"
    )]
    #[builder(default, setter(strip_option))]
    pub account_targeting: Option<String>,
    /// Specifies the empty target resolution mode for experiment options. Supports fail and skip.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emptyTargetResolutionMode"
    )]
    #[builder(default, setter(strip_option))]
    pub empty_target_resolution_mode: Option<String>,
}

/// The configuration for experiment logging. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateInitProviderLogConfiguration {
    /// The configuration for experiment logging to Amazon CloudWatch Logs. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogsConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_logs_configuration:
        Option<ExperimentTemplateInitProviderLogConfigurationCloudwatchLogsConfiguration>,
    /// The schema version. See documentation for the list of schema versions.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logSchemaVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub log_schema_version: Option<f64>,
    /// The configuration for experiment logging to Amazon S3. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3Configuration"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_configuration: Option<ExperimentTemplateInitProviderLogConfigurationS3Configuration>,
}

/// The configuration for experiment logging to Amazon CloudWatch Logs. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateInitProviderLogConfigurationCloudwatchLogsConfiguration {
    /// The Amazon Resource Name (ARN) of the destination Amazon CloudWatch Logs log group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logGroupArn"
    )]
    #[builder(default, setter(strip_option))]
    pub log_group_arn: Option<String>,
}

/// The configuration for experiment logging to Amazon S3. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateInitProviderLogConfigurationS3Configuration {
    /// The name of the destination bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketName"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_name: Option<String>,
    /// The bucket prefix.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub prefix: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateInitProviderRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ExperimentTemplateInitProviderRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateInitProviderRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ExperimentTemplateInitProviderRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ExperimentTemplateInitProviderRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ExperimentTemplateInitProviderRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ExperimentTemplateInitProviderRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateInitProviderRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ExperimentTemplateInitProviderRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateInitProviderRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ExperimentTemplateInitProviderRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ExperimentTemplateInitProviderRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ExperimentTemplateInitProviderRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ExperimentTemplateInitProviderRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateInitProviderStopCondition {
    /// Source of the condition. One of none, aws:cloudwatch:alarm.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub source: Option<String>,
    /// ARN of the CloudWatch alarm. Required if the source is a CloudWatch alarm.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateInitProviderTarget {
    /// Filter(s) for the target. Filters can be used to select resources based on specific attributes returned by the respective describe action of the resource type. For more information, see Targets for AWS FIS. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub filter: Option<Vec<ExperimentTemplateInitProviderTargetFilter>>,
    /// Friendly name given to the target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The resource type parameters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<BTreeMap<String, String>>,
    /// Set of ARNs of the resources to target with an action. Conflicts with resource_tag.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArns"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_arns: Option<Vec<String>>,
    /// Tag(s) the resources need to have to be considered a valid target for an action. Conflicts with resource_arns. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceTag"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_tag: Option<Vec<ExperimentTemplateInitProviderTargetResourceTag>>,
    /// AWS resource type. The resource type must be supported for the specified action. To find out what resource types are supported, see Targets for AWS FIS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceType"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_type: Option<String>,
    /// Scopes the identified resources. Valid values are ALL (all identified resources), COUNT(n) (randomly select n of the identified resources), PERCENT(n) (randomly select n percent of the identified resources).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selectionMode"
    )]
    #[builder(default, setter(strip_option))]
    pub selection_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateInitProviderTargetFilter {
    /// Attribute path for the filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub path: Option<String>,
    /// Set of attribute values for the filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateInitProviderTargetResourceTag {
    /// Tag key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// Tag value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ExperimentTemplateProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ExperimentTemplateProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ExperimentTemplateProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ExperimentTemplateProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ExperimentTemplateProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplatePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<ExperimentTemplatePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<ExperimentTemplatePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplatePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ExperimentTemplatePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplatePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ExperimentTemplatePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ExperimentTemplatePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ExperimentTemplatePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ExperimentTemplatePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplatePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ExperimentTemplateStatus defines the observed state of ExperimentTemplate.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<ExperimentTemplateStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateStatusAtProvider {
    /// Action to be performed during an experiment. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub action: Option<Vec<ExperimentTemplateStatusAtProviderAction>>,
    /// Description for the experiment template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// The experiment options for the experiment template. See experiment_options below for more details!
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "experimentOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub experiment_options: Option<ExperimentTemplateStatusAtProviderExperimentOptions>,
    /// Experiment Template ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// The configuration for experiment logging. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub log_configuration: Option<ExperimentTemplateStatusAtProviderLogConfiguration>,
    /// ARN of an IAM role that grants the AWS FIS service permission to perform service actions on your behalf.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default, setter(strip_option))]
    pub role_arn: Option<String>,
    /// When an ongoing experiment should be stopped. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stopCondition"
    )]
    #[builder(default, setter(strip_option))]
    pub stop_condition: Option<Vec<ExperimentTemplateStatusAtProviderStopCondition>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// Target of an action. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub target: Option<Vec<ExperimentTemplateStatusAtProviderTarget>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateStatusAtProviderAction {
    /// ID of the action. To find out what actions are supported see AWS FIS actions reference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionId")]
    #[builder(default, setter(strip_option))]
    pub action_id: Option<String>,
    /// Description of the action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub description: Option<String>,
    /// Friendly name of the action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Parameter(s) for the action, if applicable. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameter: Option<Vec<ExperimentTemplateStatusAtProviderActionParameter>>,
    /// Set of action names that must complete before this action can be executed.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startAfter"
    )]
    #[builder(default, setter(strip_option))]
    pub start_after: Option<Vec<String>>,
    /// Action's target, if applicable. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub target: Option<ExperimentTemplateStatusAtProviderActionTarget>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateStatusAtProviderActionParameter {
    /// Parameter name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// Parameter value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// Action's target, if applicable. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateStatusAtProviderActionTarget {
    /// Tag key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// Target name, referencing a corresponding target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// The experiment options for the experiment template. See experiment_options below for more details!
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateStatusAtProviderExperimentOptions {
    /// Specifies the account targeting setting for experiment options. Supports single-account and multi-account.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accountTargeting"
    )]
    #[builder(default, setter(strip_option))]
    pub account_targeting: Option<String>,
    /// Specifies the empty target resolution mode for experiment options. Supports fail and skip.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "emptyTargetResolutionMode"
    )]
    #[builder(default, setter(strip_option))]
    pub empty_target_resolution_mode: Option<String>,
}

/// The configuration for experiment logging. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateStatusAtProviderLogConfiguration {
    /// The configuration for experiment logging to Amazon CloudWatch Logs. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLogsConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub cloudwatch_logs_configuration:
        Option<ExperimentTemplateStatusAtProviderLogConfigurationCloudwatchLogsConfiguration>,
    /// The schema version. See documentation for the list of schema versions.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logSchemaVersion"
    )]
    #[builder(default, setter(strip_option))]
    pub log_schema_version: Option<f64>,
    /// The configuration for experiment logging to Amazon S3. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3Configuration"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_configuration: Option<ExperimentTemplateStatusAtProviderLogConfigurationS3Configuration>,
}

/// The configuration for experiment logging to Amazon CloudWatch Logs. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateStatusAtProviderLogConfigurationCloudwatchLogsConfiguration {
    /// The Amazon Resource Name (ARN) of the destination Amazon CloudWatch Logs log group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logGroupArn"
    )]
    #[builder(default, setter(strip_option))]
    pub log_group_arn: Option<String>,
}

/// The configuration for experiment logging to Amazon S3. See below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateStatusAtProviderLogConfigurationS3Configuration {
    /// The name of the destination bucket.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketName"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_name: Option<String>,
    /// The bucket prefix.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub prefix: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateStatusAtProviderStopCondition {
    /// Source of the condition. One of none, aws:cloudwatch:alarm.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub source: Option<String>,
    /// ARN of the CloudWatch alarm. Required if the source is a CloudWatch alarm.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateStatusAtProviderTarget {
    /// Filter(s) for the target. Filters can be used to select resources based on specific attributes returned by the respective describe action of the resource type. For more information, see Targets for AWS FIS. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub filter: Option<Vec<ExperimentTemplateStatusAtProviderTargetFilter>>,
    /// Friendly name given to the target.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// The resource type parameters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub parameters: Option<BTreeMap<String, String>>,
    /// Set of ARNs of the resources to target with an action. Conflicts with resource_tag.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArns"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_arns: Option<Vec<String>>,
    /// Tag(s) the resources need to have to be considered a valid target for an action. Conflicts with resource_arns. See below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceTag"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_tag: Option<Vec<ExperimentTemplateStatusAtProviderTargetResourceTag>>,
    /// AWS resource type. The resource type must be supported for the specified action. To find out what resource types are supported, see Targets for AWS FIS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceType"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_type: Option<String>,
    /// Scopes the identified resources. Valid values are ALL (all identified resources), COUNT(n) (randomly select n of the identified resources), PERCENT(n) (randomly select n percent of the identified resources).
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "selectionMode"
    )]
    #[builder(default, setter(strip_option))]
    pub selection_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateStatusAtProviderTargetFilter {
    /// Attribute path for the filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub path: Option<String>,
    /// Set of attribute values for the filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub values: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ExperimentTemplateStatusAtProviderTargetResourceTag {
    /// Tag key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// Tag value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

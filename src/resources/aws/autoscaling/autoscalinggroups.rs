// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// AutoscalingGroupSpec defines the desired state of AutoscalingGroup
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "autoscaling.aws.upbound.io",
    version = "v1beta3",
    kind = "AutoscalingGroup",
    plural = "autoscalinggroups"
)]
#[kube(status = "AutoscalingGroupStatus")]
pub struct AutoscalingGroupSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<AutoscalingGroupDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: AutoscalingGroupForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<AutoscalingGroupInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<AutoscalingGroupProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<AutoscalingGroupPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<AutoscalingGroupWriteConnectionSecretToRef>,
}

/// AutoscalingGroupSpec defines the desired state of AutoscalingGroup
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProvider {
    /// The instance capacity distribution across Availability Zones. See Availability Zone Distribution below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZoneDistribution"
    )]
    #[builder(default, setter(strip_option))]
    pub availability_zone_distribution:
        Option<AutoscalingGroupForProviderAvailabilityZoneDistribution>,
    /// A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the vpc_zone_identifier attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with vpc_zone_identifier.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZones"
    )]
    #[builder(default, setter(strip_option))]
    pub availability_zones: Option<Vec<String>>,
    /// Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityRebalance"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_rebalance: Option<bool>,
    /// Reserved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub context: Option<String>,
    /// Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultCooldown"
    )]
    #[builder(default, setter(strip_option))]
    pub default_cooldown: Option<f64>,
    /// Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See Set the default instance warmup for an Auto Scaling group)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultInstanceWarmup"
    )]
    #[builder(default, setter(strip_option))]
    pub default_instance_warmup: Option<f64>,
    /// Number of Amazon EC2 instances that
    /// should be running in the group. (See also Waiting for
    /// Capacity below.)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "desiredCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub desired_capacity: Option<f64>,
    /// The unit of measurement for the value specified for desired_capacity. Supported for attribute-based instance type selection only. Valid values: "units", "vcpu", "memory-mib".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "desiredCapacityType"
    )]
    #[builder(default, setter(strip_option))]
    pub desired_capacity_type: Option<String>,
    /// List of metrics to collect. The allowed values are defined by the underlying AWS API.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enabledMetrics"
    )]
    #[builder(default, setter(strip_option))]
    pub enabled_metrics: Option<Vec<String>>,
    /// Allows deleting the Auto Scaling Group without waiting
    /// for all instances in the pool to terminate. You can force an Auto Scaling Group to delete
    /// even if it's in the process of scaling a resource. This bypasses that
    /// behavior and potentially leaves resources dangling.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forceDelete"
    )]
    #[builder(default, setter(strip_option))]
    pub force_delete: Option<bool>,
    /// Allows deleting the Auto Scaling Group without waiting for all instances in the warm pool to terminate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forceDeleteWarmPool"
    )]
    #[builder(default, setter(strip_option))]
    pub force_delete_warm_pool: Option<bool>,
    /// Time (in seconds) after instance comes into service before checking health.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "healthCheckGracePeriod"
    )]
    #[builder(default, setter(strip_option))]
    pub health_check_grace_period: Option<f64>,
    /// "EC2" or "ELB". Controls how health checking is done.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "healthCheckType"
    )]
    #[builder(default, setter(strip_option))]
    pub health_check_type: Option<String>,
    /// Whether to ignore failed Auto Scaling scaling activities while waiting for capacity. The default is false -- failed scaling activities cause errors to be returned.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ignoreFailedScalingActivities"
    )]
    #[builder(default, setter(strip_option))]
    pub ignore_failed_scaling_activities: Option<bool>,
    /// One or more
    /// Lifecycle Hooks
    /// to attach to the Auto Scaling Group before instances are launched. The
    /// syntax is exactly the same as the separate
    /// aws_autoscaling_lifecycle_hook
    /// resource, without the autoscaling_group_name attribute. Please note that this will only work when creating
    /// a new Auto Scaling Group. For all other use-cases, please use aws_autoscaling_lifecycle_hook resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialLifecycleHook"
    )]
    #[builder(default, setter(strip_option))]
    pub initial_lifecycle_hook: Option<Vec<AutoscalingGroupForProviderInitialLifecycleHook>>,
    /// If this block is configured, add a instance maintenance policy to the specified Auto Scaling group. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceMaintenancePolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_maintenance_policy: Option<AutoscalingGroupForProviderInstanceMaintenancePolicy>,
    /// If this block is configured, start an
    /// Instance Refresh
    /// when this Auto Scaling Group is updated. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRefresh"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_refresh: Option<AutoscalingGroupForProviderInstanceRefresh>,
    /// Name of the launch configuration to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_configuration: Option<String>,
    /// Reference to a LaunchConfiguration in autoscaling to populate launchConfiguration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchConfigurationRef"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_configuration_ref: Option<AutoscalingGroupForProviderLaunchConfigurationRef>,
    /// Selector for a LaunchConfiguration in autoscaling to populate launchConfiguration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchConfigurationSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_configuration_selector:
        Option<AutoscalingGroupForProviderLaunchConfigurationSelector>,
    /// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template: Option<AutoscalingGroupForProviderLaunchTemplate>,
    /// Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxInstanceLifetime"
    )]
    #[builder(default, setter(strip_option))]
    pub max_instance_lifetime: Option<f64>,
    /// Maximum size of the Auto Scaling Group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSize")]
    #[builder(default, setter(strip_option))]
    pub max_size: Option<f64>,
    /// Granularity to associate with the metrics to collect. The only valid value is 1Minute. Default is 1Minute.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metricsGranularity"
    )]
    #[builder(default, setter(strip_option))]
    pub metrics_granularity: Option<String>,
    /// Updates will not wait on ELB instance number changes.
    /// (See also Waiting for Capacity below.)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minElbCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub min_elb_capacity: Option<f64>,
    /// Minimum size of the Auto Scaling Group.
    /// (See also Waiting for Capacity below.)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minSize")]
    #[builder(default, setter(strip_option))]
    pub min_size: Option<f64>,
    /// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mixedInstancesPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub mixed_instances_policy: Option<AutoscalingGroupForProviderMixedInstancesPolicy>,
    /// Name of the placement group into which you'll launch your instances, if any.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_group: Option<String>,
    /// Reference to a PlacementGroup in ec2 to populate placementGroup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementGroupRef"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_group_ref: Option<AutoscalingGroupForProviderPlacementGroupRef>,
    /// Selector for a PlacementGroup in ec2 to populate placementGroup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementGroupSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_group_selector: Option<AutoscalingGroupForProviderPlacementGroupSelector>,
    /// Whether newly launched instances
    /// are automatically protected from termination by Amazon EC2 Auto Scaling when
    /// scaling in. For more information about preventing instances from terminating
    /// on scale in, see Using instance scale-in protection
    /// in the Amazon EC2 Auto Scaling User Guide.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "protectFromScaleIn"
    )]
    #[builder(default, setter(strip_option))]
    pub protect_from_scale_in: Option<bool>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// ARN of the service-linked role that the ASG will use to call other AWS services
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceLinkedRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub service_linked_role_arn: Option<String>,
    /// Reference to a Role in iam to populate serviceLinkedRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceLinkedRoleArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub service_linked_role_arn_ref: Option<AutoscalingGroupForProviderServiceLinkedRoleArnRef>,
    /// Selector for a Role in iam to populate serviceLinkedRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceLinkedRoleArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub service_linked_role_arn_selector:
        Option<AutoscalingGroupForProviderServiceLinkedRoleArnSelector>,
    /// List of processes to suspend for the Auto Scaling Group. The allowed values are Launch, Terminate, HealthCheck, ReplaceUnhealthy, AZRebalance, AlarmNotification, ScheduledActions, AddToLoadBalancer, InstanceRefresh.
    /// Note that if you suspend either the Launch or Terminate process types, it can prevent your Auto Scaling Group from functioning properly.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "suspendedProcesses"
    )]
    #[builder(default, setter(strip_option))]
    pub suspended_processes: Option<Vec<String>>,
    /// Configuration block(s) containing resource tags. See Tag below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tag: Option<Vec<AutoscalingGroupForProviderTag>>,
    /// List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are OldestInstance, NewestInstance, OldestLaunchConfiguration, ClosestToNextInstanceHour, OldestLaunchTemplate, AllocationStrategy, Default. Additionally, the ARN of a Lambda function can be specified for custom termination policies.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminationPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub termination_policies: Option<Vec<String>>,
    /// Attaches one or more traffic sources to the specified Auto Scaling group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trafficSource"
    )]
    #[builder(default, setter(strip_option))]
    pub traffic_source: Option<Vec<AutoscalingGroupForProviderTrafficSource>>,
    /// List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with availability_zones.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcZoneIdentifier"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_zone_identifier: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate vpcZoneIdentifier.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcZoneIdentifierRefs"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_zone_identifier_refs: Option<Vec<AutoscalingGroupForProviderVpcZoneIdentifierRefs>>,
    /// Selector for a list of Subnet in ec2 to populate vpcZoneIdentifier.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcZoneIdentifierSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_zone_identifier_selector: Option<AutoscalingGroupForProviderVpcZoneIdentifierSelector>,
    /// (See also Waiting
    /// for Capacity below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "waitForCapacityTimeout"
    )]
    #[builder(default, setter(strip_option))]
    pub wait_for_capacity_timeout: Option<String>,
    /// (Takes
    /// precedence over min_elb_capacity behavior.)
    /// (See also Waiting for Capacity below.)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "waitForElbCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub wait_for_elb_capacity: Option<f64>,
    /// If this block is configured, add a Warm Pool
    /// to the specified Auto Scaling group. Defined below
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "warmPool")]
    #[builder(default, setter(strip_option))]
    pub warm_pool: Option<AutoscalingGroupForProviderWarmPool>,
}

/// The instance capacity distribution across Availability Zones. See Availability Zone Distribution below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderAvailabilityZoneDistribution {
    /// The strategy to use for distributing capacity across the Availability Zones. Valid values are balanced-only and balanced-best-effort. Default is balanced-best-effort.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityDistributionStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_distribution_strategy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderInitialLifecycleHook {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResult"
    )]
    #[builder(default, setter(strip_option))]
    pub default_result: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heartbeatTimeout"
    )]
    #[builder(default, setter(strip_option))]
    pub heartbeat_timeout: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleTransition"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_transition: Option<String>,
    /// Name of the Auto Scaling Group. Conflicts with name_prefix.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notificationMetadata"
    )]
    #[builder(default, setter(strip_option))]
    pub notification_metadata: Option<String>,
    /// ARN for this Auto Scaling Group
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notificationTargetArn"
    )]
    #[builder(default, setter(strip_option))]
    pub notification_target_arn: Option<String>,
    /// ARN for this Auto Scaling Group
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default, setter(strip_option))]
    pub role_arn: Option<String>,
}

/// If this block is configured, add a instance maintenance policy to the specified Auto Scaling group. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderInstanceMaintenancePolicy {
    /// Amount of capacity in the Auto Scaling group that can be in service and healthy, or pending, to support your workload when an instance refresh is in place, as a percentage of the desired capacity of the Auto Scaling group. Values must be between 100 and 200, defaults to 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxHealthyPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub max_healthy_percentage: Option<f64>,
    /// Amount of capacity in the Auto Scaling group that must remain healthy during an instance refresh to allow the operation to continue, as a percentage of the desired capacity of the Auto Scaling group. Defaults to 90.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minHealthyPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub min_healthy_percentage: Option<f64>,
}

/// If this block is configured, start an
/// Instance Refresh
/// when this Auto Scaling Group is updated. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderInstanceRefresh {
    /// Override default parameters for Instance Refresh.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub preferences: Option<AutoscalingGroupForProviderInstanceRefreshPreferences>,
    /// Strategy to use for instance refresh. The only allowed value is Rolling. See StartInstanceRefresh Action for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub strategy: Option<String>,
    /// Set of additional property names that will trigger an Instance Refresh. A refresh will always be triggered by a change in any of launch_configuration, launch_template, or mixed_instances_policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub triggers: Option<Vec<String>>,
}

/// Override default parameters for Instance Refresh.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderInstanceRefreshPreferences {
    /// Alarm Specification for Instance Refresh.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "alarmSpecification"
    )]
    #[builder(default, setter(strip_option))]
    pub alarm_specification:
        Option<AutoscalingGroupForProviderInstanceRefreshPreferencesAlarmSpecification>,
    /// Automatically rollback if instance refresh fails. Defaults to false. This option may only be set to true when specifying a launch_template or mixed_instances_policy.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoRollback"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_rollback: Option<bool>,
    /// Number of seconds to wait after a checkpoint. Defaults to 3600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "checkpointDelay"
    )]
    #[builder(default, setter(strip_option))]
    pub checkpoint_delay: Option<String>,
    /// List of percentages for each checkpoint. Values must be unique and in ascending order. To replace all instances, the final number must be 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "checkpointPercentages"
    )]
    #[builder(default, setter(strip_option))]
    pub checkpoint_percentages: Option<Vec<f64>>,
    /// Number of seconds until a newly launched instance is configured and ready to use. Default behavior is to use the Auto Scaling Group's health check grace period.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceWarmup"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_warmup: Option<String>,
    /// Amount of capacity in the Auto Scaling group that can be in service and healthy, or pending, to support your workload when an instance refresh is in place, as a percentage of the desired capacity of the Auto Scaling group. Values must be between 100 and 200, defaults to 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxHealthyPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub max_healthy_percentage: Option<f64>,
    /// Amount of capacity in the Auto Scaling group that must remain healthy during an instance refresh to allow the operation to continue, as a percentage of the desired capacity of the Auto Scaling group. Defaults to 90.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minHealthyPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub min_healthy_percentage: Option<f64>,
    /// Behavior when encountering instances protected from scale in are found. Available behaviors are Refresh, Ignore, and Wait. Default is Ignore.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleInProtectedInstances"
    )]
    #[builder(default, setter(strip_option))]
    pub scale_in_protected_instances: Option<String>,
    /// Replace instances that already have your desired configuration. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipMatching"
    )]
    #[builder(default, setter(strip_option))]
    pub skip_matching: Option<bool>,
    /// Behavior when encountering instances in the Standby state in are found. Available behaviors are Terminate, Ignore, and Wait. Default is Ignore.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "standbyInstances"
    )]
    #[builder(default, setter(strip_option))]
    pub standby_instances: Option<String>,
}

/// Alarm Specification for Instance Refresh.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderInstanceRefreshPreferencesAlarmSpecification {
    /// List of Cloudwatch alarms. If any of these alarms goes into ALARM state, Instance Refresh is failed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub alarms: Option<Vec<String>>,
}

/// Reference to a LaunchConfiguration in autoscaling to populate launchConfiguration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderLaunchConfigurationRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupForProviderLaunchConfigurationRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderLaunchConfigurationRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupForProviderLaunchConfigurationRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupForProviderLaunchConfigurationRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderLaunchConfigurationRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderLaunchConfigurationRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a LaunchConfiguration in autoscaling to populate launchConfiguration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderLaunchConfigurationSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupForProviderLaunchConfigurationSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderLaunchConfigurationSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupForProviderLaunchConfigurationSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupForProviderLaunchConfigurationSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderLaunchConfigurationSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderLaunchConfigurationSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderLaunchTemplate {
    /// ID of the launch template. Conflicts with name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Reference to a LaunchTemplate in ec2 to populate id.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idRef")]
    #[builder(default, setter(strip_option))]
    pub id_ref: Option<AutoscalingGroupForProviderLaunchTemplateIdRef>,
    /// Selector for a LaunchTemplate in ec2 to populate id.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub id_selector: Option<AutoscalingGroupForProviderLaunchTemplateIdSelector>,
    /// Name of the launch template. Conflicts with id.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Template version. Can be version number, $Latest, or $Default. (Default: $Default).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

/// Reference to a LaunchTemplate in ec2 to populate id.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderLaunchTemplateIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupForProviderLaunchTemplateIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderLaunchTemplateIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupForProviderLaunchTemplateIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupForProviderLaunchTemplateIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderLaunchTemplateIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderLaunchTemplateIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a LaunchTemplate in ec2 to populate id.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderLaunchTemplateIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupForProviderLaunchTemplateIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderLaunchTemplateIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupForProviderLaunchTemplateIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupForProviderLaunchTemplateIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderLaunchTemplateIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderLaunchTemplateIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicy {
    /// Nested argument containing settings on how to mix on-demand and Spot instances in the Auto Scaling group. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instancesDistribution"
    )]
    #[builder(default, setter(strip_option))]
    pub instances_distribution:
        Option<AutoscalingGroupForProviderMixedInstancesPolicyInstancesDistribution>,
    /// Nested argument containing launch template settings along with the overrides to specify multiple instance types and weights. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplate>,
}

/// Nested argument containing settings on how to mix on-demand and Spot instances in the Auto Scaling group. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyInstancesDistribution {
    /// Strategy to use when launching on-demand instances. Valid values: prioritized, lowest-price. Default: prioritized.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "onDemandAllocationStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub on_demand_allocation_strategy: Option<String>,
    /// Absolute minimum amount of desired capacity that must be fulfilled by on-demand instances. Default: 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "onDemandBaseCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub on_demand_base_capacity: Option<f64>,
    /// Percentage split between on-demand and Spot instances above the base on-demand capacity. Default: 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "onDemandPercentageAboveBaseCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub on_demand_percentage_above_base_capacity: Option<f64>,
    /// How to allocate capacity across the Spot pools. Valid values: lowest-price, capacity-optimized, capacity-optimized-prioritized, and price-capacity-optimized. Default: lowest-price.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotAllocationStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_allocation_strategy: Option<String>,
    /// Number of Spot pools per availability zone to allocate capacity. EC2 Auto Scaling selects the cheapest Spot pools and evenly allocates Spot capacity across the number of Spot pools that you specify. Only available with spot_allocation_strategy set to lowest-price. Otherwise it must be set to 0, if it has been defined before. Default: 2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotInstancePools"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_instance_pools: Option<f64>,
    /// Maximum price per unit hour that the user is willing to pay for the Spot instances. Default: an empty string which means the on-demand price.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotMaxPrice"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_max_price: Option<String>,
}

/// Nested argument containing launch template settings along with the overrides to specify multiple instance types and weights. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplate {
    /// Nested argument defines the Launch Template. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateSpecification"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_specification: Option<
        AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification,
    >,
    /// List of nested arguments provides the ability to specify multiple instance types. This will override the same parameter in the launch template. For on-demand instances, Auto Scaling considers the order of preference of instance types to launch based on the order specified in the overrides list. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override:
        Option<Vec<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverride>>,
}

/// Nested argument defines the Launch Template. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification {
    /// ID of the launch template. Conflicts with launch_template_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateId")]
    #[builder(default, setter(strip_option))]
    pub launch_template_id: Option<String>,
    /// Reference to a LaunchTemplate in ec2 to populate launchTemplateId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateIdRef")]
    #[builder(default, setter(strip_option))]
    pub launch_template_id_ref: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdRef>,
    /// Selector for a LaunchTemplate in ec2 to populate launchTemplateId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateIdSelector")]
    #[builder(default, setter(strip_option))]
    pub launch_template_id_selector: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdSelector>,
    /// Name of the launch template. Conflicts with launch_template_id.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateName")]
    #[builder(default, setter(strip_option))]
    pub launch_template_name: Option<String>,
    /// Template version. Can be version number, $Latest, or $Default. (Default: $Default).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

/// Reference to a LaunchTemplate in ec2 to populate launchTemplateId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a LaunchTemplate in ec2 to populate launchTemplateId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverride {
    /// Override the instance type in the Launch Template with instance types that satisfy the requirements.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceRequirements")]
    #[builder(default, setter(strip_option))]
    pub instance_requirements: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirements>,
    /// Override the instance type in the Launch Template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<String>,
    /// Nested argument defines the Launch Template. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateSpecification")]
    #[builder(default, setter(strip_option))]
    pub launch_template_specification: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification>,
    /// Number of capacity units, which gives the instance type a proportional weight to other instance types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weightedCapacity")]
    #[builder(default, setter(strip_option))]
    pub weighted_capacity: Option<String>,
}

/// Override the instance type in the Launch Template with instance types that satisfy the requirements.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirements {
    /// Block describing the minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips). Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorCount")]
    #[builder(default, setter(strip_option))]
    pub accelerator_count: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsAcceleratorCount>,
    /// List of accelerator manufacturer names. Default is any manufacturer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorManufacturers")]
    #[builder(default, setter(strip_option))]
    pub accelerator_manufacturers: Option<Vec<String>>,
    /// List of accelerator names. Default is any acclerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorNames")]
    #[builder(default, setter(strip_option))]
    pub accelerator_names: Option<Vec<String>>,
    /// Block describing the minimum and maximum total memory of the accelerators. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorTotalMemoryMib")]
    #[builder(default, setter(strip_option))]
    pub accelerator_total_memory_mib: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsAcceleratorTotalMemoryMib>,
    /// List of accelerator types. Default is any accelerator type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorTypes")]
    #[builder(default, setter(strip_option))]
    pub accelerator_types: Option<Vec<String>>,
    /// List of instance types to apply your specified attributes against. All other instance types are ignored, even if they match your specified attributes. You can use strings with one or more wild cards, represented by an asterisk (*), to allow an instance type, size, or generation. The following are examples: m5.8xlarge, c5*.*, m5a.*, r*, *3*. For example, if you specify c5*, you are allowing the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, you are allowing all the M5a instance types, but not the M5n instance types. Maximum of 400 entries in the list; each entry is limited to 30 characters. Default is all instance types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedInstanceTypes")]
    #[builder(default, setter(strip_option))]
    pub allowed_instance_types: Option<Vec<String>>,
    /// Indicate whether bare metal instace types should be included, excluded, or required. Default is excluded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bareMetal")]
    #[builder(default, setter(strip_option))]
    pub bare_metal: Option<String>,
    /// Block describing the minimum and maximum baseline EBS bandwidth, in Mbps. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baselineEbsBandwidthMbps")]
    #[builder(default, setter(strip_option))]
    pub baseline_ebs_bandwidth_mbps: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsBaselineEbsBandwidthMbps>,
    /// Indicate whether burstable performance instance types should be included, excluded, or required. Default is excluded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "burstablePerformance")]
    #[builder(default, setter(strip_option))]
    pub burstable_performance: Option<String>,
    /// List of CPU manufacturer names. Default is any manufacturer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuManufacturers")]
    #[builder(default, setter(strip_option))]
    pub cpu_manufacturers: Option<Vec<String>>,
    /// List of instance types to exclude. You can use strings with one or more wild cards, represented by an asterisk (*), to exclude an instance type, size, or generation. The following are examples: m5.8xlarge, c5*.*, m5a.*, r*, *3*. For example, if you specify c5*, you are excluding the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, you are excluding all the M5a instance types, but not the M5n instance types. Maximum of 400 entries in the list; each entry is limited to 30 characters. Default is no excluded instance types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedInstanceTypes")]
    #[builder(default, setter(strip_option))]
    pub excluded_instance_types: Option<Vec<String>>,
    /// List of instance generation names. Default is any generation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceGenerations")]
    #[builder(default, setter(strip_option))]
    pub instance_generations: Option<Vec<String>>,
    /// Indicate whether instance types with local storage volumes are included, excluded, or required. Default is included.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localStorage")]
    #[builder(default, setter(strip_option))]
    pub local_storage: Option<String>,
    /// List of local storage type names. Default any storage type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localStorageTypes")]
    #[builder(default, setter(strip_option))]
    pub local_storage_types: Option<Vec<String>>,
    /// The price protection threshold for Spot Instances. This is the maximum you’ll pay for a Spot Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Conflicts with spot_max_price_percentage_over_lowest_price
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSpotPriceAsPercentageOfOptimalOnDemandPrice")]
    #[builder(default, setter(strip_option))]
    pub max_spot_price_as_percentage_of_optimal_on_demand_price: Option<f64>,
    /// Block describing the minimum and maximum amount of memory (GiB) per vCPU. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryGibPerVcpu")]
    #[builder(default, setter(strip_option))]
    pub memory_gib_per_vcpu: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsMemoryGibPerVcpu>,
    /// Block describing the minimum and maximum amount of memory (MiB). Default is no maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryMib")]
    #[builder(default, setter(strip_option))]
    pub memory_mib: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsMemoryMib>,
    /// Block describing the minimum and maximum amount of network bandwidth, in gigabits per second (Gbps). Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkBandwidthGbps")]
    #[builder(default, setter(strip_option))]
    pub network_bandwidth_gbps: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsNetworkBandwidthGbps>,
    /// Block describing the minimum and maximum number of network interfaces. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaceCount")]
    #[builder(default, setter(strip_option))]
    pub network_interface_count: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsNetworkInterfaceCount>,
    /// Price protection threshold for On-Demand Instances. This is the maximum you’ll pay for an On-Demand Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Default is 20.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onDemandMaxPricePercentageOverLowestPrice")]
    #[builder(default, setter(strip_option))]
    pub on_demand_max_price_percentage_over_lowest_price: Option<f64>,
    /// Indicate whether instance types must support On-Demand Instance Hibernation, either true or false. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireHibernateSupport")]
    #[builder(default, setter(strip_option))]
    pub require_hibernate_support: Option<bool>,
    /// Price protection threshold for Spot Instances. This is the maximum you’ll pay for a Spot Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Default is 100. Conflicts with max_spot_price_as_percentage_of_optimal_on_demand_price
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotMaxPricePercentageOverLowestPrice")]
    #[builder(default, setter(strip_option))]
    pub spot_max_price_percentage_over_lowest_price: Option<f64>,
    /// Block describing the minimum and maximum total local storage (GB). Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalLocalStorageGb")]
    #[builder(default, setter(strip_option))]
    pub total_local_storage_gb: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsTotalLocalStorageGb>,
    /// Block describing the minimum and maximum number of vCPUs. Default is no maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vcpuCount")]
    #[builder(default, setter(strip_option))]
    pub vcpu_count: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsVcpuCount>,
}

/// Block describing the minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips). Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsAcceleratorCount
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum total memory of the accelerators. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsAcceleratorTotalMemoryMib
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum baseline EBS bandwidth, in Mbps. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsBaselineEbsBandwidthMbps
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum amount of memory (GiB) per vCPU. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsMemoryGibPerVcpu
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum amount of memory (MiB). Default is no maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsMemoryMib
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum amount of network bandwidth, in gigabits per second (Gbps). Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsNetworkBandwidthGbps
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum number of network interfaces. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsNetworkInterfaceCount
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum total local storage (GB). Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsTotalLocalStorageGb
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum number of vCPUs. Default is no maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsVcpuCount
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Nested argument defines the Launch Template. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification {
    /// ID of the launch template. Conflicts with launch_template_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateId")]
    #[builder(default, setter(strip_option))]
    pub launch_template_id: Option<String>,
    /// Reference to a LaunchTemplate in ec2 to populate launchTemplateId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateIdRef")]
    #[builder(default, setter(strip_option))]
    pub launch_template_id_ref: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdRef>,
    /// Selector for a LaunchTemplate in ec2 to populate launchTemplateId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateIdSelector")]
    #[builder(default, setter(strip_option))]
    pub launch_template_id_selector: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdSelector>,
    /// Name of the launch template. Conflicts with launch_template_id.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateName")]
    #[builder(default, setter(strip_option))]
    pub launch_template_name: Option<String>,
    /// Template version. Can be version number, $Latest, or $Default. (Default: $Default).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

/// Reference to a LaunchTemplate in ec2 to populate launchTemplateId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a LaunchTemplate in ec2 to populate launchTemplateId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Reference to a PlacementGroup in ec2 to populate placementGroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderPlacementGroupRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupForProviderPlacementGroupRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderPlacementGroupRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupForProviderPlacementGroupRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupForProviderPlacementGroupRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderPlacementGroupRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderPlacementGroupRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a PlacementGroup in ec2 to populate placementGroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderPlacementGroupSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupForProviderPlacementGroupSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderPlacementGroupSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupForProviderPlacementGroupSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupForProviderPlacementGroupSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderPlacementGroupSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderPlacementGroupSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate serviceLinkedRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderServiceLinkedRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupForProviderServiceLinkedRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderServiceLinkedRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupForProviderServiceLinkedRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupForProviderServiceLinkedRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderServiceLinkedRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderServiceLinkedRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate serviceLinkedRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderServiceLinkedRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupForProviderServiceLinkedRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderServiceLinkedRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupForProviderServiceLinkedRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupForProviderServiceLinkedRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderServiceLinkedRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderServiceLinkedRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderTag {
    /// Key
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// Enables propagation of the tag to
    /// Amazon EC2 instances launched via this ASG
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "propagateAtLaunch"
    )]
    #[builder(default, setter(strip_option))]
    pub propagate_at_launch: Option<bool>,
    /// Value
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderTrafficSource {
    /// Identifies the traffic source. For Application Load Balancers, Gateway Load Balancers, Network Load Balancers, and VPC Lattice, this will be the Amazon Resource Name (ARN) for a target group in this account and Region. For Classic Load Balancers, this will be the name of the Classic Load Balancer in this account and Region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub identifier: Option<String>,
    /// Provides additional context for the value of Identifier.
    /// The following lists the valid values:
    /// elb if identifier is the name of a Classic Load Balancer.
    /// elbv2 if identifier is the ARN of an Application Load Balancer, Gateway Load Balancer, or Network Load Balancer target group.
    /// vpc-lattice if identifier is the ARN of a VPC Lattice target group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderVpcZoneIdentifierRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupForProviderVpcZoneIdentifierRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderVpcZoneIdentifierRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupForProviderVpcZoneIdentifierRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupForProviderVpcZoneIdentifierRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderVpcZoneIdentifierRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderVpcZoneIdentifierRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate vpcZoneIdentifier.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderVpcZoneIdentifierSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupForProviderVpcZoneIdentifierSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderVpcZoneIdentifierSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupForProviderVpcZoneIdentifierSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupForProviderVpcZoneIdentifierSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderVpcZoneIdentifierSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupForProviderVpcZoneIdentifierSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// If this block is configured, add a Warm Pool
/// to the specified Auto Scaling group. Defined below
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderWarmPool {
    /// Whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceReusePolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_reuse_policy: Option<AutoscalingGroupForProviderWarmPoolInstanceReusePolicy>,
    /// Total maximum number of instances that are allowed to be in the warm pool or in any state except Terminated for the Auto Scaling group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxGroupPreparedCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub max_group_prepared_capacity: Option<f64>,
    /// Minimum size of the Auto Scaling Group.
    /// (See also Waiting for Capacity below.)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minSize")]
    #[builder(default, setter(strip_option))]
    pub min_size: Option<f64>,
    /// Sets the instance state to transition to after the lifecycle hooks finish. Valid values are: Stopped (default), Running or Hibernated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "poolState")]
    #[builder(default, setter(strip_option))]
    pub pool_state: Option<String>,
}

/// Whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupForProviderWarmPoolInstanceReusePolicy {
    /// Whether instances in the Auto Scaling group can be returned to the warm pool on scale in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "reuseOnScaleIn"
    )]
    #[builder(default, setter(strip_option))]
    pub reuse_on_scale_in: Option<bool>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProvider {
    /// The instance capacity distribution across Availability Zones. See Availability Zone Distribution below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZoneDistribution"
    )]
    #[builder(default, setter(strip_option))]
    pub availability_zone_distribution:
        Option<AutoscalingGroupInitProviderAvailabilityZoneDistribution>,
    /// A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the vpc_zone_identifier attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with vpc_zone_identifier.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZones"
    )]
    #[builder(default, setter(strip_option))]
    pub availability_zones: Option<Vec<String>>,
    /// Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityRebalance"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_rebalance: Option<bool>,
    /// Reserved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub context: Option<String>,
    /// Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultCooldown"
    )]
    #[builder(default, setter(strip_option))]
    pub default_cooldown: Option<f64>,
    /// Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See Set the default instance warmup for an Auto Scaling group)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultInstanceWarmup"
    )]
    #[builder(default, setter(strip_option))]
    pub default_instance_warmup: Option<f64>,
    /// Number of Amazon EC2 instances that
    /// should be running in the group. (See also Waiting for
    /// Capacity below.)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "desiredCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub desired_capacity: Option<f64>,
    /// The unit of measurement for the value specified for desired_capacity. Supported for attribute-based instance type selection only. Valid values: "units", "vcpu", "memory-mib".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "desiredCapacityType"
    )]
    #[builder(default, setter(strip_option))]
    pub desired_capacity_type: Option<String>,
    /// List of metrics to collect. The allowed values are defined by the underlying AWS API.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enabledMetrics"
    )]
    #[builder(default, setter(strip_option))]
    pub enabled_metrics: Option<Vec<String>>,
    /// Allows deleting the Auto Scaling Group without waiting
    /// for all instances in the pool to terminate. You can force an Auto Scaling Group to delete
    /// even if it's in the process of scaling a resource. This bypasses that
    /// behavior and potentially leaves resources dangling.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forceDelete"
    )]
    #[builder(default, setter(strip_option))]
    pub force_delete: Option<bool>,
    /// Allows deleting the Auto Scaling Group without waiting for all instances in the warm pool to terminate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forceDeleteWarmPool"
    )]
    #[builder(default, setter(strip_option))]
    pub force_delete_warm_pool: Option<bool>,
    /// Time (in seconds) after instance comes into service before checking health.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "healthCheckGracePeriod"
    )]
    #[builder(default, setter(strip_option))]
    pub health_check_grace_period: Option<f64>,
    /// "EC2" or "ELB". Controls how health checking is done.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "healthCheckType"
    )]
    #[builder(default, setter(strip_option))]
    pub health_check_type: Option<String>,
    /// Whether to ignore failed Auto Scaling scaling activities while waiting for capacity. The default is false -- failed scaling activities cause errors to be returned.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ignoreFailedScalingActivities"
    )]
    #[builder(default, setter(strip_option))]
    pub ignore_failed_scaling_activities: Option<bool>,
    /// One or more
    /// Lifecycle Hooks
    /// to attach to the Auto Scaling Group before instances are launched. The
    /// syntax is exactly the same as the separate
    /// aws_autoscaling_lifecycle_hook
    /// resource, without the autoscaling_group_name attribute. Please note that this will only work when creating
    /// a new Auto Scaling Group. For all other use-cases, please use aws_autoscaling_lifecycle_hook resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialLifecycleHook"
    )]
    #[builder(default, setter(strip_option))]
    pub initial_lifecycle_hook: Option<Vec<AutoscalingGroupInitProviderInitialLifecycleHook>>,
    /// If this block is configured, add a instance maintenance policy to the specified Auto Scaling group. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceMaintenancePolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_maintenance_policy: Option<AutoscalingGroupInitProviderInstanceMaintenancePolicy>,
    /// If this block is configured, start an
    /// Instance Refresh
    /// when this Auto Scaling Group is updated. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRefresh"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_refresh: Option<AutoscalingGroupInitProviderInstanceRefresh>,
    /// Name of the launch configuration to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_configuration: Option<String>,
    /// Reference to a LaunchConfiguration in autoscaling to populate launchConfiguration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchConfigurationRef"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_configuration_ref: Option<AutoscalingGroupInitProviderLaunchConfigurationRef>,
    /// Selector for a LaunchConfiguration in autoscaling to populate launchConfiguration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchConfigurationSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_configuration_selector:
        Option<AutoscalingGroupInitProviderLaunchConfigurationSelector>,
    /// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template: Option<AutoscalingGroupInitProviderLaunchTemplate>,
    /// Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxInstanceLifetime"
    )]
    #[builder(default, setter(strip_option))]
    pub max_instance_lifetime: Option<f64>,
    /// Maximum size of the Auto Scaling Group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSize")]
    #[builder(default, setter(strip_option))]
    pub max_size: Option<f64>,
    /// Granularity to associate with the metrics to collect. The only valid value is 1Minute. Default is 1Minute.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metricsGranularity"
    )]
    #[builder(default, setter(strip_option))]
    pub metrics_granularity: Option<String>,
    /// Updates will not wait on ELB instance number changes.
    /// (See also Waiting for Capacity below.)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minElbCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub min_elb_capacity: Option<f64>,
    /// Minimum size of the Auto Scaling Group.
    /// (See also Waiting for Capacity below.)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minSize")]
    #[builder(default, setter(strip_option))]
    pub min_size: Option<f64>,
    /// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mixedInstancesPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub mixed_instances_policy: Option<AutoscalingGroupInitProviderMixedInstancesPolicy>,
    /// Name of the placement group into which you'll launch your instances, if any.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_group: Option<String>,
    /// Reference to a PlacementGroup in ec2 to populate placementGroup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementGroupRef"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_group_ref: Option<AutoscalingGroupInitProviderPlacementGroupRef>,
    /// Selector for a PlacementGroup in ec2 to populate placementGroup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementGroupSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_group_selector: Option<AutoscalingGroupInitProviderPlacementGroupSelector>,
    /// Whether newly launched instances
    /// are automatically protected from termination by Amazon EC2 Auto Scaling when
    /// scaling in. For more information about preventing instances from terminating
    /// on scale in, see Using instance scale-in protection
    /// in the Amazon EC2 Auto Scaling User Guide.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "protectFromScaleIn"
    )]
    #[builder(default, setter(strip_option))]
    pub protect_from_scale_in: Option<bool>,
    /// ARN of the service-linked role that the ASG will use to call other AWS services
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceLinkedRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub service_linked_role_arn: Option<String>,
    /// Reference to a Role in iam to populate serviceLinkedRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceLinkedRoleArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub service_linked_role_arn_ref: Option<AutoscalingGroupInitProviderServiceLinkedRoleArnRef>,
    /// Selector for a Role in iam to populate serviceLinkedRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceLinkedRoleArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub service_linked_role_arn_selector:
        Option<AutoscalingGroupInitProviderServiceLinkedRoleArnSelector>,
    /// List of processes to suspend for the Auto Scaling Group. The allowed values are Launch, Terminate, HealthCheck, ReplaceUnhealthy, AZRebalance, AlarmNotification, ScheduledActions, AddToLoadBalancer, InstanceRefresh.
    /// Note that if you suspend either the Launch or Terminate process types, it can prevent your Auto Scaling Group from functioning properly.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "suspendedProcesses"
    )]
    #[builder(default, setter(strip_option))]
    pub suspended_processes: Option<Vec<String>>,
    /// Configuration block(s) containing resource tags. See Tag below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tag: Option<Vec<AutoscalingGroupInitProviderTag>>,
    /// List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are OldestInstance, NewestInstance, OldestLaunchConfiguration, ClosestToNextInstanceHour, OldestLaunchTemplate, AllocationStrategy, Default. Additionally, the ARN of a Lambda function can be specified for custom termination policies.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminationPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub termination_policies: Option<Vec<String>>,
    /// Attaches one or more traffic sources to the specified Auto Scaling group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trafficSource"
    )]
    #[builder(default, setter(strip_option))]
    pub traffic_source: Option<Vec<AutoscalingGroupInitProviderTrafficSource>>,
    /// List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with availability_zones.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcZoneIdentifier"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_zone_identifier: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate vpcZoneIdentifier.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcZoneIdentifierRefs"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_zone_identifier_refs: Option<Vec<AutoscalingGroupInitProviderVpcZoneIdentifierRefs>>,
    /// Selector for a list of Subnet in ec2 to populate vpcZoneIdentifier.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcZoneIdentifierSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_zone_identifier_selector: Option<AutoscalingGroupInitProviderVpcZoneIdentifierSelector>,
    /// (See also Waiting
    /// for Capacity below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "waitForCapacityTimeout"
    )]
    #[builder(default, setter(strip_option))]
    pub wait_for_capacity_timeout: Option<String>,
    /// (Takes
    /// precedence over min_elb_capacity behavior.)
    /// (See also Waiting for Capacity below.)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "waitForElbCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub wait_for_elb_capacity: Option<f64>,
    /// If this block is configured, add a Warm Pool
    /// to the specified Auto Scaling group. Defined below
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "warmPool")]
    #[builder(default, setter(strip_option))]
    pub warm_pool: Option<AutoscalingGroupInitProviderWarmPool>,
}

/// The instance capacity distribution across Availability Zones. See Availability Zone Distribution below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderAvailabilityZoneDistribution {
    /// The strategy to use for distributing capacity across the Availability Zones. Valid values are balanced-only and balanced-best-effort. Default is balanced-best-effort.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityDistributionStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_distribution_strategy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderInitialLifecycleHook {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResult"
    )]
    #[builder(default, setter(strip_option))]
    pub default_result: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heartbeatTimeout"
    )]
    #[builder(default, setter(strip_option))]
    pub heartbeat_timeout: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleTransition"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_transition: Option<String>,
    /// Name of the Auto Scaling Group. Conflicts with name_prefix.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notificationMetadata"
    )]
    #[builder(default, setter(strip_option))]
    pub notification_metadata: Option<String>,
    /// ARN for this Auto Scaling Group
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notificationTargetArn"
    )]
    #[builder(default, setter(strip_option))]
    pub notification_target_arn: Option<String>,
    /// ARN for this Auto Scaling Group
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default, setter(strip_option))]
    pub role_arn: Option<String>,
}

/// If this block is configured, add a instance maintenance policy to the specified Auto Scaling group. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderInstanceMaintenancePolicy {
    /// Amount of capacity in the Auto Scaling group that can be in service and healthy, or pending, to support your workload when an instance refresh is in place, as a percentage of the desired capacity of the Auto Scaling group. Values must be between 100 and 200, defaults to 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxHealthyPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub max_healthy_percentage: Option<f64>,
    /// Amount of capacity in the Auto Scaling group that must remain healthy during an instance refresh to allow the operation to continue, as a percentage of the desired capacity of the Auto Scaling group. Defaults to 90.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minHealthyPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub min_healthy_percentage: Option<f64>,
}

/// If this block is configured, start an
/// Instance Refresh
/// when this Auto Scaling Group is updated. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderInstanceRefresh {
    /// Override default parameters for Instance Refresh.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub preferences: Option<AutoscalingGroupInitProviderInstanceRefreshPreferences>,
    /// Strategy to use for instance refresh. The only allowed value is Rolling. See StartInstanceRefresh Action for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub strategy: Option<String>,
    /// Set of additional property names that will trigger an Instance Refresh. A refresh will always be triggered by a change in any of launch_configuration, launch_template, or mixed_instances_policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub triggers: Option<Vec<String>>,
}

/// Override default parameters for Instance Refresh.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderInstanceRefreshPreferences {
    /// Alarm Specification for Instance Refresh.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "alarmSpecification"
    )]
    #[builder(default, setter(strip_option))]
    pub alarm_specification:
        Option<AutoscalingGroupInitProviderInstanceRefreshPreferencesAlarmSpecification>,
    /// Automatically rollback if instance refresh fails. Defaults to false. This option may only be set to true when specifying a launch_template or mixed_instances_policy.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoRollback"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_rollback: Option<bool>,
    /// Number of seconds to wait after a checkpoint. Defaults to 3600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "checkpointDelay"
    )]
    #[builder(default, setter(strip_option))]
    pub checkpoint_delay: Option<String>,
    /// List of percentages for each checkpoint. Values must be unique and in ascending order. To replace all instances, the final number must be 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "checkpointPercentages"
    )]
    #[builder(default, setter(strip_option))]
    pub checkpoint_percentages: Option<Vec<f64>>,
    /// Number of seconds until a newly launched instance is configured and ready to use. Default behavior is to use the Auto Scaling Group's health check grace period.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceWarmup"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_warmup: Option<String>,
    /// Amount of capacity in the Auto Scaling group that can be in service and healthy, or pending, to support your workload when an instance refresh is in place, as a percentage of the desired capacity of the Auto Scaling group. Values must be between 100 and 200, defaults to 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxHealthyPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub max_healthy_percentage: Option<f64>,
    /// Amount of capacity in the Auto Scaling group that must remain healthy during an instance refresh to allow the operation to continue, as a percentage of the desired capacity of the Auto Scaling group. Defaults to 90.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minHealthyPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub min_healthy_percentage: Option<f64>,
    /// Behavior when encountering instances protected from scale in are found. Available behaviors are Refresh, Ignore, and Wait. Default is Ignore.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleInProtectedInstances"
    )]
    #[builder(default, setter(strip_option))]
    pub scale_in_protected_instances: Option<String>,
    /// Replace instances that already have your desired configuration. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipMatching"
    )]
    #[builder(default, setter(strip_option))]
    pub skip_matching: Option<bool>,
    /// Behavior when encountering instances in the Standby state in are found. Available behaviors are Terminate, Ignore, and Wait. Default is Ignore.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "standbyInstances"
    )]
    #[builder(default, setter(strip_option))]
    pub standby_instances: Option<String>,
}

/// Alarm Specification for Instance Refresh.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderInstanceRefreshPreferencesAlarmSpecification {
    /// List of Cloudwatch alarms. If any of these alarms goes into ALARM state, Instance Refresh is failed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub alarms: Option<Vec<String>>,
}

/// Reference to a LaunchConfiguration in autoscaling to populate launchConfiguration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderLaunchConfigurationRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupInitProviderLaunchConfigurationRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderLaunchConfigurationRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupInitProviderLaunchConfigurationRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupInitProviderLaunchConfigurationRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderLaunchConfigurationRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderLaunchConfigurationRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a LaunchConfiguration in autoscaling to populate launchConfiguration.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderLaunchConfigurationSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupInitProviderLaunchConfigurationSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderLaunchConfigurationSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupInitProviderLaunchConfigurationSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupInitProviderLaunchConfigurationSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderLaunchConfigurationSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderLaunchConfigurationSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderLaunchTemplate {
    /// ID of the launch template. Conflicts with name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Reference to a LaunchTemplate in ec2 to populate id.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idRef")]
    #[builder(default, setter(strip_option))]
    pub id_ref: Option<AutoscalingGroupInitProviderLaunchTemplateIdRef>,
    /// Selector for a LaunchTemplate in ec2 to populate id.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub id_selector: Option<AutoscalingGroupInitProviderLaunchTemplateIdSelector>,
    /// Name of the launch template. Conflicts with id.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Template version. Can be version number, $Latest, or $Default. (Default: $Default).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

/// Reference to a LaunchTemplate in ec2 to populate id.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderLaunchTemplateIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupInitProviderLaunchTemplateIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderLaunchTemplateIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupInitProviderLaunchTemplateIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupInitProviderLaunchTemplateIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderLaunchTemplateIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderLaunchTemplateIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a LaunchTemplate in ec2 to populate id.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderLaunchTemplateIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupInitProviderLaunchTemplateIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderLaunchTemplateIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupInitProviderLaunchTemplateIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupInitProviderLaunchTemplateIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderLaunchTemplateIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderLaunchTemplateIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicy {
    /// Nested argument containing settings on how to mix on-demand and Spot instances in the Auto Scaling group. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instancesDistribution"
    )]
    #[builder(default, setter(strip_option))]
    pub instances_distribution:
        Option<AutoscalingGroupInitProviderMixedInstancesPolicyInstancesDistribution>,
    /// Nested argument containing launch template settings along with the overrides to specify multiple instance types and weights. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplate>,
}

/// Nested argument containing settings on how to mix on-demand and Spot instances in the Auto Scaling group. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyInstancesDistribution {
    /// Strategy to use when launching on-demand instances. Valid values: prioritized, lowest-price. Default: prioritized.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "onDemandAllocationStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub on_demand_allocation_strategy: Option<String>,
    /// Absolute minimum amount of desired capacity that must be fulfilled by on-demand instances. Default: 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "onDemandBaseCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub on_demand_base_capacity: Option<f64>,
    /// Percentage split between on-demand and Spot instances above the base on-demand capacity. Default: 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "onDemandPercentageAboveBaseCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub on_demand_percentage_above_base_capacity: Option<f64>,
    /// How to allocate capacity across the Spot pools. Valid values: lowest-price, capacity-optimized, capacity-optimized-prioritized, and price-capacity-optimized. Default: lowest-price.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotAllocationStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_allocation_strategy: Option<String>,
    /// Number of Spot pools per availability zone to allocate capacity. EC2 Auto Scaling selects the cheapest Spot pools and evenly allocates Spot capacity across the number of Spot pools that you specify. Only available with spot_allocation_strategy set to lowest-price. Otherwise it must be set to 0, if it has been defined before. Default: 2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotInstancePools"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_instance_pools: Option<f64>,
    /// Maximum price per unit hour that the user is willing to pay for the Spot instances. Default: an empty string which means the on-demand price.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotMaxPrice"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_max_price: Option<String>,
}

/// Nested argument containing launch template settings along with the overrides to specify multiple instance types and weights. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplate {
    /// Nested argument defines the Launch Template. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateSpecification"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_specification: Option<
        AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification,
    >,
    /// List of nested arguments provides the ability to specify multiple instance types. This will override the same parameter in the launch template. For on-demand instances, Auto Scaling considers the order of preference of instance types to launch based on the order specified in the overrides list. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override:
        Option<Vec<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverride>>,
}

/// Nested argument defines the Launch Template. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification {
    /// ID of the launch template. Conflicts with launch_template_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateId")]
    #[builder(default, setter(strip_option))]
    pub launch_template_id: Option<String>,
    /// Reference to a LaunchTemplate in ec2 to populate launchTemplateId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateIdRef")]
    #[builder(default, setter(strip_option))]
    pub launch_template_id_ref: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdRef>,
    /// Selector for a LaunchTemplate in ec2 to populate launchTemplateId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateIdSelector")]
    #[builder(default, setter(strip_option))]
    pub launch_template_id_selector: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdSelector>,
    /// Name of the launch template. Conflicts with launch_template_id.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateName")]
    #[builder(default, setter(strip_option))]
    pub launch_template_name: Option<String>,
    /// Template version. Can be version number, $Latest, or $Default. (Default: $Default).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

/// Reference to a LaunchTemplate in ec2 to populate launchTemplateId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a LaunchTemplate in ec2 to populate launchTemplateId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverride {
    /// Override the instance type in the Launch Template with instance types that satisfy the requirements.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceRequirements")]
    #[builder(default, setter(strip_option))]
    pub instance_requirements: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirements>,
    /// Override the instance type in the Launch Template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<String>,
    /// Nested argument defines the Launch Template. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateSpecification")]
    #[builder(default, setter(strip_option))]
    pub launch_template_specification: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification>,
    /// Number of capacity units, which gives the instance type a proportional weight to other instance types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weightedCapacity")]
    #[builder(default, setter(strip_option))]
    pub weighted_capacity: Option<String>,
}

/// Override the instance type in the Launch Template with instance types that satisfy the requirements.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirements {
    /// Block describing the minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips). Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorCount")]
    #[builder(default, setter(strip_option))]
    pub accelerator_count: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsAcceleratorCount>,
    /// List of accelerator manufacturer names. Default is any manufacturer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorManufacturers")]
    #[builder(default, setter(strip_option))]
    pub accelerator_manufacturers: Option<Vec<String>>,
    /// List of accelerator names. Default is any acclerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorNames")]
    #[builder(default, setter(strip_option))]
    pub accelerator_names: Option<Vec<String>>,
    /// Block describing the minimum and maximum total memory of the accelerators. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorTotalMemoryMib")]
    #[builder(default, setter(strip_option))]
    pub accelerator_total_memory_mib: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsAcceleratorTotalMemoryMib>,
    /// List of accelerator types. Default is any accelerator type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorTypes")]
    #[builder(default, setter(strip_option))]
    pub accelerator_types: Option<Vec<String>>,
    /// List of instance types to apply your specified attributes against. All other instance types are ignored, even if they match your specified attributes. You can use strings with one or more wild cards, represented by an asterisk (*), to allow an instance type, size, or generation. The following are examples: m5.8xlarge, c5*.*, m5a.*, r*, *3*. For example, if you specify c5*, you are allowing the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, you are allowing all the M5a instance types, but not the M5n instance types. Maximum of 400 entries in the list; each entry is limited to 30 characters. Default is all instance types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedInstanceTypes")]
    #[builder(default, setter(strip_option))]
    pub allowed_instance_types: Option<Vec<String>>,
    /// Indicate whether bare metal instace types should be included, excluded, or required. Default is excluded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bareMetal")]
    #[builder(default, setter(strip_option))]
    pub bare_metal: Option<String>,
    /// Block describing the minimum and maximum baseline EBS bandwidth, in Mbps. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baselineEbsBandwidthMbps")]
    #[builder(default, setter(strip_option))]
    pub baseline_ebs_bandwidth_mbps: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsBaselineEbsBandwidthMbps>,
    /// Indicate whether burstable performance instance types should be included, excluded, or required. Default is excluded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "burstablePerformance")]
    #[builder(default, setter(strip_option))]
    pub burstable_performance: Option<String>,
    /// List of CPU manufacturer names. Default is any manufacturer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuManufacturers")]
    #[builder(default, setter(strip_option))]
    pub cpu_manufacturers: Option<Vec<String>>,
    /// List of instance types to exclude. You can use strings with one or more wild cards, represented by an asterisk (*), to exclude an instance type, size, or generation. The following are examples: m5.8xlarge, c5*.*, m5a.*, r*, *3*. For example, if you specify c5*, you are excluding the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, you are excluding all the M5a instance types, but not the M5n instance types. Maximum of 400 entries in the list; each entry is limited to 30 characters. Default is no excluded instance types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedInstanceTypes")]
    #[builder(default, setter(strip_option))]
    pub excluded_instance_types: Option<Vec<String>>,
    /// List of instance generation names. Default is any generation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceGenerations")]
    #[builder(default, setter(strip_option))]
    pub instance_generations: Option<Vec<String>>,
    /// Indicate whether instance types with local storage volumes are included, excluded, or required. Default is included.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localStorage")]
    #[builder(default, setter(strip_option))]
    pub local_storage: Option<String>,
    /// List of local storage type names. Default any storage type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localStorageTypes")]
    #[builder(default, setter(strip_option))]
    pub local_storage_types: Option<Vec<String>>,
    /// The price protection threshold for Spot Instances. This is the maximum you’ll pay for a Spot Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Conflicts with spot_max_price_percentage_over_lowest_price
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSpotPriceAsPercentageOfOptimalOnDemandPrice")]
    #[builder(default, setter(strip_option))]
    pub max_spot_price_as_percentage_of_optimal_on_demand_price: Option<f64>,
    /// Block describing the minimum and maximum amount of memory (GiB) per vCPU. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryGibPerVcpu")]
    #[builder(default, setter(strip_option))]
    pub memory_gib_per_vcpu: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsMemoryGibPerVcpu>,
    /// Block describing the minimum and maximum amount of memory (MiB). Default is no maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryMib")]
    #[builder(default, setter(strip_option))]
    pub memory_mib: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsMemoryMib>,
    /// Block describing the minimum and maximum amount of network bandwidth, in gigabits per second (Gbps). Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkBandwidthGbps")]
    #[builder(default, setter(strip_option))]
    pub network_bandwidth_gbps: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsNetworkBandwidthGbps>,
    /// Block describing the minimum and maximum number of network interfaces. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaceCount")]
    #[builder(default, setter(strip_option))]
    pub network_interface_count: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsNetworkInterfaceCount>,
    /// Price protection threshold for On-Demand Instances. This is the maximum you’ll pay for an On-Demand Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Default is 20.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onDemandMaxPricePercentageOverLowestPrice")]
    #[builder(default, setter(strip_option))]
    pub on_demand_max_price_percentage_over_lowest_price: Option<f64>,
    /// Indicate whether instance types must support On-Demand Instance Hibernation, either true or false. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireHibernateSupport")]
    #[builder(default, setter(strip_option))]
    pub require_hibernate_support: Option<bool>,
    /// Price protection threshold for Spot Instances. This is the maximum you’ll pay for a Spot Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Default is 100. Conflicts with max_spot_price_as_percentage_of_optimal_on_demand_price
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotMaxPricePercentageOverLowestPrice")]
    #[builder(default, setter(strip_option))]
    pub spot_max_price_percentage_over_lowest_price: Option<f64>,
    /// Block describing the minimum and maximum total local storage (GB). Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalLocalStorageGb")]
    #[builder(default, setter(strip_option))]
    pub total_local_storage_gb: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsTotalLocalStorageGb>,
    /// Block describing the minimum and maximum number of vCPUs. Default is no maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vcpuCount")]
    #[builder(default, setter(strip_option))]
    pub vcpu_count: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsVcpuCount>,
}

/// Block describing the minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips). Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsAcceleratorCount
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum total memory of the accelerators. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsAcceleratorTotalMemoryMib
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum baseline EBS bandwidth, in Mbps. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsBaselineEbsBandwidthMbps
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum amount of memory (GiB) per vCPU. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsMemoryGibPerVcpu
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum amount of memory (MiB). Default is no maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsMemoryMib
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum amount of network bandwidth, in gigabits per second (Gbps). Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsNetworkBandwidthGbps
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum number of network interfaces. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsNetworkInterfaceCount
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum total local storage (GB). Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsTotalLocalStorageGb
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum number of vCPUs. Default is no maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsVcpuCount
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Nested argument defines the Launch Template. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification {
    /// ID of the launch template. Conflicts with launch_template_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateId")]
    #[builder(default, setter(strip_option))]
    pub launch_template_id: Option<String>,
    /// Reference to a LaunchTemplate in ec2 to populate launchTemplateId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateIdRef")]
    #[builder(default, setter(strip_option))]
    pub launch_template_id_ref: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdRef>,
    /// Selector for a LaunchTemplate in ec2 to populate launchTemplateId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateIdSelector")]
    #[builder(default, setter(strip_option))]
    pub launch_template_id_selector: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdSelector>,
    /// Name of the launch template. Conflicts with launch_template_id.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateName")]
    #[builder(default, setter(strip_option))]
    pub launch_template_name: Option<String>,
    /// Template version. Can be version number, $Latest, or $Default. (Default: $Default).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

/// Reference to a LaunchTemplate in ec2 to populate launchTemplateId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a LaunchTemplate in ec2 to populate launchTemplateId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecificationLaunchTemplateIdSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Reference to a PlacementGroup in ec2 to populate placementGroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderPlacementGroupRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupInitProviderPlacementGroupRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderPlacementGroupRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupInitProviderPlacementGroupRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupInitProviderPlacementGroupRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderPlacementGroupRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderPlacementGroupRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a PlacementGroup in ec2 to populate placementGroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderPlacementGroupSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupInitProviderPlacementGroupSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderPlacementGroupSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupInitProviderPlacementGroupSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupInitProviderPlacementGroupSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderPlacementGroupSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderPlacementGroupSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate serviceLinkedRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderServiceLinkedRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupInitProviderServiceLinkedRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderServiceLinkedRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupInitProviderServiceLinkedRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupInitProviderServiceLinkedRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderServiceLinkedRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderServiceLinkedRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate serviceLinkedRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderServiceLinkedRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupInitProviderServiceLinkedRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderServiceLinkedRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<AutoscalingGroupInitProviderServiceLinkedRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupInitProviderServiceLinkedRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderServiceLinkedRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderServiceLinkedRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderTag {
    /// Key
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// Enables propagation of the tag to
    /// Amazon EC2 instances launched via this ASG
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "propagateAtLaunch"
    )]
    #[builder(default, setter(strip_option))]
    pub propagate_at_launch: Option<bool>,
    /// Value
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderTrafficSource {
    /// Identifies the traffic source. For Application Load Balancers, Gateway Load Balancers, Network Load Balancers, and VPC Lattice, this will be the Amazon Resource Name (ARN) for a target group in this account and Region. For Classic Load Balancers, this will be the name of the Classic Load Balancer in this account and Region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub identifier: Option<String>,
    /// Provides additional context for the value of Identifier.
    /// The following lists the valid values:
    /// elb if identifier is the name of a Classic Load Balancer.
    /// elbv2 if identifier is the ARN of an Application Load Balancer, Gateway Load Balancer, or Network Load Balancer target group.
    /// vpc-lattice if identifier is the ARN of a VPC Lattice target group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderVpcZoneIdentifierRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupInitProviderVpcZoneIdentifierRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderVpcZoneIdentifierRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupInitProviderVpcZoneIdentifierRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupInitProviderVpcZoneIdentifierRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderVpcZoneIdentifierRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderVpcZoneIdentifierRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate vpcZoneIdentifier.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderVpcZoneIdentifierSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupInitProviderVpcZoneIdentifierSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderVpcZoneIdentifierSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupInitProviderVpcZoneIdentifierSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupInitProviderVpcZoneIdentifierSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderVpcZoneIdentifierSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupInitProviderVpcZoneIdentifierSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// If this block is configured, add a Warm Pool
/// to the specified Auto Scaling group. Defined below
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderWarmPool {
    /// Whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceReusePolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_reuse_policy: Option<AutoscalingGroupInitProviderWarmPoolInstanceReusePolicy>,
    /// Total maximum number of instances that are allowed to be in the warm pool or in any state except Terminated for the Auto Scaling group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxGroupPreparedCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub max_group_prepared_capacity: Option<f64>,
    /// Minimum size of the Auto Scaling Group.
    /// (See also Waiting for Capacity below.)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minSize")]
    #[builder(default, setter(strip_option))]
    pub min_size: Option<f64>,
    /// Sets the instance state to transition to after the lifecycle hooks finish. Valid values are: Stopped (default), Running or Hibernated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "poolState")]
    #[builder(default, setter(strip_option))]
    pub pool_state: Option<String>,
}

/// Whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupInitProviderWarmPoolInstanceReusePolicy {
    /// Whether instances in the Auto Scaling group can be returned to the warm pool on scale in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "reuseOnScaleIn"
    )]
    #[builder(default, setter(strip_option))]
    pub reuse_on_scale_in: Option<bool>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<AutoscalingGroupPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<AutoscalingGroupPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<AutoscalingGroupPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<AutoscalingGroupPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<AutoscalingGroupPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalingGroupPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// AutoscalingGroupStatus defines the observed state of AutoscalingGroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<AutoscalingGroupStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProvider {
    /// ARN for this Auto Scaling Group
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// The instance capacity distribution across Availability Zones. See Availability Zone Distribution below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZoneDistribution"
    )]
    #[builder(default, setter(strip_option))]
    pub availability_zone_distribution:
        Option<AutoscalingGroupStatusAtProviderAvailabilityZoneDistribution>,
    /// A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the vpc_zone_identifier attribute, or for attaching a network interface when an existing network interface ID is specified in a launch template. Conflicts with vpc_zone_identifier.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "availabilityZones"
    )]
    #[builder(default, setter(strip_option))]
    pub availability_zones: Option<Vec<String>>,
    /// Whether capacity rebalance is enabled. Otherwise, capacity rebalance is disabled.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityRebalance"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_rebalance: Option<bool>,
    /// Reserved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub context: Option<String>,
    /// Amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultCooldown"
    )]
    #[builder(default, setter(strip_option))]
    pub default_cooldown: Option<f64>,
    /// Amount of time, in seconds, until a newly launched instance can contribute to the Amazon CloudWatch metrics. This delay lets an instance finish initializing before Amazon EC2 Auto Scaling aggregates instance metrics, resulting in more reliable usage data. Set this value equal to the amount of time that it takes for resource consumption to become stable after an instance reaches the InService state. (See Set the default instance warmup for an Auto Scaling group)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultInstanceWarmup"
    )]
    #[builder(default, setter(strip_option))]
    pub default_instance_warmup: Option<f64>,
    /// Number of Amazon EC2 instances that
    /// should be running in the group. (See also Waiting for
    /// Capacity below.)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "desiredCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub desired_capacity: Option<f64>,
    /// The unit of measurement for the value specified for desired_capacity. Supported for attribute-based instance type selection only. Valid values: "units", "vcpu", "memory-mib".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "desiredCapacityType"
    )]
    #[builder(default, setter(strip_option))]
    pub desired_capacity_type: Option<String>,
    /// List of metrics to collect. The allowed values are defined by the underlying AWS API.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enabledMetrics"
    )]
    #[builder(default, setter(strip_option))]
    pub enabled_metrics: Option<Vec<String>>,
    /// Allows deleting the Auto Scaling Group without waiting
    /// for all instances in the pool to terminate. You can force an Auto Scaling Group to delete
    /// even if it's in the process of scaling a resource. This bypasses that
    /// behavior and potentially leaves resources dangling.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forceDelete"
    )]
    #[builder(default, setter(strip_option))]
    pub force_delete: Option<bool>,
    /// Allows deleting the Auto Scaling Group without waiting for all instances in the warm pool to terminate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "forceDeleteWarmPool"
    )]
    #[builder(default, setter(strip_option))]
    pub force_delete_warm_pool: Option<bool>,
    /// Time (in seconds) after instance comes into service before checking health.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "healthCheckGracePeriod"
    )]
    #[builder(default, setter(strip_option))]
    pub health_check_grace_period: Option<f64>,
    /// "EC2" or "ELB". Controls how health checking is done.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "healthCheckType"
    )]
    #[builder(default, setter(strip_option))]
    pub health_check_type: Option<String>,
    /// Auto Scaling Group id.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Whether to ignore failed Auto Scaling scaling activities while waiting for capacity. The default is false -- failed scaling activities cause errors to be returned.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ignoreFailedScalingActivities"
    )]
    #[builder(default, setter(strip_option))]
    pub ignore_failed_scaling_activities: Option<bool>,
    /// One or more
    /// Lifecycle Hooks
    /// to attach to the Auto Scaling Group before instances are launched. The
    /// syntax is exactly the same as the separate
    /// aws_autoscaling_lifecycle_hook
    /// resource, without the autoscaling_group_name attribute. Please note that this will only work when creating
    /// a new Auto Scaling Group. For all other use-cases, please use aws_autoscaling_lifecycle_hook resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialLifecycleHook"
    )]
    #[builder(default, setter(strip_option))]
    pub initial_lifecycle_hook: Option<Vec<AutoscalingGroupStatusAtProviderInitialLifecycleHook>>,
    /// If this block is configured, add a instance maintenance policy to the specified Auto Scaling group. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceMaintenancePolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_maintenance_policy:
        Option<AutoscalingGroupStatusAtProviderInstanceMaintenancePolicy>,
    /// If this block is configured, start an
    /// Instance Refresh
    /// when this Auto Scaling Group is updated. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRefresh"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_refresh: Option<AutoscalingGroupStatusAtProviderInstanceRefresh>,
    /// Name of the launch configuration to use.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_configuration: Option<String>,
    /// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template: Option<AutoscalingGroupStatusAtProviderLaunchTemplate>,
    /// List of elastic load balancer names to add to the autoscaling
    /// group names. Only valid for classic load balancers. For ALBs, use target_group_arns instead. To remove all load balancer attachments an empty list should be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "loadBalancers"
    )]
    #[builder(default, setter(strip_option))]
    pub load_balancers: Option<Vec<String>>,
    /// Maximum amount of time, in seconds, that an instance can be in service, values must be either equal to 0 or between 86400 and 31536000 seconds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxInstanceLifetime"
    )]
    #[builder(default, setter(strip_option))]
    pub max_instance_lifetime: Option<f64>,
    /// Maximum size of the Auto Scaling Group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSize")]
    #[builder(default, setter(strip_option))]
    pub max_size: Option<f64>,
    /// Granularity to associate with the metrics to collect. The only valid value is 1Minute. Default is 1Minute.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "metricsGranularity"
    )]
    #[builder(default, setter(strip_option))]
    pub metrics_granularity: Option<String>,
    /// Updates will not wait on ELB instance number changes.
    /// (See also Waiting for Capacity below.)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minElbCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub min_elb_capacity: Option<f64>,
    /// Minimum size of the Auto Scaling Group.
    /// (See also Waiting for Capacity below.)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minSize")]
    #[builder(default, setter(strip_option))]
    pub min_size: Option<f64>,
    /// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mixedInstancesPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub mixed_instances_policy: Option<AutoscalingGroupStatusAtProviderMixedInstancesPolicy>,
    /// Name of the placement group into which you'll launch your instances, if any.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_group: Option<String>,
    /// Predicted capacity of the group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "predictedCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub predicted_capacity: Option<f64>,
    /// Whether newly launched instances
    /// are automatically protected from termination by Amazon EC2 Auto Scaling when
    /// scaling in. For more information about preventing instances from terminating
    /// on scale in, see Using instance scale-in protection
    /// in the Amazon EC2 Auto Scaling User Guide.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "protectFromScaleIn"
    )]
    #[builder(default, setter(strip_option))]
    pub protect_from_scale_in: Option<bool>,
    /// ARN of the service-linked role that the ASG will use to call other AWS services
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceLinkedRoleArn"
    )]
    #[builder(default, setter(strip_option))]
    pub service_linked_role_arn: Option<String>,
    /// List of processes to suspend for the Auto Scaling Group. The allowed values are Launch, Terminate, HealthCheck, ReplaceUnhealthy, AZRebalance, AlarmNotification, ScheduledActions, AddToLoadBalancer, InstanceRefresh.
    /// Note that if you suspend either the Launch or Terminate process types, it can prevent your Auto Scaling Group from functioning properly.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "suspendedProcesses"
    )]
    #[builder(default, setter(strip_option))]
    pub suspended_processes: Option<Vec<String>>,
    /// Configuration block(s) containing resource tags. See Tag below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tag: Option<Vec<AutoscalingGroupStatusAtProviderTag>>,
    /// Set of aws_alb_target_group ARNs, for use with Application or Network Load Balancing. To remove all target group attachments an empty list should be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "targetGroupArns"
    )]
    #[builder(default, setter(strip_option))]
    pub target_group_arns: Option<Vec<String>>,
    /// List of policies to decide how the instances in the Auto Scaling Group should be terminated. The allowed values are OldestInstance, NewestInstance, OldestLaunchConfiguration, ClosestToNextInstanceHour, OldestLaunchTemplate, AllocationStrategy, Default. Additionally, the ARN of a Lambda function can be specified for custom termination policies.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminationPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub termination_policies: Option<Vec<String>>,
    /// Attaches one or more traffic sources to the specified Auto Scaling group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "trafficSource"
    )]
    #[builder(default, setter(strip_option))]
    pub traffic_source: Option<Vec<AutoscalingGroupStatusAtProviderTrafficSource>>,
    /// List of subnet IDs to launch resources in. Subnets automatically determine which availability zones the group will reside. Conflicts with availability_zones.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "vpcZoneIdentifier"
    )]
    #[builder(default, setter(strip_option))]
    pub vpc_zone_identifier: Option<Vec<String>>,
    /// (See also Waiting
    /// for Capacity below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "waitForCapacityTimeout"
    )]
    #[builder(default, setter(strip_option))]
    pub wait_for_capacity_timeout: Option<String>,
    /// (Takes
    /// precedence over min_elb_capacity behavior.)
    /// (See also Waiting for Capacity below.)
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "waitForElbCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub wait_for_elb_capacity: Option<f64>,
    /// If this block is configured, add a Warm Pool
    /// to the specified Auto Scaling group. Defined below
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "warmPool")]
    #[builder(default, setter(strip_option))]
    pub warm_pool: Option<AutoscalingGroupStatusAtProviderWarmPool>,
    /// Current size of the warm pool.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "warmPoolSize"
    )]
    #[builder(default, setter(strip_option))]
    pub warm_pool_size: Option<f64>,
}

/// The instance capacity distribution across Availability Zones. See Availability Zone Distribution below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderAvailabilityZoneDistribution {
    /// The strategy to use for distributing capacity across the Availability Zones. Valid values are balanced-only and balanced-best-effort. Default is balanced-best-effort.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "capacityDistributionStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub capacity_distribution_strategy: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderInitialLifecycleHook {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultResult"
    )]
    #[builder(default, setter(strip_option))]
    pub default_result: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "heartbeatTimeout"
    )]
    #[builder(default, setter(strip_option))]
    pub heartbeat_timeout: Option<f64>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lifecycleTransition"
    )]
    #[builder(default, setter(strip_option))]
    pub lifecycle_transition: Option<String>,
    /// Name of the Auto Scaling Group. Conflicts with name_prefix.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notificationMetadata"
    )]
    #[builder(default, setter(strip_option))]
    pub notification_metadata: Option<String>,
    /// ARN for this Auto Scaling Group
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "notificationTargetArn"
    )]
    #[builder(default, setter(strip_option))]
    pub notification_target_arn: Option<String>,
    /// ARN for this Auto Scaling Group
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    #[builder(default, setter(strip_option))]
    pub role_arn: Option<String>,
}

/// If this block is configured, add a instance maintenance policy to the specified Auto Scaling group. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderInstanceMaintenancePolicy {
    /// Amount of capacity in the Auto Scaling group that can be in service and healthy, or pending, to support your workload when an instance refresh is in place, as a percentage of the desired capacity of the Auto Scaling group. Values must be between 100 and 200, defaults to 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxHealthyPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub max_healthy_percentage: Option<f64>,
    /// Amount of capacity in the Auto Scaling group that must remain healthy during an instance refresh to allow the operation to continue, as a percentage of the desired capacity of the Auto Scaling group. Defaults to 90.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minHealthyPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub min_healthy_percentage: Option<f64>,
}

/// If this block is configured, start an
/// Instance Refresh
/// when this Auto Scaling Group is updated. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderInstanceRefresh {
    /// Override default parameters for Instance Refresh.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub preferences: Option<AutoscalingGroupStatusAtProviderInstanceRefreshPreferences>,
    /// Strategy to use for instance refresh. The only allowed value is Rolling. See StartInstanceRefresh Action for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub strategy: Option<String>,
    /// Set of additional property names that will trigger an Instance Refresh. A refresh will always be triggered by a change in any of launch_configuration, launch_template, or mixed_instances_policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub triggers: Option<Vec<String>>,
}

/// Override default parameters for Instance Refresh.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderInstanceRefreshPreferences {
    /// Alarm Specification for Instance Refresh.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "alarmSpecification"
    )]
    #[builder(default, setter(strip_option))]
    pub alarm_specification:
        Option<AutoscalingGroupStatusAtProviderInstanceRefreshPreferencesAlarmSpecification>,
    /// Automatically rollback if instance refresh fails. Defaults to false. This option may only be set to true when specifying a launch_template or mixed_instances_policy.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoRollback"
    )]
    #[builder(default, setter(strip_option))]
    pub auto_rollback: Option<bool>,
    /// Number of seconds to wait after a checkpoint. Defaults to 3600.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "checkpointDelay"
    )]
    #[builder(default, setter(strip_option))]
    pub checkpoint_delay: Option<String>,
    /// List of percentages for each checkpoint. Values must be unique and in ascending order. To replace all instances, the final number must be 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "checkpointPercentages"
    )]
    #[builder(default, setter(strip_option))]
    pub checkpoint_percentages: Option<Vec<f64>>,
    /// Number of seconds until a newly launched instance is configured and ready to use. Default behavior is to use the Auto Scaling Group's health check grace period.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceWarmup"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_warmup: Option<String>,
    /// Amount of capacity in the Auto Scaling group that can be in service and healthy, or pending, to support your workload when an instance refresh is in place, as a percentage of the desired capacity of the Auto Scaling group. Values must be between 100 and 200, defaults to 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxHealthyPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub max_healthy_percentage: Option<f64>,
    /// Amount of capacity in the Auto Scaling group that must remain healthy during an instance refresh to allow the operation to continue, as a percentage of the desired capacity of the Auto Scaling group. Defaults to 90.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "minHealthyPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub min_healthy_percentage: Option<f64>,
    /// Behavior when encountering instances protected from scale in are found. Available behaviors are Refresh, Ignore, and Wait. Default is Ignore.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "scaleInProtectedInstances"
    )]
    #[builder(default, setter(strip_option))]
    pub scale_in_protected_instances: Option<String>,
    /// Replace instances that already have your desired configuration. Defaults to false.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipMatching"
    )]
    #[builder(default, setter(strip_option))]
    pub skip_matching: Option<bool>,
    /// Behavior when encountering instances in the Standby state in are found. Available behaviors are Terminate, Ignore, and Wait. Default is Ignore.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "standbyInstances"
    )]
    #[builder(default, setter(strip_option))]
    pub standby_instances: Option<String>,
}

/// Alarm Specification for Instance Refresh.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderInstanceRefreshPreferencesAlarmSpecification {
    /// List of Cloudwatch alarms. If any of these alarms goes into ALARM state, Instance Refresh is failed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub alarms: Option<Vec<String>>,
}

/// Nested argument with Launch template specification to use to launch instances. See Launch Template below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderLaunchTemplate {
    /// ID of the launch template. Conflicts with name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Name of the launch template. Conflicts with id.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Template version. Can be version number, $Latest, or $Default. (Default: $Default).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

/// Configuration block containing settings to define launch targets for Auto Scaling groups. See Mixed Instances Policy below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderMixedInstancesPolicy {
    /// Nested argument containing settings on how to mix on-demand and Spot instances in the Auto Scaling group. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instancesDistribution"
    )]
    #[builder(default, setter(strip_option))]
    pub instances_distribution:
        Option<AutoscalingGroupStatusAtProviderMixedInstancesPolicyInstancesDistribution>,
    /// Nested argument containing launch template settings along with the overrides to specify multiple instance types and weights. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template: Option<AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplate>,
}

/// Nested argument containing settings on how to mix on-demand and Spot instances in the Auto Scaling group. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderMixedInstancesPolicyInstancesDistribution {
    /// Strategy to use when launching on-demand instances. Valid values: prioritized, lowest-price. Default: prioritized.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "onDemandAllocationStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub on_demand_allocation_strategy: Option<String>,
    /// Absolute minimum amount of desired capacity that must be fulfilled by on-demand instances. Default: 0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "onDemandBaseCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub on_demand_base_capacity: Option<f64>,
    /// Percentage split between on-demand and Spot instances above the base on-demand capacity. Default: 100.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "onDemandPercentageAboveBaseCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub on_demand_percentage_above_base_capacity: Option<f64>,
    /// How to allocate capacity across the Spot pools. Valid values: lowest-price, capacity-optimized, capacity-optimized-prioritized, and price-capacity-optimized. Default: lowest-price.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotAllocationStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_allocation_strategy: Option<String>,
    /// Number of Spot pools per availability zone to allocate capacity. EC2 Auto Scaling selects the cheapest Spot pools and evenly allocates Spot capacity across the number of Spot pools that you specify. Only available with spot_allocation_strategy set to lowest-price. Otherwise it must be set to 0, if it has been defined before. Default: 2.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotInstancePools"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_instance_pools: Option<f64>,
    /// Maximum price per unit hour that the user is willing to pay for the Spot instances. Default: an empty string which means the on-demand price.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotMaxPrice"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_max_price: Option<String>,
}

/// Nested argument containing launch template settings along with the overrides to specify multiple instance types and weights. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplate {
    /// Nested argument defines the Launch Template. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateSpecification")]
    #[builder(default, setter(strip_option))]
    pub launch_template_specification: Option<AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification>,
    /// List of nested arguments provides the ability to specify multiple instance types. This will override the same parameter in the launch template. For on-demand instances, Auto Scaling considers the order of preference of instance types to launch based on the order specified in the overrides list. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<Vec<AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverride>>,
}

/// Nested argument defines the Launch Template. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateLaunchTemplateSpecification
{
    /// ID of the launch template. Conflicts with launch_template_name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateId"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_id: Option<String>,
    /// Name of the launch template. Conflicts with launch_template_id.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateName"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_name: Option<String>,
    /// Template version. Can be version number, $Latest, or $Default. (Default: $Default).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverride {
    /// Override the instance type in the Launch Template with instance types that satisfy the requirements.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceRequirements")]
    #[builder(default, setter(strip_option))]
    pub instance_requirements: Option<AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirements>,
    /// Override the instance type in the Launch Template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<String>,
    /// Nested argument defines the Launch Template. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "launchTemplateSpecification")]
    #[builder(default, setter(strip_option))]
    pub launch_template_specification: Option<AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification>,
    /// Number of capacity units, which gives the instance type a proportional weight to other instance types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weightedCapacity")]
    #[builder(default, setter(strip_option))]
    pub weighted_capacity: Option<String>,
}

/// Override the instance type in the Launch Template with instance types that satisfy the requirements.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirements {
    /// Block describing the minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips). Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorCount")]
    #[builder(default, setter(strip_option))]
    pub accelerator_count: Option<AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsAcceleratorCount>,
    /// List of accelerator manufacturer names. Default is any manufacturer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorManufacturers")]
    #[builder(default, setter(strip_option))]
    pub accelerator_manufacturers: Option<Vec<String>>,
    /// List of accelerator names. Default is any acclerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorNames")]
    #[builder(default, setter(strip_option))]
    pub accelerator_names: Option<Vec<String>>,
    /// Block describing the minimum and maximum total memory of the accelerators. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorTotalMemoryMib")]
    #[builder(default, setter(strip_option))]
    pub accelerator_total_memory_mib: Option<AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsAcceleratorTotalMemoryMib>,
    /// List of accelerator types. Default is any accelerator type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorTypes")]
    #[builder(default, setter(strip_option))]
    pub accelerator_types: Option<Vec<String>>,
    /// List of instance types to apply your specified attributes against. All other instance types are ignored, even if they match your specified attributes. You can use strings with one or more wild cards, represented by an asterisk (*), to allow an instance type, size, or generation. The following are examples: m5.8xlarge, c5*.*, m5a.*, r*, *3*. For example, if you specify c5*, you are allowing the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, you are allowing all the M5a instance types, but not the M5n instance types. Maximum of 400 entries in the list; each entry is limited to 30 characters. Default is all instance types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedInstanceTypes")]
    #[builder(default, setter(strip_option))]
    pub allowed_instance_types: Option<Vec<String>>,
    /// Indicate whether bare metal instace types should be included, excluded, or required. Default is excluded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bareMetal")]
    #[builder(default, setter(strip_option))]
    pub bare_metal: Option<String>,
    /// Block describing the minimum and maximum baseline EBS bandwidth, in Mbps. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baselineEbsBandwidthMbps")]
    #[builder(default, setter(strip_option))]
    pub baseline_ebs_bandwidth_mbps: Option<AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsBaselineEbsBandwidthMbps>,
    /// Indicate whether burstable performance instance types should be included, excluded, or required. Default is excluded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "burstablePerformance")]
    #[builder(default, setter(strip_option))]
    pub burstable_performance: Option<String>,
    /// List of CPU manufacturer names. Default is any manufacturer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuManufacturers")]
    #[builder(default, setter(strip_option))]
    pub cpu_manufacturers: Option<Vec<String>>,
    /// List of instance types to exclude. You can use strings with one or more wild cards, represented by an asterisk (*), to exclude an instance type, size, or generation. The following are examples: m5.8xlarge, c5*.*, m5a.*, r*, *3*. For example, if you specify c5*, you are excluding the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, you are excluding all the M5a instance types, but not the M5n instance types. Maximum of 400 entries in the list; each entry is limited to 30 characters. Default is no excluded instance types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedInstanceTypes")]
    #[builder(default, setter(strip_option))]
    pub excluded_instance_types: Option<Vec<String>>,
    /// List of instance generation names. Default is any generation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceGenerations")]
    #[builder(default, setter(strip_option))]
    pub instance_generations: Option<Vec<String>>,
    /// Indicate whether instance types with local storage volumes are included, excluded, or required. Default is included.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localStorage")]
    #[builder(default, setter(strip_option))]
    pub local_storage: Option<String>,
    /// List of local storage type names. Default any storage type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localStorageTypes")]
    #[builder(default, setter(strip_option))]
    pub local_storage_types: Option<Vec<String>>,
    /// The price protection threshold for Spot Instances. This is the maximum you’ll pay for a Spot Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Conflicts with spot_max_price_percentage_over_lowest_price
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxSpotPriceAsPercentageOfOptimalOnDemandPrice")]
    #[builder(default, setter(strip_option))]
    pub max_spot_price_as_percentage_of_optimal_on_demand_price: Option<f64>,
    /// Block describing the minimum and maximum amount of memory (GiB) per vCPU. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryGibPerVcpu")]
    #[builder(default, setter(strip_option))]
    pub memory_gib_per_vcpu: Option<AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsMemoryGibPerVcpu>,
    /// Block describing the minimum and maximum amount of memory (MiB). Default is no maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryMib")]
    #[builder(default, setter(strip_option))]
    pub memory_mib: Option<AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsMemoryMib>,
    /// Block describing the minimum and maximum amount of network bandwidth, in gigabits per second (Gbps). Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkBandwidthGbps")]
    #[builder(default, setter(strip_option))]
    pub network_bandwidth_gbps: Option<AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsNetworkBandwidthGbps>,
    /// Block describing the minimum and maximum number of network interfaces. Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaceCount")]
    #[builder(default, setter(strip_option))]
    pub network_interface_count: Option<AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsNetworkInterfaceCount>,
    /// Price protection threshold for On-Demand Instances. This is the maximum you’ll pay for an On-Demand Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Default is 20.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onDemandMaxPricePercentageOverLowestPrice")]
    #[builder(default, setter(strip_option))]
    pub on_demand_max_price_percentage_over_lowest_price: Option<f64>,
    /// Indicate whether instance types must support On-Demand Instance Hibernation, either true or false. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireHibernateSupport")]
    #[builder(default, setter(strip_option))]
    pub require_hibernate_support: Option<bool>,
    /// Price protection threshold for Spot Instances. This is the maximum you’ll pay for a Spot Instance, expressed as a percentage higher than the cheapest M, C, or R instance type with your specified attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price is higher than your threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. Default is 100. Conflicts with max_spot_price_as_percentage_of_optimal_on_demand_price
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spotMaxPricePercentageOverLowestPrice")]
    #[builder(default, setter(strip_option))]
    pub spot_max_price_percentage_over_lowest_price: Option<f64>,
    /// Block describing the minimum and maximum total local storage (GB). Default is no minimum or maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalLocalStorageGb")]
    #[builder(default, setter(strip_option))]
    pub total_local_storage_gb: Option<AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsTotalLocalStorageGb>,
    /// Block describing the minimum and maximum number of vCPUs. Default is no maximum.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vcpuCount")]
    #[builder(default, setter(strip_option))]
    pub vcpu_count: Option<AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsVcpuCount>,
}

/// Block describing the minimum and maximum number of accelerators (GPUs, FPGAs, or AWS Inferentia chips). Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsAcceleratorCount
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum total memory of the accelerators. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsAcceleratorTotalMemoryMib
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum baseline EBS bandwidth, in Mbps. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsBaselineEbsBandwidthMbps
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum amount of memory (GiB) per vCPU. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsMemoryGibPerVcpu
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum amount of memory (MiB). Default is no maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsMemoryMib
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum amount of network bandwidth, in gigabits per second (Gbps). Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsNetworkBandwidthGbps
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum number of network interfaces. Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsNetworkInterfaceCount
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum total local storage (GB). Default is no minimum or maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsTotalLocalStorageGb
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Block describing the minimum and maximum number of vCPUs. Default is no maximum.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideInstanceRequirementsVcpuCount
{
    /// Maximum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub max: Option<f64>,
    /// Minimum.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub min: Option<f64>,
}

/// Nested argument defines the Launch Template. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderMixedInstancesPolicyLaunchTemplateOverrideLaunchTemplateSpecification
{
    /// ID of the launch template. Conflicts with launch_template_name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateId"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_id: Option<String>,
    /// Name of the launch template. Conflicts with launch_template_id.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateName"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_name: Option<String>,
    /// Template version. Can be version number, $Latest, or $Default. (Default: $Default).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderTag {
    /// Key
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub key: Option<String>,
    /// Enables propagation of the tag to
    /// Amazon EC2 instances launched via this ASG
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "propagateAtLaunch"
    )]
    #[builder(default, setter(strip_option))]
    pub propagate_at_launch: Option<bool>,
    /// Value
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderTrafficSource {
    /// Identifies the traffic source. For Application Load Balancers, Gateway Load Balancers, Network Load Balancers, and VPC Lattice, this will be the Amazon Resource Name (ARN) for a target group in this account and Region. For Classic Load Balancers, this will be the name of the Classic Load Balancer in this account and Region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub identifier: Option<String>,
    /// Provides additional context for the value of Identifier.
    /// The following lists the valid values:
    /// elb if identifier is the name of a Classic Load Balancer.
    /// elbv2 if identifier is the ARN of an Application Load Balancer, Gateway Load Balancer, or Network Load Balancer target group.
    /// vpc-lattice if identifier is the ARN of a VPC Lattice target group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// If this block is configured, add a Warm Pool
/// to the specified Auto Scaling group. Defined below
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderWarmPool {
    /// Whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceReusePolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_reuse_policy: Option<AutoscalingGroupStatusAtProviderWarmPoolInstanceReusePolicy>,
    /// Total maximum number of instances that are allowed to be in the warm pool or in any state except Terminated for the Auto Scaling group.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maxGroupPreparedCapacity"
    )]
    #[builder(default, setter(strip_option))]
    pub max_group_prepared_capacity: Option<f64>,
    /// Minimum size of the Auto Scaling Group.
    /// (See also Waiting for Capacity below.)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minSize")]
    #[builder(default, setter(strip_option))]
    pub min_size: Option<f64>,
    /// Sets the instance state to transition to after the lifecycle hooks finish. Valid values are: Stopped (default), Running or Hibernated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "poolState")]
    #[builder(default, setter(strip_option))]
    pub pool_state: Option<String>,
}

/// Whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct AutoscalingGroupStatusAtProviderWarmPoolInstanceReusePolicy {
    /// Whether instances in the Auto Scaling group can be returned to the warm pool on scale in.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "reuseOnScaleIn"
    )]
    #[builder(default, setter(strip_option))]
    pub reuse_on_scale_in: Option<bool>,
}

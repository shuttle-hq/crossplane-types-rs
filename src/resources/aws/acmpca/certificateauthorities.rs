// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// CertificateAuthoritySpec defines the desired state of CertificateAuthority
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "acmpca.aws.upbound.io",
    version = "v1beta2",
    kind = "CertificateAuthority",
    plural = "certificateauthorities"
)]
#[kube(status = "CertificateAuthorityStatus")]
pub struct CertificateAuthoritySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<CertificateAuthorityDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: CertificateAuthorityForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<CertificateAuthorityInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<CertificateAuthorityProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<CertificateAuthorityPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<CertificateAuthorityWriteConnectionSecretToRef>,
}

/// CertificateAuthoritySpec defines the desired state of CertificateAuthority
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityForProvider {
    /// Nested argument containing algorithms and certificate subject information. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthorityConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub certificate_authority_configuration:
        Option<CertificateAuthorityForProviderCertificateAuthorityConfiguration>,
    /// Whether the certificate authority is enabled or disabled. Defaults to true. Can only be disabled if the CA is in an ACTIVE state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// Cryptographic key management compliance standard used for handling CA keys. Defaults to FIPS_140_2_LEVEL_3_OR_HIGHER. Valid values: FIPS_140_2_LEVEL_3_OR_HIGHER and FIPS_140_2_LEVEL_2_OR_HIGHER. Supported standard for each region can be found in the Storage and security compliance of AWS Private CA private keys Documentation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyStorageSecurityStandard"
    )]
    #[builder(default, setter(strip_option))]
    pub key_storage_security_standard: Option<String>,
    /// Number of days to make a CA restorable after it has been deleted, must be between 7 to 30 days, with default to 30 days.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permanentDeletionTimeInDays"
    )]
    #[builder(default, setter(strip_option))]
    pub permanent_deletion_time_in_days: Option<f64>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Nested argument containing revocation configuration. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "revocationConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub revocation_configuration: Option<CertificateAuthorityForProviderRevocationConfiguration>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Type of the certificate authority. Defaults to SUBORDINATE. Valid values: ROOT and SUBORDINATE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days. Defaults to GENERAL_PURPOSE. Valid values: GENERAL_PURPOSE and SHORT_LIVED_CERTIFICATE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usageMode")]
    #[builder(default, setter(strip_option))]
    pub usage_mode: Option<String>,
}

/// Nested argument containing algorithms and certificate subject information. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityForProviderCertificateAuthorityConfiguration {
    /// Type of the public key algorithm and size, in bits, of the key pair that your key pair creates when it issues a certificate. Valid values can be found in the ACM PCA Documentation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyAlgorithm"
    )]
    #[builder(default, setter(strip_option))]
    pub key_algorithm: Option<String>,
    /// Name of the algorithm your private CA uses to sign certificate requests. Valid values can be found in the ACM PCA Documentation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingAlgorithm"
    )]
    #[builder(default, setter(strip_option))]
    pub signing_algorithm: Option<String>,
    /// Nested argument that contains X.500 distinguished name information. At least one nested attribute must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub subject: Option<CertificateAuthorityForProviderCertificateAuthorityConfigurationSubject>,
}

/// Nested argument that contains X.500 distinguished name information. At least one nested attribute must be specified.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityForProviderCertificateAuthorityConfigurationSubject {
    /// Fully qualified domain name (FQDN) associated with the certificate subject. Must be less than or equal to 64 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "commonName"
    )]
    #[builder(default, setter(strip_option))]
    pub common_name: Option<String>,
    /// Two digit code that specifies the country in which the certificate subject located. Must be less than or equal to 2 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub country: Option<String>,
    /// Disambiguating information for the certificate subject. Must be less than or equal to 64 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "distinguishedNameQualifier"
    )]
    #[builder(default, setter(strip_option))]
    pub distinguished_name_qualifier: Option<String>,
    /// Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third. Must be less than or equal to 3 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "generationQualifier"
    )]
    #[builder(default, setter(strip_option))]
    pub generation_qualifier: Option<String>,
    /// First name. Must be less than or equal to 16 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "givenName")]
    #[builder(default, setter(strip_option))]
    pub given_name: Option<String>,
    /// Concatenation that typically contains the first letter of the given_name, the first letter of the middle name if one exists, and the first letter of the surname. Must be less than or equal to 5 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub initials: Option<String>,
    /// Locality (such as a city or town) in which the certificate subject is located. Must be less than or equal to 128 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub locality: Option<String>,
    /// Legal name of the organization with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub organization: Option<String>,
    /// Subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "organizationalUnit"
    )]
    #[builder(default, setter(strip_option))]
    pub organizational_unit: Option<String>,
    /// Typically a shortened version of a longer given_name. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza. Must be less than or equal to 128 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub pseudonym: Option<String>,
    /// State in which the subject of the certificate is located. Must be less than or equal to 128 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub state: Option<String>,
    /// Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first. Must be less than or equal to 40 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub surname: Option<String>,
    /// Title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject. Must be less than or equal to 64 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub title: Option<String>,
}

/// Nested argument containing revocation configuration. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityForProviderRevocationConfiguration {
    /// Nested argument containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "crlConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub crl_configuration:
        Option<CertificateAuthorityForProviderRevocationConfigurationCrlConfiguration>,
    /// Nested argument containing configuration of
    /// the custom OCSP responder endpoint. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocspConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub ocsp_configuration:
        Option<CertificateAuthorityForProviderRevocationConfigurationOcspConfiguration>,
}

/// Nested argument containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityForProviderRevocationConfigurationCrlConfiguration {
    /// Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don't want the name of your S3 bucket to be public. Must be less than or equal to 253 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customCname"
    )]
    #[builder(default, setter(strip_option))]
    pub custom_cname: Option<String>,
    /// Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// Number of days until a certificate expires. Must be between 1 and 5000.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "expirationInDays"
    )]
    #[builder(default, setter(strip_option))]
    pub expiration_in_days: Option<f64>,
    /// Name of the S3 bucket that contains the CRL. If you do not provide a value for the custom_cname argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You must specify a bucket policy that allows ACM PCA to write the CRL to your bucket. Must be between 3 and 255 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketName"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_name: Option<String>,
    /// Determines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. Defaults to PUBLIC_READ.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3ObjectAcl"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_object_acl: Option<String>,
}

/// Nested argument containing configuration of
/// the custom OCSP responder endpoint. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityForProviderRevocationConfigurationOcspConfiguration {
    /// Boolean value that specifies whether a custom OCSP responder is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// CNAME specifying a customized OCSP domain. Note: The value of the CNAME must not include a protocol prefix such as "http://" or "https://".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocspCustomCname"
    )]
    #[builder(default, setter(strip_option))]
    pub ocsp_custom_cname: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityInitProvider {
    /// Nested argument containing algorithms and certificate subject information. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthorityConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub certificate_authority_configuration:
        Option<CertificateAuthorityInitProviderCertificateAuthorityConfiguration>,
    /// Whether the certificate authority is enabled or disabled. Defaults to true. Can only be disabled if the CA is in an ACTIVE state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// Cryptographic key management compliance standard used for handling CA keys. Defaults to FIPS_140_2_LEVEL_3_OR_HIGHER. Valid values: FIPS_140_2_LEVEL_3_OR_HIGHER and FIPS_140_2_LEVEL_2_OR_HIGHER. Supported standard for each region can be found in the Storage and security compliance of AWS Private CA private keys Documentation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyStorageSecurityStandard"
    )]
    #[builder(default, setter(strip_option))]
    pub key_storage_security_standard: Option<String>,
    /// Number of days to make a CA restorable after it has been deleted, must be between 7 to 30 days, with default to 30 days.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permanentDeletionTimeInDays"
    )]
    #[builder(default, setter(strip_option))]
    pub permanent_deletion_time_in_days: Option<f64>,
    /// Nested argument containing revocation configuration. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "revocationConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub revocation_configuration: Option<CertificateAuthorityInitProviderRevocationConfiguration>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Type of the certificate authority. Defaults to SUBORDINATE. Valid values: ROOT and SUBORDINATE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days. Defaults to GENERAL_PURPOSE. Valid values: GENERAL_PURPOSE and SHORT_LIVED_CERTIFICATE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usageMode")]
    #[builder(default, setter(strip_option))]
    pub usage_mode: Option<String>,
}

/// Nested argument containing algorithms and certificate subject information. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityInitProviderCertificateAuthorityConfiguration {
    /// Type of the public key algorithm and size, in bits, of the key pair that your key pair creates when it issues a certificate. Valid values can be found in the ACM PCA Documentation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyAlgorithm"
    )]
    #[builder(default, setter(strip_option))]
    pub key_algorithm: Option<String>,
    /// Name of the algorithm your private CA uses to sign certificate requests. Valid values can be found in the ACM PCA Documentation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingAlgorithm"
    )]
    #[builder(default, setter(strip_option))]
    pub signing_algorithm: Option<String>,
    /// Nested argument that contains X.500 distinguished name information. At least one nested attribute must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub subject: Option<CertificateAuthorityInitProviderCertificateAuthorityConfigurationSubject>,
}

/// Nested argument that contains X.500 distinguished name information. At least one nested attribute must be specified.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityInitProviderCertificateAuthorityConfigurationSubject {
    /// Fully qualified domain name (FQDN) associated with the certificate subject. Must be less than or equal to 64 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "commonName"
    )]
    #[builder(default, setter(strip_option))]
    pub common_name: Option<String>,
    /// Two digit code that specifies the country in which the certificate subject located. Must be less than or equal to 2 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub country: Option<String>,
    /// Disambiguating information for the certificate subject. Must be less than or equal to 64 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "distinguishedNameQualifier"
    )]
    #[builder(default, setter(strip_option))]
    pub distinguished_name_qualifier: Option<String>,
    /// Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third. Must be less than or equal to 3 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "generationQualifier"
    )]
    #[builder(default, setter(strip_option))]
    pub generation_qualifier: Option<String>,
    /// First name. Must be less than or equal to 16 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "givenName")]
    #[builder(default, setter(strip_option))]
    pub given_name: Option<String>,
    /// Concatenation that typically contains the first letter of the given_name, the first letter of the middle name if one exists, and the first letter of the surname. Must be less than or equal to 5 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub initials: Option<String>,
    /// Locality (such as a city or town) in which the certificate subject is located. Must be less than or equal to 128 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub locality: Option<String>,
    /// Legal name of the organization with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub organization: Option<String>,
    /// Subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "organizationalUnit"
    )]
    #[builder(default, setter(strip_option))]
    pub organizational_unit: Option<String>,
    /// Typically a shortened version of a longer given_name. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza. Must be less than or equal to 128 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub pseudonym: Option<String>,
    /// State in which the subject of the certificate is located. Must be less than or equal to 128 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub state: Option<String>,
    /// Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first. Must be less than or equal to 40 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub surname: Option<String>,
    /// Title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject. Must be less than or equal to 64 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub title: Option<String>,
}

/// Nested argument containing revocation configuration. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityInitProviderRevocationConfiguration {
    /// Nested argument containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "crlConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub crl_configuration:
        Option<CertificateAuthorityInitProviderRevocationConfigurationCrlConfiguration>,
    /// Nested argument containing configuration of
    /// the custom OCSP responder endpoint. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocspConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub ocsp_configuration:
        Option<CertificateAuthorityInitProviderRevocationConfigurationOcspConfiguration>,
}

/// Nested argument containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityInitProviderRevocationConfigurationCrlConfiguration {
    /// Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don't want the name of your S3 bucket to be public. Must be less than or equal to 253 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customCname"
    )]
    #[builder(default, setter(strip_option))]
    pub custom_cname: Option<String>,
    /// Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// Number of days until a certificate expires. Must be between 1 and 5000.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "expirationInDays"
    )]
    #[builder(default, setter(strip_option))]
    pub expiration_in_days: Option<f64>,
    /// Name of the S3 bucket that contains the CRL. If you do not provide a value for the custom_cname argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You must specify a bucket policy that allows ACM PCA to write the CRL to your bucket. Must be between 3 and 255 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketName"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_name: Option<String>,
    /// Determines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. Defaults to PUBLIC_READ.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3ObjectAcl"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_object_acl: Option<String>,
}

/// Nested argument containing configuration of
/// the custom OCSP responder endpoint. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityInitProviderRevocationConfigurationOcspConfiguration {
    /// Boolean value that specifies whether a custom OCSP responder is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// CNAME specifying a customized OCSP domain. Note: The value of the CNAME must not include a protocol prefix such as "http://" or "https://".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocspCustomCname"
    )]
    #[builder(default, setter(strip_option))]
    pub ocsp_custom_cname: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<CertificateAuthorityProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<CertificateAuthorityProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<CertificateAuthorityProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<CertificateAuthorityPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<CertificateAuthorityPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<CertificateAuthorityPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<CertificateAuthorityPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<CertificateAuthorityPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateAuthorityPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// CertificateAuthorityStatus defines the observed state of CertificateAuthority.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<CertificateAuthorityStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityStatusAtProvider {
    /// ARN of the certificate authority.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Base64-encoded certificate authority (CA) certificate. Only available after the certificate authority certificate has been imported.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub certificate: Option<String>,
    /// Nested argument containing algorithms and certificate subject information. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateAuthorityConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub certificate_authority_configuration:
        Option<CertificateAuthorityStatusAtProviderCertificateAuthorityConfiguration>,
    /// Base64-encoded certificate chain that includes any intermediate certificates and chains up to root on-premises certificate that you used to sign your private CA certificate. The chain does not include your private CA certificate. Only available after the certificate authority certificate has been imported.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateChain"
    )]
    #[builder(default, setter(strip_option))]
    pub certificate_chain: Option<String>,
    /// The base64 PEM-encoded certificate signing request (CSR) for your private CA certificate.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "certificateSigningRequest"
    )]
    #[builder(default, setter(strip_option))]
    pub certificate_signing_request: Option<String>,
    /// Whether the certificate authority is enabled or disabled. Defaults to true. Can only be disabled if the CA is in an ACTIVE state.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// ARN of the certificate authority.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Cryptographic key management compliance standard used for handling CA keys. Defaults to FIPS_140_2_LEVEL_3_OR_HIGHER. Valid values: FIPS_140_2_LEVEL_3_OR_HIGHER and FIPS_140_2_LEVEL_2_OR_HIGHER. Supported standard for each region can be found in the Storage and security compliance of AWS Private CA private keys Documentation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyStorageSecurityStandard"
    )]
    #[builder(default, setter(strip_option))]
    pub key_storage_security_standard: Option<String>,
    /// Date and time after which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notAfter")]
    #[builder(default, setter(strip_option))]
    pub not_after: Option<String>,
    /// Date and time before which the certificate authority is not valid. Only available after the certificate authority certificate has been imported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notBefore")]
    #[builder(default, setter(strip_option))]
    pub not_before: Option<String>,
    /// Number of days to make a CA restorable after it has been deleted, must be between 7 to 30 days, with default to 30 days.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "permanentDeletionTimeInDays"
    )]
    #[builder(default, setter(strip_option))]
    pub permanent_deletion_time_in_days: Option<f64>,
    /// Nested argument containing revocation configuration. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "revocationConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub revocation_configuration:
        Option<CertificateAuthorityStatusAtProviderRevocationConfiguration>,
    /// Serial number of the certificate authority. Only available after the certificate authority certificate has been imported.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub serial: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// Type of the certificate authority. Defaults to SUBORDINATE. Valid values: ROOT and SUBORDINATE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days. Defaults to GENERAL_PURPOSE. Valid values: GENERAL_PURPOSE and SHORT_LIVED_CERTIFICATE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usageMode")]
    #[builder(default, setter(strip_option))]
    pub usage_mode: Option<String>,
}

/// Nested argument containing algorithms and certificate subject information. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityStatusAtProviderCertificateAuthorityConfiguration {
    /// Type of the public key algorithm and size, in bits, of the key pair that your key pair creates when it issues a certificate. Valid values can be found in the ACM PCA Documentation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyAlgorithm"
    )]
    #[builder(default, setter(strip_option))]
    pub key_algorithm: Option<String>,
    /// Name of the algorithm your private CA uses to sign certificate requests. Valid values can be found in the ACM PCA Documentation.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "signingAlgorithm"
    )]
    #[builder(default, setter(strip_option))]
    pub signing_algorithm: Option<String>,
    /// Nested argument that contains X.500 distinguished name information. At least one nested attribute must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub subject:
        Option<CertificateAuthorityStatusAtProviderCertificateAuthorityConfigurationSubject>,
}

/// Nested argument that contains X.500 distinguished name information. At least one nested attribute must be specified.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityStatusAtProviderCertificateAuthorityConfigurationSubject {
    /// Fully qualified domain name (FQDN) associated with the certificate subject. Must be less than or equal to 64 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "commonName"
    )]
    #[builder(default, setter(strip_option))]
    pub common_name: Option<String>,
    /// Two digit code that specifies the country in which the certificate subject located. Must be less than or equal to 2 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub country: Option<String>,
    /// Disambiguating information for the certificate subject. Must be less than or equal to 64 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "distinguishedNameQualifier"
    )]
    #[builder(default, setter(strip_option))]
    pub distinguished_name_qualifier: Option<String>,
    /// Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third. Must be less than or equal to 3 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "generationQualifier"
    )]
    #[builder(default, setter(strip_option))]
    pub generation_qualifier: Option<String>,
    /// First name. Must be less than or equal to 16 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "givenName")]
    #[builder(default, setter(strip_option))]
    pub given_name: Option<String>,
    /// Concatenation that typically contains the first letter of the given_name, the first letter of the middle name if one exists, and the first letter of the surname. Must be less than or equal to 5 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub initials: Option<String>,
    /// Locality (such as a city or town) in which the certificate subject is located. Must be less than or equal to 128 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub locality: Option<String>,
    /// Legal name of the organization with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub organization: Option<String>,
    /// Subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated. Must be less than or equal to 64 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "organizationalUnit"
    )]
    #[builder(default, setter(strip_option))]
    pub organizational_unit: Option<String>,
    /// Typically a shortened version of a longer given_name. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza. Must be less than or equal to 128 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub pseudonym: Option<String>,
    /// State in which the subject of the certificate is located. Must be less than or equal to 128 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub state: Option<String>,
    /// Family name. In the US and the UK for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first. Must be less than or equal to 40 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub surname: Option<String>,
    /// Title such as Mr. or Ms. which is pre-pended to the name to refer formally to the certificate subject. Must be less than or equal to 64 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub title: Option<String>,
}

/// Nested argument containing revocation configuration. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityStatusAtProviderRevocationConfiguration {
    /// Nested argument containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "crlConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub crl_configuration:
        Option<CertificateAuthorityStatusAtProviderRevocationConfigurationCrlConfiguration>,
    /// Nested argument containing configuration of
    /// the custom OCSP responder endpoint. Defined below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocspConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub ocsp_configuration:
        Option<CertificateAuthorityStatusAtProviderRevocationConfigurationOcspConfiguration>,
}

/// Nested argument containing configuration of the certificate revocation list (CRL), if any, maintained by the certificate authority. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityStatusAtProviderRevocationConfigurationCrlConfiguration {
    /// Name inserted into the certificate CRL Distribution Points extension that enables the use of an alias for the CRL distribution point. Use this value if you don't want the name of your S3 bucket to be public. Must be less than or equal to 253 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customCname"
    )]
    #[builder(default, setter(strip_option))]
    pub custom_cname: Option<String>,
    /// Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// Number of days until a certificate expires. Must be between 1 and 5000.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "expirationInDays"
    )]
    #[builder(default, setter(strip_option))]
    pub expiration_in_days: Option<f64>,
    /// Name of the S3 bucket that contains the CRL. If you do not provide a value for the custom_cname argument, the name of your S3 bucket is placed into the CRL Distribution Points extension of the issued certificate. You must specify a bucket policy that allows ACM PCA to write the CRL to your bucket. Must be between 3 and 255 characters in length.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3BucketName"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_bucket_name: Option<String>,
    /// Determines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. Defaults to PUBLIC_READ.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "s3ObjectAcl"
    )]
    #[builder(default, setter(strip_option))]
    pub s3_object_acl: Option<String>,
}

/// Nested argument containing configuration of
/// the custom OCSP responder endpoint. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CertificateAuthorityStatusAtProviderRevocationConfigurationOcspConfiguration {
    /// Boolean value that specifies whether a custom OCSP responder is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// CNAME specifying a customized OCSP domain. Note: The value of the CNAME must not include a protocol prefix such as "http://" or "https://".
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ocspCustomCname"
    )]
    #[builder(default, setter(strip_option))]
    pub ocsp_custom_cname: Option<String>,
}

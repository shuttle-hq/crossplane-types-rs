// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// InstanceStorageConfigSpec defines the desired state of InstanceStorageConfig
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "connect.aws.upbound.io",
    version = "v1beta2",
    kind = "InstanceStorageConfig",
    plural = "instancestorageconfigs"
)]
#[kube(status = "InstanceStorageConfigStatus")]
pub struct InstanceStorageConfigSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<InstanceStorageConfigDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: InstanceStorageConfigForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<InstanceStorageConfigInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<InstanceStorageConfigProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<InstanceStorageConfigPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<InstanceStorageConfigWriteConnectionSecretToRef>,
}

/// InstanceStorageConfigSpec defines the desired state of InstanceStorageConfig
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProvider {
    /// Specifies the identifier of the hosting Amazon Connect Instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceId"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_id: Option<String>,
    /// Reference to a Instance in connect to populate instanceId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_id_ref: Option<InstanceStorageConfigForProviderInstanceIdRef>,
    /// Selector for a Instance in connect to populate instanceId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_id_selector: Option<InstanceStorageConfigForProviderInstanceIdSelector>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// A valid resource type. Valid Values: AGENT_EVENTS | ATTACHMENTS | CALL_RECORDINGS | CHAT_TRANSCRIPTS | CONTACT_EVALUATIONS | CONTACT_TRACE_RECORDS | MEDIA_STREAMS | REAL_TIME_CONTACT_ANALYSIS_SEGMENTS | SCHEDULED_REPORTS | SCREEN_RECORDINGS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceType"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_type: Option<String>,
    /// Specifies the storage configuration options for the Connect Instance. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub storage_config: Option<InstanceStorageConfigForProviderStorageConfig>,
}

/// Reference to a Instance in connect to populate instanceId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderInstanceIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceStorageConfigForProviderInstanceIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderInstanceIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigForProviderInstanceIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigForProviderInstanceIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderInstanceIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderInstanceIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Instance in connect to populate instanceId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderInstanceIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceStorageConfigForProviderInstanceIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderInstanceIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigForProviderInstanceIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigForProviderInstanceIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderInstanceIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderInstanceIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Specifies the storage configuration options for the Connect Instance. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfig {
    /// A block that specifies the configuration of the Kinesis Firehose delivery stream. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisFirehoseConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub kinesis_firehose_config:
        Option<InstanceStorageConfigForProviderStorageConfigKinesisFirehoseConfig>,
    /// A block that specifies the configuration of the Kinesis data stream. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisStreamConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub kinesis_stream_config:
        Option<InstanceStorageConfigForProviderStorageConfigKinesisStreamConfig>,
    /// A block that specifies the configuration of the Kinesis video stream. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisVideoStreamConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub kinesis_video_stream_config:
        Option<InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfig>,
    /// A block that specifies the configuration of S3 Bucket. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Config")]
    #[builder(default, setter(strip_option))]
    pub s3_config: Option<InstanceStorageConfigForProviderStorageConfigS3Config>,
    /// A valid storage type. Valid Values: S3 | KINESIS_VIDEO_STREAM | KINESIS_STREAM | KINESIS_FIREHOSE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageType"
    )]
    #[builder(default, setter(strip_option))]
    pub storage_type: Option<String>,
}

/// A block that specifies the configuration of the Kinesis Firehose delivery stream. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigKinesisFirehoseConfig {
    /// The Amazon Resource Name (ARN) of the delivery stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "firehoseArn"
    )]
    #[builder(default, setter(strip_option))]
    pub firehose_arn: Option<String>,
    /// Reference to a DeliveryStream in firehose to populate firehoseArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "firehoseArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub firehose_arn_ref:
        Option<InstanceStorageConfigForProviderStorageConfigKinesisFirehoseConfigFirehoseArnRef>,
    /// Selector for a DeliveryStream in firehose to populate firehoseArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "firehoseArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub firehose_arn_selector: Option<
        InstanceStorageConfigForProviderStorageConfigKinesisFirehoseConfigFirehoseArnSelector,
    >,
}

/// Reference to a DeliveryStream in firehose to populate firehoseArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigKinesisFirehoseConfigFirehoseArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        InstanceStorageConfigForProviderStorageConfigKinesisFirehoseConfigFirehoseArnRefPolicy,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigKinesisFirehoseConfigFirehoseArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigForProviderStorageConfigKinesisFirehoseConfigFirehoseArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigForProviderStorageConfigKinesisFirehoseConfigFirehoseArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigKinesisFirehoseConfigFirehoseArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigKinesisFirehoseConfigFirehoseArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a DeliveryStream in firehose to populate firehoseArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigKinesisFirehoseConfigFirehoseArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        InstanceStorageConfigForProviderStorageConfigKinesisFirehoseConfigFirehoseArnSelectorPolicy,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigKinesisFirehoseConfigFirehoseArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigForProviderStorageConfigKinesisFirehoseConfigFirehoseArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigForProviderStorageConfigKinesisFirehoseConfigFirehoseArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigKinesisFirehoseConfigFirehoseArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigKinesisFirehoseConfigFirehoseArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// A block that specifies the configuration of the Kinesis data stream. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigKinesisStreamConfig {
    /// The Amazon Resource Name (ARN) of the data stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamArn")]
    #[builder(default, setter(strip_option))]
    pub stream_arn: Option<String>,
    /// Reference to a Stream in kinesis to populate streamArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streamArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub stream_arn_ref:
        Option<InstanceStorageConfigForProviderStorageConfigKinesisStreamConfigStreamArnRef>,
    /// Selector for a Stream in kinesis to populate streamArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streamArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub stream_arn_selector:
        Option<InstanceStorageConfigForProviderStorageConfigKinesisStreamConfigStreamArnSelector>,
}

/// Reference to a Stream in kinesis to populate streamArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigKinesisStreamConfigStreamArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<InstanceStorageConfigForProviderStorageConfigKinesisStreamConfigStreamArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigKinesisStreamConfigStreamArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigForProviderStorageConfigKinesisStreamConfigStreamArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigForProviderStorageConfigKinesisStreamConfigStreamArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigKinesisStreamConfigStreamArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigKinesisStreamConfigStreamArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Stream in kinesis to populate streamArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigKinesisStreamConfigStreamArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        InstanceStorageConfigForProviderStorageConfigKinesisStreamConfigStreamArnSelectorPolicy,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigKinesisStreamConfigStreamArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigForProviderStorageConfigKinesisStreamConfigStreamArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigForProviderStorageConfigKinesisStreamConfigStreamArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigKinesisStreamConfigStreamArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigKinesisStreamConfigStreamArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// A block that specifies the configuration of the Kinesis video stream. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfig {
    /// The encryption configuration. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_config: Option<
        InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfigEncryptionConfig,
    >,
    /// The prefix of the video stream. Minimum length of 1. Maximum length of 128. When read from the state, the value returned is <prefix>-connect-<connect_instance_alias>-contact- since the API appends additional details to the prefix.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub prefix: Option<String>,
    /// The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. Minimum value of 0. Maximum value of 87600. A value of 0, indicates that the stream does not persist data.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retentionPeriodHours"
    )]
    #[builder(default, setter(strip_option))]
    pub retention_period_hours: Option<f64>,
}

/// The encryption configuration. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfigEncryptionConfig {
    /// The type of encryption. Valid Values: KMS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionType")]
    #[builder(default, setter(strip_option))]
    pub encryption_type: Option<String>,
    /// The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default, setter(strip_option))]
    pub key_id: Option<String>,
    /// Reference to a Key in kms to populate keyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyIdRef")]
    #[builder(default, setter(strip_option))]
    pub key_id_ref: Option<InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdRef>,
    /// Selector for a Key in kms to populate keyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyIdSelector")]
    #[builder(default, setter(strip_option))]
    pub key_id_selector: Option<InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdSelector>,
}

/// Reference to a Key in kms to populate keyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate keyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// A block that specifies the configuration of S3 Bucket. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigS3Config {
    /// The S3 bucket name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketName"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_name: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_name_ref: Option<InstanceStorageConfigForProviderStorageConfigS3ConfigBucketNameRef>,
    /// Selector for a Bucket in s3 to populate bucketName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_name_selector:
        Option<InstanceStorageConfigForProviderStorageConfigS3ConfigBucketNameSelector>,
    /// The S3 bucket prefix.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketPrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_prefix: Option<String>,
    /// The encryption configuration. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_config:
        Option<InstanceStorageConfigForProviderStorageConfigS3ConfigEncryptionConfig>,
}

/// Reference to a Bucket in s3 to populate bucketName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigS3ConfigBucketNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceStorageConfigForProviderStorageConfigS3ConfigBucketNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigS3ConfigBucketNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<InstanceStorageConfigForProviderStorageConfigS3ConfigBucketNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<InstanceStorageConfigForProviderStorageConfigS3ConfigBucketNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigS3ConfigBucketNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigS3ConfigBucketNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigS3ConfigBucketNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<InstanceStorageConfigForProviderStorageConfigS3ConfigBucketNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigS3ConfigBucketNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<
        InstanceStorageConfigForProviderStorageConfigS3ConfigBucketNameSelectorPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<
        InstanceStorageConfigForProviderStorageConfigS3ConfigBucketNameSelectorPolicyResolve,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigS3ConfigBucketNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigS3ConfigBucketNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The encryption configuration. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigS3ConfigEncryptionConfig {
    /// The type of encryption. Valid Values: KMS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionType"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_type: Option<String>,
    /// The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default, setter(strip_option))]
    pub key_id: Option<String>,
    /// Reference to a Key in kms to populate keyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyIdRef")]
    #[builder(default, setter(strip_option))]
    pub key_id_ref:
        Option<InstanceStorageConfigForProviderStorageConfigS3ConfigEncryptionConfigKeyIdRef>,
    /// Selector for a Key in kms to populate keyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub key_id_selector:
        Option<InstanceStorageConfigForProviderStorageConfigS3ConfigEncryptionConfigKeyIdSelector>,
}

/// Reference to a Key in kms to populate keyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigS3ConfigEncryptionConfigKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<InstanceStorageConfigForProviderStorageConfigS3ConfigEncryptionConfigKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigS3ConfigEncryptionConfigKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigForProviderStorageConfigS3ConfigEncryptionConfigKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigForProviderStorageConfigS3ConfigEncryptionConfigKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigS3ConfigEncryptionConfigKeyIdRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigS3ConfigEncryptionConfigKeyIdRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate keyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigS3ConfigEncryptionConfigKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        InstanceStorageConfigForProviderStorageConfigS3ConfigEncryptionConfigKeyIdSelectorPolicy,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigForProviderStorageConfigS3ConfigEncryptionConfigKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigForProviderStorageConfigS3ConfigEncryptionConfigKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigForProviderStorageConfigS3ConfigEncryptionConfigKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigS3ConfigEncryptionConfigKeyIdSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigForProviderStorageConfigS3ConfigEncryptionConfigKeyIdSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProvider {
    /// Specifies the identifier of the hosting Amazon Connect Instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceId"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_id: Option<String>,
    /// Reference to a Instance in connect to populate instanceId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceIdRef"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_id_ref: Option<InstanceStorageConfigInitProviderInstanceIdRef>,
    /// Selector for a Instance in connect to populate instanceId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_id_selector: Option<InstanceStorageConfigInitProviderInstanceIdSelector>,
    /// A valid resource type. Valid Values: AGENT_EVENTS | ATTACHMENTS | CALL_RECORDINGS | CHAT_TRANSCRIPTS | CONTACT_EVALUATIONS | CONTACT_TRACE_RECORDS | MEDIA_STREAMS | REAL_TIME_CONTACT_ANALYSIS_SEGMENTS | SCHEDULED_REPORTS | SCREEN_RECORDINGS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceType"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_type: Option<String>,
    /// Specifies the storage configuration options for the Connect Instance. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub storage_config: Option<InstanceStorageConfigInitProviderStorageConfig>,
}

/// Reference to a Instance in connect to populate instanceId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderInstanceIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceStorageConfigInitProviderInstanceIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderInstanceIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigInitProviderInstanceIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigInitProviderInstanceIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderInstanceIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderInstanceIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Instance in connect to populate instanceId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderInstanceIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceStorageConfigInitProviderInstanceIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderInstanceIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigInitProviderInstanceIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigInitProviderInstanceIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderInstanceIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderInstanceIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Specifies the storage configuration options for the Connect Instance. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfig {
    /// A block that specifies the configuration of the Kinesis Firehose delivery stream. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisFirehoseConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub kinesis_firehose_config:
        Option<InstanceStorageConfigInitProviderStorageConfigKinesisFirehoseConfig>,
    /// A block that specifies the configuration of the Kinesis data stream. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisStreamConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub kinesis_stream_config:
        Option<InstanceStorageConfigInitProviderStorageConfigKinesisStreamConfig>,
    /// A block that specifies the configuration of the Kinesis video stream. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisVideoStreamConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub kinesis_video_stream_config:
        Option<InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfig>,
    /// A block that specifies the configuration of S3 Bucket. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Config")]
    #[builder(default, setter(strip_option))]
    pub s3_config: Option<InstanceStorageConfigInitProviderStorageConfigS3Config>,
    /// A valid storage type. Valid Values: S3 | KINESIS_VIDEO_STREAM | KINESIS_STREAM | KINESIS_FIREHOSE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageType"
    )]
    #[builder(default, setter(strip_option))]
    pub storage_type: Option<String>,
}

/// A block that specifies the configuration of the Kinesis Firehose delivery stream. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigKinesisFirehoseConfig {
    /// The Amazon Resource Name (ARN) of the delivery stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "firehoseArn"
    )]
    #[builder(default, setter(strip_option))]
    pub firehose_arn: Option<String>,
    /// Reference to a DeliveryStream in firehose to populate firehoseArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "firehoseArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub firehose_arn_ref:
        Option<InstanceStorageConfigInitProviderStorageConfigKinesisFirehoseConfigFirehoseArnRef>,
    /// Selector for a DeliveryStream in firehose to populate firehoseArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "firehoseArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub firehose_arn_selector: Option<
        InstanceStorageConfigInitProviderStorageConfigKinesisFirehoseConfigFirehoseArnSelector,
    >,
}

/// Reference to a DeliveryStream in firehose to populate firehoseArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigKinesisFirehoseConfigFirehoseArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        InstanceStorageConfigInitProviderStorageConfigKinesisFirehoseConfigFirehoseArnRefPolicy,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigKinesisFirehoseConfigFirehoseArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigInitProviderStorageConfigKinesisFirehoseConfigFirehoseArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigInitProviderStorageConfigKinesisFirehoseConfigFirehoseArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigKinesisFirehoseConfigFirehoseArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigKinesisFirehoseConfigFirehoseArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a DeliveryStream in firehose to populate firehoseArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigKinesisFirehoseConfigFirehoseArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceStorageConfigInitProviderStorageConfigKinesisFirehoseConfigFirehoseArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigKinesisFirehoseConfigFirehoseArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigInitProviderStorageConfigKinesisFirehoseConfigFirehoseArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigInitProviderStorageConfigKinesisFirehoseConfigFirehoseArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigKinesisFirehoseConfigFirehoseArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigKinesisFirehoseConfigFirehoseArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// A block that specifies the configuration of the Kinesis data stream. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigKinesisStreamConfig {
    /// The Amazon Resource Name (ARN) of the data stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamArn")]
    #[builder(default, setter(strip_option))]
    pub stream_arn: Option<String>,
    /// Reference to a Stream in kinesis to populate streamArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streamArnRef"
    )]
    #[builder(default, setter(strip_option))]
    pub stream_arn_ref:
        Option<InstanceStorageConfigInitProviderStorageConfigKinesisStreamConfigStreamArnRef>,
    /// Selector for a Stream in kinesis to populate streamArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streamArnSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub stream_arn_selector:
        Option<InstanceStorageConfigInitProviderStorageConfigKinesisStreamConfigStreamArnSelector>,
}

/// Reference to a Stream in kinesis to populate streamArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigKinesisStreamConfigStreamArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<InstanceStorageConfigInitProviderStorageConfigKinesisStreamConfigStreamArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigKinesisStreamConfigStreamArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigInitProviderStorageConfigKinesisStreamConfigStreamArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigInitProviderStorageConfigKinesisStreamConfigStreamArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigKinesisStreamConfigStreamArnRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigKinesisStreamConfigStreamArnRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Stream in kinesis to populate streamArn.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigKinesisStreamConfigStreamArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        InstanceStorageConfigInitProviderStorageConfigKinesisStreamConfigStreamArnSelectorPolicy,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigKinesisStreamConfigStreamArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigInitProviderStorageConfigKinesisStreamConfigStreamArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigInitProviderStorageConfigKinesisStreamConfigStreamArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigKinesisStreamConfigStreamArnSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigKinesisStreamConfigStreamArnSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// A block that specifies the configuration of the Kinesis video stream. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfig {
    /// The encryption configuration. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_config: Option<
        InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfigEncryptionConfig,
    >,
    /// The prefix of the video stream. Minimum length of 1. Maximum length of 128. When read from the state, the value returned is <prefix>-connect-<connect_instance_alias>-contact- since the API appends additional details to the prefix.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub prefix: Option<String>,
    /// The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. Minimum value of 0. Maximum value of 87600. A value of 0, indicates that the stream does not persist data.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retentionPeriodHours"
    )]
    #[builder(default, setter(strip_option))]
    pub retention_period_hours: Option<f64>,
}

/// The encryption configuration. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfigEncryptionConfig {
    /// The type of encryption. Valid Values: KMS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionType")]
    #[builder(default, setter(strip_option))]
    pub encryption_type: Option<String>,
    /// The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default, setter(strip_option))]
    pub key_id: Option<String>,
    /// Reference to a Key in kms to populate keyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyIdRef")]
    #[builder(default, setter(strip_option))]
    pub key_id_ref: Option<InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdRef>,
    /// Selector for a Key in kms to populate keyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyIdSelector")]
    #[builder(default, setter(strip_option))]
    pub key_id_selector: Option<InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdSelector>,
}

/// Reference to a Key in kms to populate keyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate keyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigKinesisVideoStreamConfigEncryptionConfigKeyIdSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// A block that specifies the configuration of S3 Bucket. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigS3Config {
    /// The S3 bucket name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketName"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_name: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketNameRef"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_name_ref:
        Option<InstanceStorageConfigInitProviderStorageConfigS3ConfigBucketNameRef>,
    /// Selector for a Bucket in s3 to populate bucketName.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketNameSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_name_selector:
        Option<InstanceStorageConfigInitProviderStorageConfigS3ConfigBucketNameSelector>,
    /// The S3 bucket prefix.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketPrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_prefix: Option<String>,
    /// The encryption configuration. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_config:
        Option<InstanceStorageConfigInitProviderStorageConfigS3ConfigEncryptionConfig>,
}

/// Reference to a Bucket in s3 to populate bucketName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigS3ConfigBucketNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceStorageConfigInitProviderStorageConfigS3ConfigBucketNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigS3ConfigBucketNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<InstanceStorageConfigInitProviderStorageConfigS3ConfigBucketNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<InstanceStorageConfigInitProviderStorageConfigS3ConfigBucketNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigS3ConfigBucketNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigS3ConfigBucketNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketName.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigS3ConfigBucketNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<InstanceStorageConfigInitProviderStorageConfigS3ConfigBucketNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigS3ConfigBucketNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<
        InstanceStorageConfigInitProviderStorageConfigS3ConfigBucketNameSelectorPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<
        InstanceStorageConfigInitProviderStorageConfigS3ConfigBucketNameSelectorPolicyResolve,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigS3ConfigBucketNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigS3ConfigBucketNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The encryption configuration. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigS3ConfigEncryptionConfig {
    /// The type of encryption. Valid Values: KMS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionType"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_type: Option<String>,
    /// The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default, setter(strip_option))]
    pub key_id: Option<String>,
    /// Reference to a Key in kms to populate keyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyIdRef")]
    #[builder(default, setter(strip_option))]
    pub key_id_ref:
        Option<InstanceStorageConfigInitProviderStorageConfigS3ConfigEncryptionConfigKeyIdRef>,
    /// Selector for a Key in kms to populate keyId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "keyIdSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub key_id_selector:
        Option<InstanceStorageConfigInitProviderStorageConfigS3ConfigEncryptionConfigKeyIdSelector>,
}

/// Reference to a Key in kms to populate keyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigS3ConfigEncryptionConfigKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        InstanceStorageConfigInitProviderStorageConfigS3ConfigEncryptionConfigKeyIdRefPolicy,
    >,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigS3ConfigEncryptionConfigKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigInitProviderStorageConfigS3ConfigEncryptionConfigKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigInitProviderStorageConfigS3ConfigEncryptionConfigKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigS3ConfigEncryptionConfigKeyIdRefPolicyResolution
{
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigS3ConfigEncryptionConfigKeyIdRefPolicyResolve
{
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate keyId.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigS3ConfigEncryptionConfigKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<
        InstanceStorageConfigInitProviderStorageConfigS3ConfigEncryptionConfigKeyIdSelectorPolicy,
    >,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigInitProviderStorageConfigS3ConfigEncryptionConfigKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigInitProviderStorageConfigS3ConfigEncryptionConfigKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigInitProviderStorageConfigS3ConfigEncryptionConfigKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigS3ConfigEncryptionConfigKeyIdSelectorPolicyResolution
{
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigInitProviderStorageConfigS3ConfigEncryptionConfigKeyIdSelectorPolicyResolve
{
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceStorageConfigProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<InstanceStorageConfigProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<InstanceStorageConfigPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<InstanceStorageConfigPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<InstanceStorageConfigPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<InstanceStorageConfigPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<InstanceStorageConfigPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceStorageConfigPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// InstanceStorageConfigStatus defines the observed state of InstanceStorageConfig.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<InstanceStorageConfigStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigStatusAtProvider {
    /// The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "associationId"
    )]
    #[builder(default, setter(strip_option))]
    pub association_id: Option<String>,
    /// The identifier of the hosting Amazon Connect Instance, association_id, and resource_type separated by a colon (:).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Specifies the identifier of the hosting Amazon Connect Instance.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceId"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_id: Option<String>,
    /// A valid resource type. Valid Values: AGENT_EVENTS | ATTACHMENTS | CALL_RECORDINGS | CHAT_TRANSCRIPTS | CONTACT_EVALUATIONS | CONTACT_TRACE_RECORDS | MEDIA_STREAMS | REAL_TIME_CONTACT_ANALYSIS_SEGMENTS | SCHEDULED_REPORTS | SCREEN_RECORDINGS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceType"
    )]
    #[builder(default, setter(strip_option))]
    pub resource_type: Option<String>,
    /// Specifies the storage configuration options for the Connect Instance. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub storage_config: Option<InstanceStorageConfigStatusAtProviderStorageConfig>,
}

/// Specifies the storage configuration options for the Connect Instance. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigStatusAtProviderStorageConfig {
    /// A block that specifies the configuration of the Kinesis Firehose delivery stream. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisFirehoseConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub kinesis_firehose_config:
        Option<InstanceStorageConfigStatusAtProviderStorageConfigKinesisFirehoseConfig>,
    /// A block that specifies the configuration of the Kinesis data stream. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisStreamConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub kinesis_stream_config:
        Option<InstanceStorageConfigStatusAtProviderStorageConfigKinesisStreamConfig>,
    /// A block that specifies the configuration of the Kinesis video stream. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisVideoStreamConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub kinesis_video_stream_config:
        Option<InstanceStorageConfigStatusAtProviderStorageConfigKinesisVideoStreamConfig>,
    /// A block that specifies the configuration of S3 Bucket. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Config")]
    #[builder(default, setter(strip_option))]
    pub s3_config: Option<InstanceStorageConfigStatusAtProviderStorageConfigS3Config>,
    /// A valid storage type. Valid Values: S3 | KINESIS_VIDEO_STREAM | KINESIS_STREAM | KINESIS_FIREHOSE.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "storageType"
    )]
    #[builder(default, setter(strip_option))]
    pub storage_type: Option<String>,
}

/// A block that specifies the configuration of the Kinesis Firehose delivery stream. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigStatusAtProviderStorageConfigKinesisFirehoseConfig {
    /// The Amazon Resource Name (ARN) of the delivery stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "firehoseArn"
    )]
    #[builder(default, setter(strip_option))]
    pub firehose_arn: Option<String>,
}

/// A block that specifies the configuration of the Kinesis data stream. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigStatusAtProviderStorageConfigKinesisStreamConfig {
    /// The Amazon Resource Name (ARN) of the data stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamArn")]
    #[builder(default, setter(strip_option))]
    pub stream_arn: Option<String>,
}

/// A block that specifies the configuration of the Kinesis video stream. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigStatusAtProviderStorageConfigKinesisVideoStreamConfig {
    /// The encryption configuration. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_config: Option<
        InstanceStorageConfigStatusAtProviderStorageConfigKinesisVideoStreamConfigEncryptionConfig,
    >,
    /// The prefix of the video stream. Minimum length of 1. Maximum length of 128. When read from the state, the value returned is <prefix>-connect-<connect_instance_alias>-contact- since the API appends additional details to the prefix.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub prefix: Option<String>,
    /// The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. Minimum value of 0. Maximum value of 87600. A value of 0, indicates that the stream does not persist data.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "retentionPeriodHours"
    )]
    #[builder(default, setter(strip_option))]
    pub retention_period_hours: Option<f64>,
}

/// The encryption configuration. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigStatusAtProviderStorageConfigKinesisVideoStreamConfigEncryptionConfig
{
    /// The type of encryption. Valid Values: KMS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionType"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_type: Option<String>,
    /// The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default, setter(strip_option))]
    pub key_id: Option<String>,
}

/// A block that specifies the configuration of S3 Bucket. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigStatusAtProviderStorageConfigS3Config {
    /// The S3 bucket name.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketName"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_name: Option<String>,
    /// The S3 bucket prefix.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bucketPrefix"
    )]
    #[builder(default, setter(strip_option))]
    pub bucket_prefix: Option<String>,
    /// The encryption configuration. Documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_config:
        Option<InstanceStorageConfigStatusAtProviderStorageConfigS3ConfigEncryptionConfig>,
}

/// The encryption configuration. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct InstanceStorageConfigStatusAtProviderStorageConfigS3ConfigEncryptionConfig {
    /// The type of encryption. Valid Values: KMS.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "encryptionType"
    )]
    #[builder(default, setter(strip_option))]
    pub encryption_type: Option<String>,
    /// The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    #[builder(default, setter(strip_option))]
    pub key_id: Option<String>,
}

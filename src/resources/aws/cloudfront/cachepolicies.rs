// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// CachePolicySpec defines the desired state of CachePolicy
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "cloudfront.aws.upbound.io",
    version = "v1beta2",
    kind = "CachePolicy",
    plural = "cachepolicies"
)]
#[kube(status = "CachePolicyStatus")]
pub struct CachePolicySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<CachePolicyDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: CachePolicyForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<CachePolicyInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<CachePolicyProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<CachePolicyPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<CachePolicyWriteConnectionSecretToRef>,
}

/// CachePolicySpec defines the desired state of CachePolicy
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CachePolicyDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyForProvider {
    /// Description for the cache policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub comment: Option<String>,
    /// Amount of time, in seconds, that objects are allowed to remain in the CloudFront cache before CloudFront sends a new request to the origin server to check if the object has been updated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultTtl"
    )]
    #[builder(default, setter(strip_option))]
    pub default_ttl: Option<f64>,
    /// Maximum amount of time, in seconds, that objects stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTtl")]
    #[builder(default, setter(strip_option))]
    pub max_ttl: Option<f64>,
    /// Minimum amount of time, in seconds, that objects should remain in the CloudFront cache before a new request is sent to the origin to check for updates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minTtl")]
    #[builder(default, setter(strip_option))]
    pub min_ttl: Option<f64>,
    /// Unique name used to identify the cache policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Configuration for including HTTP headers, cookies, and URL query strings in the cache key. For more information, refer to the Parameters In Cache Key And Forwarded To Origin section.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parametersInCacheKeyAndForwardedToOrigin"
    )]
    #[builder(default, setter(strip_option))]
    pub parameters_in_cache_key_and_forwarded_to_origin:
        Option<CachePolicyForProviderParametersInCacheKeyAndForwardedToOrigin>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
}

/// Configuration for including HTTP headers, cookies, and URL query strings in the cache key. For more information, refer to the Parameters In Cache Key And Forwarded To Origin section.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyForProviderParametersInCacheKeyAndForwardedToOrigin {
    /// Whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Cookies Config for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cookiesConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub cookies_config:
        Option<CachePolicyForProviderParametersInCacheKeyAndForwardedToOriginCookiesConfig>,
    /// Flag determines whether the Accept-Encoding HTTP header is included in the cache key and in requests that CloudFront sends to the origin.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableAcceptEncodingBrotli"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_accept_encoding_brotli: Option<bool>,
    /// Whether the Accept-Encoding HTTP header is included in the cache key and in requests sent to the origin by CloudFront.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableAcceptEncodingGzip"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_accept_encoding_gzip: Option<bool>,
    /// Whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Headers Config for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "headersConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub headers_config:
        Option<CachePolicyForProviderParametersInCacheKeyAndForwardedToOriginHeadersConfig>,
    /// Whether any URL query strings in viewer requests are included in the cache key. It also automatically includes these query strings in requests that CloudFront sends to the origin. Please refer to the Query String Config for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "queryStringsConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub query_strings_config:
        Option<CachePolicyForProviderParametersInCacheKeyAndForwardedToOriginQueryStringsConfig>,
}

/// Whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Cookies Config for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyForProviderParametersInCacheKeyAndForwardedToOriginCookiesConfig {
    /// Whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values for cookie_behavior are none, whitelist, allExcept, and all.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cookieBehavior"
    )]
    #[builder(default, setter(strip_option))]
    pub cookie_behavior: Option<String>,
    /// Object that contains a list of cookie names. See Items for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cookies:
        Option<CachePolicyForProviderParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies>,
}

/// Object that contains a list of cookie names. See Items for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyForProviderParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies {
    /// List of item names, such as cookies, headers, or query strings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// Whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Headers Config for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyForProviderParametersInCacheKeyAndForwardedToOriginHeadersConfig {
    /// Whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values for header_behavior are none and whitelist.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "headerBehavior"
    )]
    #[builder(default, setter(strip_option))]
    pub header_behavior: Option<String>,
    /// Object contains a list of header names. See Items for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub headers:
        Option<CachePolicyForProviderParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders>,
}

/// Object contains a list of header names. See Items for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyForProviderParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders {
    /// List of item names, such as cookies, headers, or query strings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// Whether any URL query strings in viewer requests are included in the cache key. It also automatically includes these query strings in requests that CloudFront sends to the origin. Please refer to the Query String Config for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyForProviderParametersInCacheKeyAndForwardedToOriginQueryStringsConfig {
    /// Whether URL query strings in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values for query_string_behavior are none, whitelist, allExcept, and all.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringBehavior")]
    #[builder(default, setter(strip_option))]
    pub query_string_behavior: Option<String>,
    /// Configuration parameter that contains a list of query string names. See Items for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStrings")]
    #[builder(default, setter(strip_option))]
    pub query_strings: Option<CachePolicyForProviderParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings>,
}

/// Configuration parameter that contains a list of query string names. See Items for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyForProviderParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings
{
    /// List of item names, such as cookies, headers, or query strings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyInitProvider {
    /// Description for the cache policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub comment: Option<String>,
    /// Amount of time, in seconds, that objects are allowed to remain in the CloudFront cache before CloudFront sends a new request to the origin server to check if the object has been updated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultTtl"
    )]
    #[builder(default, setter(strip_option))]
    pub default_ttl: Option<f64>,
    /// Maximum amount of time, in seconds, that objects stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTtl")]
    #[builder(default, setter(strip_option))]
    pub max_ttl: Option<f64>,
    /// Minimum amount of time, in seconds, that objects should remain in the CloudFront cache before a new request is sent to the origin to check for updates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minTtl")]
    #[builder(default, setter(strip_option))]
    pub min_ttl: Option<f64>,
    /// Unique name used to identify the cache policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Configuration for including HTTP headers, cookies, and URL query strings in the cache key. For more information, refer to the Parameters In Cache Key And Forwarded To Origin section.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parametersInCacheKeyAndForwardedToOrigin"
    )]
    #[builder(default, setter(strip_option))]
    pub parameters_in_cache_key_and_forwarded_to_origin:
        Option<CachePolicyInitProviderParametersInCacheKeyAndForwardedToOrigin>,
}

/// Configuration for including HTTP headers, cookies, and URL query strings in the cache key. For more information, refer to the Parameters In Cache Key And Forwarded To Origin section.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyInitProviderParametersInCacheKeyAndForwardedToOrigin {
    /// Whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Cookies Config for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cookiesConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub cookies_config:
        Option<CachePolicyInitProviderParametersInCacheKeyAndForwardedToOriginCookiesConfig>,
    /// Flag determines whether the Accept-Encoding HTTP header is included in the cache key and in requests that CloudFront sends to the origin.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableAcceptEncodingBrotli"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_accept_encoding_brotli: Option<bool>,
    /// Whether the Accept-Encoding HTTP header is included in the cache key and in requests sent to the origin by CloudFront.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableAcceptEncodingGzip"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_accept_encoding_gzip: Option<bool>,
    /// Whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Headers Config for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "headersConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub headers_config:
        Option<CachePolicyInitProviderParametersInCacheKeyAndForwardedToOriginHeadersConfig>,
    /// Whether any URL query strings in viewer requests are included in the cache key. It also automatically includes these query strings in requests that CloudFront sends to the origin. Please refer to the Query String Config for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "queryStringsConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub query_strings_config:
        Option<CachePolicyInitProviderParametersInCacheKeyAndForwardedToOriginQueryStringsConfig>,
}

/// Whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Cookies Config for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyInitProviderParametersInCacheKeyAndForwardedToOriginCookiesConfig {
    /// Whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values for cookie_behavior are none, whitelist, allExcept, and all.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cookieBehavior"
    )]
    #[builder(default, setter(strip_option))]
    pub cookie_behavior: Option<String>,
    /// Object that contains a list of cookie names. See Items for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cookies:
        Option<CachePolicyInitProviderParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies>,
}

/// Object that contains a list of cookie names. See Items for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyInitProviderParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies {
    /// List of item names, such as cookies, headers, or query strings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// Whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Headers Config for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyInitProviderParametersInCacheKeyAndForwardedToOriginHeadersConfig {
    /// Whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values for header_behavior are none and whitelist.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "headerBehavior"
    )]
    #[builder(default, setter(strip_option))]
    pub header_behavior: Option<String>,
    /// Object contains a list of header names. See Items for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub headers:
        Option<CachePolicyInitProviderParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders>,
}

/// Object contains a list of header names. See Items for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyInitProviderParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders {
    /// List of item names, such as cookies, headers, or query strings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// Whether any URL query strings in viewer requests are included in the cache key. It also automatically includes these query strings in requests that CloudFront sends to the origin. Please refer to the Query String Config for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyInitProviderParametersInCacheKeyAndForwardedToOriginQueryStringsConfig {
    /// Whether URL query strings in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values for query_string_behavior are none, whitelist, allExcept, and all.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringBehavior")]
    #[builder(default, setter(strip_option))]
    pub query_string_behavior: Option<String>,
    /// Configuration parameter that contains a list of query string names. See Items for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStrings")]
    #[builder(default, setter(strip_option))]
    pub query_strings: Option<CachePolicyInitProviderParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings>,
}

/// Configuration parameter that contains a list of query string names. See Items for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyInitProviderParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings
{
    /// List of item names, such as cookies, headers, or query strings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<CachePolicyProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<CachePolicyProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<CachePolicyProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CachePolicyProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CachePolicyProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<CachePolicyPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<CachePolicyPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<CachePolicyPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<CachePolicyPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<CachePolicyPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CachePolicyPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CachePolicyPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// CachePolicyStatus defines the observed state of CachePolicy.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<CachePolicyStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyStatusAtProvider {
    /// Description for the cache policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub comment: Option<String>,
    /// Amount of time, in seconds, that objects are allowed to remain in the CloudFront cache before CloudFront sends a new request to the origin server to check if the object has been updated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "defaultTtl"
    )]
    #[builder(default, setter(strip_option))]
    pub default_ttl: Option<f64>,
    /// Current version of the cache policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub etag: Option<String>,
    /// Identifier for the cache policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// Maximum amount of time, in seconds, that objects stay in the CloudFront cache before CloudFront sends another request to the origin to see if the object has been updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTtl")]
    #[builder(default, setter(strip_option))]
    pub max_ttl: Option<f64>,
    /// Minimum amount of time, in seconds, that objects should remain in the CloudFront cache before a new request is sent to the origin to check for updates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minTtl")]
    #[builder(default, setter(strip_option))]
    pub min_ttl: Option<f64>,
    /// Unique name used to identify the cache policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Configuration for including HTTP headers, cookies, and URL query strings in the cache key. For more information, refer to the Parameters In Cache Key And Forwarded To Origin section.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parametersInCacheKeyAndForwardedToOrigin"
    )]
    #[builder(default, setter(strip_option))]
    pub parameters_in_cache_key_and_forwarded_to_origin:
        Option<CachePolicyStatusAtProviderParametersInCacheKeyAndForwardedToOrigin>,
}

/// Configuration for including HTTP headers, cookies, and URL query strings in the cache key. For more information, refer to the Parameters In Cache Key And Forwarded To Origin section.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyStatusAtProviderParametersInCacheKeyAndForwardedToOrigin {
    /// Whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Cookies Config for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cookiesConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub cookies_config:
        Option<CachePolicyStatusAtProviderParametersInCacheKeyAndForwardedToOriginCookiesConfig>,
    /// Flag determines whether the Accept-Encoding HTTP header is included in the cache key and in requests that CloudFront sends to the origin.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableAcceptEncodingBrotli"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_accept_encoding_brotli: Option<bool>,
    /// Whether the Accept-Encoding HTTP header is included in the cache key and in requests sent to the origin by CloudFront.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "enableAcceptEncodingGzip"
    )]
    #[builder(default, setter(strip_option))]
    pub enable_accept_encoding_gzip: Option<bool>,
    /// Whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Headers Config for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "headersConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub headers_config:
        Option<CachePolicyStatusAtProviderParametersInCacheKeyAndForwardedToOriginHeadersConfig>,
    /// Whether any URL query strings in viewer requests are included in the cache key. It also automatically includes these query strings in requests that CloudFront sends to the origin. Please refer to the Query String Config for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "queryStringsConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub query_strings_config: Option<
        CachePolicyStatusAtProviderParametersInCacheKeyAndForwardedToOriginQueryStringsConfig,
    >,
}

/// Whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Cookies Config for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyStatusAtProviderParametersInCacheKeyAndForwardedToOriginCookiesConfig {
    /// Whether any cookies in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values for cookie_behavior are none, whitelist, allExcept, and all.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cookieBehavior"
    )]
    #[builder(default, setter(strip_option))]
    pub cookie_behavior: Option<String>,
    /// Object that contains a list of cookie names. See Items for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub cookies: Option<
        CachePolicyStatusAtProviderParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies,
    >,
}

/// Object that contains a list of cookie names. See Items for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyStatusAtProviderParametersInCacheKeyAndForwardedToOriginCookiesConfigCookies {
    /// List of item names, such as cookies, headers, or query strings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// Whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin. See Headers Config for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyStatusAtProviderParametersInCacheKeyAndForwardedToOriginHeadersConfig {
    /// Whether any HTTP headers are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values for header_behavior are none and whitelist.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "headerBehavior"
    )]
    #[builder(default, setter(strip_option))]
    pub header_behavior: Option<String>,
    /// Object contains a list of header names. See Items for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub headers: Option<
        CachePolicyStatusAtProviderParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders,
    >,
}

/// Object contains a list of header names. See Items for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyStatusAtProviderParametersInCacheKeyAndForwardedToOriginHeadersConfigHeaders {
    /// List of item names, such as cookies, headers, or query strings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// Whether any URL query strings in viewer requests are included in the cache key. It also automatically includes these query strings in requests that CloudFront sends to the origin. Please refer to the Query String Config for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyStatusAtProviderParametersInCacheKeyAndForwardedToOriginQueryStringsConfig {
    /// Whether URL query strings in viewer requests are included in the cache key and automatically included in requests that CloudFront sends to the origin. Valid values for query_string_behavior are none, whitelist, allExcept, and all.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringBehavior")]
    #[builder(default, setter(strip_option))]
    pub query_string_behavior: Option<String>,
    /// Configuration parameter that contains a list of query string names. See Items for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStrings")]
    #[builder(default, setter(strip_option))]
    pub query_strings: Option<CachePolicyStatusAtProviderParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings>,
}

/// Configuration parameter that contains a list of query string names. See Items for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct CachePolicyStatusAtProviderParametersInCacheKeyAndForwardedToOriginQueryStringsConfigQueryStrings
{
    /// List of item names, such as cookies, headers, or query strings.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ResponseHeadersPolicySpec defines the desired state of ResponseHeadersPolicy
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "cloudfront.aws.upbound.io",
    version = "v1beta2",
    kind = "ResponseHeadersPolicy",
    plural = "responseheaderspolicies"
)]
#[kube(status = "ResponseHeadersPolicyStatus")]
pub struct ResponseHeadersPolicySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<ResponseHeadersPolicyDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ResponseHeadersPolicyForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<ResponseHeadersPolicyInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<ResponseHeadersPolicyProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<ResponseHeadersPolicyPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<ResponseHeadersPolicyWriteConnectionSecretToRef>,
}

/// ResponseHeadersPolicySpec defines the desired state of ResponseHeadersPolicy
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResponseHeadersPolicyDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyForProvider {
    /// A comment to describe the response headers policy. The comment cannot be longer than 128 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub comment: Option<String>,
    /// A configuration for a set of HTTP response headers that are used for Cross-Origin Resource Sharing (CORS). See Cors Config for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "corsConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub cors_config: Option<ResponseHeadersPolicyForProviderCorsConfig>,
    /// Object that contains an attribute items that contains a list of custom headers. See Custom Header for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customHeadersConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub custom_headers_config: Option<ResponseHeadersPolicyForProviderCustomHeadersConfig>,
    /// The current version of the response headers policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub etag: Option<String>,
    /// A unique name to identify the response headers policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// A configuration for a set of HTTP headers to remove from the HTTP response. Object that contains an attribute items that contains a list of headers. See Remove Header for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "removeHeadersConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub remove_headers_config: Option<ResponseHeadersPolicyForProviderRemoveHeadersConfig>,
    /// A configuration for a set of security-related HTTP response headers. See Security Headers Config for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityHeadersConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub security_headers_config: Option<ResponseHeadersPolicyForProviderSecurityHeadersConfig>,
    /// A configuration for enabling the Server-Timing header in HTTP responses sent from CloudFront. See Server Timing Headers Config for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverTimingHeadersConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub server_timing_headers_config:
        Option<ResponseHeadersPolicyForProviderServerTimingHeadersConfig>,
}

/// A configuration for a set of HTTP response headers that are used for Cross-Origin Resource Sharing (CORS). See Cors Config for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyForProviderCorsConfig {
    /// A Boolean value that CloudFront uses as the value for the Access-Control-Allow-Credentials HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlAllowCredentials"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_allow_credentials: Option<bool>,
    /// Object that contains an attribute items that contains a list of HTTP header names that CloudFront includes as values for the Access-Control-Allow-Headers HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlAllowHeaders"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_allow_headers:
        Option<ResponseHeadersPolicyForProviderCorsConfigAccessControlAllowHeaders>,
    /// Object that contains an attribute items that contains a list of HTTP methods that CloudFront includes as values for the Access-Control-Allow-Methods HTTP response header. Valid values: GET | POST | OPTIONS | PUT | DELETE | HEAD | ALL
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlAllowMethods"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_allow_methods:
        Option<ResponseHeadersPolicyForProviderCorsConfigAccessControlAllowMethods>,
    /// Object that contains an attribute items that contains a list of origins that CloudFront can use as the value for the Access-Control-Allow-Origin HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlAllowOrigins"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_allow_origins:
        Option<ResponseHeadersPolicyForProviderCorsConfigAccessControlAllowOrigins>,
    /// Object that contains an attribute items that contains a list of HTTP headers that CloudFront includes as values for the Access-Control-Expose-Headers HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlExposeHeaders"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_expose_headers:
        Option<ResponseHeadersPolicyForProviderCorsConfigAccessControlExposeHeaders>,
    /// A number that CloudFront uses as the value for the Access-Control-Max-Age HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlMaxAgeSec"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_max_age_sec: Option<f64>,
    /// A Boolean value that determines how CloudFront behaves for the HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "originOverride"
    )]
    #[builder(default, setter(strip_option))]
    pub origin_override: Option<bool>,
}

/// Object that contains an attribute items that contains a list of HTTP header names that CloudFront includes as values for the Access-Control-Allow-Headers HTTP response header.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyForProviderCorsConfigAccessControlAllowHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// Object that contains an attribute items that contains a list of HTTP methods that CloudFront includes as values for the Access-Control-Allow-Methods HTTP response header. Valid values: GET | POST | OPTIONS | PUT | DELETE | HEAD | ALL
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyForProviderCorsConfigAccessControlAllowMethods {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// Object that contains an attribute items that contains a list of origins that CloudFront can use as the value for the Access-Control-Allow-Origin HTTP response header.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyForProviderCorsConfigAccessControlAllowOrigins {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// Object that contains an attribute items that contains a list of HTTP headers that CloudFront includes as values for the Access-Control-Expose-Headers HTTP response header.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyForProviderCorsConfigAccessControlExposeHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// Object that contains an attribute items that contains a list of custom headers. See Custom Header for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyForProviderCustomHeadersConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<ResponseHeadersPolicyForProviderCustomHeadersConfigItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyForProviderCustomHeadersConfigItems {
    /// The HTTP response header name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub header: Option<String>,
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
    /// The value for the HTTP response header.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// A configuration for a set of HTTP headers to remove from the HTTP response. Object that contains an attribute items that contains a list of headers. See Remove Header for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyForProviderRemoveHeadersConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<ResponseHeadersPolicyForProviderRemoveHeadersConfigItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyForProviderRemoveHeadersConfigItems {
    /// The HTTP response header name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub header: Option<String>,
}

/// A configuration for a set of security-related HTTP response headers. See Security Headers Config for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyForProviderSecurityHeadersConfig {
    /// The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header. See Content Security Policy for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentSecurityPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub content_security_policy:
        Option<ResponseHeadersPolicyForProviderSecurityHeadersConfigContentSecurityPolicy>,
    /// Determines whether CloudFront includes the X-Content-Type-Options HTTP response header with its value set to nosniff. See Content Type Options for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentTypeOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub content_type_options:
        Option<ResponseHeadersPolicyForProviderSecurityHeadersConfigContentTypeOptions>,
    /// Determines whether CloudFront includes the X-Frame-Options HTTP response header and the header’s value. See Frame Options for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "frameOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub frame_options: Option<ResponseHeadersPolicyForProviderSecurityHeadersConfigFrameOptions>,
    /// Determines whether CloudFront includes the Referrer-Policy HTTP response header and the header’s value. See Referrer Policy for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "referrerPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub referrer_policy:
        Option<ResponseHeadersPolicyForProviderSecurityHeadersConfigReferrerPolicy>,
    /// Determines whether CloudFront includes the Strict-Transport-Security HTTP response header and the header’s value. See Strict Transport Security for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "strictTransportSecurity"
    )]
    #[builder(default, setter(strip_option))]
    pub strict_transport_security:
        Option<ResponseHeadersPolicyForProviderSecurityHeadersConfigStrictTransportSecurity>,
    /// Determine whether CloudFront includes the X-XSS-Protection HTTP response header and the header’s value. See XSS Protection for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xssProtection"
    )]
    #[builder(default, setter(strip_option))]
    pub xss_protection: Option<ResponseHeadersPolicyForProviderSecurityHeadersConfigXssProtection>,
}

/// The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header. See Content Security Policy for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyForProviderSecurityHeadersConfigContentSecurityPolicy {
    /// The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header. See Content Security Policy for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentSecurityPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub content_security_policy: Option<String>,
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
}

/// Determines whether CloudFront includes the X-Content-Type-Options HTTP response header with its value set to nosniff. See Content Type Options for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyForProviderSecurityHeadersConfigContentTypeOptions {
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
}

/// Determines whether CloudFront includes the X-Frame-Options HTTP response header and the header’s value. See Frame Options for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyForProviderSecurityHeadersConfigFrameOptions {
    /// The value of the X-Frame-Options HTTP response header. Valid values: DENY | SAMEORIGIN
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "frameOption"
    )]
    #[builder(default, setter(strip_option))]
    pub frame_option: Option<String>,
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
}

/// Determines whether CloudFront includes the Referrer-Policy HTTP response header and the header’s value. See Referrer Policy for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyForProviderSecurityHeadersConfigReferrerPolicy {
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
    /// Determines whether CloudFront includes the Referrer-Policy HTTP response header and the header’s value. See Referrer Policy for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "referrerPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub referrer_policy: Option<String>,
}

/// Determines whether CloudFront includes the Strict-Transport-Security HTTP response header and the header’s value. See Strict Transport Security for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyForProviderSecurityHeadersConfigStrictTransportSecurity {
    /// A number that CloudFront uses as the value for the Access-Control-Max-Age HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlMaxAgeSec"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_max_age_sec: Option<f64>,
    /// Whether CloudFront includes the includeSubDomains directive in the Strict-Transport-Security HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includeSubdomains"
    )]
    #[builder(default, setter(strip_option))]
    pub include_subdomains: Option<bool>,
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
    /// Whether CloudFront includes the preload directive in the Strict-Transport-Security HTTP response header.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub preload: Option<bool>,
}

/// Determine whether CloudFront includes the X-XSS-Protection HTTP response header and the header’s value. See XSS Protection for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyForProviderSecurityHeadersConfigXssProtection {
    /// Whether CloudFront includes the mode=block directive in the X-XSS-Protection header.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modeBlock")]
    #[builder(default, setter(strip_option))]
    pub mode_block: Option<bool>,
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
    /// A Boolean value that determines the value of the X-XSS-Protection HTTP response header. When this setting is true, the value of the X-XSS-Protection header is 1. When this setting is false, the value of the X-XSS-Protection header is 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub protection: Option<bool>,
    /// A reporting URI, which CloudFront uses as the value of the report directive in the X-XSS-Protection header. You cannot specify a report_uri when mode_block is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reportUri")]
    #[builder(default, setter(strip_option))]
    pub report_uri: Option<String>,
}

/// A configuration for enabling the Server-Timing header in HTTP responses sent from CloudFront. See Server Timing Headers Config for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyForProviderServerTimingHeadersConfig {
    /// A Whether CloudFront adds the Server-Timing header to HTTP responses that it sends in response to requests that match a cache behavior that's associated with this response headers policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// A number 0–100 (inclusive) that specifies the percentage of responses that you want CloudFront to add the Server-Timing header to. Valid range: Minimum value of 0.0. Maximum value of 100.0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "samplingRate"
    )]
    #[builder(default, setter(strip_option))]
    pub sampling_rate: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyInitProvider {
    /// A comment to describe the response headers policy. The comment cannot be longer than 128 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub comment: Option<String>,
    /// A configuration for a set of HTTP response headers that are used for Cross-Origin Resource Sharing (CORS). See Cors Config for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "corsConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub cors_config: Option<ResponseHeadersPolicyInitProviderCorsConfig>,
    /// Object that contains an attribute items that contains a list of custom headers. See Custom Header for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customHeadersConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub custom_headers_config: Option<ResponseHeadersPolicyInitProviderCustomHeadersConfig>,
    /// The current version of the response headers policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub etag: Option<String>,
    /// A unique name to identify the response headers policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// A configuration for a set of HTTP headers to remove from the HTTP response. Object that contains an attribute items that contains a list of headers. See Remove Header for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "removeHeadersConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub remove_headers_config: Option<ResponseHeadersPolicyInitProviderRemoveHeadersConfig>,
    /// A configuration for a set of security-related HTTP response headers. See Security Headers Config for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityHeadersConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub security_headers_config: Option<ResponseHeadersPolicyInitProviderSecurityHeadersConfig>,
    /// A configuration for enabling the Server-Timing header in HTTP responses sent from CloudFront. See Server Timing Headers Config for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverTimingHeadersConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub server_timing_headers_config:
        Option<ResponseHeadersPolicyInitProviderServerTimingHeadersConfig>,
}

/// A configuration for a set of HTTP response headers that are used for Cross-Origin Resource Sharing (CORS). See Cors Config for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyInitProviderCorsConfig {
    /// A Boolean value that CloudFront uses as the value for the Access-Control-Allow-Credentials HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlAllowCredentials"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_allow_credentials: Option<bool>,
    /// Object that contains an attribute items that contains a list of HTTP header names that CloudFront includes as values for the Access-Control-Allow-Headers HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlAllowHeaders"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_allow_headers:
        Option<ResponseHeadersPolicyInitProviderCorsConfigAccessControlAllowHeaders>,
    /// Object that contains an attribute items that contains a list of HTTP methods that CloudFront includes as values for the Access-Control-Allow-Methods HTTP response header. Valid values: GET | POST | OPTIONS | PUT | DELETE | HEAD | ALL
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlAllowMethods"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_allow_methods:
        Option<ResponseHeadersPolicyInitProviderCorsConfigAccessControlAllowMethods>,
    /// Object that contains an attribute items that contains a list of origins that CloudFront can use as the value for the Access-Control-Allow-Origin HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlAllowOrigins"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_allow_origins:
        Option<ResponseHeadersPolicyInitProviderCorsConfigAccessControlAllowOrigins>,
    /// Object that contains an attribute items that contains a list of HTTP headers that CloudFront includes as values for the Access-Control-Expose-Headers HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlExposeHeaders"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_expose_headers:
        Option<ResponseHeadersPolicyInitProviderCorsConfigAccessControlExposeHeaders>,
    /// A number that CloudFront uses as the value for the Access-Control-Max-Age HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlMaxAgeSec"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_max_age_sec: Option<f64>,
    /// A Boolean value that determines how CloudFront behaves for the HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "originOverride"
    )]
    #[builder(default, setter(strip_option))]
    pub origin_override: Option<bool>,
}

/// Object that contains an attribute items that contains a list of HTTP header names that CloudFront includes as values for the Access-Control-Allow-Headers HTTP response header.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyInitProviderCorsConfigAccessControlAllowHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// Object that contains an attribute items that contains a list of HTTP methods that CloudFront includes as values for the Access-Control-Allow-Methods HTTP response header. Valid values: GET | POST | OPTIONS | PUT | DELETE | HEAD | ALL
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyInitProviderCorsConfigAccessControlAllowMethods {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// Object that contains an attribute items that contains a list of origins that CloudFront can use as the value for the Access-Control-Allow-Origin HTTP response header.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyInitProviderCorsConfigAccessControlAllowOrigins {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// Object that contains an attribute items that contains a list of HTTP headers that CloudFront includes as values for the Access-Control-Expose-Headers HTTP response header.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyInitProviderCorsConfigAccessControlExposeHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// Object that contains an attribute items that contains a list of custom headers. See Custom Header for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyInitProviderCustomHeadersConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<ResponseHeadersPolicyInitProviderCustomHeadersConfigItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyInitProviderCustomHeadersConfigItems {
    /// The HTTP response header name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub header: Option<String>,
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
    /// The value for the HTTP response header.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// A configuration for a set of HTTP headers to remove from the HTTP response. Object that contains an attribute items that contains a list of headers. See Remove Header for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyInitProviderRemoveHeadersConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<ResponseHeadersPolicyInitProviderRemoveHeadersConfigItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyInitProviderRemoveHeadersConfigItems {
    /// The HTTP response header name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub header: Option<String>,
}

/// A configuration for a set of security-related HTTP response headers. See Security Headers Config for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyInitProviderSecurityHeadersConfig {
    /// The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header. See Content Security Policy for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentSecurityPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub content_security_policy:
        Option<ResponseHeadersPolicyInitProviderSecurityHeadersConfigContentSecurityPolicy>,
    /// Determines whether CloudFront includes the X-Content-Type-Options HTTP response header with its value set to nosniff. See Content Type Options for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentTypeOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub content_type_options:
        Option<ResponseHeadersPolicyInitProviderSecurityHeadersConfigContentTypeOptions>,
    /// Determines whether CloudFront includes the X-Frame-Options HTTP response header and the header’s value. See Frame Options for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "frameOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub frame_options: Option<ResponseHeadersPolicyInitProviderSecurityHeadersConfigFrameOptions>,
    /// Determines whether CloudFront includes the Referrer-Policy HTTP response header and the header’s value. See Referrer Policy for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "referrerPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub referrer_policy:
        Option<ResponseHeadersPolicyInitProviderSecurityHeadersConfigReferrerPolicy>,
    /// Determines whether CloudFront includes the Strict-Transport-Security HTTP response header and the header’s value. See Strict Transport Security for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "strictTransportSecurity"
    )]
    #[builder(default, setter(strip_option))]
    pub strict_transport_security:
        Option<ResponseHeadersPolicyInitProviderSecurityHeadersConfigStrictTransportSecurity>,
    /// Determine whether CloudFront includes the X-XSS-Protection HTTP response header and the header’s value. See XSS Protection for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xssProtection"
    )]
    #[builder(default, setter(strip_option))]
    pub xss_protection: Option<ResponseHeadersPolicyInitProviderSecurityHeadersConfigXssProtection>,
}

/// The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header. See Content Security Policy for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyInitProviderSecurityHeadersConfigContentSecurityPolicy {
    /// The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header. See Content Security Policy for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentSecurityPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub content_security_policy: Option<String>,
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
}

/// Determines whether CloudFront includes the X-Content-Type-Options HTTP response header with its value set to nosniff. See Content Type Options for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyInitProviderSecurityHeadersConfigContentTypeOptions {
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
}

/// Determines whether CloudFront includes the X-Frame-Options HTTP response header and the header’s value. See Frame Options for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyInitProviderSecurityHeadersConfigFrameOptions {
    /// The value of the X-Frame-Options HTTP response header. Valid values: DENY | SAMEORIGIN
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "frameOption"
    )]
    #[builder(default, setter(strip_option))]
    pub frame_option: Option<String>,
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
}

/// Determines whether CloudFront includes the Referrer-Policy HTTP response header and the header’s value. See Referrer Policy for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyInitProviderSecurityHeadersConfigReferrerPolicy {
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
    /// Determines whether CloudFront includes the Referrer-Policy HTTP response header and the header’s value. See Referrer Policy for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "referrerPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub referrer_policy: Option<String>,
}

/// Determines whether CloudFront includes the Strict-Transport-Security HTTP response header and the header’s value. See Strict Transport Security for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyInitProviderSecurityHeadersConfigStrictTransportSecurity {
    /// A number that CloudFront uses as the value for the Access-Control-Max-Age HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlMaxAgeSec"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_max_age_sec: Option<f64>,
    /// Whether CloudFront includes the includeSubDomains directive in the Strict-Transport-Security HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includeSubdomains"
    )]
    #[builder(default, setter(strip_option))]
    pub include_subdomains: Option<bool>,
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
    /// Whether CloudFront includes the preload directive in the Strict-Transport-Security HTTP response header.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub preload: Option<bool>,
}

/// Determine whether CloudFront includes the X-XSS-Protection HTTP response header and the header’s value. See XSS Protection for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyInitProviderSecurityHeadersConfigXssProtection {
    /// Whether CloudFront includes the mode=block directive in the X-XSS-Protection header.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modeBlock")]
    #[builder(default, setter(strip_option))]
    pub mode_block: Option<bool>,
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
    /// A Boolean value that determines the value of the X-XSS-Protection HTTP response header. When this setting is true, the value of the X-XSS-Protection header is 1. When this setting is false, the value of the X-XSS-Protection header is 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub protection: Option<bool>,
    /// A reporting URI, which CloudFront uses as the value of the report directive in the X-XSS-Protection header. You cannot specify a report_uri when mode_block is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reportUri")]
    #[builder(default, setter(strip_option))]
    pub report_uri: Option<String>,
}

/// A configuration for enabling the Server-Timing header in HTTP responses sent from CloudFront. See Server Timing Headers Config for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyInitProviderServerTimingHeadersConfig {
    /// A Whether CloudFront adds the Server-Timing header to HTTP responses that it sends in response to requests that match a cache behavior that's associated with this response headers policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// A number 0–100 (inclusive) that specifies the percentage of responses that you want CloudFront to add the Server-Timing header to. Valid range: Minimum value of 0.0. Maximum value of 100.0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "samplingRate"
    )]
    #[builder(default, setter(strip_option))]
    pub sampling_rate: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ResponseHeadersPolicyProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ResponseHeadersPolicyProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ResponseHeadersPolicyProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResponseHeadersPolicyProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResponseHeadersPolicyProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<ResponseHeadersPolicyPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<ResponseHeadersPolicyPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ResponseHeadersPolicyPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ResponseHeadersPolicyPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ResponseHeadersPolicyPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResponseHeadersPolicyPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResponseHeadersPolicyPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ResponseHeadersPolicyStatus defines the observed state of ResponseHeadersPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<ResponseHeadersPolicyStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatusAtProvider {
    /// A comment to describe the response headers policy. The comment cannot be longer than 128 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub comment: Option<String>,
    /// A configuration for a set of HTTP response headers that are used for Cross-Origin Resource Sharing (CORS). See Cors Config for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "corsConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub cors_config: Option<ResponseHeadersPolicyStatusAtProviderCorsConfig>,
    /// Object that contains an attribute items that contains a list of custom headers. See Custom Header for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customHeadersConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub custom_headers_config: Option<ResponseHeadersPolicyStatusAtProviderCustomHeadersConfig>,
    /// The current version of the response headers policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub etag: Option<String>,
    /// The identifier for the response headers policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// A unique name to identify the response headers policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub name: Option<String>,
    /// A configuration for a set of HTTP headers to remove from the HTTP response. Object that contains an attribute items that contains a list of headers. See Remove Header for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "removeHeadersConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub remove_headers_config: Option<ResponseHeadersPolicyStatusAtProviderRemoveHeadersConfig>,
    /// A configuration for a set of security-related HTTP response headers. See Security Headers Config for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityHeadersConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub security_headers_config: Option<ResponseHeadersPolicyStatusAtProviderSecurityHeadersConfig>,
    /// A configuration for enabling the Server-Timing header in HTTP responses sent from CloudFront. See Server Timing Headers Config for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serverTimingHeadersConfig"
    )]
    #[builder(default, setter(strip_option))]
    pub server_timing_headers_config:
        Option<ResponseHeadersPolicyStatusAtProviderServerTimingHeadersConfig>,
}

/// A configuration for a set of HTTP response headers that are used for Cross-Origin Resource Sharing (CORS). See Cors Config for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatusAtProviderCorsConfig {
    /// A Boolean value that CloudFront uses as the value for the Access-Control-Allow-Credentials HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlAllowCredentials"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_allow_credentials: Option<bool>,
    /// Object that contains an attribute items that contains a list of HTTP header names that CloudFront includes as values for the Access-Control-Allow-Headers HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlAllowHeaders"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_allow_headers:
        Option<ResponseHeadersPolicyStatusAtProviderCorsConfigAccessControlAllowHeaders>,
    /// Object that contains an attribute items that contains a list of HTTP methods that CloudFront includes as values for the Access-Control-Allow-Methods HTTP response header. Valid values: GET | POST | OPTIONS | PUT | DELETE | HEAD | ALL
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlAllowMethods"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_allow_methods:
        Option<ResponseHeadersPolicyStatusAtProviderCorsConfigAccessControlAllowMethods>,
    /// Object that contains an attribute items that contains a list of origins that CloudFront can use as the value for the Access-Control-Allow-Origin HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlAllowOrigins"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_allow_origins:
        Option<ResponseHeadersPolicyStatusAtProviderCorsConfigAccessControlAllowOrigins>,
    /// Object that contains an attribute items that contains a list of HTTP headers that CloudFront includes as values for the Access-Control-Expose-Headers HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlExposeHeaders"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_expose_headers:
        Option<ResponseHeadersPolicyStatusAtProviderCorsConfigAccessControlExposeHeaders>,
    /// A number that CloudFront uses as the value for the Access-Control-Max-Age HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlMaxAgeSec"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_max_age_sec: Option<f64>,
    /// A Boolean value that determines how CloudFront behaves for the HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "originOverride"
    )]
    #[builder(default, setter(strip_option))]
    pub origin_override: Option<bool>,
}

/// Object that contains an attribute items that contains a list of HTTP header names that CloudFront includes as values for the Access-Control-Allow-Headers HTTP response header.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatusAtProviderCorsConfigAccessControlAllowHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// Object that contains an attribute items that contains a list of HTTP methods that CloudFront includes as values for the Access-Control-Allow-Methods HTTP response header. Valid values: GET | POST | OPTIONS | PUT | DELETE | HEAD | ALL
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatusAtProviderCorsConfigAccessControlAllowMethods {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// Object that contains an attribute items that contains a list of origins that CloudFront can use as the value for the Access-Control-Allow-Origin HTTP response header.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatusAtProviderCorsConfigAccessControlAllowOrigins {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// Object that contains an attribute items that contains a list of HTTP headers that CloudFront includes as values for the Access-Control-Expose-Headers HTTP response header.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatusAtProviderCorsConfigAccessControlExposeHeaders {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<String>>,
}

/// Object that contains an attribute items that contains a list of custom headers. See Custom Header for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatusAtProviderCustomHeadersConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<ResponseHeadersPolicyStatusAtProviderCustomHeadersConfigItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatusAtProviderCustomHeadersConfigItems {
    /// The HTTP response header name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub header: Option<String>,
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
    /// The value for the HTTP response header.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub value: Option<String>,
}

/// A configuration for a set of HTTP headers to remove from the HTTP response. Object that contains an attribute items that contains a list of headers. See Remove Header for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatusAtProviderRemoveHeadersConfig {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub items: Option<Vec<ResponseHeadersPolicyStatusAtProviderRemoveHeadersConfigItems>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatusAtProviderRemoveHeadersConfigItems {
    /// The HTTP response header name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub header: Option<String>,
}

/// A configuration for a set of security-related HTTP response headers. See Security Headers Config for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatusAtProviderSecurityHeadersConfig {
    /// The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header. See Content Security Policy for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentSecurityPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub content_security_policy:
        Option<ResponseHeadersPolicyStatusAtProviderSecurityHeadersConfigContentSecurityPolicy>,
    /// Determines whether CloudFront includes the X-Content-Type-Options HTTP response header with its value set to nosniff. See Content Type Options for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentTypeOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub content_type_options:
        Option<ResponseHeadersPolicyStatusAtProviderSecurityHeadersConfigContentTypeOptions>,
    /// Determines whether CloudFront includes the X-Frame-Options HTTP response header and the header’s value. See Frame Options for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "frameOptions"
    )]
    #[builder(default, setter(strip_option))]
    pub frame_options:
        Option<ResponseHeadersPolicyStatusAtProviderSecurityHeadersConfigFrameOptions>,
    /// Determines whether CloudFront includes the Referrer-Policy HTTP response header and the header’s value. See Referrer Policy for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "referrerPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub referrer_policy:
        Option<ResponseHeadersPolicyStatusAtProviderSecurityHeadersConfigReferrerPolicy>,
    /// Determines whether CloudFront includes the Strict-Transport-Security HTTP response header and the header’s value. See Strict Transport Security for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "strictTransportSecurity"
    )]
    #[builder(default, setter(strip_option))]
    pub strict_transport_security:
        Option<ResponseHeadersPolicyStatusAtProviderSecurityHeadersConfigStrictTransportSecurity>,
    /// Determine whether CloudFront includes the X-XSS-Protection HTTP response header and the header’s value. See XSS Protection for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "xssProtection"
    )]
    #[builder(default, setter(strip_option))]
    pub xss_protection:
        Option<ResponseHeadersPolicyStatusAtProviderSecurityHeadersConfigXssProtection>,
}

/// The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header. See Content Security Policy for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatusAtProviderSecurityHeadersConfigContentSecurityPolicy {
    /// The policy directives and their values that CloudFront includes as values for the Content-Security-Policy HTTP response header. See Content Security Policy for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "contentSecurityPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub content_security_policy: Option<String>,
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
}

/// Determines whether CloudFront includes the X-Content-Type-Options HTTP response header with its value set to nosniff. See Content Type Options for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatusAtProviderSecurityHeadersConfigContentTypeOptions {
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
}

/// Determines whether CloudFront includes the X-Frame-Options HTTP response header and the header’s value. See Frame Options for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatusAtProviderSecurityHeadersConfigFrameOptions {
    /// The value of the X-Frame-Options HTTP response header. Valid values: DENY | SAMEORIGIN
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "frameOption"
    )]
    #[builder(default, setter(strip_option))]
    pub frame_option: Option<String>,
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
}

/// Determines whether CloudFront includes the Referrer-Policy HTTP response header and the header’s value. See Referrer Policy for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatusAtProviderSecurityHeadersConfigReferrerPolicy {
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
    /// Determines whether CloudFront includes the Referrer-Policy HTTP response header and the header’s value. See Referrer Policy for more information.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "referrerPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub referrer_policy: Option<String>,
}

/// Determines whether CloudFront includes the Strict-Transport-Security HTTP response header and the header’s value. See Strict Transport Security for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatusAtProviderSecurityHeadersConfigStrictTransportSecurity {
    /// A number that CloudFront uses as the value for the Access-Control-Max-Age HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "accessControlMaxAgeSec"
    )]
    #[builder(default, setter(strip_option))]
    pub access_control_max_age_sec: Option<f64>,
    /// Whether CloudFront includes the includeSubDomains directive in the Strict-Transport-Security HTTP response header.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "includeSubdomains"
    )]
    #[builder(default, setter(strip_option))]
    pub include_subdomains: Option<bool>,
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
    /// Whether CloudFront includes the preload directive in the Strict-Transport-Security HTTP response header.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub preload: Option<bool>,
}

/// Determine whether CloudFront includes the X-XSS-Protection HTTP response header and the header’s value. See XSS Protection for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatusAtProviderSecurityHeadersConfigXssProtection {
    /// Whether CloudFront includes the mode=block directive in the X-XSS-Protection header.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "modeBlock")]
    #[builder(default, setter(strip_option))]
    pub mode_block: Option<bool>,
    /// Whether CloudFront overrides a response header with the same name received from the origin with the header specifies here.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    #[builder(default, setter(strip_option))]
    pub r#override: Option<bool>,
    /// A Boolean value that determines the value of the X-XSS-Protection HTTP response header. When this setting is true, the value of the X-XSS-Protection header is 1. When this setting is false, the value of the X-XSS-Protection header is 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub protection: Option<bool>,
    /// A reporting URI, which CloudFront uses as the value of the report directive in the X-XSS-Protection header. You cannot specify a report_uri when mode_block is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reportUri")]
    #[builder(default, setter(strip_option))]
    pub report_uri: Option<String>,
}

/// A configuration for enabling the Server-Timing header in HTTP responses sent from CloudFront. See Server Timing Headers Config for more information.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ResponseHeadersPolicyStatusAtProviderServerTimingHeadersConfig {
    /// A Whether CloudFront adds the Server-Timing header to HTTP responses that it sends in response to requests that match a cache behavior that's associated with this response headers policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub enabled: Option<bool>,
    /// A number 0–100 (inclusive) that specifies the percentage of responses that you want CloudFront to add the Server-Timing header to. Valid range: Minimum value of 0.0. Maximum value of 100.0.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "samplingRate"
    )]
    #[builder(default, setter(strip_option))]
    pub sampling_rate: Option<f64>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.3

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::BTreeMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
    pub use typed_builder::TypedBuilder;
}
use self::prelude::*;

/// ComputeEnvironmentSpec defines the desired state of ComputeEnvironment
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
#[kube(
    group = "batch.aws.upbound.io",
    version = "v1beta1",
    kind = "ComputeEnvironment",
    plural = "computeenvironments"
)]
#[kube(status = "ComputeEnvironmentStatus")]
pub struct ComputeEnvironmentSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub deletion_policy: Option<ComputeEnvironmentDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ComputeEnvironmentForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub init_provider: Option<ComputeEnvironmentInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    #[builder(default, setter(strip_option))]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    #[builder(default, setter(strip_option))]
    pub provider_config_ref: Option<ComputeEnvironmentProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    #[builder(default, setter(strip_option))]
    pub publish_connection_details_to: Option<ComputeEnvironmentPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    #[builder(default, setter(strip_option))]
    pub write_connection_secret_to_ref: Option<ComputeEnvironmentWriteConnectionSecretToRef>,
}

/// ComputeEnvironmentSpec defines the desired state of ComputeEnvironment
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProvider {
    /// Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "computeResources"
    )]
    #[builder(default, setter(strip_option))]
    pub compute_resources: Option<ComputeEnvironmentForProviderComputeResources>,
    /// Details for the Amazon EKS cluster that supports the compute environment. See details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eksConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub eks_configuration: Option<ComputeEnvironmentForProviderEksConfiguration>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRole"
    )]
    #[builder(default, setter(strip_option))]
    pub service_role: Option<String>,
    /// Reference to a Role in iam to populate serviceRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRoleRef"
    )]
    #[builder(default, setter(strip_option))]
    pub service_role_ref: Option<ComputeEnvironmentForProviderServiceRoleRef>,
    /// Selector for a Role in iam to populate serviceRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRoleSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub service_role_selector: Option<ComputeEnvironmentForProviderServiceRoleSelector>,
    /// The state of the compute environment. If the state is ENABLED, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are ENABLED or DISABLED. Defaults to ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub state: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// The type of the compute environment. Valid items are MANAGED or UNMANAGED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// Specifies the infrastructure update policy for the compute environment. See details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "updatePolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub update_policy: Option<ComputeEnvironmentForProviderUpdatePolicy>,
}

/// Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResources {
    /// The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. For valid values, refer to the AWS documentation. Defaults to BEST_FIT. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allocationStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub allocation_strategy: Option<String>,
    /// Integer of maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (20), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. If you leave this field empty, the default value is 100% of the On-Demand price. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bidPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub bid_percentage: Option<f64>,
    /// The desired number of EC2 vCPUS in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "desiredVcpus"
    )]
    #[builder(default, setter(strip_option))]
    pub desired_vcpus: Option<f64>,
    /// Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2. This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2Configuration"
    )]
    #[builder(default, setter(strip_option))]
    pub ec2_configuration:
        Option<Vec<ComputeEnvironmentForProviderComputeResourcesEc2Configuration>>,
    /// The EC2 key pair that is used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2KeyPair"
    )]
    #[builder(default, setter(strip_option))]
    pub ec2_key_pair: Option<String>,
    /// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified. (Deprecated, use ec2_configuration image_id_override instead)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageId")]
    #[builder(default, setter(strip_option))]
    pub image_id: Option<String>,
    /// The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRole"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_role: Option<String>,
    /// Reference to a InstanceProfile in iam to populate instanceRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRoleRef"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_role_ref: Option<ComputeEnvironmentForProviderComputeResourcesInstanceRoleRef>,
    /// Selector for a InstanceProfile in iam to populate instanceRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRoleSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_role_selector:
        Option<ComputeEnvironmentForProviderComputeResourcesInstanceRoleSelector>,
    /// A list of instance types that may be launched. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<Vec<String>>,
    /// The launch template to use for your compute resources. See details below. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template: Option<ComputeEnvironmentForProviderComputeResourcesLaunchTemplate>,
    /// The maximum number of EC2 vCPUs that an environment can reach.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxVcpus")]
    #[builder(default, setter(strip_option))]
    pub max_vcpus: Option<f64>,
    /// The minimum number of EC2 vCPUs that an environment should maintain. For EC2 or SPOT compute environments, if the parameter is not explicitly defined, a 0 default value will be set. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minVcpus")]
    #[builder(default, setter(strip_option))]
    pub min_vcpus: Option<f64>,
    /// The Amazon EC2 placement group to associate with your compute resources.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_group: Option<String>,
    /// Reference to a PlacementGroup in ec2 to populate placementGroup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementGroupRef"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_group_ref: Option<ComputeEnvironmentForProviderComputeResourcesPlacementGroupRef>,
    /// Selector for a PlacementGroup in ec2 to populate placementGroup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementGroupSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_group_selector:
        Option<ComputeEnvironmentForProviderComputeResourcesPlacementGroupSelector>,
    /// A list of EC2 security group that are associated with instances launched in the compute environment. This parameter is required for Fargate compute environments.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    #[builder(default, setter(strip_option))]
    pub security_group_ids: Option<Vec<String>>,
    /// References to SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIdsRefs"
    )]
    #[builder(default, setter(strip_option))]
    pub security_group_ids_refs:
        Option<Vec<ComputeEnvironmentForProviderComputeResourcesSecurityGroupIdsRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIdsSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub security_group_ids_selector:
        Option<ComputeEnvironmentForProviderComputeResourcesSecurityGroupIdsSelector>,
    /// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotIamFleetRole"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_iam_fleet_role: Option<String>,
    /// A list of VPC subnets into which the compute resources are launched.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub subnets: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate subnets.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetsRefs"
    )]
    #[builder(default, setter(strip_option))]
    pub subnets_refs: Option<Vec<ComputeEnvironmentForProviderComputeResourcesSubnetsRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnets.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetsSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub subnets_selector: Option<ComputeEnvironmentForProviderComputeResourcesSubnetsSelector>,
    /// Key-value pair tags to be applied to resources that are launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// The type of compute environment. Valid items are EC2, SPOT, FARGATE or FARGATE_SPOT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResourcesEc2Configuration {
    /// The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the image_id argument in the compute_resources block.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageIdOverride"
    )]
    #[builder(default, setter(strip_option))]
    pub image_id_override: Option<String>,
    /// The image type to match with the instance type to select an AMI. If the image_id_override parameter isn't specified, then a recent Amazon ECS-optimized Amazon Linux 2 AMI (ECS_AL2) is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageType")]
    #[builder(default, setter(strip_option))]
    pub image_type: Option<String>,
}

/// Reference to a InstanceProfile in iam to populate instanceRole.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResourcesInstanceRoleRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentForProviderComputeResourcesInstanceRoleRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResourcesInstanceRoleRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ComputeEnvironmentForProviderComputeResourcesInstanceRoleRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ComputeEnvironmentForProviderComputeResourcesInstanceRoleRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderComputeResourcesInstanceRoleRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderComputeResourcesInstanceRoleRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a InstanceProfile in iam to populate instanceRole.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResourcesInstanceRoleSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentForProviderComputeResourcesInstanceRoleSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResourcesInstanceRoleSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ComputeEnvironmentForProviderComputeResourcesInstanceRoleSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<ComputeEnvironmentForProviderComputeResourcesInstanceRoleSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderComputeResourcesInstanceRoleSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderComputeResourcesInstanceRoleSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The launch template to use for your compute resources. See details below. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResourcesLaunchTemplate {
    /// ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateId"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_id: Option<String>,
    /// Name of the launch template.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateName"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_name: Option<String>,
    /// The version number of the launch template. Default: The default version of the launch template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

/// Reference to a PlacementGroup in ec2 to populate placementGroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResourcesPlacementGroupRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentForProviderComputeResourcesPlacementGroupRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResourcesPlacementGroupRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ComputeEnvironmentForProviderComputeResourcesPlacementGroupRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<ComputeEnvironmentForProviderComputeResourcesPlacementGroupRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderComputeResourcesPlacementGroupRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderComputeResourcesPlacementGroupRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a PlacementGroup in ec2 to populate placementGroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResourcesPlacementGroupSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentForProviderComputeResourcesPlacementGroupSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResourcesPlacementGroupSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ComputeEnvironmentForProviderComputeResourcesPlacementGroupSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<ComputeEnvironmentForProviderComputeResourcesPlacementGroupSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderComputeResourcesPlacementGroupSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderComputeResourcesPlacementGroupSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResourcesSecurityGroupIdsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentForProviderComputeResourcesSecurityGroupIdsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResourcesSecurityGroupIdsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ComputeEnvironmentForProviderComputeResourcesSecurityGroupIdsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<ComputeEnvironmentForProviderComputeResourcesSecurityGroupIdsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderComputeResourcesSecurityGroupIdsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderComputeResourcesSecurityGroupIdsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResourcesSecurityGroupIdsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentForProviderComputeResourcesSecurityGroupIdsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResourcesSecurityGroupIdsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<
        ComputeEnvironmentForProviderComputeResourcesSecurityGroupIdsSelectorPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<ComputeEnvironmentForProviderComputeResourcesSecurityGroupIdsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderComputeResourcesSecurityGroupIdsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderComputeResourcesSecurityGroupIdsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResourcesSubnetsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentForProviderComputeResourcesSubnetsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResourcesSubnetsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ComputeEnvironmentForProviderComputeResourcesSubnetsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ComputeEnvironmentForProviderComputeResourcesSubnetsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderComputeResourcesSubnetsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderComputeResourcesSubnetsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnets.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResourcesSubnetsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentForProviderComputeResourcesSubnetsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderComputeResourcesSubnetsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ComputeEnvironmentForProviderComputeResourcesSubnetsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ComputeEnvironmentForProviderComputeResourcesSubnetsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderComputeResourcesSubnetsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderComputeResourcesSubnetsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Details for the Amazon EKS cluster that supports the compute environment. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderEksConfiguration {
    /// The Amazon Resource Name (ARN) of the Amazon EKS cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eksClusterArn"
    )]
    #[builder(default, setter(strip_option))]
    pub eks_cluster_arn: Option<String>,
    /// The namespace of the Amazon EKS cluster. AWS Batch manages pods in this namespace.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kubernetesNamespace"
    )]
    #[builder(default, setter(strip_option))]
    pub kubernetes_namespace: Option<String>,
}

/// Reference to a Role in iam to populate serviceRole.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderServiceRoleRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentForProviderServiceRoleRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderServiceRoleRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ComputeEnvironmentForProviderServiceRoleRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ComputeEnvironmentForProviderServiceRoleRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderServiceRoleRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderServiceRoleRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate serviceRole.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderServiceRoleSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentForProviderServiceRoleSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderServiceRoleSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ComputeEnvironmentForProviderServiceRoleSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ComputeEnvironmentForProviderServiceRoleSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderServiceRoleSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentForProviderServiceRoleSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Specifies the infrastructure update policy for the compute environment. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentForProviderUpdatePolicy {
    /// Specifies the job timeout (in minutes) when the compute environment infrastructure is updated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jobExecutionTimeoutMinutes"
    )]
    #[builder(default, setter(strip_option))]
    pub job_execution_timeout_minutes: Option<f64>,
    /// Specifies whether jobs are automatically terminated when the computer environment infrastructure is updated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminateJobsOnUpdate"
    )]
    #[builder(default, setter(strip_option))]
    pub terminate_jobs_on_update: Option<bool>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProvider {
    /// Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "computeResources"
    )]
    #[builder(default, setter(strip_option))]
    pub compute_resources: Option<ComputeEnvironmentInitProviderComputeResources>,
    /// Details for the Amazon EKS cluster that supports the compute environment. See details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eksConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub eks_configuration: Option<ComputeEnvironmentInitProviderEksConfiguration>,
    /// The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRole"
    )]
    #[builder(default, setter(strip_option))]
    pub service_role: Option<String>,
    /// Reference to a Role in iam to populate serviceRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRoleRef"
    )]
    #[builder(default, setter(strip_option))]
    pub service_role_ref: Option<ComputeEnvironmentInitProviderServiceRoleRef>,
    /// Selector for a Role in iam to populate serviceRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRoleSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub service_role_selector: Option<ComputeEnvironmentInitProviderServiceRoleSelector>,
    /// The state of the compute environment. If the state is ENABLED, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are ENABLED or DISABLED. Defaults to ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub state: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// The type of the compute environment. Valid items are MANAGED or UNMANAGED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// Specifies the infrastructure update policy for the compute environment. See details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "updatePolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub update_policy: Option<ComputeEnvironmentInitProviderUpdatePolicy>,
}

/// Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResources {
    /// The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. For valid values, refer to the AWS documentation. Defaults to BEST_FIT. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allocationStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub allocation_strategy: Option<String>,
    /// Integer of maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (20), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. If you leave this field empty, the default value is 100% of the On-Demand price. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bidPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub bid_percentage: Option<f64>,
    /// The desired number of EC2 vCPUS in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "desiredVcpus"
    )]
    #[builder(default, setter(strip_option))]
    pub desired_vcpus: Option<f64>,
    /// Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2. This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2Configuration"
    )]
    #[builder(default, setter(strip_option))]
    pub ec2_configuration:
        Option<Vec<ComputeEnvironmentInitProviderComputeResourcesEc2Configuration>>,
    /// The EC2 key pair that is used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2KeyPair"
    )]
    #[builder(default, setter(strip_option))]
    pub ec2_key_pair: Option<String>,
    /// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified. (Deprecated, use ec2_configuration image_id_override instead)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageId")]
    #[builder(default, setter(strip_option))]
    pub image_id: Option<String>,
    /// The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRole"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_role: Option<String>,
    /// Reference to a InstanceProfile in iam to populate instanceRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRoleRef"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_role_ref: Option<ComputeEnvironmentInitProviderComputeResourcesInstanceRoleRef>,
    /// Selector for a InstanceProfile in iam to populate instanceRole.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRoleSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_role_selector:
        Option<ComputeEnvironmentInitProviderComputeResourcesInstanceRoleSelector>,
    /// A list of instance types that may be launched. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<Vec<String>>,
    /// The launch template to use for your compute resources. See details below. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template: Option<ComputeEnvironmentInitProviderComputeResourcesLaunchTemplate>,
    /// The maximum number of EC2 vCPUs that an environment can reach.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxVcpus")]
    #[builder(default, setter(strip_option))]
    pub max_vcpus: Option<f64>,
    /// The minimum number of EC2 vCPUs that an environment should maintain. For EC2 or SPOT compute environments, if the parameter is not explicitly defined, a 0 default value will be set. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minVcpus")]
    #[builder(default, setter(strip_option))]
    pub min_vcpus: Option<f64>,
    /// The Amazon EC2 placement group to associate with your compute resources.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_group: Option<String>,
    /// Reference to a PlacementGroup in ec2 to populate placementGroup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementGroupRef"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_group_ref:
        Option<ComputeEnvironmentInitProviderComputeResourcesPlacementGroupRef>,
    /// Selector for a PlacementGroup in ec2 to populate placementGroup.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementGroupSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_group_selector:
        Option<ComputeEnvironmentInitProviderComputeResourcesPlacementGroupSelector>,
    /// A list of EC2 security group that are associated with instances launched in the compute environment. This parameter is required for Fargate compute environments.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    #[builder(default, setter(strip_option))]
    pub security_group_ids: Option<Vec<String>>,
    /// References to SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIdsRefs"
    )]
    #[builder(default, setter(strip_option))]
    pub security_group_ids_refs:
        Option<Vec<ComputeEnvironmentInitProviderComputeResourcesSecurityGroupIdsRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIdsSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub security_group_ids_selector:
        Option<ComputeEnvironmentInitProviderComputeResourcesSecurityGroupIdsSelector>,
    /// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotIamFleetRole"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_iam_fleet_role: Option<String>,
    /// A list of VPC subnets into which the compute resources are launched.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub subnets: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate subnets.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetsRefs"
    )]
    #[builder(default, setter(strip_option))]
    pub subnets_refs: Option<Vec<ComputeEnvironmentInitProviderComputeResourcesSubnetsRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnets.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "subnetsSelector"
    )]
    #[builder(default, setter(strip_option))]
    pub subnets_selector: Option<ComputeEnvironmentInitProviderComputeResourcesSubnetsSelector>,
    /// Key-value pair tags to be applied to resources that are launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// The type of compute environment. Valid items are EC2, SPOT, FARGATE or FARGATE_SPOT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResourcesEc2Configuration {
    /// The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the image_id argument in the compute_resources block.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageIdOverride"
    )]
    #[builder(default, setter(strip_option))]
    pub image_id_override: Option<String>,
    /// The image type to match with the instance type to select an AMI. If the image_id_override parameter isn't specified, then a recent Amazon ECS-optimized Amazon Linux 2 AMI (ECS_AL2) is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageType")]
    #[builder(default, setter(strip_option))]
    pub image_type: Option<String>,
}

/// Reference to a InstanceProfile in iam to populate instanceRole.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResourcesInstanceRoleRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentInitProviderComputeResourcesInstanceRoleRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResourcesInstanceRoleRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ComputeEnvironmentInitProviderComputeResourcesInstanceRoleRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ComputeEnvironmentInitProviderComputeResourcesInstanceRoleRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderComputeResourcesInstanceRoleRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderComputeResourcesInstanceRoleRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a InstanceProfile in iam to populate instanceRole.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResourcesInstanceRoleSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentInitProviderComputeResourcesInstanceRoleSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResourcesInstanceRoleSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ComputeEnvironmentInitProviderComputeResourcesInstanceRoleSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<ComputeEnvironmentInitProviderComputeResourcesInstanceRoleSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderComputeResourcesInstanceRoleSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderComputeResourcesInstanceRoleSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The launch template to use for your compute resources. See details below. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResourcesLaunchTemplate {
    /// ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateId"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_id: Option<String>,
    /// Name of the launch template.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateName"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_name: Option<String>,
    /// The version number of the launch template. Default: The default version of the launch template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

/// Reference to a PlacementGroup in ec2 to populate placementGroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResourcesPlacementGroupRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentInitProviderComputeResourcesPlacementGroupRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResourcesPlacementGroupRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ComputeEnvironmentInitProviderComputeResourcesPlacementGroupRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<ComputeEnvironmentInitProviderComputeResourcesPlacementGroupRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderComputeResourcesPlacementGroupRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderComputeResourcesPlacementGroupRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a PlacementGroup in ec2 to populate placementGroup.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResourcesPlacementGroupSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentInitProviderComputeResourcesPlacementGroupSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResourcesPlacementGroupSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<
        ComputeEnvironmentInitProviderComputeResourcesPlacementGroupSelectorPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<ComputeEnvironmentInitProviderComputeResourcesPlacementGroupSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderComputeResourcesPlacementGroupSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderComputeResourcesPlacementGroupSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResourcesSecurityGroupIdsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentInitProviderComputeResourcesSecurityGroupIdsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResourcesSecurityGroupIdsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ComputeEnvironmentInitProviderComputeResourcesSecurityGroupIdsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<ComputeEnvironmentInitProviderComputeResourcesSecurityGroupIdsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderComputeResourcesSecurityGroupIdsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderComputeResourcesSecurityGroupIdsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResourcesSecurityGroupIdsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy:
        Option<ComputeEnvironmentInitProviderComputeResourcesSecurityGroupIdsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResourcesSecurityGroupIdsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<
        ComputeEnvironmentInitProviderComputeResourcesSecurityGroupIdsSelectorPolicyResolution,
    >,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve:
        Option<ComputeEnvironmentInitProviderComputeResourcesSecurityGroupIdsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderComputeResourcesSecurityGroupIdsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderComputeResourcesSecurityGroupIdsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResourcesSubnetsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentInitProviderComputeResourcesSubnetsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResourcesSubnetsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ComputeEnvironmentInitProviderComputeResourcesSubnetsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ComputeEnvironmentInitProviderComputeResourcesSubnetsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderComputeResourcesSubnetsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderComputeResourcesSubnetsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnets.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResourcesSubnetsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentInitProviderComputeResourcesSubnetsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderComputeResourcesSubnetsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution:
        Option<ComputeEnvironmentInitProviderComputeResourcesSubnetsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ComputeEnvironmentInitProviderComputeResourcesSubnetsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderComputeResourcesSubnetsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderComputeResourcesSubnetsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Details for the Amazon EKS cluster that supports the compute environment. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderEksConfiguration {
    /// The Amazon Resource Name (ARN) of the Amazon EKS cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eksClusterArn"
    )]
    #[builder(default, setter(strip_option))]
    pub eks_cluster_arn: Option<String>,
    /// The namespace of the Amazon EKS cluster. AWS Batch manages pods in this namespace.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kubernetesNamespace"
    )]
    #[builder(default, setter(strip_option))]
    pub kubernetes_namespace: Option<String>,
}

/// Reference to a Role in iam to populate serviceRole.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderServiceRoleRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentInitProviderServiceRoleRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderServiceRoleRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ComputeEnvironmentInitProviderServiceRoleRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ComputeEnvironmentInitProviderServiceRoleRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderServiceRoleRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderServiceRoleRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate serviceRole.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderServiceRoleSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    #[builder(default, setter(strip_option))]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    #[builder(default, setter(strip_option))]
    pub match_labels: Option<BTreeMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentInitProviderServiceRoleSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderServiceRoleSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ComputeEnvironmentInitProviderServiceRoleSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ComputeEnvironmentInitProviderServiceRoleSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderServiceRoleSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentInitProviderServiceRoleSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Specifies the infrastructure update policy for the compute environment. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentInitProviderUpdatePolicy {
    /// Specifies the job timeout (in minutes) when the compute environment infrastructure is updated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jobExecutionTimeoutMinutes"
    )]
    #[builder(default, setter(strip_option))]
    pub job_execution_timeout_minutes: Option<f64>,
    /// Specifies whether jobs are automatically terminated when the computer environment infrastructure is updated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminateJobsOnUpdate"
    )]
    #[builder(default, setter(strip_option))]
    pub terminate_jobs_on_update: Option<bool>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ComputeEnvironmentProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ComputeEnvironmentProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    #[builder(default, setter(strip_option))]
    pub config_ref: Option<ComputeEnvironmentPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub metadata: Option<ComputeEnvironmentPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub policy: Option<ComputeEnvironmentPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolution: Option<ComputeEnvironmentPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub resolve: Option<ComputeEnvironmentPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ComputeEnvironmentPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub annotations: Option<BTreeMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub labels: Option<BTreeMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ComputeEnvironmentStatus defines the observed state of ComputeEnvironment.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    #[builder(default, setter(strip_option))]
    pub at_provider: Option<ComputeEnvironmentStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    #[builder(default, setter(strip_option))]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentStatusAtProvider {
    /// The Amazon Resource Name (ARN) of the compute environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub arn: Option<String>,
    /// Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "computeResources"
    )]
    #[builder(default, setter(strip_option))]
    pub compute_resources: Option<ComputeEnvironmentStatusAtProviderComputeResources>,
    /// The Amazon Resource Name (ARN) of the underlying Amazon ECS cluster used by the compute environment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ecsClusterArn"
    )]
    #[builder(default, setter(strip_option))]
    pub ecs_cluster_arn: Option<String>,
    /// Details for the Amazon EKS cluster that supports the compute environment. See details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eksConfiguration"
    )]
    #[builder(default, setter(strip_option))]
    pub eks_configuration: Option<ComputeEnvironmentStatusAtProviderEksConfiguration>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub id: Option<String>,
    /// The full Amazon Resource Name (ARN) of the IAM role that allows AWS Batch to make calls to other AWS services on your behalf.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "serviceRole"
    )]
    #[builder(default, setter(strip_option))]
    pub service_role: Option<String>,
    /// The state of the compute environment. If the state is ENABLED, then the compute environment accepts jobs from a queue and can scale out automatically based on queues. Valid items are ENABLED or DISABLED. Defaults to ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub state: Option<String>,
    /// The current status of the compute environment (for example, CREATING or VALID).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub status: Option<String>,
    /// A short, human-readable string to provide additional details about the current status of the compute environment.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "statusReason"
    )]
    #[builder(default, setter(strip_option))]
    pub status_reason: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    #[builder(default, setter(strip_option))]
    pub tags_all: Option<BTreeMap<String, String>>,
    /// The type of the compute environment. Valid items are MANAGED or UNMANAGED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
    /// Specifies the infrastructure update policy for the compute environment. See details below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "updatePolicy"
    )]
    #[builder(default, setter(strip_option))]
    pub update_policy: Option<ComputeEnvironmentStatusAtProviderUpdatePolicy>,
}

/// Details of the compute resources managed by the compute environment. This parameter is required for managed compute environments. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentStatusAtProviderComputeResources {
    /// The allocation strategy to use for the compute resource in case not enough instances of the best fitting instance type can be allocated. For valid values, refer to the AWS documentation. Defaults to BEST_FIT. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "allocationStrategy"
    )]
    #[builder(default, setter(strip_option))]
    pub allocation_strategy: Option<String>,
    /// Integer of maximum percentage that a Spot Instance price can be when compared with the On-Demand price for that instance type before instances are launched. For example, if your bid percentage is 20% (20), then the Spot price must be below 20% of the current On-Demand price for that EC2 instance. If you leave this field empty, the default value is 100% of the On-Demand price. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bidPercentage"
    )]
    #[builder(default, setter(strip_option))]
    pub bid_percentage: Option<f64>,
    /// The desired number of EC2 vCPUS in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "desiredVcpus"
    )]
    #[builder(default, setter(strip_option))]
    pub desired_vcpus: Option<f64>,
    /// Provides information used to select Amazon Machine Images (AMIs) for EC2 instances in the compute environment. If Ec2Configuration isn't specified, the default is ECS_AL2. This parameter isn't applicable to jobs that are running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2Configuration"
    )]
    #[builder(default, setter(strip_option))]
    pub ec2_configuration:
        Option<Vec<ComputeEnvironmentStatusAtProviderComputeResourcesEc2Configuration>>,
    /// The EC2 key pair that is used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "ec2KeyPair"
    )]
    #[builder(default, setter(strip_option))]
    pub ec2_key_pair: Option<String>,
    /// The Amazon Machine Image (AMI) ID used for instances launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified. (Deprecated, use ec2_configuration image_id_override instead)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageId")]
    #[builder(default, setter(strip_option))]
    pub image_id: Option<String>,
    /// The Amazon ECS instance role applied to Amazon EC2 instances in a compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceRole"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_role: Option<String>,
    /// A list of instance types that may be launched. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "instanceType"
    )]
    #[builder(default, setter(strip_option))]
    pub instance_type: Option<Vec<String>>,
    /// The launch template to use for your compute resources. See details below. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplate"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template: Option<ComputeEnvironmentStatusAtProviderComputeResourcesLaunchTemplate>,
    /// The maximum number of EC2 vCPUs that an environment can reach.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxVcpus")]
    #[builder(default, setter(strip_option))]
    pub max_vcpus: Option<f64>,
    /// The minimum number of EC2 vCPUs that an environment should maintain. For EC2 or SPOT compute environments, if the parameter is not explicitly defined, a 0 default value will be set. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minVcpus")]
    #[builder(default, setter(strip_option))]
    pub min_vcpus: Option<f64>,
    /// The Amazon EC2 placement group to associate with your compute resources.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "placementGroup"
    )]
    #[builder(default, setter(strip_option))]
    pub placement_group: Option<String>,
    /// A list of EC2 security group that are associated with instances launched in the compute environment. This parameter is required for Fargate compute environments.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    #[builder(default, setter(strip_option))]
    pub security_group_ids: Option<Vec<String>>,
    /// The Amazon Resource Name (ARN) of the Amazon EC2 Spot Fleet IAM role applied to a SPOT compute environment. This parameter is required for SPOT compute environments. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "spotIamFleetRole"
    )]
    #[builder(default, setter(strip_option))]
    pub spot_iam_fleet_role: Option<String>,
    /// A list of VPC subnets into which the compute resources are launched.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub subnets: Option<Vec<String>>,
    /// Key-value pair tags to be applied to resources that are launched in the compute environment. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub tags: Option<BTreeMap<String, String>>,
    /// The type of compute environment. Valid items are EC2, SPOT, FARGATE or FARGATE_SPOT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    #[builder(default, setter(strip_option))]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentStatusAtProviderComputeResourcesEc2Configuration {
    /// The AMI ID used for instances launched in the compute environment that match the image type. This setting overrides the image_id argument in the compute_resources block.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageIdOverride"
    )]
    #[builder(default, setter(strip_option))]
    pub image_id_override: Option<String>,
    /// The image type to match with the instance type to select an AMI. If the image_id_override parameter isn't specified, then a recent Amazon ECS-optimized Amazon Linux 2 AMI (ECS_AL2) is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageType")]
    #[builder(default, setter(strip_option))]
    pub image_type: Option<String>,
}

/// The launch template to use for your compute resources. See details below. This parameter isn't applicable to jobs running on Fargate resources, and shouldn't be specified.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentStatusAtProviderComputeResourcesLaunchTemplate {
    /// ID of the launch template. You must specify either the launch template ID or launch template name in the request, but not both.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateId"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_id: Option<String>,
    /// Name of the launch template.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "launchTemplateName"
    )]
    #[builder(default, setter(strip_option))]
    pub launch_template_name: Option<String>,
    /// The version number of the launch template. Default: The default version of the launch template.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    #[builder(default, setter(strip_option))]
    pub version: Option<String>,
}

/// Details for the Amazon EKS cluster that supports the compute environment. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentStatusAtProviderEksConfiguration {
    /// The Amazon Resource Name (ARN) of the Amazon EKS cluster.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "eksClusterArn"
    )]
    #[builder(default, setter(strip_option))]
    pub eks_cluster_arn: Option<String>,
    /// The namespace of the Amazon EKS cluster. AWS Batch manages pods in this namespace.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kubernetesNamespace"
    )]
    #[builder(default, setter(strip_option))]
    pub kubernetes_namespace: Option<String>,
}

/// Specifies the infrastructure update policy for the compute environment. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, TypedBuilder, JsonSchema)]
pub struct ComputeEnvironmentStatusAtProviderUpdatePolicy {
    /// Specifies the job timeout (in minutes) when the compute environment infrastructure is updated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "jobExecutionTimeoutMinutes"
    )]
    #[builder(default, setter(strip_option))]
    pub job_execution_timeout_minutes: Option<f64>,
    /// Specifies whether jobs are automatically terminated when the computer environment infrastructure is updated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "terminateJobsOnUpdate"
    )]
    #[builder(default, setter(strip_option))]
    pub terminate_jobs_on_update: Option<bool>,
}

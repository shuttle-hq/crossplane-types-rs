#![allow(dead_code, unused_mut, unused_imports, unused_variables)]

use std::{collections::HashMap, fmt::Write, path::Path, sync::LazyLock};

use itertools::Itertools;
use k8s_openapi::apiextensions_apiserver::pkg::apis::apiextensions::v1::CustomResourceDefinition;
use zip::HasZipMetadata;

const RESOURCES_DIR: LazyLock<&Path> = LazyLock::new(|| {
    <str as AsRef<Path>>::as_ref(
        concat!(
          env!("CARGO_MANIFEST_DIR"),
          "/src",
          "/resources"
        )
    )
});

const DOT_YAML: &str = ".yaml";
const AWS_CRDS_PATH: &str = "provider-upjet-aws-1.21.1/package/crds/";
const AWS_PROVIDER_SRC: &str =
    "https://github.com/crossplane-contrib/provider-upjet-aws/archive/refs/tags/v1.21.1.zip";

const AWS_RESOURCES: &[&str] = &[
    "account",
    "acm",
    "apprunner",
    "autoscaling",
    "autoscalingplans",
    "cloudwatchlogs",
    "ec2",
    "ecr",
    "ecrpublic",
    "ecs",
    "iam",
    "imagebuilder",
    "memorydb",
    "rds",
    "route53",
    "s3",
    "secretsmanager",
    "accessanalyzer",
    "acmpca",
    "amp",
    "amplify",
    "apigateway",
    "apigatewayv2",
    "appautoscaling",
    "appconfig",
    "appflow",
    "appintegrations",
    "applicationinsights",
    "appmesh",
    "appstream",
    "appsync",
    "athena",
    "backup",
    "batch",
    "bedrock",
    "bedrockagent",
    "budgets",
    "ce",
    "chime",
    "cloud9",
    "cloudcontrol",
    "cloudformation",
    "cloudfront",
    "cloudsearch",
    "cloudtrail",
    "cloudwatch",
    "cloudwatchevents",
    "codeartifact",
    "codecommit",
    "codeguruprofiler",
    "codepipeline",
    "codestarconnections",
    "codestarnotifications",
    "cognitoidentity",
    "cognitoidp",
    "configservice",
    "connect",
    "cur",
    "dataexchange",
    "datapipeline",
    "datasync",
    "dax",
    "deploy",
    "detective",
    "devicefarm",
    "directconnect",
    "dlm",
    "dms",
    "docdb",
    "ds",
    "dynamodb",
    "efs",
    "eks",
    "elasticache",
    "elasticbeanstalk",
    "elasticsearch",
    "elastictranscoder",
    "elb",
    "elbv2",
    "emr",
    "emrserverless",
    "evidently",
    "firehose",
    "fis",
    "fsx",
    "gamelift",
    "glacier",
    "globalaccelerator",
    "glue",
    "grafana",
    "guardduty",
    "identitystore",
    "inspector",
    "inspector2",
    "iot",
    "ivs",
    "kafka",
    "kafkaconnect",
    "kendra",
    "keyspaces",
    "kinesis",
    "kinesisanalytics",
    "kinesisanalyticsv2",
    "kinesisvideo",
    "kms",
    "lakeformation",
    "lambda",
    "lexmodels",
    "licensemanager",
    "lightsail",
    "location",
    "macie2",
    "mediaconvert",
    "medialive",
    "mediapackage",
    "mediastore",
    "mq",
    "mwaa",
    "neptune",
    "networkfirewall",
    "networkmanager",
    "opensearch",
    "opensearchserverless",
    "opsworks",
    "organizations",
    "osis",
    "pinpoint",
    "pipes",
    "qldb",
    "quicksight",
    "ram",
    "redshift",
    "redshiftserverless",
    "resourcegroups",
    "rolesanywhere",
    "route53recoverycontrolconfig",
    "route53recoveryreadiness",
    "route53resolver",
    "rum",
    "s3control",
    "sagemaker",
    "scheduler",
    "schemas",
    "securityhub",
    "serverlessrepo",
    "servicecatalog",
    "servicediscovery",
    "servicequotas",
    "ses",
    "sesv2",
    "sfn",
    "signer",
    "simpledb",
    "sns",
    "sqs",
    "ssm",
    "ssoadmin",
    "swf",
    "timestreamwrite",
    "transcribe",
    "transfer",
    "vpc",
    "vpclattice",
    "waf",
    "wafregional",
    "wafv2",
    "workspaces",
    "xray",
];

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let mut aws_provider_src = zip::ZipArchive::new(std::io::Cursor::new(
        reqwest::get(AWS_PROVIDER_SRC).await?.bytes().await?,
    ))?;

    let mut crds = HashMap::<String, HashMap<String, CustomResourceDefinition>>::new();

    for idx in 0..aws_provider_src.len() {
        let mut file = aws_provider_src.by_index(idx)?;

        if !file.is_file()
            || !file.name().starts_with(AWS_CRDS_PATH)
            || !file.name().ends_with(DOT_YAML)
        {
            continue;
        }

        let crd_name = file
            .name()
            .replace(AWS_CRDS_PATH, "")
            .replace(DOT_YAML, "")
            .replace("_", ".");

        let mut parts = crd_name.split(".");

        let resource = parts.next().unwrap();

        if !AWS_RESOURCES.contains(&resource) {
            continue;
        }

        let type_ = parts.last().unwrap();

        crds.entry(resource.to_string())
            .or_default()
            .insert(type_.into(), serde_yaml::from_reader(file)?);
    }

    let generator = kopium::Kopium {
        docs: true,
        auto: true,
        builders: true,
        smart_derive_elision: true,
        ..Default::default()
    }
    .prepare();

    let aws = RESOURCES_DIR.join("aws");
    let (mut aws_module, mut feature_section) = (String::new(), "[features]\n".to_string());

    std::fs::create_dir_all(&aws)?;

    for (resource, types) in crds
        .into_iter()
        .sorted_by(|(left, _), (right, _)| left.cmp(right))
    {
        let (mut module, mut uses) = (String::new(), String::new());

        let dest = aws.join(&resource);

        std::fs::create_dir_all(&dest)?;

        for (type_, crd) in types {
            std::fs::write(
                dest.join(&type_).with_extension("rs"),
                generator.generate(crd).await?,
            )?;

            writeln!(&mut module, "pub mod {};", &type_,)?;
            writeln!(&mut uses, "pub use {}::*;\n", &type_,)?;
        }

        let mut target = std::fs::File::options()
            .write(true)
            .create(true)
            .open(dest.with_extension("rs"))?;

        writeln!(
            &mut target as &mut dyn std::io::Write,
            "{}\n{}",
            module, uses
        )?;

        writeln!(
            &mut aws_module,
            "#[cfg(feature = \"aws-{}\")]\npub mod {};",
            &resource, &resource
        )?;

        writeln!(&mut feature_section, "aws-{} = []", &resource)?;
    }

    let mut target = std::fs::File::options()
        .write(true)
        .create(true)
        .open(aws.with_extension("rs"))?;

    writeln!(&mut target as &mut dyn std::io::Write, "{}", aws_module,)?;

    println!("{feature_section}");

    Ok(())
}

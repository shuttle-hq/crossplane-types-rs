// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// TableSpec defines the desired state of Table
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "keyspaces.aws.upbound.io", version = "v1beta2", kind = "Table", plural = "tables")]
#[kube(status = "TableStatus")]
pub struct TableSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<TableDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: TableForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<TableInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<TableProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<TablePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<TableWriteConnectionSecretToRef>,
}

/// TableSpec defines the desired state of Table
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TableDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableForProvider {
    /// Specifies the read/write throughput capacity mode for the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacitySpecification")]
    pub capacity_specification: Option<TableForProviderCapacitySpecification>,
    /// Enables client-side timestamps for the table. By default, the setting is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSideTimestamps")]
    pub client_side_timestamps: Option<TableForProviderClientSideTimestamps>,
    /// A description of the table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<TableForProviderComment>,
    /// The default Time to Live setting in seconds for the table. More information can be found in the Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTimeToLive")]
    pub default_time_to_live: Option<f64>,
    /// Specifies how the encryption key for encryption at rest is managed for the table. More information can be found in the Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionSpecification")]
    pub encryption_specification: Option<TableForProviderEncryptionSpecification>,
    /// The name of the keyspace that the table is going to be created in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyspaceName")]
    pub keyspace_name: Option<String>,
    /// Reference to a Keyspace in keyspaces to populate keyspaceName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyspaceNameRef")]
    pub keyspace_name_ref: Option<TableForProviderKeyspaceNameRef>,
    /// Selector for a Keyspace in keyspaces to populate keyspaceName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyspaceNameSelector")]
    pub keyspace_name_selector: Option<TableForProviderKeyspaceNameSelector>,
    /// Specifies if point-in-time recovery is enabled or disabled for the table. More information can be found in the Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pointInTimeRecovery")]
    pub point_in_time_recovery: Option<TableForProviderPointInTimeRecovery>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Describes the schema of the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schemaDefinition")]
    pub schema_definition: Option<TableForProviderSchemaDefinition>,
    /// The name of the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    pub table_name: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Enables Time to Live custom settings for the table. More information can be found in the Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<TableForProviderTtl>,
}

/// Specifies the read/write throughput capacity mode for the table.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableForProviderCapacitySpecification {
    /// The throughput capacity specified for read operations defined in read capacity units (RCUs).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readCapacityUnits")]
    pub read_capacity_units: Option<f64>,
    /// The read/write throughput capacity mode for a table. Valid values: PAY_PER_REQUEST, PROVISIONED. The default value is PAY_PER_REQUEST.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throughputMode")]
    pub throughput_mode: Option<String>,
    /// The throughput capacity specified for write operations defined in write capacity units (WCUs).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeCapacityUnits")]
    pub write_capacity_units: Option<f64>,
}

/// Enables client-side timestamps for the table. By default, the setting is disabled.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableForProviderClientSideTimestamps {
    /// Shows how to enable client-side timestamps settings for the specified table. Valid values: ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// A description of the table.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableForProviderComment {
    /// A description of the table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}

/// Specifies how the encryption key for encryption at rest is managed for the table. More information can be found in the Developer Guide.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableForProviderEncryptionSpecification {
    /// The Amazon Resource Name (ARN) of the customer managed KMS key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyIdentifier")]
    pub kms_key_identifier: Option<String>,
    /// The encryption option specified for the table. Valid values: AWS_OWNED_KMS_KEY, CUSTOMER_MANAGED_KMS_KEY. The default value is AWS_OWNED_KMS_KEY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Reference to a Keyspace in keyspaces to populate keyspaceName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableForProviderKeyspaceNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TableForProviderKeyspaceNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableForProviderKeyspaceNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TableForProviderKeyspaceNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TableForProviderKeyspaceNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TableForProviderKeyspaceNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TableForProviderKeyspaceNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Keyspace in keyspaces to populate keyspaceName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableForProviderKeyspaceNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TableForProviderKeyspaceNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableForProviderKeyspaceNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TableForProviderKeyspaceNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TableForProviderKeyspaceNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TableForProviderKeyspaceNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TableForProviderKeyspaceNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Specifies if point-in-time recovery is enabled or disabled for the table. More information can be found in the Developer Guide.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableForProviderPointInTimeRecovery {
    /// Shows how to enable client-side timestamps settings for the specified table. Valid values: ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Describes the schema of the table.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableForProviderSchemaDefinition {
    /// The columns that are part of the clustering key of the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusteringKey")]
    pub clustering_key: Option<Vec<TableForProviderSchemaDefinitionClusteringKey>>,
    /// The regular columns of the table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub column: Option<Vec<TableForProviderSchemaDefinitionColumn>>,
    /// The columns that are part of the partition key of the table .
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "partitionKey")]
    pub partition_key: Option<Vec<TableForProviderSchemaDefinitionPartitionKey>>,
    /// The columns that have been defined as STATIC. Static columns store values that are shared by all rows in the same partition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "staticColumn")]
    pub static_column: Option<Vec<TableForProviderSchemaDefinitionStaticColumn>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableForProviderSchemaDefinitionClusteringKey {
    /// The name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The order modifier. Valid values: ASC, DESC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orderBy")]
    pub order_by: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableForProviderSchemaDefinitionColumn {
    /// The name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The encryption option specified for the table. Valid values: AWS_OWNED_KMS_KEY, CUSTOMER_MANAGED_KMS_KEY. The default value is AWS_OWNED_KMS_KEY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableForProviderSchemaDefinitionPartitionKey {
    /// The name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableForProviderSchemaDefinitionStaticColumn {
    /// The name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Enables Time to Live custom settings for the table. More information can be found in the Developer Guide.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableForProviderTtl {
    /// Shows how to enable client-side timestamps settings for the specified table. Valid values: ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableInitProvider {
    /// Specifies the read/write throughput capacity mode for the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacitySpecification")]
    pub capacity_specification: Option<TableInitProviderCapacitySpecification>,
    /// Enables client-side timestamps for the table. By default, the setting is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSideTimestamps")]
    pub client_side_timestamps: Option<TableInitProviderClientSideTimestamps>,
    /// A description of the table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<TableInitProviderComment>,
    /// The default Time to Live setting in seconds for the table. More information can be found in the Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTimeToLive")]
    pub default_time_to_live: Option<f64>,
    /// Specifies how the encryption key for encryption at rest is managed for the table. More information can be found in the Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionSpecification")]
    pub encryption_specification: Option<TableInitProviderEncryptionSpecification>,
    /// The name of the keyspace that the table is going to be created in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyspaceName")]
    pub keyspace_name: Option<String>,
    /// Reference to a Keyspace in keyspaces to populate keyspaceName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyspaceNameRef")]
    pub keyspace_name_ref: Option<TableInitProviderKeyspaceNameRef>,
    /// Selector for a Keyspace in keyspaces to populate keyspaceName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyspaceNameSelector")]
    pub keyspace_name_selector: Option<TableInitProviderKeyspaceNameSelector>,
    /// Specifies if point-in-time recovery is enabled or disabled for the table. More information can be found in the Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pointInTimeRecovery")]
    pub point_in_time_recovery: Option<TableInitProviderPointInTimeRecovery>,
    /// Describes the schema of the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schemaDefinition")]
    pub schema_definition: Option<TableInitProviderSchemaDefinition>,
    /// The name of the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    pub table_name: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Enables Time to Live custom settings for the table. More information can be found in the Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<TableInitProviderTtl>,
}

/// Specifies the read/write throughput capacity mode for the table.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableInitProviderCapacitySpecification {
    /// The throughput capacity specified for read operations defined in read capacity units (RCUs).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readCapacityUnits")]
    pub read_capacity_units: Option<f64>,
    /// The read/write throughput capacity mode for a table. Valid values: PAY_PER_REQUEST, PROVISIONED. The default value is PAY_PER_REQUEST.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throughputMode")]
    pub throughput_mode: Option<String>,
    /// The throughput capacity specified for write operations defined in write capacity units (WCUs).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeCapacityUnits")]
    pub write_capacity_units: Option<f64>,
}

/// Enables client-side timestamps for the table. By default, the setting is disabled.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableInitProviderClientSideTimestamps {
    /// Shows how to enable client-side timestamps settings for the specified table. Valid values: ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// A description of the table.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableInitProviderComment {
    /// A description of the table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}

/// Specifies how the encryption key for encryption at rest is managed for the table. More information can be found in the Developer Guide.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableInitProviderEncryptionSpecification {
    /// The Amazon Resource Name (ARN) of the customer managed KMS key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyIdentifier")]
    pub kms_key_identifier: Option<String>,
    /// The encryption option specified for the table. Valid values: AWS_OWNED_KMS_KEY, CUSTOMER_MANAGED_KMS_KEY. The default value is AWS_OWNED_KMS_KEY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Reference to a Keyspace in keyspaces to populate keyspaceName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableInitProviderKeyspaceNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TableInitProviderKeyspaceNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableInitProviderKeyspaceNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TableInitProviderKeyspaceNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TableInitProviderKeyspaceNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TableInitProviderKeyspaceNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TableInitProviderKeyspaceNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Keyspace in keyspaces to populate keyspaceName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableInitProviderKeyspaceNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TableInitProviderKeyspaceNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableInitProviderKeyspaceNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TableInitProviderKeyspaceNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TableInitProviderKeyspaceNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TableInitProviderKeyspaceNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TableInitProviderKeyspaceNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Specifies if point-in-time recovery is enabled or disabled for the table. More information can be found in the Developer Guide.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableInitProviderPointInTimeRecovery {
    /// Shows how to enable client-side timestamps settings for the specified table. Valid values: ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Describes the schema of the table.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableInitProviderSchemaDefinition {
    /// The columns that are part of the clustering key of the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusteringKey")]
    pub clustering_key: Option<Vec<TableInitProviderSchemaDefinitionClusteringKey>>,
    /// The regular columns of the table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub column: Option<Vec<TableInitProviderSchemaDefinitionColumn>>,
    /// The columns that are part of the partition key of the table .
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "partitionKey")]
    pub partition_key: Option<Vec<TableInitProviderSchemaDefinitionPartitionKey>>,
    /// The columns that have been defined as STATIC. Static columns store values that are shared by all rows in the same partition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "staticColumn")]
    pub static_column: Option<Vec<TableInitProviderSchemaDefinitionStaticColumn>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableInitProviderSchemaDefinitionClusteringKey {
    /// The name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The order modifier. Valid values: ASC, DESC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orderBy")]
    pub order_by: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableInitProviderSchemaDefinitionColumn {
    /// The name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The encryption option specified for the table. Valid values: AWS_OWNED_KMS_KEY, CUSTOMER_MANAGED_KMS_KEY. The default value is AWS_OWNED_KMS_KEY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableInitProviderSchemaDefinitionPartitionKey {
    /// The name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableInitProviderSchemaDefinitionStaticColumn {
    /// The name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Enables Time to Live custom settings for the table. More information can be found in the Developer Guide.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableInitProviderTtl {
    /// Shows how to enable client-side timestamps settings for the specified table. Valid values: ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TableProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TableProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TableProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TableProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TableProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TablePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<TablePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<TablePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TablePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TablePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TablePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TablePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TablePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TablePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TablePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TablePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// TableStatus defines the observed state of Table.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<TableStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableStatusAtProvider {
    /// The ARN of the table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Specifies the read/write throughput capacity mode for the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacitySpecification")]
    pub capacity_specification: Option<TableStatusAtProviderCapacitySpecification>,
    /// Enables client-side timestamps for the table. By default, the setting is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSideTimestamps")]
    pub client_side_timestamps: Option<TableStatusAtProviderClientSideTimestamps>,
    /// A description of the table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub comment: Option<TableStatusAtProviderComment>,
    /// The default Time to Live setting in seconds for the table. More information can be found in the Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTimeToLive")]
    pub default_time_to_live: Option<f64>,
    /// Specifies how the encryption key for encryption at rest is managed for the table. More information can be found in the Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionSpecification")]
    pub encryption_specification: Option<TableStatusAtProviderEncryptionSpecification>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of the keyspace that the table is going to be created in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyspaceName")]
    pub keyspace_name: Option<String>,
    /// Specifies if point-in-time recovery is enabled or disabled for the table. More information can be found in the Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pointInTimeRecovery")]
    pub point_in_time_recovery: Option<TableStatusAtProviderPointInTimeRecovery>,
    /// Describes the schema of the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schemaDefinition")]
    pub schema_definition: Option<TableStatusAtProviderSchemaDefinition>,
    /// The name of the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    pub table_name: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// Enables Time to Live custom settings for the table. More information can be found in the Developer Guide.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<TableStatusAtProviderTtl>,
}

/// Specifies the read/write throughput capacity mode for the table.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableStatusAtProviderCapacitySpecification {
    /// The throughput capacity specified for read operations defined in read capacity units (RCUs).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readCapacityUnits")]
    pub read_capacity_units: Option<f64>,
    /// The read/write throughput capacity mode for a table. Valid values: PAY_PER_REQUEST, PROVISIONED. The default value is PAY_PER_REQUEST.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throughputMode")]
    pub throughput_mode: Option<String>,
    /// The throughput capacity specified for write operations defined in write capacity units (WCUs).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeCapacityUnits")]
    pub write_capacity_units: Option<f64>,
}

/// Enables client-side timestamps for the table. By default, the setting is disabled.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableStatusAtProviderClientSideTimestamps {
    /// Shows how to enable client-side timestamps settings for the specified table. Valid values: ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// A description of the table.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableStatusAtProviderComment {
    /// A description of the table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}

/// Specifies how the encryption key for encryption at rest is managed for the table. More information can be found in the Developer Guide.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableStatusAtProviderEncryptionSpecification {
    /// The Amazon Resource Name (ARN) of the customer managed KMS key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyIdentifier")]
    pub kms_key_identifier: Option<String>,
    /// The encryption option specified for the table. Valid values: AWS_OWNED_KMS_KEY, CUSTOMER_MANAGED_KMS_KEY. The default value is AWS_OWNED_KMS_KEY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Specifies if point-in-time recovery is enabled or disabled for the table. More information can be found in the Developer Guide.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableStatusAtProviderPointInTimeRecovery {
    /// Shows how to enable client-side timestamps settings for the specified table. Valid values: ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

/// Describes the schema of the table.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableStatusAtProviderSchemaDefinition {
    /// The columns that are part of the clustering key of the table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusteringKey")]
    pub clustering_key: Option<Vec<TableStatusAtProviderSchemaDefinitionClusteringKey>>,
    /// The regular columns of the table.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub column: Option<Vec<TableStatusAtProviderSchemaDefinitionColumn>>,
    /// The columns that are part of the partition key of the table .
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "partitionKey")]
    pub partition_key: Option<Vec<TableStatusAtProviderSchemaDefinitionPartitionKey>>,
    /// The columns that have been defined as STATIC. Static columns store values that are shared by all rows in the same partition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "staticColumn")]
    pub static_column: Option<Vec<TableStatusAtProviderSchemaDefinitionStaticColumn>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableStatusAtProviderSchemaDefinitionClusteringKey {
    /// The name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The order modifier. Valid values: ASC, DESC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orderBy")]
    pub order_by: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableStatusAtProviderSchemaDefinitionColumn {
    /// The name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The encryption option specified for the table. Valid values: AWS_OWNED_KMS_KEY, CUSTOMER_MANAGED_KMS_KEY. The default value is AWS_OWNED_KMS_KEY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableStatusAtProviderSchemaDefinitionPartitionKey {
    /// The name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableStatusAtProviderSchemaDefinitionStaticColumn {
    /// The name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Enables Time to Live custom settings for the table. More information can be found in the Developer Guide.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TableStatusAtProviderTtl {
    /// Shows how to enable client-side timestamps settings for the specified table. Valid values: ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}


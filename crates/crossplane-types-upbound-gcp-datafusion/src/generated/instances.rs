// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// InstanceSpec defines the desired state of Instance
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "datafusion.gcp.upbound.io", version = "v1beta2", kind = "Instance", plural = "instances")]
#[kube(status = "InstanceStatus")]
pub struct InstanceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<InstanceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: InstanceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<InstanceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<InstanceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<InstancePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<InstanceWriteConnectionSecretToRef>,
}

/// InstanceSpec defines the desired state of Instance
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProvider {
    /// List of accelerators enabled for this CDF instance.
    /// If accelerators are enabled it is possible a permadiff will be created with the Options field.
    /// Users will need to either manually update their state file to include these diffed options, or include the field in a lifecycle ignore changes block.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub accelerators: Option<Vec<InstanceForProviderAccelerators>>,
    /// The crypto key configuration. This field is used by the Customer-Managed Encryption Keys (CMEK) feature.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cryptoKeyConfig")]
    pub crypto_key_config: Option<InstanceForProviderCryptoKeyConfig>,
    /// User-managed service account to set on Dataproc when Cloud Data Fusion creates Dataproc to run data processing pipelines.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataprocServiceAccount")]
    pub dataproc_service_account: Option<String>,
    /// An optional description of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Display name for an instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// Option to enable granular role-based access control.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableRbac")]
    pub enable_rbac: Option<bool>,
    /// Option to enable Stackdriver Logging.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableStackdriverLogging")]
    pub enable_stackdriver_logging: Option<bool>,
    /// Option to enable Stackdriver Monitoring.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableStackdriverMonitoring")]
    pub enable_stackdriver_monitoring: Option<bool>,
    /// Option to enable and pass metadata for event publishing.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventPublishConfig")]
    pub event_publish_config: Option<InstanceForProviderEventPublishConfig>,
    /// The resource labels for instance to use to annotate any related underlying resources,
    /// such as Compute Engine VMs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Network configuration options. These are required when a private Data Fusion instance is to be created.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkConfig")]
    pub network_config: Option<InstanceForProviderNetworkConfig>,
    /// Map of additional options used to configure the behavior of Data Fusion instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<HashMap<String, String>>,
    /// Specifies whether the Data Fusion instance should be private. If set to
    /// true, all Data Fusion nodes will have private IP addresses and will not be
    /// able to access the public internet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateInstance")]
    pub private_instance: Option<bool>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The region of the Data Fusion instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// Represents the type of Data Fusion instance. Each type is configured with
    /// the default settings for processing and memory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Current version of the Data Fusion.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    /// Name of the zone in which the Data Fusion instance will be created. Only DEVELOPER instances use this field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderAccelerators {
    /// The type of an accelator for a CDF instance.
    /// Possible values are: CDC, HEALTHCARE, CCAI_INSIGHTS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorType")]
    pub accelerator_type: Option<String>,
    /// The type of an accelator for a CDF instance.
    /// Possible values are: ENABLED, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// The crypto key configuration. This field is used by the Customer-Managed Encryption Keys (CMEK) feature.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderCryptoKeyConfig {
    /// The name of the key which is used to encrypt/decrypt customer data. For key in Cloud KMS, the key should be in the format of projects//locations//keyRings//cryptoKeys/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyReference")]
    pub key_reference: Option<String>,
    /// Reference to a CryptoKey in kms to populate keyReference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyReferenceRef")]
    pub key_reference_ref: Option<InstanceForProviderCryptoKeyConfigKeyReferenceRef>,
    /// Selector for a CryptoKey in kms to populate keyReference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyReferenceSelector")]
    pub key_reference_selector: Option<InstanceForProviderCryptoKeyConfigKeyReferenceSelector>,
}

/// Reference to a CryptoKey in kms to populate keyReference.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderCryptoKeyConfigKeyReferenceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderCryptoKeyConfigKeyReferenceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderCryptoKeyConfigKeyReferenceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderCryptoKeyConfigKeyReferenceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderCryptoKeyConfigKeyReferenceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderCryptoKeyConfigKeyReferenceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderCryptoKeyConfigKeyReferenceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CryptoKey in kms to populate keyReference.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderCryptoKeyConfigKeyReferenceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderCryptoKeyConfigKeyReferenceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderCryptoKeyConfigKeyReferenceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderCryptoKeyConfigKeyReferenceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderCryptoKeyConfigKeyReferenceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderCryptoKeyConfigKeyReferenceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderCryptoKeyConfigKeyReferenceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Option to enable and pass metadata for event publishing.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderEventPublishConfig {
    /// Option to enable Event Publishing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The resource name of the Pub/Sub topic. Format: projects/{projectId}/topics/{topic_id}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
    /// Reference to a Topic in pubsub to populate topic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topicRef")]
    pub topic_ref: Option<InstanceForProviderEventPublishConfigTopicRef>,
    /// Selector for a Topic in pubsub to populate topic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topicSelector")]
    pub topic_selector: Option<InstanceForProviderEventPublishConfigTopicSelector>,
}

/// Reference to a Topic in pubsub to populate topic.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderEventPublishConfigTopicRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderEventPublishConfigTopicRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderEventPublishConfigTopicRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderEventPublishConfigTopicRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderEventPublishConfigTopicRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderEventPublishConfigTopicRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderEventPublishConfigTopicRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Topic in pubsub to populate topic.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderEventPublishConfigTopicSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderEventPublishConfigTopicSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderEventPublishConfigTopicSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderEventPublishConfigTopicSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderEventPublishConfigTopicSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderEventPublishConfigTopicSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderEventPublishConfigTopicSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Network configuration options. These are required when a private Data Fusion instance is to be created.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderNetworkConfig {
    /// Optional. Type of connection for establishing private IP connectivity between the Data Fusion customer project VPC and
    /// the corresponding tenant project from a predefined list of available connection modes.
    /// If this field is unspecified for a private instance, VPC peering is used.
    /// Possible values are: VPC_PEERING, PRIVATE_SERVICE_CONNECT_INTERFACES.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionType")]
    pub connection_type: Option<String>,
    /// The IP range in CIDR notation to use for the managed Data Fusion instance
    /// nodes. This range must not overlap with any other ranges used in the Data Fusion instance network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAllocation")]
    pub ip_allocation: Option<String>,
    /// Name of the network in the project with which the tenant project
    /// will be peered for executing pipelines. In case of shared VPC where the network resides in another host
    /// project the network should specified in the form of projects/{host-project-id}/global/networks/{network}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// Optional. Configuration for Private Service Connect.
    /// This is required only when using connection type PRIVATE_SERVICE_CONNECT_INTERFACES.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateServiceConnectConfig")]
    pub private_service_connect_config: Option<InstanceForProviderNetworkConfigPrivateServiceConnectConfig>,
}

/// Optional. Configuration for Private Service Connect.
/// This is required only when using connection type PRIVATE_SERVICE_CONNECT_INTERFACES.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderNetworkConfigPrivateServiceConnectConfig {
    /// Optional. The reference to the network attachment used to establish private connectivity.
    /// It will be of the form projects/{project-id}/regions/{region}/networkAttachments/{network-attachment-id}.
    /// This is required only when using connection type PRIVATE_SERVICE_CONNECT_INTERFACES.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkAttachment")]
    pub network_attachment: Option<String>,
    /// Optional. Input only. The CIDR block to which the CDF instance can't route traffic to in the consumer project VPC.
    /// The size of this block should be at least /25. This range should not overlap with the primary address range of any subnetwork used by the network attachment.
    /// This range can be used for other purposes in the consumer VPC as long as there is no requirement for CDF to reach destinations using these addresses.
    /// If this value is not provided, the server chooses a non RFC 1918 address range. The format of this field is governed by RFC 4632.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unreachableCidrBlock")]
    pub unreachable_cidr_block: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProvider {
    /// List of accelerators enabled for this CDF instance.
    /// If accelerators are enabled it is possible a permadiff will be created with the Options field.
    /// Users will need to either manually update their state file to include these diffed options, or include the field in a lifecycle ignore changes block.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub accelerators: Option<Vec<InstanceInitProviderAccelerators>>,
    /// The crypto key configuration. This field is used by the Customer-Managed Encryption Keys (CMEK) feature.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cryptoKeyConfig")]
    pub crypto_key_config: Option<InstanceInitProviderCryptoKeyConfig>,
    /// User-managed service account to set on Dataproc when Cloud Data Fusion creates Dataproc to run data processing pipelines.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataprocServiceAccount")]
    pub dataproc_service_account: Option<String>,
    /// An optional description of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Display name for an instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// Option to enable granular role-based access control.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableRbac")]
    pub enable_rbac: Option<bool>,
    /// Option to enable Stackdriver Logging.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableStackdriverLogging")]
    pub enable_stackdriver_logging: Option<bool>,
    /// Option to enable Stackdriver Monitoring.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableStackdriverMonitoring")]
    pub enable_stackdriver_monitoring: Option<bool>,
    /// Option to enable and pass metadata for event publishing.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventPublishConfig")]
    pub event_publish_config: Option<InstanceInitProviderEventPublishConfig>,
    /// The resource labels for instance to use to annotate any related underlying resources,
    /// such as Compute Engine VMs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Network configuration options. These are required when a private Data Fusion instance is to be created.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkConfig")]
    pub network_config: Option<InstanceInitProviderNetworkConfig>,
    /// Map of additional options used to configure the behavior of Data Fusion instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<HashMap<String, String>>,
    /// Specifies whether the Data Fusion instance should be private. If set to
    /// true, all Data Fusion nodes will have private IP addresses and will not be
    /// able to access the public internet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateInstance")]
    pub private_instance: Option<bool>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Represents the type of Data Fusion instance. Each type is configured with
    /// the default settings for processing and memory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Current version of the Data Fusion.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    /// Name of the zone in which the Data Fusion instance will be created. Only DEVELOPER instances use this field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderAccelerators {
    /// The type of an accelator for a CDF instance.
    /// Possible values are: CDC, HEALTHCARE, CCAI_INSIGHTS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorType")]
    pub accelerator_type: Option<String>,
    /// The type of an accelator for a CDF instance.
    /// Possible values are: ENABLED, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// The crypto key configuration. This field is used by the Customer-Managed Encryption Keys (CMEK) feature.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderCryptoKeyConfig {
    /// The name of the key which is used to encrypt/decrypt customer data. For key in Cloud KMS, the key should be in the format of projects//locations//keyRings//cryptoKeys/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyReference")]
    pub key_reference: Option<String>,
    /// Reference to a CryptoKey in kms to populate keyReference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyReferenceRef")]
    pub key_reference_ref: Option<InstanceInitProviderCryptoKeyConfigKeyReferenceRef>,
    /// Selector for a CryptoKey in kms to populate keyReference.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyReferenceSelector")]
    pub key_reference_selector: Option<InstanceInitProviderCryptoKeyConfigKeyReferenceSelector>,
}

/// Reference to a CryptoKey in kms to populate keyReference.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderCryptoKeyConfigKeyReferenceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderCryptoKeyConfigKeyReferenceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderCryptoKeyConfigKeyReferenceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderCryptoKeyConfigKeyReferenceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderCryptoKeyConfigKeyReferenceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderCryptoKeyConfigKeyReferenceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderCryptoKeyConfigKeyReferenceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CryptoKey in kms to populate keyReference.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderCryptoKeyConfigKeyReferenceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderCryptoKeyConfigKeyReferenceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderCryptoKeyConfigKeyReferenceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderCryptoKeyConfigKeyReferenceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderCryptoKeyConfigKeyReferenceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderCryptoKeyConfigKeyReferenceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderCryptoKeyConfigKeyReferenceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Option to enable and pass metadata for event publishing.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderEventPublishConfig {
    /// Option to enable Event Publishing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The resource name of the Pub/Sub topic. Format: projects/{projectId}/topics/{topic_id}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
    /// Reference to a Topic in pubsub to populate topic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topicRef")]
    pub topic_ref: Option<InstanceInitProviderEventPublishConfigTopicRef>,
    /// Selector for a Topic in pubsub to populate topic.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topicSelector")]
    pub topic_selector: Option<InstanceInitProviderEventPublishConfigTopicSelector>,
}

/// Reference to a Topic in pubsub to populate topic.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderEventPublishConfigTopicRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderEventPublishConfigTopicRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderEventPublishConfigTopicRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderEventPublishConfigTopicRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderEventPublishConfigTopicRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderEventPublishConfigTopicRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderEventPublishConfigTopicRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Topic in pubsub to populate topic.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderEventPublishConfigTopicSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderEventPublishConfigTopicSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderEventPublishConfigTopicSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderEventPublishConfigTopicSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderEventPublishConfigTopicSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderEventPublishConfigTopicSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderEventPublishConfigTopicSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Network configuration options. These are required when a private Data Fusion instance is to be created.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderNetworkConfig {
    /// Optional. Type of connection for establishing private IP connectivity between the Data Fusion customer project VPC and
    /// the corresponding tenant project from a predefined list of available connection modes.
    /// If this field is unspecified for a private instance, VPC peering is used.
    /// Possible values are: VPC_PEERING, PRIVATE_SERVICE_CONNECT_INTERFACES.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionType")]
    pub connection_type: Option<String>,
    /// The IP range in CIDR notation to use for the managed Data Fusion instance
    /// nodes. This range must not overlap with any other ranges used in the Data Fusion instance network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAllocation")]
    pub ip_allocation: Option<String>,
    /// Name of the network in the project with which the tenant project
    /// will be peered for executing pipelines. In case of shared VPC where the network resides in another host
    /// project the network should specified in the form of projects/{host-project-id}/global/networks/{network}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// Optional. Configuration for Private Service Connect.
    /// This is required only when using connection type PRIVATE_SERVICE_CONNECT_INTERFACES.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateServiceConnectConfig")]
    pub private_service_connect_config: Option<InstanceInitProviderNetworkConfigPrivateServiceConnectConfig>,
}

/// Optional. Configuration for Private Service Connect.
/// This is required only when using connection type PRIVATE_SERVICE_CONNECT_INTERFACES.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderNetworkConfigPrivateServiceConnectConfig {
    /// Optional. The reference to the network attachment used to establish private connectivity.
    /// It will be of the form projects/{project-id}/regions/{region}/networkAttachments/{network-attachment-id}.
    /// This is required only when using connection type PRIVATE_SERVICE_CONNECT_INTERFACES.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkAttachment")]
    pub network_attachment: Option<String>,
    /// Optional. Input only. The CIDR block to which the CDF instance can't route traffic to in the consumer project VPC.
    /// The size of this block should be at least /25. This range should not overlap with the primary address range of any subnetwork used by the network attachment.
    /// This range can be used for other purposes in the consumer VPC as long as there is no requirement for CDF to reach destinations using these addresses.
    /// If this value is not provided, the server chooses a non RFC 1918 address range. The format of this field is governed by RFC 4632.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unreachableCidrBlock")]
    pub unreachable_cidr_block: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<InstancePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<InstancePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstancePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// InstanceStatus defines the observed state of Instance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<InstanceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProvider {
    /// List of accelerators enabled for this CDF instance.
    /// If accelerators are enabled it is possible a permadiff will be created with the Options field.
    /// Users will need to either manually update their state file to include these diffed options, or include the field in a lifecycle ignore changes block.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub accelerators: Option<Vec<InstanceStatusAtProviderAccelerators>>,
    /// Endpoint on which the REST APIs is accessible.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiEndpoint")]
    pub api_endpoint: Option<String>,
    /// The time the instance was created in RFC3339 UTC "Zulu" format, accurate to nanoseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createTime")]
    pub create_time: Option<String>,
    /// The crypto key configuration. This field is used by the Customer-Managed Encryption Keys (CMEK) feature.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cryptoKeyConfig")]
    pub crypto_key_config: Option<InstanceStatusAtProviderCryptoKeyConfig>,
    /// User-managed service account to set on Dataproc when Cloud Data Fusion creates Dataproc to run data processing pipelines.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataprocServiceAccount")]
    pub dataproc_service_account: Option<String>,
    /// An optional description of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Display name for an instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// Option to enable granular role-based access control.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableRbac")]
    pub enable_rbac: Option<bool>,
    /// Option to enable Stackdriver Logging.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableStackdriverLogging")]
    pub enable_stackdriver_logging: Option<bool>,
    /// Option to enable Stackdriver Monitoring.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableStackdriverMonitoring")]
    pub enable_stackdriver_monitoring: Option<bool>,
    /// Option to enable and pass metadata for event publishing.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventPublishConfig")]
    pub event_publish_config: Option<InstanceStatusAtProviderEventPublishConfig>,
    /// Cloud Storage bucket generated by Data Fusion in the customer project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gcsBucket")]
    pub gcs_bucket: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{region}}/instances/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The resource labels for instance to use to annotate any related underlying resources,
    /// such as Compute Engine VMs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Network configuration options. These are required when a private Data Fusion instance is to be created.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkConfig")]
    pub network_config: Option<InstanceStatusAtProviderNetworkConfig>,
    /// Map of additional options used to configure the behavior of Data Fusion instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<HashMap<String, String>>,
    /// P4 service account for the customer project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "p4ServiceAccount")]
    pub p4_service_account: Option<String>,
    /// Specifies whether the Data Fusion instance should be private. If set to
    /// true, all Data Fusion nodes will have private IP addresses and will not be
    /// able to access the public internet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateInstance")]
    pub private_instance: Option<bool>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The region of the Data Fusion instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// Endpoint on which the Data Fusion UI and REST APIs are accessible.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceEndpoint")]
    pub service_endpoint: Option<String>,
    /// The current state of this Data Fusion instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Additional information about the current state of this Data Fusion instance if available.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stateMessage")]
    pub state_message: Option<String>,
    /// The name of the tenant project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tenantProjectId")]
    pub tenant_project_id: Option<String>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// Represents the type of Data Fusion instance. Each type is configured with
    /// the default settings for processing and memory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// The time the instance was last updated in RFC3339 UTC "Zulu" format, accurate to nanoseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateTime")]
    pub update_time: Option<String>,
    /// Current version of the Data Fusion.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    /// Name of the zone in which the Data Fusion instance will be created. Only DEVELOPER instances use this field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderAccelerators {
    /// The type of an accelator for a CDF instance.
    /// Possible values are: CDC, HEALTHCARE, CCAI_INSIGHTS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorType")]
    pub accelerator_type: Option<String>,
    /// The type of an accelator for a CDF instance.
    /// Possible values are: ENABLED, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// The crypto key configuration. This field is used by the Customer-Managed Encryption Keys (CMEK) feature.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderCryptoKeyConfig {
    /// The name of the key which is used to encrypt/decrypt customer data. For key in Cloud KMS, the key should be in the format of projects//locations//keyRings//cryptoKeys/.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyReference")]
    pub key_reference: Option<String>,
}

/// Option to enable and pass metadata for event publishing.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderEventPublishConfig {
    /// Option to enable Event Publishing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The resource name of the Pub/Sub topic. Format: projects/{projectId}/topics/{topic_id}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
}

/// Network configuration options. These are required when a private Data Fusion instance is to be created.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderNetworkConfig {
    /// Optional. Type of connection for establishing private IP connectivity between the Data Fusion customer project VPC and
    /// the corresponding tenant project from a predefined list of available connection modes.
    /// If this field is unspecified for a private instance, VPC peering is used.
    /// Possible values are: VPC_PEERING, PRIVATE_SERVICE_CONNECT_INTERFACES.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionType")]
    pub connection_type: Option<String>,
    /// The IP range in CIDR notation to use for the managed Data Fusion instance
    /// nodes. This range must not overlap with any other ranges used in the Data Fusion instance network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAllocation")]
    pub ip_allocation: Option<String>,
    /// Name of the network in the project with which the tenant project
    /// will be peered for executing pipelines. In case of shared VPC where the network resides in another host
    /// project the network should specified in the form of projects/{host-project-id}/global/networks/{network}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// Optional. Configuration for Private Service Connect.
    /// This is required only when using connection type PRIVATE_SERVICE_CONNECT_INTERFACES.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateServiceConnectConfig")]
    pub private_service_connect_config: Option<InstanceStatusAtProviderNetworkConfigPrivateServiceConnectConfig>,
}

/// Optional. Configuration for Private Service Connect.
/// This is required only when using connection type PRIVATE_SERVICE_CONNECT_INTERFACES.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderNetworkConfigPrivateServiceConnectConfig {
    /// (Output)
    /// Output only. The CIDR block to which the CDF instance can't route traffic to in the consumer project VPC.
    /// The size of this block is /25. The format of this field is governed by RFC 4632.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveUnreachableCidrBlock")]
    pub effective_unreachable_cidr_block: Option<String>,
    /// Optional. The reference to the network attachment used to establish private connectivity.
    /// It will be of the form projects/{project-id}/regions/{region}/networkAttachments/{network-attachment-id}.
    /// This is required only when using connection type PRIVATE_SERVICE_CONNECT_INTERFACES.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkAttachment")]
    pub network_attachment: Option<String>,
    /// Optional. Input only. The CIDR block to which the CDF instance can't route traffic to in the consumer project VPC.
    /// The size of this block should be at least /25. This range should not overlap with the primary address range of any subnetwork used by the network attachment.
    /// This range can be used for other purposes in the consumer VPC as long as there is no requirement for CDF to reach destinations using these addresses.
    /// If this value is not provided, the server chooses a non RFC 1918 address range. The format of this field is governed by RFC 4632.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unreachableCidrBlock")]
    pub unreachable_cidr_block: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// HealthCheckSpec defines the desired state of HealthCheck
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "route53.aws.upbound.io", version = "v1beta1", kind = "HealthCheck", plural = "healthchecks")]
#[kube(status = "HealthCheckStatus")]
pub struct HealthCheckSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<HealthCheckDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: HealthCheckForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<HealthCheckInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<HealthCheckProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<HealthCheckPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<HealthCheckWriteConnectionSecretToRef>,
}

/// HealthCheckSpec defines the desired state of HealthCheck
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckForProvider {
    /// The minimum number of child health checks that must be healthy for Route 53 to consider the parent health check to be healthy. Valid values are integers between 0 and 256, inclusive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "childHealthThreshold")]
    pub child_health_threshold: Option<f64>,
    /// For a specified parent health check, a list of HealthCheckId values for the associated child health checks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "childHealthchecks")]
    pub child_healthchecks: Option<Vec<String>>,
    /// References to HealthCheck in route53 to populate childHealthchecks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "childHealthchecksRefs")]
    pub child_healthchecks_refs: Option<Vec<HealthCheckForProviderChildHealthchecksRefs>>,
    /// Selector for a list of HealthCheck in route53 to populate childHealthchecks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "childHealthchecksSelector")]
    pub child_healthchecks_selector: Option<HealthCheckForProviderChildHealthchecksSelector>,
    /// The name of the CloudWatch alarm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchAlarmName")]
    pub cloudwatch_alarm_name: Option<String>,
    /// Reference to a MetricAlarm in cloudwatch to populate cloudwatchAlarmName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchAlarmNameRef")]
    pub cloudwatch_alarm_name_ref: Option<HealthCheckForProviderCloudwatchAlarmNameRef>,
    /// Selector for a MetricAlarm in cloudwatch to populate cloudwatchAlarmName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchAlarmNameSelector")]
    pub cloudwatch_alarm_name_selector: Option<HealthCheckForProviderCloudwatchAlarmNameSelector>,
    /// The CloudWatchRegion that the CloudWatch alarm was created in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchAlarmRegion")]
    pub cloudwatch_alarm_region: Option<String>,
    /// A boolean value that stops Route 53 from performing health checks. When set to true, Route 53 will do the following depending on the type of health check:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// A boolean value that indicates whether Route53 should send the fqdn to the endpoint when performing the health check. This defaults to AWS' defaults: when the type is "HTTPS" enable_sni defaults to true, when type is anything else enable_sni defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableSni")]
    pub enable_sni: Option<bool>,
    /// The number of consecutive health checks that an endpoint must pass or fail.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<f64>,
    /// The fully qualified domain name of the endpoint to be checked. If a value is set for ip_address, the value set for fqdn will be passed in the Host header.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
    /// The status of the health check when CloudWatch has insufficient data about the state of associated alarm. Valid values are Healthy , Unhealthy and LastKnownStatus.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insufficientDataHealthStatus")]
    pub insufficient_data_health_status: Option<String>,
    /// A boolean value that indicates whether the status of health check should be inverted. For example, if a health check is healthy but Inverted is True , then Route 53 considers the health check to be unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertHealthcheck")]
    pub invert_healthcheck: Option<bool>,
    /// The IP address of the endpoint to be checked.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// A Boolean value that indicates whether you want Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint and to display CloudWatch latency graphs in the Route 53 console.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "measureLatency")]
    pub measure_latency: Option<bool>,
    /// The port of the endpoint to be checked.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// This is a reference name used in Caller Reference
    /// (helpful for identifying single health_check set amongst others)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "referenceName")]
    pub reference_name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// A list of AWS regions that you want Amazon Route 53 health checkers to check the specified endpoint from.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regions: Option<Vec<String>>,
    /// The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestInterval")]
    pub request_interval: Option<f64>,
    /// The path that you want Amazon Route 53 to request when performing health checks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourcePath")]
    pub resource_path: Option<String>,
    /// The Amazon Resource Name (ARN) for the Route 53 Application Recovery Controller routing control. This is used when health check type is RECOVERY_CONTROL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingControlArn")]
    pub routing_control_arn: Option<String>,
    /// String searched in the first 5120 bytes of the response body for check to be considered healthy. Only valid with HTTP_STR_MATCH and HTTPS_STR_MATCH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "searchString")]
    pub search_string: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The protocol to use when performing health checks. Valid values are HTTP, HTTPS, HTTP_STR_MATCH, HTTPS_STR_MATCH, TCP, CALCULATED, CLOUDWATCH_METRIC and RECOVERY_CONTROL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckForProviderChildHealthchecksRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<HealthCheckForProviderChildHealthchecksRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckForProviderChildHealthchecksRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<HealthCheckForProviderChildHealthchecksRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<HealthCheckForProviderChildHealthchecksRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckForProviderChildHealthchecksRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckForProviderChildHealthchecksRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of HealthCheck in route53 to populate childHealthchecks.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckForProviderChildHealthchecksSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<HealthCheckForProviderChildHealthchecksSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckForProviderChildHealthchecksSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<HealthCheckForProviderChildHealthchecksSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<HealthCheckForProviderChildHealthchecksSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckForProviderChildHealthchecksSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckForProviderChildHealthchecksSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a MetricAlarm in cloudwatch to populate cloudwatchAlarmName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckForProviderCloudwatchAlarmNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<HealthCheckForProviderCloudwatchAlarmNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckForProviderCloudwatchAlarmNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<HealthCheckForProviderCloudwatchAlarmNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<HealthCheckForProviderCloudwatchAlarmNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckForProviderCloudwatchAlarmNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckForProviderCloudwatchAlarmNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a MetricAlarm in cloudwatch to populate cloudwatchAlarmName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckForProviderCloudwatchAlarmNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<HealthCheckForProviderCloudwatchAlarmNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckForProviderCloudwatchAlarmNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<HealthCheckForProviderCloudwatchAlarmNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<HealthCheckForProviderCloudwatchAlarmNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckForProviderCloudwatchAlarmNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckForProviderCloudwatchAlarmNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckInitProvider {
    /// The minimum number of child health checks that must be healthy for Route 53 to consider the parent health check to be healthy. Valid values are integers between 0 and 256, inclusive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "childHealthThreshold")]
    pub child_health_threshold: Option<f64>,
    /// For a specified parent health check, a list of HealthCheckId values for the associated child health checks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "childHealthchecks")]
    pub child_healthchecks: Option<Vec<String>>,
    /// References to HealthCheck in route53 to populate childHealthchecks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "childHealthchecksRefs")]
    pub child_healthchecks_refs: Option<Vec<HealthCheckInitProviderChildHealthchecksRefs>>,
    /// Selector for a list of HealthCheck in route53 to populate childHealthchecks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "childHealthchecksSelector")]
    pub child_healthchecks_selector: Option<HealthCheckInitProviderChildHealthchecksSelector>,
    /// The name of the CloudWatch alarm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchAlarmName")]
    pub cloudwatch_alarm_name: Option<String>,
    /// Reference to a MetricAlarm in cloudwatch to populate cloudwatchAlarmName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchAlarmNameRef")]
    pub cloudwatch_alarm_name_ref: Option<HealthCheckInitProviderCloudwatchAlarmNameRef>,
    /// Selector for a MetricAlarm in cloudwatch to populate cloudwatchAlarmName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchAlarmNameSelector")]
    pub cloudwatch_alarm_name_selector: Option<HealthCheckInitProviderCloudwatchAlarmNameSelector>,
    /// The CloudWatchRegion that the CloudWatch alarm was created in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchAlarmRegion")]
    pub cloudwatch_alarm_region: Option<String>,
    /// A boolean value that stops Route 53 from performing health checks. When set to true, Route 53 will do the following depending on the type of health check:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// A boolean value that indicates whether Route53 should send the fqdn to the endpoint when performing the health check. This defaults to AWS' defaults: when the type is "HTTPS" enable_sni defaults to true, when type is anything else enable_sni defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableSni")]
    pub enable_sni: Option<bool>,
    /// The number of consecutive health checks that an endpoint must pass or fail.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<f64>,
    /// The fully qualified domain name of the endpoint to be checked. If a value is set for ip_address, the value set for fqdn will be passed in the Host header.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
    /// The status of the health check when CloudWatch has insufficient data about the state of associated alarm. Valid values are Healthy , Unhealthy and LastKnownStatus.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insufficientDataHealthStatus")]
    pub insufficient_data_health_status: Option<String>,
    /// A boolean value that indicates whether the status of health check should be inverted. For example, if a health check is healthy but Inverted is True , then Route 53 considers the health check to be unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertHealthcheck")]
    pub invert_healthcheck: Option<bool>,
    /// The IP address of the endpoint to be checked.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// A Boolean value that indicates whether you want Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint and to display CloudWatch latency graphs in the Route 53 console.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "measureLatency")]
    pub measure_latency: Option<bool>,
    /// The port of the endpoint to be checked.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// This is a reference name used in Caller Reference
    /// (helpful for identifying single health_check set amongst others)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "referenceName")]
    pub reference_name: Option<String>,
    /// A list of AWS regions that you want Amazon Route 53 health checkers to check the specified endpoint from.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regions: Option<Vec<String>>,
    /// The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestInterval")]
    pub request_interval: Option<f64>,
    /// The path that you want Amazon Route 53 to request when performing health checks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourcePath")]
    pub resource_path: Option<String>,
    /// The Amazon Resource Name (ARN) for the Route 53 Application Recovery Controller routing control. This is used when health check type is RECOVERY_CONTROL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingControlArn")]
    pub routing_control_arn: Option<String>,
    /// String searched in the first 5120 bytes of the response body for check to be considered healthy. Only valid with HTTP_STR_MATCH and HTTPS_STR_MATCH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "searchString")]
    pub search_string: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The protocol to use when performing health checks. Valid values are HTTP, HTTPS, HTTP_STR_MATCH, HTTPS_STR_MATCH, TCP, CALCULATED, CLOUDWATCH_METRIC and RECOVERY_CONTROL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckInitProviderChildHealthchecksRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<HealthCheckInitProviderChildHealthchecksRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckInitProviderChildHealthchecksRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<HealthCheckInitProviderChildHealthchecksRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<HealthCheckInitProviderChildHealthchecksRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckInitProviderChildHealthchecksRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckInitProviderChildHealthchecksRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of HealthCheck in route53 to populate childHealthchecks.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckInitProviderChildHealthchecksSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<HealthCheckInitProviderChildHealthchecksSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckInitProviderChildHealthchecksSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<HealthCheckInitProviderChildHealthchecksSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<HealthCheckInitProviderChildHealthchecksSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckInitProviderChildHealthchecksSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckInitProviderChildHealthchecksSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a MetricAlarm in cloudwatch to populate cloudwatchAlarmName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckInitProviderCloudwatchAlarmNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<HealthCheckInitProviderCloudwatchAlarmNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckInitProviderCloudwatchAlarmNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<HealthCheckInitProviderCloudwatchAlarmNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<HealthCheckInitProviderCloudwatchAlarmNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckInitProviderCloudwatchAlarmNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckInitProviderCloudwatchAlarmNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a MetricAlarm in cloudwatch to populate cloudwatchAlarmName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckInitProviderCloudwatchAlarmNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<HealthCheckInitProviderCloudwatchAlarmNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckInitProviderCloudwatchAlarmNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<HealthCheckInitProviderCloudwatchAlarmNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<HealthCheckInitProviderCloudwatchAlarmNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckInitProviderCloudwatchAlarmNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckInitProviderCloudwatchAlarmNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<HealthCheckProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<HealthCheckProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<HealthCheckProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<HealthCheckPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<HealthCheckPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<HealthCheckPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<HealthCheckPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<HealthCheckPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum HealthCheckPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// HealthCheckStatus defines the observed state of HealthCheck.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<HealthCheckStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct HealthCheckStatusAtProvider {
    /// The Amazon Resource Name (ARN) of the Health Check.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// The minimum number of child health checks that must be healthy for Route 53 to consider the parent health check to be healthy. Valid values are integers between 0 and 256, inclusive
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "childHealthThreshold")]
    pub child_health_threshold: Option<f64>,
    /// For a specified parent health check, a list of HealthCheckId values for the associated child health checks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "childHealthchecks")]
    pub child_healthchecks: Option<Vec<String>>,
    /// The name of the CloudWatch alarm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchAlarmName")]
    pub cloudwatch_alarm_name: Option<String>,
    /// The CloudWatchRegion that the CloudWatch alarm was created in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchAlarmRegion")]
    pub cloudwatch_alarm_region: Option<String>,
    /// A boolean value that stops Route 53 from performing health checks. When set to true, Route 53 will do the following depending on the type of health check:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// A boolean value that indicates whether Route53 should send the fqdn to the endpoint when performing the health check. This defaults to AWS' defaults: when the type is "HTTPS" enable_sni defaults to true, when type is anything else enable_sni defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableSni")]
    pub enable_sni: Option<bool>,
    /// The number of consecutive health checks that an endpoint must pass or fail.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureThreshold")]
    pub failure_threshold: Option<f64>,
    /// The fully qualified domain name of the endpoint to be checked. If a value is set for ip_address, the value set for fqdn will be passed in the Host header.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fqdn: Option<String>,
    /// The id of the health check
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The status of the health check when CloudWatch has insufficient data about the state of associated alarm. Valid values are Healthy , Unhealthy and LastKnownStatus.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insufficientDataHealthStatus")]
    pub insufficient_data_health_status: Option<String>,
    /// A boolean value that indicates whether the status of health check should be inverted. For example, if a health check is healthy but Inverted is True , then Route 53 considers the health check to be unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invertHealthcheck")]
    pub invert_healthcheck: Option<bool>,
    /// The IP address of the endpoint to be checked.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// A Boolean value that indicates whether you want Route 53 to measure the latency between health checkers in multiple AWS regions and your endpoint and to display CloudWatch latency graphs in the Route 53 console.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "measureLatency")]
    pub measure_latency: Option<bool>,
    /// The port of the endpoint to be checked.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// This is a reference name used in Caller Reference
    /// (helpful for identifying single health_check set amongst others)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "referenceName")]
    pub reference_name: Option<String>,
    /// A list of AWS regions that you want Amazon Route 53 health checkers to check the specified endpoint from.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regions: Option<Vec<String>>,
    /// The number of seconds between the time that Amazon Route 53 gets a response from your endpoint and the time that it sends the next health-check request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestInterval")]
    pub request_interval: Option<f64>,
    /// The path that you want Amazon Route 53 to request when performing health checks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourcePath")]
    pub resource_path: Option<String>,
    /// The Amazon Resource Name (ARN) for the Route 53 Application Recovery Controller routing control. This is used when health check type is RECOVERY_CONTROL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routingControlArn")]
    pub routing_control_arn: Option<String>,
    /// String searched in the first 5120 bytes of the response body for check to be considered healthy. Only valid with HTTP_STR_MATCH and HTTPS_STR_MATCH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "searchString")]
    pub search_string: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// The protocol to use when performing health checks. Valid values are HTTP, HTTPS, HTTP_STR_MATCH, HTTPS_STR_MATCH, TCP, CALCULATED, CLOUDWATCH_METRIC and RECOVERY_CONTROL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}


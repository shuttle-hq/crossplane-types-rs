// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ZoneSpec defines the desired state of Zone
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "dataplex.gcp.upbound.io", version = "v1beta2", kind = "Zone", plural = "zones")]
#[kube(status = "ZoneStatus")]
pub struct ZoneSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<ZoneDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ZoneForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<ZoneInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<ZoneProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<ZonePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<ZoneWriteConnectionSecretToRef>,
}

/// ZoneSpec defines the desired state of Zone
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ZoneDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneForProvider {
    /// Optional. Description of the zone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Required. Specification of the discovery feature applied to data in this zone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoverySpec")]
    pub discovery_spec: Option<ZoneForProviderDiscoverySpec>,
    /// Optional. User friendly display name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// Optional. User defined labels for the zone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The lake for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lake: Option<String>,
    /// Reference to a Lake in dataplex to populate lake.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lakeRef")]
    pub lake_ref: Option<ZoneForProviderLakeRef>,
    /// Selector for a Lake in dataplex to populate lake.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lakeSelector")]
    pub lake_selector: Option<ZoneForProviderLakeSelector>,
    /// The location for the resource
    pub location: String,
    /// The project for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Required. Immutable. Specification of the resources that are referenced by the assets within this zone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceSpec")]
    pub resource_spec: Option<ZoneForProviderResourceSpec>,
    /// Required. Immutable. The type of the zone. Possible values: TYPE_UNSPECIFIED, RAW, CURATED
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Required. Specification of the discovery feature applied to data in this zone.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneForProviderDiscoverySpec {
    /// Optional. Configuration for CSV data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csvOptions")]
    pub csv_options: Option<ZoneForProviderDiscoverySpecCsvOptions>,
    /// Required. Whether discovery is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Optional. The list of patterns to apply for selecting data to exclude during discovery. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludePatterns")]
    pub exclude_patterns: Option<Vec<String>>,
    /// Optional. The list of patterns to apply for selecting data to include during discovery if only a subset of the data should considered. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includePatterns")]
    pub include_patterns: Option<Vec<String>>,
    /// Optional. Configuration for Json data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonOptions")]
    pub json_options: Option<ZoneForProviderDiscoverySpecJsonOptions>,
    /// Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or TZ=${IANA_TIME_ZONE}". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, "CRON_TZ=America/New_York 1 * * * *", or "TZ=America/New_York 1 * * * *".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
}

/// Optional. Configuration for CSV data.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneForProviderDiscoverySpecCsvOptions {
    /// Optional. The delimiter being used to separate values. This defaults to ','.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    /// Optional. Whether to disable the inference of data type for Json data. If true, all columns will be registered as their primitive types (strings, number or boolean).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableTypeInference")]
    pub disable_type_inference: Option<bool>,
    /// Optional. The character encoding of the data. The default is UTF-8.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
    /// Optional. The number of rows to interpret as header rows that should be skipped when reading data rows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerRows")]
    pub header_rows: Option<f64>,
}

/// Optional. Configuration for Json data.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneForProviderDiscoverySpecJsonOptions {
    /// Optional. Whether to disable the inference of data type for Json data. If true, all columns will be registered as their primitive types (strings, number or boolean).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableTypeInference")]
    pub disable_type_inference: Option<bool>,
    /// Optional. The character encoding of the data. The default is UTF-8.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
}

/// Reference to a Lake in dataplex to populate lake.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneForProviderLakeRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ZoneForProviderLakeRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneForProviderLakeRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ZoneForProviderLakeRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ZoneForProviderLakeRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ZoneForProviderLakeRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ZoneForProviderLakeRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Lake in dataplex to populate lake.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneForProviderLakeSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ZoneForProviderLakeSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneForProviderLakeSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ZoneForProviderLakeSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ZoneForProviderLakeSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ZoneForProviderLakeSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ZoneForProviderLakeSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Required. Immutable. Specification of the resources that are referenced by the assets within this zone.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneForProviderResourceSpec {
    /// Required. Immutable. The location type of the resources that are allowed to be attached to the assets within this zone. Possible values: LOCATION_TYPE_UNSPECIFIED, SINGLE_REGION, MULTI_REGION
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneInitProvider {
    /// Optional. Description of the zone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Required. Specification of the discovery feature applied to data in this zone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoverySpec")]
    pub discovery_spec: Option<ZoneInitProviderDiscoverySpec>,
    /// Optional. User friendly display name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// Optional. User defined labels for the zone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The project for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Required. Immutable. Specification of the resources that are referenced by the assets within this zone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceSpec")]
    pub resource_spec: Option<ZoneInitProviderResourceSpec>,
    /// Required. Immutable. The type of the zone. Possible values: TYPE_UNSPECIFIED, RAW, CURATED
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Required. Specification of the discovery feature applied to data in this zone.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneInitProviderDiscoverySpec {
    /// Optional. Configuration for CSV data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csvOptions")]
    pub csv_options: Option<ZoneInitProviderDiscoverySpecCsvOptions>,
    /// Required. Whether discovery is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Optional. The list of patterns to apply for selecting data to exclude during discovery. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludePatterns")]
    pub exclude_patterns: Option<Vec<String>>,
    /// Optional. The list of patterns to apply for selecting data to include during discovery if only a subset of the data should considered. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includePatterns")]
    pub include_patterns: Option<Vec<String>>,
    /// Optional. Configuration for Json data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonOptions")]
    pub json_options: Option<ZoneInitProviderDiscoverySpecJsonOptions>,
    /// Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or TZ=${IANA_TIME_ZONE}". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, "CRON_TZ=America/New_York 1 * * * *", or "TZ=America/New_York 1 * * * *".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
}

/// Optional. Configuration for CSV data.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneInitProviderDiscoverySpecCsvOptions {
    /// Optional. The delimiter being used to separate values. This defaults to ','.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    /// Optional. Whether to disable the inference of data type for Json data. If true, all columns will be registered as their primitive types (strings, number or boolean).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableTypeInference")]
    pub disable_type_inference: Option<bool>,
    /// Optional. The character encoding of the data. The default is UTF-8.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
    /// Optional. The number of rows to interpret as header rows that should be skipped when reading data rows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerRows")]
    pub header_rows: Option<f64>,
}

/// Optional. Configuration for Json data.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneInitProviderDiscoverySpecJsonOptions {
    /// Optional. Whether to disable the inference of data type for Json data. If true, all columns will be registered as their primitive types (strings, number or boolean).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableTypeInference")]
    pub disable_type_inference: Option<bool>,
    /// Optional. The character encoding of the data. The default is UTF-8.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
}

/// Required. Immutable. Specification of the resources that are referenced by the assets within this zone.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneInitProviderResourceSpec {
    /// Required. Immutable. The location type of the resources that are allowed to be attached to the assets within this zone. Possible values: LOCATION_TYPE_UNSPECIFIED, SINGLE_REGION, MULTI_REGION
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ZoneProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ZoneProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ZoneProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ZoneProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ZoneProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZonePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ZonePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ZonePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZonePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ZonePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZonePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ZonePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ZonePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ZonePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ZonePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZonePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ZoneStatus defines the observed state of Zone.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<ZoneStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneStatusAtProvider {
    /// Output only. Aggregated status of the underlying assets of the zone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "assetStatus")]
    pub asset_status: Option<Vec<ZoneStatusAtProviderAssetStatus>>,
    /// Output only. The time when the zone was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createTime")]
    pub create_time: Option<String>,
    /// Optional. Description of the zone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Required. Specification of the discovery feature applied to data in this zone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "discoverySpec")]
    pub discovery_spec: Option<ZoneStatusAtProviderDiscoverySpec>,
    /// Optional. User friendly display name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/lakes/{{lake}}/zones/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Optional. User defined labels for the zone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The lake for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lake: Option<String>,
    /// The location for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// The project for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Required. Immutable. Specification of the resources that are referenced by the assets within this zone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceSpec")]
    pub resource_spec: Option<ZoneStatusAtProviderResourceSpec>,
    /// Output only. Current state of the zone. Possible values: STATE_UNSPECIFIED, ACTIVE, CREATING, DELETING, ACTION_REQUIRED
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// The combination of labels configured directly on the resource and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// Required. Immutable. The type of the zone. Possible values: TYPE_UNSPECIFIED, RAW, CURATED
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Output only. System generated globally unique ID for the zone. This ID will be different if the zone is deleted and re-created with the same name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
    /// Output only. The time when the zone was last updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateTime")]
    pub update_time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneStatusAtProviderAssetStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeAssets")]
    pub active_assets: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityPolicyApplyingAssets")]
    pub security_policy_applying_assets: Option<f64>,
    /// Output only. The time when the zone was last updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateTime")]
    pub update_time: Option<String>,
}

/// Required. Specification of the discovery feature applied to data in this zone.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneStatusAtProviderDiscoverySpec {
    /// Optional. Configuration for CSV data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csvOptions")]
    pub csv_options: Option<ZoneStatusAtProviderDiscoverySpecCsvOptions>,
    /// Required. Whether discovery is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Optional. The list of patterns to apply for selecting data to exclude during discovery. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludePatterns")]
    pub exclude_patterns: Option<Vec<String>>,
    /// Optional. The list of patterns to apply for selecting data to include during discovery if only a subset of the data should considered. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includePatterns")]
    pub include_patterns: Option<Vec<String>>,
    /// Optional. Configuration for Json data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonOptions")]
    pub json_options: Option<ZoneStatusAtProviderDiscoverySpecJsonOptions>,
    /// Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or TZ=${IANA_TIME_ZONE}". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, "CRON_TZ=America/New_York 1 * * * *", or "TZ=America/New_York 1 * * * *".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
}

/// Optional. Configuration for CSV data.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneStatusAtProviderDiscoverySpecCsvOptions {
    /// Optional. The delimiter being used to separate values. This defaults to ','.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub delimiter: Option<String>,
    /// Optional. Whether to disable the inference of data type for Json data. If true, all columns will be registered as their primitive types (strings, number or boolean).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableTypeInference")]
    pub disable_type_inference: Option<bool>,
    /// Optional. The character encoding of the data. The default is UTF-8.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
    /// Optional. The number of rows to interpret as header rows that should be skipped when reading data rows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerRows")]
    pub header_rows: Option<f64>,
}

/// Optional. Configuration for Json data.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneStatusAtProviderDiscoverySpecJsonOptions {
    /// Optional. Whether to disable the inference of data type for Json data. If true, all columns will be registered as their primitive types (strings, number or boolean).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableTypeInference")]
    pub disable_type_inference: Option<bool>,
    /// Optional. The character encoding of the data. The default is UTF-8.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
}

/// Required. Immutable. Specification of the resources that are referenced by the assets within this zone.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ZoneStatusAtProviderResourceSpec {
    /// Required. Immutable. The location type of the resources that are allowed to be attached to the assets within this zone. Possible values: LOCATION_TYPE_UNSPECIFIED, SINGLE_REGION, MULTI_REGION
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationType")]
    pub location_type: Option<String>,
}


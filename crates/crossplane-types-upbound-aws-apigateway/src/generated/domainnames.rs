// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// DomainNameSpec defines the desired state of DomainName
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "apigateway.aws.upbound.io", version = "v1beta2", kind = "DomainName", plural = "domainnames")]
#[kube(status = "DomainNameStatus")]
pub struct DomainNameSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<DomainNameDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: DomainNameForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<DomainNameInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<DomainNameProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<DomainNamePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<DomainNameWriteConnectionSecretToRef>,
}

/// DomainNameSpec defines the desired state of DomainName
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameForProvider {
    /// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with certificate_name, certificate_body, certificate_chain, certificate_private_key, regional_certificate_arn, and regional_certificate_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArn")]
    pub certificate_arn: Option<String>,
    /// Reference to a CertificateValidation in acm to populate certificateArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArnRef")]
    pub certificate_arn_ref: Option<DomainNameForProviderCertificateArnRef>,
    /// Selector for a CertificateValidation in acm to populate certificateArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArnSelector")]
    pub certificate_arn_selector: Option<DomainNameForProviderCertificateArnSelector>,
    /// Certificate issued for the domain name being registered, in PEM format. Only valid for EDGE endpoint configuration type. Conflicts with certificate_arn, regional_certificate_arn, and regional_certificate_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateBody")]
    pub certificate_body: Option<String>,
    /// Certificate for the CA that issued the certificate, along with any intermediate CA certificates required to create an unbroken chain to a certificate trusted by the intended API clients. Only valid for EDGE endpoint configuration type. Conflicts with certificate_arn, regional_certificate_arn, and regional_certificate_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateChain")]
    pub certificate_chain: Option<String>,
    /// Unique name to use when registering this certificate as an IAM server certificate. Conflicts with certificate_arn, regional_certificate_arn, and regional_certificate_name. Required if certificate_arn is not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateName")]
    pub certificate_name: Option<String>,
    /// Private key associated with the domain certificate given in certificate_body. Only valid for EDGE endpoint configuration type. Conflicts with certificate_arn, regional_certificate_arn, and regional_certificate_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatePrivateKeySecretRef")]
    pub certificate_private_key_secret_ref: Option<DomainNameForProviderCertificatePrivateKeySecretRef>,
    /// Fully-qualified domain name to register.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainName")]
    pub domain_name: Option<String>,
    /// Configuration block defining API endpoint information including type. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointConfiguration")]
    pub endpoint_configuration: Option<DomainNameForProviderEndpointConfiguration>,
    /// Mutual TLS authentication configuration for the domain name. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mutualTlsAuthentication")]
    pub mutual_tls_authentication: Option<DomainNameForProviderMutualTlsAuthentication>,
    /// ARN of the AWS-issued certificate used to validate custom domain ownership (when certificate_arn is issued via an ACM Private CA or mutual_tls_authentication is configured with an ACM-imported certificate.)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownershipVerificationCertificateArn")]
    pub ownership_verification_certificate_arn: Option<String>,
    /// A stringified JSON policy document that applies to the execute-api service for this DomainName regardless of the caller and Method configuration. Supported only for private custom domain names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when a regional domain name is desired. Conflicts with certificate_arn, certificate_name, certificate_body, certificate_chain, and certificate_private_key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionalCertificateArn")]
    pub regional_certificate_arn: Option<String>,
    /// Reference to a CertificateValidation in acm to populate regionalCertificateArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionalCertificateArnRef")]
    pub regional_certificate_arn_ref: Option<DomainNameForProviderRegionalCertificateArnRef>,
    /// Selector for a CertificateValidation in acm to populate regionalCertificateArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionalCertificateArnSelector")]
    pub regional_certificate_arn_selector: Option<DomainNameForProviderRegionalCertificateArnSelector>,
    /// User-friendly name of the certificate that will be used by regional endpoint for this domain name. Conflicts with certificate_arn, certificate_name, certificate_body, certificate_chain, and certificate_private_key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionalCertificateName")]
    pub regional_certificate_name: Option<String>,
    /// Transport Layer Security (TLS) version + cipher suite for this DomainName. Valid values are TLS_1_0 and TLS_1_2. Must be configured to perform drift detection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityPolicy")]
    pub security_policy: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// Reference to a CertificateValidation in acm to populate certificateArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameForProviderCertificateArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DomainNameForProviderCertificateArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameForProviderCertificateArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DomainNameForProviderCertificateArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DomainNameForProviderCertificateArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameForProviderCertificateArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameForProviderCertificateArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CertificateValidation in acm to populate certificateArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameForProviderCertificateArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DomainNameForProviderCertificateArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameForProviderCertificateArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DomainNameForProviderCertificateArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DomainNameForProviderCertificateArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameForProviderCertificateArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameForProviderCertificateArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Private key associated with the domain certificate given in certificate_body. Only valid for EDGE endpoint configuration type. Conflicts with certificate_arn, regional_certificate_arn, and regional_certificate_name.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameForProviderCertificatePrivateKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Configuration block defining API endpoint information including type. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameForProviderEndpointConfiguration {
    /// A list of endpoint types of an API or its custom domain name. For an edge-optimized API and its custom domain name, the endpoint type is EDGE. For a regional API and its custom domain name, the endpoint type is REGIONAL. For a private API, the endpoint type is PRIVATE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
}

/// Mutual TLS authentication configuration for the domain name. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameForProviderMutualTlsAuthentication {
    /// Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, s3://bucket-name/key-name. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "truststoreUri")]
    pub truststore_uri: Option<String>,
    /// Version of the S3 object that contains the truststore. To specify a version, you must have versioning enabled for the S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "truststoreVersion")]
    pub truststore_version: Option<String>,
}

/// Reference to a CertificateValidation in acm to populate regionalCertificateArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameForProviderRegionalCertificateArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DomainNameForProviderRegionalCertificateArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameForProviderRegionalCertificateArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DomainNameForProviderRegionalCertificateArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DomainNameForProviderRegionalCertificateArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameForProviderRegionalCertificateArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameForProviderRegionalCertificateArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CertificateValidation in acm to populate regionalCertificateArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameForProviderRegionalCertificateArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DomainNameForProviderRegionalCertificateArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameForProviderRegionalCertificateArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DomainNameForProviderRegionalCertificateArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DomainNameForProviderRegionalCertificateArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameForProviderRegionalCertificateArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameForProviderRegionalCertificateArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameInitProvider {
    /// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with certificate_name, certificate_body, certificate_chain, certificate_private_key, regional_certificate_arn, and regional_certificate_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArn")]
    pub certificate_arn: Option<String>,
    /// Reference to a CertificateValidation in acm to populate certificateArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArnRef")]
    pub certificate_arn_ref: Option<DomainNameInitProviderCertificateArnRef>,
    /// Selector for a CertificateValidation in acm to populate certificateArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArnSelector")]
    pub certificate_arn_selector: Option<DomainNameInitProviderCertificateArnSelector>,
    /// Certificate issued for the domain name being registered, in PEM format. Only valid for EDGE endpoint configuration type. Conflicts with certificate_arn, regional_certificate_arn, and regional_certificate_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateBody")]
    pub certificate_body: Option<String>,
    /// Certificate for the CA that issued the certificate, along with any intermediate CA certificates required to create an unbroken chain to a certificate trusted by the intended API clients. Only valid for EDGE endpoint configuration type. Conflicts with certificate_arn, regional_certificate_arn, and regional_certificate_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateChain")]
    pub certificate_chain: Option<String>,
    /// Unique name to use when registering this certificate as an IAM server certificate. Conflicts with certificate_arn, regional_certificate_arn, and regional_certificate_name. Required if certificate_arn is not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateName")]
    pub certificate_name: Option<String>,
    /// Private key associated with the domain certificate given in certificate_body. Only valid for EDGE endpoint configuration type. Conflicts with certificate_arn, regional_certificate_arn, and regional_certificate_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificatePrivateKeySecretRef")]
    pub certificate_private_key_secret_ref: Option<DomainNameInitProviderCertificatePrivateKeySecretRef>,
    /// Fully-qualified domain name to register.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainName")]
    pub domain_name: Option<String>,
    /// Configuration block defining API endpoint information including type. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointConfiguration")]
    pub endpoint_configuration: Option<DomainNameInitProviderEndpointConfiguration>,
    /// Mutual TLS authentication configuration for the domain name. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mutualTlsAuthentication")]
    pub mutual_tls_authentication: Option<DomainNameInitProviderMutualTlsAuthentication>,
    /// ARN of the AWS-issued certificate used to validate custom domain ownership (when certificate_arn is issued via an ACM Private CA or mutual_tls_authentication is configured with an ACM-imported certificate.)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownershipVerificationCertificateArn")]
    pub ownership_verification_certificate_arn: Option<String>,
    /// A stringified JSON policy document that applies to the execute-api service for this DomainName regardless of the caller and Method configuration. Supported only for private custom domain names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
    /// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when a regional domain name is desired. Conflicts with certificate_arn, certificate_name, certificate_body, certificate_chain, and certificate_private_key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionalCertificateArn")]
    pub regional_certificate_arn: Option<String>,
    /// Reference to a CertificateValidation in acm to populate regionalCertificateArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionalCertificateArnRef")]
    pub regional_certificate_arn_ref: Option<DomainNameInitProviderRegionalCertificateArnRef>,
    /// Selector for a CertificateValidation in acm to populate regionalCertificateArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionalCertificateArnSelector")]
    pub regional_certificate_arn_selector: Option<DomainNameInitProviderRegionalCertificateArnSelector>,
    /// User-friendly name of the certificate that will be used by regional endpoint for this domain name. Conflicts with certificate_arn, certificate_name, certificate_body, certificate_chain, and certificate_private_key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionalCertificateName")]
    pub regional_certificate_name: Option<String>,
    /// Transport Layer Security (TLS) version + cipher suite for this DomainName. Valid values are TLS_1_0 and TLS_1_2. Must be configured to perform drift detection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityPolicy")]
    pub security_policy: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// Reference to a CertificateValidation in acm to populate certificateArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameInitProviderCertificateArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DomainNameInitProviderCertificateArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameInitProviderCertificateArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DomainNameInitProviderCertificateArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DomainNameInitProviderCertificateArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameInitProviderCertificateArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameInitProviderCertificateArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CertificateValidation in acm to populate certificateArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameInitProviderCertificateArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DomainNameInitProviderCertificateArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameInitProviderCertificateArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DomainNameInitProviderCertificateArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DomainNameInitProviderCertificateArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameInitProviderCertificateArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameInitProviderCertificateArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Private key associated with the domain certificate given in certificate_body. Only valid for EDGE endpoint configuration type. Conflicts with certificate_arn, regional_certificate_arn, and regional_certificate_name.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameInitProviderCertificatePrivateKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Configuration block defining API endpoint information including type. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameInitProviderEndpointConfiguration {
    /// A list of endpoint types of an API or its custom domain name. For an edge-optimized API and its custom domain name, the endpoint type is EDGE. For a regional API and its custom domain name, the endpoint type is REGIONAL. For a private API, the endpoint type is PRIVATE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
}

/// Mutual TLS authentication configuration for the domain name. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameInitProviderMutualTlsAuthentication {
    /// Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, s3://bucket-name/key-name. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "truststoreUri")]
    pub truststore_uri: Option<String>,
    /// Version of the S3 object that contains the truststore. To specify a version, you must have versioning enabled for the S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "truststoreVersion")]
    pub truststore_version: Option<String>,
}

/// Reference to a CertificateValidation in acm to populate regionalCertificateArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameInitProviderRegionalCertificateArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DomainNameInitProviderRegionalCertificateArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameInitProviderRegionalCertificateArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DomainNameInitProviderRegionalCertificateArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DomainNameInitProviderRegionalCertificateArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameInitProviderRegionalCertificateArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameInitProviderRegionalCertificateArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CertificateValidation in acm to populate regionalCertificateArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameInitProviderRegionalCertificateArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DomainNameInitProviderRegionalCertificateArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameInitProviderRegionalCertificateArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DomainNameInitProviderRegionalCertificateArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DomainNameInitProviderRegionalCertificateArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameInitProviderRegionalCertificateArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameInitProviderRegionalCertificateArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DomainNameProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DomainNameProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DomainNameProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNameProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNamePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<DomainNamePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<DomainNamePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNamePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DomainNamePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNamePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DomainNamePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DomainNamePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNamePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DomainNamePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNamePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// DomainNameStatus defines the observed state of DomainName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<DomainNameStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameStatusAtProvider {
    /// ARN of domain name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when an edge-optimized domain name is desired. Conflicts with certificate_name, certificate_body, certificate_chain, certificate_private_key, regional_certificate_arn, and regional_certificate_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArn")]
    pub certificate_arn: Option<String>,
    /// Certificate issued for the domain name being registered, in PEM format. Only valid for EDGE endpoint configuration type. Conflicts with certificate_arn, regional_certificate_arn, and regional_certificate_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateBody")]
    pub certificate_body: Option<String>,
    /// Certificate for the CA that issued the certificate, along with any intermediate CA certificates required to create an unbroken chain to a certificate trusted by the intended API clients. Only valid for EDGE endpoint configuration type. Conflicts with certificate_arn, regional_certificate_arn, and regional_certificate_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateChain")]
    pub certificate_chain: Option<String>,
    /// Unique name to use when registering this certificate as an IAM server certificate. Conflicts with certificate_arn, regional_certificate_arn, and regional_certificate_name. Required if certificate_arn is not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateName")]
    pub certificate_name: Option<String>,
    /// Upload date associated with the domain certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateUploadDate")]
    pub certificate_upload_date: Option<String>,
    /// Hostname created by Cloudfront to represent the distribution that implements this domain name mapping.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudfrontDomainName")]
    pub cloudfront_domain_name: Option<String>,
    /// For convenience, the hosted zone ID (Z2FDTNDATAQYW2) that can be used to create a Route53 alias record for the distribution.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudfrontZoneId")]
    pub cloudfront_zone_id: Option<String>,
    /// Fully-qualified domain name to register.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainName")]
    pub domain_name: Option<String>,
    /// The identifier for the domain name resource. Supported only for private custom domain names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainNameId")]
    pub domain_name_id: Option<String>,
    /// Configuration block defining API endpoint information including type. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointConfiguration")]
    pub endpoint_configuration: Option<DomainNameStatusAtProviderEndpointConfiguration>,
    /// Internal identifier assigned to this domain name by API Gateway.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Mutual TLS authentication configuration for the domain name. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mutualTlsAuthentication")]
    pub mutual_tls_authentication: Option<DomainNameStatusAtProviderMutualTlsAuthentication>,
    /// ARN of the AWS-issued certificate used to validate custom domain ownership (when certificate_arn is issued via an ACM Private CA or mutual_tls_authentication is configured with an ACM-imported certificate.)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownershipVerificationCertificateArn")]
    pub ownership_verification_certificate_arn: Option<String>,
    /// A stringified JSON policy document that applies to the execute-api service for this DomainName regardless of the caller and Method configuration. Supported only for private custom domain names.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
    /// ARN for an AWS-managed certificate. AWS Certificate Manager is the only supported source. Used when a regional domain name is desired. Conflicts with certificate_arn, certificate_name, certificate_body, certificate_chain, and certificate_private_key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionalCertificateArn")]
    pub regional_certificate_arn: Option<String>,
    /// User-friendly name of the certificate that will be used by regional endpoint for this domain name. Conflicts with certificate_arn, certificate_name, certificate_body, certificate_chain, and certificate_private_key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionalCertificateName")]
    pub regional_certificate_name: Option<String>,
    /// Hostname for the custom domain's regional endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionalDomainName")]
    pub regional_domain_name: Option<String>,
    /// Hosted zone ID that can be used to create a Route53 alias record for the regional endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionalZoneId")]
    pub regional_zone_id: Option<String>,
    /// Transport Layer Security (TLS) version + cipher suite for this DomainName. Valid values are TLS_1_0 and TLS_1_2. Must be configured to perform drift detection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityPolicy")]
    pub security_policy: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
}

/// Configuration block defining API endpoint information including type. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameStatusAtProviderEndpointConfiguration {
    /// A list of endpoint types of an API or its custom domain name. For an edge-optimized API and its custom domain name, the endpoint type is EDGE. For a regional API and its custom domain name, the endpoint type is REGIONAL. For a private API, the endpoint type is PRIVATE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub types: Option<Vec<String>>,
}

/// Mutual TLS authentication configuration for the domain name. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DomainNameStatusAtProviderMutualTlsAuthentication {
    /// Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, s3://bucket-name/key-name. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "truststoreUri")]
    pub truststore_uri: Option<String>,
    /// Version of the S3 object that contains the truststore. To specify a version, you must have versioning enabled for the S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "truststoreVersion")]
    pub truststore_version: Option<String>,
}


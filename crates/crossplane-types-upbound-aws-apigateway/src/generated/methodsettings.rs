// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// MethodSettingsSpec defines the desired state of MethodSettings
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "apigateway.aws.upbound.io", version = "v1beta2", kind = "MethodSettings", plural = "methodsettings")]
#[kube(status = "MethodSettingsStatus")]
pub struct MethodSettingsSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<MethodSettingsDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: MethodSettingsForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<MethodSettingsInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<MethodSettingsProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<MethodSettingsPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<MethodSettingsWriteConnectionSecretToRef>,
}

/// MethodSettingsSpec defines the desired state of MethodSettings
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsForProvider {
    /// Method path defined as {resource_path}/{http_method} for an individual method override, or */* for overriding all methods in the stage. Ensure to trim any leading forward slashes in the path (e.g., trimprefix(aws_api_gateway_resource.example.path, "/")).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "methodPath")]
    pub method_path: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// ID of the REST API
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restApiId")]
    pub rest_api_id: Option<String>,
    /// Reference to a RestAPI in apigateway to populate restApiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restApiIdRef")]
    pub rest_api_id_ref: Option<MethodSettingsForProviderRestApiIdRef>,
    /// Selector for a RestAPI in apigateway to populate restApiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restApiIdSelector")]
    pub rest_api_id_selector: Option<MethodSettingsForProviderRestApiIdSelector>,
    /// Settings block, see below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<MethodSettingsForProviderSettings>,
    /// Name of the stage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stageName")]
    pub stage_name: Option<String>,
    /// Reference to a Stage in apigateway to populate stageName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stageNameRef")]
    pub stage_name_ref: Option<MethodSettingsForProviderStageNameRef>,
    /// Selector for a Stage in apigateway to populate stageName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stageNameSelector")]
    pub stage_name_selector: Option<MethodSettingsForProviderStageNameSelector>,
}

/// Reference to a RestAPI in apigateway to populate restApiId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsForProviderRestApiIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MethodSettingsForProviderRestApiIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsForProviderRestApiIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MethodSettingsForProviderRestApiIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MethodSettingsForProviderRestApiIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsForProviderRestApiIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsForProviderRestApiIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a RestAPI in apigateway to populate restApiId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsForProviderRestApiIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MethodSettingsForProviderRestApiIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsForProviderRestApiIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MethodSettingsForProviderRestApiIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MethodSettingsForProviderRestApiIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsForProviderRestApiIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsForProviderRestApiIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Settings block, see below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsForProviderSettings {
    /// Whether the cached responses are encrypted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheDataEncrypted")]
    pub cache_data_encrypted: Option<bool>,
    /// Time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheTtlInSeconds")]
    pub cache_ttl_in_seconds: Option<f64>,
    /// Whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cachingEnabled")]
    pub caching_enabled: Option<bool>,
    /// Whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataTraceEnabled")]
    pub data_trace_enabled: Option<bool>,
    /// Logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are OFF, ERROR, and INFO.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingLevel")]
    pub logging_level: Option<String>,
    /// Whether Amazon CloudWatch metrics are enabled for this method.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricsEnabled")]
    pub metrics_enabled: Option<bool>,
    /// Whether authorization is required for a cache invalidation request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireAuthorizationForCacheControl")]
    pub require_authorization_for_cache_control: Option<bool>,
    /// Throttling burst limit. Default: -1 (throttling disabled).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throttlingBurstLimit")]
    pub throttling_burst_limit: Option<f64>,
    /// Throttling rate limit. Default: -1 (throttling disabled).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throttlingRateLimit")]
    pub throttling_rate_limit: Option<f64>,
    /// How to handle unauthorized requests for cache invalidation. The available values are FAIL_WITH_403, SUCCEED_WITH_RESPONSE_HEADER, SUCCEED_WITHOUT_RESPONSE_HEADER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unauthorizedCacheControlHeaderStrategy")]
    pub unauthorized_cache_control_header_strategy: Option<String>,
}

/// Reference to a Stage in apigateway to populate stageName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsForProviderStageNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MethodSettingsForProviderStageNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsForProviderStageNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MethodSettingsForProviderStageNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MethodSettingsForProviderStageNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsForProviderStageNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsForProviderStageNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Stage in apigateway to populate stageName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsForProviderStageNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MethodSettingsForProviderStageNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsForProviderStageNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MethodSettingsForProviderStageNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MethodSettingsForProviderStageNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsForProviderStageNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsForProviderStageNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsInitProvider {
    /// Method path defined as {resource_path}/{http_method} for an individual method override, or */* for overriding all methods in the stage. Ensure to trim any leading forward slashes in the path (e.g., trimprefix(aws_api_gateway_resource.example.path, "/")).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "methodPath")]
    pub method_path: Option<String>,
    /// ID of the REST API
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restApiId")]
    pub rest_api_id: Option<String>,
    /// Reference to a RestAPI in apigateway to populate restApiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restApiIdRef")]
    pub rest_api_id_ref: Option<MethodSettingsInitProviderRestApiIdRef>,
    /// Selector for a RestAPI in apigateway to populate restApiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restApiIdSelector")]
    pub rest_api_id_selector: Option<MethodSettingsInitProviderRestApiIdSelector>,
    /// Settings block, see below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<MethodSettingsInitProviderSettings>,
    /// Name of the stage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stageName")]
    pub stage_name: Option<String>,
    /// Reference to a Stage in apigateway to populate stageName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stageNameRef")]
    pub stage_name_ref: Option<MethodSettingsInitProviderStageNameRef>,
    /// Selector for a Stage in apigateway to populate stageName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stageNameSelector")]
    pub stage_name_selector: Option<MethodSettingsInitProviderStageNameSelector>,
}

/// Reference to a RestAPI in apigateway to populate restApiId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsInitProviderRestApiIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MethodSettingsInitProviderRestApiIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsInitProviderRestApiIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MethodSettingsInitProviderRestApiIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MethodSettingsInitProviderRestApiIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsInitProviderRestApiIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsInitProviderRestApiIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a RestAPI in apigateway to populate restApiId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsInitProviderRestApiIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MethodSettingsInitProviderRestApiIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsInitProviderRestApiIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MethodSettingsInitProviderRestApiIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MethodSettingsInitProviderRestApiIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsInitProviderRestApiIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsInitProviderRestApiIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Settings block, see below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsInitProviderSettings {
    /// Whether the cached responses are encrypted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheDataEncrypted")]
    pub cache_data_encrypted: Option<bool>,
    /// Time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheTtlInSeconds")]
    pub cache_ttl_in_seconds: Option<f64>,
    /// Whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cachingEnabled")]
    pub caching_enabled: Option<bool>,
    /// Whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataTraceEnabled")]
    pub data_trace_enabled: Option<bool>,
    /// Logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are OFF, ERROR, and INFO.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingLevel")]
    pub logging_level: Option<String>,
    /// Whether Amazon CloudWatch metrics are enabled for this method.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricsEnabled")]
    pub metrics_enabled: Option<bool>,
    /// Whether authorization is required for a cache invalidation request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireAuthorizationForCacheControl")]
    pub require_authorization_for_cache_control: Option<bool>,
    /// Throttling burst limit. Default: -1 (throttling disabled).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throttlingBurstLimit")]
    pub throttling_burst_limit: Option<f64>,
    /// Throttling rate limit. Default: -1 (throttling disabled).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throttlingRateLimit")]
    pub throttling_rate_limit: Option<f64>,
    /// How to handle unauthorized requests for cache invalidation. The available values are FAIL_WITH_403, SUCCEED_WITH_RESPONSE_HEADER, SUCCEED_WITHOUT_RESPONSE_HEADER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unauthorizedCacheControlHeaderStrategy")]
    pub unauthorized_cache_control_header_strategy: Option<String>,
}

/// Reference to a Stage in apigateway to populate stageName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsInitProviderStageNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MethodSettingsInitProviderStageNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsInitProviderStageNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MethodSettingsInitProviderStageNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MethodSettingsInitProviderStageNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsInitProviderStageNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsInitProviderStageNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Stage in apigateway to populate stageName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsInitProviderStageNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MethodSettingsInitProviderStageNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsInitProviderStageNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MethodSettingsInitProviderStageNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MethodSettingsInitProviderStageNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsInitProviderStageNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsInitProviderStageNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MethodSettingsProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MethodSettingsProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MethodSettingsProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<MethodSettingsPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MethodSettingsPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MethodSettingsPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MethodSettingsPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MethodSettingsPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MethodSettingsPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// MethodSettingsStatus defines the observed state of MethodSettings.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<MethodSettingsStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsStatusAtProvider {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Method path defined as {resource_path}/{http_method} for an individual method override, or */* for overriding all methods in the stage. Ensure to trim any leading forward slashes in the path (e.g., trimprefix(aws_api_gateway_resource.example.path, "/")).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "methodPath")]
    pub method_path: Option<String>,
    /// ID of the REST API
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restApiId")]
    pub rest_api_id: Option<String>,
    /// Settings block, see below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<MethodSettingsStatusAtProviderSettings>,
    /// Name of the stage
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stageName")]
    pub stage_name: Option<String>,
}

/// Settings block, see below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MethodSettingsStatusAtProviderSettings {
    /// Whether the cached responses are encrypted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheDataEncrypted")]
    pub cache_data_encrypted: Option<bool>,
    /// Time to live (TTL), in seconds, for cached responses. The higher the TTL, the longer the response will be cached.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheTtlInSeconds")]
    pub cache_ttl_in_seconds: Option<f64>,
    /// Whether responses should be cached and returned for requests. A cache cluster must be enabled on the stage for responses to be cached.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cachingEnabled")]
    pub caching_enabled: Option<bool>,
    /// Whether data trace logging is enabled for this method, which effects the log entries pushed to Amazon CloudWatch Logs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataTraceEnabled")]
    pub data_trace_enabled: Option<bool>,
    /// Logging level for this method, which effects the log entries pushed to Amazon CloudWatch Logs. The available levels are OFF, ERROR, and INFO.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingLevel")]
    pub logging_level: Option<String>,
    /// Whether Amazon CloudWatch metrics are enabled for this method.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricsEnabled")]
    pub metrics_enabled: Option<bool>,
    /// Whether authorization is required for a cache invalidation request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireAuthorizationForCacheControl")]
    pub require_authorization_for_cache_control: Option<bool>,
    /// Throttling burst limit. Default: -1 (throttling disabled).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throttlingBurstLimit")]
    pub throttling_burst_limit: Option<f64>,
    /// Throttling rate limit. Default: -1 (throttling disabled).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "throttlingRateLimit")]
    pub throttling_rate_limit: Option<f64>,
    /// How to handle unauthorized requests for cache invalidation. The available values are FAIL_WITH_403, SUCCEED_WITH_RESPONSE_HEADER, SUCCEED_WITHOUT_RESPONSE_HEADER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unauthorizedCacheControlHeaderStrategy")]
    pub unauthorized_cache_control_header_strategy: Option<String>,
}


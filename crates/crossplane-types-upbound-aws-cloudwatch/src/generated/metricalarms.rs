// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// MetricAlarmSpec defines the desired state of MetricAlarm
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "cloudwatch.aws.upbound.io", version = "v1beta2", kind = "MetricAlarm", plural = "metricalarms")]
#[kube(status = "MetricAlarmStatus")]
pub struct MetricAlarmSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<MetricAlarmDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: MetricAlarmForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<MetricAlarmInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<MetricAlarmProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<MetricAlarmPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<MetricAlarmWriteConnectionSecretToRef>,
}

/// MetricAlarmSpec defines the desired state of MetricAlarm
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmForProvider {
    /// Indicates whether or not actions should be executed during any changes to the alarm's state. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionsEnabled")]
    pub actions_enabled: Option<bool>,
    /// The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alarmActions")]
    pub alarm_actions: Option<Vec<String>>,
    /// References to Policy in autoscaling to populate alarmActions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alarmActionsRefs")]
    pub alarm_actions_refs: Option<Vec<MetricAlarmForProviderAlarmActionsRefs>>,
    /// Selector for a list of Policy in autoscaling to populate alarmActions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alarmActionsSelector")]
    pub alarm_actions_selector: Option<MetricAlarmForProviderAlarmActionsSelector>,
    /// The description for the alarm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alarmDescription")]
    pub alarm_description: Option<String>,
    /// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: GreaterThanOrEqualToThreshold, GreaterThanThreshold, LessThanThreshold, LessThanOrEqualToThreshold. Additionally, the values  LessThanLowerOrGreaterThanUpperThreshold, LessThanLowerThreshold, and GreaterThanUpperThreshold are used only for alarms based on anomaly detection models.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "comparisonOperator")]
    pub comparison_operator: Option<String>,
    /// The number of datapoints that must be breaching to trigger the alarm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datapointsToAlarm")]
    pub datapoints_to_alarm: Option<f64>,
    /// The dimensions for the alarm's associated metric.  For the list of available dimensions see the AWS documentation here.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<HashMap<String, String>>,
    /// Used only for alarms based on percentiles.
    /// If you specify ignore, the alarm state will not change during periods with too few data points to be statistically significant.
    /// If you specify evaluate or omit this parameter, the alarm will always be evaluated and possibly change state no matter how many data points are available.
    /// The following values are supported: ignore, and evaluate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluateLowSampleCountPercentiles")]
    pub evaluate_low_sample_count_percentiles: Option<String>,
    /// The number of periods over which data is compared to the specified threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluationPeriods")]
    pub evaluation_periods: Option<f64>,
    /// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extendedStatistic")]
    pub extended_statistic: Option<String>,
    /// The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insufficientDataActions")]
    pub insufficient_data_actions: Option<Vec<String>>,
    /// The name for the alarm's associated metric.
    /// See docs for supported metrics.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    pub metric_name: Option<String>,
    /// Enables you to create an alarm based on a metric math expression. You may specify at most 20.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricQuery")]
    pub metric_query: Option<Vec<MetricAlarmForProviderMetricQuery>>,
    /// The namespace for the alarm's associated metric. See docs for the list of namespaces.
    /// See docs for supported metrics.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "okActions")]
    pub ok_actions: Option<Vec<String>>,
    /// References to Topic in sns to populate okActions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "okActionsRefs")]
    pub ok_actions_refs: Option<Vec<MetricAlarmForProviderOkActionsRefs>>,
    /// Selector for a list of Topic in sns to populate okActions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "okActionsSelector")]
    pub ok_actions_selector: Option<MetricAlarmForProviderOkActionsSelector>,
    /// The period in seconds over which the specified statistic is applied.
    /// Valid values are 10, 30, or any multiple of 60.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub period: Option<f64>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The statistic to apply to the alarm's associated metric.
    /// Either of the following is supported: SampleCount, Average, Sum, Minimum, Maximum
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statistic: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threshold: Option<f64>,
    /// If this is an alarm based on an anomaly detection model, make this value match the ID of the ANOMALY_DETECTION_BAND function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdMetricId")]
    pub threshold_metric_id: Option<String>,
    /// Sets how this alarm is to handle missing data points. The following values are supported: missing, ignore, breaching and notBreaching. Defaults to missing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "treatMissingData")]
    pub treat_missing_data: Option<String>,
    /// The unit for the alarm's associated metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmForProviderAlarmActionsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MetricAlarmForProviderAlarmActionsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmForProviderAlarmActionsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MetricAlarmForProviderAlarmActionsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MetricAlarmForProviderAlarmActionsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmForProviderAlarmActionsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmForProviderAlarmActionsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Policy in autoscaling to populate alarmActions.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmForProviderAlarmActionsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MetricAlarmForProviderAlarmActionsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmForProviderAlarmActionsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MetricAlarmForProviderAlarmActionsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MetricAlarmForProviderAlarmActionsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmForProviderAlarmActionsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmForProviderAlarmActionsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmForProviderMetricQuery {
    /// The ID of the account where the metrics are located, if this is a cross-account alarm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    pub account_id: Option<String>,
    /// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the Amazon CloudWatch User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    /// A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metric: Option<MetricAlarmForProviderMetricQueryMetric>,
    /// Granularity in seconds of returned data points.
    /// For metrics with regular resolution, valid values are any multiple of 60.
    /// For high-resolution metrics, valid values are 1, 5, 10, 30, or any multiple of 60.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub period: Option<f64>,
    /// Specify exactly one metric_query to be true to use that metric_query result as the alarm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnData")]
    pub return_data: Option<bool>,
}

/// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmForProviderMetricQueryMetric {
    /// The dimensions for this metric.  For the list of available dimensions see the AWS documentation here.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<HashMap<String, String>>,
    /// The name for this metric.
    /// See docs for supported metrics.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    pub metric_name: Option<String>,
    /// The namespace for this metric. See docs for the list of namespaces.
    /// See docs for supported metrics.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Granularity in seconds of returned data points.
    /// For metrics with regular resolution, valid values are any multiple of 60.
    /// For high-resolution metrics, valid values are 1, 5, 10, 30, or any multiple of 60.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub period: Option<f64>,
    /// The statistic to apply to this metric.
    /// See docs for supported statistics.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stat: Option<String>,
    /// The unit for this metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmForProviderOkActionsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MetricAlarmForProviderOkActionsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmForProviderOkActionsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MetricAlarmForProviderOkActionsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MetricAlarmForProviderOkActionsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmForProviderOkActionsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmForProviderOkActionsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Topic in sns to populate okActions.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmForProviderOkActionsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MetricAlarmForProviderOkActionsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmForProviderOkActionsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MetricAlarmForProviderOkActionsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MetricAlarmForProviderOkActionsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmForProviderOkActionsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmForProviderOkActionsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmInitProvider {
    /// Indicates whether or not actions should be executed during any changes to the alarm's state. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionsEnabled")]
    pub actions_enabled: Option<bool>,
    /// The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alarmActions")]
    pub alarm_actions: Option<Vec<String>>,
    /// References to Policy in autoscaling to populate alarmActions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alarmActionsRefs")]
    pub alarm_actions_refs: Option<Vec<MetricAlarmInitProviderAlarmActionsRefs>>,
    /// Selector for a list of Policy in autoscaling to populate alarmActions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alarmActionsSelector")]
    pub alarm_actions_selector: Option<MetricAlarmInitProviderAlarmActionsSelector>,
    /// The description for the alarm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alarmDescription")]
    pub alarm_description: Option<String>,
    /// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: GreaterThanOrEqualToThreshold, GreaterThanThreshold, LessThanThreshold, LessThanOrEqualToThreshold. Additionally, the values  LessThanLowerOrGreaterThanUpperThreshold, LessThanLowerThreshold, and GreaterThanUpperThreshold are used only for alarms based on anomaly detection models.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "comparisonOperator")]
    pub comparison_operator: Option<String>,
    /// The number of datapoints that must be breaching to trigger the alarm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datapointsToAlarm")]
    pub datapoints_to_alarm: Option<f64>,
    /// The dimensions for the alarm's associated metric.  For the list of available dimensions see the AWS documentation here.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<HashMap<String, String>>,
    /// Used only for alarms based on percentiles.
    /// If you specify ignore, the alarm state will not change during periods with too few data points to be statistically significant.
    /// If you specify evaluate or omit this parameter, the alarm will always be evaluated and possibly change state no matter how many data points are available.
    /// The following values are supported: ignore, and evaluate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluateLowSampleCountPercentiles")]
    pub evaluate_low_sample_count_percentiles: Option<String>,
    /// The number of periods over which data is compared to the specified threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluationPeriods")]
    pub evaluation_periods: Option<f64>,
    /// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extendedStatistic")]
    pub extended_statistic: Option<String>,
    /// The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insufficientDataActions")]
    pub insufficient_data_actions: Option<Vec<String>>,
    /// The name for the alarm's associated metric.
    /// See docs for supported metrics.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    pub metric_name: Option<String>,
    /// Enables you to create an alarm based on a metric math expression. You may specify at most 20.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricQuery")]
    pub metric_query: Option<Vec<MetricAlarmInitProviderMetricQuery>>,
    /// The namespace for the alarm's associated metric. See docs for the list of namespaces.
    /// See docs for supported metrics.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "okActions")]
    pub ok_actions: Option<Vec<String>>,
    /// References to Topic in sns to populate okActions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "okActionsRefs")]
    pub ok_actions_refs: Option<Vec<MetricAlarmInitProviderOkActionsRefs>>,
    /// Selector for a list of Topic in sns to populate okActions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "okActionsSelector")]
    pub ok_actions_selector: Option<MetricAlarmInitProviderOkActionsSelector>,
    /// The period in seconds over which the specified statistic is applied.
    /// Valid values are 10, 30, or any multiple of 60.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub period: Option<f64>,
    /// The statistic to apply to the alarm's associated metric.
    /// Either of the following is supported: SampleCount, Average, Sum, Minimum, Maximum
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statistic: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threshold: Option<f64>,
    /// If this is an alarm based on an anomaly detection model, make this value match the ID of the ANOMALY_DETECTION_BAND function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdMetricId")]
    pub threshold_metric_id: Option<String>,
    /// Sets how this alarm is to handle missing data points. The following values are supported: missing, ignore, breaching and notBreaching. Defaults to missing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "treatMissingData")]
    pub treat_missing_data: Option<String>,
    /// The unit for the alarm's associated metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmInitProviderAlarmActionsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MetricAlarmInitProviderAlarmActionsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmInitProviderAlarmActionsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MetricAlarmInitProviderAlarmActionsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MetricAlarmInitProviderAlarmActionsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmInitProviderAlarmActionsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmInitProviderAlarmActionsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Policy in autoscaling to populate alarmActions.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmInitProviderAlarmActionsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MetricAlarmInitProviderAlarmActionsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmInitProviderAlarmActionsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MetricAlarmInitProviderAlarmActionsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MetricAlarmInitProviderAlarmActionsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmInitProviderAlarmActionsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmInitProviderAlarmActionsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmInitProviderMetricQuery {
    /// The ID of the account where the metrics are located, if this is a cross-account alarm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    pub account_id: Option<String>,
    /// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the Amazon CloudWatch User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    /// A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metric: Option<MetricAlarmInitProviderMetricQueryMetric>,
    /// Granularity in seconds of returned data points.
    /// For metrics with regular resolution, valid values are any multiple of 60.
    /// For high-resolution metrics, valid values are 1, 5, 10, 30, or any multiple of 60.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub period: Option<f64>,
    /// Specify exactly one metric_query to be true to use that metric_query result as the alarm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnData")]
    pub return_data: Option<bool>,
}

/// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmInitProviderMetricQueryMetric {
    /// The dimensions for this metric.  For the list of available dimensions see the AWS documentation here.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<HashMap<String, String>>,
    /// The name for this metric.
    /// See docs for supported metrics.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    pub metric_name: Option<String>,
    /// The namespace for this metric. See docs for the list of namespaces.
    /// See docs for supported metrics.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Granularity in seconds of returned data points.
    /// For metrics with regular resolution, valid values are any multiple of 60.
    /// For high-resolution metrics, valid values are 1, 5, 10, 30, or any multiple of 60.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub period: Option<f64>,
    /// The statistic to apply to this metric.
    /// See docs for supported statistics.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stat: Option<String>,
    /// The unit for this metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmInitProviderOkActionsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MetricAlarmInitProviderOkActionsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmInitProviderOkActionsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MetricAlarmInitProviderOkActionsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MetricAlarmInitProviderOkActionsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmInitProviderOkActionsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmInitProviderOkActionsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Topic in sns to populate okActions.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmInitProviderOkActionsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MetricAlarmInitProviderOkActionsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmInitProviderOkActionsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MetricAlarmInitProviderOkActionsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MetricAlarmInitProviderOkActionsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmInitProviderOkActionsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmInitProviderOkActionsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MetricAlarmProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MetricAlarmProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MetricAlarmProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<MetricAlarmPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MetricAlarmPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MetricAlarmPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MetricAlarmPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MetricAlarmPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricAlarmPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// MetricAlarmStatus defines the observed state of MetricAlarm.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<MetricAlarmStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmStatusAtProvider {
    /// Indicates whether or not actions should be executed during any changes to the alarm's state. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionsEnabled")]
    pub actions_enabled: Option<bool>,
    /// The list of actions to execute when this alarm transitions into an ALARM state from any other state. Each action is specified as an Amazon Resource Name (ARN).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alarmActions")]
    pub alarm_actions: Option<Vec<String>>,
    /// The description for the alarm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alarmDescription")]
    pub alarm_description: Option<String>,
    /// The ARN of the CloudWatch Metric Alarm.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// The arithmetic operation to use when comparing the specified Statistic and Threshold. The specified Statistic value is used as the first operand. Either of the following is supported: GreaterThanOrEqualToThreshold, GreaterThanThreshold, LessThanThreshold, LessThanOrEqualToThreshold. Additionally, the values  LessThanLowerOrGreaterThanUpperThreshold, LessThanLowerThreshold, and GreaterThanUpperThreshold are used only for alarms based on anomaly detection models.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "comparisonOperator")]
    pub comparison_operator: Option<String>,
    /// The number of datapoints that must be breaching to trigger the alarm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datapointsToAlarm")]
    pub datapoints_to_alarm: Option<f64>,
    /// The dimensions for the alarm's associated metric.  For the list of available dimensions see the AWS documentation here.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<HashMap<String, String>>,
    /// Used only for alarms based on percentiles.
    /// If you specify ignore, the alarm state will not change during periods with too few data points to be statistically significant.
    /// If you specify evaluate or omit this parameter, the alarm will always be evaluated and possibly change state no matter how many data points are available.
    /// The following values are supported: ignore, and evaluate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluateLowSampleCountPercentiles")]
    pub evaluate_low_sample_count_percentiles: Option<String>,
    /// The number of periods over which data is compared to the specified threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluationPeriods")]
    pub evaluation_periods: Option<f64>,
    /// The percentile statistic for the metric associated with the alarm. Specify a value between p0.0 and p100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extendedStatistic")]
    pub extended_statistic: Option<String>,
    /// The ID of the health check.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The list of actions to execute when this alarm transitions into an INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insufficientDataActions")]
    pub insufficient_data_actions: Option<Vec<String>>,
    /// The name for the alarm's associated metric.
    /// See docs for supported metrics.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    pub metric_name: Option<String>,
    /// Enables you to create an alarm based on a metric math expression. You may specify at most 20.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricQuery")]
    pub metric_query: Option<Vec<MetricAlarmStatusAtProviderMetricQuery>>,
    /// The namespace for the alarm's associated metric. See docs for the list of namespaces.
    /// See docs for supported metrics.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// The list of actions to execute when this alarm transitions into an OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "okActions")]
    pub ok_actions: Option<Vec<String>>,
    /// The period in seconds over which the specified statistic is applied.
    /// Valid values are 10, 30, or any multiple of 60.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub period: Option<f64>,
    /// The statistic to apply to the alarm's associated metric.
    /// Either of the following is supported: SampleCount, Average, Sum, Minimum, Maximum
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub statistic: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// The value against which the specified statistic is compared. This parameter is required for alarms based on static thresholds, but should not be used for alarms based on anomaly detection models.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threshold: Option<f64>,
    /// If this is an alarm based on an anomaly detection model, make this value match the ID of the ANOMALY_DETECTION_BAND function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdMetricId")]
    pub threshold_metric_id: Option<String>,
    /// Sets how this alarm is to handle missing data points. The following values are supported: missing, ignore, breaching and notBreaching. Defaults to missing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "treatMissingData")]
    pub treat_missing_data: Option<String>,
    /// The unit for the alarm's associated metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmStatusAtProviderMetricQuery {
    /// The ID of the account where the metrics are located, if this is a cross-account alarm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    pub account_id: Option<String>,
    /// The math expression to be performed on the returned data, if this object is performing a math expression. This expression can use the id of the other metrics to refer to those metrics, and can also use the id of other expressions to use the result of those expressions. For more information about metric math expressions, see Metric Math Syntax and Functions in the Amazon CloudWatch User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    /// A short name used to tie this object to the results in the response. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscore. The first character must be a lowercase letter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// A human-readable label for this metric or expression. This is especially useful if this is an expression, so that you know what the value represents.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metric: Option<MetricAlarmStatusAtProviderMetricQueryMetric>,
    /// Granularity in seconds of returned data points.
    /// For metrics with regular resolution, valid values are any multiple of 60.
    /// For high-resolution metrics, valid values are 1, 5, 10, 30, or any multiple of 60.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub period: Option<f64>,
    /// Specify exactly one metric_query to be true to use that metric_query result as the alarm.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnData")]
    pub return_data: Option<bool>,
}

/// The metric to be returned, along with statistics, period, and units. Use this parameter only if this object is retrieving a metric and not performing a math expression on returned data.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricAlarmStatusAtProviderMetricQueryMetric {
    /// The dimensions for this metric.  For the list of available dimensions see the AWS documentation here.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dimensions: Option<HashMap<String, String>>,
    /// The name for this metric.
    /// See docs for supported metrics.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricName")]
    pub metric_name: Option<String>,
    /// The namespace for this metric. See docs for the list of namespaces.
    /// See docs for supported metrics.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// Granularity in seconds of returned data points.
    /// For metrics with regular resolution, valid values are any multiple of 60.
    /// For high-resolution metrics, valid values are 1, 5, 10, 30, or any multiple of 60.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub period: Option<f64>,
    /// The statistic to apply to this metric.
    /// See docs for supported statistics.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stat: Option<String>,
    /// The unit for this metric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// GatewayRouteSpec defines the desired state of GatewayRoute
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "appmesh.aws.upbound.io", version = "v1beta2", kind = "GatewayRoute", plural = "gatewayroutes")]
#[kube(status = "GatewayRouteStatus")]
pub struct GatewayRouteSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<GatewayRouteDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: GatewayRouteForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<GatewayRouteInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<GatewayRouteProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<GatewayRoutePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<GatewayRouteWriteConnectionSecretToRef>,
}

/// GatewayRouteSpec defines the desired state of GatewayRoute
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProvider {
    /// Name of the service mesh in which to create the gateway route. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshName")]
    pub mesh_name: Option<String>,
    /// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshOwner")]
    pub mesh_owner: Option<String>,
    /// Name to use for the gateway route. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Gateway route specification to apply.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<GatewayRouteForProviderSpec>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Name of the virtual gateway to associate the gateway route with. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualGatewayName")]
    pub virtual_gateway_name: Option<String>,
    /// Reference to a VirtualGateway in appmesh to populate virtualGatewayName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualGatewayNameRef")]
    pub virtual_gateway_name_ref: Option<GatewayRouteForProviderVirtualGatewayNameRef>,
    /// Selector for a VirtualGateway in appmesh to populate virtualGatewayName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualGatewayNameSelector")]
    pub virtual_gateway_name_selector: Option<GatewayRouteForProviderVirtualGatewayNameSelector>,
}

/// Gateway route specification to apply.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpec {
    /// Specification of a gRPC gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcRoute")]
    pub grpc_route: Option<GatewayRouteForProviderSpecGrpcRoute>,
    /// Specification of an HTTP/2 gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http2Route")]
    pub http2_route: Option<GatewayRouteForProviderSpecHttp2Route>,
    /// Specification of an HTTP gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpRoute")]
    pub http_route: Option<GatewayRouteForProviderSpecHttpRoute>,
    /// Priority for the gateway route, between 0 and 1000.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
}

/// Specification of a gRPC gateway route.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecGrpcRoute {
    /// Action to take if a match is determined.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<GatewayRouteForProviderSpecGrpcRouteAction>,
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteForProviderSpecGrpcRouteMatch>,
}

/// Action to take if a match is determined.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecGrpcRouteAction {
    /// Target that traffic is routed to when a request matches the gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<GatewayRouteForProviderSpecGrpcRouteActionTarget>,
}

/// Target that traffic is routed to when a request matches the gateway route.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecGrpcRouteActionTarget {
    /// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Virtual service gateway route target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualService")]
    pub virtual_service: Option<GatewayRouteForProviderSpecGrpcRouteActionTargetVirtualService>,
}

/// Virtual service gateway route target.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecGrpcRouteActionTargetVirtualService {
    /// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceName")]
    pub virtual_service_name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecGrpcRouteMatch {
    /// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Fully qualified domain name for the service to match from the request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

/// Specification of an HTTP/2 gateway route.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttp2Route {
    /// Action to take if a match is determined.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<GatewayRouteForProviderSpecHttp2RouteAction>,
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteForProviderSpecHttp2RouteMatch>,
}

/// Action to take if a match is determined.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttp2RouteAction {
    /// Gateway route action to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rewrite: Option<GatewayRouteForProviderSpecHttp2RouteActionRewrite>,
    /// Target that traffic is routed to when a request matches the gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<GatewayRouteForProviderSpecHttp2RouteActionTarget>,
}

/// Gateway route action to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttp2RouteActionRewrite {
    /// Host name to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<GatewayRouteForProviderSpecHttp2RouteActionRewriteHostname>,
    /// Exact path to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<GatewayRouteForProviderSpecHttp2RouteActionRewritePath>,
    /// Specified beginning characters to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<GatewayRouteForProviderSpecHttp2RouteActionRewritePrefix>,
}

/// Host name to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttp2RouteActionRewriteHostname {
    /// Default target host name to write to. Valid values: ENABLED, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTargetHostname")]
    pub default_target_hostname: Option<String>,
}

/// Exact path to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttp2RouteActionRewritePath {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
}

/// Specified beginning characters to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttp2RouteActionRewritePrefix {
    /// Default prefix used to replace the incoming route prefix when rewritten. Valid values: ENABLED, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultPrefix")]
    pub default_prefix: Option<String>,
    /// Value used to replace the incoming route prefix when rewritten.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Target that traffic is routed to when a request matches the gateway route.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttp2RouteActionTarget {
    /// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Virtual service gateway route target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualService")]
    pub virtual_service: Option<GatewayRouteForProviderSpecHttp2RouteActionTargetVirtualService>,
}

/// Virtual service gateway route target.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttp2RouteActionTargetVirtualService {
    /// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceName")]
    pub virtual_service_name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttp2RouteMatch {
    /// Client request headers to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<Vec<GatewayRouteForProviderSpecHttp2RouteMatchHeader>>,
    /// Host name to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<GatewayRouteForProviderSpecHttp2RouteMatchHostname>,
    /// Exact path to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<GatewayRouteForProviderSpecHttp2RouteMatchPath>,
    /// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Specified beginning characters to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Client request query parameters to match on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameter")]
    pub query_parameter: Option<Vec<GatewayRouteForProviderSpecHttp2RouteMatchQueryParameter>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttp2RouteMatchHeader {
    /// If true, the match is on the opposite of the match method and value. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub invert: Option<bool>,
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteForProviderSpecHttp2RouteMatchHeaderMatch>,
    /// Name to use for the gateway route. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttp2RouteMatchHeaderMatch {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// Specified beginning characters to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Object that specifies the range of numbers that the header value sent by the client must be included in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<GatewayRouteForProviderSpecHttp2RouteMatchHeaderMatchRange>,
    /// Header value sent by the client must include the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    /// Header value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// Object that specifies the range of numbers that the header value sent by the client must be included in.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttp2RouteMatchHeaderMatchRange {
    /// End of the range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<f64>,
    /// (Requited) Start of the range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<f64>,
}

/// Host name to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttp2RouteMatchHostname {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// Header value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// Exact path to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttp2RouteMatchPath {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// Header value sent by the client must include the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttp2RouteMatchQueryParameter {
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteForProviderSpecHttp2RouteMatchQueryParameterMatch>,
    /// Name to use for the gateway route. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttp2RouteMatchQueryParameterMatch {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
}

/// Specification of an HTTP gateway route.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRoute {
    /// Action to take if a match is determined.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<GatewayRouteForProviderSpecHttpRouteAction>,
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteForProviderSpecHttpRouteMatch>,
}

/// Action to take if a match is determined.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteAction {
    /// Gateway route action to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rewrite: Option<GatewayRouteForProviderSpecHttpRouteActionRewrite>,
    /// Target that traffic is routed to when a request matches the gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<GatewayRouteForProviderSpecHttpRouteActionTarget>,
}

/// Gateway route action to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteActionRewrite {
    /// Host name to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<GatewayRouteForProviderSpecHttpRouteActionRewriteHostname>,
    /// Exact path to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<GatewayRouteForProviderSpecHttpRouteActionRewritePath>,
    /// Specified beginning characters to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<GatewayRouteForProviderSpecHttpRouteActionRewritePrefix>,
}

/// Host name to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteActionRewriteHostname {
    /// Default target host name to write to. Valid values: ENABLED, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTargetHostname")]
    pub default_target_hostname: Option<String>,
}

/// Exact path to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteActionRewritePath {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
}

/// Specified beginning characters to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteActionRewritePrefix {
    /// Default prefix used to replace the incoming route prefix when rewritten. Valid values: ENABLED, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultPrefix")]
    pub default_prefix: Option<String>,
    /// Value used to replace the incoming route prefix when rewritten.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Target that traffic is routed to when a request matches the gateway route.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteActionTarget {
    /// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Virtual service gateway route target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualService")]
    pub virtual_service: Option<GatewayRouteForProviderSpecHttpRouteActionTargetVirtualService>,
}

/// Virtual service gateway route target.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteActionTargetVirtualService {
    /// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceName")]
    pub virtual_service_name: Option<String>,
    /// Reference to a VirtualService in appmesh to populate virtualServiceName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceNameRef")]
    pub virtual_service_name_ref: Option<GatewayRouteForProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameRef>,
    /// Selector for a VirtualService in appmesh to populate virtualServiceName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceNameSelector")]
    pub virtual_service_name_selector: Option<GatewayRouteForProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameSelector>,
}

/// Reference to a VirtualService in appmesh to populate virtualServiceName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayRouteForProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayRouteForProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayRouteForProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteForProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteForProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VirtualService in appmesh to populate virtualServiceName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayRouteForProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayRouteForProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayRouteForProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteForProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteForProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteMatch {
    /// Client request headers to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<Vec<GatewayRouteForProviderSpecHttpRouteMatchHeader>>,
    /// Host name to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<GatewayRouteForProviderSpecHttpRouteMatchHostname>,
    /// Exact path to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<GatewayRouteForProviderSpecHttpRouteMatchPath>,
    /// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Specified beginning characters to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Client request query parameters to match on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameter")]
    pub query_parameter: Option<Vec<GatewayRouteForProviderSpecHttpRouteMatchQueryParameter>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteMatchHeader {
    /// If true, the match is on the opposite of the match method and value. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub invert: Option<bool>,
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteForProviderSpecHttpRouteMatchHeaderMatch>,
    /// Name to use for the gateway route. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteMatchHeaderMatch {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// Specified beginning characters to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Object that specifies the range of numbers that the header value sent by the client must be included in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<GatewayRouteForProviderSpecHttpRouteMatchHeaderMatchRange>,
    /// Header value sent by the client must include the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    /// Header value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// Object that specifies the range of numbers that the header value sent by the client must be included in.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteMatchHeaderMatchRange {
    /// End of the range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<f64>,
    /// (Requited) Start of the range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<f64>,
}

/// Host name to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteMatchHostname {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// Header value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// Exact path to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteMatchPath {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// Header value sent by the client must include the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteMatchQueryParameter {
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteForProviderSpecHttpRouteMatchQueryParameterMatch>,
    /// Name to use for the gateway route. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderSpecHttpRouteMatchQueryParameterMatch {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
}

/// Reference to a VirtualGateway in appmesh to populate virtualGatewayName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderVirtualGatewayNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayRouteForProviderVirtualGatewayNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderVirtualGatewayNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayRouteForProviderVirtualGatewayNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayRouteForProviderVirtualGatewayNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteForProviderVirtualGatewayNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteForProviderVirtualGatewayNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VirtualGateway in appmesh to populate virtualGatewayName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderVirtualGatewayNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayRouteForProviderVirtualGatewayNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteForProviderVirtualGatewayNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayRouteForProviderVirtualGatewayNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayRouteForProviderVirtualGatewayNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteForProviderVirtualGatewayNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteForProviderVirtualGatewayNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProvider {
    /// Name of the service mesh in which to create the gateway route. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshName")]
    pub mesh_name: Option<String>,
    /// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshOwner")]
    pub mesh_owner: Option<String>,
    /// Name to use for the gateway route. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Gateway route specification to apply.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<GatewayRouteInitProviderSpec>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Name of the virtual gateway to associate the gateway route with. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualGatewayName")]
    pub virtual_gateway_name: Option<String>,
    /// Reference to a VirtualGateway in appmesh to populate virtualGatewayName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualGatewayNameRef")]
    pub virtual_gateway_name_ref: Option<GatewayRouteInitProviderVirtualGatewayNameRef>,
    /// Selector for a VirtualGateway in appmesh to populate virtualGatewayName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualGatewayNameSelector")]
    pub virtual_gateway_name_selector: Option<GatewayRouteInitProviderVirtualGatewayNameSelector>,
}

/// Gateway route specification to apply.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpec {
    /// Specification of a gRPC gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcRoute")]
    pub grpc_route: Option<GatewayRouteInitProviderSpecGrpcRoute>,
    /// Specification of an HTTP/2 gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http2Route")]
    pub http2_route: Option<GatewayRouteInitProviderSpecHttp2Route>,
    /// Specification of an HTTP gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpRoute")]
    pub http_route: Option<GatewayRouteInitProviderSpecHttpRoute>,
    /// Priority for the gateway route, between 0 and 1000.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
}

/// Specification of a gRPC gateway route.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecGrpcRoute {
    /// Action to take if a match is determined.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<GatewayRouteInitProviderSpecGrpcRouteAction>,
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteInitProviderSpecGrpcRouteMatch>,
}

/// Action to take if a match is determined.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecGrpcRouteAction {
    /// Target that traffic is routed to when a request matches the gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<GatewayRouteInitProviderSpecGrpcRouteActionTarget>,
}

/// Target that traffic is routed to when a request matches the gateway route.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecGrpcRouteActionTarget {
    /// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Virtual service gateway route target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualService")]
    pub virtual_service: Option<GatewayRouteInitProviderSpecGrpcRouteActionTargetVirtualService>,
}

/// Virtual service gateway route target.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecGrpcRouteActionTargetVirtualService {
    /// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceName")]
    pub virtual_service_name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecGrpcRouteMatch {
    /// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Fully qualified domain name for the service to match from the request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

/// Specification of an HTTP/2 gateway route.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttp2Route {
    /// Action to take if a match is determined.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<GatewayRouteInitProviderSpecHttp2RouteAction>,
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteInitProviderSpecHttp2RouteMatch>,
}

/// Action to take if a match is determined.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttp2RouteAction {
    /// Gateway route action to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rewrite: Option<GatewayRouteInitProviderSpecHttp2RouteActionRewrite>,
    /// Target that traffic is routed to when a request matches the gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<GatewayRouteInitProviderSpecHttp2RouteActionTarget>,
}

/// Gateway route action to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttp2RouteActionRewrite {
    /// Host name to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<GatewayRouteInitProviderSpecHttp2RouteActionRewriteHostname>,
    /// Exact path to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<GatewayRouteInitProviderSpecHttp2RouteActionRewritePath>,
    /// Specified beginning characters to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<GatewayRouteInitProviderSpecHttp2RouteActionRewritePrefix>,
}

/// Host name to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttp2RouteActionRewriteHostname {
    /// Default target host name to write to. Valid values: ENABLED, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTargetHostname")]
    pub default_target_hostname: Option<String>,
}

/// Exact path to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttp2RouteActionRewritePath {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
}

/// Specified beginning characters to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttp2RouteActionRewritePrefix {
    /// Default prefix used to replace the incoming route prefix when rewritten. Valid values: ENABLED, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultPrefix")]
    pub default_prefix: Option<String>,
    /// Value used to replace the incoming route prefix when rewritten.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Target that traffic is routed to when a request matches the gateway route.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttp2RouteActionTarget {
    /// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Virtual service gateway route target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualService")]
    pub virtual_service: Option<GatewayRouteInitProviderSpecHttp2RouteActionTargetVirtualService>,
}

/// Virtual service gateway route target.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttp2RouteActionTargetVirtualService {
    /// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceName")]
    pub virtual_service_name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttp2RouteMatch {
    /// Client request headers to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<Vec<GatewayRouteInitProviderSpecHttp2RouteMatchHeader>>,
    /// Host name to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<GatewayRouteInitProviderSpecHttp2RouteMatchHostname>,
    /// Exact path to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<GatewayRouteInitProviderSpecHttp2RouteMatchPath>,
    /// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Specified beginning characters to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Client request query parameters to match on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameter")]
    pub query_parameter: Option<Vec<GatewayRouteInitProviderSpecHttp2RouteMatchQueryParameter>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttp2RouteMatchHeader {
    /// If true, the match is on the opposite of the match method and value. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub invert: Option<bool>,
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteInitProviderSpecHttp2RouteMatchHeaderMatch>,
    /// Name to use for the gateway route. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttp2RouteMatchHeaderMatch {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// Specified beginning characters to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Object that specifies the range of numbers that the header value sent by the client must be included in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<GatewayRouteInitProviderSpecHttp2RouteMatchHeaderMatchRange>,
    /// Header value sent by the client must include the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    /// Header value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// Object that specifies the range of numbers that the header value sent by the client must be included in.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttp2RouteMatchHeaderMatchRange {
    /// End of the range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<f64>,
    /// (Requited) Start of the range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<f64>,
}

/// Host name to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttp2RouteMatchHostname {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// Header value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// Exact path to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttp2RouteMatchPath {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// Header value sent by the client must include the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttp2RouteMatchQueryParameter {
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteInitProviderSpecHttp2RouteMatchQueryParameterMatch>,
    /// Name to use for the gateway route. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttp2RouteMatchQueryParameterMatch {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
}

/// Specification of an HTTP gateway route.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRoute {
    /// Action to take if a match is determined.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<GatewayRouteInitProviderSpecHttpRouteAction>,
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteInitProviderSpecHttpRouteMatch>,
}

/// Action to take if a match is determined.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteAction {
    /// Gateway route action to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rewrite: Option<GatewayRouteInitProviderSpecHttpRouteActionRewrite>,
    /// Target that traffic is routed to when a request matches the gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<GatewayRouteInitProviderSpecHttpRouteActionTarget>,
}

/// Gateway route action to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteActionRewrite {
    /// Host name to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<GatewayRouteInitProviderSpecHttpRouteActionRewriteHostname>,
    /// Exact path to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<GatewayRouteInitProviderSpecHttpRouteActionRewritePath>,
    /// Specified beginning characters to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<GatewayRouteInitProviderSpecHttpRouteActionRewritePrefix>,
}

/// Host name to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteActionRewriteHostname {
    /// Default target host name to write to. Valid values: ENABLED, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTargetHostname")]
    pub default_target_hostname: Option<String>,
}

/// Exact path to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteActionRewritePath {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
}

/// Specified beginning characters to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteActionRewritePrefix {
    /// Default prefix used to replace the incoming route prefix when rewritten. Valid values: ENABLED, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultPrefix")]
    pub default_prefix: Option<String>,
    /// Value used to replace the incoming route prefix when rewritten.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Target that traffic is routed to when a request matches the gateway route.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteActionTarget {
    /// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Virtual service gateway route target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualService")]
    pub virtual_service: Option<GatewayRouteInitProviderSpecHttpRouteActionTargetVirtualService>,
}

/// Virtual service gateway route target.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteActionTargetVirtualService {
    /// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceName")]
    pub virtual_service_name: Option<String>,
    /// Reference to a VirtualService in appmesh to populate virtualServiceName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceNameRef")]
    pub virtual_service_name_ref: Option<GatewayRouteInitProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameRef>,
    /// Selector for a VirtualService in appmesh to populate virtualServiceName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceNameSelector")]
    pub virtual_service_name_selector: Option<GatewayRouteInitProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameSelector>,
}

/// Reference to a VirtualService in appmesh to populate virtualServiceName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayRouteInitProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayRouteInitProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayRouteInitProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteInitProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteInitProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VirtualService in appmesh to populate virtualServiceName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayRouteInitProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayRouteInitProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayRouteInitProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteInitProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteInitProviderSpecHttpRouteActionTargetVirtualServiceVirtualServiceNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteMatch {
    /// Client request headers to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<Vec<GatewayRouteInitProviderSpecHttpRouteMatchHeader>>,
    /// Host name to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<GatewayRouteInitProviderSpecHttpRouteMatchHostname>,
    /// Exact path to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<GatewayRouteInitProviderSpecHttpRouteMatchPath>,
    /// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Specified beginning characters to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Client request query parameters to match on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameter")]
    pub query_parameter: Option<Vec<GatewayRouteInitProviderSpecHttpRouteMatchQueryParameter>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteMatchHeader {
    /// If true, the match is on the opposite of the match method and value. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub invert: Option<bool>,
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteInitProviderSpecHttpRouteMatchHeaderMatch>,
    /// Name to use for the gateway route. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteMatchHeaderMatch {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// Specified beginning characters to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Object that specifies the range of numbers that the header value sent by the client must be included in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<GatewayRouteInitProviderSpecHttpRouteMatchHeaderMatchRange>,
    /// Header value sent by the client must include the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    /// Header value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// Object that specifies the range of numbers that the header value sent by the client must be included in.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteMatchHeaderMatchRange {
    /// End of the range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<f64>,
    /// (Requited) Start of the range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<f64>,
}

/// Host name to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteMatchHostname {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// Header value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// Exact path to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteMatchPath {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// Header value sent by the client must include the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteMatchQueryParameter {
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteInitProviderSpecHttpRouteMatchQueryParameterMatch>,
    /// Name to use for the gateway route. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderSpecHttpRouteMatchQueryParameterMatch {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
}

/// Reference to a VirtualGateway in appmesh to populate virtualGatewayName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderVirtualGatewayNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayRouteInitProviderVirtualGatewayNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderVirtualGatewayNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayRouteInitProviderVirtualGatewayNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayRouteInitProviderVirtualGatewayNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteInitProviderVirtualGatewayNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteInitProviderVirtualGatewayNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VirtualGateway in appmesh to populate virtualGatewayName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderVirtualGatewayNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayRouteInitProviderVirtualGatewayNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteInitProviderVirtualGatewayNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayRouteInitProviderVirtualGatewayNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayRouteInitProviderVirtualGatewayNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteInitProviderVirtualGatewayNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteInitProviderVirtualGatewayNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayRouteProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayRouteProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayRouteProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRouteProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRoutePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<GatewayRoutePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<GatewayRoutePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRoutePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayRoutePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRoutePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayRoutePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayRoutePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRoutePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayRoutePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRoutePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// GatewayRouteStatus defines the observed state of GatewayRoute.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<GatewayRouteStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProvider {
    /// ARN of the gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Creation date of the gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdDate")]
    pub created_date: Option<String>,
    /// ID of the gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Last update date of the gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastUpdatedDate")]
    pub last_updated_date: Option<String>,
    /// Name of the service mesh in which to create the gateway route. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshName")]
    pub mesh_name: Option<String>,
    /// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshOwner")]
    pub mesh_owner: Option<String>,
    /// Name to use for the gateway route. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Resource owner's AWS account ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceOwner")]
    pub resource_owner: Option<String>,
    /// Gateway route specification to apply.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<GatewayRouteStatusAtProviderSpec>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// Name of the virtual gateway to associate the gateway route with. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualGatewayName")]
    pub virtual_gateway_name: Option<String>,
}

/// Gateway route specification to apply.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpec {
    /// Specification of a gRPC gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grpcRoute")]
    pub grpc_route: Option<GatewayRouteStatusAtProviderSpecGrpcRoute>,
    /// Specification of an HTTP/2 gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "http2Route")]
    pub http2_route: Option<GatewayRouteStatusAtProviderSpecHttp2Route>,
    /// Specification of an HTTP gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpRoute")]
    pub http_route: Option<GatewayRouteStatusAtProviderSpecHttpRoute>,
    /// Priority for the gateway route, between 0 and 1000.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
}

/// Specification of a gRPC gateway route.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecGrpcRoute {
    /// Action to take if a match is determined.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<GatewayRouteStatusAtProviderSpecGrpcRouteAction>,
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteStatusAtProviderSpecGrpcRouteMatch>,
}

/// Action to take if a match is determined.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecGrpcRouteAction {
    /// Target that traffic is routed to when a request matches the gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<GatewayRouteStatusAtProviderSpecGrpcRouteActionTarget>,
}

/// Target that traffic is routed to when a request matches the gateway route.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecGrpcRouteActionTarget {
    /// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Virtual service gateway route target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualService")]
    pub virtual_service: Option<GatewayRouteStatusAtProviderSpecGrpcRouteActionTargetVirtualService>,
}

/// Virtual service gateway route target.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecGrpcRouteActionTargetVirtualService {
    /// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceName")]
    pub virtual_service_name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecGrpcRouteMatch {
    /// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Fully qualified domain name for the service to match from the request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceName")]
    pub service_name: Option<String>,
}

/// Specification of an HTTP/2 gateway route.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttp2Route {
    /// Action to take if a match is determined.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<GatewayRouteStatusAtProviderSpecHttp2RouteAction>,
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteStatusAtProviderSpecHttp2RouteMatch>,
}

/// Action to take if a match is determined.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttp2RouteAction {
    /// Gateway route action to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rewrite: Option<GatewayRouteStatusAtProviderSpecHttp2RouteActionRewrite>,
    /// Target that traffic is routed to when a request matches the gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<GatewayRouteStatusAtProviderSpecHttp2RouteActionTarget>,
}

/// Gateway route action to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttp2RouteActionRewrite {
    /// Host name to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<GatewayRouteStatusAtProviderSpecHttp2RouteActionRewriteHostname>,
    /// Exact path to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<GatewayRouteStatusAtProviderSpecHttp2RouteActionRewritePath>,
    /// Specified beginning characters to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<GatewayRouteStatusAtProviderSpecHttp2RouteActionRewritePrefix>,
}

/// Host name to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttp2RouteActionRewriteHostname {
    /// Default target host name to write to. Valid values: ENABLED, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTargetHostname")]
    pub default_target_hostname: Option<String>,
}

/// Exact path to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttp2RouteActionRewritePath {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
}

/// Specified beginning characters to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttp2RouteActionRewritePrefix {
    /// Default prefix used to replace the incoming route prefix when rewritten. Valid values: ENABLED, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultPrefix")]
    pub default_prefix: Option<String>,
    /// Value used to replace the incoming route prefix when rewritten.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Target that traffic is routed to when a request matches the gateway route.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttp2RouteActionTarget {
    /// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Virtual service gateway route target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualService")]
    pub virtual_service: Option<GatewayRouteStatusAtProviderSpecHttp2RouteActionTargetVirtualService>,
}

/// Virtual service gateway route target.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttp2RouteActionTargetVirtualService {
    /// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceName")]
    pub virtual_service_name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttp2RouteMatch {
    /// Client request headers to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<Vec<GatewayRouteStatusAtProviderSpecHttp2RouteMatchHeader>>,
    /// Host name to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<GatewayRouteStatusAtProviderSpecHttp2RouteMatchHostname>,
    /// Exact path to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<GatewayRouteStatusAtProviderSpecHttp2RouteMatchPath>,
    /// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Specified beginning characters to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Client request query parameters to match on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameter")]
    pub query_parameter: Option<Vec<GatewayRouteStatusAtProviderSpecHttp2RouteMatchQueryParameter>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttp2RouteMatchHeader {
    /// If true, the match is on the opposite of the match method and value. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub invert: Option<bool>,
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteStatusAtProviderSpecHttp2RouteMatchHeaderMatch>,
    /// Name to use for the gateway route. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttp2RouteMatchHeaderMatch {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// Specified beginning characters to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Object that specifies the range of numbers that the header value sent by the client must be included in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<GatewayRouteStatusAtProviderSpecHttp2RouteMatchHeaderMatchRange>,
    /// Header value sent by the client must include the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    /// Header value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// Object that specifies the range of numbers that the header value sent by the client must be included in.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttp2RouteMatchHeaderMatchRange {
    /// End of the range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<f64>,
    /// (Requited) Start of the range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<f64>,
}

/// Host name to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttp2RouteMatchHostname {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// Header value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// Exact path to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttp2RouteMatchPath {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// Header value sent by the client must include the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttp2RouteMatchQueryParameter {
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteStatusAtProviderSpecHttp2RouteMatchQueryParameterMatch>,
    /// Name to use for the gateway route. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttp2RouteMatchQueryParameterMatch {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
}

/// Specification of an HTTP gateway route.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttpRoute {
    /// Action to take if a match is determined.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<GatewayRouteStatusAtProviderSpecHttpRouteAction>,
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteStatusAtProviderSpecHttpRouteMatch>,
}

/// Action to take if a match is determined.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttpRouteAction {
    /// Gateway route action to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rewrite: Option<GatewayRouteStatusAtProviderSpecHttpRouteActionRewrite>,
    /// Target that traffic is routed to when a request matches the gateway route.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<GatewayRouteStatusAtProviderSpecHttpRouteActionTarget>,
}

/// Gateway route action to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttpRouteActionRewrite {
    /// Host name to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<GatewayRouteStatusAtProviderSpecHttpRouteActionRewriteHostname>,
    /// Exact path to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<GatewayRouteStatusAtProviderSpecHttpRouteActionRewritePath>,
    /// Specified beginning characters to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<GatewayRouteStatusAtProviderSpecHttpRouteActionRewritePrefix>,
}

/// Host name to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttpRouteActionRewriteHostname {
    /// Default target host name to write to. Valid values: ENABLED, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTargetHostname")]
    pub default_target_hostname: Option<String>,
}

/// Exact path to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttpRouteActionRewritePath {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
}

/// Specified beginning characters to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttpRouteActionRewritePrefix {
    /// Default prefix used to replace the incoming route prefix when rewritten. Valid values: ENABLED, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultPrefix")]
    pub default_prefix: Option<String>,
    /// Value used to replace the incoming route prefix when rewritten.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Target that traffic is routed to when a request matches the gateway route.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttpRouteActionTarget {
    /// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Virtual service gateway route target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualService")]
    pub virtual_service: Option<GatewayRouteStatusAtProviderSpecHttpRouteActionTargetVirtualService>,
}

/// Virtual service gateway route target.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttpRouteActionTargetVirtualService {
    /// Name of the virtual service that traffic is routed to. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualServiceName")]
    pub virtual_service_name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttpRouteMatch {
    /// Client request headers to match on.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<Vec<GatewayRouteStatusAtProviderSpecHttpRouteMatchHeader>>,
    /// Host name to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hostname: Option<GatewayRouteStatusAtProviderSpecHttpRouteMatchHostname>,
    /// Exact path to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<GatewayRouteStatusAtProviderSpecHttpRouteMatchPath>,
    /// The port number that corresponds to the target for Virtual Service provider port. This is required when the provider (router or node) of the Virtual Service has multiple listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Specified beginning characters to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Client request query parameters to match on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryParameter")]
    pub query_parameter: Option<Vec<GatewayRouteStatusAtProviderSpecHttpRouteMatchQueryParameter>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttpRouteMatchHeader {
    /// If true, the match is on the opposite of the match method and value. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub invert: Option<bool>,
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteStatusAtProviderSpecHttpRouteMatchHeaderMatch>,
    /// Name to use for the gateway route. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttpRouteMatchHeaderMatch {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// Specified beginning characters to rewrite.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// Object that specifies the range of numbers that the header value sent by the client must be included in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<GatewayRouteStatusAtProviderSpecHttpRouteMatchHeaderMatchRange>,
    /// Header value sent by the client must include the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
    /// Header value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// Object that specifies the range of numbers that the header value sent by the client must be included in.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttpRouteMatchHeaderMatchRange {
    /// End of the range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end: Option<f64>,
    /// (Requited) Start of the range.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start: Option<f64>,
}

/// Host name to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttpRouteMatchHostname {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// Header value sent by the client must end with the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub suffix: Option<String>,
}

/// Exact path to rewrite.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttpRouteMatchPath {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
    /// Header value sent by the client must include the specified characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub regex: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttpRouteMatchQueryParameter {
    /// Criteria for determining a request match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<GatewayRouteStatusAtProviderSpecHttpRouteMatchQueryParameterMatch>,
    /// Name to use for the gateway route. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Criteria for determining a request match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayRouteStatusAtProviderSpecHttpRouteMatchQueryParameterMatch {
    /// Value used to replace matched path.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// VirtualGatewaySpec defines the desired state of VirtualGateway
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "appmesh.aws.upbound.io", version = "v1beta2", kind = "VirtualGateway", plural = "virtualgateways")]
#[kube(status = "VirtualGatewayStatus")]
pub struct VirtualGatewaySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<VirtualGatewayDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: VirtualGatewayForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<VirtualGatewayInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<VirtualGatewayProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<VirtualGatewayPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<VirtualGatewayWriteConnectionSecretToRef>,
}

/// VirtualGatewaySpec defines the desired state of VirtualGateway
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualGatewayDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProvider {
    /// Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshName")]
    pub mesh_name: Option<String>,
    /// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshOwner")]
    pub mesh_owner: Option<String>,
    /// Name to use for the virtual gateway. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Virtual gateway specification to apply.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<VirtualGatewayForProviderSpec>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// Virtual gateway specification to apply.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpec {
    /// Defaults for backends.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backendDefaults")]
    pub backend_defaults: Option<VirtualGatewayForProviderSpecBackendDefaults>,
    /// Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub listener: Option<Vec<VirtualGatewayForProviderSpecListener>>,
    /// Inbound and outbound access logging information for the virtual gateway.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging: Option<VirtualGatewayForProviderSpecLogging>,
}

/// Defaults for backends.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecBackendDefaults {
    /// Default client policy for virtual gateway backends.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientPolicy")]
    pub client_policy: Option<VirtualGatewayForProviderSpecBackendDefaultsClientPolicy>,
}

/// Default client policy for virtual gateway backends.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecBackendDefaultsClientPolicy {
    /// Transport Layer Security (TLS) client policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTls>,
}

/// Transport Layer Security (TLS) client policy.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTls {
    /// Virtual gateway's client's Transport Layer Security (TLS) certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub certificate: Option<VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsCertificate>,
    /// Whether the policy is enforced. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enforce: Option<bool>,
    /// One or more ports that the policy is enforced for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<f64>>,
    /// TLS validation context.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation: Option<VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsValidation>,
}

/// Virtual gateway's client's Transport Layer Security (TLS) certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsCertificate {
    /// Local file certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsCertificateFile>,
    /// A Secret Discovery Service certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsCertificateSds>,
}

/// Local file certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsCertificateFile {
    /// Certificate chain for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateChain")]
    pub certificate_chain: Option<String>,
    /// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKey")]
    pub private_key: Option<String>,
}

/// A Secret Discovery Service certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsCertificateSds {
    /// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// TLS validation context.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsValidation {
    /// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAlternativeNames")]
    pub subject_alternative_names: Option<VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames>,
    /// TLS validation context trust.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trust: Option<VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsValidationTrust>,
}

/// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames {
    /// Criteria for determining a SAN's match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch>,
}

/// Criteria for determining a SAN's match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch {
    /// Values sent must match the specified values exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<Vec<String>>,
}

/// TLS validation context trust.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsValidationTrust {
    /// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acm: Option<VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsValidationTrustAcm>,
    /// Local file certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsValidationTrustFile>,
    /// A Secret Discovery Service certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsValidationTrustSds>,
}

/// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsValidationTrustAcm {
    /// One or more ACM ARNs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateAuthorityArns")]
    pub certificate_authority_arns: Option<Vec<String>>,
}

/// Local file certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsValidationTrustFile {
    /// Certificate chain for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateChain")]
    pub certificate_chain: Option<String>,
}

/// A Secret Discovery Service certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecBackendDefaultsClientPolicyTlsValidationTrustSds {
    /// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListener {
    /// Connection pool information for the listener.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionPool")]
    pub connection_pool: Option<VirtualGatewayForProviderSpecListenerConnectionPool>,
    /// Health check information for the listener.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheck")]
    pub health_check: Option<VirtualGatewayForProviderSpecListenerHealthCheck>,
    /// Port mapping information for the listener.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portMapping")]
    pub port_mapping: Option<VirtualGatewayForProviderSpecListenerPortMapping>,
    /// Transport Layer Security (TLS) client policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<VirtualGatewayForProviderSpecListenerTls>,
}

/// Connection pool information for the listener.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerConnectionPool {
    /// Connection pool information for gRPC listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<VirtualGatewayForProviderSpecListenerConnectionPoolGrpc>,
    /// Connection pool information for HTTP listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<VirtualGatewayForProviderSpecListenerConnectionPoolHttp>,
    /// Connection pool information for HTTP2 listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http2: Option<VirtualGatewayForProviderSpecListenerConnectionPoolHttp2>,
}

/// Connection pool information for gRPC listeners.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerConnectionPoolGrpc {
    /// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequests")]
    pub max_requests: Option<f64>,
}

/// Connection pool information for HTTP listeners.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerConnectionPoolHttp {
    /// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    pub max_connections: Option<f64>,
    /// Number of overflowing requests after max_connections Envoy will queue to upstream cluster. Minimum value of 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    pub max_pending_requests: Option<f64>,
}

/// Connection pool information for HTTP2 listeners.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerConnectionPoolHttp2 {
    /// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequests")]
    pub max_requests: Option<f64>,
}

/// Health check information for the listener.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerHealthCheck {
    /// Number of consecutive successful health checks that must occur before declaring listener healthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthyThreshold")]
    pub healthy_threshold: Option<f64>,
    /// Time period in milliseconds between each health check execution.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalMillis")]
    pub interval_millis: Option<f64>,
    /// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Port used for the port mapping.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Amount of time to wait when receiving a response from the health check, in milliseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutMillis")]
    pub timeout_millis: Option<f64>,
    /// Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unhealthyThreshold")]
    pub unhealthy_threshold: Option<f64>,
}

/// Port mapping information for the listener.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerPortMapping {
    /// Port used for the port mapping.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}

/// Transport Layer Security (TLS) client policy.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerTls {
    /// Virtual gateway's client's Transport Layer Security (TLS) certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub certificate: Option<VirtualGatewayForProviderSpecListenerTlsCertificate>,
    /// Listener's TLS mode. Valid values: DISABLED, PERMISSIVE, STRICT.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// TLS validation context.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation: Option<VirtualGatewayForProviderSpecListenerTlsValidation>,
}

/// Virtual gateway's client's Transport Layer Security (TLS) certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerTlsCertificate {
    /// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acm: Option<VirtualGatewayForProviderSpecListenerTlsCertificateAcm>,
    /// Local file certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualGatewayForProviderSpecListenerTlsCertificateFile>,
    /// A Secret Discovery Service certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualGatewayForProviderSpecListenerTlsCertificateSds>,
}

/// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerTlsCertificateAcm {
    /// ARN for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArn")]
    pub certificate_arn: Option<String>,
    /// Reference to a Certificate in acm to populate certificateArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArnRef")]
    pub certificate_arn_ref: Option<VirtualGatewayForProviderSpecListenerTlsCertificateAcmCertificateArnRef>,
    /// Selector for a Certificate in acm to populate certificateArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArnSelector")]
    pub certificate_arn_selector: Option<VirtualGatewayForProviderSpecListenerTlsCertificateAcmCertificateArnSelector>,
}

/// Reference to a Certificate in acm to populate certificateArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerTlsCertificateAcmCertificateArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VirtualGatewayForProviderSpecListenerTlsCertificateAcmCertificateArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerTlsCertificateAcmCertificateArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VirtualGatewayForProviderSpecListenerTlsCertificateAcmCertificateArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VirtualGatewayForProviderSpecListenerTlsCertificateAcmCertificateArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualGatewayForProviderSpecListenerTlsCertificateAcmCertificateArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualGatewayForProviderSpecListenerTlsCertificateAcmCertificateArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Certificate in acm to populate certificateArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerTlsCertificateAcmCertificateArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VirtualGatewayForProviderSpecListenerTlsCertificateAcmCertificateArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerTlsCertificateAcmCertificateArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VirtualGatewayForProviderSpecListenerTlsCertificateAcmCertificateArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VirtualGatewayForProviderSpecListenerTlsCertificateAcmCertificateArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualGatewayForProviderSpecListenerTlsCertificateAcmCertificateArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualGatewayForProviderSpecListenerTlsCertificateAcmCertificateArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Local file certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerTlsCertificateFile {
    /// Certificate chain for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateChain")]
    pub certificate_chain: Option<String>,
    /// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKey")]
    pub private_key: Option<String>,
}

/// A Secret Discovery Service certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerTlsCertificateSds {
    /// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// TLS validation context.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerTlsValidation {
    /// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAlternativeNames")]
    pub subject_alternative_names: Option<VirtualGatewayForProviderSpecListenerTlsValidationSubjectAlternativeNames>,
    /// TLS validation context trust.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trust: Option<VirtualGatewayForProviderSpecListenerTlsValidationTrust>,
}

/// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerTlsValidationSubjectAlternativeNames {
    /// Criteria for determining a SAN's match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<VirtualGatewayForProviderSpecListenerTlsValidationSubjectAlternativeNamesMatch>,
}

/// Criteria for determining a SAN's match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerTlsValidationSubjectAlternativeNamesMatch {
    /// Values sent must match the specified values exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<Vec<String>>,
}

/// TLS validation context trust.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerTlsValidationTrust {
    /// Local file certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualGatewayForProviderSpecListenerTlsValidationTrustFile>,
    /// A Secret Discovery Service certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualGatewayForProviderSpecListenerTlsValidationTrustSds>,
}

/// Local file certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerTlsValidationTrustFile {
    /// Certificate chain for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateChain")]
    pub certificate_chain: Option<String>,
}

/// A Secret Discovery Service certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecListenerTlsValidationTrustSds {
    /// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// Inbound and outbound access logging information for the virtual gateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecLogging {
    /// Access log configuration for a virtual gateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLog")]
    pub access_log: Option<VirtualGatewayForProviderSpecLoggingAccessLog>,
}

/// Access log configuration for a virtual gateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecLoggingAccessLog {
    /// Local file certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualGatewayForProviderSpecLoggingAccessLogFile>,
}

/// Local file certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecLoggingAccessLogFile {
    /// The specified format for the logs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<VirtualGatewayForProviderSpecLoggingAccessLogFileFormat>,
    /// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// The specified format for the logs.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecLoggingAccessLogFileFormat {
    /// The logging format for JSON.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json: Option<Vec<VirtualGatewayForProviderSpecLoggingAccessLogFileFormatJson>>,
    /// The logging format for text. Must be between 1 and 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayForProviderSpecLoggingAccessLogFileFormatJson {
    /// The specified key for the JSON. Must be between 1 and 100 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The specified value for the JSON. Must be between 1 and 100 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProvider {
    /// Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshName")]
    pub mesh_name: Option<String>,
    /// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshOwner")]
    pub mesh_owner: Option<String>,
    /// Name to use for the virtual gateway. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Virtual gateway specification to apply.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<VirtualGatewayInitProviderSpec>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// Virtual gateway specification to apply.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpec {
    /// Defaults for backends.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backendDefaults")]
    pub backend_defaults: Option<VirtualGatewayInitProviderSpecBackendDefaults>,
    /// Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub listener: Option<Vec<VirtualGatewayInitProviderSpecListener>>,
    /// Inbound and outbound access logging information for the virtual gateway.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging: Option<VirtualGatewayInitProviderSpecLogging>,
}

/// Defaults for backends.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecBackendDefaults {
    /// Default client policy for virtual gateway backends.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientPolicy")]
    pub client_policy: Option<VirtualGatewayInitProviderSpecBackendDefaultsClientPolicy>,
}

/// Default client policy for virtual gateway backends.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecBackendDefaultsClientPolicy {
    /// Transport Layer Security (TLS) client policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTls>,
}

/// Transport Layer Security (TLS) client policy.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTls {
    /// Virtual gateway's client's Transport Layer Security (TLS) certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub certificate: Option<VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsCertificate>,
    /// Whether the policy is enforced. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enforce: Option<bool>,
    /// One or more ports that the policy is enforced for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<f64>>,
    /// TLS validation context.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation: Option<VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsValidation>,
}

/// Virtual gateway's client's Transport Layer Security (TLS) certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsCertificate {
    /// Local file certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsCertificateFile>,
    /// A Secret Discovery Service certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsCertificateSds>,
}

/// Local file certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsCertificateFile {
    /// Certificate chain for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateChain")]
    pub certificate_chain: Option<String>,
    /// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKey")]
    pub private_key: Option<String>,
}

/// A Secret Discovery Service certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsCertificateSds {
    /// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// TLS validation context.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsValidation {
    /// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAlternativeNames")]
    pub subject_alternative_names: Option<VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames>,
    /// TLS validation context trust.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trust: Option<VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsValidationTrust>,
}

/// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames {
    /// Criteria for determining a SAN's match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch>,
}

/// Criteria for determining a SAN's match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch {
    /// Values sent must match the specified values exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<Vec<String>>,
}

/// TLS validation context trust.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsValidationTrust {
    /// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acm: Option<VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsValidationTrustAcm>,
    /// Local file certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsValidationTrustFile>,
    /// A Secret Discovery Service certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsValidationTrustSds>,
}

/// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsValidationTrustAcm {
    /// One or more ACM ARNs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateAuthorityArns")]
    pub certificate_authority_arns: Option<Vec<String>>,
}

/// Local file certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsValidationTrustFile {
    /// Certificate chain for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateChain")]
    pub certificate_chain: Option<String>,
}

/// A Secret Discovery Service certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecBackendDefaultsClientPolicyTlsValidationTrustSds {
    /// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListener {
    /// Connection pool information for the listener.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionPool")]
    pub connection_pool: Option<VirtualGatewayInitProviderSpecListenerConnectionPool>,
    /// Health check information for the listener.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheck")]
    pub health_check: Option<VirtualGatewayInitProviderSpecListenerHealthCheck>,
    /// Port mapping information for the listener.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portMapping")]
    pub port_mapping: Option<VirtualGatewayInitProviderSpecListenerPortMapping>,
    /// Transport Layer Security (TLS) client policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<VirtualGatewayInitProviderSpecListenerTls>,
}

/// Connection pool information for the listener.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerConnectionPool {
    /// Connection pool information for gRPC listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<VirtualGatewayInitProviderSpecListenerConnectionPoolGrpc>,
    /// Connection pool information for HTTP listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<VirtualGatewayInitProviderSpecListenerConnectionPoolHttp>,
    /// Connection pool information for HTTP2 listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http2: Option<VirtualGatewayInitProviderSpecListenerConnectionPoolHttp2>,
}

/// Connection pool information for gRPC listeners.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerConnectionPoolGrpc {
    /// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequests")]
    pub max_requests: Option<f64>,
}

/// Connection pool information for HTTP listeners.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerConnectionPoolHttp {
    /// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    pub max_connections: Option<f64>,
    /// Number of overflowing requests after max_connections Envoy will queue to upstream cluster. Minimum value of 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    pub max_pending_requests: Option<f64>,
}

/// Connection pool information for HTTP2 listeners.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerConnectionPoolHttp2 {
    /// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequests")]
    pub max_requests: Option<f64>,
}

/// Health check information for the listener.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerHealthCheck {
    /// Number of consecutive successful health checks that must occur before declaring listener healthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthyThreshold")]
    pub healthy_threshold: Option<f64>,
    /// Time period in milliseconds between each health check execution.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalMillis")]
    pub interval_millis: Option<f64>,
    /// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Port used for the port mapping.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Amount of time to wait when receiving a response from the health check, in milliseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutMillis")]
    pub timeout_millis: Option<f64>,
    /// Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unhealthyThreshold")]
    pub unhealthy_threshold: Option<f64>,
}

/// Port mapping information for the listener.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerPortMapping {
    /// Port used for the port mapping.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}

/// Transport Layer Security (TLS) client policy.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerTls {
    /// Virtual gateway's client's Transport Layer Security (TLS) certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub certificate: Option<VirtualGatewayInitProviderSpecListenerTlsCertificate>,
    /// Listener's TLS mode. Valid values: DISABLED, PERMISSIVE, STRICT.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// TLS validation context.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation: Option<VirtualGatewayInitProviderSpecListenerTlsValidation>,
}

/// Virtual gateway's client's Transport Layer Security (TLS) certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerTlsCertificate {
    /// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acm: Option<VirtualGatewayInitProviderSpecListenerTlsCertificateAcm>,
    /// Local file certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualGatewayInitProviderSpecListenerTlsCertificateFile>,
    /// A Secret Discovery Service certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualGatewayInitProviderSpecListenerTlsCertificateSds>,
}

/// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerTlsCertificateAcm {
    /// ARN for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArn")]
    pub certificate_arn: Option<String>,
    /// Reference to a Certificate in acm to populate certificateArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArnRef")]
    pub certificate_arn_ref: Option<VirtualGatewayInitProviderSpecListenerTlsCertificateAcmCertificateArnRef>,
    /// Selector for a Certificate in acm to populate certificateArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArnSelector")]
    pub certificate_arn_selector: Option<VirtualGatewayInitProviderSpecListenerTlsCertificateAcmCertificateArnSelector>,
}

/// Reference to a Certificate in acm to populate certificateArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerTlsCertificateAcmCertificateArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VirtualGatewayInitProviderSpecListenerTlsCertificateAcmCertificateArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerTlsCertificateAcmCertificateArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VirtualGatewayInitProviderSpecListenerTlsCertificateAcmCertificateArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VirtualGatewayInitProviderSpecListenerTlsCertificateAcmCertificateArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualGatewayInitProviderSpecListenerTlsCertificateAcmCertificateArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualGatewayInitProviderSpecListenerTlsCertificateAcmCertificateArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Certificate in acm to populate certificateArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerTlsCertificateAcmCertificateArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VirtualGatewayInitProviderSpecListenerTlsCertificateAcmCertificateArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerTlsCertificateAcmCertificateArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VirtualGatewayInitProviderSpecListenerTlsCertificateAcmCertificateArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VirtualGatewayInitProviderSpecListenerTlsCertificateAcmCertificateArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualGatewayInitProviderSpecListenerTlsCertificateAcmCertificateArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualGatewayInitProviderSpecListenerTlsCertificateAcmCertificateArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Local file certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerTlsCertificateFile {
    /// Certificate chain for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateChain")]
    pub certificate_chain: Option<String>,
    /// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKey")]
    pub private_key: Option<String>,
}

/// A Secret Discovery Service certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerTlsCertificateSds {
    /// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// TLS validation context.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerTlsValidation {
    /// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAlternativeNames")]
    pub subject_alternative_names: Option<VirtualGatewayInitProviderSpecListenerTlsValidationSubjectAlternativeNames>,
    /// TLS validation context trust.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trust: Option<VirtualGatewayInitProviderSpecListenerTlsValidationTrust>,
}

/// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerTlsValidationSubjectAlternativeNames {
    /// Criteria for determining a SAN's match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<VirtualGatewayInitProviderSpecListenerTlsValidationSubjectAlternativeNamesMatch>,
}

/// Criteria for determining a SAN's match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerTlsValidationSubjectAlternativeNamesMatch {
    /// Values sent must match the specified values exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<Vec<String>>,
}

/// TLS validation context trust.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerTlsValidationTrust {
    /// Local file certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualGatewayInitProviderSpecListenerTlsValidationTrustFile>,
    /// A Secret Discovery Service certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualGatewayInitProviderSpecListenerTlsValidationTrustSds>,
}

/// Local file certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerTlsValidationTrustFile {
    /// Certificate chain for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateChain")]
    pub certificate_chain: Option<String>,
}

/// A Secret Discovery Service certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecListenerTlsValidationTrustSds {
    /// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// Inbound and outbound access logging information for the virtual gateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecLogging {
    /// Access log configuration for a virtual gateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLog")]
    pub access_log: Option<VirtualGatewayInitProviderSpecLoggingAccessLog>,
}

/// Access log configuration for a virtual gateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecLoggingAccessLog {
    /// Local file certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualGatewayInitProviderSpecLoggingAccessLogFile>,
}

/// Local file certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecLoggingAccessLogFile {
    /// The specified format for the logs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<VirtualGatewayInitProviderSpecLoggingAccessLogFileFormat>,
    /// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// The specified format for the logs.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecLoggingAccessLogFileFormat {
    /// The logging format for JSON.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json: Option<Vec<VirtualGatewayInitProviderSpecLoggingAccessLogFileFormatJson>>,
    /// The logging format for text. Must be between 1 and 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayInitProviderSpecLoggingAccessLogFileFormatJson {
    /// The specified key for the JSON. Must be between 1 and 100 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The specified value for the JSON. Must be between 1 and 100 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VirtualGatewayProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VirtualGatewayProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VirtualGatewayProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualGatewayProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualGatewayProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<VirtualGatewayPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VirtualGatewayPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VirtualGatewayPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VirtualGatewayPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VirtualGatewayPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualGatewayPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VirtualGatewayPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// VirtualGatewayStatus defines the observed state of VirtualGateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<VirtualGatewayStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProvider {
    /// ARN of the virtual gateway.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Creation date of the virtual gateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdDate")]
    pub created_date: Option<String>,
    /// ID of the virtual gateway.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Last update date of the virtual gateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastUpdatedDate")]
    pub last_updated_date: Option<String>,
    /// Name of the service mesh in which to create the virtual gateway. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshName")]
    pub mesh_name: Option<String>,
    /// AWS account ID of the service mesh's owner. Defaults to the account ID the AWS provider is currently connected to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "meshOwner")]
    pub mesh_owner: Option<String>,
    /// Name to use for the virtual gateway. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Resource owner's AWS account ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceOwner")]
    pub resource_owner: Option<String>,
    /// Virtual gateway specification to apply.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spec: Option<VirtualGatewayStatusAtProviderSpec>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
}

/// Virtual gateway specification to apply.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpec {
    /// Defaults for backends.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backendDefaults")]
    pub backend_defaults: Option<VirtualGatewayStatusAtProviderSpecBackendDefaults>,
    /// Listeners that the mesh endpoint is expected to receive inbound traffic from. You can specify one listener.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub listener: Option<Vec<VirtualGatewayStatusAtProviderSpecListener>>,
    /// Inbound and outbound access logging information for the virtual gateway.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging: Option<VirtualGatewayStatusAtProviderSpecLogging>,
}

/// Defaults for backends.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecBackendDefaults {
    /// Default client policy for virtual gateway backends.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientPolicy")]
    pub client_policy: Option<VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicy>,
}

/// Default client policy for virtual gateway backends.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicy {
    /// Transport Layer Security (TLS) client policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTls>,
}

/// Transport Layer Security (TLS) client policy.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTls {
    /// Virtual gateway's client's Transport Layer Security (TLS) certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub certificate: Option<VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsCertificate>,
    /// Whether the policy is enforced. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enforce: Option<bool>,
    /// One or more ports that the policy is enforced for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<f64>>,
    /// TLS validation context.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation: Option<VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsValidation>,
}

/// Virtual gateway's client's Transport Layer Security (TLS) certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsCertificate {
    /// Local file certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsCertificateFile>,
    /// A Secret Discovery Service certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsCertificateSds>,
}

/// Local file certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsCertificateFile {
    /// Certificate chain for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateChain")]
    pub certificate_chain: Option<String>,
    /// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKey")]
    pub private_key: Option<String>,
}

/// A Secret Discovery Service certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsCertificateSds {
    /// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// TLS validation context.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsValidation {
    /// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAlternativeNames")]
    pub subject_alternative_names: Option<VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames>,
    /// TLS validation context trust.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trust: Option<VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsValidationTrust>,
}

/// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNames {
    /// Criteria for determining a SAN's match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch>,
}

/// Criteria for determining a SAN's match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsValidationSubjectAlternativeNamesMatch {
    /// Values sent must match the specified values exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<Vec<String>>,
}

/// TLS validation context trust.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsValidationTrust {
    /// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acm: Option<VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsValidationTrustAcm>,
    /// Local file certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsValidationTrustFile>,
    /// A Secret Discovery Service certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsValidationTrustSds>,
}

/// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsValidationTrustAcm {
    /// One or more ACM ARNs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateAuthorityArns")]
    pub certificate_authority_arns: Option<Vec<String>>,
}

/// Local file certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsValidationTrustFile {
    /// Certificate chain for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateChain")]
    pub certificate_chain: Option<String>,
}

/// A Secret Discovery Service certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecBackendDefaultsClientPolicyTlsValidationTrustSds {
    /// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecListener {
    /// Connection pool information for the listener.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionPool")]
    pub connection_pool: Option<VirtualGatewayStatusAtProviderSpecListenerConnectionPool>,
    /// Health check information for the listener.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheck")]
    pub health_check: Option<VirtualGatewayStatusAtProviderSpecListenerHealthCheck>,
    /// Port mapping information for the listener.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portMapping")]
    pub port_mapping: Option<VirtualGatewayStatusAtProviderSpecListenerPortMapping>,
    /// Transport Layer Security (TLS) client policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tls: Option<VirtualGatewayStatusAtProviderSpecListenerTls>,
}

/// Connection pool information for the listener.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecListenerConnectionPool {
    /// Connection pool information for gRPC listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub grpc: Option<VirtualGatewayStatusAtProviderSpecListenerConnectionPoolGrpc>,
    /// Connection pool information for HTTP listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http: Option<VirtualGatewayStatusAtProviderSpecListenerConnectionPoolHttp>,
    /// Connection pool information for HTTP2 listeners.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub http2: Option<VirtualGatewayStatusAtProviderSpecListenerConnectionPoolHttp2>,
}

/// Connection pool information for gRPC listeners.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecListenerConnectionPoolGrpc {
    /// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequests")]
    pub max_requests: Option<f64>,
}

/// Connection pool information for HTTP listeners.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecListenerConnectionPoolHttp {
    /// Maximum number of outbound TCP connections Envoy can establish concurrently with all hosts in upstream cluster. Minimum value of 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    pub max_connections: Option<f64>,
    /// Number of overflowing requests after max_connections Envoy will queue to upstream cluster. Minimum value of 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    pub max_pending_requests: Option<f64>,
}

/// Connection pool information for HTTP2 listeners.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecListenerConnectionPoolHttp2 {
    /// Maximum number of inflight requests Envoy can concurrently support across hosts in upstream cluster. Minimum value of 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequests")]
    pub max_requests: Option<f64>,
}

/// Health check information for the listener.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecListenerHealthCheck {
    /// Number of consecutive successful health checks that must occur before declaring listener healthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthyThreshold")]
    pub healthy_threshold: Option<f64>,
    /// Time period in milliseconds between each health check execution.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "intervalMillis")]
    pub interval_millis: Option<f64>,
    /// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Port used for the port mapping.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Amount of time to wait when receiving a response from the health check, in milliseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutMillis")]
    pub timeout_millis: Option<f64>,
    /// Number of consecutive failed health checks that must occur before declaring a virtual gateway unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unhealthyThreshold")]
    pub unhealthy_threshold: Option<f64>,
}

/// Port mapping information for the listener.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecListenerPortMapping {
    /// Port used for the port mapping.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Protocol used for the port mapping. Valid values are http, http2, tcp and grpc.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}

/// Transport Layer Security (TLS) client policy.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecListenerTls {
    /// Virtual gateway's client's Transport Layer Security (TLS) certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub certificate: Option<VirtualGatewayStatusAtProviderSpecListenerTlsCertificate>,
    /// Listener's TLS mode. Valid values: DISABLED, PERMISSIVE, STRICT.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// TLS validation context.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validation: Option<VirtualGatewayStatusAtProviderSpecListenerTlsValidation>,
}

/// Virtual gateway's client's Transport Layer Security (TLS) certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecListenerTlsCertificate {
    /// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acm: Option<VirtualGatewayStatusAtProviderSpecListenerTlsCertificateAcm>,
    /// Local file certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualGatewayStatusAtProviderSpecListenerTlsCertificateFile>,
    /// A Secret Discovery Service certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualGatewayStatusAtProviderSpecListenerTlsCertificateSds>,
}

/// TLS validation context trust for an AWS Certificate Manager (ACM) certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecListenerTlsCertificateAcm {
    /// ARN for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArn")]
    pub certificate_arn: Option<String>,
}

/// Local file certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecListenerTlsCertificateFile {
    /// Certificate chain for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateChain")]
    pub certificate_chain: Option<String>,
    /// Private key for a certificate stored on the file system of the mesh endpoint that the proxy is running on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKey")]
    pub private_key: Option<String>,
}

/// A Secret Discovery Service certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecListenerTlsCertificateSds {
    /// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// TLS validation context.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecListenerTlsValidation {
    /// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAlternativeNames")]
    pub subject_alternative_names: Option<VirtualGatewayStatusAtProviderSpecListenerTlsValidationSubjectAlternativeNames>,
    /// TLS validation context trust.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trust: Option<VirtualGatewayStatusAtProviderSpecListenerTlsValidationTrust>,
}

/// SANs for a virtual gateway's listener's Transport Layer Security (TLS) validation context.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecListenerTlsValidationSubjectAlternativeNames {
    /// Criteria for determining a SAN's match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "match")]
    pub r#match: Option<VirtualGatewayStatusAtProviderSpecListenerTlsValidationSubjectAlternativeNamesMatch>,
}

/// Criteria for determining a SAN's match.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecListenerTlsValidationSubjectAlternativeNamesMatch {
    /// Values sent must match the specified values exactly.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exact: Option<Vec<String>>,
}

/// TLS validation context trust.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecListenerTlsValidationTrust {
    /// Local file certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualGatewayStatusAtProviderSpecListenerTlsValidationTrustFile>,
    /// A Secret Discovery Service certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sds: Option<VirtualGatewayStatusAtProviderSpecListenerTlsValidationTrustSds>,
}

/// Local file certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecListenerTlsValidationTrustFile {
    /// Certificate chain for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateChain")]
    pub certificate_chain: Option<String>,
}

/// A Secret Discovery Service certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecListenerTlsValidationTrustSds {
    /// Name of the secret secret requested from the Secret Discovery Service provider representing Transport Layer Security (TLS) materials like a certificate or certificate chain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// Inbound and outbound access logging information for the virtual gateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecLogging {
    /// Access log configuration for a virtual gateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLog")]
    pub access_log: Option<VirtualGatewayStatusAtProviderSpecLoggingAccessLog>,
}

/// Access log configuration for a virtual gateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecLoggingAccessLog {
    /// Local file certificate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<VirtualGatewayStatusAtProviderSpecLoggingAccessLogFile>,
}

/// Local file certificate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecLoggingAccessLogFile {
    /// The specified format for the logs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub format: Option<VirtualGatewayStatusAtProviderSpecLoggingAccessLogFileFormat>,
    /// File path to write access logs to. You can use /dev/stdout to send access logs to standard out. Must be between 1 and 255 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

/// The specified format for the logs.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecLoggingAccessLogFileFormat {
    /// The logging format for JSON.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json: Option<Vec<VirtualGatewayStatusAtProviderSpecLoggingAccessLogFileFormatJson>>,
    /// The logging format for text. Must be between 1 and 1000 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VirtualGatewayStatusAtProviderSpecLoggingAccessLogFileFormatJson {
    /// The specified key for the JSON. Must be between 1 and 100 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// The specified value for the JSON. Must be between 1 and 100 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// RiskConfigurationSpec defines the desired state of RiskConfiguration
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "cognitoidp.aws.upbound.io", version = "v1beta2", kind = "RiskConfiguration", plural = "riskconfigurations")]
#[kube(status = "RiskConfigurationStatus")]
pub struct RiskConfigurationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<RiskConfigurationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: RiskConfigurationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<RiskConfigurationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<RiskConfigurationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<RiskConfigurationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<RiskConfigurationWriteConnectionSecretToRef>,
}

/// RiskConfigurationSpec defines the desired state of RiskConfiguration
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RiskConfigurationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationForProvider {
    /// The account takeover risk configuration. See details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountTakeoverRiskConfiguration")]
    pub account_takeover_risk_configuration: Option<RiskConfigurationForProviderAccountTakeoverRiskConfiguration>,
    /// The app client ID. When the client ID is not provided, the same risk configuration is applied to all the clients in the User Pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// The compromised credentials risk configuration. See details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compromisedCredentialsRiskConfiguration")]
    pub compromised_credentials_risk_configuration: Option<RiskConfigurationForProviderCompromisedCredentialsRiskConfiguration>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The configuration to override the risk decision. See details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "riskExceptionConfiguration")]
    pub risk_exception_configuration: Option<RiskConfigurationForProviderRiskExceptionConfiguration>,
    /// The user pool ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolId")]
    pub user_pool_id: Option<String>,
    /// Reference to a UserPool in cognitoidp to populate userPoolId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolIdRef")]
    pub user_pool_id_ref: Option<RiskConfigurationForProviderUserPoolIdRef>,
    /// Selector for a UserPool in cognitoidp to populate userPoolId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolIdSelector")]
    pub user_pool_id_selector: Option<RiskConfigurationForProviderUserPoolIdSelector>,
}

/// The account takeover risk configuration. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationForProviderAccountTakeoverRiskConfiguration {
    /// Account takeover risk configuration actions. See details below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<RiskConfigurationForProviderAccountTakeoverRiskConfigurationActions>,
    /// The notify configuration used to construct email notifications. See details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notifyConfiguration")]
    pub notify_configuration: Option<RiskConfigurationForProviderAccountTakeoverRiskConfigurationNotifyConfiguration>,
}

/// Account takeover risk configuration actions. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationForProviderAccountTakeoverRiskConfigurationActions {
    /// Action to take for a high risk. See action block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "highAction")]
    pub high_action: Option<RiskConfigurationForProviderAccountTakeoverRiskConfigurationActionsHighAction>,
    /// Action to take for a low risk. See action block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lowAction")]
    pub low_action: Option<RiskConfigurationForProviderAccountTakeoverRiskConfigurationActionsLowAction>,
    /// Action to take for a medium risk. See action block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mediumAction")]
    pub medium_action: Option<RiskConfigurationForProviderAccountTakeoverRiskConfigurationActionsMediumAction>,
}

/// Action to take for a high risk. See action block below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationForProviderAccountTakeoverRiskConfigurationActionsHighAction {
    /// The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventAction")]
    pub event_action: Option<String>,
    /// Whether to send a notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notify: Option<bool>,
}

/// Action to take for a low risk. See action block below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationForProviderAccountTakeoverRiskConfigurationActionsLowAction {
    /// The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventAction")]
    pub event_action: Option<String>,
    /// Whether to send a notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notify: Option<bool>,
}

/// Action to take for a medium risk. See action block below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationForProviderAccountTakeoverRiskConfigurationActionsMediumAction {
    /// The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventAction")]
    pub event_action: Option<String>,
    /// Whether to send a notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notify: Option<bool>,
}

/// The notify configuration used to construct email notifications. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationForProviderAccountTakeoverRiskConfigurationNotifyConfiguration {
    /// Email template used when a detected risk event is blocked. See notify email type below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockEmail")]
    pub block_email: Option<RiskConfigurationForProviderAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail>,
    /// The email address that is sending the email. The address must be either individually verified with Amazon Simple Email Service, or from a domain that has been verified with Amazon SES.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    /// The multi-factor authentication (MFA) email template used when MFA is challenged as part of a detected risk. See notify email type below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mfaEmail")]
    pub mfa_email: Option<RiskConfigurationForProviderAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail>,
    /// The email template used when a detected risk event is allowed. See notify email type below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noActionEmail")]
    pub no_action_email: Option<RiskConfigurationForProviderAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail>,
    /// The destination to which the receiver of an email should reply to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replyTo")]
    pub reply_to: Option<String>,
    /// The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. This identity permits Amazon Cognito to send for the email address specified in the From parameter.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceArn")]
    pub source_arn: Option<String>,
}

/// Email template used when a detected risk event is blocked. See notify email type below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationForProviderAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail {
    /// The email HTML body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "htmlBody")]
    pub html_body: Option<String>,
    /// The email subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// The email text body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "textBody")]
    pub text_body: Option<String>,
}

/// The multi-factor authentication (MFA) email template used when MFA is challenged as part of a detected risk. See notify email type below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationForProviderAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail {
    /// The email HTML body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "htmlBody")]
    pub html_body: Option<String>,
    /// The email subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// The email text body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "textBody")]
    pub text_body: Option<String>,
}

/// The email template used when a detected risk event is allowed. See notify email type below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationForProviderAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail {
    /// The email HTML body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "htmlBody")]
    pub html_body: Option<String>,
    /// The email subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// The email text body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "textBody")]
    pub text_body: Option<String>,
}

/// The compromised credentials risk configuration. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationForProviderCompromisedCredentialsRiskConfiguration {
    /// The compromised credentials risk configuration actions. See details below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<RiskConfigurationForProviderCompromisedCredentialsRiskConfigurationActions>,
    /// Perform the action for these events. The default is to perform all events if no event filter is specified. Valid values are SIGN_IN, PASSWORD_CHANGE, and SIGN_UP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventFilter")]
    pub event_filter: Option<Vec<String>>,
}

/// The compromised credentials risk configuration actions. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationForProviderCompromisedCredentialsRiskConfigurationActions {
    /// The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventAction")]
    pub event_action: Option<String>,
}

/// The configuration to override the risk decision. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationForProviderRiskExceptionConfiguration {
    /// Overrides the risk decision to always block the pre-authentication requests.
    /// The IP range is in CIDR notation, a compact representation of an IP address and its routing prefix.
    /// Can contain a maximum of 200 items.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockedIpRangeList")]
    pub blocked_ip_range_list: Option<Vec<String>>,
    /// Risk detection isn't performed on the IP addresses in this range list.
    /// The IP range is in CIDR notation.
    /// Can contain a maximum of 200 items.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skippedIpRangeList")]
    pub skipped_ip_range_list: Option<Vec<String>>,
}

/// Reference to a UserPool in cognitoidp to populate userPoolId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationForProviderUserPoolIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RiskConfigurationForProviderUserPoolIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationForProviderUserPoolIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RiskConfigurationForProviderUserPoolIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RiskConfigurationForProviderUserPoolIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RiskConfigurationForProviderUserPoolIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RiskConfigurationForProviderUserPoolIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a UserPool in cognitoidp to populate userPoolId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationForProviderUserPoolIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RiskConfigurationForProviderUserPoolIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationForProviderUserPoolIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RiskConfigurationForProviderUserPoolIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RiskConfigurationForProviderUserPoolIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RiskConfigurationForProviderUserPoolIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RiskConfigurationForProviderUserPoolIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationInitProvider {
    /// The account takeover risk configuration. See details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountTakeoverRiskConfiguration")]
    pub account_takeover_risk_configuration: Option<RiskConfigurationInitProviderAccountTakeoverRiskConfiguration>,
    /// The app client ID. When the client ID is not provided, the same risk configuration is applied to all the clients in the User Pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// The compromised credentials risk configuration. See details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compromisedCredentialsRiskConfiguration")]
    pub compromised_credentials_risk_configuration: Option<RiskConfigurationInitProviderCompromisedCredentialsRiskConfiguration>,
    /// The configuration to override the risk decision. See details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "riskExceptionConfiguration")]
    pub risk_exception_configuration: Option<RiskConfigurationInitProviderRiskExceptionConfiguration>,
    /// The user pool ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolId")]
    pub user_pool_id: Option<String>,
    /// Reference to a UserPool in cognitoidp to populate userPoolId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolIdRef")]
    pub user_pool_id_ref: Option<RiskConfigurationInitProviderUserPoolIdRef>,
    /// Selector for a UserPool in cognitoidp to populate userPoolId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolIdSelector")]
    pub user_pool_id_selector: Option<RiskConfigurationInitProviderUserPoolIdSelector>,
}

/// The account takeover risk configuration. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationInitProviderAccountTakeoverRiskConfiguration {
    /// Account takeover risk configuration actions. See details below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<RiskConfigurationInitProviderAccountTakeoverRiskConfigurationActions>,
    /// The notify configuration used to construct email notifications. See details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notifyConfiguration")]
    pub notify_configuration: Option<RiskConfigurationInitProviderAccountTakeoverRiskConfigurationNotifyConfiguration>,
}

/// Account takeover risk configuration actions. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationInitProviderAccountTakeoverRiskConfigurationActions {
    /// Action to take for a high risk. See action block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "highAction")]
    pub high_action: Option<RiskConfigurationInitProviderAccountTakeoverRiskConfigurationActionsHighAction>,
    /// Action to take for a low risk. See action block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lowAction")]
    pub low_action: Option<RiskConfigurationInitProviderAccountTakeoverRiskConfigurationActionsLowAction>,
    /// Action to take for a medium risk. See action block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mediumAction")]
    pub medium_action: Option<RiskConfigurationInitProviderAccountTakeoverRiskConfigurationActionsMediumAction>,
}

/// Action to take for a high risk. See action block below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationInitProviderAccountTakeoverRiskConfigurationActionsHighAction {
    /// The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventAction")]
    pub event_action: Option<String>,
    /// Whether to send a notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notify: Option<bool>,
}

/// Action to take for a low risk. See action block below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationInitProviderAccountTakeoverRiskConfigurationActionsLowAction {
    /// The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventAction")]
    pub event_action: Option<String>,
    /// Whether to send a notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notify: Option<bool>,
}

/// Action to take for a medium risk. See action block below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationInitProviderAccountTakeoverRiskConfigurationActionsMediumAction {
    /// The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventAction")]
    pub event_action: Option<String>,
    /// Whether to send a notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notify: Option<bool>,
}

/// The notify configuration used to construct email notifications. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationInitProviderAccountTakeoverRiskConfigurationNotifyConfiguration {
    /// Email template used when a detected risk event is blocked. See notify email type below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockEmail")]
    pub block_email: Option<RiskConfigurationInitProviderAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail>,
    /// The email address that is sending the email. The address must be either individually verified with Amazon Simple Email Service, or from a domain that has been verified with Amazon SES.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    /// The multi-factor authentication (MFA) email template used when MFA is challenged as part of a detected risk. See notify email type below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mfaEmail")]
    pub mfa_email: Option<RiskConfigurationInitProviderAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail>,
    /// The email template used when a detected risk event is allowed. See notify email type below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noActionEmail")]
    pub no_action_email: Option<RiskConfigurationInitProviderAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail>,
    /// The destination to which the receiver of an email should reply to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replyTo")]
    pub reply_to: Option<String>,
    /// The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. This identity permits Amazon Cognito to send for the email address specified in the From parameter.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceArn")]
    pub source_arn: Option<String>,
}

/// Email template used when a detected risk event is blocked. See notify email type below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationInitProviderAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail {
    /// The email HTML body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "htmlBody")]
    pub html_body: Option<String>,
    /// The email subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// The email text body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "textBody")]
    pub text_body: Option<String>,
}

/// The multi-factor authentication (MFA) email template used when MFA is challenged as part of a detected risk. See notify email type below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationInitProviderAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail {
    /// The email HTML body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "htmlBody")]
    pub html_body: Option<String>,
    /// The email subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// The email text body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "textBody")]
    pub text_body: Option<String>,
}

/// The email template used when a detected risk event is allowed. See notify email type below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationInitProviderAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail {
    /// The email HTML body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "htmlBody")]
    pub html_body: Option<String>,
    /// The email subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// The email text body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "textBody")]
    pub text_body: Option<String>,
}

/// The compromised credentials risk configuration. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationInitProviderCompromisedCredentialsRiskConfiguration {
    /// The compromised credentials risk configuration actions. See details below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<RiskConfigurationInitProviderCompromisedCredentialsRiskConfigurationActions>,
    /// Perform the action for these events. The default is to perform all events if no event filter is specified. Valid values are SIGN_IN, PASSWORD_CHANGE, and SIGN_UP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventFilter")]
    pub event_filter: Option<Vec<String>>,
}

/// The compromised credentials risk configuration actions. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationInitProviderCompromisedCredentialsRiskConfigurationActions {
    /// The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventAction")]
    pub event_action: Option<String>,
}

/// The configuration to override the risk decision. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationInitProviderRiskExceptionConfiguration {
    /// Overrides the risk decision to always block the pre-authentication requests.
    /// The IP range is in CIDR notation, a compact representation of an IP address and its routing prefix.
    /// Can contain a maximum of 200 items.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockedIpRangeList")]
    pub blocked_ip_range_list: Option<Vec<String>>,
    /// Risk detection isn't performed on the IP addresses in this range list.
    /// The IP range is in CIDR notation.
    /// Can contain a maximum of 200 items.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skippedIpRangeList")]
    pub skipped_ip_range_list: Option<Vec<String>>,
}

/// Reference to a UserPool in cognitoidp to populate userPoolId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationInitProviderUserPoolIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RiskConfigurationInitProviderUserPoolIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationInitProviderUserPoolIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RiskConfigurationInitProviderUserPoolIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RiskConfigurationInitProviderUserPoolIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RiskConfigurationInitProviderUserPoolIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RiskConfigurationInitProviderUserPoolIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a UserPool in cognitoidp to populate userPoolId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationInitProviderUserPoolIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RiskConfigurationInitProviderUserPoolIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationInitProviderUserPoolIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RiskConfigurationInitProviderUserPoolIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RiskConfigurationInitProviderUserPoolIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RiskConfigurationInitProviderUserPoolIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RiskConfigurationInitProviderUserPoolIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RiskConfigurationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RiskConfigurationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RiskConfigurationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RiskConfigurationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RiskConfigurationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<RiskConfigurationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<RiskConfigurationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RiskConfigurationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RiskConfigurationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RiskConfigurationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RiskConfigurationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RiskConfigurationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// RiskConfigurationStatus defines the observed state of RiskConfiguration.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<RiskConfigurationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationStatusAtProvider {
    /// The account takeover risk configuration. See details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountTakeoverRiskConfiguration")]
    pub account_takeover_risk_configuration: Option<RiskConfigurationStatusAtProviderAccountTakeoverRiskConfiguration>,
    /// The app client ID. When the client ID is not provided, the same risk configuration is applied to all the clients in the User Pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// The compromised credentials risk configuration. See details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compromisedCredentialsRiskConfiguration")]
    pub compromised_credentials_risk_configuration: Option<RiskConfigurationStatusAtProviderCompromisedCredentialsRiskConfiguration>,
    /// The user pool ID or the user pool ID and Client Id separated by a : if the configuration is client specific.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The configuration to override the risk decision. See details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "riskExceptionConfiguration")]
    pub risk_exception_configuration: Option<RiskConfigurationStatusAtProviderRiskExceptionConfiguration>,
    /// The user pool ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolId")]
    pub user_pool_id: Option<String>,
}

/// The account takeover risk configuration. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationStatusAtProviderAccountTakeoverRiskConfiguration {
    /// Account takeover risk configuration actions. See details below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<RiskConfigurationStatusAtProviderAccountTakeoverRiskConfigurationActions>,
    /// The notify configuration used to construct email notifications. See details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notifyConfiguration")]
    pub notify_configuration: Option<RiskConfigurationStatusAtProviderAccountTakeoverRiskConfigurationNotifyConfiguration>,
}

/// Account takeover risk configuration actions. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationStatusAtProviderAccountTakeoverRiskConfigurationActions {
    /// Action to take for a high risk. See action block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "highAction")]
    pub high_action: Option<RiskConfigurationStatusAtProviderAccountTakeoverRiskConfigurationActionsHighAction>,
    /// Action to take for a low risk. See action block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lowAction")]
    pub low_action: Option<RiskConfigurationStatusAtProviderAccountTakeoverRiskConfigurationActionsLowAction>,
    /// Action to take for a medium risk. See action block below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mediumAction")]
    pub medium_action: Option<RiskConfigurationStatusAtProviderAccountTakeoverRiskConfigurationActionsMediumAction>,
}

/// Action to take for a high risk. See action block below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationStatusAtProviderAccountTakeoverRiskConfigurationActionsHighAction {
    /// The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventAction")]
    pub event_action: Option<String>,
    /// Whether to send a notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notify: Option<bool>,
}

/// Action to take for a low risk. See action block below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationStatusAtProviderAccountTakeoverRiskConfigurationActionsLowAction {
    /// The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventAction")]
    pub event_action: Option<String>,
    /// Whether to send a notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notify: Option<bool>,
}

/// Action to take for a medium risk. See action block below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationStatusAtProviderAccountTakeoverRiskConfigurationActionsMediumAction {
    /// The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventAction")]
    pub event_action: Option<String>,
    /// Whether to send a notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notify: Option<bool>,
}

/// The notify configuration used to construct email notifications. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationStatusAtProviderAccountTakeoverRiskConfigurationNotifyConfiguration {
    /// Email template used when a detected risk event is blocked. See notify email type below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockEmail")]
    pub block_email: Option<RiskConfigurationStatusAtProviderAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail>,
    /// The email address that is sending the email. The address must be either individually verified with Amazon Simple Email Service, or from a domain that has been verified with Amazon SES.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
    /// The multi-factor authentication (MFA) email template used when MFA is challenged as part of a detected risk. See notify email type below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mfaEmail")]
    pub mfa_email: Option<RiskConfigurationStatusAtProviderAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail>,
    /// The email template used when a detected risk event is allowed. See notify email type below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noActionEmail")]
    pub no_action_email: Option<RiskConfigurationStatusAtProviderAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail>,
    /// The destination to which the receiver of an email should reply to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replyTo")]
    pub reply_to: Option<String>,
    /// The Amazon Resource Name (ARN) of the identity that is associated with the sending authorization policy. This identity permits Amazon Cognito to send for the email address specified in the From parameter.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceArn")]
    pub source_arn: Option<String>,
}

/// Email template used when a detected risk event is blocked. See notify email type below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationStatusAtProviderAccountTakeoverRiskConfigurationNotifyConfigurationBlockEmail {
    /// The email HTML body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "htmlBody")]
    pub html_body: Option<String>,
    /// The email subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// The email text body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "textBody")]
    pub text_body: Option<String>,
}

/// The multi-factor authentication (MFA) email template used when MFA is challenged as part of a detected risk. See notify email type below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationStatusAtProviderAccountTakeoverRiskConfigurationNotifyConfigurationMfaEmail {
    /// The email HTML body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "htmlBody")]
    pub html_body: Option<String>,
    /// The email subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// The email text body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "textBody")]
    pub text_body: Option<String>,
}

/// The email template used when a detected risk event is allowed. See notify email type below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationStatusAtProviderAccountTakeoverRiskConfigurationNotifyConfigurationNoActionEmail {
    /// The email HTML body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "htmlBody")]
    pub html_body: Option<String>,
    /// The email subject.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// The email text body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "textBody")]
    pub text_body: Option<String>,
}

/// The compromised credentials risk configuration. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationStatusAtProviderCompromisedCredentialsRiskConfiguration {
    /// The compromised credentials risk configuration actions. See details below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub actions: Option<RiskConfigurationStatusAtProviderCompromisedCredentialsRiskConfigurationActions>,
    /// Perform the action for these events. The default is to perform all events if no event filter is specified. Valid values are SIGN_IN, PASSWORD_CHANGE, and SIGN_UP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventFilter")]
    pub event_filter: Option<Vec<String>>,
}

/// The compromised credentials risk configuration actions. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationStatusAtProviderCompromisedCredentialsRiskConfigurationActions {
    /// The action to take in response to the account takeover action. Valid values are BLOCK, MFA_IF_CONFIGURED, MFA_REQUIRED and NO_ACTION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventAction")]
    pub event_action: Option<String>,
}

/// The configuration to override the risk decision. See details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RiskConfigurationStatusAtProviderRiskExceptionConfiguration {
    /// Overrides the risk decision to always block the pre-authentication requests.
    /// The IP range is in CIDR notation, a compact representation of an IP address and its routing prefix.
    /// Can contain a maximum of 200 items.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockedIpRangeList")]
    pub blocked_ip_range_list: Option<Vec<String>>,
    /// Risk detection isn't performed on the IP addresses in this range list.
    /// The IP range is in CIDR notation.
    /// Can contain a maximum of 200 items.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skippedIpRangeList")]
    pub skipped_ip_range_list: Option<Vec<String>>,
}


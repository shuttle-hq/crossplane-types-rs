// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ImagePipelineSpec defines the desired state of ImagePipeline
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "imagebuilder.aws.upbound.io", version = "v1beta2", kind = "ImagePipeline", plural = "imagepipelines")]
#[kube(status = "ImagePipelineStatus")]
pub struct ImagePipelineSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<ImagePipelineDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ImagePipelineForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<ImagePipelineInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<ImagePipelineProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<ImagePipelinePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<ImagePipelineWriteConnectionSecretToRef>,
}

/// ImagePipelineSpec defines the desired state of ImagePipeline
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineForProvider {
    /// Amazon Resource Name (ARN) of the container recipe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerRecipeArn")]
    pub container_recipe_arn: Option<String>,
    /// Description of the image pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Amazon Resource Name (ARN) of the Image Builder Distribution Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionConfigurationArn")]
    pub distribution_configuration_arn: Option<String>,
    /// Whether additional information about the image being created is collected. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enhancedImageMetadataEnabled")]
    pub enhanced_image_metadata_enabled: Option<bool>,
    /// Amazon Resource Name (ARN) of the service-linked role to be used by Image Builder to execute workflows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRole")]
    pub execution_role: Option<String>,
    /// Amazon Resource Name (ARN) of the image recipe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageRecipeArn")]
    pub image_recipe_arn: Option<String>,
    /// Reference to a ImageRecipe in imagebuilder to populate imageRecipeArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageRecipeArnRef")]
    pub image_recipe_arn_ref: Option<ImagePipelineForProviderImageRecipeArnRef>,
    /// Selector for a ImageRecipe in imagebuilder to populate imageRecipeArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageRecipeArnSelector")]
    pub image_recipe_arn_selector: Option<ImagePipelineForProviderImageRecipeArnSelector>,
    /// Configuration block with image scanning configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageScanningConfiguration")]
    pub image_scanning_configuration: Option<ImagePipelineForProviderImageScanningConfiguration>,
    /// Configuration block with image tests configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageTestsConfiguration")]
    pub image_tests_configuration: Option<ImagePipelineForProviderImageTestsConfiguration>,
    /// Amazon Resource Name (ARN) of the Image Builder Infrastructure Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureConfigurationArn")]
    pub infrastructure_configuration_arn: Option<String>,
    /// Reference to a InfrastructureConfiguration in imagebuilder to populate infrastructureConfigurationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureConfigurationArnRef")]
    pub infrastructure_configuration_arn_ref: Option<ImagePipelineForProviderInfrastructureConfigurationArnRef>,
    /// Selector for a InfrastructureConfiguration in imagebuilder to populate infrastructureConfigurationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureConfigurationArnSelector")]
    pub infrastructure_configuration_arn_selector: Option<ImagePipelineForProviderInfrastructureConfigurationArnSelector>,
    /// Name of the image pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Configuration block with schedule settings. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<ImagePipelineForProviderSchedule>,
    /// Status of the image pipeline. Valid values are DISABLED and ENABLED. Defaults to ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Configuration block with the workflow configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workflow: Option<Vec<ImagePipelineForProviderWorkflow>>,
}

/// Reference to a ImageRecipe in imagebuilder to populate imageRecipeArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineForProviderImageRecipeArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ImagePipelineForProviderImageRecipeArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineForProviderImageRecipeArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ImagePipelineForProviderImageRecipeArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ImagePipelineForProviderImageRecipeArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineForProviderImageRecipeArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineForProviderImageRecipeArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ImageRecipe in imagebuilder to populate imageRecipeArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineForProviderImageRecipeArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ImagePipelineForProviderImageRecipeArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineForProviderImageRecipeArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ImagePipelineForProviderImageRecipeArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ImagePipelineForProviderImageRecipeArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineForProviderImageRecipeArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineForProviderImageRecipeArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block with image scanning configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineForProviderImageScanningConfiguration {
    /// Configuration block with ECR configuration for image scanning. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecrConfiguration")]
    pub ecr_configuration: Option<ImagePipelineForProviderImageScanningConfigurationEcrConfiguration>,
    /// Whether image scans are enabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageScanningEnabled")]
    pub image_scanning_enabled: Option<bool>,
}

/// Configuration block with ECR configuration for image scanning. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineForProviderImageScanningConfigurationEcrConfiguration {
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerTags")]
    pub container_tags: Option<Vec<String>>,
    /// The name of the repository to scan
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryName")]
    pub repository_name: Option<String>,
}

/// Configuration block with image tests configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineForProviderImageTestsConfiguration {
    /// Whether image tests are enabled. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageTestsEnabled")]
    pub image_tests_enabled: Option<bool>,
    /// Number of minutes before image tests time out. Valid values are between 60 and 1440. Defaults to 720.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutMinutes")]
    pub timeout_minutes: Option<f64>,
}

/// Reference to a InfrastructureConfiguration in imagebuilder to populate infrastructureConfigurationArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineForProviderInfrastructureConfigurationArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ImagePipelineForProviderInfrastructureConfigurationArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineForProviderInfrastructureConfigurationArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ImagePipelineForProviderInfrastructureConfigurationArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ImagePipelineForProviderInfrastructureConfigurationArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineForProviderInfrastructureConfigurationArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineForProviderInfrastructureConfigurationArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a InfrastructureConfiguration in imagebuilder to populate infrastructureConfigurationArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineForProviderInfrastructureConfigurationArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ImagePipelineForProviderInfrastructureConfigurationArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineForProviderInfrastructureConfigurationArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ImagePipelineForProviderInfrastructureConfigurationArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ImagePipelineForProviderInfrastructureConfigurationArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineForProviderInfrastructureConfigurationArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineForProviderInfrastructureConfigurationArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block with schedule settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineForProviderSchedule {
    /// Condition when the pipeline should trigger a new image build. Valid values are EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE and EXPRESSION_MATCH_ONLY. Defaults to EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pipelineExecutionStartCondition")]
    pub pipeline_execution_start_condition: Option<String>,
    /// Cron expression of how often the pipeline start condition is evaluated. For example, cron(0 0 * * ? *) is evaluated every day at midnight UTC. Configurations using the five field syntax that was previously accepted by the API, such as cron(0 0 * * *), must be updated to the six field syntax. For more information, see the Image Builder User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scheduleExpression")]
    pub schedule_expression: Option<String>,
    /// The timezone that applies to the scheduling expression. For example, "Etc/UTC", "America/Los_Angeles" in the IANA timezone format. If not specified this defaults to UTC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineForProviderWorkflow {
    /// The action to take if the workflow fails. Must be one of CONTINUE or ABORT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onFailure")]
    pub on_failure: Option<String>,
    /// The parallel group in which to run a test Workflow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parallelGroup")]
    pub parallel_group: Option<String>,
    /// Configuration block for the workflow parameters. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<ImagePipelineForProviderWorkflowParameter>>,
    /// Amazon Resource Name (ARN) of the Image Builder Workflow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workflowArn")]
    pub workflow_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineForProviderWorkflowParameter {
    /// The name of the Workflow parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The value of the Workflow parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineInitProvider {
    /// Amazon Resource Name (ARN) of the container recipe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerRecipeArn")]
    pub container_recipe_arn: Option<String>,
    /// Description of the image pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Amazon Resource Name (ARN) of the Image Builder Distribution Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionConfigurationArn")]
    pub distribution_configuration_arn: Option<String>,
    /// Whether additional information about the image being created is collected. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enhancedImageMetadataEnabled")]
    pub enhanced_image_metadata_enabled: Option<bool>,
    /// Amazon Resource Name (ARN) of the service-linked role to be used by Image Builder to execute workflows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRole")]
    pub execution_role: Option<String>,
    /// Amazon Resource Name (ARN) of the image recipe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageRecipeArn")]
    pub image_recipe_arn: Option<String>,
    /// Reference to a ImageRecipe in imagebuilder to populate imageRecipeArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageRecipeArnRef")]
    pub image_recipe_arn_ref: Option<ImagePipelineInitProviderImageRecipeArnRef>,
    /// Selector for a ImageRecipe in imagebuilder to populate imageRecipeArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageRecipeArnSelector")]
    pub image_recipe_arn_selector: Option<ImagePipelineInitProviderImageRecipeArnSelector>,
    /// Configuration block with image scanning configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageScanningConfiguration")]
    pub image_scanning_configuration: Option<ImagePipelineInitProviderImageScanningConfiguration>,
    /// Configuration block with image tests configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageTestsConfiguration")]
    pub image_tests_configuration: Option<ImagePipelineInitProviderImageTestsConfiguration>,
    /// Amazon Resource Name (ARN) of the Image Builder Infrastructure Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureConfigurationArn")]
    pub infrastructure_configuration_arn: Option<String>,
    /// Reference to a InfrastructureConfiguration in imagebuilder to populate infrastructureConfigurationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureConfigurationArnRef")]
    pub infrastructure_configuration_arn_ref: Option<ImagePipelineInitProviderInfrastructureConfigurationArnRef>,
    /// Selector for a InfrastructureConfiguration in imagebuilder to populate infrastructureConfigurationArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureConfigurationArnSelector")]
    pub infrastructure_configuration_arn_selector: Option<ImagePipelineInitProviderInfrastructureConfigurationArnSelector>,
    /// Name of the image pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Configuration block with schedule settings. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<ImagePipelineInitProviderSchedule>,
    /// Status of the image pipeline. Valid values are DISABLED and ENABLED. Defaults to ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Configuration block with the workflow configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workflow: Option<Vec<ImagePipelineInitProviderWorkflow>>,
}

/// Reference to a ImageRecipe in imagebuilder to populate imageRecipeArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineInitProviderImageRecipeArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ImagePipelineInitProviderImageRecipeArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineInitProviderImageRecipeArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ImagePipelineInitProviderImageRecipeArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ImagePipelineInitProviderImageRecipeArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineInitProviderImageRecipeArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineInitProviderImageRecipeArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ImageRecipe in imagebuilder to populate imageRecipeArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineInitProviderImageRecipeArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ImagePipelineInitProviderImageRecipeArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineInitProviderImageRecipeArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ImagePipelineInitProviderImageRecipeArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ImagePipelineInitProviderImageRecipeArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineInitProviderImageRecipeArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineInitProviderImageRecipeArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block with image scanning configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineInitProviderImageScanningConfiguration {
    /// Configuration block with ECR configuration for image scanning. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecrConfiguration")]
    pub ecr_configuration: Option<ImagePipelineInitProviderImageScanningConfigurationEcrConfiguration>,
    /// Whether image scans are enabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageScanningEnabled")]
    pub image_scanning_enabled: Option<bool>,
}

/// Configuration block with ECR configuration for image scanning. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineInitProviderImageScanningConfigurationEcrConfiguration {
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerTags")]
    pub container_tags: Option<Vec<String>>,
    /// The name of the repository to scan
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryName")]
    pub repository_name: Option<String>,
}

/// Configuration block with image tests configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineInitProviderImageTestsConfiguration {
    /// Whether image tests are enabled. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageTestsEnabled")]
    pub image_tests_enabled: Option<bool>,
    /// Number of minutes before image tests time out. Valid values are between 60 and 1440. Defaults to 720.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutMinutes")]
    pub timeout_minutes: Option<f64>,
}

/// Reference to a InfrastructureConfiguration in imagebuilder to populate infrastructureConfigurationArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineInitProviderInfrastructureConfigurationArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ImagePipelineInitProviderInfrastructureConfigurationArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineInitProviderInfrastructureConfigurationArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ImagePipelineInitProviderInfrastructureConfigurationArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ImagePipelineInitProviderInfrastructureConfigurationArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineInitProviderInfrastructureConfigurationArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineInitProviderInfrastructureConfigurationArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a InfrastructureConfiguration in imagebuilder to populate infrastructureConfigurationArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineInitProviderInfrastructureConfigurationArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ImagePipelineInitProviderInfrastructureConfigurationArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineInitProviderInfrastructureConfigurationArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ImagePipelineInitProviderInfrastructureConfigurationArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ImagePipelineInitProviderInfrastructureConfigurationArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineInitProviderInfrastructureConfigurationArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineInitProviderInfrastructureConfigurationArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block with schedule settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineInitProviderSchedule {
    /// Condition when the pipeline should trigger a new image build. Valid values are EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE and EXPRESSION_MATCH_ONLY. Defaults to EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pipelineExecutionStartCondition")]
    pub pipeline_execution_start_condition: Option<String>,
    /// Cron expression of how often the pipeline start condition is evaluated. For example, cron(0 0 * * ? *) is evaluated every day at midnight UTC. Configurations using the five field syntax that was previously accepted by the API, such as cron(0 0 * * *), must be updated to the six field syntax. For more information, see the Image Builder User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scheduleExpression")]
    pub schedule_expression: Option<String>,
    /// The timezone that applies to the scheduling expression. For example, "Etc/UTC", "America/Los_Angeles" in the IANA timezone format. If not specified this defaults to UTC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineInitProviderWorkflow {
    /// The action to take if the workflow fails. Must be one of CONTINUE or ABORT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onFailure")]
    pub on_failure: Option<String>,
    /// The parallel group in which to run a test Workflow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parallelGroup")]
    pub parallel_group: Option<String>,
    /// Configuration block for the workflow parameters. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<ImagePipelineInitProviderWorkflowParameter>>,
    /// Amazon Resource Name (ARN) of the Image Builder Workflow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workflowArn")]
    pub workflow_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineInitProviderWorkflowParameter {
    /// The name of the Workflow parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The value of the Workflow parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ImagePipelineProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ImagePipelineProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ImagePipelineProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelineProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelinePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ImagePipelinePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ImagePipelinePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelinePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ImagePipelinePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelinePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ImagePipelinePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ImagePipelinePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelinePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ImagePipelinePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelinePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ImagePipelineStatus defines the observed state of ImagePipeline.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<ImagePipelineStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineStatusAtProvider {
    /// Amazon Resource Name (ARN) of the image pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Amazon Resource Name (ARN) of the container recipe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerRecipeArn")]
    pub container_recipe_arn: Option<String>,
    /// Date the image pipeline was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateCreated")]
    pub date_created: Option<String>,
    /// Date the image pipeline was last run.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateLastRun")]
    pub date_last_run: Option<String>,
    /// Date the image pipeline will run next.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateNextRun")]
    pub date_next_run: Option<String>,
    /// Date the image pipeline was updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dateUpdated")]
    pub date_updated: Option<String>,
    /// Description of the image pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Amazon Resource Name (ARN) of the Image Builder Distribution Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionConfigurationArn")]
    pub distribution_configuration_arn: Option<String>,
    /// Whether additional information about the image being created is collected. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enhancedImageMetadataEnabled")]
    pub enhanced_image_metadata_enabled: Option<bool>,
    /// Amazon Resource Name (ARN) of the service-linked role to be used by Image Builder to execute workflows.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRole")]
    pub execution_role: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Amazon Resource Name (ARN) of the image recipe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageRecipeArn")]
    pub image_recipe_arn: Option<String>,
    /// Configuration block with image scanning configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageScanningConfiguration")]
    pub image_scanning_configuration: Option<ImagePipelineStatusAtProviderImageScanningConfiguration>,
    /// Configuration block with image tests configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageTestsConfiguration")]
    pub image_tests_configuration: Option<ImagePipelineStatusAtProviderImageTestsConfiguration>,
    /// Amazon Resource Name (ARN) of the Image Builder Infrastructure Configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "infrastructureConfigurationArn")]
    pub infrastructure_configuration_arn: Option<String>,
    /// Name of the image pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Platform of the image pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<String>,
    /// Configuration block with schedule settings. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<ImagePipelineStatusAtProviderSchedule>,
    /// Status of the image pipeline. Valid values are DISABLED and ENABLED. Defaults to ENABLED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// Configuration block with the workflow configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub workflow: Option<Vec<ImagePipelineStatusAtProviderWorkflow>>,
}

/// Configuration block with image scanning configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineStatusAtProviderImageScanningConfiguration {
    /// Configuration block with ECR configuration for image scanning. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecrConfiguration")]
    pub ecr_configuration: Option<ImagePipelineStatusAtProviderImageScanningConfigurationEcrConfiguration>,
    /// Whether image scans are enabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageScanningEnabled")]
    pub image_scanning_enabled: Option<bool>,
}

/// Configuration block with ECR configuration for image scanning. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineStatusAtProviderImageScanningConfigurationEcrConfiguration {
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerTags")]
    pub container_tags: Option<Vec<String>>,
    /// The name of the repository to scan
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "repositoryName")]
    pub repository_name: Option<String>,
}

/// Configuration block with image tests configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineStatusAtProviderImageTestsConfiguration {
    /// Whether image tests are enabled. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageTestsEnabled")]
    pub image_tests_enabled: Option<bool>,
    /// Number of minutes before image tests time out. Valid values are between 60 and 1440. Defaults to 720.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutMinutes")]
    pub timeout_minutes: Option<f64>,
}

/// Configuration block with schedule settings. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineStatusAtProviderSchedule {
    /// Condition when the pipeline should trigger a new image build. Valid values are EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE and EXPRESSION_MATCH_ONLY. Defaults to EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pipelineExecutionStartCondition")]
    pub pipeline_execution_start_condition: Option<String>,
    /// Cron expression of how often the pipeline start condition is evaluated. For example, cron(0 0 * * ? *) is evaluated every day at midnight UTC. Configurations using the five field syntax that was previously accepted by the API, such as cron(0 0 * * *), must be updated to the six field syntax. For more information, see the Image Builder User Guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scheduleExpression")]
    pub schedule_expression: Option<String>,
    /// The timezone that applies to the scheduling expression. For example, "Etc/UTC", "America/Los_Angeles" in the IANA timezone format. If not specified this defaults to UTC.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineStatusAtProviderWorkflow {
    /// The action to take if the workflow fails. Must be one of CONTINUE or ABORT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onFailure")]
    pub on_failure: Option<String>,
    /// The parallel group in which to run a test Workflow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parallelGroup")]
    pub parallel_group: Option<String>,
    /// Configuration block for the workflow parameters. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameter: Option<Vec<ImagePipelineStatusAtProviderWorkflowParameter>>,
    /// Amazon Resource Name (ARN) of the Image Builder Workflow.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workflowArn")]
    pub workflow_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ImagePipelineStatusAtProviderWorkflowParameter {
    /// The name of the Workflow parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The value of the Workflow parameter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// EnvironmentSpec defines the desired state of Environment
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "mwaa.aws.upbound.io", version = "v1beta1", kind = "Environment", plural = "environments")]
#[kube(status = "EnvironmentStatus")]
pub struct EnvironmentSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<EnvironmentDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: EnvironmentForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<EnvironmentInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<EnvironmentProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<EnvironmentPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<EnvironmentWriteConnectionSecretToRef>,
}

/// EnvironmentSpec defines the desired state of Environment
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProvider {
    /// The airflow_configuration_options parameter specifies airflow override options. Check the Official documentation for all possible configuration options.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "airflowConfigurationOptionsSecretRef")]
    pub airflow_configuration_options_secret_ref: Option<EnvironmentForProviderAirflowConfigurationOptionsSecretRef>,
    /// Airflow version of your environment, will be set by default to the latest version that MWAA supports.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "airflowVersion")]
    pub airflow_version: Option<String>,
    /// The relative path to the DAG folder on your Amazon S3 storage bucket. For example, dags. For more information, see Importing DAGs on Amazon MWAA.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dagS3Path")]
    pub dag_s3_path: Option<String>,
    /// Defines whether the VPC endpoints configured for the environment are created and managed by the customer or by AWS. If set to SERVICE, Amazon MWAA will create and manage the required VPC endpoints in your VPC. If set to CUSTOMER, you must create, and manage, the VPC endpoints for your VPC. Defaults to SERVICE if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointManagement")]
    pub endpoint_management: Option<String>,
    /// Environment class for the cluster. Possible options are mw1.small, mw1.medium, mw1.large. Will be set by default to mw1.small. Please check the AWS Pricing for more information about the environment classes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentClass")]
    pub environment_class: Option<String>,
    /// The Amazon Resource Name (ARN) of the task execution role that the Amazon MWAA and its environment can assume. Check the official AWS documentation for the detailed role specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArn")]
    pub execution_role_arn: Option<String>,
    /// Reference to a Role in iam to populate executionRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArnRef")]
    pub execution_role_arn_ref: Option<EnvironmentForProviderExecutionRoleArnRef>,
    /// Selector for a Role in iam to populate executionRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArnSelector")]
    pub execution_role_arn_selector: Option<EnvironmentForProviderExecutionRoleArnSelector>,
    /// The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key aws/airflow by default. Please check the Official Documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKey")]
    pub kms_key: Option<String>,
    /// Reference to a Key in kms to populate kmsKey.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyRef")]
    pub kms_key_ref: Option<EnvironmentForProviderKmsKeyRef>,
    /// Selector for a Key in kms to populate kmsKey.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeySelector")]
    pub kms_key_selector: Option<EnvironmentForProviderKmsKeySelector>,
    /// The Apache Airflow logs you want to send to Amazon CloudWatch Logs. See logging_configuration Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingConfiguration")]
    pub logging_configuration: Option<EnvironmentForProviderLoggingConfiguration>,
    /// The maximum number of web servers that you want to run in your environment. Value need to be between 2 and 5. Will be 2 by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxWebservers")]
    pub max_webservers: Option<f64>,
    /// The maximum number of workers that can be automatically scaled up. Value need to be between 1 and 25. Will be 10 by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxWorkers")]
    pub max_workers: Option<f64>,
    /// The minimum number of web servers that you want to run in your environment. Value need to be between 2 and 5. Will be 2 by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minWebservers")]
    pub min_webservers: Option<f64>,
    /// The minimum number of workers that you want to run in your environment. Will be 1 by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minWorkers")]
    pub min_workers: Option<f64>,
    /// Specifies the network configuration for your Apache Airflow Environment. This includes two private subnets as well as security groups for the Airflow environment. Each subnet requires internet connection, otherwise the deployment will fail. See network_configuration Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkConfiguration")]
    pub network_configuration: Option<EnvironmentForProviderNetworkConfiguration>,
    /// The plugins.zip file version you want to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pluginsS3ObjectVersion")]
    pub plugins_s3_object_version: Option<String>,
    /// The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then plugins_s3_object_version is required. For more information, see Importing DAGs on Amazon MWAA.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pluginsS3Path")]
    pub plugins_s3_path: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The requirements.txt file version you want to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requirementsS3ObjectVersion")]
    pub requirements_s3_object_version: Option<String>,
    /// The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirements_s3_object_version is required. For more information, see Importing DAGs on Amazon MWAA.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requirementsS3Path")]
    pub requirements_s3_path: Option<String>,
    /// The number of schedulers that you want to run in your environment. v2.0.2 and above accepts 2 - 5, default 2. v1.10.12 accepts 1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedulers: Option<f64>,
    /// The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceBucketArn")]
    pub source_bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate sourceBucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceBucketArnRef")]
    pub source_bucket_arn_ref: Option<EnvironmentForProviderSourceBucketArnRef>,
    /// Selector for a Bucket in s3 to populate sourceBucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceBucketArnSelector")]
    pub source_bucket_arn_selector: Option<EnvironmentForProviderSourceBucketArnSelector>,
    /// The version of the startup shell script you want to use. You must specify the version ID that Amazon S3 assigns to the file every time you update the script.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupScriptS3ObjectVersion")]
    pub startup_script_s3_object_version: Option<String>,
    /// The relative path to the script hosted in your bucket. The script runs as your environment starts before starting the Apache Airflow process. Use this script to install dependencies, modify configuration options, and set environment variables. See Using a startup script. Supported for environment versions 2.x and later.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupScriptS3Path")]
    pub startup_script_s3_path: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Specifies whether the webserver should be accessible over the internet or via your specified VPC. Possible options: PRIVATE_ONLY (default) and PUBLIC_ONLY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webserverAccessMode")]
    pub webserver_access_mode: Option<String>,
    /// Specifies the start date for the weekly maintenance window.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weeklyMaintenanceWindowStart")]
    pub weekly_maintenance_window_start: Option<String>,
}

/// The airflow_configuration_options parameter specifies airflow override options. Check the Official documentation for all possible configuration options.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderAirflowConfigurationOptionsSecretRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a Role in iam to populate executionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderExecutionRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentForProviderExecutionRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderExecutionRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentForProviderExecutionRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentForProviderExecutionRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderExecutionRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderExecutionRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate executionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderExecutionRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentForProviderExecutionRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderExecutionRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentForProviderExecutionRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentForProviderExecutionRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderExecutionRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderExecutionRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Key in kms to populate kmsKey.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderKmsKeyRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentForProviderKmsKeyRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderKmsKeyRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentForProviderKmsKeyRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentForProviderKmsKeyRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderKmsKeyRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderKmsKeyRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKey.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderKmsKeySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentForProviderKmsKeySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderKmsKeySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentForProviderKmsKeySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentForProviderKmsKeySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderKmsKeySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderKmsKeySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The Apache Airflow logs you want to send to Amazon CloudWatch Logs. See logging_configuration Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderLoggingConfiguration {
    /// Log configuration options for processing DAGs. See Module logging configuration for more information. Disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dagProcessingLogs")]
    pub dag_processing_logs: Option<EnvironmentForProviderLoggingConfigurationDagProcessingLogs>,
    /// Log configuration options for the schedulers. See Module logging configuration for more information. Disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulerLogs")]
    pub scheduler_logs: Option<EnvironmentForProviderLoggingConfigurationSchedulerLogs>,
    /// Log configuration options for DAG tasks. See Module logging configuration for more information. Enabled by default with INFO log level.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "taskLogs")]
    pub task_logs: Option<EnvironmentForProviderLoggingConfigurationTaskLogs>,
    /// Log configuration options for the webservers. See Module logging configuration for more information. Disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webserverLogs")]
    pub webserver_logs: Option<EnvironmentForProviderLoggingConfigurationWebserverLogs>,
    /// Log configuration options for the workers. See Module logging configuration for more information. Disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workerLogs")]
    pub worker_logs: Option<EnvironmentForProviderLoggingConfigurationWorkerLogs>,
}

/// Log configuration options for processing DAGs. See Module logging configuration for more information. Disabled by default.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderLoggingConfigurationDagProcessingLogs {
    /// Enabling or disabling the collection of logs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logging level. Valid values: CRITICAL, ERROR, WARNING, INFO, DEBUG. Will be INFO by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
}

/// Log configuration options for the schedulers. See Module logging configuration for more information. Disabled by default.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderLoggingConfigurationSchedulerLogs {
    /// Enabling or disabling the collection of logs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logging level. Valid values: CRITICAL, ERROR, WARNING, INFO, DEBUG. Will be INFO by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
}

/// Log configuration options for DAG tasks. See Module logging configuration for more information. Enabled by default with INFO log level.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderLoggingConfigurationTaskLogs {
    /// Enabling or disabling the collection of logs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logging level. Valid values: CRITICAL, ERROR, WARNING, INFO, DEBUG. Will be INFO by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
}

/// Log configuration options for the webservers. See Module logging configuration for more information. Disabled by default.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderLoggingConfigurationWebserverLogs {
    /// Enabling or disabling the collection of logs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logging level. Valid values: CRITICAL, ERROR, WARNING, INFO, DEBUG. Will be INFO by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
}

/// Log configuration options for the workers. See Module logging configuration for more information. Disabled by default.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderLoggingConfigurationWorkerLogs {
    /// Enabling or disabling the collection of logs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logging level. Valid values: CRITICAL, ERROR, WARNING, INFO, DEBUG. Will be INFO by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
}

/// Specifies the network configuration for your Apache Airflow Environment. This includes two private subnets as well as security groups for the Airflow environment. Each subnet requires internet connection, otherwise the deployment will fail. See network_configuration Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderNetworkConfiguration {
    /// Security groups IDs for the environment. At least one of the security group needs to allow MWAA resources to talk to each other, otherwise MWAA cannot be provisioned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// References to SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIdsRefs")]
    pub security_group_ids_refs: Option<Vec<EnvironmentForProviderNetworkConfigurationSecurityGroupIdsRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIdsSelector")]
    pub security_group_ids_selector: Option<EnvironmentForProviderNetworkConfigurationSecurityGroupIdsSelector>,
    /// The private subnet IDs in which the environment should be created. MWAA requires two subnets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdsRefs")]
    pub subnet_ids_refs: Option<Vec<EnvironmentForProviderNetworkConfigurationSubnetIdsRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdsSelector")]
    pub subnet_ids_selector: Option<EnvironmentForProviderNetworkConfigurationSubnetIdsSelector>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderNetworkConfigurationSecurityGroupIdsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentForProviderNetworkConfigurationSecurityGroupIdsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderNetworkConfigurationSecurityGroupIdsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentForProviderNetworkConfigurationSecurityGroupIdsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentForProviderNetworkConfigurationSecurityGroupIdsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderNetworkConfigurationSecurityGroupIdsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderNetworkConfigurationSecurityGroupIdsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderNetworkConfigurationSecurityGroupIdsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentForProviderNetworkConfigurationSecurityGroupIdsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderNetworkConfigurationSecurityGroupIdsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentForProviderNetworkConfigurationSecurityGroupIdsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentForProviderNetworkConfigurationSecurityGroupIdsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderNetworkConfigurationSecurityGroupIdsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderNetworkConfigurationSecurityGroupIdsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderNetworkConfigurationSubnetIdsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentForProviderNetworkConfigurationSubnetIdsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderNetworkConfigurationSubnetIdsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentForProviderNetworkConfigurationSubnetIdsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentForProviderNetworkConfigurationSubnetIdsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderNetworkConfigurationSubnetIdsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderNetworkConfigurationSubnetIdsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderNetworkConfigurationSubnetIdsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentForProviderNetworkConfigurationSubnetIdsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderNetworkConfigurationSubnetIdsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentForProviderNetworkConfigurationSubnetIdsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentForProviderNetworkConfigurationSubnetIdsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderNetworkConfigurationSubnetIdsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderNetworkConfigurationSubnetIdsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Bucket in s3 to populate sourceBucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderSourceBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentForProviderSourceBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderSourceBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentForProviderSourceBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentForProviderSourceBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderSourceBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderSourceBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate sourceBucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderSourceBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentForProviderSourceBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentForProviderSourceBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentForProviderSourceBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentForProviderSourceBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderSourceBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentForProviderSourceBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProvider {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "airflowConfigurationOptionsSecretRef")]
    pub airflow_configuration_options_secret_ref: Option<HashMap<String, String>>,
    /// Airflow version of your environment, will be set by default to the latest version that MWAA supports.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "airflowVersion")]
    pub airflow_version: Option<String>,
    /// The relative path to the DAG folder on your Amazon S3 storage bucket. For example, dags. For more information, see Importing DAGs on Amazon MWAA.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dagS3Path")]
    pub dag_s3_path: Option<String>,
    /// Defines whether the VPC endpoints configured for the environment are created and managed by the customer or by AWS. If set to SERVICE, Amazon MWAA will create and manage the required VPC endpoints in your VPC. If set to CUSTOMER, you must create, and manage, the VPC endpoints for your VPC. Defaults to SERVICE if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointManagement")]
    pub endpoint_management: Option<String>,
    /// Environment class for the cluster. Possible options are mw1.small, mw1.medium, mw1.large. Will be set by default to mw1.small. Please check the AWS Pricing for more information about the environment classes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentClass")]
    pub environment_class: Option<String>,
    /// The Amazon Resource Name (ARN) of the task execution role that the Amazon MWAA and its environment can assume. Check the official AWS documentation for the detailed role specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArn")]
    pub execution_role_arn: Option<String>,
    /// Reference to a Role in iam to populate executionRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArnRef")]
    pub execution_role_arn_ref: Option<EnvironmentInitProviderExecutionRoleArnRef>,
    /// Selector for a Role in iam to populate executionRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArnSelector")]
    pub execution_role_arn_selector: Option<EnvironmentInitProviderExecutionRoleArnSelector>,
    /// The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key aws/airflow by default. Please check the Official Documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKey")]
    pub kms_key: Option<String>,
    /// Reference to a Key in kms to populate kmsKey.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyRef")]
    pub kms_key_ref: Option<EnvironmentInitProviderKmsKeyRef>,
    /// Selector for a Key in kms to populate kmsKey.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeySelector")]
    pub kms_key_selector: Option<EnvironmentInitProviderKmsKeySelector>,
    /// The Apache Airflow logs you want to send to Amazon CloudWatch Logs. See logging_configuration Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingConfiguration")]
    pub logging_configuration: Option<EnvironmentInitProviderLoggingConfiguration>,
    /// The maximum number of web servers that you want to run in your environment. Value need to be between 2 and 5. Will be 2 by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxWebservers")]
    pub max_webservers: Option<f64>,
    /// The maximum number of workers that can be automatically scaled up. Value need to be between 1 and 25. Will be 10 by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxWorkers")]
    pub max_workers: Option<f64>,
    /// The minimum number of web servers that you want to run in your environment. Value need to be between 2 and 5. Will be 2 by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minWebservers")]
    pub min_webservers: Option<f64>,
    /// The minimum number of workers that you want to run in your environment. Will be 1 by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minWorkers")]
    pub min_workers: Option<f64>,
    /// Specifies the network configuration for your Apache Airflow Environment. This includes two private subnets as well as security groups for the Airflow environment. Each subnet requires internet connection, otherwise the deployment will fail. See network_configuration Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkConfiguration")]
    pub network_configuration: Option<EnvironmentInitProviderNetworkConfiguration>,
    /// The plugins.zip file version you want to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pluginsS3ObjectVersion")]
    pub plugins_s3_object_version: Option<String>,
    /// The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then plugins_s3_object_version is required. For more information, see Importing DAGs on Amazon MWAA.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pluginsS3Path")]
    pub plugins_s3_path: Option<String>,
    /// The requirements.txt file version you want to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requirementsS3ObjectVersion")]
    pub requirements_s3_object_version: Option<String>,
    /// The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirements_s3_object_version is required. For more information, see Importing DAGs on Amazon MWAA.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requirementsS3Path")]
    pub requirements_s3_path: Option<String>,
    /// The number of schedulers that you want to run in your environment. v2.0.2 and above accepts 2 - 5, default 2. v1.10.12 accepts 1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedulers: Option<f64>,
    /// The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceBucketArn")]
    pub source_bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate sourceBucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceBucketArnRef")]
    pub source_bucket_arn_ref: Option<EnvironmentInitProviderSourceBucketArnRef>,
    /// Selector for a Bucket in s3 to populate sourceBucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceBucketArnSelector")]
    pub source_bucket_arn_selector: Option<EnvironmentInitProviderSourceBucketArnSelector>,
    /// The version of the startup shell script you want to use. You must specify the version ID that Amazon S3 assigns to the file every time you update the script.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupScriptS3ObjectVersion")]
    pub startup_script_s3_object_version: Option<String>,
    /// The relative path to the script hosted in your bucket. The script runs as your environment starts before starting the Apache Airflow process. Use this script to install dependencies, modify configuration options, and set environment variables. See Using a startup script. Supported for environment versions 2.x and later.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupScriptS3Path")]
    pub startup_script_s3_path: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Specifies whether the webserver should be accessible over the internet or via your specified VPC. Possible options: PRIVATE_ONLY (default) and PUBLIC_ONLY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webserverAccessMode")]
    pub webserver_access_mode: Option<String>,
    /// Specifies the start date for the weekly maintenance window.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weeklyMaintenanceWindowStart")]
    pub weekly_maintenance_window_start: Option<String>,
}

/// Reference to a Role in iam to populate executionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderExecutionRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentInitProviderExecutionRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderExecutionRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentInitProviderExecutionRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentInitProviderExecutionRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderExecutionRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderExecutionRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate executionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderExecutionRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentInitProviderExecutionRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderExecutionRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentInitProviderExecutionRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentInitProviderExecutionRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderExecutionRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderExecutionRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Key in kms to populate kmsKey.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderKmsKeyRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentInitProviderKmsKeyRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderKmsKeyRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentInitProviderKmsKeyRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentInitProviderKmsKeyRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderKmsKeyRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderKmsKeyRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKey.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderKmsKeySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentInitProviderKmsKeySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderKmsKeySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentInitProviderKmsKeySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentInitProviderKmsKeySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderKmsKeySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderKmsKeySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The Apache Airflow logs you want to send to Amazon CloudWatch Logs. See logging_configuration Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderLoggingConfiguration {
    /// Log configuration options for processing DAGs. See Module logging configuration for more information. Disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dagProcessingLogs")]
    pub dag_processing_logs: Option<EnvironmentInitProviderLoggingConfigurationDagProcessingLogs>,
    /// Log configuration options for the schedulers. See Module logging configuration for more information. Disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulerLogs")]
    pub scheduler_logs: Option<EnvironmentInitProviderLoggingConfigurationSchedulerLogs>,
    /// Log configuration options for DAG tasks. See Module logging configuration for more information. Enabled by default with INFO log level.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "taskLogs")]
    pub task_logs: Option<EnvironmentInitProviderLoggingConfigurationTaskLogs>,
    /// Log configuration options for the webservers. See Module logging configuration for more information. Disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webserverLogs")]
    pub webserver_logs: Option<EnvironmentInitProviderLoggingConfigurationWebserverLogs>,
    /// Log configuration options for the workers. See Module logging configuration for more information. Disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workerLogs")]
    pub worker_logs: Option<EnvironmentInitProviderLoggingConfigurationWorkerLogs>,
}

/// Log configuration options for processing DAGs. See Module logging configuration for more information. Disabled by default.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderLoggingConfigurationDagProcessingLogs {
    /// Enabling or disabling the collection of logs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logging level. Valid values: CRITICAL, ERROR, WARNING, INFO, DEBUG. Will be INFO by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
}

/// Log configuration options for the schedulers. See Module logging configuration for more information. Disabled by default.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderLoggingConfigurationSchedulerLogs {
    /// Enabling or disabling the collection of logs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logging level. Valid values: CRITICAL, ERROR, WARNING, INFO, DEBUG. Will be INFO by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
}

/// Log configuration options for DAG tasks. See Module logging configuration for more information. Enabled by default with INFO log level.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderLoggingConfigurationTaskLogs {
    /// Enabling or disabling the collection of logs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logging level. Valid values: CRITICAL, ERROR, WARNING, INFO, DEBUG. Will be INFO by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
}

/// Log configuration options for the webservers. See Module logging configuration for more information. Disabled by default.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderLoggingConfigurationWebserverLogs {
    /// Enabling or disabling the collection of logs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logging level. Valid values: CRITICAL, ERROR, WARNING, INFO, DEBUG. Will be INFO by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
}

/// Log configuration options for the workers. See Module logging configuration for more information. Disabled by default.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderLoggingConfigurationWorkerLogs {
    /// Enabling or disabling the collection of logs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logging level. Valid values: CRITICAL, ERROR, WARNING, INFO, DEBUG. Will be INFO by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
}

/// Specifies the network configuration for your Apache Airflow Environment. This includes two private subnets as well as security groups for the Airflow environment. Each subnet requires internet connection, otherwise the deployment will fail. See network_configuration Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderNetworkConfiguration {
    /// Security groups IDs for the environment. At least one of the security group needs to allow MWAA resources to talk to each other, otherwise MWAA cannot be provisioned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// References to SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIdsRefs")]
    pub security_group_ids_refs: Option<Vec<EnvironmentInitProviderNetworkConfigurationSecurityGroupIdsRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIdsSelector")]
    pub security_group_ids_selector: Option<EnvironmentInitProviderNetworkConfigurationSecurityGroupIdsSelector>,
    /// The private subnet IDs in which the environment should be created. MWAA requires two subnets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdsRefs")]
    pub subnet_ids_refs: Option<Vec<EnvironmentInitProviderNetworkConfigurationSubnetIdsRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdsSelector")]
    pub subnet_ids_selector: Option<EnvironmentInitProviderNetworkConfigurationSubnetIdsSelector>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderNetworkConfigurationSecurityGroupIdsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentInitProviderNetworkConfigurationSecurityGroupIdsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderNetworkConfigurationSecurityGroupIdsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentInitProviderNetworkConfigurationSecurityGroupIdsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentInitProviderNetworkConfigurationSecurityGroupIdsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderNetworkConfigurationSecurityGroupIdsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderNetworkConfigurationSecurityGroupIdsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderNetworkConfigurationSecurityGroupIdsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentInitProviderNetworkConfigurationSecurityGroupIdsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderNetworkConfigurationSecurityGroupIdsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentInitProviderNetworkConfigurationSecurityGroupIdsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentInitProviderNetworkConfigurationSecurityGroupIdsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderNetworkConfigurationSecurityGroupIdsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderNetworkConfigurationSecurityGroupIdsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderNetworkConfigurationSubnetIdsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentInitProviderNetworkConfigurationSubnetIdsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderNetworkConfigurationSubnetIdsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentInitProviderNetworkConfigurationSubnetIdsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentInitProviderNetworkConfigurationSubnetIdsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderNetworkConfigurationSubnetIdsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderNetworkConfigurationSubnetIdsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderNetworkConfigurationSubnetIdsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentInitProviderNetworkConfigurationSubnetIdsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderNetworkConfigurationSubnetIdsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentInitProviderNetworkConfigurationSubnetIdsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentInitProviderNetworkConfigurationSubnetIdsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderNetworkConfigurationSubnetIdsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderNetworkConfigurationSubnetIdsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Bucket in s3 to populate sourceBucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderSourceBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentInitProviderSourceBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderSourceBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentInitProviderSourceBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentInitProviderSourceBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderSourceBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderSourceBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate sourceBucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderSourceBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentInitProviderSourceBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentInitProviderSourceBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentInitProviderSourceBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentInitProviderSourceBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderSourceBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentInitProviderSourceBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<EnvironmentPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<EnvironmentPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EnvironmentPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EnvironmentPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EnvironmentPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EnvironmentPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// EnvironmentStatus defines the observed state of Environment.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<EnvironmentStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProvider {
    /// Airflow version of your environment, will be set by default to the latest version that MWAA supports.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "airflowVersion")]
    pub airflow_version: Option<String>,
    /// The ARN of the MWAA Environment
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// The Created At date of the MWAA Environment
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdAt")]
    pub created_at: Option<String>,
    /// The relative path to the DAG folder on your Amazon S3 storage bucket. For example, dags. For more information, see Importing DAGs on Amazon MWAA.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dagS3Path")]
    pub dag_s3_path: Option<String>,
    /// The VPC endpoint for the environment's Amazon RDS database
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseVpcEndpointService")]
    pub database_vpc_endpoint_service: Option<String>,
    /// Defines whether the VPC endpoints configured for the environment are created and managed by the customer or by AWS. If set to SERVICE, Amazon MWAA will create and manage the required VPC endpoints in your VPC. If set to CUSTOMER, you must create, and manage, the VPC endpoints for your VPC. Defaults to SERVICE if not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointManagement")]
    pub endpoint_management: Option<String>,
    /// Environment class for the cluster. Possible options are mw1.small, mw1.medium, mw1.large. Will be set by default to mw1.small. Please check the AWS Pricing for more information about the environment classes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentClass")]
    pub environment_class: Option<String>,
    /// The Amazon Resource Name (ARN) of the task execution role that the Amazon MWAA and its environment can assume. Check the official AWS documentation for the detailed role specification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArn")]
    pub execution_role_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The Amazon Resource Name (ARN) of your KMS key that you want to use for encryption. Will be set to the ARN of the managed KMS key aws/airflow by default. Please check the Official Documentation for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKey")]
    pub kms_key: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastUpdated")]
    pub last_updated: Option<Vec<EnvironmentStatusAtProviderLastUpdated>>,
    /// The Apache Airflow logs you want to send to Amazon CloudWatch Logs. See logging_configuration Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loggingConfiguration")]
    pub logging_configuration: Option<EnvironmentStatusAtProviderLoggingConfiguration>,
    /// The maximum number of web servers that you want to run in your environment. Value need to be between 2 and 5. Will be 2 by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxWebservers")]
    pub max_webservers: Option<f64>,
    /// The maximum number of workers that can be automatically scaled up. Value need to be between 1 and 25. Will be 10 by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxWorkers")]
    pub max_workers: Option<f64>,
    /// The minimum number of web servers that you want to run in your environment. Value need to be between 2 and 5. Will be 2 by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minWebservers")]
    pub min_webservers: Option<f64>,
    /// The minimum number of workers that you want to run in your environment. Will be 1 by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minWorkers")]
    pub min_workers: Option<f64>,
    /// Specifies the network configuration for your Apache Airflow Environment. This includes two private subnets as well as security groups for the Airflow environment. Each subnet requires internet connection, otherwise the deployment will fail. See network_configuration Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkConfiguration")]
    pub network_configuration: Option<EnvironmentStatusAtProviderNetworkConfiguration>,
    /// The plugins.zip file version you want to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pluginsS3ObjectVersion")]
    pub plugins_s3_object_version: Option<String>,
    /// The relative path to the plugins.zip file on your Amazon S3 storage bucket. For example, plugins.zip. If a relative path is provided in the request, then plugins_s3_object_version is required. For more information, see Importing DAGs on Amazon MWAA.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pluginsS3Path")]
    pub plugins_s3_path: Option<String>,
    /// The requirements.txt file version you want to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requirementsS3ObjectVersion")]
    pub requirements_s3_object_version: Option<String>,
    /// The relative path to the requirements.txt file on your Amazon S3 storage bucket. For example, requirements.txt. If a relative path is provided in the request, then requirements_s3_object_version is required. For more information, see Importing DAGs on Amazon MWAA.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requirementsS3Path")]
    pub requirements_s3_path: Option<String>,
    /// The number of schedulers that you want to run in your environment. v2.0.2 and above accepts 2 - 5, default 2. v1.10.12 accepts 1.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedulers: Option<f64>,
    /// The Service Role ARN of the Amazon MWAA Environment
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArn")]
    pub service_role_arn: Option<String>,
    /// The Amazon Resource Name (ARN) of your Amazon S3 storage bucket. For example, arn:aws:s3:::airflow-mybucketname.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceBucketArn")]
    pub source_bucket_arn: Option<String>,
    /// The version of the startup shell script you want to use. You must specify the version ID that Amazon S3 assigns to the file every time you update the script.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupScriptS3ObjectVersion")]
    pub startup_script_s3_object_version: Option<String>,
    /// The relative path to the script hosted in your bucket. The script runs as your environment starts before starting the Apache Airflow process. Use this script to install dependencies, modify configuration options, and set environment variables. See Using a startup script. Supported for environment versions 2.x and later.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startupScriptS3Path")]
    pub startup_script_s3_path: Option<String>,
    /// The status of the Amazon MWAA Environment
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// Specifies whether the webserver should be accessible over the internet or via your specified VPC. Possible options: PRIVATE_ONLY (default) and PUBLIC_ONLY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webserverAccessMode")]
    pub webserver_access_mode: Option<String>,
    /// The webserver URL of the MWAA Environment
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webserverUrl")]
    pub webserver_url: Option<String>,
    /// The VPC endpoint for the environment's web server
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webserverVpcEndpointService")]
    pub webserver_vpc_endpoint_service: Option<String>,
    /// Specifies the start date for the weekly maintenance window.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weeklyMaintenanceWindowStart")]
    pub weekly_maintenance_window_start: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderLastUpdated {
    /// The Created At date of the MWAA Environment
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdAt")]
    pub created_at: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<Vec<EnvironmentStatusAtProviderLastUpdatedError>>,
    /// The status of the Amazon MWAA Environment
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderLastUpdatedError {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorCode")]
    pub error_code: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorMessage")]
    pub error_message: Option<String>,
}

/// The Apache Airflow logs you want to send to Amazon CloudWatch Logs. See logging_configuration Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderLoggingConfiguration {
    /// Log configuration options for processing DAGs. See Module logging configuration for more information. Disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dagProcessingLogs")]
    pub dag_processing_logs: Option<EnvironmentStatusAtProviderLoggingConfigurationDagProcessingLogs>,
    /// Log configuration options for the schedulers. See Module logging configuration for more information. Disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulerLogs")]
    pub scheduler_logs: Option<EnvironmentStatusAtProviderLoggingConfigurationSchedulerLogs>,
    /// Log configuration options for DAG tasks. See Module logging configuration for more information. Enabled by default with INFO log level.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "taskLogs")]
    pub task_logs: Option<EnvironmentStatusAtProviderLoggingConfigurationTaskLogs>,
    /// Log configuration options for the webservers. See Module logging configuration for more information. Disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webserverLogs")]
    pub webserver_logs: Option<EnvironmentStatusAtProviderLoggingConfigurationWebserverLogs>,
    /// Log configuration options for the workers. See Module logging configuration for more information. Disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workerLogs")]
    pub worker_logs: Option<EnvironmentStatusAtProviderLoggingConfigurationWorkerLogs>,
}

/// Log configuration options for processing DAGs. See Module logging configuration for more information. Disabled by default.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderLoggingConfigurationDagProcessingLogs {
    /// Provides the ARN for the CloudWatch group where the logs will be published
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudWatchLogGroupArn")]
    pub cloud_watch_log_group_arn: Option<String>,
    /// Enabling or disabling the collection of logs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logging level. Valid values: CRITICAL, ERROR, WARNING, INFO, DEBUG. Will be INFO by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
}

/// Log configuration options for the schedulers. See Module logging configuration for more information. Disabled by default.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderLoggingConfigurationSchedulerLogs {
    /// Provides the ARN for the CloudWatch group where the logs will be published
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudWatchLogGroupArn")]
    pub cloud_watch_log_group_arn: Option<String>,
    /// Enabling or disabling the collection of logs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logging level. Valid values: CRITICAL, ERROR, WARNING, INFO, DEBUG. Will be INFO by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
}

/// Log configuration options for DAG tasks. See Module logging configuration for more information. Enabled by default with INFO log level.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderLoggingConfigurationTaskLogs {
    /// Provides the ARN for the CloudWatch group where the logs will be published
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudWatchLogGroupArn")]
    pub cloud_watch_log_group_arn: Option<String>,
    /// Enabling or disabling the collection of logs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logging level. Valid values: CRITICAL, ERROR, WARNING, INFO, DEBUG. Will be INFO by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
}

/// Log configuration options for the webservers. See Module logging configuration for more information. Disabled by default.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderLoggingConfigurationWebserverLogs {
    /// Provides the ARN for the CloudWatch group where the logs will be published
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudWatchLogGroupArn")]
    pub cloud_watch_log_group_arn: Option<String>,
    /// Enabling or disabling the collection of logs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logging level. Valid values: CRITICAL, ERROR, WARNING, INFO, DEBUG. Will be INFO by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
}

/// Log configuration options for the workers. See Module logging configuration for more information. Disabled by default.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderLoggingConfigurationWorkerLogs {
    /// Provides the ARN for the CloudWatch group where the logs will be published
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudWatchLogGroupArn")]
    pub cloud_watch_log_group_arn: Option<String>,
    /// Enabling or disabling the collection of logs
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Logging level. Valid values: CRITICAL, ERROR, WARNING, INFO, DEBUG. Will be INFO by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logLevel")]
    pub log_level: Option<String>,
}

/// Specifies the network configuration for your Apache Airflow Environment. This includes two private subnets as well as security groups for the Airflow environment. Each subnet requires internet connection, otherwise the deployment will fail. See network_configuration Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EnvironmentStatusAtProviderNetworkConfiguration {
    /// Security groups IDs for the environment. At least one of the security group needs to allow MWAA resources to talk to each other, otherwise MWAA cannot be provisioned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// The private subnet IDs in which the environment should be created. MWAA requires two subnets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ELBSpec defines the desired state of ELB
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "elb.aws.upbound.io", version = "v1beta2", kind = "ELB", plural = "elbs")]
#[kube(status = "ELBStatus")]
pub struct ELBSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<ELBDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ELBForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<ELBInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<ELBProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<ELBPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<ELBWriteConnectionSecretToRef>,
}

/// ELBSpec defines the desired state of ELB
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBForProvider {
    /// An Access Logs block. Access Logs documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLogs")]
    pub access_logs: Option<ELBForProviderAccessLogs>,
    /// The AZ's to serve traffic in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZones")]
    pub availability_zones: Option<Vec<String>>,
    /// Boolean to enable connection draining. Default: false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionDraining")]
    pub connection_draining: Option<bool>,
    /// The time in seconds to allow for connections to drain. Default: 300
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionDrainingTimeout")]
    pub connection_draining_timeout: Option<f64>,
    /// Enable cross-zone load balancing. Default: true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crossZoneLoadBalancing")]
    pub cross_zone_load_balancing: Option<bool>,
    /// Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are monitor, defensive (default), strictest.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desyncMitigationMode")]
    pub desync_mitigation_mode: Option<String>,
    /// A health_check block. Health Check documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheck")]
    pub health_check: Option<ELBForProviderHealthCheck>,
    /// The time in seconds that the connection is allowed to be idle. Default: 60
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeout")]
    pub idle_timeout: Option<f64>,
    /// A list of instance ids to place in the ELB pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instances: Option<Vec<String>>,
    /// References to Instance in ec2 to populate instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instancesRefs")]
    pub instances_refs: Option<Vec<ELBForProviderInstancesRefs>>,
    /// Selector for a list of Instance in ec2 to populate instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instancesSelector")]
    pub instances_selector: Option<ELBForProviderInstancesSelector>,
    /// If true, ELB will be an internal ELB.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub internal: Option<bool>,
    /// A list of listener blocks. Listeners documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub listener: Option<Vec<ELBForProviderListener>>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// A list of security group IDs to assign to the ELB.
    /// Only valid if creating an ELB within a VPC
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroups")]
    pub security_groups: Option<Vec<String>>,
    /// The name of the security group that you can use as
    /// part of your inbound rules for your load balancer's back-end application
    /// instances. Use this for Classic or Default VPC only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSecurityGroup")]
    pub source_security_group: Option<String>,
    /// A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnets: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate subnets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetsRefs")]
    pub subnets_refs: Option<Vec<ELBForProviderSubnetsRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetsSelector")]
    pub subnets_selector: Option<ELBForProviderSubnetsSelector>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// An Access Logs block. Access Logs documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBForProviderAccessLogs {
    /// The S3 bucket name to store the logs in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// The S3 bucket prefix. Logs are stored in the root if not configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketPrefix")]
    pub bucket_prefix: Option<String>,
    /// Boolean to enable / disable access_logs. Default is true
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The publishing interval in minutes. Valid values: 5 and 60. Default: 60
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<f64>,
}

/// A health_check block. Health Check documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBForProviderHealthCheck {
    /// The number of checks before the instance is declared healthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthyThreshold")]
    pub healthy_threshold: Option<f64>,
    /// The publishing interval in minutes. Valid values: 5 and 60. Default: 60
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<f64>,
    /// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
    /// values are:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    /// The length of time before the check times out.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<f64>,
    /// The number of checks before the instance is declared unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unhealthyThreshold")]
    pub unhealthy_threshold: Option<f64>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBForProviderInstancesRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ELBForProviderInstancesRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBForProviderInstancesRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ELBForProviderInstancesRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ELBForProviderInstancesRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBForProviderInstancesRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBForProviderInstancesRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Instance in ec2 to populate instances.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBForProviderInstancesSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ELBForProviderInstancesSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBForProviderInstancesSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ELBForProviderInstancesSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ELBForProviderInstancesSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBForProviderInstancesSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBForProviderInstancesSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBForProviderListener {
    /// The port on the instance to route to
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instancePort")]
    pub instance_port: Option<f64>,
    /// The protocol to use to the instance. Valid
    /// values are HTTP, HTTPS, TCP, or SSL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceProtocol")]
    pub instance_protocol: Option<String>,
    /// The port to listen on for the load balancer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lbPort")]
    pub lb_port: Option<f64>,
    /// The protocol to listen on. Valid values are HTTP,
    /// HTTPS, TCP, or SSL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lbProtocol")]
    pub lb_protocol: Option<String>,
    /// The ARN of an SSL certificate you have
    /// uploaded to AWS IAM. Note ECDSA-specific restrictions below.  Only valid when
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCertificateId")]
    pub ssl_certificate_id: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBForProviderSubnetsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ELBForProviderSubnetsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBForProviderSubnetsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ELBForProviderSubnetsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ELBForProviderSubnetsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBForProviderSubnetsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBForProviderSubnetsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnets.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBForProviderSubnetsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ELBForProviderSubnetsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBForProviderSubnetsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ELBForProviderSubnetsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ELBForProviderSubnetsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBForProviderSubnetsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBForProviderSubnetsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBInitProvider {
    /// An Access Logs block. Access Logs documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLogs")]
    pub access_logs: Option<ELBInitProviderAccessLogs>,
    /// The AZ's to serve traffic in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZones")]
    pub availability_zones: Option<Vec<String>>,
    /// Boolean to enable connection draining. Default: false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionDraining")]
    pub connection_draining: Option<bool>,
    /// The time in seconds to allow for connections to drain. Default: 300
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionDrainingTimeout")]
    pub connection_draining_timeout: Option<f64>,
    /// Enable cross-zone load balancing. Default: true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crossZoneLoadBalancing")]
    pub cross_zone_load_balancing: Option<bool>,
    /// Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are monitor, defensive (default), strictest.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desyncMitigationMode")]
    pub desync_mitigation_mode: Option<String>,
    /// A health_check block. Health Check documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheck")]
    pub health_check: Option<ELBInitProviderHealthCheck>,
    /// The time in seconds that the connection is allowed to be idle. Default: 60
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeout")]
    pub idle_timeout: Option<f64>,
    /// A list of instance ids to place in the ELB pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instances: Option<Vec<String>>,
    /// References to Instance in ec2 to populate instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instancesRefs")]
    pub instances_refs: Option<Vec<ELBInitProviderInstancesRefs>>,
    /// Selector for a list of Instance in ec2 to populate instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instancesSelector")]
    pub instances_selector: Option<ELBInitProviderInstancesSelector>,
    /// If true, ELB will be an internal ELB.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub internal: Option<bool>,
    /// A list of listener blocks. Listeners documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub listener: Option<Vec<ELBInitProviderListener>>,
    /// A list of security group IDs to assign to the ELB.
    /// Only valid if creating an ELB within a VPC
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroups")]
    pub security_groups: Option<Vec<String>>,
    /// The name of the security group that you can use as
    /// part of your inbound rules for your load balancer's back-end application
    /// instances. Use this for Classic or Default VPC only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSecurityGroup")]
    pub source_security_group: Option<String>,
    /// A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnets: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate subnets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetsRefs")]
    pub subnets_refs: Option<Vec<ELBInitProviderSubnetsRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetsSelector")]
    pub subnets_selector: Option<ELBInitProviderSubnetsSelector>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// An Access Logs block. Access Logs documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBInitProviderAccessLogs {
    /// The S3 bucket name to store the logs in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// The S3 bucket prefix. Logs are stored in the root if not configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketPrefix")]
    pub bucket_prefix: Option<String>,
    /// Boolean to enable / disable access_logs. Default is true
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The publishing interval in minutes. Valid values: 5 and 60. Default: 60
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<f64>,
}

/// A health_check block. Health Check documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBInitProviderHealthCheck {
    /// The number of checks before the instance is declared healthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthyThreshold")]
    pub healthy_threshold: Option<f64>,
    /// The publishing interval in minutes. Valid values: 5 and 60. Default: 60
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<f64>,
    /// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
    /// values are:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    /// The length of time before the check times out.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<f64>,
    /// The number of checks before the instance is declared unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unhealthyThreshold")]
    pub unhealthy_threshold: Option<f64>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBInitProviderInstancesRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ELBInitProviderInstancesRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBInitProviderInstancesRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ELBInitProviderInstancesRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ELBInitProviderInstancesRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBInitProviderInstancesRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBInitProviderInstancesRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Instance in ec2 to populate instances.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBInitProviderInstancesSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ELBInitProviderInstancesSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBInitProviderInstancesSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ELBInitProviderInstancesSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ELBInitProviderInstancesSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBInitProviderInstancesSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBInitProviderInstancesSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBInitProviderListener {
    /// The port on the instance to route to
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instancePort")]
    pub instance_port: Option<f64>,
    /// The protocol to use to the instance. Valid
    /// values are HTTP, HTTPS, TCP, or SSL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceProtocol")]
    pub instance_protocol: Option<String>,
    /// The port to listen on for the load balancer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lbPort")]
    pub lb_port: Option<f64>,
    /// The protocol to listen on. Valid values are HTTP,
    /// HTTPS, TCP, or SSL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lbProtocol")]
    pub lb_protocol: Option<String>,
    /// The ARN of an SSL certificate you have
    /// uploaded to AWS IAM. Note ECDSA-specific restrictions below.  Only valid when
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCertificateId")]
    pub ssl_certificate_id: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBInitProviderSubnetsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ELBInitProviderSubnetsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBInitProviderSubnetsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ELBInitProviderSubnetsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ELBInitProviderSubnetsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBInitProviderSubnetsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBInitProviderSubnetsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnets.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBInitProviderSubnetsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ELBInitProviderSubnetsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBInitProviderSubnetsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ELBInitProviderSubnetsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ELBInitProviderSubnetsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBInitProviderSubnetsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBInitProviderSubnetsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ELBProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ELBProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ELBProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ELBPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ELBPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ELBPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ELBPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ELBPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ELBPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ELBStatus defines the observed state of ELB.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<ELBStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBStatusAtProvider {
    /// An Access Logs block. Access Logs documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessLogs")]
    pub access_logs: Option<ELBStatusAtProviderAccessLogs>,
    /// The ARN of the ELB
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// The AZ's to serve traffic in.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZones")]
    pub availability_zones: Option<Vec<String>>,
    /// Boolean to enable connection draining. Default: false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionDraining")]
    pub connection_draining: Option<bool>,
    /// The time in seconds to allow for connections to drain. Default: 300
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionDrainingTimeout")]
    pub connection_draining_timeout: Option<f64>,
    /// Enable cross-zone load balancing. Default: true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crossZoneLoadBalancing")]
    pub cross_zone_load_balancing: Option<bool>,
    /// Determines how the load balancer handles requests that might pose a security risk to an application due to HTTP desync. Valid values are monitor, defensive (default), strictest.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desyncMitigationMode")]
    pub desync_mitigation_mode: Option<String>,
    /// The DNS name of the ELB
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsName")]
    pub dns_name: Option<String>,
    /// A health_check block. Health Check documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheck")]
    pub health_check: Option<ELBStatusAtProviderHealthCheck>,
    /// The name of the ELB
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The time in seconds that the connection is allowed to be idle. Default: 60
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleTimeout")]
    pub idle_timeout: Option<f64>,
    /// A list of instance ids to place in the ELB pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instances: Option<Vec<String>>,
    /// If true, ELB will be an internal ELB.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub internal: Option<bool>,
    /// A list of listener blocks. Listeners documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub listener: Option<Vec<ELBStatusAtProviderListener>>,
    /// A list of security group IDs to assign to the ELB.
    /// Only valid if creating an ELB within a VPC
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroups")]
    pub security_groups: Option<Vec<String>>,
    /// The name of the security group that you can use as
    /// part of your inbound rules for your load balancer's back-end application
    /// instances. Use this for Classic or Default VPC only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSecurityGroup")]
    pub source_security_group: Option<String>,
    /// The ID of the security group that you can use as
    /// part of your inbound rules for your load balancer's back-end application
    /// instances. Only available on ELBs launched in a VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSecurityGroupId")]
    pub source_security_group_id: Option<String>,
    /// A list of subnet IDs to attach to the ELB. When an update to subnets will remove all current subnets, this will force a new resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnets: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// The canonical hosted zone ID of the ELB (to be used in a Route 53 Alias record)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "zoneId")]
    pub zone_id: Option<String>,
}

/// An Access Logs block. Access Logs documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBStatusAtProviderAccessLogs {
    /// The S3 bucket name to store the logs in.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// The S3 bucket prefix. Logs are stored in the root if not configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketPrefix")]
    pub bucket_prefix: Option<String>,
    /// Boolean to enable / disable access_logs. Default is true
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The publishing interval in minutes. Valid values: 5 and 60. Default: 60
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<f64>,
}

/// A health_check block. Health Check documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBStatusAtProviderHealthCheck {
    /// The number of checks before the instance is declared healthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthyThreshold")]
    pub healthy_threshold: Option<f64>,
    /// The publishing interval in minutes. Valid values: 5 and 60. Default: 60
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<f64>,
    /// The target of the check. Valid pattern is "${PROTOCOL}:${PORT}${PATH}", where PROTOCOL
    /// values are:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    /// The length of time before the check times out.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<f64>,
    /// The number of checks before the instance is declared unhealthy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unhealthyThreshold")]
    pub unhealthy_threshold: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ELBStatusAtProviderListener {
    /// The port on the instance to route to
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instancePort")]
    pub instance_port: Option<f64>,
    /// The protocol to use to the instance. Valid
    /// values are HTTP, HTTPS, TCP, or SSL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceProtocol")]
    pub instance_protocol: Option<String>,
    /// The port to listen on for the load balancer
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lbPort")]
    pub lb_port: Option<f64>,
    /// The protocol to listen on. Valid values are HTTP,
    /// HTTPS, TCP, or SSL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lbProtocol")]
    pub lb_protocol: Option<String>,
    /// The ARN of an SSL certificate you have
    /// uploaded to AWS IAM. Note ECDSA-specific restrictions below.  Only valid when
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCertificateId")]
    pub ssl_certificate_id: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// GatewayAssociationProposalSpec defines the desired state of GatewayAssociationProposal
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "directconnect.aws.upbound.io", version = "v1beta1", kind = "GatewayAssociationProposal", plural = "gatewayassociationproposals")]
#[kube(status = "GatewayAssociationProposalStatus")]
pub struct GatewayAssociationProposalSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<GatewayAssociationProposalDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: GatewayAssociationProposalForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<GatewayAssociationProposalInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<GatewayAssociationProposalProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<GatewayAssociationProposalPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<GatewayAssociationProposalWriteConnectionSecretToRef>,
}

/// GatewayAssociationProposalSpec defines the desired state of GatewayAssociationProposal
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalForProvider {
    /// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedPrefixes")]
    pub allowed_prefixes: Option<Vec<String>>,
    /// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associatedGatewayId")]
    pub associated_gateway_id: Option<String>,
    /// Reference to a VPNGateway in ec2 to populate associatedGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associatedGatewayIdRef")]
    pub associated_gateway_id_ref: Option<GatewayAssociationProposalForProviderAssociatedGatewayIdRef>,
    /// Selector for a VPNGateway in ec2 to populate associatedGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associatedGatewayIdSelector")]
    pub associated_gateway_id_selector: Option<GatewayAssociationProposalForProviderAssociatedGatewayIdSelector>,
    /// Direct Connect Gateway identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayId")]
    pub dx_gateway_id: Option<String>,
    /// Reference to a Gateway in directconnect to populate dxGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayIdRef")]
    pub dx_gateway_id_ref: Option<GatewayAssociationProposalForProviderDxGatewayIdRef>,
    /// Selector for a Gateway in directconnect to populate dxGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayIdSelector")]
    pub dx_gateway_id_selector: Option<GatewayAssociationProposalForProviderDxGatewayIdSelector>,
    /// AWS Account identifier of the Direct Connect Gateway's owner.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayOwnerAccountId")]
    pub dx_gateway_owner_account_id: Option<String>,
    /// Reference to a Gateway in directconnect to populate dxGatewayOwnerAccountId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayOwnerAccountIdRef")]
    pub dx_gateway_owner_account_id_ref: Option<GatewayAssociationProposalForProviderDxGatewayOwnerAccountIdRef>,
    /// Selector for a Gateway in directconnect to populate dxGatewayOwnerAccountId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayOwnerAccountIdSelector")]
    pub dx_gateway_owner_account_id_selector: Option<GatewayAssociationProposalForProviderDxGatewayOwnerAccountIdSelector>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
}

/// Reference to a VPNGateway in ec2 to populate associatedGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalForProviderAssociatedGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayAssociationProposalForProviderAssociatedGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalForProviderAssociatedGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayAssociationProposalForProviderAssociatedGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayAssociationProposalForProviderAssociatedGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalForProviderAssociatedGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalForProviderAssociatedGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPNGateway in ec2 to populate associatedGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalForProviderAssociatedGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayAssociationProposalForProviderAssociatedGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalForProviderAssociatedGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayAssociationProposalForProviderAssociatedGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayAssociationProposalForProviderAssociatedGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalForProviderAssociatedGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalForProviderAssociatedGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Gateway in directconnect to populate dxGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalForProviderDxGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayAssociationProposalForProviderDxGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalForProviderDxGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayAssociationProposalForProviderDxGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayAssociationProposalForProviderDxGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalForProviderDxGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalForProviderDxGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Gateway in directconnect to populate dxGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalForProviderDxGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayAssociationProposalForProviderDxGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalForProviderDxGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayAssociationProposalForProviderDxGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayAssociationProposalForProviderDxGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalForProviderDxGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalForProviderDxGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Gateway in directconnect to populate dxGatewayOwnerAccountId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalForProviderDxGatewayOwnerAccountIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayAssociationProposalForProviderDxGatewayOwnerAccountIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalForProviderDxGatewayOwnerAccountIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayAssociationProposalForProviderDxGatewayOwnerAccountIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayAssociationProposalForProviderDxGatewayOwnerAccountIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalForProviderDxGatewayOwnerAccountIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalForProviderDxGatewayOwnerAccountIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Gateway in directconnect to populate dxGatewayOwnerAccountId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalForProviderDxGatewayOwnerAccountIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayAssociationProposalForProviderDxGatewayOwnerAccountIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalForProviderDxGatewayOwnerAccountIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayAssociationProposalForProviderDxGatewayOwnerAccountIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayAssociationProposalForProviderDxGatewayOwnerAccountIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalForProviderDxGatewayOwnerAccountIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalForProviderDxGatewayOwnerAccountIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalInitProvider {
    /// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedPrefixes")]
    pub allowed_prefixes: Option<Vec<String>>,
    /// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associatedGatewayId")]
    pub associated_gateway_id: Option<String>,
    /// Reference to a VPNGateway in ec2 to populate associatedGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associatedGatewayIdRef")]
    pub associated_gateway_id_ref: Option<GatewayAssociationProposalInitProviderAssociatedGatewayIdRef>,
    /// Selector for a VPNGateway in ec2 to populate associatedGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associatedGatewayIdSelector")]
    pub associated_gateway_id_selector: Option<GatewayAssociationProposalInitProviderAssociatedGatewayIdSelector>,
    /// Direct Connect Gateway identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayId")]
    pub dx_gateway_id: Option<String>,
    /// Reference to a Gateway in directconnect to populate dxGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayIdRef")]
    pub dx_gateway_id_ref: Option<GatewayAssociationProposalInitProviderDxGatewayIdRef>,
    /// Selector for a Gateway in directconnect to populate dxGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayIdSelector")]
    pub dx_gateway_id_selector: Option<GatewayAssociationProposalInitProviderDxGatewayIdSelector>,
    /// AWS Account identifier of the Direct Connect Gateway's owner.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayOwnerAccountId")]
    pub dx_gateway_owner_account_id: Option<String>,
    /// Reference to a Gateway in directconnect to populate dxGatewayOwnerAccountId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayOwnerAccountIdRef")]
    pub dx_gateway_owner_account_id_ref: Option<GatewayAssociationProposalInitProviderDxGatewayOwnerAccountIdRef>,
    /// Selector for a Gateway in directconnect to populate dxGatewayOwnerAccountId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayOwnerAccountIdSelector")]
    pub dx_gateway_owner_account_id_selector: Option<GatewayAssociationProposalInitProviderDxGatewayOwnerAccountIdSelector>,
}

/// Reference to a VPNGateway in ec2 to populate associatedGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalInitProviderAssociatedGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayAssociationProposalInitProviderAssociatedGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalInitProviderAssociatedGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayAssociationProposalInitProviderAssociatedGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayAssociationProposalInitProviderAssociatedGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalInitProviderAssociatedGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalInitProviderAssociatedGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPNGateway in ec2 to populate associatedGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalInitProviderAssociatedGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayAssociationProposalInitProviderAssociatedGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalInitProviderAssociatedGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayAssociationProposalInitProviderAssociatedGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayAssociationProposalInitProviderAssociatedGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalInitProviderAssociatedGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalInitProviderAssociatedGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Gateway in directconnect to populate dxGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalInitProviderDxGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayAssociationProposalInitProviderDxGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalInitProviderDxGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayAssociationProposalInitProviderDxGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayAssociationProposalInitProviderDxGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalInitProviderDxGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalInitProviderDxGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Gateway in directconnect to populate dxGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalInitProviderDxGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayAssociationProposalInitProviderDxGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalInitProviderDxGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayAssociationProposalInitProviderDxGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayAssociationProposalInitProviderDxGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalInitProviderDxGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalInitProviderDxGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Gateway in directconnect to populate dxGatewayOwnerAccountId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalInitProviderDxGatewayOwnerAccountIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayAssociationProposalInitProviderDxGatewayOwnerAccountIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalInitProviderDxGatewayOwnerAccountIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayAssociationProposalInitProviderDxGatewayOwnerAccountIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayAssociationProposalInitProviderDxGatewayOwnerAccountIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalInitProviderDxGatewayOwnerAccountIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalInitProviderDxGatewayOwnerAccountIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Gateway in directconnect to populate dxGatewayOwnerAccountId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalInitProviderDxGatewayOwnerAccountIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayAssociationProposalInitProviderDxGatewayOwnerAccountIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalInitProviderDxGatewayOwnerAccountIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayAssociationProposalInitProviderDxGatewayOwnerAccountIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayAssociationProposalInitProviderDxGatewayOwnerAccountIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalInitProviderDxGatewayOwnerAccountIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalInitProviderDxGatewayOwnerAccountIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayAssociationProposalProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayAssociationProposalProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayAssociationProposalProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<GatewayAssociationProposalPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<GatewayAssociationProposalPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<GatewayAssociationProposalPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<GatewayAssociationProposalPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<GatewayAssociationProposalPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum GatewayAssociationProposalPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// GatewayAssociationProposalStatus defines the observed state of GatewayAssociationProposal.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<GatewayAssociationProposalStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct GatewayAssociationProposalStatusAtProvider {
    /// VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedPrefixes")]
    pub allowed_prefixes: Option<Vec<String>>,
    /// The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associatedGatewayId")]
    pub associated_gateway_id: Option<String>,
    /// The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associatedGatewayOwnerAccountId")]
    pub associated_gateway_owner_account_id: Option<String>,
    /// The type of the associated gateway, transitGateway or virtualPrivateGateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associatedGatewayType")]
    pub associated_gateway_type: Option<String>,
    /// Direct Connect Gateway identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayId")]
    pub dx_gateway_id: Option<String>,
    /// AWS Account identifier of the Direct Connect Gateway's owner.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dxGatewayOwnerAccountId")]
    pub dx_gateway_owner_account_id: Option<String>,
    /// Direct Connect Gateway Association Proposal identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}


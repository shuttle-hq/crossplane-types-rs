// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// IndexSpec defines the desired state of Index
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "kendra.aws.upbound.io", version = "v1beta2", kind = "Index", plural = "indices")]
#[kube(status = "IndexStatus")]
pub struct IndexSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<IndexDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: IndexForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<IndexInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<IndexProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<IndexPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<IndexWriteConnectionSecretToRef>,
}

/// IndexSpec defines the desired state of Index
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IndexDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexForProvider {
    /// A block that sets the number of additional document storage and query capacity units that should be used by the index. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityUnits")]
    pub capacity_units: Option<IndexForProviderCapacityUnits>,
    /// The description of the Index.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// One or more blocks that specify the configuration settings for any metadata applied to the documents in the index. Minimum number of 0 items. Maximum number of 500 items. If specified, you must define all elements, including those that are provided by default. These index fields are documented at Amazon Kendra Index documentation. For an example resource that defines these default index fields, refer to the default example above. For an example resource that appends additional index fields, refer to the append example above. All arguments for each block must be specified. Note that blocks cannot be removed since index fields cannot be deleted. This argument is detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentMetadataConfigurationUpdates")]
    pub document_metadata_configuration_updates: Option<Vec<IndexForProviderDocumentMetadataConfigurationUpdates>>,
    /// The Amazon Kendra edition to use for the index. Choose DEVELOPER_EDITION for indexes intended for development, testing, or proof of concept. Use ENTERPRISE_EDITION for your production databases. Once you set the edition for an index, it can't be changed. Defaults to ENTERPRISE_EDITION
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub edition: Option<String>,
    /// Specifies the name of the Index.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// An AWS Identity and Access Management (IAM) role that gives Amazon Kendra permissions to access your Amazon CloudWatch logs and metrics. This is also the role you use when you call the BatchPutDocument API to index documents from an Amazon S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<IndexForProviderRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<IndexForProviderRoleArnSelector>,
    /// A block that specifies the identifier of the AWS KMS customer managed key (CMK) that's used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideEncryptionConfiguration")]
    pub server_side_encryption_configuration: Option<IndexForProviderServerSideEncryptionConfiguration>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The user context policy. Valid values are ATTRIBUTE_FILTER or USER_TOKEN. For more information, refer to UserContextPolicy. Defaults to ATTRIBUTE_FILTER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userContextPolicy")]
    pub user_context_policy: Option<String>,
    /// A block that enables fetching access levels of groups and users from an AWS Single Sign-On identity source. To configure this, see UserGroupResolutionConfiguration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userGroupResolutionConfiguration")]
    pub user_group_resolution_configuration: Option<IndexForProviderUserGroupResolutionConfiguration>,
    /// A block that specifies the user token configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userTokenConfigurations")]
    pub user_token_configurations: Option<IndexForProviderUserTokenConfigurations>,
}

/// A block that sets the number of additional document storage and query capacity units that should be used by the index. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexForProviderCapacityUnits {
    /// The amount of extra query capacity for an index and GetQuerySuggestions capacity. For more information, refer to QueryCapacityUnits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryCapacityUnits")]
    pub query_capacity_units: Option<f64>,
    /// The amount of extra storage capacity for an index. A single capacity unit provides 30 GB of storage space or 100,000 documents, whichever is reached first. Minimum value of 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageCapacityUnits")]
    pub storage_capacity_units: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexForProviderDocumentMetadataConfigurationUpdates {
    /// The name of the index field. Minimum length of 1. Maximum length of 30.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A block that provides manual tuning parameters to determine how the field affects the search results. Detailed below
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub relevance: Option<IndexForProviderDocumentMetadataConfigurationUpdatesRelevance>,
    /// A block that provides information about how the field is used during a search. Documented below. Detailed below
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search: Option<IndexForProviderDocumentMetadataConfigurationUpdatesSearch>,
    /// The data type of the index field. Valid values are STRING_VALUE, STRING_LIST_VALUE, LONG_VALUE, DATE_VALUE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// A block that provides manual tuning parameters to determine how the field affects the search results. Detailed below
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexForProviderDocumentMetadataConfigurationUpdatesRelevance {
    /// Specifies the time period that the boost applies to. For more information, refer to Duration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Indicates that this field determines how "fresh" a document is. For more information, refer to Freshness.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub freshness: Option<bool>,
    /// The relative importance of the field in the search. Larger numbers provide more of a boost than smaller numbers. Minimum value of 1. Maximum value of 10.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub importance: Option<f64>,
    /// Determines how values should be interpreted. For more information, refer to RankOrder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rankOrder")]
    pub rank_order: Option<String>,
    /// A list of values that should be given a different boost when they appear in the result list. For more information, refer to ValueImportanceMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesImportanceMap")]
    pub values_importance_map: Option<HashMap<String, serde_json::Number>>,
}

/// A block that provides information about how the field is used during a search. Documented below. Detailed below
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexForProviderDocumentMetadataConfigurationUpdatesSearch {
    /// Determines whether the field is returned in the query response. The default is true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub displayable: Option<bool>,
    /// Indicates that the field can be used to create search facets, a count of results for each value in the field. The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub facetable: Option<bool>,
    /// Determines whether the field is used in the search. If the Searchable field is true, you can use relevance tuning to manually tune how Amazon Kendra weights the field in the search. The default is true for string fields and false for number and date fields.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub searchable: Option<bool>,
    /// Determines whether the field can be used to sort the results of a query. If you specify sorting on a field that does not have Sortable set to true, Amazon Kendra returns an exception. The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sortable: Option<bool>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexForProviderRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IndexForProviderRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexForProviderRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IndexForProviderRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IndexForProviderRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IndexForProviderRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IndexForProviderRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexForProviderRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IndexForProviderRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexForProviderRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IndexForProviderRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IndexForProviderRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IndexForProviderRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IndexForProviderRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A block that specifies the identifier of the AWS KMS customer managed key (CMK) that's used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexForProviderServerSideEncryptionConfiguration {
    /// The identifier of the AWS KMScustomer master key (CMK). Amazon Kendra doesn't support asymmetric CMKs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    pub kms_key_id: Option<String>,
}

/// A block that enables fetching access levels of groups and users from an AWS Single Sign-On identity source. To configure this, see UserGroupResolutionConfiguration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexForProviderUserGroupResolutionConfiguration {
    /// The identity store provider (mode) you want to use to fetch access levels of groups and users. AWS Single Sign-On is currently the only available mode. Your users and groups must exist in an AWS SSO identity source in order to use this mode. Valid Values are AWS_SSO or NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userGroupResolutionMode")]
    pub user_group_resolution_mode: Option<String>,
}

/// A block that specifies the user token configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexForProviderUserTokenConfigurations {
    /// A block that specifies the information about the JSON token type configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonTokenTypeConfiguration")]
    pub json_token_type_configuration: Option<IndexForProviderUserTokenConfigurationsJsonTokenTypeConfiguration>,
    /// A block that specifies the information about the JWT token type configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwtTokenTypeConfiguration")]
    pub jwt_token_type_configuration: Option<IndexForProviderUserTokenConfigurationsJwtTokenTypeConfiguration>,
}

/// A block that specifies the information about the JSON token type configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexForProviderUserTokenConfigurationsJsonTokenTypeConfiguration {
    /// The group attribute field. Minimum length of 1. Maximum length of 2048.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupAttributeField")]
    pub group_attribute_field: Option<String>,
    /// The user name attribute field. Minimum length of 1. Maximum length of 2048.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userNameAttributeField")]
    pub user_name_attribute_field: Option<String>,
}

/// A block that specifies the information about the JWT token type configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexForProviderUserTokenConfigurationsJwtTokenTypeConfiguration {
    /// The regular expression that identifies the claim. Minimum length of 1. Maximum length of 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimRegex")]
    pub claim_regex: Option<String>,
    /// The group attribute field. Minimum length of 1. Maximum length of 2048.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupAttributeField")]
    pub group_attribute_field: Option<String>,
    /// The issuer of the token. Minimum length of 1. Maximum length of 65.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    /// The location of the key. Valid values are URL or SECRET_MANAGER
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyLocation")]
    pub key_location: Option<String>,
    /// The Amazon Resource Name (ARN) of the secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerArn")]
    pub secrets_manager_arn: Option<String>,
    /// The signing key URL. Valid pattern is ^(https?|ftp|file):\/\/([^\s]*)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// The user name attribute field. Minimum length of 1. Maximum length of 2048.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userNameAttributeField")]
    pub user_name_attribute_field: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexInitProvider {
    /// A block that sets the number of additional document storage and query capacity units that should be used by the index. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityUnits")]
    pub capacity_units: Option<IndexInitProviderCapacityUnits>,
    /// The description of the Index.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// One or more blocks that specify the configuration settings for any metadata applied to the documents in the index. Minimum number of 0 items. Maximum number of 500 items. If specified, you must define all elements, including those that are provided by default. These index fields are documented at Amazon Kendra Index documentation. For an example resource that defines these default index fields, refer to the default example above. For an example resource that appends additional index fields, refer to the append example above. All arguments for each block must be specified. Note that blocks cannot be removed since index fields cannot be deleted. This argument is detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentMetadataConfigurationUpdates")]
    pub document_metadata_configuration_updates: Option<Vec<IndexInitProviderDocumentMetadataConfigurationUpdates>>,
    /// The Amazon Kendra edition to use for the index. Choose DEVELOPER_EDITION for indexes intended for development, testing, or proof of concept. Use ENTERPRISE_EDITION for your production databases. Once you set the edition for an index, it can't be changed. Defaults to ENTERPRISE_EDITION
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub edition: Option<String>,
    /// Specifies the name of the Index.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// An AWS Identity and Access Management (IAM) role that gives Amazon Kendra permissions to access your Amazon CloudWatch logs and metrics. This is also the role you use when you call the BatchPutDocument API to index documents from an Amazon S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<IndexInitProviderRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<IndexInitProviderRoleArnSelector>,
    /// A block that specifies the identifier of the AWS KMS customer managed key (CMK) that's used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideEncryptionConfiguration")]
    pub server_side_encryption_configuration: Option<IndexInitProviderServerSideEncryptionConfiguration>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The user context policy. Valid values are ATTRIBUTE_FILTER or USER_TOKEN. For more information, refer to UserContextPolicy. Defaults to ATTRIBUTE_FILTER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userContextPolicy")]
    pub user_context_policy: Option<String>,
    /// A block that enables fetching access levels of groups and users from an AWS Single Sign-On identity source. To configure this, see UserGroupResolutionConfiguration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userGroupResolutionConfiguration")]
    pub user_group_resolution_configuration: Option<IndexInitProviderUserGroupResolutionConfiguration>,
    /// A block that specifies the user token configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userTokenConfigurations")]
    pub user_token_configurations: Option<IndexInitProviderUserTokenConfigurations>,
}

/// A block that sets the number of additional document storage and query capacity units that should be used by the index. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexInitProviderCapacityUnits {
    /// The amount of extra query capacity for an index and GetQuerySuggestions capacity. For more information, refer to QueryCapacityUnits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryCapacityUnits")]
    pub query_capacity_units: Option<f64>,
    /// The amount of extra storage capacity for an index. A single capacity unit provides 30 GB of storage space or 100,000 documents, whichever is reached first. Minimum value of 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageCapacityUnits")]
    pub storage_capacity_units: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexInitProviderDocumentMetadataConfigurationUpdates {
    /// The name of the index field. Minimum length of 1. Maximum length of 30.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A block that provides manual tuning parameters to determine how the field affects the search results. Detailed below
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub relevance: Option<IndexInitProviderDocumentMetadataConfigurationUpdatesRelevance>,
    /// A block that provides information about how the field is used during a search. Documented below. Detailed below
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search: Option<IndexInitProviderDocumentMetadataConfigurationUpdatesSearch>,
    /// The data type of the index field. Valid values are STRING_VALUE, STRING_LIST_VALUE, LONG_VALUE, DATE_VALUE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// A block that provides manual tuning parameters to determine how the field affects the search results. Detailed below
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexInitProviderDocumentMetadataConfigurationUpdatesRelevance {
    /// Specifies the time period that the boost applies to. For more information, refer to Duration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Indicates that this field determines how "fresh" a document is. For more information, refer to Freshness.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub freshness: Option<bool>,
    /// The relative importance of the field in the search. Larger numbers provide more of a boost than smaller numbers. Minimum value of 1. Maximum value of 10.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub importance: Option<f64>,
    /// Determines how values should be interpreted. For more information, refer to RankOrder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rankOrder")]
    pub rank_order: Option<String>,
    /// A list of values that should be given a different boost when they appear in the result list. For more information, refer to ValueImportanceMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesImportanceMap")]
    pub values_importance_map: Option<HashMap<String, serde_json::Number>>,
}

/// A block that provides information about how the field is used during a search. Documented below. Detailed below
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexInitProviderDocumentMetadataConfigurationUpdatesSearch {
    /// Determines whether the field is returned in the query response. The default is true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub displayable: Option<bool>,
    /// Indicates that the field can be used to create search facets, a count of results for each value in the field. The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub facetable: Option<bool>,
    /// Determines whether the field is used in the search. If the Searchable field is true, you can use relevance tuning to manually tune how Amazon Kendra weights the field in the search. The default is true for string fields and false for number and date fields.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub searchable: Option<bool>,
    /// Determines whether the field can be used to sort the results of a query. If you specify sorting on a field that does not have Sortable set to true, Amazon Kendra returns an exception. The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sortable: Option<bool>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexInitProviderRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IndexInitProviderRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexInitProviderRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IndexInitProviderRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IndexInitProviderRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IndexInitProviderRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IndexInitProviderRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexInitProviderRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IndexInitProviderRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexInitProviderRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IndexInitProviderRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IndexInitProviderRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IndexInitProviderRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IndexInitProviderRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A block that specifies the identifier of the AWS KMS customer managed key (CMK) that's used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexInitProviderServerSideEncryptionConfiguration {
    /// The identifier of the AWS KMScustomer master key (CMK). Amazon Kendra doesn't support asymmetric CMKs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    pub kms_key_id: Option<String>,
}

/// A block that enables fetching access levels of groups and users from an AWS Single Sign-On identity source. To configure this, see UserGroupResolutionConfiguration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexInitProviderUserGroupResolutionConfiguration {
    /// The identity store provider (mode) you want to use to fetch access levels of groups and users. AWS Single Sign-On is currently the only available mode. Your users and groups must exist in an AWS SSO identity source in order to use this mode. Valid Values are AWS_SSO or NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userGroupResolutionMode")]
    pub user_group_resolution_mode: Option<String>,
}

/// A block that specifies the user token configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexInitProviderUserTokenConfigurations {
    /// A block that specifies the information about the JSON token type configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonTokenTypeConfiguration")]
    pub json_token_type_configuration: Option<IndexInitProviderUserTokenConfigurationsJsonTokenTypeConfiguration>,
    /// A block that specifies the information about the JWT token type configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwtTokenTypeConfiguration")]
    pub jwt_token_type_configuration: Option<IndexInitProviderUserTokenConfigurationsJwtTokenTypeConfiguration>,
}

/// A block that specifies the information about the JSON token type configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexInitProviderUserTokenConfigurationsJsonTokenTypeConfiguration {
    /// The group attribute field. Minimum length of 1. Maximum length of 2048.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupAttributeField")]
    pub group_attribute_field: Option<String>,
    /// The user name attribute field. Minimum length of 1. Maximum length of 2048.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userNameAttributeField")]
    pub user_name_attribute_field: Option<String>,
}

/// A block that specifies the information about the JWT token type configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexInitProviderUserTokenConfigurationsJwtTokenTypeConfiguration {
    /// The regular expression that identifies the claim. Minimum length of 1. Maximum length of 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimRegex")]
    pub claim_regex: Option<String>,
    /// The group attribute field. Minimum length of 1. Maximum length of 2048.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupAttributeField")]
    pub group_attribute_field: Option<String>,
    /// The issuer of the token. Minimum length of 1. Maximum length of 65.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    /// The location of the key. Valid values are URL or SECRET_MANAGER
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyLocation")]
    pub key_location: Option<String>,
    /// The Amazon Resource Name (ARN) of the secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerArn")]
    pub secrets_manager_arn: Option<String>,
    /// The signing key URL. Valid pattern is ^(https?|ftp|file):\/\/([^\s]*)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// The user name attribute field. Minimum length of 1. Maximum length of 2048.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userNameAttributeField")]
    pub user_name_attribute_field: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IndexProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IndexProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IndexProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IndexProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IndexProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<IndexPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<IndexPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IndexPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IndexPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IndexPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IndexPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IndexPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// IndexStatus defines the observed state of Index.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<IndexStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexStatusAtProvider {
    /// The Amazon Resource Name (ARN) of the Index.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// A block that sets the number of additional document storage and query capacity units that should be used by the index. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityUnits")]
    pub capacity_units: Option<IndexStatusAtProviderCapacityUnits>,
    /// The Unix datetime that the index was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdAt")]
    pub created_at: Option<String>,
    /// The description of the Index.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// One or more blocks that specify the configuration settings for any metadata applied to the documents in the index. Minimum number of 0 items. Maximum number of 500 items. If specified, you must define all elements, including those that are provided by default. These index fields are documented at Amazon Kendra Index documentation. For an example resource that defines these default index fields, refer to the default example above. For an example resource that appends additional index fields, refer to the append example above. All arguments for each block must be specified. Note that blocks cannot be removed since index fields cannot be deleted. This argument is detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentMetadataConfigurationUpdates")]
    pub document_metadata_configuration_updates: Option<Vec<IndexStatusAtProviderDocumentMetadataConfigurationUpdates>>,
    /// The Amazon Kendra edition to use for the index. Choose DEVELOPER_EDITION for indexes intended for development, testing, or proof of concept. Use ENTERPRISE_EDITION for your production databases. Once you set the edition for an index, it can't be changed. Defaults to ENTERPRISE_EDITION
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub edition: Option<String>,
    /// When the Status field value is FAILED, this contains a message that explains why.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorMessage")]
    pub error_message: Option<String>,
    /// The identifier of the Index.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// A block that provides information about the number of FAQ questions and answers and the number of text documents indexed. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexStatistics")]
    pub index_statistics: Option<Vec<IndexStatusAtProviderIndexStatistics>>,
    /// Specifies the name of the Index.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// An AWS Identity and Access Management (IAM) role that gives Amazon Kendra permissions to access your Amazon CloudWatch logs and metrics. This is also the role you use when you call the BatchPutDocument API to index documents from an Amazon S3 bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// A block that specifies the identifier of the AWS KMS customer managed key (CMK) that's used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideEncryptionConfiguration")]
    pub server_side_encryption_configuration: Option<IndexStatusAtProviderServerSideEncryptionConfiguration>,
    /// The current status of the index. When the value is ACTIVE, the index is ready for use. If the Status field value is FAILED, the error_message field contains a message that explains why.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// The Unix datetime that the index was last updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updatedAt")]
    pub updated_at: Option<String>,
    /// The user context policy. Valid values are ATTRIBUTE_FILTER or USER_TOKEN. For more information, refer to UserContextPolicy. Defaults to ATTRIBUTE_FILTER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userContextPolicy")]
    pub user_context_policy: Option<String>,
    /// A block that enables fetching access levels of groups and users from an AWS Single Sign-On identity source. To configure this, see UserGroupResolutionConfiguration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userGroupResolutionConfiguration")]
    pub user_group_resolution_configuration: Option<IndexStatusAtProviderUserGroupResolutionConfiguration>,
    /// A block that specifies the user token configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userTokenConfigurations")]
    pub user_token_configurations: Option<IndexStatusAtProviderUserTokenConfigurations>,
}

/// A block that sets the number of additional document storage and query capacity units that should be used by the index. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexStatusAtProviderCapacityUnits {
    /// The amount of extra query capacity for an index and GetQuerySuggestions capacity. For more information, refer to QueryCapacityUnits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryCapacityUnits")]
    pub query_capacity_units: Option<f64>,
    /// The amount of extra storage capacity for an index. A single capacity unit provides 30 GB of storage space or 100,000 documents, whichever is reached first. Minimum value of 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageCapacityUnits")]
    pub storage_capacity_units: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexStatusAtProviderDocumentMetadataConfigurationUpdates {
    /// The name of the index field. Minimum length of 1. Maximum length of 30.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A block that provides manual tuning parameters to determine how the field affects the search results. Detailed below
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub relevance: Option<IndexStatusAtProviderDocumentMetadataConfigurationUpdatesRelevance>,
    /// A block that provides information about how the field is used during a search. Documented below. Detailed below
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub search: Option<IndexStatusAtProviderDocumentMetadataConfigurationUpdatesSearch>,
    /// The data type of the index field. Valid values are STRING_VALUE, STRING_LIST_VALUE, LONG_VALUE, DATE_VALUE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// A block that provides manual tuning parameters to determine how the field affects the search results. Detailed below
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexStatusAtProviderDocumentMetadataConfigurationUpdatesRelevance {
    /// Specifies the time period that the boost applies to. For more information, refer to Duration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Indicates that this field determines how "fresh" a document is. For more information, refer to Freshness.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub freshness: Option<bool>,
    /// The relative importance of the field in the search. Larger numbers provide more of a boost than smaller numbers. Minimum value of 1. Maximum value of 10.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub importance: Option<f64>,
    /// Determines how values should be interpreted. For more information, refer to RankOrder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rankOrder")]
    pub rank_order: Option<String>,
    /// A list of values that should be given a different boost when they appear in the result list. For more information, refer to ValueImportanceMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valuesImportanceMap")]
    pub values_importance_map: Option<HashMap<String, serde_json::Number>>,
}

/// A block that provides information about how the field is used during a search. Documented below. Detailed below
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexStatusAtProviderDocumentMetadataConfigurationUpdatesSearch {
    /// Determines whether the field is returned in the query response. The default is true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub displayable: Option<bool>,
    /// Indicates that the field can be used to create search facets, a count of results for each value in the field. The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub facetable: Option<bool>,
    /// Determines whether the field is used in the search. If the Searchable field is true, you can use relevance tuning to manually tune how Amazon Kendra weights the field in the search. The default is true for string fields and false for number and date fields.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub searchable: Option<bool>,
    /// Determines whether the field can be used to sort the results of a query. If you specify sorting on a field that does not have Sortable set to true, Amazon Kendra returns an exception. The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sortable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexStatusAtProviderIndexStatistics {
    /// A block that specifies the number of question and answer topics in the index. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "faqStatistics")]
    pub faq_statistics: Option<Vec<IndexStatusAtProviderIndexStatisticsFaqStatistics>>,
    /// A block that specifies the number of text documents indexed. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "textDocumentStatistics")]
    pub text_document_statistics: Option<Vec<IndexStatusAtProviderIndexStatisticsTextDocumentStatistics>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexStatusAtProviderIndexStatisticsFaqStatistics {
    /// The total number of FAQ questions and answers contained in the index.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexedQuestionAnswersCount")]
    pub indexed_question_answers_count: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexStatusAtProviderIndexStatisticsTextDocumentStatistics {
    /// The total size, in bytes, of the indexed documents.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexedTextBytes")]
    pub indexed_text_bytes: Option<f64>,
    /// The number of text documents indexed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexedTextDocumentsCount")]
    pub indexed_text_documents_count: Option<f64>,
}

/// A block that specifies the identifier of the AWS KMS customer managed key (CMK) that's used to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexStatusAtProviderServerSideEncryptionConfiguration {
    /// The identifier of the AWS KMScustomer master key (CMK). Amazon Kendra doesn't support asymmetric CMKs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    pub kms_key_id: Option<String>,
}

/// A block that enables fetching access levels of groups and users from an AWS Single Sign-On identity source. To configure this, see UserGroupResolutionConfiguration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexStatusAtProviderUserGroupResolutionConfiguration {
    /// The identity store provider (mode) you want to use to fetch access levels of groups and users. AWS Single Sign-On is currently the only available mode. Your users and groups must exist in an AWS SSO identity source in order to use this mode. Valid Values are AWS_SSO or NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userGroupResolutionMode")]
    pub user_group_resolution_mode: Option<String>,
}

/// A block that specifies the user token configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexStatusAtProviderUserTokenConfigurations {
    /// A block that specifies the information about the JSON token type configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonTokenTypeConfiguration")]
    pub json_token_type_configuration: Option<IndexStatusAtProviderUserTokenConfigurationsJsonTokenTypeConfiguration>,
    /// A block that specifies the information about the JWT token type configuration. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwtTokenTypeConfiguration")]
    pub jwt_token_type_configuration: Option<IndexStatusAtProviderUserTokenConfigurationsJwtTokenTypeConfiguration>,
}

/// A block that specifies the information about the JSON token type configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexStatusAtProviderUserTokenConfigurationsJsonTokenTypeConfiguration {
    /// The group attribute field. Minimum length of 1. Maximum length of 2048.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupAttributeField")]
    pub group_attribute_field: Option<String>,
    /// The user name attribute field. Minimum length of 1. Maximum length of 2048.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userNameAttributeField")]
    pub user_name_attribute_field: Option<String>,
}

/// A block that specifies the information about the JWT token type configuration. Detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexStatusAtProviderUserTokenConfigurationsJwtTokenTypeConfiguration {
    /// The regular expression that identifies the claim. Minimum length of 1. Maximum length of 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "claimRegex")]
    pub claim_regex: Option<String>,
    /// The group attribute field. Minimum length of 1. Maximum length of 2048.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupAttributeField")]
    pub group_attribute_field: Option<String>,
    /// The issuer of the token. Minimum length of 1. Maximum length of 65.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    /// The location of the key. Valid values are URL or SECRET_MANAGER
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyLocation")]
    pub key_location: Option<String>,
    /// The Amazon Resource Name (ARN) of the secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerArn")]
    pub secrets_manager_arn: Option<String>,
    /// The signing key URL. Valid pattern is ^(https?|ftp|file):\/\/([^\s]*)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// The user name attribute field. Minimum length of 1. Maximum length of 2048.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userNameAttributeField")]
    pub user_name_attribute_field: Option<String>,
}


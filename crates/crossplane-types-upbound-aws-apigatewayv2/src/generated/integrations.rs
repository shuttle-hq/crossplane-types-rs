// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// IntegrationSpec defines the desired state of Integration
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "apigatewayv2.aws.upbound.io", version = "v1beta2", kind = "Integration", plural = "integrations")]
#[kube(status = "IntegrationStatus")]
pub struct IntegrationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<IntegrationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: IntegrationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<IntegrationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<IntegrationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<IntegrationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<IntegrationWriteConnectionSecretToRef>,
}

/// IntegrationSpec defines the desired state of Integration
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProvider {
    /// API identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiId")]
    pub api_id: Option<String>,
    /// Reference to a API in apigatewayv2 to populate apiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiIdRef")]
    pub api_id_ref: Option<IntegrationForProviderApiIdRef>,
    /// Selector for a API in apigatewayv2 to populate apiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiIdSelector")]
    pub api_id_selector: Option<IntegrationForProviderApiIdSelector>,
    /// ID of the VPC link for a private integration. Supported only for HTTP APIs. Must be between 1 and 1024 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionId")]
    pub connection_id: Option<String>,
    /// Reference to a VPCLink in apigatewayv2 to populate connectionId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionIdRef")]
    pub connection_id_ref: Option<IntegrationForProviderConnectionIdRef>,
    /// Selector for a VPCLink in apigatewayv2 to populate connectionId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionIdSelector")]
    pub connection_id_selector: Option<IntegrationForProviderConnectionIdSelector>,
    /// Type of the network connection to the integration endpoint. Valid values: INTERNET, VPC_LINK. Default is INTERNET.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionType")]
    pub connection_type: Option<String>,
    /// How to handle response payload content type conversions. Valid values: CONVERT_TO_BINARY, CONVERT_TO_TEXT. Supported only for WebSocket APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentHandlingStrategy")]
    pub content_handling_strategy: Option<String>,
    /// Credentials required for the integration, if any.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialsArn")]
    pub credentials_arn: Option<String>,
    /// Reference to a Role in iam to populate credentialsArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialsArnRef")]
    pub credentials_arn_ref: Option<IntegrationForProviderCredentialsArnRef>,
    /// Selector for a Role in iam to populate credentialsArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialsArnSelector")]
    pub credentials_arn_selector: Option<IntegrationForProviderCredentialsArnSelector>,
    /// Description of the integration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Integration's HTTP method. Must be specified if integration_type is not MOCK.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationMethod")]
    pub integration_method: Option<String>,
    /// AWS service action to invoke. Supported only for HTTP APIs when integration_type is AWS_PROXY. See the AWS service integration reference documentation for supported values. Must be between 1 and 128 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationSubtype")]
    pub integration_subtype: Option<String>,
    /// Integration type of an integration.
    /// Valid values: AWS (supported only for WebSocket APIs), AWS_PROXY, HTTP (supported only for WebSocket APIs), HTTP_PROXY, MOCK (supported only for WebSocket APIs). For an HTTP API private integration, use HTTP_PROXY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationType")]
    pub integration_type: Option<String>,
    /// URI of the Lambda function for a Lambda proxy integration, when integration_type is AWS_PROXY.
    /// For an HTTP integration, specify a fully-qualified URL. For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationUri")]
    pub integration_uri: Option<String>,
    /// Reference to a Function in lambda to populate integrationUri.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationUriRef")]
    pub integration_uri_ref: Option<IntegrationForProviderIntegrationUriRef>,
    /// Selector for a Function in lambda to populate integrationUri.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationUriSelector")]
    pub integration_uri_selector: Option<IntegrationForProviderIntegrationUriSelector>,
    /// Pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the request_templates attribute.
    /// Valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, NEVER. Default is WHEN_NO_MATCH. Supported only for WebSocket APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passthroughBehavior")]
    pub passthrough_behavior: Option<String>,
    /// The format of the payload sent to an integration. Valid values: 1.0, 2.0. Default is 1.0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "payloadFormatVersion")]
    pub payload_format_version: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend.
    /// For HTTP APIs with a specified integration_subtype, a key-value map specifying parameters that are passed to AWS_PROXY integrations.
    /// For HTTP APIs without a specified integration_subtype, a key-value map specifying how to transform HTTP requests before sending them to the backend.
    /// See the Amazon API Gateway Developer Guide for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestParameters")]
    pub request_parameters: Option<HashMap<String, String>>,
    /// Map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. Supported only for WebSocket APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTemplates")]
    pub request_templates: Option<HashMap<String, String>>,
    /// Mappings to transform the HTTP response from a backend integration before returning the response to clients. Supported only for HTTP APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseParameters")]
    pub response_parameters: Option<Vec<IntegrationForProviderResponseParameters>>,
    /// The template selection expression for the integration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "templateSelectionExpression")]
    pub template_selection_expression: Option<String>,
    /// Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs.
    /// The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutMilliseconds")]
    pub timeout_milliseconds: Option<f64>,
    /// TLS configuration for a private integration. Supported only for HTTP APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<IntegrationForProviderTlsConfig>,
}

/// Reference to a API in apigatewayv2 to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProviderApiIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IntegrationForProviderApiIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProviderApiIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IntegrationForProviderApiIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IntegrationForProviderApiIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationForProviderApiIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationForProviderApiIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a API in apigatewayv2 to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProviderApiIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IntegrationForProviderApiIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProviderApiIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IntegrationForProviderApiIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IntegrationForProviderApiIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationForProviderApiIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationForProviderApiIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a VPCLink in apigatewayv2 to populate connectionId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProviderConnectionIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IntegrationForProviderConnectionIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProviderConnectionIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IntegrationForProviderConnectionIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IntegrationForProviderConnectionIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationForProviderConnectionIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationForProviderConnectionIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPCLink in apigatewayv2 to populate connectionId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProviderConnectionIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IntegrationForProviderConnectionIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProviderConnectionIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IntegrationForProviderConnectionIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IntegrationForProviderConnectionIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationForProviderConnectionIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationForProviderConnectionIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate credentialsArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProviderCredentialsArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IntegrationForProviderCredentialsArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProviderCredentialsArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IntegrationForProviderCredentialsArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IntegrationForProviderCredentialsArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationForProviderCredentialsArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationForProviderCredentialsArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate credentialsArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProviderCredentialsArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IntegrationForProviderCredentialsArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProviderCredentialsArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IntegrationForProviderCredentialsArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IntegrationForProviderCredentialsArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationForProviderCredentialsArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationForProviderCredentialsArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Function in lambda to populate integrationUri.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProviderIntegrationUriRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IntegrationForProviderIntegrationUriRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProviderIntegrationUriRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IntegrationForProviderIntegrationUriRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IntegrationForProviderIntegrationUriRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationForProviderIntegrationUriRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationForProviderIntegrationUriRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Function in lambda to populate integrationUri.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProviderIntegrationUriSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IntegrationForProviderIntegrationUriSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProviderIntegrationUriSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IntegrationForProviderIntegrationUriSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IntegrationForProviderIntegrationUriSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationForProviderIntegrationUriSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationForProviderIntegrationUriSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProviderResponseParameters {
    /// Key-value map. The key of this map identifies the location of the request parameter to change, and how to change it. The corresponding value specifies the new data for the parameter.
    /// See the Amazon API Gateway Developer Guide for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mappings: Option<HashMap<String, String>>,
    /// HTTP status code in the range 200-599.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusCode")]
    pub status_code: Option<String>,
}

/// TLS configuration for a private integration. Supported only for HTTP APIs.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationForProviderTlsConfig {
    /// If you specify a server name, API Gateway uses it to verify the hostname on the integration's certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverNameToVerify")]
    pub server_name_to_verify: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProvider {
    /// API identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiId")]
    pub api_id: Option<String>,
    /// Reference to a API in apigatewayv2 to populate apiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiIdRef")]
    pub api_id_ref: Option<IntegrationInitProviderApiIdRef>,
    /// Selector for a API in apigatewayv2 to populate apiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiIdSelector")]
    pub api_id_selector: Option<IntegrationInitProviderApiIdSelector>,
    /// ID of the VPC link for a private integration. Supported only for HTTP APIs. Must be between 1 and 1024 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionId")]
    pub connection_id: Option<String>,
    /// Reference to a VPCLink in apigatewayv2 to populate connectionId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionIdRef")]
    pub connection_id_ref: Option<IntegrationInitProviderConnectionIdRef>,
    /// Selector for a VPCLink in apigatewayv2 to populate connectionId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionIdSelector")]
    pub connection_id_selector: Option<IntegrationInitProviderConnectionIdSelector>,
    /// Type of the network connection to the integration endpoint. Valid values: INTERNET, VPC_LINK. Default is INTERNET.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionType")]
    pub connection_type: Option<String>,
    /// How to handle response payload content type conversions. Valid values: CONVERT_TO_BINARY, CONVERT_TO_TEXT. Supported only for WebSocket APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentHandlingStrategy")]
    pub content_handling_strategy: Option<String>,
    /// Credentials required for the integration, if any.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialsArn")]
    pub credentials_arn: Option<String>,
    /// Reference to a Role in iam to populate credentialsArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialsArnRef")]
    pub credentials_arn_ref: Option<IntegrationInitProviderCredentialsArnRef>,
    /// Selector for a Role in iam to populate credentialsArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialsArnSelector")]
    pub credentials_arn_selector: Option<IntegrationInitProviderCredentialsArnSelector>,
    /// Description of the integration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Integration's HTTP method. Must be specified if integration_type is not MOCK.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationMethod")]
    pub integration_method: Option<String>,
    /// AWS service action to invoke. Supported only for HTTP APIs when integration_type is AWS_PROXY. See the AWS service integration reference documentation for supported values. Must be between 1 and 128 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationSubtype")]
    pub integration_subtype: Option<String>,
    /// Integration type of an integration.
    /// Valid values: AWS (supported only for WebSocket APIs), AWS_PROXY, HTTP (supported only for WebSocket APIs), HTTP_PROXY, MOCK (supported only for WebSocket APIs). For an HTTP API private integration, use HTTP_PROXY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationType")]
    pub integration_type: Option<String>,
    /// URI of the Lambda function for a Lambda proxy integration, when integration_type is AWS_PROXY.
    /// For an HTTP integration, specify a fully-qualified URL. For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationUri")]
    pub integration_uri: Option<String>,
    /// Reference to a Function in lambda to populate integrationUri.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationUriRef")]
    pub integration_uri_ref: Option<IntegrationInitProviderIntegrationUriRef>,
    /// Selector for a Function in lambda to populate integrationUri.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationUriSelector")]
    pub integration_uri_selector: Option<IntegrationInitProviderIntegrationUriSelector>,
    /// Pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the request_templates attribute.
    /// Valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, NEVER. Default is WHEN_NO_MATCH. Supported only for WebSocket APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passthroughBehavior")]
    pub passthrough_behavior: Option<String>,
    /// The format of the payload sent to an integration. Valid values: 1.0, 2.0. Default is 1.0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "payloadFormatVersion")]
    pub payload_format_version: Option<String>,
    /// For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend.
    /// For HTTP APIs with a specified integration_subtype, a key-value map specifying parameters that are passed to AWS_PROXY integrations.
    /// For HTTP APIs without a specified integration_subtype, a key-value map specifying how to transform HTTP requests before sending them to the backend.
    /// See the Amazon API Gateway Developer Guide for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestParameters")]
    pub request_parameters: Option<HashMap<String, String>>,
    /// Map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. Supported only for WebSocket APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTemplates")]
    pub request_templates: Option<HashMap<String, String>>,
    /// Mappings to transform the HTTP response from a backend integration before returning the response to clients. Supported only for HTTP APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseParameters")]
    pub response_parameters: Option<Vec<IntegrationInitProviderResponseParameters>>,
    /// The template selection expression for the integration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "templateSelectionExpression")]
    pub template_selection_expression: Option<String>,
    /// Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs.
    /// The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutMilliseconds")]
    pub timeout_milliseconds: Option<f64>,
    /// TLS configuration for a private integration. Supported only for HTTP APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<IntegrationInitProviderTlsConfig>,
}

/// Reference to a API in apigatewayv2 to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProviderApiIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IntegrationInitProviderApiIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProviderApiIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IntegrationInitProviderApiIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IntegrationInitProviderApiIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationInitProviderApiIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationInitProviderApiIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a API in apigatewayv2 to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProviderApiIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IntegrationInitProviderApiIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProviderApiIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IntegrationInitProviderApiIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IntegrationInitProviderApiIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationInitProviderApiIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationInitProviderApiIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a VPCLink in apigatewayv2 to populate connectionId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProviderConnectionIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IntegrationInitProviderConnectionIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProviderConnectionIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IntegrationInitProviderConnectionIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IntegrationInitProviderConnectionIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationInitProviderConnectionIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationInitProviderConnectionIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPCLink in apigatewayv2 to populate connectionId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProviderConnectionIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IntegrationInitProviderConnectionIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProviderConnectionIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IntegrationInitProviderConnectionIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IntegrationInitProviderConnectionIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationInitProviderConnectionIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationInitProviderConnectionIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate credentialsArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProviderCredentialsArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IntegrationInitProviderCredentialsArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProviderCredentialsArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IntegrationInitProviderCredentialsArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IntegrationInitProviderCredentialsArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationInitProviderCredentialsArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationInitProviderCredentialsArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate credentialsArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProviderCredentialsArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IntegrationInitProviderCredentialsArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProviderCredentialsArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IntegrationInitProviderCredentialsArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IntegrationInitProviderCredentialsArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationInitProviderCredentialsArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationInitProviderCredentialsArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Function in lambda to populate integrationUri.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProviderIntegrationUriRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IntegrationInitProviderIntegrationUriRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProviderIntegrationUriRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IntegrationInitProviderIntegrationUriRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IntegrationInitProviderIntegrationUriRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationInitProviderIntegrationUriRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationInitProviderIntegrationUriRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Function in lambda to populate integrationUri.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProviderIntegrationUriSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IntegrationInitProviderIntegrationUriSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProviderIntegrationUriSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IntegrationInitProviderIntegrationUriSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IntegrationInitProviderIntegrationUriSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationInitProviderIntegrationUriSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationInitProviderIntegrationUriSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProviderResponseParameters {
    /// Key-value map. The key of this map identifies the location of the request parameter to change, and how to change it. The corresponding value specifies the new data for the parameter.
    /// See the Amazon API Gateway Developer Guide for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mappings: Option<HashMap<String, String>>,
    /// HTTP status code in the range 200-599.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusCode")]
    pub status_code: Option<String>,
}

/// TLS configuration for a private integration. Supported only for HTTP APIs.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationInitProviderTlsConfig {
    /// If you specify a server name, API Gateway uses it to verify the hostname on the integration's certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverNameToVerify")]
    pub server_name_to_verify: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IntegrationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IntegrationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IntegrationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<IntegrationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<IntegrationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IntegrationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IntegrationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IntegrationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IntegrationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// IntegrationStatus defines the observed state of Integration.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<IntegrationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationStatusAtProvider {
    /// API identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiId")]
    pub api_id: Option<String>,
    /// ID of the VPC link for a private integration. Supported only for HTTP APIs. Must be between 1 and 1024 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionId")]
    pub connection_id: Option<String>,
    /// Type of the network connection to the integration endpoint. Valid values: INTERNET, VPC_LINK. Default is INTERNET.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionType")]
    pub connection_type: Option<String>,
    /// How to handle response payload content type conversions. Valid values: CONVERT_TO_BINARY, CONVERT_TO_TEXT. Supported only for WebSocket APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentHandlingStrategy")]
    pub content_handling_strategy: Option<String>,
    /// Credentials required for the integration, if any.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "credentialsArn")]
    pub credentials_arn: Option<String>,
    /// Description of the integration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Integration identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Integration's HTTP method. Must be specified if integration_type is not MOCK.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationMethod")]
    pub integration_method: Option<String>,
    /// The integration response selection expression for the integration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationResponseSelectionExpression")]
    pub integration_response_selection_expression: Option<String>,
    /// AWS service action to invoke. Supported only for HTTP APIs when integration_type is AWS_PROXY. See the AWS service integration reference documentation for supported values. Must be between 1 and 128 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationSubtype")]
    pub integration_subtype: Option<String>,
    /// Integration type of an integration.
    /// Valid values: AWS (supported only for WebSocket APIs), AWS_PROXY, HTTP (supported only for WebSocket APIs), HTTP_PROXY, MOCK (supported only for WebSocket APIs). For an HTTP API private integration, use HTTP_PROXY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationType")]
    pub integration_type: Option<String>,
    /// URI of the Lambda function for a Lambda proxy integration, when integration_type is AWS_PROXY.
    /// For an HTTP integration, specify a fully-qualified URL. For an HTTP API private integration, specify the ARN of an Application Load Balancer listener, Network Load Balancer listener, or AWS Cloud Map service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "integrationUri")]
    pub integration_uri: Option<String>,
    /// Pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the request_templates attribute.
    /// Valid values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, NEVER. Default is WHEN_NO_MATCH. Supported only for WebSocket APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passthroughBehavior")]
    pub passthrough_behavior: Option<String>,
    /// The format of the payload sent to an integration. Valid values: 1.0, 2.0. Default is 1.0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "payloadFormatVersion")]
    pub payload_format_version: Option<String>,
    /// For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend.
    /// For HTTP APIs with a specified integration_subtype, a key-value map specifying parameters that are passed to AWS_PROXY integrations.
    /// For HTTP APIs without a specified integration_subtype, a key-value map specifying how to transform HTTP requests before sending them to the backend.
    /// See the Amazon API Gateway Developer Guide for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestParameters")]
    pub request_parameters: Option<HashMap<String, String>>,
    /// Map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. Supported only for WebSocket APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestTemplates")]
    pub request_templates: Option<HashMap<String, String>>,
    /// Mappings to transform the HTTP response from a backend integration before returning the response to clients. Supported only for HTTP APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "responseParameters")]
    pub response_parameters: Option<Vec<IntegrationStatusAtProviderResponseParameters>>,
    /// The template selection expression for the integration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "templateSelectionExpression")]
    pub template_selection_expression: Option<String>,
    /// Custom timeout between 50 and 29,000 milliseconds for WebSocket APIs and between 50 and 30,000 milliseconds for HTTP APIs.
    /// The default timeout is 29 seconds for WebSocket APIs and 30 seconds for HTTP APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutMilliseconds")]
    pub timeout_milliseconds: Option<f64>,
    /// TLS configuration for a private integration. Supported only for HTTP APIs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsConfig")]
    pub tls_config: Option<IntegrationStatusAtProviderTlsConfig>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationStatusAtProviderResponseParameters {
    /// Key-value map. The key of this map identifies the location of the request parameter to change, and how to change it. The corresponding value specifies the new data for the parameter.
    /// See the Amazon API Gateway Developer Guide for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mappings: Option<HashMap<String, String>>,
    /// HTTP status code in the range 200-599.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusCode")]
    pub status_code: Option<String>,
}

/// TLS configuration for a private integration. Supported only for HTTP APIs.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IntegrationStatusAtProviderTlsConfig {
    /// If you specify a server name, API Gateway uses it to verify the hostname on the integration's certificate. The server name is also included in the TLS handshake to support Server Name Indication (SNI) or virtual hosting.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverNameToVerify")]
    pub server_name_to_verify: Option<String>,
}


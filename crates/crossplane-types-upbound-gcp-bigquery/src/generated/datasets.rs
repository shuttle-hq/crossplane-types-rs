// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// DatasetSpec defines the desired state of Dataset
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "bigquery.gcp.upbound.io", version = "v1beta2", kind = "Dataset", plural = "datasets")]
#[kube(status = "DatasetStatus")]
pub struct DatasetSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<DatasetDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: DatasetForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<DatasetInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<DatasetProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<DatasetPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<DatasetWriteConnectionSecretToRef>,
}

/// DatasetSpec defines the desired state of Dataset
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProvider {
    /// An array of objects that define dataset access for one or more entities.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access: Option<Vec<DatasetForProviderAccess>>,
    /// Defines the default collation specification of future tables created
    /// in the dataset. If a table is created in this dataset without table-level
    /// default collation, then the table inherits the dataset default collation,
    /// which is applied to the string fields that do not have explicit collation
    /// specified. A change to this field affects only tables created afterwards,
    /// and does not alter the existing tables.
    /// The following values are supported:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultCollation")]
    pub default_collation: Option<String>,
    /// The default encryption key for all tables in the dataset. Once this property is set,
    /// all newly-created partitioned tables in the dataset will have encryption key set to
    /// this value, unless table creation request (or query) overrides the key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultEncryptionConfiguration")]
    pub default_encryption_configuration: Option<DatasetForProviderDefaultEncryptionConfiguration>,
    /// The default partition expiration for all partitioned tables in
    /// the dataset, in milliseconds.
    /// Once this property is set, all newly-created partitioned tables in
    /// the dataset will have an expirationMs property in the timePartitioning
    /// settings set to this value, and changing the value will only
    /// affect new tables, not existing ones. The storage in a partition will
    /// have an expiration time of its partition time plus this value.
    /// Setting this property overrides the use of defaultTableExpirationMs
    /// for partitioned tables: only one of defaultTableExpirationMs and
    /// defaultPartitionExpirationMs will be used for any new partitioned
    /// table. If you provide an explicit timePartitioning.expirationMs when
    /// creating or updating a partitioned table, that value takes precedence
    /// over the default partition expiration time indicated by this property.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultPartitionExpirationMs")]
    pub default_partition_expiration_ms: Option<f64>,
    /// The default lifetime of all tables in the dataset, in milliseconds.
    /// The minimum value is 3600000 milliseconds (one hour).
    /// Once this property is set, all newly-created tables in the dataset
    /// will have an expirationTime property set to the creation time plus
    /// the value in this property, and changing the value will only affect
    /// new tables, not existing ones. When the expirationTime for a given
    /// table is reached, that table will be deleted automatically.
    /// If a table's expirationTime is modified or removed before the
    /// table expires, or if you provide an explicit expirationTime when
    /// creating a table, that value takes precedence over the default
    /// expiration time indicated by this property.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTableExpirationMs")]
    pub default_table_expiration_ms: Option<f64>,
    /// If set to true, delete all the tables in the
    /// dataset when destroying the resource; otherwise,
    /// destroying the resource will fail if tables are present.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteContentsOnDestroy")]
    pub delete_contents_on_destroy: Option<bool>,
    /// A user-friendly description of the dataset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Information about the external metadata storage where the dataset is defined.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalDatasetReference")]
    pub external_dataset_reference: Option<DatasetForProviderExternalDatasetReference>,
    /// A descriptive name for the dataset
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "friendlyName")]
    pub friendly_name: Option<String>,
    /// TRUE if the dataset and its table names are case-insensitive, otherwise FALSE.
    /// By default, this is FALSE, which means the dataset and its table names are
    /// case-sensitive. This field does not affect routine references.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isCaseInsensitive")]
    pub is_case_insensitive: Option<bool>,
    /// The labels associated with this dataset. You can use these to
    /// organize and group your datasets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The geographic location where the dataset should reside.
    /// See official docs.
    /// There are two types of locations, regional or multi-regional. A regional
    /// location is a specific geographic place, such as Tokyo, and a multi-regional
    /// location is a large geographic area, such as the United States, that
    /// contains at least two geographic places.
    /// The default value is multi-regional location US.
    /// Changing this forces a new resource to be created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Defines the time travel window in hours. The value can be from 48 to 168 hours (2 to 7 days).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTimeTravelHours")]
    pub max_time_travel_hours: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The tags attached to this table. Tag keys are globally unique. Tag key is expected to be
    /// in the namespaced format, for example "123456789012/environment" where 123456789012 is the
    /// ID of the parent organization or project resource for this tag key. Tag value is expected
    /// to be the short name, for example "Production". See Tag definitions
    /// for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceTags")]
    pub resource_tags: Option<HashMap<String, String>>,
    /// Specifies the storage billing model for the dataset.
    /// Set this flag value to LOGICAL to use logical bytes for storage billing,
    /// or to PHYSICAL to use physical bytes instead.
    /// LOGICAL is the default if this flag isn't specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageBillingModel")]
    pub storage_billing_model: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccess {
    /// Grants all resources of particular types in a particular dataset read access to the current dataset.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dataset: Option<DatasetForProviderAccessDataset>,
    /// A domain to grant access to. Any users signed in with the
    /// domain specified will be granted the specified access
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// An email address of a Google Group to grant access to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupByEmail")]
    pub group_by_email: Option<String>,
    /// Some other type of member that appears in the IAM Policy but isn't a user,
    /// group, domain, or special group. For example: allUsers
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamMember")]
    pub iam_member: Option<String>,
    /// Describes the rights granted to the user specified by the other
    /// member of the access object. Basic, predefined, and custom roles
    /// are supported. Predefined roles that have equivalent basic roles
    /// are swapped by the API to their basic counterparts. See
    /// official docs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// A routine from a different dataset to grant access to. Queries
    /// executed against that routine will have read access to tables in
    /// this dataset. The role field is not required when this field is
    /// set. If that routine is updated by any user, access to the routine
    /// needs to be granted again via an update operation.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routine: Option<DatasetForProviderAccessRoutine>,
    /// A special group to grant access to. Possible values include:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "specialGroup")]
    pub special_group: Option<String>,
    /// An email address of a user to grant access to. For example:
    /// fred@example.com
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userByEmail")]
    pub user_by_email: Option<String>,
    /// Reference to a ServiceAccount in cloudplatform to populate userByEmail.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userByEmailRef")]
    pub user_by_email_ref: Option<DatasetForProviderAccessUserByEmailRef>,
    /// Selector for a ServiceAccount in cloudplatform to populate userByEmail.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userByEmailSelector")]
    pub user_by_email_selector: Option<DatasetForProviderAccessUserByEmailSelector>,
    /// A view from a different dataset to grant access to. Queries
    /// executed against that view will have read access to tables in
    /// this dataset. The role field is not required when this field is
    /// set. If that view is updated by any user, access to the view
    /// needs to be granted again via an update operation.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub view: Option<DatasetForProviderAccessView>,
}

/// Grants all resources of particular types in a particular dataset read access to the current dataset.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessDataset {
    /// The dataset this entry applies to
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dataset: Option<DatasetForProviderAccessDatasetDataset>,
    /// Which resources in the dataset this entry applies to. Currently, only views are supported,
    /// but additional target types may be added in the future. Possible values: VIEWS
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetTypes")]
    pub target_types: Option<Vec<String>>,
}

/// The dataset this entry applies to
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessDatasetDataset {
    /// The ID of the dataset containing this table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetId")]
    pub dataset_id: Option<String>,
    /// Reference to a Dataset in bigquery to populate datasetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetIdRef")]
    pub dataset_id_ref: Option<DatasetForProviderAccessDatasetDatasetDatasetIdRef>,
    /// Selector for a Dataset in bigquery to populate datasetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetIdSelector")]
    pub dataset_id_selector: Option<DatasetForProviderAccessDatasetDatasetDatasetIdSelector>,
    /// The ID of the project containing this table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
}

/// Reference to a Dataset in bigquery to populate datasetId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessDatasetDatasetDatasetIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetForProviderAccessDatasetDatasetDatasetIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessDatasetDatasetDatasetIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetForProviderAccessDatasetDatasetDatasetIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetForProviderAccessDatasetDatasetDatasetIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessDatasetDatasetDatasetIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessDatasetDatasetDatasetIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Dataset in bigquery to populate datasetId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessDatasetDatasetDatasetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetForProviderAccessDatasetDatasetDatasetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessDatasetDatasetDatasetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetForProviderAccessDatasetDatasetDatasetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetForProviderAccessDatasetDatasetDatasetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessDatasetDatasetDatasetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessDatasetDatasetDatasetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A routine from a different dataset to grant access to. Queries
/// executed against that routine will have read access to tables in
/// this dataset. The role field is not required when this field is
/// set. If that routine is updated by any user, access to the routine
/// needs to be granted again via an update operation.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessRoutine {
    /// The ID of the dataset containing this table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetId")]
    pub dataset_id: Option<String>,
    /// Reference to a Routine in bigquery to populate datasetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetIdRef")]
    pub dataset_id_ref: Option<DatasetForProviderAccessRoutineDatasetIdRef>,
    /// Selector for a Routine in bigquery to populate datasetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetIdSelector")]
    pub dataset_id_selector: Option<DatasetForProviderAccessRoutineDatasetIdSelector>,
    /// The ID of the project containing this table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    /// Reference to a Routine in bigquery to populate projectId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectIdRef")]
    pub project_id_ref: Option<DatasetForProviderAccessRoutineProjectIdRef>,
    /// Selector for a Routine in bigquery to populate projectId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectIdSelector")]
    pub project_id_selector: Option<DatasetForProviderAccessRoutineProjectIdSelector>,
    /// The ID of the routine. The ID must contain only letters (a-z,
    /// A-Z), numbers (0-9), or underscores (_). The maximum length
    /// is 256 characters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routineId")]
    pub routine_id: Option<String>,
    /// Reference to a Routine in bigquery to populate routineId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routineIdRef")]
    pub routine_id_ref: Option<DatasetForProviderAccessRoutineRoutineIdRef>,
    /// Selector for a Routine in bigquery to populate routineId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routineIdSelector")]
    pub routine_id_selector: Option<DatasetForProviderAccessRoutineRoutineIdSelector>,
}

/// Reference to a Routine in bigquery to populate datasetId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessRoutineDatasetIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetForProviderAccessRoutineDatasetIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessRoutineDatasetIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetForProviderAccessRoutineDatasetIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetForProviderAccessRoutineDatasetIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessRoutineDatasetIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessRoutineDatasetIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Routine in bigquery to populate datasetId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessRoutineDatasetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetForProviderAccessRoutineDatasetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessRoutineDatasetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetForProviderAccessRoutineDatasetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetForProviderAccessRoutineDatasetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessRoutineDatasetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessRoutineDatasetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Routine in bigquery to populate projectId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessRoutineProjectIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetForProviderAccessRoutineProjectIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessRoutineProjectIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetForProviderAccessRoutineProjectIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetForProviderAccessRoutineProjectIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessRoutineProjectIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessRoutineProjectIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Routine in bigquery to populate projectId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessRoutineProjectIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetForProviderAccessRoutineProjectIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessRoutineProjectIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetForProviderAccessRoutineProjectIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetForProviderAccessRoutineProjectIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessRoutineProjectIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessRoutineProjectIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Routine in bigquery to populate routineId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessRoutineRoutineIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetForProviderAccessRoutineRoutineIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessRoutineRoutineIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetForProviderAccessRoutineRoutineIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetForProviderAccessRoutineRoutineIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessRoutineRoutineIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessRoutineRoutineIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Routine in bigquery to populate routineId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessRoutineRoutineIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetForProviderAccessRoutineRoutineIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessRoutineRoutineIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetForProviderAccessRoutineRoutineIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetForProviderAccessRoutineRoutineIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessRoutineRoutineIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessRoutineRoutineIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a ServiceAccount in cloudplatform to populate userByEmail.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessUserByEmailRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetForProviderAccessUserByEmailRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessUserByEmailRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetForProviderAccessUserByEmailRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetForProviderAccessUserByEmailRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessUserByEmailRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessUserByEmailRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ServiceAccount in cloudplatform to populate userByEmail.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessUserByEmailSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetForProviderAccessUserByEmailSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessUserByEmailSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetForProviderAccessUserByEmailSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetForProviderAccessUserByEmailSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessUserByEmailSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderAccessUserByEmailSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A view from a different dataset to grant access to. Queries
/// executed against that view will have read access to tables in
/// this dataset. The role field is not required when this field is
/// set. If that view is updated by any user, access to the view
/// needs to be granted again via an update operation.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderAccessView {
    /// The ID of the dataset containing this table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetId")]
    pub dataset_id: Option<String>,
    /// The ID of the project containing this table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    /// The ID of the table. The ID must contain only letters (a-z,
    /// A-Z), numbers (0-9), or underscores (_). The maximum length
    /// is 1,024 characters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableId")]
    pub table_id: Option<String>,
}

/// The default encryption key for all tables in the dataset. Once this property is set,
/// all newly-created partitioned tables in the dataset will have encryption key set to
/// this value, unless table creation request (or query) overrides the key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderDefaultEncryptionConfiguration {
    /// Describes the Cloud KMS encryption key that will be used to protect destination
    /// BigQuery table. The BigQuery Service Account associated with your project requires
    /// access to this encryption key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    pub kms_key_name: Option<String>,
    /// Reference to a CryptoKey in kms to populate kmsKeyName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyNameRef")]
    pub kms_key_name_ref: Option<DatasetForProviderDefaultEncryptionConfigurationKmsKeyNameRef>,
    /// Selector for a CryptoKey in kms to populate kmsKeyName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyNameSelector")]
    pub kms_key_name_selector: Option<DatasetForProviderDefaultEncryptionConfigurationKmsKeyNameSelector>,
}

/// Reference to a CryptoKey in kms to populate kmsKeyName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderDefaultEncryptionConfigurationKmsKeyNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetForProviderDefaultEncryptionConfigurationKmsKeyNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderDefaultEncryptionConfigurationKmsKeyNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetForProviderDefaultEncryptionConfigurationKmsKeyNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetForProviderDefaultEncryptionConfigurationKmsKeyNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderDefaultEncryptionConfigurationKmsKeyNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderDefaultEncryptionConfigurationKmsKeyNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CryptoKey in kms to populate kmsKeyName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderDefaultEncryptionConfigurationKmsKeyNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetForProviderDefaultEncryptionConfigurationKmsKeyNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderDefaultEncryptionConfigurationKmsKeyNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetForProviderDefaultEncryptionConfigurationKmsKeyNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetForProviderDefaultEncryptionConfigurationKmsKeyNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderDefaultEncryptionConfigurationKmsKeyNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetForProviderDefaultEncryptionConfigurationKmsKeyNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Information about the external metadata storage where the dataset is defined.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetForProviderExternalDatasetReference {
    /// The connection id that is used to access the externalSource.
    /// Format: projects/{projectId}/locations/{locationId}/connections/{connectionId}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<String>,
    /// External source that backs this dataset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalSource")]
    pub external_source: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProvider {
    /// An array of objects that define dataset access for one or more entities.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access: Option<Vec<DatasetInitProviderAccess>>,
    /// Defines the default collation specification of future tables created
    /// in the dataset. If a table is created in this dataset without table-level
    /// default collation, then the table inherits the dataset default collation,
    /// which is applied to the string fields that do not have explicit collation
    /// specified. A change to this field affects only tables created afterwards,
    /// and does not alter the existing tables.
    /// The following values are supported:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultCollation")]
    pub default_collation: Option<String>,
    /// The default encryption key for all tables in the dataset. Once this property is set,
    /// all newly-created partitioned tables in the dataset will have encryption key set to
    /// this value, unless table creation request (or query) overrides the key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultEncryptionConfiguration")]
    pub default_encryption_configuration: Option<DatasetInitProviderDefaultEncryptionConfiguration>,
    /// The default partition expiration for all partitioned tables in
    /// the dataset, in milliseconds.
    /// Once this property is set, all newly-created partitioned tables in
    /// the dataset will have an expirationMs property in the timePartitioning
    /// settings set to this value, and changing the value will only
    /// affect new tables, not existing ones. The storage in a partition will
    /// have an expiration time of its partition time plus this value.
    /// Setting this property overrides the use of defaultTableExpirationMs
    /// for partitioned tables: only one of defaultTableExpirationMs and
    /// defaultPartitionExpirationMs will be used for any new partitioned
    /// table. If you provide an explicit timePartitioning.expirationMs when
    /// creating or updating a partitioned table, that value takes precedence
    /// over the default partition expiration time indicated by this property.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultPartitionExpirationMs")]
    pub default_partition_expiration_ms: Option<f64>,
    /// The default lifetime of all tables in the dataset, in milliseconds.
    /// The minimum value is 3600000 milliseconds (one hour).
    /// Once this property is set, all newly-created tables in the dataset
    /// will have an expirationTime property set to the creation time plus
    /// the value in this property, and changing the value will only affect
    /// new tables, not existing ones. When the expirationTime for a given
    /// table is reached, that table will be deleted automatically.
    /// If a table's expirationTime is modified or removed before the
    /// table expires, or if you provide an explicit expirationTime when
    /// creating a table, that value takes precedence over the default
    /// expiration time indicated by this property.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTableExpirationMs")]
    pub default_table_expiration_ms: Option<f64>,
    /// If set to true, delete all the tables in the
    /// dataset when destroying the resource; otherwise,
    /// destroying the resource will fail if tables are present.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteContentsOnDestroy")]
    pub delete_contents_on_destroy: Option<bool>,
    /// A user-friendly description of the dataset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Information about the external metadata storage where the dataset is defined.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalDatasetReference")]
    pub external_dataset_reference: Option<DatasetInitProviderExternalDatasetReference>,
    /// A descriptive name for the dataset
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "friendlyName")]
    pub friendly_name: Option<String>,
    /// TRUE if the dataset and its table names are case-insensitive, otherwise FALSE.
    /// By default, this is FALSE, which means the dataset and its table names are
    /// case-sensitive. This field does not affect routine references.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isCaseInsensitive")]
    pub is_case_insensitive: Option<bool>,
    /// The labels associated with this dataset. You can use these to
    /// organize and group your datasets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The geographic location where the dataset should reside.
    /// See official docs.
    /// There are two types of locations, regional or multi-regional. A regional
    /// location is a specific geographic place, such as Tokyo, and a multi-regional
    /// location is a large geographic area, such as the United States, that
    /// contains at least two geographic places.
    /// The default value is multi-regional location US.
    /// Changing this forces a new resource to be created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Defines the time travel window in hours. The value can be from 48 to 168 hours (2 to 7 days).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTimeTravelHours")]
    pub max_time_travel_hours: Option<String>,
    /// The tags attached to this table. Tag keys are globally unique. Tag key is expected to be
    /// in the namespaced format, for example "123456789012/environment" where 123456789012 is the
    /// ID of the parent organization or project resource for this tag key. Tag value is expected
    /// to be the short name, for example "Production". See Tag definitions
    /// for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceTags")]
    pub resource_tags: Option<HashMap<String, String>>,
    /// Specifies the storage billing model for the dataset.
    /// Set this flag value to LOGICAL to use logical bytes for storage billing,
    /// or to PHYSICAL to use physical bytes instead.
    /// LOGICAL is the default if this flag isn't specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageBillingModel")]
    pub storage_billing_model: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccess {
    /// Grants all resources of particular types in a particular dataset read access to the current dataset.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dataset: Option<DatasetInitProviderAccessDataset>,
    /// A domain to grant access to. Any users signed in with the
    /// domain specified will be granted the specified access
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// An email address of a Google Group to grant access to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupByEmail")]
    pub group_by_email: Option<String>,
    /// Some other type of member that appears in the IAM Policy but isn't a user,
    /// group, domain, or special group. For example: allUsers
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamMember")]
    pub iam_member: Option<String>,
    /// Describes the rights granted to the user specified by the other
    /// member of the access object. Basic, predefined, and custom roles
    /// are supported. Predefined roles that have equivalent basic roles
    /// are swapped by the API to their basic counterparts. See
    /// official docs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// A routine from a different dataset to grant access to. Queries
    /// executed against that routine will have read access to tables in
    /// this dataset. The role field is not required when this field is
    /// set. If that routine is updated by any user, access to the routine
    /// needs to be granted again via an update operation.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routine: Option<DatasetInitProviderAccessRoutine>,
    /// A special group to grant access to. Possible values include:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "specialGroup")]
    pub special_group: Option<String>,
    /// An email address of a user to grant access to. For example:
    /// fred@example.com
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userByEmail")]
    pub user_by_email: Option<String>,
    /// Reference to a ServiceAccount in cloudplatform to populate userByEmail.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userByEmailRef")]
    pub user_by_email_ref: Option<DatasetInitProviderAccessUserByEmailRef>,
    /// Selector for a ServiceAccount in cloudplatform to populate userByEmail.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userByEmailSelector")]
    pub user_by_email_selector: Option<DatasetInitProviderAccessUserByEmailSelector>,
    /// A view from a different dataset to grant access to. Queries
    /// executed against that view will have read access to tables in
    /// this dataset. The role field is not required when this field is
    /// set. If that view is updated by any user, access to the view
    /// needs to be granted again via an update operation.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub view: Option<DatasetInitProviderAccessView>,
}

/// Grants all resources of particular types in a particular dataset read access to the current dataset.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessDataset {
    /// The dataset this entry applies to
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dataset: Option<DatasetInitProviderAccessDatasetDataset>,
    /// Which resources in the dataset this entry applies to. Currently, only views are supported,
    /// but additional target types may be added in the future. Possible values: VIEWS
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetTypes")]
    pub target_types: Option<Vec<String>>,
}

/// The dataset this entry applies to
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessDatasetDataset {
    /// The ID of the dataset containing this table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetId")]
    pub dataset_id: Option<String>,
    /// Reference to a Dataset in bigquery to populate datasetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetIdRef")]
    pub dataset_id_ref: Option<DatasetInitProviderAccessDatasetDatasetDatasetIdRef>,
    /// Selector for a Dataset in bigquery to populate datasetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetIdSelector")]
    pub dataset_id_selector: Option<DatasetInitProviderAccessDatasetDatasetDatasetIdSelector>,
    /// The ID of the project containing this table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
}

/// Reference to a Dataset in bigquery to populate datasetId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessDatasetDatasetDatasetIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetInitProviderAccessDatasetDatasetDatasetIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessDatasetDatasetDatasetIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetInitProviderAccessDatasetDatasetDatasetIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetInitProviderAccessDatasetDatasetDatasetIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessDatasetDatasetDatasetIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessDatasetDatasetDatasetIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Dataset in bigquery to populate datasetId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessDatasetDatasetDatasetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetInitProviderAccessDatasetDatasetDatasetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessDatasetDatasetDatasetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetInitProviderAccessDatasetDatasetDatasetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetInitProviderAccessDatasetDatasetDatasetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessDatasetDatasetDatasetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessDatasetDatasetDatasetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A routine from a different dataset to grant access to. Queries
/// executed against that routine will have read access to tables in
/// this dataset. The role field is not required when this field is
/// set. If that routine is updated by any user, access to the routine
/// needs to be granted again via an update operation.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessRoutine {
    /// The ID of the dataset containing this table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetId")]
    pub dataset_id: Option<String>,
    /// Reference to a Routine in bigquery to populate datasetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetIdRef")]
    pub dataset_id_ref: Option<DatasetInitProviderAccessRoutineDatasetIdRef>,
    /// Selector for a Routine in bigquery to populate datasetId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetIdSelector")]
    pub dataset_id_selector: Option<DatasetInitProviderAccessRoutineDatasetIdSelector>,
    /// The ID of the project containing this table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    /// Reference to a Routine in bigquery to populate projectId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectIdRef")]
    pub project_id_ref: Option<DatasetInitProviderAccessRoutineProjectIdRef>,
    /// Selector for a Routine in bigquery to populate projectId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectIdSelector")]
    pub project_id_selector: Option<DatasetInitProviderAccessRoutineProjectIdSelector>,
    /// The ID of the routine. The ID must contain only letters (a-z,
    /// A-Z), numbers (0-9), or underscores (_). The maximum length
    /// is 256 characters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routineId")]
    pub routine_id: Option<String>,
    /// Reference to a Routine in bigquery to populate routineId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routineIdRef")]
    pub routine_id_ref: Option<DatasetInitProviderAccessRoutineRoutineIdRef>,
    /// Selector for a Routine in bigquery to populate routineId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routineIdSelector")]
    pub routine_id_selector: Option<DatasetInitProviderAccessRoutineRoutineIdSelector>,
}

/// Reference to a Routine in bigquery to populate datasetId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessRoutineDatasetIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetInitProviderAccessRoutineDatasetIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessRoutineDatasetIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetInitProviderAccessRoutineDatasetIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetInitProviderAccessRoutineDatasetIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessRoutineDatasetIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessRoutineDatasetIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Routine in bigquery to populate datasetId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessRoutineDatasetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetInitProviderAccessRoutineDatasetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessRoutineDatasetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetInitProviderAccessRoutineDatasetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetInitProviderAccessRoutineDatasetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessRoutineDatasetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessRoutineDatasetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Routine in bigquery to populate projectId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessRoutineProjectIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetInitProviderAccessRoutineProjectIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessRoutineProjectIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetInitProviderAccessRoutineProjectIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetInitProviderAccessRoutineProjectIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessRoutineProjectIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessRoutineProjectIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Routine in bigquery to populate projectId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessRoutineProjectIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetInitProviderAccessRoutineProjectIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessRoutineProjectIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetInitProviderAccessRoutineProjectIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetInitProviderAccessRoutineProjectIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessRoutineProjectIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessRoutineProjectIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Routine in bigquery to populate routineId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessRoutineRoutineIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetInitProviderAccessRoutineRoutineIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessRoutineRoutineIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetInitProviderAccessRoutineRoutineIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetInitProviderAccessRoutineRoutineIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessRoutineRoutineIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessRoutineRoutineIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Routine in bigquery to populate routineId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessRoutineRoutineIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetInitProviderAccessRoutineRoutineIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessRoutineRoutineIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetInitProviderAccessRoutineRoutineIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetInitProviderAccessRoutineRoutineIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessRoutineRoutineIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessRoutineRoutineIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a ServiceAccount in cloudplatform to populate userByEmail.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessUserByEmailRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetInitProviderAccessUserByEmailRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessUserByEmailRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetInitProviderAccessUserByEmailRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetInitProviderAccessUserByEmailRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessUserByEmailRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessUserByEmailRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ServiceAccount in cloudplatform to populate userByEmail.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessUserByEmailSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetInitProviderAccessUserByEmailSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessUserByEmailSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetInitProviderAccessUserByEmailSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetInitProviderAccessUserByEmailSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessUserByEmailSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderAccessUserByEmailSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A view from a different dataset to grant access to. Queries
/// executed against that view will have read access to tables in
/// this dataset. The role field is not required when this field is
/// set. If that view is updated by any user, access to the view
/// needs to be granted again via an update operation.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderAccessView {
    /// The ID of the dataset containing this table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetId")]
    pub dataset_id: Option<String>,
    /// The ID of the project containing this table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    /// The ID of the table. The ID must contain only letters (a-z,
    /// A-Z), numbers (0-9), or underscores (_). The maximum length
    /// is 1,024 characters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableId")]
    pub table_id: Option<String>,
}

/// The default encryption key for all tables in the dataset. Once this property is set,
/// all newly-created partitioned tables in the dataset will have encryption key set to
/// this value, unless table creation request (or query) overrides the key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderDefaultEncryptionConfiguration {
    /// Describes the Cloud KMS encryption key that will be used to protect destination
    /// BigQuery table. The BigQuery Service Account associated with your project requires
    /// access to this encryption key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    pub kms_key_name: Option<String>,
    /// Reference to a CryptoKey in kms to populate kmsKeyName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyNameRef")]
    pub kms_key_name_ref: Option<DatasetInitProviderDefaultEncryptionConfigurationKmsKeyNameRef>,
    /// Selector for a CryptoKey in kms to populate kmsKeyName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyNameSelector")]
    pub kms_key_name_selector: Option<DatasetInitProviderDefaultEncryptionConfigurationKmsKeyNameSelector>,
}

/// Reference to a CryptoKey in kms to populate kmsKeyName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderDefaultEncryptionConfigurationKmsKeyNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetInitProviderDefaultEncryptionConfigurationKmsKeyNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderDefaultEncryptionConfigurationKmsKeyNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetInitProviderDefaultEncryptionConfigurationKmsKeyNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetInitProviderDefaultEncryptionConfigurationKmsKeyNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderDefaultEncryptionConfigurationKmsKeyNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderDefaultEncryptionConfigurationKmsKeyNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CryptoKey in kms to populate kmsKeyName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderDefaultEncryptionConfigurationKmsKeyNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetInitProviderDefaultEncryptionConfigurationKmsKeyNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderDefaultEncryptionConfigurationKmsKeyNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetInitProviderDefaultEncryptionConfigurationKmsKeyNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetInitProviderDefaultEncryptionConfigurationKmsKeyNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderDefaultEncryptionConfigurationKmsKeyNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetInitProviderDefaultEncryptionConfigurationKmsKeyNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Information about the external metadata storage where the dataset is defined.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetInitProviderExternalDatasetReference {
    /// The connection id that is used to access the externalSource.
    /// Format: projects/{projectId}/locations/{locationId}/connections/{connectionId}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<String>,
    /// External source that backs this dataset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalSource")]
    pub external_source: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<DatasetPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<DatasetPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasetPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasetPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasetPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasetPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// DatasetStatus defines the observed state of Dataset.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<DatasetStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetStatusAtProvider {
    /// An array of objects that define dataset access for one or more entities.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub access: Option<Vec<DatasetStatusAtProviderAccess>>,
    /// The time when this dataset was created, in milliseconds since the
    /// epoch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTime")]
    pub creation_time: Option<f64>,
    /// Defines the default collation specification of future tables created
    /// in the dataset. If a table is created in this dataset without table-level
    /// default collation, then the table inherits the dataset default collation,
    /// which is applied to the string fields that do not have explicit collation
    /// specified. A change to this field affects only tables created afterwards,
    /// and does not alter the existing tables.
    /// The following values are supported:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultCollation")]
    pub default_collation: Option<String>,
    /// The default encryption key for all tables in the dataset. Once this property is set,
    /// all newly-created partitioned tables in the dataset will have encryption key set to
    /// this value, unless table creation request (or query) overrides the key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultEncryptionConfiguration")]
    pub default_encryption_configuration: Option<DatasetStatusAtProviderDefaultEncryptionConfiguration>,
    /// The default partition expiration for all partitioned tables in
    /// the dataset, in milliseconds.
    /// Once this property is set, all newly-created partitioned tables in
    /// the dataset will have an expirationMs property in the timePartitioning
    /// settings set to this value, and changing the value will only
    /// affect new tables, not existing ones. The storage in a partition will
    /// have an expiration time of its partition time plus this value.
    /// Setting this property overrides the use of defaultTableExpirationMs
    /// for partitioned tables: only one of defaultTableExpirationMs and
    /// defaultPartitionExpirationMs will be used for any new partitioned
    /// table. If you provide an explicit timePartitioning.expirationMs when
    /// creating or updating a partitioned table, that value takes precedence
    /// over the default partition expiration time indicated by this property.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultPartitionExpirationMs")]
    pub default_partition_expiration_ms: Option<f64>,
    /// The default lifetime of all tables in the dataset, in milliseconds.
    /// The minimum value is 3600000 milliseconds (one hour).
    /// Once this property is set, all newly-created tables in the dataset
    /// will have an expirationTime property set to the creation time plus
    /// the value in this property, and changing the value will only affect
    /// new tables, not existing ones. When the expirationTime for a given
    /// table is reached, that table will be deleted automatically.
    /// If a table's expirationTime is modified or removed before the
    /// table expires, or if you provide an explicit expirationTime when
    /// creating a table, that value takes precedence over the default
    /// expiration time indicated by this property.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTableExpirationMs")]
    pub default_table_expiration_ms: Option<f64>,
    /// If set to true, delete all the tables in the
    /// dataset when destroying the resource; otherwise,
    /// destroying the resource will fail if tables are present.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteContentsOnDestroy")]
    pub delete_contents_on_destroy: Option<bool>,
    /// A user-friendly description of the dataset
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// A hash of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// Information about the external metadata storage where the dataset is defined.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalDatasetReference")]
    pub external_dataset_reference: Option<DatasetStatusAtProviderExternalDatasetReference>,
    /// A descriptive name for the dataset
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "friendlyName")]
    pub friendly_name: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/datasets/{{dataset_id}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// TRUE if the dataset and its table names are case-insensitive, otherwise FALSE.
    /// By default, this is FALSE, which means the dataset and its table names are
    /// case-sensitive. This field does not affect routine references.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isCaseInsensitive")]
    pub is_case_insensitive: Option<bool>,
    /// The labels associated with this dataset. You can use these to
    /// organize and group your datasets.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The date when this dataset or any of its tables was last modified, in
    /// milliseconds since the epoch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastModifiedTime")]
    pub last_modified_time: Option<f64>,
    /// The geographic location where the dataset should reside.
    /// See official docs.
    /// There are two types of locations, regional or multi-regional. A regional
    /// location is a specific geographic place, such as Tokyo, and a multi-regional
    /// location is a large geographic area, such as the United States, that
    /// contains at least two geographic places.
    /// The default value is multi-regional location US.
    /// Changing this forces a new resource to be created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Defines the time travel window in hours. The value can be from 48 to 168 hours (2 to 7 days).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTimeTravelHours")]
    pub max_time_travel_hours: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The tags attached to this table. Tag keys are globally unique. Tag key is expected to be
    /// in the namespaced format, for example "123456789012/environment" where 123456789012 is the
    /// ID of the parent organization or project resource for this tag key. Tag value is expected
    /// to be the short name, for example "Production". See Tag definitions
    /// for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceTags")]
    pub resource_tags: Option<HashMap<String, String>>,
    /// The URI of the created resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    pub self_link: Option<String>,
    /// Specifies the storage billing model for the dataset.
    /// Set this flag value to LOGICAL to use logical bytes for storage billing,
    /// or to PHYSICAL to use physical bytes instead.
    /// LOGICAL is the default if this flag isn't specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageBillingModel")]
    pub storage_billing_model: Option<String>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetStatusAtProviderAccess {
    /// Grants all resources of particular types in a particular dataset read access to the current dataset.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dataset: Option<DatasetStatusAtProviderAccessDataset>,
    /// A domain to grant access to. Any users signed in with the
    /// domain specified will be granted the specified access
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// An email address of a Google Group to grant access to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupByEmail")]
    pub group_by_email: Option<String>,
    /// Some other type of member that appears in the IAM Policy but isn't a user,
    /// group, domain, or special group. For example: allUsers
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamMember")]
    pub iam_member: Option<String>,
    /// Describes the rights granted to the user specified by the other
    /// member of the access object. Basic, predefined, and custom roles
    /// are supported. Predefined roles that have equivalent basic roles
    /// are swapped by the API to their basic counterparts. See
    /// official docs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,
    /// A routine from a different dataset to grant access to. Queries
    /// executed against that routine will have read access to tables in
    /// this dataset. The role field is not required when this field is
    /// set. If that routine is updated by any user, access to the routine
    /// needs to be granted again via an update operation.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub routine: Option<DatasetStatusAtProviderAccessRoutine>,
    /// A special group to grant access to. Possible values include:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "specialGroup")]
    pub special_group: Option<String>,
    /// An email address of a user to grant access to. For example:
    /// fred@example.com
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userByEmail")]
    pub user_by_email: Option<String>,
    /// A view from a different dataset to grant access to. Queries
    /// executed against that view will have read access to tables in
    /// this dataset. The role field is not required when this field is
    /// set. If that view is updated by any user, access to the view
    /// needs to be granted again via an update operation.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub view: Option<DatasetStatusAtProviderAccessView>,
}

/// Grants all resources of particular types in a particular dataset read access to the current dataset.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetStatusAtProviderAccessDataset {
    /// The dataset this entry applies to
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dataset: Option<DatasetStatusAtProviderAccessDatasetDataset>,
    /// Which resources in the dataset this entry applies to. Currently, only views are supported,
    /// but additional target types may be added in the future. Possible values: VIEWS
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetTypes")]
    pub target_types: Option<Vec<String>>,
}

/// The dataset this entry applies to
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetStatusAtProviderAccessDatasetDataset {
    /// The ID of the dataset containing this table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetId")]
    pub dataset_id: Option<String>,
    /// The ID of the project containing this table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
}

/// A routine from a different dataset to grant access to. Queries
/// executed against that routine will have read access to tables in
/// this dataset. The role field is not required when this field is
/// set. If that routine is updated by any user, access to the routine
/// needs to be granted again via an update operation.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetStatusAtProviderAccessRoutine {
    /// The ID of the dataset containing this table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetId")]
    pub dataset_id: Option<String>,
    /// The ID of the project containing this table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    /// The ID of the routine. The ID must contain only letters (a-z,
    /// A-Z), numbers (0-9), or underscores (_). The maximum length
    /// is 256 characters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routineId")]
    pub routine_id: Option<String>,
}

/// A view from a different dataset to grant access to. Queries
/// executed against that view will have read access to tables in
/// this dataset. The role field is not required when this field is
/// set. If that view is updated by any user, access to the view
/// needs to be granted again via an update operation.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetStatusAtProviderAccessView {
    /// The ID of the dataset containing this table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datasetId")]
    pub dataset_id: Option<String>,
    /// The ID of the project containing this table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    /// The ID of the table. The ID must contain only letters (a-z,
    /// A-Z), numbers (0-9), or underscores (_). The maximum length
    /// is 1,024 characters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableId")]
    pub table_id: Option<String>,
}

/// The default encryption key for all tables in the dataset. Once this property is set,
/// all newly-created partitioned tables in the dataset will have encryption key set to
/// this value, unless table creation request (or query) overrides the key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetStatusAtProviderDefaultEncryptionConfiguration {
    /// Describes the Cloud KMS encryption key that will be used to protect destination
    /// BigQuery table. The BigQuery Service Account associated with your project requires
    /// access to this encryption key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    pub kms_key_name: Option<String>,
}

/// Information about the external metadata storage where the dataset is defined.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasetStatusAtProviderExternalDatasetReference {
    /// The connection id that is used to access the externalSource.
    /// Format: projects/{projectId}/locations/{locationId}/connections/{connectionId}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connection: Option<String>,
    /// External source that backs this dataset.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalSource")]
    pub external_source: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ConnectionSpec defines the desired state of Connection
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "bigquery.gcp.upbound.io", version = "v1beta2", kind = "Connection", plural = "connections")]
#[kube(status = "ConnectionStatus")]
pub struct ConnectionSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<ConnectionDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ConnectionForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<ConnectionInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<ConnectionProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<ConnectionPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<ConnectionWriteConnectionSecretToRef>,
}

/// ConnectionSpec defines the desired state of Connection
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProvider {
    /// Connection properties specific to Amazon Web Services.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<ConnectionForProviderAws>,
    /// Container for connection properties specific to Azure.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<ConnectionForProviderAzure>,
    /// Container for connection properties for delegation of access to GCP resources.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudResource")]
    pub cloud_resource: Option<ConnectionForProviderCloudResource>,
    /// Connection properties specific to Cloud Spanner
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudSpanner")]
    pub cloud_spanner: Option<ConnectionForProviderCloudSpanner>,
    /// Connection properties specific to the Cloud SQL.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudSql")]
    pub cloud_sql: Option<ConnectionForProviderCloudSql>,
    /// Optional connection id that should be assigned to the created connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionId")]
    pub connection_id: Option<String>,
    /// A descriptive description for the connection
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// A descriptive name for the connection
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "friendlyName")]
    pub friendly_name: Option<String>,
    /// Optional. The Cloud KMS key that is used for encryption.
    /// Example: projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    pub kms_key_name: Option<String>,
    /// The geographic location where the connection should reside.
    /// Cloud SQL instance must be in the same location as the connection
    /// with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
    /// Examples: US, EU, asia-northeast1, us-central1, europe-west1.
    /// Spanner Connections same as spanner region
    /// AWS allowed regions are aws-us-east-1
    /// Azure allowed regions are azure-eastus2
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Container for connection properties to execute stored procedures for Apache Spark. resources.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spark: Option<ConnectionForProviderSpark>,
}

/// Connection properties specific to Amazon Web Services.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAws {
    /// Authentication using Google owned service account to assume into customer's AWS IAM Role.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessRole")]
    pub access_role: Option<ConnectionForProviderAwsAccessRole>,
}

/// Authentication using Google owned service account to assume into customer's AWS IAM Role.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAwsAccessRole {
    /// The userâ€™s AWS IAM Role that trusts the Google-owned AWS IAM user Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleId")]
    pub iam_role_id: Option<String>,
}

/// Container for connection properties specific to Azure.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAzure {
    /// The id of customer's directory that host the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerTenantId")]
    pub customer_tenant_id: Option<String>,
    /// The Azure Application (client) ID where the federated credentials will be hosted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "federatedApplicationClientId")]
    pub federated_application_client_id: Option<String>,
}

/// Container for connection properties for delegation of access to GCP resources.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderCloudResource {
}

/// Connection properties specific to Cloud Spanner
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderCloudSpanner {
    /// Cloud Spanner database in the form `project/instance/database'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    /// Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as SELECT and INSERT. Other users should only use roles provided by their Cloud Spanner admins. The database role name must start with a letter, and can only contain letters, numbers, and underscores. For more details, see https://cloud.google.com/spanner/docs/fgac-about.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseRole")]
    pub database_role: Option<String>,
    /// Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. useParallelism and useDataBoost must be set when setting max parallelism.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxParallelism")]
    pub max_parallelism: Option<f64>,
    /// If set, the request will be executed via Spanner independent compute resources. use_parallelism must be set when using data boost.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useDataBoost")]
    pub use_data_boost: Option<bool>,
    /// If parallelism should be used when reading from Cloud Spanner.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useParallelism")]
    pub use_parallelism: Option<bool>,
    /// If the serverless analytics service should be used to read data from Cloud Spanner. useParallelism must be set when using serverless analytics.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useServerlessAnalytics")]
    pub use_serverless_analytics: Option<bool>,
}

/// Connection properties specific to the Cloud SQL.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderCloudSql {
    /// Cloud SQL properties.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credential: Option<ConnectionForProviderCloudSqlCredential>,
    /// Database name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    /// Reference to a Database in sql to populate database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseRef")]
    pub database_ref: Option<ConnectionForProviderCloudSqlDatabaseRef>,
    /// Selector for a Database in sql to populate database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseSelector")]
    pub database_selector: Option<ConnectionForProviderCloudSqlDatabaseSelector>,
    /// Cloud SQL instance ID in the form project:location:instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceId")]
    pub instance_id: Option<String>,
    /// Reference to a DatabaseInstance in sql to populate instanceId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceIdRef")]
    pub instance_id_ref: Option<ConnectionForProviderCloudSqlInstanceIdRef>,
    /// Selector for a DatabaseInstance in sql to populate instanceId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceIdSelector")]
    pub instance_id_selector: Option<ConnectionForProviderCloudSqlInstanceIdSelector>,
    /// Type of the Cloud SQL database.
    /// Possible values are: DATABASE_TYPE_UNSPECIFIED, POSTGRES, MYSQL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Cloud SQL properties.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderCloudSqlCredential {
    /// Password for database.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretRef")]
    pub password_secret_ref: Option<ConnectionForProviderCloudSqlCredentialPasswordSecretRef>,
    /// Username for database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    /// Reference to a User in sql to populate username.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usernameRef")]
    pub username_ref: Option<ConnectionForProviderCloudSqlCredentialUsernameRef>,
    /// Selector for a User in sql to populate username.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usernameSelector")]
    pub username_selector: Option<ConnectionForProviderCloudSqlCredentialUsernameSelector>,
}

/// Password for database.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderCloudSqlCredentialPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a User in sql to populate username.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderCloudSqlCredentialUsernameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionForProviderCloudSqlCredentialUsernameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderCloudSqlCredentialUsernameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionForProviderCloudSqlCredentialUsernameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionForProviderCloudSqlCredentialUsernameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionForProviderCloudSqlCredentialUsernameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionForProviderCloudSqlCredentialUsernameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a User in sql to populate username.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderCloudSqlCredentialUsernameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionForProviderCloudSqlCredentialUsernameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderCloudSqlCredentialUsernameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionForProviderCloudSqlCredentialUsernameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionForProviderCloudSqlCredentialUsernameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionForProviderCloudSqlCredentialUsernameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionForProviderCloudSqlCredentialUsernameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Database in sql to populate database.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderCloudSqlDatabaseRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionForProviderCloudSqlDatabaseRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderCloudSqlDatabaseRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionForProviderCloudSqlDatabaseRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionForProviderCloudSqlDatabaseRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionForProviderCloudSqlDatabaseRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionForProviderCloudSqlDatabaseRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Database in sql to populate database.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderCloudSqlDatabaseSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionForProviderCloudSqlDatabaseSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderCloudSqlDatabaseSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionForProviderCloudSqlDatabaseSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionForProviderCloudSqlDatabaseSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionForProviderCloudSqlDatabaseSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionForProviderCloudSqlDatabaseSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a DatabaseInstance in sql to populate instanceId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderCloudSqlInstanceIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionForProviderCloudSqlInstanceIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderCloudSqlInstanceIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionForProviderCloudSqlInstanceIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionForProviderCloudSqlInstanceIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionForProviderCloudSqlInstanceIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionForProviderCloudSqlInstanceIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a DatabaseInstance in sql to populate instanceId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderCloudSqlInstanceIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionForProviderCloudSqlInstanceIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderCloudSqlInstanceIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionForProviderCloudSqlInstanceIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionForProviderCloudSqlInstanceIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionForProviderCloudSqlInstanceIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionForProviderCloudSqlInstanceIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Container for connection properties to execute stored procedures for Apache Spark. resources.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderSpark {
    /// Dataproc Metastore Service configuration for the connection.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metastoreServiceConfig")]
    pub metastore_service_config: Option<ConnectionForProviderSparkMetastoreServiceConfig>,
    /// Spark History Server configuration for the connection.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sparkHistoryServerConfig")]
    pub spark_history_server_config: Option<ConnectionForProviderSparkSparkHistoryServerConfig>,
}

/// Dataproc Metastore Service configuration for the connection.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderSparkMetastoreServiceConfig {
    /// Resource name of an existing Dataproc Metastore service in the form of projects/[projectId]/locations/[region]/services/[serviceId].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metastoreService")]
    pub metastore_service: Option<String>,
}

/// Spark History Server configuration for the connection.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderSparkSparkHistoryServerConfig {
    /// Resource name of an existing Dataproc Cluster to act as a Spark History Server for the connection if the form of projects/[projectId]/regions/[region]/clusters/[cluster_name].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataprocCluster")]
    pub dataproc_cluster: Option<String>,
    /// Reference to a Cluster in dataproc to populate dataprocCluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataprocClusterRef")]
    pub dataproc_cluster_ref: Option<ConnectionForProviderSparkSparkHistoryServerConfigDataprocClusterRef>,
    /// Selector for a Cluster in dataproc to populate dataprocCluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataprocClusterSelector")]
    pub dataproc_cluster_selector: Option<ConnectionForProviderSparkSparkHistoryServerConfigDataprocClusterSelector>,
}

/// Reference to a Cluster in dataproc to populate dataprocCluster.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderSparkSparkHistoryServerConfigDataprocClusterRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionForProviderSparkSparkHistoryServerConfigDataprocClusterRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderSparkSparkHistoryServerConfigDataprocClusterRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionForProviderSparkSparkHistoryServerConfigDataprocClusterRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionForProviderSparkSparkHistoryServerConfigDataprocClusterRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionForProviderSparkSparkHistoryServerConfigDataprocClusterRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionForProviderSparkSparkHistoryServerConfigDataprocClusterRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Cluster in dataproc to populate dataprocCluster.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderSparkSparkHistoryServerConfigDataprocClusterSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionForProviderSparkSparkHistoryServerConfigDataprocClusterSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderSparkSparkHistoryServerConfigDataprocClusterSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionForProviderSparkSparkHistoryServerConfigDataprocClusterSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionForProviderSparkSparkHistoryServerConfigDataprocClusterSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionForProviderSparkSparkHistoryServerConfigDataprocClusterSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionForProviderSparkSparkHistoryServerConfigDataprocClusterSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProvider {
    /// Connection properties specific to Amazon Web Services.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<ConnectionInitProviderAws>,
    /// Container for connection properties specific to Azure.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<ConnectionInitProviderAzure>,
    /// Container for connection properties for delegation of access to GCP resources.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudResource")]
    pub cloud_resource: Option<ConnectionInitProviderCloudResource>,
    /// Connection properties specific to Cloud Spanner
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudSpanner")]
    pub cloud_spanner: Option<ConnectionInitProviderCloudSpanner>,
    /// Connection properties specific to the Cloud SQL.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudSql")]
    pub cloud_sql: Option<ConnectionInitProviderCloudSql>,
    /// Optional connection id that should be assigned to the created connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionId")]
    pub connection_id: Option<String>,
    /// A descriptive description for the connection
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// A descriptive name for the connection
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "friendlyName")]
    pub friendly_name: Option<String>,
    /// Optional. The Cloud KMS key that is used for encryption.
    /// Example: projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    pub kms_key_name: Option<String>,
    /// The geographic location where the connection should reside.
    /// Cloud SQL instance must be in the same location as the connection
    /// with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
    /// Examples: US, EU, asia-northeast1, us-central1, europe-west1.
    /// Spanner Connections same as spanner region
    /// AWS allowed regions are aws-us-east-1
    /// Azure allowed regions are azure-eastus2
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Container for connection properties to execute stored procedures for Apache Spark. resources.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spark: Option<ConnectionInitProviderSpark>,
}

/// Connection properties specific to Amazon Web Services.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAws {
    /// Authentication using Google owned service account to assume into customer's AWS IAM Role.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessRole")]
    pub access_role: Option<ConnectionInitProviderAwsAccessRole>,
}

/// Authentication using Google owned service account to assume into customer's AWS IAM Role.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAwsAccessRole {
    /// The userâ€™s AWS IAM Role that trusts the Google-owned AWS IAM user Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleId")]
    pub iam_role_id: Option<String>,
}

/// Container for connection properties specific to Azure.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAzure {
    /// The id of customer's directory that host the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerTenantId")]
    pub customer_tenant_id: Option<String>,
    /// The Azure Application (client) ID where the federated credentials will be hosted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "federatedApplicationClientId")]
    pub federated_application_client_id: Option<String>,
}

/// Container for connection properties for delegation of access to GCP resources.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderCloudResource {
}

/// Connection properties specific to Cloud Spanner
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderCloudSpanner {
    /// Cloud Spanner database in the form `project/instance/database'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    /// Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as SELECT and INSERT. Other users should only use roles provided by their Cloud Spanner admins. The database role name must start with a letter, and can only contain letters, numbers, and underscores. For more details, see https://cloud.google.com/spanner/docs/fgac-about.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseRole")]
    pub database_role: Option<String>,
    /// Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. useParallelism and useDataBoost must be set when setting max parallelism.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxParallelism")]
    pub max_parallelism: Option<f64>,
    /// If set, the request will be executed via Spanner independent compute resources. use_parallelism must be set when using data boost.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useDataBoost")]
    pub use_data_boost: Option<bool>,
    /// If parallelism should be used when reading from Cloud Spanner.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useParallelism")]
    pub use_parallelism: Option<bool>,
    /// If the serverless analytics service should be used to read data from Cloud Spanner. useParallelism must be set when using serverless analytics.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useServerlessAnalytics")]
    pub use_serverless_analytics: Option<bool>,
}

/// Connection properties specific to the Cloud SQL.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderCloudSql {
    /// Cloud SQL properties.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credential: Option<ConnectionInitProviderCloudSqlCredential>,
    /// Database name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    /// Reference to a Database in sql to populate database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseRef")]
    pub database_ref: Option<ConnectionInitProviderCloudSqlDatabaseRef>,
    /// Selector for a Database in sql to populate database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseSelector")]
    pub database_selector: Option<ConnectionInitProviderCloudSqlDatabaseSelector>,
    /// Cloud SQL instance ID in the form project:location:instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceId")]
    pub instance_id: Option<String>,
    /// Reference to a DatabaseInstance in sql to populate instanceId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceIdRef")]
    pub instance_id_ref: Option<ConnectionInitProviderCloudSqlInstanceIdRef>,
    /// Selector for a DatabaseInstance in sql to populate instanceId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceIdSelector")]
    pub instance_id_selector: Option<ConnectionInitProviderCloudSqlInstanceIdSelector>,
    /// Type of the Cloud SQL database.
    /// Possible values are: DATABASE_TYPE_UNSPECIFIED, POSTGRES, MYSQL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Cloud SQL properties.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderCloudSqlCredential {
    /// Password for database.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(rename = "passwordSecretRef")]
    pub password_secret_ref: ConnectionInitProviderCloudSqlCredentialPasswordSecretRef,
    /// Username for database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    /// Reference to a User in sql to populate username.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usernameRef")]
    pub username_ref: Option<ConnectionInitProviderCloudSqlCredentialUsernameRef>,
    /// Selector for a User in sql to populate username.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usernameSelector")]
    pub username_selector: Option<ConnectionInitProviderCloudSqlCredentialUsernameSelector>,
}

/// Password for database.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderCloudSqlCredentialPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a User in sql to populate username.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderCloudSqlCredentialUsernameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionInitProviderCloudSqlCredentialUsernameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderCloudSqlCredentialUsernameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionInitProviderCloudSqlCredentialUsernameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionInitProviderCloudSqlCredentialUsernameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionInitProviderCloudSqlCredentialUsernameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionInitProviderCloudSqlCredentialUsernameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a User in sql to populate username.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderCloudSqlCredentialUsernameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionInitProviderCloudSqlCredentialUsernameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderCloudSqlCredentialUsernameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionInitProviderCloudSqlCredentialUsernameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionInitProviderCloudSqlCredentialUsernameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionInitProviderCloudSqlCredentialUsernameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionInitProviderCloudSqlCredentialUsernameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Database in sql to populate database.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderCloudSqlDatabaseRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionInitProviderCloudSqlDatabaseRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderCloudSqlDatabaseRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionInitProviderCloudSqlDatabaseRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionInitProviderCloudSqlDatabaseRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionInitProviderCloudSqlDatabaseRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionInitProviderCloudSqlDatabaseRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Database in sql to populate database.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderCloudSqlDatabaseSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionInitProviderCloudSqlDatabaseSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderCloudSqlDatabaseSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionInitProviderCloudSqlDatabaseSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionInitProviderCloudSqlDatabaseSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionInitProviderCloudSqlDatabaseSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionInitProviderCloudSqlDatabaseSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a DatabaseInstance in sql to populate instanceId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderCloudSqlInstanceIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionInitProviderCloudSqlInstanceIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderCloudSqlInstanceIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionInitProviderCloudSqlInstanceIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionInitProviderCloudSqlInstanceIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionInitProviderCloudSqlInstanceIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionInitProviderCloudSqlInstanceIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a DatabaseInstance in sql to populate instanceId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderCloudSqlInstanceIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionInitProviderCloudSqlInstanceIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderCloudSqlInstanceIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionInitProviderCloudSqlInstanceIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionInitProviderCloudSqlInstanceIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionInitProviderCloudSqlInstanceIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionInitProviderCloudSqlInstanceIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Container for connection properties to execute stored procedures for Apache Spark. resources.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderSpark {
    /// Dataproc Metastore Service configuration for the connection.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metastoreServiceConfig")]
    pub metastore_service_config: Option<ConnectionInitProviderSparkMetastoreServiceConfig>,
    /// Spark History Server configuration for the connection.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sparkHistoryServerConfig")]
    pub spark_history_server_config: Option<ConnectionInitProviderSparkSparkHistoryServerConfig>,
}

/// Dataproc Metastore Service configuration for the connection.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderSparkMetastoreServiceConfig {
    /// Resource name of an existing Dataproc Metastore service in the form of projects/[projectId]/locations/[region]/services/[serviceId].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metastoreService")]
    pub metastore_service: Option<String>,
}

/// Spark History Server configuration for the connection.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderSparkSparkHistoryServerConfig {
    /// Resource name of an existing Dataproc Cluster to act as a Spark History Server for the connection if the form of projects/[projectId]/regions/[region]/clusters/[cluster_name].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataprocCluster")]
    pub dataproc_cluster: Option<String>,
    /// Reference to a Cluster in dataproc to populate dataprocCluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataprocClusterRef")]
    pub dataproc_cluster_ref: Option<ConnectionInitProviderSparkSparkHistoryServerConfigDataprocClusterRef>,
    /// Selector for a Cluster in dataproc to populate dataprocCluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataprocClusterSelector")]
    pub dataproc_cluster_selector: Option<ConnectionInitProviderSparkSparkHistoryServerConfigDataprocClusterSelector>,
}

/// Reference to a Cluster in dataproc to populate dataprocCluster.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderSparkSparkHistoryServerConfigDataprocClusterRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionInitProviderSparkSparkHistoryServerConfigDataprocClusterRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderSparkSparkHistoryServerConfigDataprocClusterRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionInitProviderSparkSparkHistoryServerConfigDataprocClusterRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionInitProviderSparkSparkHistoryServerConfigDataprocClusterRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionInitProviderSparkSparkHistoryServerConfigDataprocClusterRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionInitProviderSparkSparkHistoryServerConfigDataprocClusterRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Cluster in dataproc to populate dataprocCluster.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderSparkSparkHistoryServerConfigDataprocClusterSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionInitProviderSparkSparkHistoryServerConfigDataprocClusterSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderSparkSparkHistoryServerConfigDataprocClusterSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionInitProviderSparkSparkHistoryServerConfigDataprocClusterSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionInitProviderSparkSparkHistoryServerConfigDataprocClusterSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionInitProviderSparkSparkHistoryServerConfigDataprocClusterSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionInitProviderSparkSparkHistoryServerConfigDataprocClusterSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ConnectionPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ConnectionPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ConnectionStatus defines the observed state of Connection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<ConnectionStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProvider {
    /// Connection properties specific to Amazon Web Services.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub aws: Option<ConnectionStatusAtProviderAws>,
    /// Container for connection properties specific to Azure.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub azure: Option<ConnectionStatusAtProviderAzure>,
    /// Container for connection properties for delegation of access to GCP resources.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudResource")]
    pub cloud_resource: Option<ConnectionStatusAtProviderCloudResource>,
    /// Connection properties specific to Cloud Spanner
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudSpanner")]
    pub cloud_spanner: Option<ConnectionStatusAtProviderCloudSpanner>,
    /// Connection properties specific to the Cloud SQL.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudSql")]
    pub cloud_sql: Option<ConnectionStatusAtProviderCloudSql>,
    /// Optional connection id that should be assigned to the created connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionId")]
    pub connection_id: Option<String>,
    /// A descriptive description for the connection
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// A descriptive name for the connection
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "friendlyName")]
    pub friendly_name: Option<String>,
    /// True if the connection has credential assigned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hasCredential")]
    pub has_credential: Option<bool>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/connections/{{connection_id}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Optional. The Cloud KMS key that is used for encryption.
    /// Example: projects/[kms_project_id]/locations/[region]/keyRings/[key_region]/cryptoKeys/[key]
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    pub kms_key_name: Option<String>,
    /// The geographic location where the connection should reside.
    /// Cloud SQL instance must be in the same location as the connection
    /// with following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.
    /// Examples: US, EU, asia-northeast1, us-central1, europe-west1.
    /// Spanner Connections same as spanner region
    /// AWS allowed regions are aws-us-east-1
    /// Azure allowed regions are azure-eastus2
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// The resource name of the connection in the form of:
    /// "projects/{project_id}/locations/{location_id}/connections/{connectionId}"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Container for connection properties to execute stored procedures for Apache Spark. resources.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub spark: Option<ConnectionStatusAtProviderSpark>,
}

/// Connection properties specific to Amazon Web Services.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderAws {
    /// Authentication using Google owned service account to assume into customer's AWS IAM Role.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessRole")]
    pub access_role: Option<ConnectionStatusAtProviderAwsAccessRole>,
}

/// Authentication using Google owned service account to assume into customer's AWS IAM Role.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderAwsAccessRole {
    /// The userâ€™s AWS IAM Role that trusts the Google-owned AWS IAM user Connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleId")]
    pub iam_role_id: Option<String>,
    /// (Output)
    /// A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's AWS IAM Role.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identity: Option<String>,
}

/// Container for connection properties specific to Azure.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderAzure {
    /// (Output)
    /// The name of the Azure Active Directory Application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub application: Option<String>,
    /// (Output)
    /// The client id of the Azure Active Directory Application.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// The id of customer's directory that host the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerTenantId")]
    pub customer_tenant_id: Option<String>,
    /// The Azure Application (client) ID where the federated credentials will be hosted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "federatedApplicationClientId")]
    pub federated_application_client_id: Option<String>,
    /// (Output)
    /// A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's Azure Active Directory Application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identity: Option<String>,
    /// (Output)
    /// The object id of the Azure Active Directory Application.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectId")]
    pub object_id: Option<String>,
    /// (Output)
    /// The URL user will be redirected to after granting consent during connection setup.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redirectUri")]
    pub redirect_uri: Option<String>,
}

/// Container for connection properties for delegation of access to GCP resources.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderCloudResource {
    /// (Output)
    /// The account ID of the service created for the purpose of this connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountId")]
    pub service_account_id: Option<String>,
}

/// Connection properties specific to Cloud Spanner
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderCloudSpanner {
    /// Cloud Spanner database in the form `project/instance/database'.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    /// Cloud Spanner database role for fine-grained access control. The Cloud Spanner admin should have provisioned the database role with appropriate permissions, such as SELECT and INSERT. Other users should only use roles provided by their Cloud Spanner admins. The database role name must start with a letter, and can only contain letters, numbers, and underscores. For more details, see https://cloud.google.com/spanner/docs/fgac-about.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseRole")]
    pub database_role: Option<String>,
    /// Allows setting max parallelism per query when executing on Spanner independent compute resources. If unspecified, default values of parallelism are chosen that are dependent on the Cloud Spanner instance configuration. useParallelism and useDataBoost must be set when setting max parallelism.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxParallelism")]
    pub max_parallelism: Option<f64>,
    /// If set, the request will be executed via Spanner independent compute resources. use_parallelism must be set when using data boost.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useDataBoost")]
    pub use_data_boost: Option<bool>,
    /// If parallelism should be used when reading from Cloud Spanner.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useParallelism")]
    pub use_parallelism: Option<bool>,
    /// If the serverless analytics service should be used to read data from Cloud Spanner. useParallelism must be set when using serverless analytics.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useServerlessAnalytics")]
    pub use_serverless_analytics: Option<bool>,
}

/// Connection properties specific to the Cloud SQL.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderCloudSql {
    /// Cloud SQL properties.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub credential: Option<ConnectionStatusAtProviderCloudSqlCredential>,
    /// Database name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    /// Cloud SQL instance ID in the form project:location:instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceId")]
    pub instance_id: Option<String>,
    /// (Output)
    /// When the connection is used in the context of an operation in BigQuery, this service account will serve as the identity being used for connecting to the CloudSQL instance specified in this connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountId")]
    pub service_account_id: Option<String>,
    /// Type of the Cloud SQL database.
    /// Possible values are: DATABASE_TYPE_UNSPECIFIED, POSTGRES, MYSQL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Cloud SQL properties.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderCloudSqlCredential {
    /// Username for database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// Container for connection properties to execute stored procedures for Apache Spark. resources.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderSpark {
    /// Dataproc Metastore Service configuration for the connection.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metastoreServiceConfig")]
    pub metastore_service_config: Option<ConnectionStatusAtProviderSparkMetastoreServiceConfig>,
    /// (Output)
    /// The account ID of the service created for the purpose of this connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountId")]
    pub service_account_id: Option<String>,
    /// Spark History Server configuration for the connection.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sparkHistoryServerConfig")]
    pub spark_history_server_config: Option<ConnectionStatusAtProviderSparkSparkHistoryServerConfig>,
}

/// Dataproc Metastore Service configuration for the connection.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderSparkMetastoreServiceConfig {
    /// Resource name of an existing Dataproc Metastore service in the form of projects/[projectId]/locations/[region]/services/[serviceId].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metastoreService")]
    pub metastore_service: Option<String>,
}

/// Spark History Server configuration for the connection.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderSparkSparkHistoryServerConfig {
    /// Resource name of an existing Dataproc Cluster to act as a Spark History Server for the connection if the form of projects/[projectId]/regions/[region]/clusters/[cluster_name].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataprocCluster")]
    pub dataproc_cluster: Option<String>,
}


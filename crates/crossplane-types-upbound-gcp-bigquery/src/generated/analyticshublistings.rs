// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
}
use self::prelude::*;

/// AnalyticsHubListingSpec defines the desired state of AnalyticsHubListing
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(
    group = "bigquery.gcp.upbound.io",
    version = "v1beta2",
    kind = "AnalyticsHubListing",
    plural = "analyticshublistings"
)]
#[kube(status = "AnalyticsHubListingStatus")]
pub struct AnalyticsHubListingSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    pub deletion_policy: Option<AnalyticsHubListingDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: AnalyticsHubListingForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    pub init_provider: Option<AnalyticsHubListingInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    pub provider_config_ref: Option<AnalyticsHubListingProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    pub publish_connection_details_to: Option<AnalyticsHubListingPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    pub write_connection_secret_to_ref: Option<AnalyticsHubListingWriteConnectionSecretToRef>,
}

/// AnalyticsHubListingSpec defines the desired state of AnalyticsHubListing
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AnalyticsHubListingDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingForProvider {
    /// Shared dataset i.e. BigQuery dataset source.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bigqueryDataset"
    )]
    pub bigquery_dataset: Option<AnalyticsHubListingForProviderBigqueryDataset>,
    /// Categories of the listing. Up to two categories are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub categories: Option<Vec<String>>,
    /// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataExchangeId"
    )]
    pub data_exchange_id: Option<String>,
    /// Reference to a AnalyticsHubDataExchange in bigquery to populate dataExchangeId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataExchangeIdRef"
    )]
    pub data_exchange_id_ref: Option<AnalyticsHubListingForProviderDataExchangeIdRef>,
    /// Selector for a AnalyticsHubDataExchange in bigquery to populate dataExchangeId.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataExchangeIdSelector"
    )]
    pub data_exchange_id_selector: Option<AnalyticsHubListingForProviderDataExchangeIdSelector>,
    /// Details of the data provider who owns the source data.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataProvider"
    )]
    pub data_provider: Option<AnalyticsHubListingForProviderDataProvider>,
    /// Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and can't start or end with spaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayName"
    )]
    pub display_name: Option<String>,
    /// Documentation describing the listing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,
    /// Base64 encoded image representing the listing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    /// The name of the location this data exchange listing.
    pub location: String,
    /// Email or URL of the listing publisher.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "primaryContact"
    )]
    pub primary_contact: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Details of the publisher who owns the listing and who can share the source data.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub publisher: Option<AnalyticsHubListingForProviderPublisher>,
    /// Email or URL of the request access of the listing. Subscribers can use this reference to request access.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requestAccess"
    )]
    pub request_access: Option<String>,
    /// If set, restricted export configuration will be propagated and enforced on the linked dataset.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restrictedExportConfig"
    )]
    pub restricted_export_config: Option<AnalyticsHubListingForProviderRestrictedExportConfig>,
}

/// Shared dataset i.e. BigQuery dataset source.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingForProviderBigqueryDataset {
    /// Resource name of the dataset source for this listing. e.g. projects/myproject/datasets/123
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dataset: Option<String>,
    /// Reference to a Dataset in bigquery to populate dataset.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "datasetRef"
    )]
    pub dataset_ref: Option<AnalyticsHubListingForProviderBigqueryDatasetDatasetRef>,
    /// Selector for a Dataset in bigquery to populate dataset.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "datasetSelector"
    )]
    pub dataset_selector: Option<AnalyticsHubListingForProviderBigqueryDatasetDatasetSelector>,
}

/// Reference to a Dataset in bigquery to populate dataset.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingForProviderBigqueryDatasetDatasetRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AnalyticsHubListingForProviderBigqueryDatasetDatasetRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingForProviderBigqueryDatasetDatasetRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AnalyticsHubListingForProviderBigqueryDatasetDatasetRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AnalyticsHubListingForProviderBigqueryDatasetDatasetRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AnalyticsHubListingForProviderBigqueryDatasetDatasetRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AnalyticsHubListingForProviderBigqueryDatasetDatasetRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Dataset in bigquery to populate dataset.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingForProviderBigqueryDatasetDatasetSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AnalyticsHubListingForProviderBigqueryDatasetDatasetSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingForProviderBigqueryDatasetDatasetSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<AnalyticsHubListingForProviderBigqueryDatasetDatasetSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AnalyticsHubListingForProviderBigqueryDatasetDatasetSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AnalyticsHubListingForProviderBigqueryDatasetDatasetSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AnalyticsHubListingForProviderBigqueryDatasetDatasetSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a AnalyticsHubDataExchange in bigquery to populate dataExchangeId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingForProviderDataExchangeIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AnalyticsHubListingForProviderDataExchangeIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingForProviderDataExchangeIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AnalyticsHubListingForProviderDataExchangeIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AnalyticsHubListingForProviderDataExchangeIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AnalyticsHubListingForProviderDataExchangeIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AnalyticsHubListingForProviderDataExchangeIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a AnalyticsHubDataExchange in bigquery to populate dataExchangeId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingForProviderDataExchangeIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AnalyticsHubListingForProviderDataExchangeIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingForProviderDataExchangeIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AnalyticsHubListingForProviderDataExchangeIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AnalyticsHubListingForProviderDataExchangeIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AnalyticsHubListingForProviderDataExchangeIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AnalyticsHubListingForProviderDataExchangeIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Details of the data provider who owns the source data.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingForProviderDataProvider {
    /// Name of the data provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Email or URL of the data provider.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "primaryContact"
    )]
    pub primary_contact: Option<String>,
}

/// Details of the publisher who owns the listing and who can share the source data.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingForProviderPublisher {
    /// Name of the listing publisher.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Email or URL of the listing publisher.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "primaryContact"
    )]
    pub primary_contact: Option<String>,
}

/// If set, restricted export configuration will be propagated and enforced on the linked dataset.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingForProviderRestrictedExportConfig {
    /// If true, enable restricted export.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// If true, restrict export of query result derived from restricted linked dataset table.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restrictQueryResult"
    )]
    pub restrict_query_result: Option<bool>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingInitProvider {
    /// Shared dataset i.e. BigQuery dataset source.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bigqueryDataset"
    )]
    pub bigquery_dataset: Option<AnalyticsHubListingInitProviderBigqueryDataset>,
    /// Categories of the listing. Up to two categories are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub categories: Option<Vec<String>>,
    /// Details of the data provider who owns the source data.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataProvider"
    )]
    pub data_provider: Option<AnalyticsHubListingInitProviderDataProvider>,
    /// Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and can't start or end with spaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayName"
    )]
    pub display_name: Option<String>,
    /// Documentation describing the listing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,
    /// Base64 encoded image representing the listing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    /// Email or URL of the listing publisher.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "primaryContact"
    )]
    pub primary_contact: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Details of the publisher who owns the listing and who can share the source data.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub publisher: Option<AnalyticsHubListingInitProviderPublisher>,
    /// Email or URL of the request access of the listing. Subscribers can use this reference to request access.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requestAccess"
    )]
    pub request_access: Option<String>,
    /// If set, restricted export configuration will be propagated and enforced on the linked dataset.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restrictedExportConfig"
    )]
    pub restricted_export_config: Option<AnalyticsHubListingInitProviderRestrictedExportConfig>,
}

/// Shared dataset i.e. BigQuery dataset source.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingInitProviderBigqueryDataset {
    /// Resource name of the dataset source for this listing. e.g. projects/myproject/datasets/123
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dataset: Option<String>,
    /// Reference to a Dataset in bigquery to populate dataset.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "datasetRef"
    )]
    pub dataset_ref: Option<AnalyticsHubListingInitProviderBigqueryDatasetDatasetRef>,
    /// Selector for a Dataset in bigquery to populate dataset.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "datasetSelector"
    )]
    pub dataset_selector: Option<AnalyticsHubListingInitProviderBigqueryDatasetDatasetSelector>,
}

/// Reference to a Dataset in bigquery to populate dataset.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingInitProviderBigqueryDatasetDatasetRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AnalyticsHubListingInitProviderBigqueryDatasetDatasetRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingInitProviderBigqueryDatasetDatasetRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<AnalyticsHubListingInitProviderBigqueryDatasetDatasetRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AnalyticsHubListingInitProviderBigqueryDatasetDatasetRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AnalyticsHubListingInitProviderBigqueryDatasetDatasetRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AnalyticsHubListingInitProviderBigqueryDatasetDatasetRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Dataset in bigquery to populate dataset.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingInitProviderBigqueryDatasetDatasetSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AnalyticsHubListingInitProviderBigqueryDatasetDatasetSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingInitProviderBigqueryDatasetDatasetSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<AnalyticsHubListingInitProviderBigqueryDatasetDatasetSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AnalyticsHubListingInitProviderBigqueryDatasetDatasetSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AnalyticsHubListingInitProviderBigqueryDatasetDatasetSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AnalyticsHubListingInitProviderBigqueryDatasetDatasetSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Details of the data provider who owns the source data.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingInitProviderDataProvider {
    /// Name of the data provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Email or URL of the data provider.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "primaryContact"
    )]
    pub primary_contact: Option<String>,
}

/// Details of the publisher who owns the listing and who can share the source data.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingInitProviderPublisher {
    /// Name of the listing publisher.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Email or URL of the listing publisher.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "primaryContact"
    )]
    pub primary_contact: Option<String>,
}

/// If set, restricted export configuration will be propagated and enforced on the linked dataset.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingInitProviderRestrictedExportConfig {
    /// If true, enable restricted export.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// If true, restrict export of query result derived from restricted linked dataset table.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restrictQueryResult"
    )]
    pub restrict_query_result: Option<bool>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AnalyticsHubListingProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AnalyticsHubListingProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AnalyticsHubListingProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AnalyticsHubListingProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AnalyticsHubListingProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<AnalyticsHubListingPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<AnalyticsHubListingPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AnalyticsHubListingPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AnalyticsHubListingPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AnalyticsHubListingPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AnalyticsHubListingPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AnalyticsHubListingPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// AnalyticsHubListingStatus defines the observed state of AnalyticsHubListing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    pub at_provider: Option<AnalyticsHubListingStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingStatusAtProvider {
    /// Shared dataset i.e. BigQuery dataset source.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "bigqueryDataset"
    )]
    pub bigquery_dataset: Option<AnalyticsHubListingStatusAtProviderBigqueryDataset>,
    /// Categories of the listing. Up to two categories are allowed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub categories: Option<Vec<String>>,
    /// The ID of the data exchange. Must contain only Unicode letters, numbers (0-9), underscores (_). Should not use characters that require URL-escaping, or characters outside of ASCII, spaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataExchangeId"
    )]
    pub data_exchange_id: Option<String>,
    /// Details of the data provider who owns the source data.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "dataProvider"
    )]
    pub data_provider: Option<AnalyticsHubListingStatusAtProviderDataProvider>,
    /// Short description of the listing. The description must not contain Unicode non-characters and C0 and C1 control codes except tabs (HT), new lines (LF), carriage returns (CR), and page breaks (FF).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Human-readable display name of the listing. The display name must contain only Unicode letters, numbers (0-9), underscores (_), dashes (-), spaces ( ), ampersands (&) and can't start or end with spaces.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "displayName"
    )]
    pub display_name: Option<String>,
    /// Documentation describing the listing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub documentation: Option<String>,
    /// Base64 encoded image representing the listing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub icon: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/dataExchanges/{{data_exchange_id}}/listings/{{listing_id}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of the location this data exchange listing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// The resource name of the listing. e.g. "projects/myproject/locations/US/dataExchanges/123/listings/456"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Email or URL of the listing publisher.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "primaryContact"
    )]
    pub primary_contact: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Details of the publisher who owns the listing and who can share the source data.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub publisher: Option<AnalyticsHubListingStatusAtProviderPublisher>,
    /// Email or URL of the request access of the listing. Subscribers can use this reference to request access.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "requestAccess"
    )]
    pub request_access: Option<String>,
    /// If set, restricted export configuration will be propagated and enforced on the linked dataset.
    /// Structure is documented below.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restrictedExportConfig"
    )]
    pub restricted_export_config: Option<AnalyticsHubListingStatusAtProviderRestrictedExportConfig>,
}

/// Shared dataset i.e. BigQuery dataset source.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingStatusAtProviderBigqueryDataset {
    /// Resource name of the dataset source for this listing. e.g. projects/myproject/datasets/123
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dataset: Option<String>,
}

/// Details of the data provider who owns the source data.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingStatusAtProviderDataProvider {
    /// Name of the data provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Email or URL of the data provider.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "primaryContact"
    )]
    pub primary_contact: Option<String>,
}

/// Details of the publisher who owns the listing and who can share the source data.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingStatusAtProviderPublisher {
    /// Name of the listing publisher.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Email or URL of the listing publisher.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "primaryContact"
    )]
    pub primary_contact: Option<String>,
}

/// If set, restricted export configuration will be propagated and enforced on the linked dataset.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AnalyticsHubListingStatusAtProviderRestrictedExportConfig {
    /// If true, enable restricted export.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// If true, restrict export of query result derived from restricted linked dataset table.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "restrictQueryResult"
    )]
    pub restrict_query_result: Option<bool>,
}

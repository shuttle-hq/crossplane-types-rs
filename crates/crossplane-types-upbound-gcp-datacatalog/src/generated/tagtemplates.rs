// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// TagTemplateSpec defines the desired state of TagTemplate
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "datacatalog.gcp.upbound.io", version = "v1beta2", kind = "TagTemplate", plural = "tagtemplates")]
#[kube(status = "TagTemplateStatus")]
pub struct TagTemplateSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<TagTemplateDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: TagTemplateForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<TagTemplateInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<TagTemplateProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<TagTemplatePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<TagTemplateWriteConnectionSecretToRef>,
}

/// TagTemplateSpec defines the desired state of TagTemplate
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TagTemplateDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateForProvider {
    /// The display name for this field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields. The change of field_id will be resulting in re-creating of field. The change of primitive_type will be resulting in re-creating of field, however if the field is a required, you cannot update it.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<TagTemplateForProviderFields>>,
    /// This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDelete")]
    pub force_delete: Option<bool>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Template location region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateForProviderFields {
    /// A description for this field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The display name for this field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldId")]
    pub field_id: Option<String>,
    /// Whether this is a required field. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isRequired")]
    pub is_required: Option<bool>,
    /// The order of this field with respect to other fields in this tag template.
    /// A higher value indicates a more important field. The value can be negative.
    /// Multiple fields can have the same order, and field orders within a tag do not have to be sequential.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<f64>,
    /// The type of value this tag field can contain.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<TagTemplateForProviderFieldsType>,
}

/// The type of value this tag field can contain.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateForProviderFieldsType {
    /// Represents an enum type.
    /// Exactly one of primitive_type or enum_type must be set
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enumType")]
    pub enum_type: Option<TagTemplateForProviderFieldsTypeEnumType>,
    /// Represents primitive types - string, bool etc.
    /// Exactly one of primitive_type or enum_type must be set
    /// Possible values are: DOUBLE, STRING, BOOL, TIMESTAMP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primitiveType")]
    pub primitive_type: Option<String>,
}

/// Represents an enum type.
/// Exactly one of primitive_type or enum_type must be set
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateForProviderFieldsTypeEnumType {
    /// The set of allowed values for this enum. The display names of the
    /// values must be case-insensitively unique within this set. Currently,
    /// enum values can only be added to the list of allowed values. Deletion
    /// and renaming of enum values are not supported.
    /// Can have up to 500 allowed values.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedValues")]
    pub allowed_values: Option<Vec<TagTemplateForProviderFieldsTypeEnumTypeAllowedValues>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateForProviderFieldsTypeEnumTypeAllowedValues {
    /// The display name for this field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateInitProvider {
    /// The display name for this field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields. The change of field_id will be resulting in re-creating of field. The change of primitive_type will be resulting in re-creating of field, however if the field is a required, you cannot update it.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<TagTemplateInitProviderFields>>,
    /// This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDelete")]
    pub force_delete: Option<bool>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateInitProviderFields {
    /// A description for this field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The display name for this field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldId")]
    pub field_id: Option<String>,
    /// Whether this is a required field. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isRequired")]
    pub is_required: Option<bool>,
    /// The order of this field with respect to other fields in this tag template.
    /// A higher value indicates a more important field. The value can be negative.
    /// Multiple fields can have the same order, and field orders within a tag do not have to be sequential.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<f64>,
    /// The type of value this tag field can contain.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<TagTemplateInitProviderFieldsType>,
}

/// The type of value this tag field can contain.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateInitProviderFieldsType {
    /// Represents an enum type.
    /// Exactly one of primitive_type or enum_type must be set
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enumType")]
    pub enum_type: Option<TagTemplateInitProviderFieldsTypeEnumType>,
    /// Represents primitive types - string, bool etc.
    /// Exactly one of primitive_type or enum_type must be set
    /// Possible values are: DOUBLE, STRING, BOOL, TIMESTAMP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primitiveType")]
    pub primitive_type: Option<String>,
}

/// Represents an enum type.
/// Exactly one of primitive_type or enum_type must be set
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateInitProviderFieldsTypeEnumType {
    /// The set of allowed values for this enum. The display names of the
    /// values must be case-insensitively unique within this set. Currently,
    /// enum values can only be added to the list of allowed values. Deletion
    /// and renaming of enum values are not supported.
    /// Can have up to 500 allowed values.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedValues")]
    pub allowed_values: Option<Vec<TagTemplateInitProviderFieldsTypeEnumTypeAllowedValues>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateInitProviderFieldsTypeEnumTypeAllowedValues {
    /// The display name for this field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TagTemplateProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TagTemplateProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TagTemplateProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TagTemplateProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TagTemplateProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplatePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<TagTemplatePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<TagTemplatePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplatePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TagTemplatePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplatePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TagTemplatePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TagTemplatePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TagTemplatePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TagTemplatePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplatePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// TagTemplateStatus defines the observed state of TagTemplate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<TagTemplateStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateStatusAtProvider {
    /// The display name for this field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// Set of tag template field IDs and the settings for the field. This set is an exhaustive list of the allowed fields. This set must contain at least one field and at most 500 fields. The change of field_id will be resulting in re-creating of field. The change of primitive_type will be resulting in re-creating of field, however if the field is a required, you cannot update it.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fields: Option<Vec<TagTemplateStatusAtProviderFields>>,
    /// This confirms the deletion of any possible tags using this template. Must be set to true in order to delete the tag template.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDelete")]
    pub force_delete: Option<bool>,
    /// an identifier for the resource with format {{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The resource name of the tag template in URL format. Example: projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Template location region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateStatusAtProviderFields {
    /// A description for this field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The display name for this field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fieldId")]
    pub field_id: Option<String>,
    /// Whether this is a required field. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isRequired")]
    pub is_required: Option<bool>,
    /// (Output)
    /// The resource name of the tag template field in URL format. Example: projects/{project_id}/locations/{location}/tagTemplates/{tagTemplateId}/fields/{field}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The order of this field with respect to other fields in this tag template.
    /// A higher value indicates a more important field. The value can be negative.
    /// Multiple fields can have the same order, and field orders within a tag do not have to be sequential.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<f64>,
    /// The type of value this tag field can contain.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<TagTemplateStatusAtProviderFieldsType>,
}

/// The type of value this tag field can contain.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateStatusAtProviderFieldsType {
    /// Represents an enum type.
    /// Exactly one of primitive_type or enum_type must be set
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enumType")]
    pub enum_type: Option<TagTemplateStatusAtProviderFieldsTypeEnumType>,
    /// Represents primitive types - string, bool etc.
    /// Exactly one of primitive_type or enum_type must be set
    /// Possible values are: DOUBLE, STRING, BOOL, TIMESTAMP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "primitiveType")]
    pub primitive_type: Option<String>,
}

/// Represents an enum type.
/// Exactly one of primitive_type or enum_type must be set
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateStatusAtProviderFieldsTypeEnumType {
    /// The set of allowed values for this enum. The display names of the
    /// values must be case-insensitively unique within this set. Currently,
    /// enum values can only be added to the list of allowed values. Deletion
    /// and renaming of enum values are not supported.
    /// Can have up to 500 allowed values.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedValues")]
    pub allowed_values: Option<Vec<TagTemplateStatusAtProviderFieldsTypeEnumTypeAllowedValues>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TagTemplateStatusAtProviderFieldsTypeEnumTypeAllowedValues {
    /// The display name for this field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
}


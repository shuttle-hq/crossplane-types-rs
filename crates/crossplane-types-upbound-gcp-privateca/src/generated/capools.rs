// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// CAPoolSpec defines the desired state of CAPool
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "privateca.gcp.upbound.io", version = "v1beta2", kind = "CAPool", plural = "capools")]
#[kube(status = "CAPoolStatus")]
pub struct CAPoolSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<CAPoolDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: CAPoolForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<CAPoolInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<CAPoolProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<CAPoolPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<CAPoolWriteConnectionSecretToRef>,
}

/// CAPoolSpec defines the desired state of CAPool
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CAPoolDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProvider {
    /// The IssuancePolicy to control how Certificates will be issued from this CaPool.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "issuancePolicy")]
    pub issuance_policy: Option<CAPoolForProviderIssuancePolicy>,
    /// Labels with user-defined metadata.
    /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
    /// "1.3kg", "count": "3" }.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Location of the CaPool. A full list of valid locations can be found by
    /// running gcloud privateca locations list.
    pub location: String,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishingOptions")]
    pub publishing_options: Option<CAPoolForProviderPublishingOptions>,
    /// The Tier of this CaPool.
    /// Possible values are: ENTERPRISE, DEVOPS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tier: Option<String>,
}

/// The IssuancePolicy to control how Certificates will be issued from this CaPool.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProviderIssuancePolicy {
    /// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedIssuanceModes")]
    pub allowed_issuance_modes: Option<CAPoolForProviderIssuancePolicyAllowedIssuanceModes>,
    /// If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here.
    /// Otherwise, any key may be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedKeyTypes")]
    pub allowed_key_types: Option<Vec<CAPoolForProviderIssuancePolicyAllowedKeyTypes>>,
    /// A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request
    /// includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate
    /// request uses a CertificateTemplate that defines conflicting predefinedValues for the same properties, the certificate
    /// issuance request will fail.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baselineValues")]
    pub baseline_values: Option<CAPoolForProviderIssuancePolicyBaselineValues>,
    /// Describes constraints on identities that may appear in Certificates issued through this CaPool.
    /// If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityConstraints")]
    pub identity_constraints: Option<CAPoolForProviderIssuancePolicyIdentityConstraints>,
    /// The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority
    /// expires before a Certificate's requested maximumLifetime, the effective lifetime will be explicitly truncated to match it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumLifetime")]
    pub maximum_lifetime: Option<String>,
}

/// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProviderIssuancePolicyAllowedIssuanceModes {
    /// When true, allows callers to create Certificates by specifying a CertificateConfig.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowConfigBasedIssuance")]
    pub allow_config_based_issuance: Option<bool>,
    /// When true, allows callers to create Certificates by specifying a CSR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowCsrBasedIssuance")]
    pub allow_csr_based_issuance: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProviderIssuancePolicyAllowedKeyTypes {
    /// Represents an allowed Elliptic Curve key type.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ellipticCurve")]
    pub elliptic_curve: Option<CAPoolForProviderIssuancePolicyAllowedKeyTypesEllipticCurve>,
    /// Describes an RSA key that may be used in a Certificate issued from a CaPool.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rsa: Option<CAPoolForProviderIssuancePolicyAllowedKeyTypesRsa>,
}

/// Represents an allowed Elliptic Curve key type.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProviderIssuancePolicyAllowedKeyTypesEllipticCurve {
    /// The algorithm used.
    /// Possible values are: ECDSA_P256, ECDSA_P384, EDDSA_25519.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signatureAlgorithm")]
    pub signature_algorithm: Option<String>,
}

/// Describes an RSA key that may be used in a Certificate issued from a CaPool.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProviderIssuancePolicyAllowedKeyTypesRsa {
    /// The maximum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
    /// service will not enforce an explicit upper bound on RSA modulus sizes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxModulusSize")]
    pub max_modulus_size: Option<String>,
    /// The minimum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
    /// service-level min RSA modulus size will continue to apply.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minModulusSize")]
    pub min_modulus_size: Option<String>,
}

/// A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request
/// includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate
/// request uses a CertificateTemplate that defines conflicting predefinedValues for the same properties, the certificate
/// issuance request will fail.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProviderIssuancePolicyBaselineValues {
    /// Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalExtensions")]
    pub additional_extensions: Option<Vec<CAPoolForProviderIssuancePolicyBaselineValuesAdditionalExtensions>>,
    /// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
    /// "Authority Information Access" extension in the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aiaOcspServers")]
    pub aia_ocsp_servers: Option<Vec<String>>,
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caOptions")]
    pub ca_options: Option<CAPoolForProviderIssuancePolicyBaselineValuesCaOptions>,
    /// Indicates the intended use for keys that correspond to a certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyUsage")]
    pub key_usage: Option<CAPoolForProviderIssuancePolicyBaselineValuesKeyUsage>,
    /// Describes the X.509 name constraints extension.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameConstraints")]
    pub name_constraints: Option<CAPoolForProviderIssuancePolicyBaselineValuesNameConstraints>,
    /// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyIds")]
    pub policy_ids: Option<Vec<CAPoolForProviderIssuancePolicyBaselineValuesPolicyIds>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProviderIssuancePolicyBaselineValuesAdditionalExtensions {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub critical: Option<bool>,
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectId")]
    pub object_id: Option<CAPoolForProviderIssuancePolicyBaselineValuesAdditionalExtensionsObjectId>,
    /// The value of this X.509 extension. A base64-encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Describes values that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProviderIssuancePolicyBaselineValuesAdditionalExtensionsObjectId {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

/// Describes values that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProviderIssuancePolicyBaselineValuesCaOptions {
    /// When true, the "CA" in Basic Constraints extension will be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isCa")]
    pub is_ca: Option<bool>,
    /// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
    /// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxIssuerPathLength")]
    pub max_issuer_path_length: Option<f64>,
    /// When true, the "CA" in Basic Constraints extension will be set to false.
    /// If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonCa")]
    pub non_ca: Option<bool>,
    /// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
    /// if both max_issuer_path_length and zero_max_issuer_path_length are unset,
    /// the max path length will be omitted from the CA certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "zeroMaxIssuerPathLength")]
    pub zero_max_issuer_path_length: Option<bool>,
}

/// Indicates the intended use for keys that correspond to a certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProviderIssuancePolicyBaselineValuesKeyUsage {
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseKeyUsage")]
    pub base_key_usage: Option<CAPoolForProviderIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage>,
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extendedKeyUsage")]
    pub extended_key_usage: Option<CAPoolForProviderIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage>,
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unknownExtendedKeyUsages")]
    pub unknown_extended_key_usages: Option<Vec<CAPoolForProviderIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsages>>,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProviderIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage {
    /// The key may be used to sign certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSign")]
    pub cert_sign: Option<bool>,
    /// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentCommitment")]
    pub content_commitment: Option<bool>,
    /// The key may be used sign certificate revocation lists.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crlSign")]
    pub crl_sign: Option<bool>,
    /// The key may be used to encipher data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataEncipherment")]
    pub data_encipherment: Option<bool>,
    /// The key may be used to decipher only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "decipherOnly")]
    pub decipher_only: Option<bool>,
    /// The key may be used for digital signatures.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "digitalSignature")]
    pub digital_signature: Option<bool>,
    /// The key may be used to encipher only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encipherOnly")]
    pub encipher_only: Option<bool>,
    /// The key may be used in a key agreement protocol.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyAgreement")]
    pub key_agreement: Option<bool>,
    /// The key may be used to encipher other keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyEncipherment")]
    pub key_encipherment: Option<bool>,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProviderIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage {
    /// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientAuth")]
    pub client_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeSigning")]
    pub code_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emailProtection")]
    pub email_protection: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspSigning")]
    pub ocsp_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverAuth")]
    pub server_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeStamping")]
    pub time_stamping: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProviderIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsages {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

/// Describes the X.509 name constraints extension.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProviderIssuancePolicyBaselineValuesNameConstraints {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub critical: Option<bool>,
    /// Contains excluded DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedDnsNames")]
    pub excluded_dns_names: Option<Vec<String>>,
    /// Contains the excluded email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedEmailAddresses")]
    pub excluded_email_addresses: Option<Vec<String>>,
    /// Contains the excluded IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedIpRanges")]
    pub excluded_ip_ranges: Option<Vec<String>>,
    /// Contains the excluded URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedUris")]
    pub excluded_uris: Option<Vec<String>>,
    /// Contains permitted DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permittedDnsNames")]
    pub permitted_dns_names: Option<Vec<String>>,
    /// Contains the permitted email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permittedEmailAddresses")]
    pub permitted_email_addresses: Option<Vec<String>>,
    /// Contains the permitted IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permittedIpRanges")]
    pub permitted_ip_ranges: Option<Vec<String>>,
    /// Contains the permitted URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permittedUris")]
    pub permitted_uris: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProviderIssuancePolicyBaselineValuesPolicyIds {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

/// Describes constraints on identities that may appear in Certificates issued through this CaPool.
/// If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProviderIssuancePolicyIdentityConstraints {
    /// If this is set, the SubjectAltNames extension may be copied from a certificate request into the signed certificate.
    /// Otherwise, the requested SubjectAltNames will be discarded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowSubjectAltNamesPassthrough")]
    pub allow_subject_alt_names_passthrough: Option<bool>,
    /// If this is set, the Subject field may be copied from a certificate request into the signed certificate.
    /// Otherwise, the requested Subject will be discarded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowSubjectPassthrough")]
    pub allow_subject_passthrough: Option<bool>,
    /// A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a
    /// certificate is signed. To see the full allowed syntax and some examples,
    /// see https://cloud.google.com/certificate-authority-service/docs/cel-guide
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "celExpression")]
    pub cel_expression: Option<CAPoolForProviderIssuancePolicyIdentityConstraintsCelExpression>,
}

/// A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a
/// certificate is signed. To see the full allowed syntax and some examples,
/// see https://cloud.google.com/certificate-authority-service/docs/cel-guide
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProviderIssuancePolicyIdentityConstraintsCelExpression {
    /// Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Textual representation of an expression in Common Expression Language syntax.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    /// Location of the CaPool. A full list of valid locations can be found by
    /// running gcloud privateca locations list.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

/// The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolForProviderPublishingOptions {
    /// Specifies the encoding format of each CertificateAuthority's CA
    /// certificate and CRLs. If this is omitted, CA certificates and CRLs
    /// will be published in PEM.
    /// Possible values are: PEM, DER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encodingFormat")]
    pub encoding_format: Option<String>,
    /// When true, publishes each CertificateAuthority's CA certificate and includes its URL in the "Authority Information Access"
    /// X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding
    /// X.509 extension will not be written in issued certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishCaCert")]
    pub publish_ca_cert: Option<bool>,
    /// When true, publishes each CertificateAuthority's CRL and includes its URL in the "CRL Distribution Points" X.509 extension
    /// in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not
    /// be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are
    /// also rebuilt shortly after a certificate is revoked.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishCrl")]
    pub publish_crl: Option<bool>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProvider {
    /// The IssuancePolicy to control how Certificates will be issued from this CaPool.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "issuancePolicy")]
    pub issuance_policy: Option<CAPoolInitProviderIssuancePolicy>,
    /// Labels with user-defined metadata.
    /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
    /// "1.3kg", "count": "3" }.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishingOptions")]
    pub publishing_options: Option<CAPoolInitProviderPublishingOptions>,
    /// The Tier of this CaPool.
    /// Possible values are: ENTERPRISE, DEVOPS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tier: Option<String>,
}

/// The IssuancePolicy to control how Certificates will be issued from this CaPool.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProviderIssuancePolicy {
    /// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedIssuanceModes")]
    pub allowed_issuance_modes: Option<CAPoolInitProviderIssuancePolicyAllowedIssuanceModes>,
    /// If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here.
    /// Otherwise, any key may be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedKeyTypes")]
    pub allowed_key_types: Option<Vec<CAPoolInitProviderIssuancePolicyAllowedKeyTypes>>,
    /// A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request
    /// includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate
    /// request uses a CertificateTemplate that defines conflicting predefinedValues for the same properties, the certificate
    /// issuance request will fail.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baselineValues")]
    pub baseline_values: Option<CAPoolInitProviderIssuancePolicyBaselineValues>,
    /// Describes constraints on identities that may appear in Certificates issued through this CaPool.
    /// If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityConstraints")]
    pub identity_constraints: Option<CAPoolInitProviderIssuancePolicyIdentityConstraints>,
    /// The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority
    /// expires before a Certificate's requested maximumLifetime, the effective lifetime will be explicitly truncated to match it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumLifetime")]
    pub maximum_lifetime: Option<String>,
}

/// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProviderIssuancePolicyAllowedIssuanceModes {
    /// When true, allows callers to create Certificates by specifying a CertificateConfig.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowConfigBasedIssuance")]
    pub allow_config_based_issuance: Option<bool>,
    /// When true, allows callers to create Certificates by specifying a CSR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowCsrBasedIssuance")]
    pub allow_csr_based_issuance: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProviderIssuancePolicyAllowedKeyTypes {
    /// Represents an allowed Elliptic Curve key type.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ellipticCurve")]
    pub elliptic_curve: Option<CAPoolInitProviderIssuancePolicyAllowedKeyTypesEllipticCurve>,
    /// Describes an RSA key that may be used in a Certificate issued from a CaPool.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rsa: Option<CAPoolInitProviderIssuancePolicyAllowedKeyTypesRsa>,
}

/// Represents an allowed Elliptic Curve key type.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProviderIssuancePolicyAllowedKeyTypesEllipticCurve {
    /// The algorithm used.
    /// Possible values are: ECDSA_P256, ECDSA_P384, EDDSA_25519.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signatureAlgorithm")]
    pub signature_algorithm: Option<String>,
}

/// Describes an RSA key that may be used in a Certificate issued from a CaPool.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProviderIssuancePolicyAllowedKeyTypesRsa {
    /// The maximum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
    /// service will not enforce an explicit upper bound on RSA modulus sizes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxModulusSize")]
    pub max_modulus_size: Option<String>,
    /// The minimum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
    /// service-level min RSA modulus size will continue to apply.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minModulusSize")]
    pub min_modulus_size: Option<String>,
}

/// A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request
/// includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate
/// request uses a CertificateTemplate that defines conflicting predefinedValues for the same properties, the certificate
/// issuance request will fail.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProviderIssuancePolicyBaselineValues {
    /// Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalExtensions")]
    pub additional_extensions: Option<Vec<CAPoolInitProviderIssuancePolicyBaselineValuesAdditionalExtensions>>,
    /// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
    /// "Authority Information Access" extension in the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aiaOcspServers")]
    pub aia_ocsp_servers: Option<Vec<String>>,
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caOptions")]
    pub ca_options: Option<CAPoolInitProviderIssuancePolicyBaselineValuesCaOptions>,
    /// Indicates the intended use for keys that correspond to a certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyUsage")]
    pub key_usage: Option<CAPoolInitProviderIssuancePolicyBaselineValuesKeyUsage>,
    /// Describes the X.509 name constraints extension.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameConstraints")]
    pub name_constraints: Option<CAPoolInitProviderIssuancePolicyBaselineValuesNameConstraints>,
    /// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyIds")]
    pub policy_ids: Option<Vec<CAPoolInitProviderIssuancePolicyBaselineValuesPolicyIds>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProviderIssuancePolicyBaselineValuesAdditionalExtensions {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub critical: Option<bool>,
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectId")]
    pub object_id: Option<CAPoolInitProviderIssuancePolicyBaselineValuesAdditionalExtensionsObjectId>,
    /// The value of this X.509 extension. A base64-encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Describes values that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProviderIssuancePolicyBaselineValuesAdditionalExtensionsObjectId {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

/// Describes values that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProviderIssuancePolicyBaselineValuesCaOptions {
    /// When true, the "CA" in Basic Constraints extension will be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isCa")]
    pub is_ca: Option<bool>,
    /// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
    /// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxIssuerPathLength")]
    pub max_issuer_path_length: Option<f64>,
    /// When true, the "CA" in Basic Constraints extension will be set to false.
    /// If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonCa")]
    pub non_ca: Option<bool>,
    /// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
    /// if both max_issuer_path_length and zero_max_issuer_path_length are unset,
    /// the max path length will be omitted from the CA certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "zeroMaxIssuerPathLength")]
    pub zero_max_issuer_path_length: Option<bool>,
}

/// Indicates the intended use for keys that correspond to a certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProviderIssuancePolicyBaselineValuesKeyUsage {
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseKeyUsage")]
    pub base_key_usage: Option<CAPoolInitProviderIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage>,
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extendedKeyUsage")]
    pub extended_key_usage: Option<CAPoolInitProviderIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage>,
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unknownExtendedKeyUsages")]
    pub unknown_extended_key_usages: Option<Vec<CAPoolInitProviderIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsages>>,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProviderIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage {
    /// The key may be used to sign certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSign")]
    pub cert_sign: Option<bool>,
    /// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentCommitment")]
    pub content_commitment: Option<bool>,
    /// The key may be used sign certificate revocation lists.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crlSign")]
    pub crl_sign: Option<bool>,
    /// The key may be used to encipher data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataEncipherment")]
    pub data_encipherment: Option<bool>,
    /// The key may be used to decipher only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "decipherOnly")]
    pub decipher_only: Option<bool>,
    /// The key may be used for digital signatures.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "digitalSignature")]
    pub digital_signature: Option<bool>,
    /// The key may be used to encipher only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encipherOnly")]
    pub encipher_only: Option<bool>,
    /// The key may be used in a key agreement protocol.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyAgreement")]
    pub key_agreement: Option<bool>,
    /// The key may be used to encipher other keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyEncipherment")]
    pub key_encipherment: Option<bool>,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProviderIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage {
    /// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientAuth")]
    pub client_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeSigning")]
    pub code_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emailProtection")]
    pub email_protection: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspSigning")]
    pub ocsp_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverAuth")]
    pub server_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeStamping")]
    pub time_stamping: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProviderIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsages {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

/// Describes the X.509 name constraints extension.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProviderIssuancePolicyBaselineValuesNameConstraints {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub critical: Option<bool>,
    /// Contains excluded DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedDnsNames")]
    pub excluded_dns_names: Option<Vec<String>>,
    /// Contains the excluded email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedEmailAddresses")]
    pub excluded_email_addresses: Option<Vec<String>>,
    /// Contains the excluded IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedIpRanges")]
    pub excluded_ip_ranges: Option<Vec<String>>,
    /// Contains the excluded URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedUris")]
    pub excluded_uris: Option<Vec<String>>,
    /// Contains permitted DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permittedDnsNames")]
    pub permitted_dns_names: Option<Vec<String>>,
    /// Contains the permitted email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permittedEmailAddresses")]
    pub permitted_email_addresses: Option<Vec<String>>,
    /// Contains the permitted IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permittedIpRanges")]
    pub permitted_ip_ranges: Option<Vec<String>>,
    /// Contains the permitted URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permittedUris")]
    pub permitted_uris: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProviderIssuancePolicyBaselineValuesPolicyIds {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

/// Describes constraints on identities that may appear in Certificates issued through this CaPool.
/// If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProviderIssuancePolicyIdentityConstraints {
    /// If this is set, the SubjectAltNames extension may be copied from a certificate request into the signed certificate.
    /// Otherwise, the requested SubjectAltNames will be discarded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowSubjectAltNamesPassthrough")]
    pub allow_subject_alt_names_passthrough: Option<bool>,
    /// If this is set, the Subject field may be copied from a certificate request into the signed certificate.
    /// Otherwise, the requested Subject will be discarded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowSubjectPassthrough")]
    pub allow_subject_passthrough: Option<bool>,
    /// A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a
    /// certificate is signed. To see the full allowed syntax and some examples,
    /// see https://cloud.google.com/certificate-authority-service/docs/cel-guide
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "celExpression")]
    pub cel_expression: Option<CAPoolInitProviderIssuancePolicyIdentityConstraintsCelExpression>,
}

/// A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a
/// certificate is signed. To see the full allowed syntax and some examples,
/// see https://cloud.google.com/certificate-authority-service/docs/cel-guide
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProviderIssuancePolicyIdentityConstraintsCelExpression {
    /// Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Textual representation of an expression in Common Expression Language syntax.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    /// Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

/// The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolInitProviderPublishingOptions {
    /// Specifies the encoding format of each CertificateAuthority's CA
    /// certificate and CRLs. If this is omitted, CA certificates and CRLs
    /// will be published in PEM.
    /// Possible values are: PEM, DER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encodingFormat")]
    pub encoding_format: Option<String>,
    /// When true, publishes each CertificateAuthority's CA certificate and includes its URL in the "Authority Information Access"
    /// X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding
    /// X.509 extension will not be written in issued certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishCaCert")]
    pub publish_ca_cert: Option<bool>,
    /// When true, publishes each CertificateAuthority's CRL and includes its URL in the "CRL Distribution Points" X.509 extension
    /// in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not
    /// be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are
    /// also rebuilt shortly after a certificate is revoked.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishCrl")]
    pub publish_crl: Option<bool>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CAPoolProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CAPoolProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CAPoolProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CAPoolProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CAPoolProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<CAPoolPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<CAPoolPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CAPoolPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CAPoolPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CAPoolPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CAPoolPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CAPoolPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// CAPoolStatus defines the observed state of CAPool.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<CAPoolStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProvider {
    /// for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/caPools/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The IssuancePolicy to control how Certificates will be issued from this CaPool.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "issuancePolicy")]
    pub issuance_policy: Option<CAPoolStatusAtProviderIssuancePolicy>,
    /// Labels with user-defined metadata.
    /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass":
    /// "1.3kg", "count": "3" }.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Location of the CaPool. A full list of valid locations can be found by
    /// running gcloud privateca locations list.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishingOptions")]
    pub publishing_options: Option<CAPoolStatusAtProviderPublishingOptions>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// The Tier of this CaPool.
    /// Possible values are: ENTERPRISE, DEVOPS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tier: Option<String>,
}

/// The IssuancePolicy to control how Certificates will be issued from this CaPool.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProviderIssuancePolicy {
    /// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedIssuanceModes")]
    pub allowed_issuance_modes: Option<CAPoolStatusAtProviderIssuancePolicyAllowedIssuanceModes>,
    /// If any AllowedKeyType is specified, then the certificate request's public key must match one of the key types listed here.
    /// Otherwise, any key may be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedKeyTypes")]
    pub allowed_key_types: Option<Vec<CAPoolStatusAtProviderIssuancePolicyAllowedKeyTypes>>,
    /// A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request
    /// includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate
    /// request uses a CertificateTemplate that defines conflicting predefinedValues for the same properties, the certificate
    /// issuance request will fail.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baselineValues")]
    pub baseline_values: Option<CAPoolStatusAtProviderIssuancePolicyBaselineValues>,
    /// Describes constraints on identities that may appear in Certificates issued through this CaPool.
    /// If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityConstraints")]
    pub identity_constraints: Option<CAPoolStatusAtProviderIssuancePolicyIdentityConstraints>,
    /// The maximum lifetime allowed for issued Certificates. Note that if the issuing CertificateAuthority
    /// expires before a Certificate's requested maximumLifetime, the effective lifetime will be explicitly truncated to match it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumLifetime")]
    pub maximum_lifetime: Option<String>,
}

/// IssuanceModes specifies the allowed ways in which Certificates may be requested from this CaPool.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProviderIssuancePolicyAllowedIssuanceModes {
    /// When true, allows callers to create Certificates by specifying a CertificateConfig.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowConfigBasedIssuance")]
    pub allow_config_based_issuance: Option<bool>,
    /// When true, allows callers to create Certificates by specifying a CSR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowCsrBasedIssuance")]
    pub allow_csr_based_issuance: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProviderIssuancePolicyAllowedKeyTypes {
    /// Represents an allowed Elliptic Curve key type.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ellipticCurve")]
    pub elliptic_curve: Option<CAPoolStatusAtProviderIssuancePolicyAllowedKeyTypesEllipticCurve>,
    /// Describes an RSA key that may be used in a Certificate issued from a CaPool.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rsa: Option<CAPoolStatusAtProviderIssuancePolicyAllowedKeyTypesRsa>,
}

/// Represents an allowed Elliptic Curve key type.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProviderIssuancePolicyAllowedKeyTypesEllipticCurve {
    /// The algorithm used.
    /// Possible values are: ECDSA_P256, ECDSA_P384, EDDSA_25519.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signatureAlgorithm")]
    pub signature_algorithm: Option<String>,
}

/// Describes an RSA key that may be used in a Certificate issued from a CaPool.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProviderIssuancePolicyAllowedKeyTypesRsa {
    /// The maximum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
    /// service will not enforce an explicit upper bound on RSA modulus sizes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxModulusSize")]
    pub max_modulus_size: Option<String>,
    /// The minimum allowed RSA modulus size, in bits. If this is not set, or if set to zero, the
    /// service-level min RSA modulus size will continue to apply.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minModulusSize")]
    pub min_modulus_size: Option<String>,
}

/// A set of X.509 values that will be applied to all certificates issued through this CaPool. If a certificate request
/// includes conflicting values for the same properties, they will be overwritten by the values defined here. If a certificate
/// request uses a CertificateTemplate that defines conflicting predefinedValues for the same properties, the certificate
/// issuance request will fail.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProviderIssuancePolicyBaselineValues {
    /// Specifies an X.509 extension, which may be used in different parts of X.509 objects like certificates, CSRs, and CRLs.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalExtensions")]
    pub additional_extensions: Option<Vec<CAPoolStatusAtProviderIssuancePolicyBaselineValuesAdditionalExtensions>>,
    /// Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the
    /// "Authority Information Access" extension in the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aiaOcspServers")]
    pub aia_ocsp_servers: Option<Vec<String>>,
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caOptions")]
    pub ca_options: Option<CAPoolStatusAtProviderIssuancePolicyBaselineValuesCaOptions>,
    /// Indicates the intended use for keys that correspond to a certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyUsage")]
    pub key_usage: Option<CAPoolStatusAtProviderIssuancePolicyBaselineValuesKeyUsage>,
    /// Describes the X.509 name constraints extension.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameConstraints")]
    pub name_constraints: Option<CAPoolStatusAtProviderIssuancePolicyBaselineValuesNameConstraints>,
    /// Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyIds")]
    pub policy_ids: Option<Vec<CAPoolStatusAtProviderIssuancePolicyBaselineValuesPolicyIds>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProviderIssuancePolicyBaselineValuesAdditionalExtensions {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub critical: Option<bool>,
    /// Describes values that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectId")]
    pub object_id: Option<CAPoolStatusAtProviderIssuancePolicyBaselineValuesAdditionalExtensionsObjectId>,
    /// The value of this X.509 extension. A base64-encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Describes values that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProviderIssuancePolicyBaselineValuesAdditionalExtensionsObjectId {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

/// Describes values that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProviderIssuancePolicyBaselineValuesCaOptions {
    /// When true, the "CA" in Basic Constraints extension will be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isCa")]
    pub is_ca: Option<bool>,
    /// Refers to the "path length constraint" in Basic Constraints extension. For a CA certificate, this value describes the depth of
    /// subordinate CA certificates that are allowed. If this value is less than 0, the request will fail.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxIssuerPathLength")]
    pub max_issuer_path_length: Option<f64>,
    /// When true, the "CA" in Basic Constraints extension will be set to false.
    /// If both is_ca and non_ca are unset, the extension will be omitted from the CA certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nonCa")]
    pub non_ca: Option<bool>,
    /// When true, the "path length constraint" in Basic Constraints extension will be set to 0.
    /// if both max_issuer_path_length and zero_max_issuer_path_length are unset,
    /// the max path length will be omitted from the CA certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "zeroMaxIssuerPathLength")]
    pub zero_max_issuer_path_length: Option<bool>,
}

/// Indicates the intended use for keys that correspond to a certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProviderIssuancePolicyBaselineValuesKeyUsage {
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseKeyUsage")]
    pub base_key_usage: Option<CAPoolStatusAtProviderIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage>,
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extendedKeyUsage")]
    pub extended_key_usage: Option<CAPoolStatusAtProviderIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage>,
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unknownExtendedKeyUsages")]
    pub unknown_extended_key_usages: Option<Vec<CAPoolStatusAtProviderIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsages>>,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProviderIssuancePolicyBaselineValuesKeyUsageBaseKeyUsage {
    /// The key may be used to sign certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSign")]
    pub cert_sign: Option<bool>,
    /// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentCommitment")]
    pub content_commitment: Option<bool>,
    /// The key may be used sign certificate revocation lists.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crlSign")]
    pub crl_sign: Option<bool>,
    /// The key may be used to encipher data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataEncipherment")]
    pub data_encipherment: Option<bool>,
    /// The key may be used to decipher only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "decipherOnly")]
    pub decipher_only: Option<bool>,
    /// The key may be used for digital signatures.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "digitalSignature")]
    pub digital_signature: Option<bool>,
    /// The key may be used to encipher only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encipherOnly")]
    pub encipher_only: Option<bool>,
    /// The key may be used in a key agreement protocol.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyAgreement")]
    pub key_agreement: Option<bool>,
    /// The key may be used to encipher other keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyEncipherment")]
    pub key_encipherment: Option<bool>,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProviderIssuancePolicyBaselineValuesKeyUsageExtendedKeyUsage {
    /// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientAuth")]
    pub client_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeSigning")]
    pub code_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emailProtection")]
    pub email_protection: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspSigning")]
    pub ocsp_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverAuth")]
    pub server_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeStamping")]
    pub time_stamping: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProviderIssuancePolicyBaselineValuesKeyUsageUnknownExtendedKeyUsages {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

/// Describes the X.509 name constraints extension.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProviderIssuancePolicyBaselineValuesNameConstraints {
    /// Indicates whether or not the name constraints are marked critical.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub critical: Option<bool>,
    /// Contains excluded DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedDnsNames")]
    pub excluded_dns_names: Option<Vec<String>>,
    /// Contains the excluded email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedEmailAddresses")]
    pub excluded_email_addresses: Option<Vec<String>>,
    /// Contains the excluded IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedIpRanges")]
    pub excluded_ip_ranges: Option<Vec<String>>,
    /// Contains the excluded URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludedUris")]
    pub excluded_uris: Option<Vec<String>>,
    /// Contains permitted DNS names. Any DNS name that can be
    /// constructed by simply adding zero or more labels to
    /// the left-hand side of the name satisfies the name constraint.
    /// For example, example.com, www.example.com, www.sub.example.com
    /// would satisfy example.com while example1.com does not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permittedDnsNames")]
    pub permitted_dns_names: Option<Vec<String>>,
    /// Contains the permitted email addresses. The value can be a particular
    /// email address, a hostname to indicate all email addresses on that host or
    /// a domain with a leading period (e.g. .example.com) to indicate
    /// all email addresses in that domain.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permittedEmailAddresses")]
    pub permitted_email_addresses: Option<Vec<String>>,
    /// Contains the permitted IP ranges. For IPv4 addresses, the ranges
    /// are expressed using CIDR notation as specified in RFC 4632.
    /// For IPv6 addresses, the ranges are expressed in similar encoding as IPv4
    /// addresses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permittedIpRanges")]
    pub permitted_ip_ranges: Option<Vec<String>>,
    /// Contains the permitted URIs that apply to the host part of the name.
    /// The value can be a hostname or a domain with a
    /// leading period (like .example.com)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "permittedUris")]
    pub permitted_uris: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProviderIssuancePolicyBaselineValuesPolicyIds {
    /// An ObjectId specifies an object identifier (OID). These provide context and describe types in ASN.1 messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

/// Describes constraints on identities that may appear in Certificates issued through this CaPool.
/// If this is omitted, then this CaPool will not add restrictions on a certificate's identity.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProviderIssuancePolicyIdentityConstraints {
    /// If this is set, the SubjectAltNames extension may be copied from a certificate request into the signed certificate.
    /// Otherwise, the requested SubjectAltNames will be discarded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowSubjectAltNamesPassthrough")]
    pub allow_subject_alt_names_passthrough: Option<bool>,
    /// If this is set, the Subject field may be copied from a certificate request into the signed certificate.
    /// Otherwise, the requested Subject will be discarded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowSubjectPassthrough")]
    pub allow_subject_passthrough: Option<bool>,
    /// A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a
    /// certificate is signed. To see the full allowed syntax and some examples,
    /// see https://cloud.google.com/certificate-authority-service/docs/cel-guide
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "celExpression")]
    pub cel_expression: Option<CAPoolStatusAtProviderIssuancePolicyIdentityConstraintsCelExpression>,
}

/// A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a
/// certificate is signed. To see the full allowed syntax and some examples,
/// see https://cloud.google.com/certificate-authority-service/docs/cel-guide
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProviderIssuancePolicyIdentityConstraintsCelExpression {
    /// Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Textual representation of an expression in Common Expression Language syntax.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    /// Location of the CaPool. A full list of valid locations can be found by
    /// running gcloud privateca locations list.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

/// The PublishingOptions to follow when issuing Certificates from any CertificateAuthority in this CaPool.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CAPoolStatusAtProviderPublishingOptions {
    /// Specifies the encoding format of each CertificateAuthority's CA
    /// certificate and CRLs. If this is omitted, CA certificates and CRLs
    /// will be published in PEM.
    /// Possible values are: PEM, DER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encodingFormat")]
    pub encoding_format: Option<String>,
    /// When true, publishes each CertificateAuthority's CA certificate and includes its URL in the "Authority Information Access"
    /// X.509 extension in all issued Certificates. If this is false, the CA certificate will not be published and the corresponding
    /// X.509 extension will not be written in issued certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishCaCert")]
    pub publish_ca_cert: Option<bool>,
    /// When true, publishes each CertificateAuthority's CRL and includes its URL in the "CRL Distribution Points" X.509 extension
    /// in all issued Certificates. If this is false, CRLs will not be published and the corresponding X.509 extension will not
    /// be written in issued certificates. CRLs will expire 7 days from their creation. However, we will rebuild daily. CRLs are
    /// also rebuilt shortly after a certificate is revoked.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishCrl")]
    pub publish_crl: Option<bool>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// CertificateTemplateSpec defines the desired state of CertificateTemplate
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "privateca.gcp.upbound.io", version = "v1beta2", kind = "CertificateTemplate", plural = "certificatetemplates")]
#[kube(status = "CertificateTemplateStatus")]
pub struct CertificateTemplateSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<CertificateTemplateDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: CertificateTemplateForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<CertificateTemplateInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<CertificateTemplateProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<CertificateTemplatePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<CertificateTemplateWriteConnectionSecretToRef>,
}

/// CertificateTemplateSpec defines the desired state of CertificateTemplate
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateTemplateDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateForProvider {
    /// Optional. A human-readable description of scenarios this template is intended for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate's identity.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityConstraints")]
    pub identity_constraints: Option<CertificateTemplateForProviderIdentityConstraints>,
    /// Optional. Labels with user-defined metadata.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The location for the resource
    pub location: String,
    /// Optional. The maximum lifetime allowed for all issued certificates that use this template. If the issuing CaPool's IssuancePolicy specifies a maximum lifetime the minimum of the two durations will be the maximum lifetime for issued. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumLifetime")]
    pub maximum_lifetime: Option<String>,
    /// Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool's IssuancePolicy defines baseline_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate's predefined_values.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passthroughExtensions")]
    pub passthrough_extensions: Option<CertificateTemplateForProviderPassthroughExtensions>,
    /// Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool's IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedValues")]
    pub predefined_values: Option<CertificateTemplateForProviderPredefinedValues>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

/// Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate's identity.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateForProviderIdentityConstraints {
    /// Required. If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowSubjectAltNamesPassthrough")]
    pub allow_subject_alt_names_passthrough: Option<bool>,
    /// Required. If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowSubjectPassthrough")]
    pub allow_subject_passthrough: Option<bool>,
    /// Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "celExpression")]
    pub cel_expression: Option<CertificateTemplateForProviderIdentityConstraintsCelExpression>,
}

/// Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateForProviderIdentityConstraintsCelExpression {
    /// Optional. A human-readable description of scenarios this template is intended for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Textual representation of an expression in Common Expression Language syntax.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    /// The location for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

/// Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool's IssuancePolicy defines baseline_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate's predefined_values.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateForProviderPassthroughExtensions {
    /// Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalExtensions")]
    pub additional_extensions: Option<Vec<CertificateTemplateForProviderPassthroughExtensionsAdditionalExtensions>>,
    /// Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "knownExtensions")]
    pub known_extensions: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateForProviderPassthroughExtensionsAdditionalExtensions {
    /// Required. The parts of an OID path. The most significant parts of the path come first.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

/// Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool's IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateForProviderPredefinedValues {
    /// Optional. Describes custom X.509 extensions.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalExtensions")]
    pub additional_extensions: Option<Vec<CertificateTemplateForProviderPredefinedValuesAdditionalExtensions>>,
    /// Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aiaOcspServers")]
    pub aia_ocsp_servers: Option<Vec<String>>,
    /// Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caOptions")]
    pub ca_options: Option<CertificateTemplateForProviderPredefinedValuesCaOptions>,
    /// Optional. Indicates the intended use for keys that correspond to a certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyUsage")]
    pub key_usage: Option<CertificateTemplateForProviderPredefinedValuesKeyUsage>,
    /// Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyIds")]
    pub policy_ids: Option<Vec<CertificateTemplateForProviderPredefinedValuesPolicyIds>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateForProviderPredefinedValuesAdditionalExtensions {
    /// Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub critical: Option<bool>,
    /// Required. The OID for this X.509 extension.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectId")]
    pub object_id: Option<CertificateTemplateForProviderPredefinedValuesAdditionalExtensionsObjectId>,
    /// Required. The value of this X.509 extension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Required. The OID for this X.509 extension.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateForProviderPredefinedValuesAdditionalExtensionsObjectId {
    /// Required. The parts of an OID path. The most significant parts of the path come first.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

/// Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateForProviderPredefinedValuesCaOptions {
    /// Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isCa")]
    pub is_ca: Option<bool>,
    /// Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxIssuerPathLength")]
    pub max_issuer_path_length: Option<f64>,
}

/// Optional. Indicates the intended use for keys that correspond to a certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateForProviderPredefinedValuesKeyUsage {
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseKeyUsage")]
    pub base_key_usage: Option<CertificateTemplateForProviderPredefinedValuesKeyUsageBaseKeyUsage>,
    /// Detailed scenarios in which a key may be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extendedKeyUsage")]
    pub extended_key_usage: Option<CertificateTemplateForProviderPredefinedValuesKeyUsageExtendedKeyUsage>,
    /// Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unknownExtendedKeyUsages")]
    pub unknown_extended_key_usages: Option<Vec<CertificateTemplateForProviderPredefinedValuesKeyUsageUnknownExtendedKeyUsages>>,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateForProviderPredefinedValuesKeyUsageBaseKeyUsage {
    /// The key may be used to sign certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSign")]
    pub cert_sign: Option<bool>,
    /// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentCommitment")]
    pub content_commitment: Option<bool>,
    /// The key may be used sign certificate revocation lists.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crlSign")]
    pub crl_sign: Option<bool>,
    /// The key may be used to encipher data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataEncipherment")]
    pub data_encipherment: Option<bool>,
    /// The key may be used to decipher only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "decipherOnly")]
    pub decipher_only: Option<bool>,
    /// The key may be used for digital signatures.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "digitalSignature")]
    pub digital_signature: Option<bool>,
    /// The key may be used to encipher only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encipherOnly")]
    pub encipher_only: Option<bool>,
    /// The key may be used in a key agreement protocol.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyAgreement")]
    pub key_agreement: Option<bool>,
    /// The key may be used to encipher other keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyEncipherment")]
    pub key_encipherment: Option<bool>,
}

/// Detailed scenarios in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateForProviderPredefinedValuesKeyUsageExtendedKeyUsage {
    /// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientAuth")]
    pub client_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeSigning")]
    pub code_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emailProtection")]
    pub email_protection: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspSigning")]
    pub ocsp_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverAuth")]
    pub server_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeStamping")]
    pub time_stamping: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateForProviderPredefinedValuesKeyUsageUnknownExtendedKeyUsages {
    /// Required. The parts of an OID path. The most significant parts of the path come first.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateForProviderPredefinedValuesPolicyIds {
    /// Required. The parts of an OID path. The most significant parts of the path come first.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateInitProvider {
    /// Optional. A human-readable description of scenarios this template is intended for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate's identity.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityConstraints")]
    pub identity_constraints: Option<CertificateTemplateInitProviderIdentityConstraints>,
    /// Optional. Labels with user-defined metadata.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Optional. The maximum lifetime allowed for all issued certificates that use this template. If the issuing CaPool's IssuancePolicy specifies a maximum lifetime the minimum of the two durations will be the maximum lifetime for issued. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumLifetime")]
    pub maximum_lifetime: Option<String>,
    /// Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool's IssuancePolicy defines baseline_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate's predefined_values.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passthroughExtensions")]
    pub passthrough_extensions: Option<CertificateTemplateInitProviderPassthroughExtensions>,
    /// Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool's IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedValues")]
    pub predefined_values: Option<CertificateTemplateInitProviderPredefinedValues>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

/// Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate's identity.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateInitProviderIdentityConstraints {
    /// Required. If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowSubjectAltNamesPassthrough")]
    pub allow_subject_alt_names_passthrough: Option<bool>,
    /// Required. If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowSubjectPassthrough")]
    pub allow_subject_passthrough: Option<bool>,
    /// Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "celExpression")]
    pub cel_expression: Option<CertificateTemplateInitProviderIdentityConstraintsCelExpression>,
}

/// Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateInitProviderIdentityConstraintsCelExpression {
    /// Optional. A human-readable description of scenarios this template is intended for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Textual representation of an expression in Common Expression Language syntax.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    /// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

/// Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool's IssuancePolicy defines baseline_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate's predefined_values.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateInitProviderPassthroughExtensions {
    /// Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalExtensions")]
    pub additional_extensions: Option<Vec<CertificateTemplateInitProviderPassthroughExtensionsAdditionalExtensions>>,
    /// Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "knownExtensions")]
    pub known_extensions: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateInitProviderPassthroughExtensionsAdditionalExtensions {
    /// Required. The parts of an OID path. The most significant parts of the path come first.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

/// Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool's IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateInitProviderPredefinedValues {
    /// Optional. Describes custom X.509 extensions.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalExtensions")]
    pub additional_extensions: Option<Vec<CertificateTemplateInitProviderPredefinedValuesAdditionalExtensions>>,
    /// Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aiaOcspServers")]
    pub aia_ocsp_servers: Option<Vec<String>>,
    /// Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caOptions")]
    pub ca_options: Option<CertificateTemplateInitProviderPredefinedValuesCaOptions>,
    /// Optional. Indicates the intended use for keys that correspond to a certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyUsage")]
    pub key_usage: Option<CertificateTemplateInitProviderPredefinedValuesKeyUsage>,
    /// Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyIds")]
    pub policy_ids: Option<Vec<CertificateTemplateInitProviderPredefinedValuesPolicyIds>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateInitProviderPredefinedValuesAdditionalExtensions {
    /// Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub critical: Option<bool>,
    /// Required. The OID for this X.509 extension.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectId")]
    pub object_id: Option<CertificateTemplateInitProviderPredefinedValuesAdditionalExtensionsObjectId>,
    /// Required. The value of this X.509 extension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Required. The OID for this X.509 extension.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateInitProviderPredefinedValuesAdditionalExtensionsObjectId {
    /// Required. The parts of an OID path. The most significant parts of the path come first.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

/// Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateInitProviderPredefinedValuesCaOptions {
    /// Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isCa")]
    pub is_ca: Option<bool>,
    /// Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxIssuerPathLength")]
    pub max_issuer_path_length: Option<f64>,
}

/// Optional. Indicates the intended use for keys that correspond to a certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateInitProviderPredefinedValuesKeyUsage {
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseKeyUsage")]
    pub base_key_usage: Option<CertificateTemplateInitProviderPredefinedValuesKeyUsageBaseKeyUsage>,
    /// Detailed scenarios in which a key may be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extendedKeyUsage")]
    pub extended_key_usage: Option<CertificateTemplateInitProviderPredefinedValuesKeyUsageExtendedKeyUsage>,
    /// Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unknownExtendedKeyUsages")]
    pub unknown_extended_key_usages: Option<Vec<CertificateTemplateInitProviderPredefinedValuesKeyUsageUnknownExtendedKeyUsages>>,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateInitProviderPredefinedValuesKeyUsageBaseKeyUsage {
    /// The key may be used to sign certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSign")]
    pub cert_sign: Option<bool>,
    /// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentCommitment")]
    pub content_commitment: Option<bool>,
    /// The key may be used sign certificate revocation lists.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crlSign")]
    pub crl_sign: Option<bool>,
    /// The key may be used to encipher data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataEncipherment")]
    pub data_encipherment: Option<bool>,
    /// The key may be used to decipher only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "decipherOnly")]
    pub decipher_only: Option<bool>,
    /// The key may be used for digital signatures.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "digitalSignature")]
    pub digital_signature: Option<bool>,
    /// The key may be used to encipher only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encipherOnly")]
    pub encipher_only: Option<bool>,
    /// The key may be used in a key agreement protocol.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyAgreement")]
    pub key_agreement: Option<bool>,
    /// The key may be used to encipher other keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyEncipherment")]
    pub key_encipherment: Option<bool>,
}

/// Detailed scenarios in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateInitProviderPredefinedValuesKeyUsageExtendedKeyUsage {
    /// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientAuth")]
    pub client_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeSigning")]
    pub code_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emailProtection")]
    pub email_protection: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspSigning")]
    pub ocsp_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverAuth")]
    pub server_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeStamping")]
    pub time_stamping: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateInitProviderPredefinedValuesKeyUsageUnknownExtendedKeyUsages {
    /// Required. The parts of an OID path. The most significant parts of the path come first.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateInitProviderPredefinedValuesPolicyIds {
    /// Required. The parts of an OID path. The most significant parts of the path come first.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CertificateTemplateProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CertificateTemplateProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CertificateTemplateProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateTemplateProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateTemplateProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplatePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<CertificateTemplatePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<CertificateTemplatePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplatePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CertificateTemplatePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplatePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CertificateTemplatePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CertificateTemplatePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateTemplatePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CertificateTemplatePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplatePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// CertificateTemplateStatus defines the observed state of CertificateTemplate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<CertificateTemplateStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateStatusAtProvider {
    /// Output only. The time at which this CertificateTemplate was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createTime")]
    pub create_time: Option<String>,
    /// Optional. A human-readable description of scenarios this template is intended for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/certificateTemplates/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate's identity.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityConstraints")]
    pub identity_constraints: Option<CertificateTemplateStatusAtProviderIdentityConstraints>,
    /// Optional. Labels with user-defined metadata.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The location for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Optional. The maximum lifetime allowed for all issued certificates that use this template. If the issuing CaPool's IssuancePolicy specifies a maximum lifetime the minimum of the two durations will be the maximum lifetime for issued. Note that if the issuing CertificateAuthority expires before a Certificate's requested maximum_lifetime, the effective lifetime will be explicitly truncated to match it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumLifetime")]
    pub maximum_lifetime: Option<String>,
    /// Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool's IssuancePolicy defines baseline_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate's predefined_values.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passthroughExtensions")]
    pub passthrough_extensions: Option<CertificateTemplateStatusAtProviderPassthroughExtensions>,
    /// Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool's IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predefinedValues")]
    pub predefined_values: Option<CertificateTemplateStatusAtProviderPredefinedValues>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// Output only. The time at which this CertificateTemplate was updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateTime")]
    pub update_time: Option<String>,
}

/// Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate's identity.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateStatusAtProviderIdentityConstraints {
    /// Required. If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowSubjectAltNamesPassthrough")]
    pub allow_subject_alt_names_passthrough: Option<bool>,
    /// Required. If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowSubjectPassthrough")]
    pub allow_subject_passthrough: Option<bool>,
    /// Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "celExpression")]
    pub cel_expression: Option<CertificateTemplateStatusAtProviderIdentityConstraintsCelExpression>,
}

/// Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateStatusAtProviderIdentityConstraintsCelExpression {
    /// Optional. A human-readable description of scenarios this template is intended for.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Textual representation of an expression in Common Expression Language syntax.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub expression: Option<String>,
    /// The location for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
}

/// Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool's IssuancePolicy defines baseline_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate's predefined_values.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateStatusAtProviderPassthroughExtensions {
    /// Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalExtensions")]
    pub additional_extensions: Option<Vec<CertificateTemplateStatusAtProviderPassthroughExtensionsAdditionalExtensions>>,
    /// Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "knownExtensions")]
    pub known_extensions: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateStatusAtProviderPassthroughExtensionsAdditionalExtensions {
    /// Required. The parts of an OID path. The most significant parts of the path come first.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

/// Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool's IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateStatusAtProviderPredefinedValues {
    /// Optional. Describes custom X.509 extensions.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalExtensions")]
    pub additional_extensions: Option<Vec<CertificateTemplateStatusAtProviderPredefinedValuesAdditionalExtensions>>,
    /// Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aiaOcspServers")]
    pub aia_ocsp_servers: Option<Vec<String>>,
    /// Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caOptions")]
    pub ca_options: Option<CertificateTemplateStatusAtProviderPredefinedValuesCaOptions>,
    /// Optional. Indicates the intended use for keys that correspond to a certificate.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyUsage")]
    pub key_usage: Option<CertificateTemplateStatusAtProviderPredefinedValuesKeyUsage>,
    /// Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyIds")]
    pub policy_ids: Option<Vec<CertificateTemplateStatusAtProviderPredefinedValuesPolicyIds>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateStatusAtProviderPredefinedValuesAdditionalExtensions {
    /// Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub critical: Option<bool>,
    /// Required. The OID for this X.509 extension.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectId")]
    pub object_id: Option<CertificateTemplateStatusAtProviderPredefinedValuesAdditionalExtensionsObjectId>,
    /// Required. The value of this X.509 extension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Required. The OID for this X.509 extension.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateStatusAtProviderPredefinedValuesAdditionalExtensionsObjectId {
    /// Required. The parts of an OID path. The most significant parts of the path come first.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

/// Optional. Describes options in this X509Parameters that are relevant in a CA certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateStatusAtProviderPredefinedValuesCaOptions {
    /// Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isCa")]
    pub is_ca: Option<bool>,
    /// Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxIssuerPathLength")]
    pub max_issuer_path_length: Option<f64>,
}

/// Optional. Indicates the intended use for keys that correspond to a certificate.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateStatusAtProviderPredefinedValuesKeyUsage {
    /// Describes high-level ways in which a key may be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseKeyUsage")]
    pub base_key_usage: Option<CertificateTemplateStatusAtProviderPredefinedValuesKeyUsageBaseKeyUsage>,
    /// Detailed scenarios in which a key may be used.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extendedKeyUsage")]
    pub extended_key_usage: Option<CertificateTemplateStatusAtProviderPredefinedValuesKeyUsageExtendedKeyUsage>,
    /// Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "unknownExtendedKeyUsages")]
    pub unknown_extended_key_usages: Option<Vec<CertificateTemplateStatusAtProviderPredefinedValuesKeyUsageUnknownExtendedKeyUsages>>,
}

/// Describes high-level ways in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateStatusAtProviderPredefinedValuesKeyUsageBaseKeyUsage {
    /// The key may be used to sign certificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certSign")]
    pub cert_sign: Option<bool>,
    /// The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentCommitment")]
    pub content_commitment: Option<bool>,
    /// The key may be used sign certificate revocation lists.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "crlSign")]
    pub crl_sign: Option<bool>,
    /// The key may be used to encipher data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataEncipherment")]
    pub data_encipherment: Option<bool>,
    /// The key may be used to decipher only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "decipherOnly")]
    pub decipher_only: Option<bool>,
    /// The key may be used for digital signatures.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "digitalSignature")]
    pub digital_signature: Option<bool>,
    /// The key may be used to encipher only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encipherOnly")]
    pub encipher_only: Option<bool>,
    /// The key may be used in a key agreement protocol.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyAgreement")]
    pub key_agreement: Option<bool>,
    /// The key may be used to encipher other keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyEncipherment")]
    pub key_encipherment: Option<bool>,
}

/// Detailed scenarios in which a key may be used.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateStatusAtProviderPredefinedValuesKeyUsageExtendedKeyUsage {
    /// Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientAuth")]
    pub client_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "codeSigning")]
    pub code_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emailProtection")]
    pub email_protection: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ocspSigning")]
    pub ocsp_signing: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverAuth")]
    pub server_auth: Option<bool>,
    /// Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeStamping")]
    pub time_stamping: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateStatusAtProviderPredefinedValuesKeyUsageUnknownExtendedKeyUsages {
    /// Required. The parts of an OID path. The most significant parts of the path come first.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CertificateTemplateStatusAtProviderPredefinedValuesPolicyIds {
    /// Required. The parts of an OID path. The most significant parts of the path come first.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "objectIdPath")]
    pub object_id_path: Option<Vec<f64>>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// AppProfileSpec defines the desired state of AppProfile
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "bigtable.gcp.upbound.io", version = "v1beta2", kind = "AppProfile", plural = "appprofiles")]
#[kube(status = "AppProfileStatus")]
pub struct AppProfileSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<AppProfileDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: AppProfileForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<AppProfileInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<AppProfileProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<AppProfilePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<AppProfileWriteConnectionSecretToRef>,
}

/// AppProfileSpec defines the desired state of AppProfile
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppProfileDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileForProvider {
    /// Specifies that this app profile is intended for read-only usage via the Data Boost feature.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataBoostIsolationReadOnly")]
    pub data_boost_isolation_read_only: Option<AppProfileForProviderDataBoostIsolationReadOnly>,
    /// Long form description of the use case for this app profile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If true, ignore safety checks when deleting/updating the app profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreWarnings")]
    pub ignore_warnings: Option<bool>,
    /// The name of the instance to create the app profile within.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instance: Option<String>,
    /// Reference to a Instance in bigtable to populate instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceRef")]
    pub instance_ref: Option<AppProfileForProviderInstanceRef>,
    /// Selector for a Instance in bigtable to populate instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceSelector")]
    pub instance_selector: Option<AppProfileForProviderInstanceSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiClusterRoutingClusterIds")]
    pub multi_cluster_routing_cluster_ids: Option<Vec<String>>,
    /// If true, read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available
    /// in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes
    /// consistency to improve availability.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiClusterRoutingUseAny")]
    pub multi_cluster_routing_use_any: Option<bool>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Use a single-cluster routing policy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "singleClusterRouting")]
    pub single_cluster_routing: Option<AppProfileForProviderSingleClusterRouting>,
    /// The standard options used for isolating this app profile's traffic from other use cases.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "standardIsolation")]
    pub standard_isolation: Option<AppProfileForProviderStandardIsolation>,
}

/// Specifies that this app profile is intended for read-only usage via the Data Boost feature.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileForProviderDataBoostIsolationReadOnly {
    /// The Compute Billing Owner for this Data Boost App Profile.
    /// Possible values are: HOST_PAYS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeBillingOwner")]
    pub compute_billing_owner: Option<String>,
}

/// Reference to a Instance in bigtable to populate instance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileForProviderInstanceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppProfileForProviderInstanceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileForProviderInstanceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppProfileForProviderInstanceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppProfileForProviderInstanceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppProfileForProviderInstanceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppProfileForProviderInstanceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Instance in bigtable to populate instance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileForProviderInstanceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppProfileForProviderInstanceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileForProviderInstanceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppProfileForProviderInstanceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppProfileForProviderInstanceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppProfileForProviderInstanceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppProfileForProviderInstanceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Use a single-cluster routing policy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileForProviderSingleClusterRouting {
    /// If true, CheckAndMutateRow and ReadModifyWriteRow requests are allowed by this app profile.
    /// It is unsafe to send these requests to the same table/row/column in multiple clusters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowTransactionalWrites")]
    pub allow_transactional_writes: Option<bool>,
    /// The cluster to which read/write requests should be routed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterId")]
    pub cluster_id: Option<String>,
}

/// The standard options used for isolating this app profile's traffic from other use cases.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileForProviderStandardIsolation {
    /// The priority of requests sent using this app profile.
    /// Possible values are: PRIORITY_LOW, PRIORITY_MEDIUM, PRIORITY_HIGH.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileInitProvider {
    /// Specifies that this app profile is intended for read-only usage via the Data Boost feature.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataBoostIsolationReadOnly")]
    pub data_boost_isolation_read_only: Option<AppProfileInitProviderDataBoostIsolationReadOnly>,
    /// Long form description of the use case for this app profile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If true, ignore safety checks when deleting/updating the app profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreWarnings")]
    pub ignore_warnings: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiClusterRoutingClusterIds")]
    pub multi_cluster_routing_cluster_ids: Option<Vec<String>>,
    /// If true, read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available
    /// in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes
    /// consistency to improve availability.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiClusterRoutingUseAny")]
    pub multi_cluster_routing_use_any: Option<bool>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Use a single-cluster routing policy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "singleClusterRouting")]
    pub single_cluster_routing: Option<AppProfileInitProviderSingleClusterRouting>,
    /// The standard options used for isolating this app profile's traffic from other use cases.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "standardIsolation")]
    pub standard_isolation: Option<AppProfileInitProviderStandardIsolation>,
}

/// Specifies that this app profile is intended for read-only usage via the Data Boost feature.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileInitProviderDataBoostIsolationReadOnly {
    /// The Compute Billing Owner for this Data Boost App Profile.
    /// Possible values are: HOST_PAYS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeBillingOwner")]
    pub compute_billing_owner: Option<String>,
}

/// Use a single-cluster routing policy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileInitProviderSingleClusterRouting {
    /// If true, CheckAndMutateRow and ReadModifyWriteRow requests are allowed by this app profile.
    /// It is unsafe to send these requests to the same table/row/column in multiple clusters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowTransactionalWrites")]
    pub allow_transactional_writes: Option<bool>,
    /// The cluster to which read/write requests should be routed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterId")]
    pub cluster_id: Option<String>,
}

/// The standard options used for isolating this app profile's traffic from other use cases.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileInitProviderStandardIsolation {
    /// The priority of requests sent using this app profile.
    /// Possible values are: PRIORITY_LOW, PRIORITY_MEDIUM, PRIORITY_HIGH.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppProfileProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppProfileProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppProfileProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppProfileProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppProfileProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfilePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<AppProfilePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<AppProfilePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfilePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppProfilePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfilePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppProfilePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppProfilePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppProfilePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppProfilePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfilePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// AppProfileStatus defines the observed state of AppProfile.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<AppProfileStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileStatusAtProvider {
    /// Specifies that this app profile is intended for read-only usage via the Data Boost feature.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataBoostIsolationReadOnly")]
    pub data_boost_isolation_read_only: Option<AppProfileStatusAtProviderDataBoostIsolationReadOnly>,
    /// Long form description of the use case for this app profile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/instances/{{instance}}/appProfiles/{{app_profile_id}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// If true, ignore safety checks when deleting/updating the app profile.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreWarnings")]
    pub ignore_warnings: Option<bool>,
    /// The name of the instance to create the app profile within.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instance: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiClusterRoutingClusterIds")]
    pub multi_cluster_routing_cluster_ids: Option<Vec<String>>,
    /// If true, read/write requests are routed to the nearest cluster in the instance, and will fail over to the nearest cluster that is available
    /// in the event of transient errors or delays. Clusters in a region are considered equidistant. Choosing this option sacrifices read-your-writes
    /// consistency to improve availability.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiClusterRoutingUseAny")]
    pub multi_cluster_routing_use_any: Option<bool>,
    /// The unique name of the requested app profile. Values are of the form projects/<project>/instances/<instance>/appProfiles/<appProfileId>.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Use a single-cluster routing policy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "singleClusterRouting")]
    pub single_cluster_routing: Option<AppProfileStatusAtProviderSingleClusterRouting>,
    /// The standard options used for isolating this app profile's traffic from other use cases.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "standardIsolation")]
    pub standard_isolation: Option<AppProfileStatusAtProviderStandardIsolation>,
}

/// Specifies that this app profile is intended for read-only usage via the Data Boost feature.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileStatusAtProviderDataBoostIsolationReadOnly {
    /// The Compute Billing Owner for this Data Boost App Profile.
    /// Possible values are: HOST_PAYS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeBillingOwner")]
    pub compute_billing_owner: Option<String>,
}

/// Use a single-cluster routing policy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileStatusAtProviderSingleClusterRouting {
    /// If true, CheckAndMutateRow and ReadModifyWriteRow requests are allowed by this app profile.
    /// It is unsafe to send these requests to the same table/row/column in multiple clusters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowTransactionalWrites")]
    pub allow_transactional_writes: Option<bool>,
    /// The cluster to which read/write requests should be routed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterId")]
    pub cluster_id: Option<String>,
}

/// The standard options used for isolating this app profile's traffic from other use cases.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProfileStatusAtProviderStandardIsolation {
    /// The priority of requests sent using this app profile.
    /// Possible values are: PRIORITY_LOW, PRIORITY_MEDIUM, PRIORITY_HIGH.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<String>,
}


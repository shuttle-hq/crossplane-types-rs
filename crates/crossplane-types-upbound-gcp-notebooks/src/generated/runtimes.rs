// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// RuntimeSpec defines the desired state of Runtime
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "notebooks.gcp.upbound.io", version = "v1beta2", kind = "Runtime", plural = "runtimes")]
#[kube(status = "RuntimeStatus")]
pub struct RuntimeSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<RuntimeDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: RuntimeForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<RuntimeInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<RuntimeProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<RuntimePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<RuntimeWriteConnectionSecretToRef>,
}

/// RuntimeSpec defines the desired state of Runtime
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RuntimeDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeForProvider {
    /// The config settings for accessing runtime.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessConfig")]
    pub access_config: Option<RuntimeForProviderAccessConfig>,
    /// The labels to associate with this runtime. Label keys must
    /// contain 1 to 63 characters, and must conform to [RFC 1035]
    /// (https://www.ietf.org/rfc/rfc1035.txt). Label values may be
    /// empty, but, if present, must contain 1 to 63 characters, and must
    /// conform to RFC 1035. No
    /// more than 32 labels can be associated with a cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// A reference to the zone where the machine resides.
    pub location: String,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The config settings for software inside the runtime.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "softwareConfig")]
    pub software_config: Option<RuntimeForProviderSoftwareConfig>,
    /// Use a Compute Engine VM image to start the managed notebook instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualMachine")]
    pub virtual_machine: Option<RuntimeForProviderVirtualMachine>,
}

/// The config settings for accessing runtime.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeForProviderAccessConfig {
    /// The type of access mode this instance. For valid values, see
    /// https://cloud.google.com/vertex-ai/docs/workbench/reference/ rest/v1/projects.locations.runtimes#RuntimeAccessType.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessType")]
    pub access_type: Option<String>,
    /// The owner of this runtime after creation. Format: alias@example.com.
    /// Currently supports one owner only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeOwner")]
    pub runtime_owner: Option<String>,
}

/// The config settings for software inside the runtime.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeForProviderSoftwareConfig {
    /// Specify a custom Cloud Storage path where the GPU driver is stored.
    /// If not specified, we'll automatically choose from official GPU drivers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customGpuDriverPath")]
    pub custom_gpu_driver_path: Option<String>,
    /// Verifies core internal services are running. Default: True.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableHealthMonitoring")]
    pub enable_health_monitoring: Option<bool>,
    /// Runtime will automatically shutdown after idle_shutdown_time.
    /// Default: True
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleShutdown")]
    pub idle_shutdown: Option<bool>,
    /// Time in minutes to wait before shuting down runtime.
    /// Default: 180 minutes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleShutdownTimeout")]
    pub idle_shutdown_timeout: Option<f64>,
    /// Install Nvidia Driver automatically.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installGpuDriver")]
    pub install_gpu_driver: Option<bool>,
    /// Use a list of container images to use as Kernels in the notebook instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kernels: Option<Vec<RuntimeForProviderSoftwareConfigKernels>>,
    /// Cron expression in UTC timezone for schedule instance auto upgrade.
    /// Please follow the cron format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notebookUpgradeSchedule")]
    pub notebook_upgrade_schedule: Option<String>,
    /// Path to a Bash script that automatically runs after a notebook instance
    /// fully boots up. The path must be a URL or
    /// Cloud Storage path (gs://path-to-file/file-name).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postStartupScript")]
    pub post_startup_script: Option<String>,
    /// Behavior for the post startup script.
    /// Possible values are: POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED, RUN_EVERY_START, DOWNLOAD_AND_RUN_EVERY_START.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postStartupScriptBehavior")]
    pub post_startup_script_behavior: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeForProviderSoftwareConfigKernels {
    /// The path to the container image repository.
    /// For example: gcr.io/{project_id}/{imageName}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// The tag of the container image. If not specified, this defaults to the latest tag.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// Use a Compute Engine VM image to start the managed notebook instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeForProviderVirtualMachine {
    /// Virtual Machine configuration settings.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualMachineConfig")]
    pub virtual_machine_config: Option<RuntimeForProviderVirtualMachineVirtualMachineConfig>,
}

/// Virtual Machine configuration settings.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeForProviderVirtualMachineVirtualMachineConfig {
    /// The Compute Engine accelerator configuration for this runtime.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorConfig")]
    pub accelerator_config: Option<RuntimeForProviderVirtualMachineVirtualMachineConfigAcceleratorConfig>,
    /// Use a list of container images to start the notebook instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerImages")]
    pub container_images: Option<Vec<RuntimeForProviderVirtualMachineVirtualMachineConfigContainerImages>>,
    /// Data disk option configuration settings.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataDisk")]
    pub data_disk: Option<RuntimeForProviderVirtualMachineVirtualMachineConfigDataDisk>,
    /// Encryption settings for virtual machine data disk.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfig")]
    pub encryption_config: Option<RuntimeForProviderVirtualMachineVirtualMachineConfigEncryptionConfig>,
    /// If true, runtime will only have internal IP addresses. By default,
    /// runtimes are not restricted to internal IP addresses, and will
    /// have ephemeral external IP addresses assigned to each vm. This
    /// internal_ip_only restriction can only be enabled for subnetwork
    /// enabled networks, and all dependencies must be configured to be
    /// accessible without external IP addresses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalIpOnly")]
    pub internal_ip_only: Option<bool>,
    /// The labels to associate with this runtime. Label keys must
    /// contain 1 to 63 characters, and must conform to [RFC 1035]
    /// (https://www.ietf.org/rfc/rfc1035.txt). Label values may be
    /// empty, but, if present, must contain 1 to 63 characters, and must
    /// conform to RFC 1035. No
    /// more than 32 labels can be associated with a cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The Compute Engine machine type used for runtimes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineType")]
    pub machine_type: Option<String>,
    /// The Compute Engine metadata entries to add to virtual machine.
    /// (see [Project and instance metadata](https://cloud.google.com
    /// /compute/docs/storing-retrieving-metadata#project_and_instance
    /// _metadata)).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<HashMap<String, String>>,
    /// The Compute Engine network to be used for machine communications.
    /// Cannot be specified with subnetwork. If neither network nor
    /// subnet is specified, the "default" network of the project is
    /// used, if it exists. A full URL or partial URI. Examples:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// The type of vNIC to be used on this interface. This may be gVNIC
    /// or VirtioNet.
    /// Possible values are: UNSPECIFIED_NIC_TYPE, VIRTIO_NET, GVNIC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nicType")]
    pub nic_type: Option<String>,
    /// Reserved IP Range name is used for VPC Peering. The
    /// subnetwork allocation will use the range name if it's assigned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reservedIpRange")]
    pub reserved_ip_range: Option<String>,
    /// Shielded VM Instance configuration settings.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shieldedInstanceConfig")]
    pub shielded_instance_config: Option<RuntimeForProviderVirtualMachineVirtualMachineConfigShieldedInstanceConfig>,
    /// The Compute Engine subnetwork to be used for machine
    /// communications. Cannot be specified with network. A full URL or
    /// partial URI are valid. Examples:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnet: Option<String>,
    /// The Compute Engine tags to add to runtime (see [Tagging instances]
    /// (https://cloud.google.com/compute/docs/
    /// label-or-tag-resources#tags)).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

/// The Compute Engine accelerator configuration for this runtime.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeForProviderVirtualMachineVirtualMachineConfigAcceleratorConfig {
    /// Count of cores of this accelerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreCount")]
    pub core_count: Option<f64>,
    /// Specifies the type of the disk, either SCRATCH or PERSISTENT.
    /// If not specified, the default is PERSISTENT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeForProviderVirtualMachineVirtualMachineConfigContainerImages {
    /// The path to the container image repository.
    /// For example: gcr.io/{project_id}/{imageName}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// The tag of the container image. If not specified, this defaults to the latest tag.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// Data disk option configuration settings.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeForProviderVirtualMachineVirtualMachineConfigDataDisk {
    /// Input only. Specifies the parameters for a new disk that will
    /// be created alongside the new instance. Use initialization
    /// parameters to create boot disks or local SSDs attached to the
    /// new instance. This property is mutually exclusive with the
    /// source property; you can only define one or the other, but not
    /// both.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initializeParams")]
    pub initialize_params: Option<RuntimeForProviderVirtualMachineVirtualMachineConfigDataDiskInitializeParams>,
    /// "Specifies the disk interface to use for attaching this disk,
    /// which is either SCSI or NVME. The default is SCSI. Persistent
    /// disks must always use SCSI and the request will fail if you attempt
    /// to attach a persistent disk in any other format than SCSI. Local SSDs
    /// can use either NVME or SCSI. For performance characteristics of SCSI
    /// over NVMe, see Local SSD performance. Valid values: * NVME * SCSI".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interface: Option<String>,
    /// The mode in which to attach this disk, either READ_WRITE
    /// or READ_ONLY. If not specified, the default is to attach
    /// the disk in READ_WRITE mode.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// Specifies a valid partial or full URL to an existing
    /// Persistent Disk resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    /// Specifies the type of the disk, either SCRATCH or PERSISTENT.
    /// If not specified, the default is PERSISTENT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Input only. Specifies the parameters for a new disk that will
/// be created alongside the new instance. Use initialization
/// parameters to create boot disks or local SSDs attached to the
/// new instance. This property is mutually exclusive with the
/// source property; you can only define one or the other, but not
/// both.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeForProviderVirtualMachineVirtualMachineConfigDataDiskInitializeParams {
    /// Provide this property when creating the disk.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Specifies the disk name. If not specified, the default is
    /// to use the name of the instance. If the disk with the
    /// instance name exists already in the given zone/region, a
    /// new name will be automatically generated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskName")]
    pub disk_name: Option<String>,
    /// Specifies the size of the disk in base-2 GB. If not
    /// specified, the disk will be the same size as the image
    /// (usually 10GB). If specified, the size must be equal to
    /// or larger than 10GB. Default 100 GB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSizeGb")]
    pub disk_size_gb: Option<f64>,
    /// The type of the boot disk attached to this runtime,
    /// defaults to standard persistent disk. For valid values,
    /// see https://cloud.google.com/vertex-ai/docs/workbench/ reference/rest/v1/projects.locations.runtimes#disktype
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskType")]
    pub disk_type: Option<String>,
    /// The labels to associate with this runtime. Label keys must
    /// contain 1 to 63 characters, and must conform to [RFC 1035]
    /// (https://www.ietf.org/rfc/rfc1035.txt). Label values may be
    /// empty, but, if present, must contain 1 to 63 characters, and must
    /// conform to RFC 1035. No
    /// more than 32 labels can be associated with a cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
}

/// Encryption settings for virtual machine data disk.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeForProviderVirtualMachineVirtualMachineConfigEncryptionConfig {
    /// The Cloud KMS resource identifier of the customer-managed
    /// encryption key used to protect a resource, such as a disks.
    /// It has the following format:
    /// projects/{PROJECT_ID}/locations/{REGION}/keyRings/ {KEY_RING_NAME}/cryptoKeys/{KEY_NAME}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKey")]
    pub kms_key: Option<String>,
}

/// Shielded VM Instance configuration settings.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeForProviderVirtualMachineVirtualMachineConfigShieldedInstanceConfig {
    /// Defines whether the instance has integrity monitoring enabled.
    /// Enables monitoring and attestation of the boot integrity of
    /// the instance. The attestation is performed against the
    /// integrity policy baseline. This baseline is initially derived
    /// from the implicitly trusted boot image when the instance is
    /// created. Enabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableIntegrityMonitoring")]
    pub enable_integrity_monitoring: Option<bool>,
    /// Defines whether the instance has Secure Boot enabled.Secure
    /// Boot helps ensure that the system only runs authentic software
    /// by verifying the digital signature of all boot components, and
    /// halting the boot process if signature verification fails.
    /// Disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableSecureBoot")]
    pub enable_secure_boot: Option<bool>,
    /// Defines whether the instance has the vTPM enabled. Enabled by
    /// default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableVtpm")]
    pub enable_vtpm: Option<bool>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeInitProvider {
    /// The config settings for accessing runtime.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessConfig")]
    pub access_config: Option<RuntimeInitProviderAccessConfig>,
    /// The labels to associate with this runtime. Label keys must
    /// contain 1 to 63 characters, and must conform to [RFC 1035]
    /// (https://www.ietf.org/rfc/rfc1035.txt). Label values may be
    /// empty, but, if present, must contain 1 to 63 characters, and must
    /// conform to RFC 1035. No
    /// more than 32 labels can be associated with a cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The config settings for software inside the runtime.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "softwareConfig")]
    pub software_config: Option<RuntimeInitProviderSoftwareConfig>,
    /// Use a Compute Engine VM image to start the managed notebook instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualMachine")]
    pub virtual_machine: Option<RuntimeInitProviderVirtualMachine>,
}

/// The config settings for accessing runtime.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeInitProviderAccessConfig {
    /// The type of access mode this instance. For valid values, see
    /// https://cloud.google.com/vertex-ai/docs/workbench/reference/ rest/v1/projects.locations.runtimes#RuntimeAccessType.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessType")]
    pub access_type: Option<String>,
    /// The owner of this runtime after creation. Format: alias@example.com.
    /// Currently supports one owner only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeOwner")]
    pub runtime_owner: Option<String>,
}

/// The config settings for software inside the runtime.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeInitProviderSoftwareConfig {
    /// Specify a custom Cloud Storage path where the GPU driver is stored.
    /// If not specified, we'll automatically choose from official GPU drivers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customGpuDriverPath")]
    pub custom_gpu_driver_path: Option<String>,
    /// Verifies core internal services are running. Default: True.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableHealthMonitoring")]
    pub enable_health_monitoring: Option<bool>,
    /// Runtime will automatically shutdown after idle_shutdown_time.
    /// Default: True
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleShutdown")]
    pub idle_shutdown: Option<bool>,
    /// Time in minutes to wait before shuting down runtime.
    /// Default: 180 minutes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleShutdownTimeout")]
    pub idle_shutdown_timeout: Option<f64>,
    /// Install Nvidia Driver automatically.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installGpuDriver")]
    pub install_gpu_driver: Option<bool>,
    /// Use a list of container images to use as Kernels in the notebook instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kernels: Option<Vec<RuntimeInitProviderSoftwareConfigKernels>>,
    /// Cron expression in UTC timezone for schedule instance auto upgrade.
    /// Please follow the cron format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notebookUpgradeSchedule")]
    pub notebook_upgrade_schedule: Option<String>,
    /// Path to a Bash script that automatically runs after a notebook instance
    /// fully boots up. The path must be a URL or
    /// Cloud Storage path (gs://path-to-file/file-name).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postStartupScript")]
    pub post_startup_script: Option<String>,
    /// Behavior for the post startup script.
    /// Possible values are: POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED, RUN_EVERY_START, DOWNLOAD_AND_RUN_EVERY_START.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postStartupScriptBehavior")]
    pub post_startup_script_behavior: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeInitProviderSoftwareConfigKernels {
    /// The path to the container image repository.
    /// For example: gcr.io/{project_id}/{imageName}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// The tag of the container image. If not specified, this defaults to the latest tag.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// Use a Compute Engine VM image to start the managed notebook instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeInitProviderVirtualMachine {
    /// Virtual Machine configuration settings.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualMachineConfig")]
    pub virtual_machine_config: Option<RuntimeInitProviderVirtualMachineVirtualMachineConfig>,
}

/// Virtual Machine configuration settings.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeInitProviderVirtualMachineVirtualMachineConfig {
    /// The Compute Engine accelerator configuration for this runtime.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorConfig")]
    pub accelerator_config: Option<RuntimeInitProviderVirtualMachineVirtualMachineConfigAcceleratorConfig>,
    /// Use a list of container images to start the notebook instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerImages")]
    pub container_images: Option<Vec<RuntimeInitProviderVirtualMachineVirtualMachineConfigContainerImages>>,
    /// Data disk option configuration settings.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataDisk")]
    pub data_disk: Option<RuntimeInitProviderVirtualMachineVirtualMachineConfigDataDisk>,
    /// Encryption settings for virtual machine data disk.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfig")]
    pub encryption_config: Option<RuntimeInitProviderVirtualMachineVirtualMachineConfigEncryptionConfig>,
    /// If true, runtime will only have internal IP addresses. By default,
    /// runtimes are not restricted to internal IP addresses, and will
    /// have ephemeral external IP addresses assigned to each vm. This
    /// internal_ip_only restriction can only be enabled for subnetwork
    /// enabled networks, and all dependencies must be configured to be
    /// accessible without external IP addresses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalIpOnly")]
    pub internal_ip_only: Option<bool>,
    /// The labels to associate with this runtime. Label keys must
    /// contain 1 to 63 characters, and must conform to [RFC 1035]
    /// (https://www.ietf.org/rfc/rfc1035.txt). Label values may be
    /// empty, but, if present, must contain 1 to 63 characters, and must
    /// conform to RFC 1035. No
    /// more than 32 labels can be associated with a cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The Compute Engine machine type used for runtimes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineType")]
    pub machine_type: Option<String>,
    /// The Compute Engine metadata entries to add to virtual machine.
    /// (see [Project and instance metadata](https://cloud.google.com
    /// /compute/docs/storing-retrieving-metadata#project_and_instance
    /// _metadata)).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<HashMap<String, String>>,
    /// The Compute Engine network to be used for machine communications.
    /// Cannot be specified with subnetwork. If neither network nor
    /// subnet is specified, the "default" network of the project is
    /// used, if it exists. A full URL or partial URI. Examples:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// The type of vNIC to be used on this interface. This may be gVNIC
    /// or VirtioNet.
    /// Possible values are: UNSPECIFIED_NIC_TYPE, VIRTIO_NET, GVNIC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nicType")]
    pub nic_type: Option<String>,
    /// Reserved IP Range name is used for VPC Peering. The
    /// subnetwork allocation will use the range name if it's assigned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reservedIpRange")]
    pub reserved_ip_range: Option<String>,
    /// Shielded VM Instance configuration settings.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shieldedInstanceConfig")]
    pub shielded_instance_config: Option<RuntimeInitProviderVirtualMachineVirtualMachineConfigShieldedInstanceConfig>,
    /// The Compute Engine subnetwork to be used for machine
    /// communications. Cannot be specified with network. A full URL or
    /// partial URI are valid. Examples:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnet: Option<String>,
    /// The Compute Engine tags to add to runtime (see [Tagging instances]
    /// (https://cloud.google.com/compute/docs/
    /// label-or-tag-resources#tags)).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

/// The Compute Engine accelerator configuration for this runtime.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeInitProviderVirtualMachineVirtualMachineConfigAcceleratorConfig {
    /// Count of cores of this accelerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreCount")]
    pub core_count: Option<f64>,
    /// Specifies the type of the disk, either SCRATCH or PERSISTENT.
    /// If not specified, the default is PERSISTENT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeInitProviderVirtualMachineVirtualMachineConfigContainerImages {
    /// The path to the container image repository.
    /// For example: gcr.io/{project_id}/{imageName}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// The tag of the container image. If not specified, this defaults to the latest tag.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// Data disk option configuration settings.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeInitProviderVirtualMachineVirtualMachineConfigDataDisk {
    /// Input only. Specifies the parameters for a new disk that will
    /// be created alongside the new instance. Use initialization
    /// parameters to create boot disks or local SSDs attached to the
    /// new instance. This property is mutually exclusive with the
    /// source property; you can only define one or the other, but not
    /// both.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initializeParams")]
    pub initialize_params: Option<RuntimeInitProviderVirtualMachineVirtualMachineConfigDataDiskInitializeParams>,
    /// "Specifies the disk interface to use for attaching this disk,
    /// which is either SCSI or NVME. The default is SCSI. Persistent
    /// disks must always use SCSI and the request will fail if you attempt
    /// to attach a persistent disk in any other format than SCSI. Local SSDs
    /// can use either NVME or SCSI. For performance characteristics of SCSI
    /// over NVMe, see Local SSD performance. Valid values: * NVME * SCSI".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interface: Option<String>,
    /// The mode in which to attach this disk, either READ_WRITE
    /// or READ_ONLY. If not specified, the default is to attach
    /// the disk in READ_WRITE mode.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// Specifies a valid partial or full URL to an existing
    /// Persistent Disk resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    /// Specifies the type of the disk, either SCRATCH or PERSISTENT.
    /// If not specified, the default is PERSISTENT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Input only. Specifies the parameters for a new disk that will
/// be created alongside the new instance. Use initialization
/// parameters to create boot disks or local SSDs attached to the
/// new instance. This property is mutually exclusive with the
/// source property; you can only define one or the other, but not
/// both.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeInitProviderVirtualMachineVirtualMachineConfigDataDiskInitializeParams {
    /// Provide this property when creating the disk.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Specifies the disk name. If not specified, the default is
    /// to use the name of the instance. If the disk with the
    /// instance name exists already in the given zone/region, a
    /// new name will be automatically generated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskName")]
    pub disk_name: Option<String>,
    /// Specifies the size of the disk in base-2 GB. If not
    /// specified, the disk will be the same size as the image
    /// (usually 10GB). If specified, the size must be equal to
    /// or larger than 10GB. Default 100 GB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSizeGb")]
    pub disk_size_gb: Option<f64>,
    /// The type of the boot disk attached to this runtime,
    /// defaults to standard persistent disk. For valid values,
    /// see https://cloud.google.com/vertex-ai/docs/workbench/ reference/rest/v1/projects.locations.runtimes#disktype
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskType")]
    pub disk_type: Option<String>,
    /// The labels to associate with this runtime. Label keys must
    /// contain 1 to 63 characters, and must conform to [RFC 1035]
    /// (https://www.ietf.org/rfc/rfc1035.txt). Label values may be
    /// empty, but, if present, must contain 1 to 63 characters, and must
    /// conform to RFC 1035. No
    /// more than 32 labels can be associated with a cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
}

/// Encryption settings for virtual machine data disk.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeInitProviderVirtualMachineVirtualMachineConfigEncryptionConfig {
    /// The Cloud KMS resource identifier of the customer-managed
    /// encryption key used to protect a resource, such as a disks.
    /// It has the following format:
    /// projects/{PROJECT_ID}/locations/{REGION}/keyRings/ {KEY_RING_NAME}/cryptoKeys/{KEY_NAME}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKey")]
    pub kms_key: Option<String>,
}

/// Shielded VM Instance configuration settings.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeInitProviderVirtualMachineVirtualMachineConfigShieldedInstanceConfig {
    /// Defines whether the instance has integrity monitoring enabled.
    /// Enables monitoring and attestation of the boot integrity of
    /// the instance. The attestation is performed against the
    /// integrity policy baseline. This baseline is initially derived
    /// from the implicitly trusted boot image when the instance is
    /// created. Enabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableIntegrityMonitoring")]
    pub enable_integrity_monitoring: Option<bool>,
    /// Defines whether the instance has Secure Boot enabled.Secure
    /// Boot helps ensure that the system only runs authentic software
    /// by verifying the digital signature of all boot components, and
    /// halting the boot process if signature verification fails.
    /// Disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableSecureBoot")]
    pub enable_secure_boot: Option<bool>,
    /// Defines whether the instance has the vTPM enabled. Enabled by
    /// default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableVtpm")]
    pub enable_vtpm: Option<bool>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RuntimeProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RuntimeProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RuntimeProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RuntimeProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RuntimeProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<RuntimePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<RuntimePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<RuntimePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<RuntimePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<RuntimePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RuntimePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum RuntimePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// RuntimeStatus defines the observed state of Runtime.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<RuntimeStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeStatusAtProvider {
    /// The config settings for accessing runtime.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessConfig")]
    pub access_config: Option<RuntimeStatusAtProviderAccessConfig>,
    /// for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// The health state of this runtime. For a list of possible output
    /// values, see https://cloud.google.com/vertex-ai/docs/workbench/ reference/rest/v1/projects.locations.runtimes#healthstate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthState")]
    pub health_state: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/runtimes/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The labels to associate with this runtime. Label keys must
    /// contain 1 to 63 characters, and must conform to [RFC 1035]
    /// (https://www.ietf.org/rfc/rfc1035.txt). Label values may be
    /// empty, but, if present, must contain 1 to 63 characters, and must
    /// conform to RFC 1035. No
    /// more than 32 labels can be associated with a cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// A reference to the zone where the machine resides.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Contains Runtime daemon metrics such as Service status and JupyterLab
    /// status
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metrics: Option<Vec<RuntimeStatusAtProviderMetrics>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The config settings for software inside the runtime.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "softwareConfig")]
    pub software_config: Option<RuntimeStatusAtProviderSoftwareConfig>,
    /// The state of this runtime.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// Use a Compute Engine VM image to start the managed notebook instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualMachine")]
    pub virtual_machine: Option<RuntimeStatusAtProviderVirtualMachine>,
}

/// The config settings for accessing runtime.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeStatusAtProviderAccessConfig {
    /// The type of access mode this instance. For valid values, see
    /// https://cloud.google.com/vertex-ai/docs/workbench/reference/ rest/v1/projects.locations.runtimes#RuntimeAccessType.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessType")]
    pub access_type: Option<String>,
    /// (Output)
    /// The proxy endpoint that is used to access the runtime.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyUri")]
    pub proxy_uri: Option<String>,
    /// The owner of this runtime after creation. Format: alias@example.com.
    /// Currently supports one owner only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeOwner")]
    pub runtime_owner: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeStatusAtProviderMetrics {
    /// (Output)
    /// Contains runtime daemon metrics, such as OS and kernels and
    /// sessions stats.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "systemMetrics")]
    pub system_metrics: Option<HashMap<String, String>>,
}

/// The config settings for software inside the runtime.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeStatusAtProviderSoftwareConfig {
    /// Specify a custom Cloud Storage path where the GPU driver is stored.
    /// If not specified, we'll automatically choose from official GPU drivers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customGpuDriverPath")]
    pub custom_gpu_driver_path: Option<String>,
    /// Verifies core internal services are running. Default: True.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableHealthMonitoring")]
    pub enable_health_monitoring: Option<bool>,
    /// Runtime will automatically shutdown after idle_shutdown_time.
    /// Default: True
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleShutdown")]
    pub idle_shutdown: Option<bool>,
    /// Time in minutes to wait before shuting down runtime.
    /// Default: 180 minutes
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idleShutdownTimeout")]
    pub idle_shutdown_timeout: Option<f64>,
    /// Install Nvidia Driver automatically.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installGpuDriver")]
    pub install_gpu_driver: Option<bool>,
    /// Use a list of container images to use as Kernels in the notebook instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kernels: Option<Vec<RuntimeStatusAtProviderSoftwareConfigKernels>>,
    /// Cron expression in UTC timezone for schedule instance auto upgrade.
    /// Please follow the cron format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notebookUpgradeSchedule")]
    pub notebook_upgrade_schedule: Option<String>,
    /// Path to a Bash script that automatically runs after a notebook instance
    /// fully boots up. The path must be a URL or
    /// Cloud Storage path (gs://path-to-file/file-name).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postStartupScript")]
    pub post_startup_script: Option<String>,
    /// Behavior for the post startup script.
    /// Possible values are: POST_STARTUP_SCRIPT_BEHAVIOR_UNSPECIFIED, RUN_EVERY_START, DOWNLOAD_AND_RUN_EVERY_START.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postStartupScriptBehavior")]
    pub post_startup_script_behavior: Option<String>,
    /// (Output)
    /// Bool indicating whether an newer image is available in an image family.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upgradeable: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeStatusAtProviderSoftwareConfigKernels {
    /// The path to the container image repository.
    /// For example: gcr.io/{project_id}/{imageName}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// The tag of the container image. If not specified, this defaults to the latest tag.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// Use a Compute Engine VM image to start the managed notebook instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeStatusAtProviderVirtualMachine {
    /// (Output)
    /// The unique identifier of the Managed Compute Engine instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceId")]
    pub instance_id: Option<String>,
    /// (Output)
    /// The user-friendly name of the Managed Compute Engine instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceName")]
    pub instance_name: Option<String>,
    /// Virtual Machine configuration settings.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualMachineConfig")]
    pub virtual_machine_config: Option<RuntimeStatusAtProviderVirtualMachineVirtualMachineConfig>,
}

/// Virtual Machine configuration settings.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeStatusAtProviderVirtualMachineVirtualMachineConfig {
    /// The Compute Engine accelerator configuration for this runtime.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorConfig")]
    pub accelerator_config: Option<RuntimeStatusAtProviderVirtualMachineVirtualMachineConfigAcceleratorConfig>,
    /// Use a list of container images to start the notebook instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerImages")]
    pub container_images: Option<Vec<RuntimeStatusAtProviderVirtualMachineVirtualMachineConfigContainerImages>>,
    /// Data disk option configuration settings.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataDisk")]
    pub data_disk: Option<RuntimeStatusAtProviderVirtualMachineVirtualMachineConfigDataDisk>,
    /// Encryption settings for virtual machine data disk.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfig")]
    pub encryption_config: Option<RuntimeStatusAtProviderVirtualMachineVirtualMachineConfigEncryptionConfig>,
    /// (Output)
    /// The Compute Engine guest attributes. (see [Project and instance
    /// guest attributes](https://cloud.google.com/compute/docs/
    /// storing-retrieving-metadata#guest_attributes)).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestAttributes")]
    pub guest_attributes: Option<HashMap<String, String>>,
    /// If true, runtime will only have internal IP addresses. By default,
    /// runtimes are not restricted to internal IP addresses, and will
    /// have ephemeral external IP addresses assigned to each vm. This
    /// internal_ip_only restriction can only be enabled for subnetwork
    /// enabled networks, and all dependencies must be configured to be
    /// accessible without external IP addresses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internalIpOnly")]
    pub internal_ip_only: Option<bool>,
    /// The labels to associate with this runtime. Label keys must
    /// contain 1 to 63 characters, and must conform to [RFC 1035]
    /// (https://www.ietf.org/rfc/rfc1035.txt). Label values may be
    /// empty, but, if present, must contain 1 to 63 characters, and must
    /// conform to RFC 1035. No
    /// more than 32 labels can be associated with a cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The Compute Engine machine type used for runtimes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineType")]
    pub machine_type: Option<String>,
    /// The Compute Engine metadata entries to add to virtual machine.
    /// (see [Project and instance metadata](https://cloud.google.com
    /// /compute/docs/storing-retrieving-metadata#project_and_instance
    /// _metadata)).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<HashMap<String, String>>,
    /// The Compute Engine network to be used for machine communications.
    /// Cannot be specified with subnetwork. If neither network nor
    /// subnet is specified, the "default" network of the project is
    /// used, if it exists. A full URL or partial URI. Examples:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// The type of vNIC to be used on this interface. This may be gVNIC
    /// or VirtioNet.
    /// Possible values are: UNSPECIFIED_NIC_TYPE, VIRTIO_NET, GVNIC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nicType")]
    pub nic_type: Option<String>,
    /// Reserved IP Range name is used for VPC Peering. The
    /// subnetwork allocation will use the range name if it's assigned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reservedIpRange")]
    pub reserved_ip_range: Option<String>,
    /// Shielded VM Instance configuration settings.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shieldedInstanceConfig")]
    pub shielded_instance_config: Option<RuntimeStatusAtProviderVirtualMachineVirtualMachineConfigShieldedInstanceConfig>,
    /// The Compute Engine subnetwork to be used for machine
    /// communications. Cannot be specified with network. A full URL or
    /// partial URI are valid. Examples:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnet: Option<String>,
    /// The Compute Engine tags to add to runtime (see [Tagging instances]
    /// (https://cloud.google.com/compute/docs/
    /// label-or-tag-resources#tags)).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// (Output)
    /// The zone where the virtual machine is located.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// The Compute Engine accelerator configuration for this runtime.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeStatusAtProviderVirtualMachineVirtualMachineConfigAcceleratorConfig {
    /// Count of cores of this accelerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreCount")]
    pub core_count: Option<f64>,
    /// Specifies the type of the disk, either SCRATCH or PERSISTENT.
    /// If not specified, the default is PERSISTENT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeStatusAtProviderVirtualMachineVirtualMachineConfigContainerImages {
    /// The path to the container image repository.
    /// For example: gcr.io/{project_id}/{imageName}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// The tag of the container image. If not specified, this defaults to the latest tag.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// Data disk option configuration settings.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeStatusAtProviderVirtualMachineVirtualMachineConfigDataDisk {
    /// (Output)
    /// Optional. Specifies whether the disk will be auto-deleted
    /// when the instance is deleted (but not when the disk is
    /// detached from the instance).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoDelete")]
    pub auto_delete: Option<bool>,
    /// (Output)
    /// Optional. Indicates that this is a boot disk. The virtual
    /// machine will use the first partition of the disk for its
    /// root filesystem.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub boot: Option<bool>,
    /// (Output)
    /// Optional. Specifies a unique device name of your choice
    /// that is reflected into the /dev/disk/by-id/google-* tree
    /// of a Linux operating system running within the instance.
    /// This name can be used to reference the device for mounting,
    /// resizing, and so on, from within the instance.
    /// If not specified, the server chooses a default device name
    /// to apply to this disk, in the form persistent-disk-x, where
    /// x is a number assigned by Google Compute Engine. This field
    /// is only applicable for persistent disks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceName")]
    pub device_name: Option<String>,
    /// (Output)
    /// Indicates a list of features to enable on the guest operating
    /// system. Applicable only for bootable images. To see a list of
    /// available features, read https://cloud.google.com/compute/docs/ images/create-delete-deprecate-private-images#guest-os-features
    /// options.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestOsFeatures")]
    pub guest_os_features: Option<Vec<String>>,
    /// (Output)
    /// Output only. A zero-based index to this disk, where 0 is
    /// reserved for the boot disk. If you have many disks attached
    /// to an instance, each disk would have a unique index number.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub index: Option<f64>,
    /// Input only. Specifies the parameters for a new disk that will
    /// be created alongside the new instance. Use initialization
    /// parameters to create boot disks or local SSDs attached to the
    /// new instance. This property is mutually exclusive with the
    /// source property; you can only define one or the other, but not
    /// both.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initializeParams")]
    pub initialize_params: Option<RuntimeStatusAtProviderVirtualMachineVirtualMachineConfigDataDiskInitializeParams>,
    /// "Specifies the disk interface to use for attaching this disk,
    /// which is either SCSI or NVME. The default is SCSI. Persistent
    /// disks must always use SCSI and the request will fail if you attempt
    /// to attach a persistent disk in any other format than SCSI. Local SSDs
    /// can use either NVME or SCSI. For performance characteristics of SCSI
    /// over NVMe, see Local SSD performance. Valid values: * NVME * SCSI".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interface: Option<String>,
    /// (Output)
    /// Type of the resource. Always compute#attachedDisk for attached
    /// disks.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub kind: Option<String>,
    /// (Output)
    /// Output only. Any valid publicly visible licenses.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub licenses: Option<Vec<String>>,
    /// The mode in which to attach this disk, either READ_WRITE
    /// or READ_ONLY. If not specified, the default is to attach
    /// the disk in READ_WRITE mode.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// Specifies a valid partial or full URL to an existing
    /// Persistent Disk resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    /// Specifies the type of the disk, either SCRATCH or PERSISTENT.
    /// If not specified, the default is PERSISTENT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Input only. Specifies the parameters for a new disk that will
/// be created alongside the new instance. Use initialization
/// parameters to create boot disks or local SSDs attached to the
/// new instance. This property is mutually exclusive with the
/// source property; you can only define one or the other, but not
/// both.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeStatusAtProviderVirtualMachineVirtualMachineConfigDataDiskInitializeParams {
    /// Provide this property when creating the disk.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Specifies the disk name. If not specified, the default is
    /// to use the name of the instance. If the disk with the
    /// instance name exists already in the given zone/region, a
    /// new name will be automatically generated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskName")]
    pub disk_name: Option<String>,
    /// Specifies the size of the disk in base-2 GB. If not
    /// specified, the disk will be the same size as the image
    /// (usually 10GB). If specified, the size must be equal to
    /// or larger than 10GB. Default 100 GB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSizeGb")]
    pub disk_size_gb: Option<f64>,
    /// The type of the boot disk attached to this runtime,
    /// defaults to standard persistent disk. For valid values,
    /// see https://cloud.google.com/vertex-ai/docs/workbench/ reference/rest/v1/projects.locations.runtimes#disktype
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskType")]
    pub disk_type: Option<String>,
    /// The labels to associate with this runtime. Label keys must
    /// contain 1 to 63 characters, and must conform to [RFC 1035]
    /// (https://www.ietf.org/rfc/rfc1035.txt). Label values may be
    /// empty, but, if present, must contain 1 to 63 characters, and must
    /// conform to RFC 1035. No
    /// more than 32 labels can be associated with a cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
}

/// Encryption settings for virtual machine data disk.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeStatusAtProviderVirtualMachineVirtualMachineConfigEncryptionConfig {
    /// The Cloud KMS resource identifier of the customer-managed
    /// encryption key used to protect a resource, such as a disks.
    /// It has the following format:
    /// projects/{PROJECT_ID}/locations/{REGION}/keyRings/ {KEY_RING_NAME}/cryptoKeys/{KEY_NAME}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKey")]
    pub kms_key: Option<String>,
}

/// Shielded VM Instance configuration settings.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct RuntimeStatusAtProviderVirtualMachineVirtualMachineConfigShieldedInstanceConfig {
    /// Defines whether the instance has integrity monitoring enabled.
    /// Enables monitoring and attestation of the boot integrity of
    /// the instance. The attestation is performed against the
    /// integrity policy baseline. This baseline is initially derived
    /// from the implicitly trusted boot image when the instance is
    /// created. Enabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableIntegrityMonitoring")]
    pub enable_integrity_monitoring: Option<bool>,
    /// Defines whether the instance has Secure Boot enabled.Secure
    /// Boot helps ensure that the system only runs authentic software
    /// by verifying the digital signature of all boot components, and
    /// halting the boot process if signature verification fails.
    /// Disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableSecureBoot")]
    pub enable_secure_boot: Option<bool>,
    /// Defines whether the instance has the vTPM enabled. Enabled by
    /// default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableVtpm")]
    pub enable_vtpm: Option<bool>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// InstanceSpec defines the desired state of Instance
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "notebooks.gcp.upbound.io", version = "v1beta2", kind = "Instance", plural = "instances")]
#[kube(status = "InstanceStatus")]
pub struct InstanceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<InstanceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: InstanceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<InstanceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<InstanceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<InstancePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<InstanceWriteConnectionSecretToRef>,
}

/// InstanceSpec defines the desired state of Instance
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProvider {
    /// The hardware accelerator used on this instance. If you use accelerators,
    /// make sure that your configuration has enough vCPUs and memory to support the
    /// machineType you have selected.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorConfig")]
    pub accelerator_config: Option<InstanceForProviderAcceleratorConfig>,
    /// The size of the boot disk in GB attached to this instance,
    /// up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB.
    /// If not specified, this defaults to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootDiskSizeGb")]
    pub boot_disk_size_gb: Option<f64>,
    /// Possible disk types for notebook instances.
    /// Possible values are: DISK_TYPE_UNSPECIFIED, PD_STANDARD, PD_SSD, PD_BALANCED, PD_EXTREME.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootDiskType")]
    pub boot_disk_type: Option<String>,
    /// Use a container image to start the notebook instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerImage")]
    pub container_image: Option<InstanceForProviderContainerImage>,
    /// Specify a custom Cloud Storage path where the GPU driver is stored.
    /// If not specified, we'll automatically choose from official GPU drivers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customGpuDriverPath")]
    pub custom_gpu_driver_path: Option<String>,
    /// The size of the data disk in GB attached to this instance,
    /// up to a maximum of 64000 GB (64 TB).
    /// You can choose the size of the data disk based on how big your notebooks and data are.
    /// If not specified, this defaults to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataDiskSizeGb")]
    pub data_disk_size_gb: Option<f64>,
    /// Possible disk types for notebook instances.
    /// Possible values are: DISK_TYPE_UNSPECIFIED, PD_STANDARD, PD_SSD, PD_BALANCED, PD_EXTREME.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataDiskType")]
    pub data_disk_type: Option<String>,
    /// Desired state of the Notebook Instance. Set this field to ACTIVE to start the Instance, and STOPPED to stop the Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredState")]
    pub desired_state: Option<String>,
    /// Disk encryption method used on the boot and data disks, defaults to GMEK.
    /// Possible values are: DISK_ENCRYPTION_UNSPECIFIED, GMEK, CMEK.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskEncryption")]
    pub disk_encryption: Option<String>,
    /// Whether the end user authorizes Google Cloud to install GPU driver
    /// on this instance. If this field is empty or set to false, the GPU driver
    /// won't be installed. Only applicable to instances with GPUs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installGpuDriver")]
    pub install_gpu_driver: Option<bool>,
    /// The list of owners of this instance after creation.
    /// Format: alias@example.com.
    /// Currently supports one owner only.
    /// If not specified, all of the service account users of
    /// your VM instance's service account can use the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceOwners")]
    pub instance_owners: Option<Vec<String>>,
    /// The KMS key used to encrypt the disks, only applicable if diskEncryption is CMEK.
    /// Format: projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKey")]
    pub kms_key: Option<String>,
    /// Labels to apply to this instance. These can be later modified by the setLabels method.
    /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// A reference to the zone where the machine resides.
    pub location: String,
    /// A reference to a machine type which defines VM kind.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineType")]
    pub machine_type: Option<String>,
    /// Custom metadata to apply to this instance.
    /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<HashMap<String, String>>,
    /// The name of the VPC that this instance is in.
    /// Format: projects/{project_id}/global/networks/{network_id}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// The type of vNIC driver.
    /// Possible values are: UNSPECIFIED_NIC_TYPE, VIRTIO_NET, GVNIC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nicType")]
    pub nic_type: Option<String>,
    /// The notebook instance will not register with the proxy..
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noProxyAccess")]
    pub no_proxy_access: Option<bool>,
    /// No public IP will be assigned to this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noPublicIp")]
    pub no_public_ip: Option<bool>,
    /// If true, the data disk will not be auto deleted when deleting the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noRemoveDataDisk")]
    pub no_remove_data_disk: Option<bool>,
    /// Path to a Bash script that automatically runs after a
    /// notebook instance fully boots up. The path must be a URL
    /// or Cloud Storage path (gs://path-to-file/file-name).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postStartupScript")]
    pub post_startup_script: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Reservation Affinity for consuming Zonal reservation.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reservationAffinity")]
    pub reservation_affinity: Option<InstanceForProviderReservationAffinity>,
    /// The service account on this instance, giving access to other
    /// Google Cloud services. You can use any service account within
    /// the same project, but you must have the service account user
    /// permission to use the instance. If not specified,
    /// the Compute Engine default service account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    /// Optional. The URIs of service account scopes to be included in Compute Engine instances.
    /// If not specified, the following scopes are defined:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountScopes")]
    pub service_account_scopes: Option<Vec<String>>,
    /// A set of Shielded Instance options. Check [Images using supported Shielded VM features]
    /// Not all combinations are valid
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shieldedInstanceConfig")]
    pub shielded_instance_config: Option<InstanceForProviderShieldedInstanceConfig>,
    /// The name of the subnet that this instance is in.
    /// Format: projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnet: Option<String>,
    /// The Compute Engine tags to add to instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// Use a Compute Engine VM image to start the notebook instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmImage")]
    pub vm_image: Option<InstanceForProviderVmImage>,
}

/// The hardware accelerator used on this instance. If you use accelerators,
/// make sure that your configuration has enough vCPUs and memory to support the
/// machineType you have selected.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderAcceleratorConfig {
    /// Count of cores of this accelerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreCount")]
    pub core_count: Option<f64>,
    /// Type of this accelerator.
    /// Possible values are: ACCELERATOR_TYPE_UNSPECIFIED, NVIDIA_TESLA_K80, NVIDIA_TESLA_P100, NVIDIA_TESLA_V100, NVIDIA_TESLA_P4, NVIDIA_TESLA_T4, NVIDIA_TESLA_T4_VWS, NVIDIA_TESLA_P100_VWS, NVIDIA_TESLA_P4_VWS, NVIDIA_TESLA_A100, TPU_V2, TPU_V3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Use a container image to start the notebook instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderContainerImage {
    /// The path to the container image repository.
    /// For example: gcr.io/{project_id}/{imageName}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// The tag of the container image. If not specified, this defaults to the latest tag.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// Reservation Affinity for consuming Zonal reservation.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderReservationAffinity {
    /// The type of Compute Reservation.
    /// Possible values are: NO_RESERVATION, ANY_RESERVATION, SPECIFIC_RESERVATION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consumeReservationType")]
    pub consume_reservation_type: Option<String>,
    /// Corresponds to the label key of reservation resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Corresponds to the label values of reservation resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// A set of Shielded Instance options. Check [Images using supported Shielded VM features]
/// Not all combinations are valid
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderShieldedInstanceConfig {
    /// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the
    /// boot integrity of the instance. The attestation is performed against the integrity policy baseline.
    /// This baseline is initially derived from the implicitly trusted boot image when the instance is created.
    /// Enabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableIntegrityMonitoring")]
    pub enable_integrity_monitoring: Option<bool>,
    /// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs
    /// authentic software by verifying the digital signature of all boot components, and halting the boot process
    /// if signature verification fails.
    /// Disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableSecureBoot")]
    pub enable_secure_boot: Option<bool>,
    /// Defines whether the instance has the vTPM enabled.
    /// Enabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableVtpm")]
    pub enable_vtpm: Option<bool>,
}

/// Use a Compute Engine VM image to start the notebook instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderVmImage {
    /// Use this VM image family to find the image; the newest image in this family will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageFamily")]
    pub image_family: Option<String>,
    /// Use VM image name to find the image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    pub image_name: Option<String>,
    /// The name of the Google Cloud project that this VM image belongs to.
    /// Format: projects/{project_id}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProvider {
    /// The hardware accelerator used on this instance. If you use accelerators,
    /// make sure that your configuration has enough vCPUs and memory to support the
    /// machineType you have selected.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorConfig")]
    pub accelerator_config: Option<InstanceInitProviderAcceleratorConfig>,
    /// The size of the boot disk in GB attached to this instance,
    /// up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB.
    /// If not specified, this defaults to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootDiskSizeGb")]
    pub boot_disk_size_gb: Option<f64>,
    /// Possible disk types for notebook instances.
    /// Possible values are: DISK_TYPE_UNSPECIFIED, PD_STANDARD, PD_SSD, PD_BALANCED, PD_EXTREME.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootDiskType")]
    pub boot_disk_type: Option<String>,
    /// Use a container image to start the notebook instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerImage")]
    pub container_image: Option<InstanceInitProviderContainerImage>,
    /// Specify a custom Cloud Storage path where the GPU driver is stored.
    /// If not specified, we'll automatically choose from official GPU drivers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customGpuDriverPath")]
    pub custom_gpu_driver_path: Option<String>,
    /// The size of the data disk in GB attached to this instance,
    /// up to a maximum of 64000 GB (64 TB).
    /// You can choose the size of the data disk based on how big your notebooks and data are.
    /// If not specified, this defaults to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataDiskSizeGb")]
    pub data_disk_size_gb: Option<f64>,
    /// Possible disk types for notebook instances.
    /// Possible values are: DISK_TYPE_UNSPECIFIED, PD_STANDARD, PD_SSD, PD_BALANCED, PD_EXTREME.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataDiskType")]
    pub data_disk_type: Option<String>,
    /// Desired state of the Notebook Instance. Set this field to ACTIVE to start the Instance, and STOPPED to stop the Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredState")]
    pub desired_state: Option<String>,
    /// Disk encryption method used on the boot and data disks, defaults to GMEK.
    /// Possible values are: DISK_ENCRYPTION_UNSPECIFIED, GMEK, CMEK.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskEncryption")]
    pub disk_encryption: Option<String>,
    /// Whether the end user authorizes Google Cloud to install GPU driver
    /// on this instance. If this field is empty or set to false, the GPU driver
    /// won't be installed. Only applicable to instances with GPUs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installGpuDriver")]
    pub install_gpu_driver: Option<bool>,
    /// The list of owners of this instance after creation.
    /// Format: alias@example.com.
    /// Currently supports one owner only.
    /// If not specified, all of the service account users of
    /// your VM instance's service account can use the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceOwners")]
    pub instance_owners: Option<Vec<String>>,
    /// The KMS key used to encrypt the disks, only applicable if diskEncryption is CMEK.
    /// Format: projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKey")]
    pub kms_key: Option<String>,
    /// Labels to apply to this instance. These can be later modified by the setLabels method.
    /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// A reference to a machine type which defines VM kind.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineType")]
    pub machine_type: Option<String>,
    /// Custom metadata to apply to this instance.
    /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<HashMap<String, String>>,
    /// The name of the VPC that this instance is in.
    /// Format: projects/{project_id}/global/networks/{network_id}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// The type of vNIC driver.
    /// Possible values are: UNSPECIFIED_NIC_TYPE, VIRTIO_NET, GVNIC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nicType")]
    pub nic_type: Option<String>,
    /// The notebook instance will not register with the proxy..
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noProxyAccess")]
    pub no_proxy_access: Option<bool>,
    /// No public IP will be assigned to this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noPublicIp")]
    pub no_public_ip: Option<bool>,
    /// If true, the data disk will not be auto deleted when deleting the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noRemoveDataDisk")]
    pub no_remove_data_disk: Option<bool>,
    /// Path to a Bash script that automatically runs after a
    /// notebook instance fully boots up. The path must be a URL
    /// or Cloud Storage path (gs://path-to-file/file-name).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postStartupScript")]
    pub post_startup_script: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Reservation Affinity for consuming Zonal reservation.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reservationAffinity")]
    pub reservation_affinity: Option<InstanceInitProviderReservationAffinity>,
    /// The service account on this instance, giving access to other
    /// Google Cloud services. You can use any service account within
    /// the same project, but you must have the service account user
    /// permission to use the instance. If not specified,
    /// the Compute Engine default service account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    /// Optional. The URIs of service account scopes to be included in Compute Engine instances.
    /// If not specified, the following scopes are defined:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountScopes")]
    pub service_account_scopes: Option<Vec<String>>,
    /// A set of Shielded Instance options. Check [Images using supported Shielded VM features]
    /// Not all combinations are valid
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shieldedInstanceConfig")]
    pub shielded_instance_config: Option<InstanceInitProviderShieldedInstanceConfig>,
    /// The name of the subnet that this instance is in.
    /// Format: projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnet: Option<String>,
    /// The Compute Engine tags to add to instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// Use a Compute Engine VM image to start the notebook instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmImage")]
    pub vm_image: Option<InstanceInitProviderVmImage>,
}

/// The hardware accelerator used on this instance. If you use accelerators,
/// make sure that your configuration has enough vCPUs and memory to support the
/// machineType you have selected.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderAcceleratorConfig {
    /// Count of cores of this accelerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreCount")]
    pub core_count: Option<f64>,
    /// Type of this accelerator.
    /// Possible values are: ACCELERATOR_TYPE_UNSPECIFIED, NVIDIA_TESLA_K80, NVIDIA_TESLA_P100, NVIDIA_TESLA_V100, NVIDIA_TESLA_P4, NVIDIA_TESLA_T4, NVIDIA_TESLA_T4_VWS, NVIDIA_TESLA_P100_VWS, NVIDIA_TESLA_P4_VWS, NVIDIA_TESLA_A100, TPU_V2, TPU_V3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Use a container image to start the notebook instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderContainerImage {
    /// The path to the container image repository.
    /// For example: gcr.io/{project_id}/{imageName}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// The tag of the container image. If not specified, this defaults to the latest tag.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// Reservation Affinity for consuming Zonal reservation.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderReservationAffinity {
    /// The type of Compute Reservation.
    /// Possible values are: NO_RESERVATION, ANY_RESERVATION, SPECIFIC_RESERVATION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consumeReservationType")]
    pub consume_reservation_type: Option<String>,
    /// Corresponds to the label key of reservation resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Corresponds to the label values of reservation resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// A set of Shielded Instance options. Check [Images using supported Shielded VM features]
/// Not all combinations are valid
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderShieldedInstanceConfig {
    /// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the
    /// boot integrity of the instance. The attestation is performed against the integrity policy baseline.
    /// This baseline is initially derived from the implicitly trusted boot image when the instance is created.
    /// Enabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableIntegrityMonitoring")]
    pub enable_integrity_monitoring: Option<bool>,
    /// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs
    /// authentic software by verifying the digital signature of all boot components, and halting the boot process
    /// if signature verification fails.
    /// Disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableSecureBoot")]
    pub enable_secure_boot: Option<bool>,
    /// Defines whether the instance has the vTPM enabled.
    /// Enabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableVtpm")]
    pub enable_vtpm: Option<bool>,
}

/// Use a Compute Engine VM image to start the notebook instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderVmImage {
    /// Use this VM image family to find the image; the newest image in this family will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageFamily")]
    pub image_family: Option<String>,
    /// Use VM image name to find the image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    pub image_name: Option<String>,
    /// The name of the Google Cloud project that this VM image belongs to.
    /// Format: projects/{project_id}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<InstancePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<InstancePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstancePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// InstanceStatus defines the observed state of Instance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<InstanceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProvider {
    /// The hardware accelerator used on this instance. If you use accelerators,
    /// make sure that your configuration has enough vCPUs and memory to support the
    /// machineType you have selected.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorConfig")]
    pub accelerator_config: Option<InstanceStatusAtProviderAcceleratorConfig>,
    /// The size of the boot disk in GB attached to this instance,
    /// up to a maximum of 64000 GB (64 TB). The minimum recommended value is 100 GB.
    /// If not specified, this defaults to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootDiskSizeGb")]
    pub boot_disk_size_gb: Option<f64>,
    /// Possible disk types for notebook instances.
    /// Possible values are: DISK_TYPE_UNSPECIFIED, PD_STANDARD, PD_SSD, PD_BALANCED, PD_EXTREME.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bootDiskType")]
    pub boot_disk_type: Option<String>,
    /// Use a container image to start the notebook instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerImage")]
    pub container_image: Option<InstanceStatusAtProviderContainerImage>,
    /// Instance creation time
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createTime")]
    pub create_time: Option<String>,
    /// Specify a custom Cloud Storage path where the GPU driver is stored.
    /// If not specified, we'll automatically choose from official GPU drivers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customGpuDriverPath")]
    pub custom_gpu_driver_path: Option<String>,
    /// The size of the data disk in GB attached to this instance,
    /// up to a maximum of 64000 GB (64 TB).
    /// You can choose the size of the data disk based on how big your notebooks and data are.
    /// If not specified, this defaults to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataDiskSizeGb")]
    pub data_disk_size_gb: Option<f64>,
    /// Possible disk types for notebook instances.
    /// Possible values are: DISK_TYPE_UNSPECIFIED, PD_STANDARD, PD_SSD, PD_BALANCED, PD_EXTREME.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataDiskType")]
    pub data_disk_type: Option<String>,
    /// Desired state of the Notebook Instance. Set this field to ACTIVE to start the Instance, and STOPPED to stop the Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredState")]
    pub desired_state: Option<String>,
    /// Disk encryption method used on the boot and data disks, defaults to GMEK.
    /// Possible values are: DISK_ENCRYPTION_UNSPECIFIED, GMEK, CMEK.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskEncryption")]
    pub disk_encryption: Option<String>,
    /// for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/instances/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Whether the end user authorizes Google Cloud to install GPU driver
    /// on this instance. If this field is empty or set to false, the GPU driver
    /// won't be installed. Only applicable to instances with GPUs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "installGpuDriver")]
    pub install_gpu_driver: Option<bool>,
    /// The list of owners of this instance after creation.
    /// Format: alias@example.com.
    /// Currently supports one owner only.
    /// If not specified, all of the service account users of
    /// your VM instance's service account can use the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceOwners")]
    pub instance_owners: Option<Vec<String>>,
    /// The KMS key used to encrypt the disks, only applicable if diskEncryption is CMEK.
    /// Format: projects/{project_id}/locations/{location}/keyRings/{key_ring_id}/cryptoKeys/{key_id}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKey")]
    pub kms_key: Option<String>,
    /// Labels to apply to this instance. These can be later modified by the setLabels method.
    /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// A reference to the zone where the machine resides.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// A reference to a machine type which defines VM kind.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineType")]
    pub machine_type: Option<String>,
    /// Custom metadata to apply to this instance.
    /// An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<HashMap<String, String>>,
    /// The name of the VPC that this instance is in.
    /// Format: projects/{project_id}/global/networks/{network_id}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<String>,
    /// The type of vNIC driver.
    /// Possible values are: UNSPECIFIED_NIC_TYPE, VIRTIO_NET, GVNIC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nicType")]
    pub nic_type: Option<String>,
    /// The notebook instance will not register with the proxy..
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noProxyAccess")]
    pub no_proxy_access: Option<bool>,
    /// No public IP will be assigned to this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noPublicIp")]
    pub no_public_ip: Option<bool>,
    /// If true, the data disk will not be auto deleted when deleting the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noRemoveDataDisk")]
    pub no_remove_data_disk: Option<bool>,
    /// Path to a Bash script that automatically runs after a
    /// notebook instance fully boots up. The path must be a URL
    /// or Cloud Storage path (gs://path-to-file/file-name).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postStartupScript")]
    pub post_startup_script: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The proxy endpoint that is used to access the Jupyter notebook.
    /// Only returned when the resource is in a PROVISIONED state.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyUri")]
    pub proxy_uri: Option<String>,
    /// Reservation Affinity for consuming Zonal reservation.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reservationAffinity")]
    pub reservation_affinity: Option<InstanceStatusAtProviderReservationAffinity>,
    /// The service account on this instance, giving access to other
    /// Google Cloud services. You can use any service account within
    /// the same project, but you must have the service account user
    /// permission to use the instance. If not specified,
    /// the Compute Engine default service account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccount")]
    pub service_account: Option<String>,
    /// Optional. The URIs of service account scopes to be included in Compute Engine instances.
    /// If not specified, the following scopes are defined:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountScopes")]
    pub service_account_scopes: Option<Vec<String>>,
    /// A set of Shielded Instance options. Check [Images using supported Shielded VM features]
    /// Not all combinations are valid
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shieldedInstanceConfig")]
    pub shielded_instance_config: Option<InstanceStatusAtProviderShieldedInstanceConfig>,
    /// The state of this instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// The name of the subnet that this instance is in.
    /// Format: projects/{project_id}/regions/{region}/subnetworks/{subnetwork_id}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnet: Option<String>,
    /// The Compute Engine tags to add to instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// Instance update time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateTime")]
    pub update_time: Option<String>,
    /// Use a Compute Engine VM image to start the notebook instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmImage")]
    pub vm_image: Option<InstanceStatusAtProviderVmImage>,
}

/// The hardware accelerator used on this instance. If you use accelerators,
/// make sure that your configuration has enough vCPUs and memory to support the
/// machineType you have selected.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderAcceleratorConfig {
    /// Count of cores of this accelerator.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreCount")]
    pub core_count: Option<f64>,
    /// Type of this accelerator.
    /// Possible values are: ACCELERATOR_TYPE_UNSPECIFIED, NVIDIA_TESLA_K80, NVIDIA_TESLA_P100, NVIDIA_TESLA_V100, NVIDIA_TESLA_P4, NVIDIA_TESLA_T4, NVIDIA_TESLA_T4_VWS, NVIDIA_TESLA_P100_VWS, NVIDIA_TESLA_P4_VWS, NVIDIA_TESLA_A100, TPU_V2, TPU_V3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Use a container image to start the notebook instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderContainerImage {
    /// The path to the container image repository.
    /// For example: gcr.io/{project_id}/{imageName}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// The tag of the container image. If not specified, this defaults to the latest tag.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
}

/// Reservation Affinity for consuming Zonal reservation.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderReservationAffinity {
    /// The type of Compute Reservation.
    /// Possible values are: NO_RESERVATION, ANY_RESERVATION, SPECIFIC_RESERVATION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consumeReservationType")]
    pub consume_reservation_type: Option<String>,
    /// Corresponds to the label key of reservation resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Corresponds to the label values of reservation resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// A set of Shielded Instance options. Check [Images using supported Shielded VM features]
/// Not all combinations are valid
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderShieldedInstanceConfig {
    /// Defines whether the instance has integrity monitoring enabled. Enables monitoring and attestation of the
    /// boot integrity of the instance. The attestation is performed against the integrity policy baseline.
    /// This baseline is initially derived from the implicitly trusted boot image when the instance is created.
    /// Enabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableIntegrityMonitoring")]
    pub enable_integrity_monitoring: Option<bool>,
    /// Defines whether the instance has Secure Boot enabled. Secure Boot helps ensure that the system only runs
    /// authentic software by verifying the digital signature of all boot components, and halting the boot process
    /// if signature verification fails.
    /// Disabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableSecureBoot")]
    pub enable_secure_boot: Option<bool>,
    /// Defines whether the instance has the vTPM enabled.
    /// Enabled by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableVtpm")]
    pub enable_vtpm: Option<bool>,
}

/// Use a Compute Engine VM image to start the notebook instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderVmImage {
    /// Use this VM image family to find the image; the newest image in this family will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageFamily")]
    pub image_family: Option<String>,
    /// Use VM image name to find the image.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageName")]
    pub image_name: Option<String>,
    /// The name of the Google Cloud project that this VM image belongs to.
    /// Format: projects/{project_id}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}


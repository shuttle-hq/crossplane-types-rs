// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// EndpointSpec defines the desired state of Endpoint
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "dms.aws.upbound.io", version = "v1beta2", kind = "Endpoint", plural = "endpoints")]
#[kube(status = "EndpointStatus")]
pub struct EndpointSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<EndpointDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: EndpointForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<EndpointInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<EndpointProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<EndpointPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<EndpointWriteConnectionSecretToRef>,
}

/// EndpointSpec defines the desired state of Endpoint
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProvider {
    /// ARN for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArn")]
    pub certificate_arn: Option<String>,
    /// Name of the endpoint database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseName")]
    pub database_name: Option<String>,
    /// Configuration block for OpenSearch settings. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticsearchSettings")]
    pub elasticsearch_settings: Option<EndpointForProviderElasticsearchSettings>,
    /// Type of endpoint. Valid values are source, target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointType")]
    pub endpoint_type: Option<String>,
    /// Type of engine for the endpoint. Valid values are aurora, aurora-postgresql, aurora-serverless, aurora-postgresql-serverless,azuredb, azure-sql-managed-instance, babelfish, db2, db2-zos, docdb, dynamodb, elasticsearch, kafka, kinesis, mariadb, mongodb, mysql, opensearch, oracle, postgres, redshift,redshift-serverless, s3, sqlserver, neptune ,sybase. Please note that some of engine names are available only for target endpoint type (e.g. redshift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineName")]
    pub engine_name: Option<String>,
    /// Additional attributes associated with the connection. For available attributes for a source Endpoint, see Sources for data migration. For available attributes for a target Endpoint, see Targets for data migration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraConnectionAttributes")]
    pub extra_connection_attributes: Option<String>,
    /// Configuration block for Kafka settings. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kafkaSettings")]
    pub kafka_settings: Option<EndpointForProviderKafkaSettings>,
    /// Configuration block for Kinesis settings. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kinesisSettings")]
    pub kinesis_settings: Option<EndpointForProviderKinesisSettings>,
    /// ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for kms_key_arn, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. To encrypt an S3 target with a KMS Key, use the parameter s3_settings.server_side_encryption_kms_key_id. When engine_name is redshift, kms_key_arn is the KMS Key for the Redshift target and the parameter redshift_settings.server_side_encryption_kms_key_id encrypts the S3 intermediate storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArnRef")]
    pub kms_key_arn_ref: Option<EndpointForProviderKmsKeyArnRef>,
    /// Selector for a Key in kms to populate kmsKeyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArnSelector")]
    pub kms_key_arn_selector: Option<EndpointForProviderKmsKeyArnSelector>,
    /// Configuration block for MongoDB settings. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mongodbSettings")]
    pub mongodb_settings: Option<EndpointForProviderMongodbSettings>,
    /// Password to be used to login to the endpoint database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretRef")]
    pub password_secret_ref: Option<EndpointForProviderPasswordSecretRef>,
    /// Only tasks paused by the resource will be restarted after the modification completes. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pauseReplicationTasks")]
    pub pause_replication_tasks: Option<bool>,
    /// Port used by the endpoint database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Configuration block for Postgres settings. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postgresSettings")]
    pub postgres_settings: Option<EndpointForProviderPostgresSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redisSettings")]
    pub redis_settings: Option<EndpointForProviderRedisSettings>,
    /// Configuration block for Redshift settings. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redshiftSettings")]
    pub redshift_settings: Option<EndpointForProviderRedshiftSettings>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// (Deprecated, use the aws_dms_s3_endpoint resource instead) Configuration block for S3 settings. See below.
    /// This argument is deprecated and will be removed in a future version; use aws_dms_s3_endpoint instead
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Settings")]
    pub s3_settings: Option<EndpointForProviderS3Settings>,
    /// ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in the Secrets Manager secret referred to by secrets_manager_arn. The role must allow the iam:PassRole action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerAccessRoleArn")]
    pub secrets_manager_access_role_arn: Option<String>,
    /// Reference to a Role in iam to populate secretsManagerAccessRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerAccessRoleArnRef")]
    pub secrets_manager_access_role_arn_ref: Option<EndpointForProviderSecretsManagerAccessRoleArnRef>,
    /// Selector for a Role in iam to populate secretsManagerAccessRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerAccessRoleArnSelector")]
    pub secrets_manager_access_role_arn_selector: Option<EndpointForProviderSecretsManagerAccessRoleArnSelector>,
    /// text values for username, password , server_name, and port. You can't specify both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerArn")]
    pub secrets_manager_arn: Option<String>,
    /// Host name of the server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
    /// ARN used by the service access IAM role for dynamodb endpoints.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRole")]
    pub service_access_role: Option<String>,
    /// Reference to a Role in iam to populate serviceAccessRole.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRoleRef")]
    pub service_access_role_ref: Option<EndpointForProviderServiceAccessRoleRef>,
    /// Selector for a Role in iam to populate serviceAccessRole.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRoleSelector")]
    pub service_access_role_selector: Option<EndpointForProviderServiceAccessRoleSelector>,
    /// SSL mode to use for the connection. Valid values are none, require, verify-ca, verify-full
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslMode")]
    pub ssl_mode: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// User name to be used to login to the endpoint database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// Configuration block for OpenSearch settings. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderElasticsearchSettings {
    /// Endpoint for the OpenSearch cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointUri")]
    pub endpoint_uri: Option<String>,
    /// Maximum number of seconds for which DMS retries failed API requests to the OpenSearch cluster. Default is 300.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorRetryDuration")]
    pub error_retry_duration: Option<f64>,
    /// Maximum percentage of records that can fail to be written before a full load operation stops. Default is 10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullLoadErrorPercentage")]
    pub full_load_error_percentage: Option<f64>,
    /// ARN of the IAM Role with permissions to write to the OpenSearch cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRoleArn")]
    pub service_access_role_arn: Option<String>,
    /// Enable to migrate documentation using the documentation type _doc. OpenSearch and an Elasticsearch clusters only support the _doc documentation type in versions 7.x and later. The default value is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useNewMappingType")]
    pub use_new_mapping_type: Option<bool>,
}

/// Configuration block for Kafka settings. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderKafkaSettings {
    /// Kafka broker location. Specify in the form broker-hostname-or-ip:port.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub broker: Option<String>,
    /// Shows detailed control information for table definition, column definition, and table and column changes in the Kafka message output. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeControlDetails")]
    pub include_control_details: Option<bool>,
    /// Include NULL and empty columns for records migrated to the endpoint. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeNullAndEmpty")]
    pub include_null_and_empty: Option<bool>,
    /// Shows the partition value within the Kafka message output unless the partition type is schema-table-type. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includePartitionValue")]
    pub include_partition_value: Option<bool>,
    /// Includes any data definition language (DDL) operations that change the table in the control data, such as rename-table, drop-table, add-column, drop-column, and rename-column. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeTableAlterOperations")]
    pub include_table_alter_operations: Option<bool>,
    /// Provides detailed transaction information from the source database. This information includes a commit timestamp, a log position, and values for transaction_id, previous transaction_id, and transaction_record_id (the record offset within a transaction). Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeTransactionDetails")]
    pub include_transaction_details: Option<bool>,
    /// Output format for the records created on the endpoint. Message format is JSON (default) or JSON_UNFORMATTED (a single line with no tab).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageFormat")]
    pub message_format: Option<String>,
    /// Maximum size in bytes for records created on the endpoint Default is 1,000,000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageMaxBytes")]
    pub message_max_bytes: Option<f64>,
    /// Set this optional parameter to true to avoid adding a '0x' prefix to raw data in hexadecimal format. For example, by default, AWS DMS adds a '0x' prefix to the LOB column type in hexadecimal format moving from an Oracle source to a Kafka target. Use the no_hex_prefix endpoint setting to enable migration of RAW data type columns without adding the '0x' prefix.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noHexPrefix")]
    pub no_hex_prefix: Option<bool>,
    /// Prefixes schema and table names to partition values, when the partition type is primary-key-type. Doing this increases data distribution among Kafka partitions. For example, suppose that a SysBench schema has thousands of tables and each table has only limited range for a primary key. In this case, the same primary key is sent from thousands of tables to the same partition, which causes throttling. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "partitionIncludeSchemaTable")]
    pub partition_include_schema_table: Option<bool>,
    /// Secure password you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "saslPasswordSecretRef")]
    pub sasl_password_secret_ref: Option<EndpointForProviderKafkaSettingsSaslPasswordSecretRef>,
    /// Secure user name you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "saslUsername")]
    pub sasl_username: Option<String>,
    /// Set secure connection to a Kafka target endpoint using Transport Layer Security (TLS). Options include ssl-encryption, ssl-authentication, and sasl-ssl. sasl-ssl requires sasl_username and sasl_password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityProtocol")]
    pub security_protocol: Option<String>,
    /// ARN for the private certificate authority (CA) cert that AWS DMS uses to securely connect to your Kafka target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCaCertificateArn")]
    pub ssl_ca_certificate_arn: Option<String>,
    /// ARN of the client certificate used to securely connect to a Kafka target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslClientCertificateArn")]
    pub ssl_client_certificate_arn: Option<String>,
    /// ARN for the client private key used to securely connect to a Kafka target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslClientKeyArn")]
    pub ssl_client_key_arn: Option<String>,
    /// Password for the client private key used to securely connect to a Kafka target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslClientKeyPasswordSecretRef")]
    pub ssl_client_key_password_secret_ref: Option<EndpointForProviderKafkaSettingsSslClientKeyPasswordSecretRef>,
    /// Kafka topic for migration. Default is kafka-default-topic.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
}

/// Secure password you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderKafkaSettingsSaslPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Password for the client private key used to securely connect to a Kafka target endpoint.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderKafkaSettingsSslClientKeyPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Configuration block for Kinesis settings. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderKinesisSettings {
    /// Shows detailed control information for table definition, column definition, and table and column changes in the Kinesis message output. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeControlDetails")]
    pub include_control_details: Option<bool>,
    /// Include NULL and empty columns in the target. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeNullAndEmpty")]
    pub include_null_and_empty: Option<bool>,
    /// Shows the partition value within the Kinesis message output, unless the partition type is schema-table-type. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includePartitionValue")]
    pub include_partition_value: Option<bool>,
    /// Includes any data definition language (DDL) operations that change the table in the control data. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeTableAlterOperations")]
    pub include_table_alter_operations: Option<bool>,
    /// Provides detailed transaction information from the source database. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeTransactionDetails")]
    pub include_transaction_details: Option<bool>,
    /// Output format for the records created. Default is json. Valid values are json and json-unformatted (a single line with no tab).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageFormat")]
    pub message_format: Option<String>,
    /// Prefixes schema and table names to partition values, when the partition type is primary-key-type. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "partitionIncludeSchemaTable")]
    pub partition_include_schema_table: Option<bool>,
    /// ARN of the IAM Role with permissions to write to the Kinesis data stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRoleArn")]
    pub service_access_role_arn: Option<String>,
    /// ARN of the Kinesis data stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamArn")]
    pub stream_arn: Option<String>,
}

/// Reference to a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderKmsKeyArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointForProviderKmsKeyArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderKmsKeyArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointForProviderKmsKeyArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointForProviderKmsKeyArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointForProviderKmsKeyArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointForProviderKmsKeyArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderKmsKeyArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointForProviderKmsKeyArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderKmsKeyArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointForProviderKmsKeyArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointForProviderKmsKeyArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointForProviderKmsKeyArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointForProviderKmsKeyArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block for MongoDB settings. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderMongodbSettings {
    /// Authentication mechanism to access the MongoDB source endpoint. Default is default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMechanism")]
    pub auth_mechanism: Option<String>,
    /// Authentication database name. Not used when auth_type is no. Default is admin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authSource")]
    pub auth_source: Option<String>,
    /// Authentication type to access the MongoDB source endpoint. Default is password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authType")]
    pub auth_type: Option<String>,
    /// Number of documents to preview to determine the document organization. Use this setting when nesting_level is set to one. Default is 1000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "docsToInvestigate")]
    pub docs_to_investigate: Option<String>,
    /// Document ID. Use this setting when nesting_level is set to none. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extractDocId")]
    pub extract_doc_id: Option<String>,
    /// Specifies either document or table mode. Default is none. Valid values are one (table mode) and none (document mode).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nestingLevel")]
    pub nesting_level: Option<String>,
}

/// Password to be used to login to the endpoint database.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Configuration block for Postgres settings. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderPostgresSettings {
    /// For use with change data capture (CDC) only, this attribute has AWS DMS bypass foreign keys and user triggers to reduce the time it takes to bulk load data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "afterConnectScript")]
    pub after_connect_script: Option<String>,
    /// The Babelfish for Aurora PostgreSQL database name for the endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "babelfishDatabaseName")]
    pub babelfish_database_name: Option<String>,
    /// To capture DDL events, AWS DMS creates various artifacts in the PostgreSQL database when the task starts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "captureDdls")]
    pub capture_ddls: Option<bool>,
    /// Specifies the default behavior of the replication's handling of PostgreSQL- compatible endpoints that require some additional configuration, such as Babelfish endpoints.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseMode")]
    pub database_mode: Option<String>,
    /// Sets the schema in which the operational DDL database artifacts are created. Default is public.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ddlArtifactsSchema")]
    pub ddl_artifacts_schema: Option<String>,
    /// Sets the client statement timeout for the PostgreSQL instance, in seconds. Default value is 60.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executeTimeout")]
    pub execute_timeout: Option<f64>,
    /// When set to true, this value causes a task to fail if the actual size of a LOB column is greater than the specified LobMaxSize. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failTasksOnLobTruncation")]
    pub fail_tasks_on_lob_truncation: Option<bool>,
    /// The write-ahead log (WAL) heartbeat feature mimics a dummy transaction. By doing this, it prevents idle logical replication slots from holding onto old WAL logs, which can result in storage full situations on the source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "heartbeatEnable")]
    pub heartbeat_enable: Option<bool>,
    /// Sets the WAL heartbeat frequency (in minutes). Default value is 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "heartbeatFrequency")]
    pub heartbeat_frequency: Option<f64>,
    /// Sets the schema in which the heartbeat artifacts are created. Default value is public.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "heartbeatSchema")]
    pub heartbeat_schema: Option<String>,
    /// You can use PostgreSQL endpoint settings to map a boolean as a boolean from your PostgreSQL source to a Amazon Redshift target. Default value is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mapBooleanAsBoolean")]
    pub map_boolean_as_boolean: Option<bool>,
    /// Optional When true, DMS migrates JSONB values as CLOB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mapJsonbAsClob")]
    pub map_jsonb_as_clob: Option<bool>,
    /// Optional When true, DMS migrates LONG values as VARCHAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mapLongVarcharAs")]
    pub map_long_varchar_as: Option<String>,
    /// Specifies the maximum size (in KB) of any .csv file used to transfer data to PostgreSQL. Default is 32,768 KB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxFileSize")]
    pub max_file_size: Option<f64>,
    /// Specifies the plugin to use to create a replication slot. Valid values: pglogical, test_decoding.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pluginName")]
    pub plugin_name: Option<String>,
    /// Sets the name of a previously created logical replication slot for a CDC load of the PostgreSQL source instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slotName")]
    pub slot_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderRedisSettings {
    /// The password provided with the auth-role and auth-token options of the AuthType setting for a Redis target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authPasswordSecretRef")]
    pub auth_password_secret_ref: Option<EndpointForProviderRedisSettingsAuthPasswordSecretRef>,
    /// Authentication type to access the MongoDB source endpoint. Default is password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authType")]
    pub auth_type: Option<String>,
    /// The username provided with the auth-role option of the AuthType setting for a Redis target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authUserName")]
    pub auth_user_name: Option<String>,
    /// Port used by the endpoint database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Host name of the server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
    /// The Amazon Resource Name (ARN) for the certificate authority (CA) that DMS uses to connect to your Redis target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCaCertificateArn")]
    pub ssl_ca_certificate_arn: Option<String>,
    /// The plaintext option doesn't provide Transport Layer Security (TLS) encryption for traffic between endpoint and database. Options include plaintext, ssl-encryption. The default is ssl-encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslSecurityProtocol")]
    pub ssl_security_protocol: Option<String>,
}

/// The password provided with the auth-role and auth-token options of the AuthType setting for a Redis target endpoint.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderRedisSettingsAuthPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Configuration block for Redshift settings. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderRedshiftSettings {
    /// Custom S3 Bucket Object prefix for intermediate storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketFolder")]
    pub bucket_folder: Option<String>,
    /// Custom S3 Bucket name for intermediate storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    pub bucket_name: Option<String>,
    /// The server-side encryption mode that you want to encrypt your intermediate .csv object files copied to S3. Defaults to SSE_S3. Valid values are SSE_S3 and SSE_KMS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionMode")]
    pub encryption_mode: Option<String>,
    /// ARN or Id of KMS Key to use when encryption_mode is SSE_KMS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideEncryptionKmsKeyId")]
    pub server_side_encryption_kms_key_id: Option<String>,
    /// Amazon Resource Name (ARN) of the IAM Role with permissions to read from or write to the S3 Bucket for intermediate storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRoleArn")]
    pub service_access_role_arn: Option<String>,
}

/// (Deprecated, use the aws_dms_s3_endpoint resource instead) Configuration block for S3 settings. See below.
/// This argument is deprecated and will be removed in a future version; use aws_dms_s3_endpoint instead
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderS3Settings {
    /// Whether to add column name information to the .csv output file. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addColumnName")]
    pub add_column_name: Option<bool>,
    /// S3 object prefix.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketFolder")]
    pub bucket_folder: Option<String>,
    /// S3 bucket name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    pub bucket_name: Option<String>,
    /// Predefined (canned) access control list for objects created in an S3 bucket. Valid values include none, private, public-read, public-read-write, authenticated-read, aws-exec-read, bucket-owner-read, and bucket-owner-full-control. Default is none.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cannedAclForObjects")]
    pub canned_acl_for_objects: Option<String>,
    /// Whether to write insert and update operations to .csv or .parquet output files. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdcInsertsAndUpdates")]
    pub cdc_inserts_and_updates: Option<bool>,
    /// Whether to write insert operations to .csv or .parquet output files. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdcInsertsOnly")]
    pub cdc_inserts_only: Option<bool>,
    /// Maximum length of the interval, defined in seconds, after which to output a file to Amazon S3. Default is 60.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdcMaxBatchInterval")]
    pub cdc_max_batch_interval: Option<f64>,
    /// Minimum file size condition as defined in kilobytes to output a file to Amazon S3. Default is 32000. NOTE: Previously, this setting was measured in megabytes but now represents kilobytes. Update configurations accordingly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdcMinFileSize")]
    pub cdc_min_file_size: Option<f64>,
    /// Folder path of CDC files. For an S3 source, this setting is required if a task captures change data; otherwise, it's optional. If cdc_path is set, AWS DMS reads CDC files from this path and replicates the data changes to the target endpoint. Supported in AWS DMS versions 3.4.2 and later.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdcPath")]
    pub cdc_path: Option<String>,
    /// Set to compress target files. Default is NONE. Valid values are GZIP and NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionType")]
    pub compression_type: Option<String>,
    /// Delimiter used to separate columns in the source files. Default is ,.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csvDelimiter")]
    pub csv_delimiter: Option<String>,
    /// String to use for all columns not included in the supplemental log.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csvNoSupValue")]
    pub csv_no_sup_value: Option<String>,
    /// String to as null when writing to the target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csvNullValue")]
    pub csv_null_value: Option<String>,
    /// Delimiter used to separate rows in the source files. Default is \n.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csvRowDelimiter")]
    pub csv_row_delimiter: Option<String>,
    /// Output format for the files that AWS DMS uses to create S3 objects. Valid values are csv and parquet. Default is csv.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataFormat")]
    pub data_format: Option<String>,
    /// Size of one data page in bytes. Default is 1048576 (1 MiB).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataPageSize")]
    pub data_page_size: Option<f64>,
    /// Date separating delimiter to use during folder partitioning. Valid values are SLASH, UNDERSCORE, DASH, and NONE. Default is SLASH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datePartitionDelimiter")]
    pub date_partition_delimiter: Option<String>,
    /// Partition S3 bucket folders based on transaction commit dates. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datePartitionEnabled")]
    pub date_partition_enabled: Option<bool>,
    /// Date format to use during folder partitioning. Use this parameter when date_partition_enabled is set to true. Valid values are YYYYMMDD, YYYYMMDDHH, YYYYMM, MMYYYYDD, and DDMMYYYY. Default is YYYYMMDD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datePartitionSequence")]
    pub date_partition_sequence: Option<String>,
    /// Maximum size in bytes of an encoded dictionary page of a column. Default is 1048576 (1 MiB).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dictPageSizeLimit")]
    pub dict_page_size_limit: Option<f64>,
    /// Whether to enable statistics for Parquet pages and row groups. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableStatistics")]
    pub enable_statistics: Option<bool>,
    /// Type of encoding to use. Value values are rle_dictionary, plain, and plain_dictionary. Default is rle_dictionary.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encodingType")]
    pub encoding_type: Option<String>,
    /// Server-side encryption mode that you want to encrypt your .csv or .parquet object files copied to S3. Valid values are SSE_S3 and SSE_KMS. Default is SSE_S3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionMode")]
    pub encryption_mode: Option<String>,
    /// JSON document that describes how AWS DMS should interpret the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalTableDefinition")]
    pub external_table_definition: Option<String>,
    /// Whether to integrate AWS Glue Data Catalog with an Amazon S3 target. See Using AWS Glue Data Catalog with an Amazon S3 target for AWS DMS for more information. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "glueCatalogGeneration")]
    pub glue_catalog_generation: Option<bool>,
    /// When this value is set to 1, DMS ignores the first row header in a .csv file. Default is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreHeaderRows")]
    pub ignore_header_rows: Option<f64>,
    /// Whether to enable a full load to write INSERT operations to the .csv output files only to indicate how the rows were added to the source database. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeOpForFullLoad")]
    pub include_op_for_full_load: Option<bool>,
    /// Maximum size (in KB) of any .csv file to be created while migrating to an S3 target during full load. Valid values are from 1 to 1048576. Default is 1048576 (1 GB).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxFileSize")]
    pub max_file_size: Option<f64>,
    /// - Specifies the precision of any TIMESTAMP column values written to an S3 object file in .parquet format. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parquetTimestampInMillisecond")]
    pub parquet_timestamp_in_millisecond: Option<bool>,
    /// Version of the .parquet file format. Default is parquet-1-0. Valid values are parquet-1-0 and parquet-2-0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parquetVersion")]
    pub parquet_version: Option<String>,
    /// Whether DMS saves the transaction order for a CDC load on the S3 target specified by cdc_path. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveTransactions")]
    pub preserve_transactions: Option<bool>,
    /// For an S3 source, whether each leading double quotation mark has to be followed by an ending double quotation mark. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rfc4180: Option<bool>,
    /// Number of rows in a row group. Default is 10000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rowGroupLength")]
    pub row_group_length: Option<f64>,
    /// ARN or Id of KMS Key to use when encryption_mode is SSE_KMS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideEncryptionKmsKeyId")]
    pub server_side_encryption_kms_key_id: Option<String>,
    /// ARN of the IAM Role with permissions to read from or write to the S3 Bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRoleArn")]
    pub service_access_role_arn: Option<String>,
    /// Column to add with timestamp information to the endpoint data for an Amazon S3 target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timestampColumnName")]
    pub timestamp_column_name: Option<String>,
    /// Whether to use csv_no_sup_value for columns not included in the supplemental log.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useCsvNoSupValue")]
    pub use_csv_no_sup_value: Option<bool>,
    /// When set to true, uses the task start time as the timestamp column value instead of the time data is written to target. For full load, when set to true, each row of the timestamp column contains the task start time. For CDC loads, each row of the timestamp column contains the transaction commit time. When set to false, the full load timestamp in the timestamp column increments with the time data arrives at the target. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTaskStartTimeForFullLoadTimestamp")]
    pub use_task_start_time_for_full_load_timestamp: Option<bool>,
}

/// Reference to a Role in iam to populate secretsManagerAccessRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderSecretsManagerAccessRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointForProviderSecretsManagerAccessRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderSecretsManagerAccessRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointForProviderSecretsManagerAccessRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointForProviderSecretsManagerAccessRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointForProviderSecretsManagerAccessRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointForProviderSecretsManagerAccessRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate secretsManagerAccessRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderSecretsManagerAccessRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointForProviderSecretsManagerAccessRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderSecretsManagerAccessRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointForProviderSecretsManagerAccessRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointForProviderSecretsManagerAccessRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointForProviderSecretsManagerAccessRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointForProviderSecretsManagerAccessRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate serviceAccessRole.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderServiceAccessRoleRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointForProviderServiceAccessRoleRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderServiceAccessRoleRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointForProviderServiceAccessRoleRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointForProviderServiceAccessRoleRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointForProviderServiceAccessRoleRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointForProviderServiceAccessRoleRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate serviceAccessRole.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderServiceAccessRoleSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointForProviderServiceAccessRoleSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointForProviderServiceAccessRoleSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointForProviderServiceAccessRoleSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointForProviderServiceAccessRoleSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointForProviderServiceAccessRoleSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointForProviderServiceAccessRoleSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProvider {
    /// ARN for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArn")]
    pub certificate_arn: Option<String>,
    /// Name of the endpoint database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseName")]
    pub database_name: Option<String>,
    /// Configuration block for OpenSearch settings. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticsearchSettings")]
    pub elasticsearch_settings: Option<EndpointInitProviderElasticsearchSettings>,
    /// Type of endpoint. Valid values are source, target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointType")]
    pub endpoint_type: Option<String>,
    /// Type of engine for the endpoint. Valid values are aurora, aurora-postgresql, aurora-serverless, aurora-postgresql-serverless,azuredb, azure-sql-managed-instance, babelfish, db2, db2-zos, docdb, dynamodb, elasticsearch, kafka, kinesis, mariadb, mongodb, mysql, opensearch, oracle, postgres, redshift,redshift-serverless, s3, sqlserver, neptune ,sybase. Please note that some of engine names are available only for target endpoint type (e.g. redshift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineName")]
    pub engine_name: Option<String>,
    /// Additional attributes associated with the connection. For available attributes for a source Endpoint, see Sources for data migration. For available attributes for a target Endpoint, see Targets for data migration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraConnectionAttributes")]
    pub extra_connection_attributes: Option<String>,
    /// Configuration block for Kafka settings. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kafkaSettings")]
    pub kafka_settings: Option<EndpointInitProviderKafkaSettings>,
    /// Configuration block for Kinesis settings. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kinesisSettings")]
    pub kinesis_settings: Option<EndpointInitProviderKinesisSettings>,
    /// ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for kms_key_arn, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. To encrypt an S3 target with a KMS Key, use the parameter s3_settings.server_side_encryption_kms_key_id. When engine_name is redshift, kms_key_arn is the KMS Key for the Redshift target and the parameter redshift_settings.server_side_encryption_kms_key_id encrypts the S3 intermediate storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArnRef")]
    pub kms_key_arn_ref: Option<EndpointInitProviderKmsKeyArnRef>,
    /// Selector for a Key in kms to populate kmsKeyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArnSelector")]
    pub kms_key_arn_selector: Option<EndpointInitProviderKmsKeyArnSelector>,
    /// Configuration block for MongoDB settings. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mongodbSettings")]
    pub mongodb_settings: Option<EndpointInitProviderMongodbSettings>,
    /// Password to be used to login to the endpoint database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretRef")]
    pub password_secret_ref: Option<EndpointInitProviderPasswordSecretRef>,
    /// Only tasks paused by the resource will be restarted after the modification completes. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pauseReplicationTasks")]
    pub pause_replication_tasks: Option<bool>,
    /// Port used by the endpoint database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Configuration block for Postgres settings. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postgresSettings")]
    pub postgres_settings: Option<EndpointInitProviderPostgresSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redisSettings")]
    pub redis_settings: Option<EndpointInitProviderRedisSettings>,
    /// Configuration block for Redshift settings. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redshiftSettings")]
    pub redshift_settings: Option<EndpointInitProviderRedshiftSettings>,
    /// (Deprecated, use the aws_dms_s3_endpoint resource instead) Configuration block for S3 settings. See below.
    /// This argument is deprecated and will be removed in a future version; use aws_dms_s3_endpoint instead
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Settings")]
    pub s3_settings: Option<EndpointInitProviderS3Settings>,
    /// ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in the Secrets Manager secret referred to by secrets_manager_arn. The role must allow the iam:PassRole action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerAccessRoleArn")]
    pub secrets_manager_access_role_arn: Option<String>,
    /// Reference to a Role in iam to populate secretsManagerAccessRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerAccessRoleArnRef")]
    pub secrets_manager_access_role_arn_ref: Option<EndpointInitProviderSecretsManagerAccessRoleArnRef>,
    /// Selector for a Role in iam to populate secretsManagerAccessRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerAccessRoleArnSelector")]
    pub secrets_manager_access_role_arn_selector: Option<EndpointInitProviderSecretsManagerAccessRoleArnSelector>,
    /// text values for username, password , server_name, and port. You can't specify both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerArn")]
    pub secrets_manager_arn: Option<String>,
    /// Host name of the server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
    /// ARN used by the service access IAM role for dynamodb endpoints.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRole")]
    pub service_access_role: Option<String>,
    /// Reference to a Role in iam to populate serviceAccessRole.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRoleRef")]
    pub service_access_role_ref: Option<EndpointInitProviderServiceAccessRoleRef>,
    /// Selector for a Role in iam to populate serviceAccessRole.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRoleSelector")]
    pub service_access_role_selector: Option<EndpointInitProviderServiceAccessRoleSelector>,
    /// SSL mode to use for the connection. Valid values are none, require, verify-ca, verify-full
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslMode")]
    pub ssl_mode: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// User name to be used to login to the endpoint database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// Configuration block for OpenSearch settings. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderElasticsearchSettings {
    /// Endpoint for the OpenSearch cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointUri")]
    pub endpoint_uri: Option<String>,
    /// Maximum number of seconds for which DMS retries failed API requests to the OpenSearch cluster. Default is 300.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorRetryDuration")]
    pub error_retry_duration: Option<f64>,
    /// Maximum percentage of records that can fail to be written before a full load operation stops. Default is 10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullLoadErrorPercentage")]
    pub full_load_error_percentage: Option<f64>,
    /// ARN of the IAM Role with permissions to write to the OpenSearch cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRoleArn")]
    pub service_access_role_arn: Option<String>,
    /// Enable to migrate documentation using the documentation type _doc. OpenSearch and an Elasticsearch clusters only support the _doc documentation type in versions 7.x and later. The default value is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useNewMappingType")]
    pub use_new_mapping_type: Option<bool>,
}

/// Configuration block for Kafka settings. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderKafkaSettings {
    /// Kafka broker location. Specify in the form broker-hostname-or-ip:port.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub broker: Option<String>,
    /// Shows detailed control information for table definition, column definition, and table and column changes in the Kafka message output. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeControlDetails")]
    pub include_control_details: Option<bool>,
    /// Include NULL and empty columns for records migrated to the endpoint. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeNullAndEmpty")]
    pub include_null_and_empty: Option<bool>,
    /// Shows the partition value within the Kafka message output unless the partition type is schema-table-type. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includePartitionValue")]
    pub include_partition_value: Option<bool>,
    /// Includes any data definition language (DDL) operations that change the table in the control data, such as rename-table, drop-table, add-column, drop-column, and rename-column. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeTableAlterOperations")]
    pub include_table_alter_operations: Option<bool>,
    /// Provides detailed transaction information from the source database. This information includes a commit timestamp, a log position, and values for transaction_id, previous transaction_id, and transaction_record_id (the record offset within a transaction). Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeTransactionDetails")]
    pub include_transaction_details: Option<bool>,
    /// Output format for the records created on the endpoint. Message format is JSON (default) or JSON_UNFORMATTED (a single line with no tab).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageFormat")]
    pub message_format: Option<String>,
    /// Maximum size in bytes for records created on the endpoint Default is 1,000,000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageMaxBytes")]
    pub message_max_bytes: Option<f64>,
    /// Set this optional parameter to true to avoid adding a '0x' prefix to raw data in hexadecimal format. For example, by default, AWS DMS adds a '0x' prefix to the LOB column type in hexadecimal format moving from an Oracle source to a Kafka target. Use the no_hex_prefix endpoint setting to enable migration of RAW data type columns without adding the '0x' prefix.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noHexPrefix")]
    pub no_hex_prefix: Option<bool>,
    /// Prefixes schema and table names to partition values, when the partition type is primary-key-type. Doing this increases data distribution among Kafka partitions. For example, suppose that a SysBench schema has thousands of tables and each table has only limited range for a primary key. In this case, the same primary key is sent from thousands of tables to the same partition, which causes throttling. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "partitionIncludeSchemaTable")]
    pub partition_include_schema_table: Option<bool>,
    /// Secure password you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "saslPasswordSecretRef")]
    pub sasl_password_secret_ref: Option<EndpointInitProviderKafkaSettingsSaslPasswordSecretRef>,
    /// Secure user name you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "saslUsername")]
    pub sasl_username: Option<String>,
    /// Set secure connection to a Kafka target endpoint using Transport Layer Security (TLS). Options include ssl-encryption, ssl-authentication, and sasl-ssl. sasl-ssl requires sasl_username and sasl_password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityProtocol")]
    pub security_protocol: Option<String>,
    /// ARN for the private certificate authority (CA) cert that AWS DMS uses to securely connect to your Kafka target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCaCertificateArn")]
    pub ssl_ca_certificate_arn: Option<String>,
    /// ARN of the client certificate used to securely connect to a Kafka target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslClientCertificateArn")]
    pub ssl_client_certificate_arn: Option<String>,
    /// ARN for the client private key used to securely connect to a Kafka target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslClientKeyArn")]
    pub ssl_client_key_arn: Option<String>,
    /// Password for the client private key used to securely connect to a Kafka target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslClientKeyPasswordSecretRef")]
    pub ssl_client_key_password_secret_ref: Option<EndpointInitProviderKafkaSettingsSslClientKeyPasswordSecretRef>,
    /// Kafka topic for migration. Default is kafka-default-topic.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
}

/// Secure password you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderKafkaSettingsSaslPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Password for the client private key used to securely connect to a Kafka target endpoint.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderKafkaSettingsSslClientKeyPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Configuration block for Kinesis settings. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderKinesisSettings {
    /// Shows detailed control information for table definition, column definition, and table and column changes in the Kinesis message output. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeControlDetails")]
    pub include_control_details: Option<bool>,
    /// Include NULL and empty columns in the target. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeNullAndEmpty")]
    pub include_null_and_empty: Option<bool>,
    /// Shows the partition value within the Kinesis message output, unless the partition type is schema-table-type. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includePartitionValue")]
    pub include_partition_value: Option<bool>,
    /// Includes any data definition language (DDL) operations that change the table in the control data. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeTableAlterOperations")]
    pub include_table_alter_operations: Option<bool>,
    /// Provides detailed transaction information from the source database. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeTransactionDetails")]
    pub include_transaction_details: Option<bool>,
    /// Output format for the records created. Default is json. Valid values are json and json-unformatted (a single line with no tab).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageFormat")]
    pub message_format: Option<String>,
    /// Prefixes schema and table names to partition values, when the partition type is primary-key-type. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "partitionIncludeSchemaTable")]
    pub partition_include_schema_table: Option<bool>,
    /// ARN of the IAM Role with permissions to write to the Kinesis data stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRoleArn")]
    pub service_access_role_arn: Option<String>,
    /// ARN of the Kinesis data stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamArn")]
    pub stream_arn: Option<String>,
}

/// Reference to a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderKmsKeyArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointInitProviderKmsKeyArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderKmsKeyArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointInitProviderKmsKeyArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointInitProviderKmsKeyArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointInitProviderKmsKeyArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointInitProviderKmsKeyArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderKmsKeyArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointInitProviderKmsKeyArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderKmsKeyArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointInitProviderKmsKeyArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointInitProviderKmsKeyArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointInitProviderKmsKeyArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointInitProviderKmsKeyArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block for MongoDB settings. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderMongodbSettings {
    /// Authentication mechanism to access the MongoDB source endpoint. Default is default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMechanism")]
    pub auth_mechanism: Option<String>,
    /// Authentication database name. Not used when auth_type is no. Default is admin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authSource")]
    pub auth_source: Option<String>,
    /// Authentication type to access the MongoDB source endpoint. Default is password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authType")]
    pub auth_type: Option<String>,
    /// Number of documents to preview to determine the document organization. Use this setting when nesting_level is set to one. Default is 1000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "docsToInvestigate")]
    pub docs_to_investigate: Option<String>,
    /// Document ID. Use this setting when nesting_level is set to none. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extractDocId")]
    pub extract_doc_id: Option<String>,
    /// Specifies either document or table mode. Default is none. Valid values are one (table mode) and none (document mode).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nestingLevel")]
    pub nesting_level: Option<String>,
}

/// Password to be used to login to the endpoint database.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Configuration block for Postgres settings. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderPostgresSettings {
    /// For use with change data capture (CDC) only, this attribute has AWS DMS bypass foreign keys and user triggers to reduce the time it takes to bulk load data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "afterConnectScript")]
    pub after_connect_script: Option<String>,
    /// The Babelfish for Aurora PostgreSQL database name for the endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "babelfishDatabaseName")]
    pub babelfish_database_name: Option<String>,
    /// To capture DDL events, AWS DMS creates various artifacts in the PostgreSQL database when the task starts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "captureDdls")]
    pub capture_ddls: Option<bool>,
    /// Specifies the default behavior of the replication's handling of PostgreSQL- compatible endpoints that require some additional configuration, such as Babelfish endpoints.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseMode")]
    pub database_mode: Option<String>,
    /// Sets the schema in which the operational DDL database artifacts are created. Default is public.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ddlArtifactsSchema")]
    pub ddl_artifacts_schema: Option<String>,
    /// Sets the client statement timeout for the PostgreSQL instance, in seconds. Default value is 60.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executeTimeout")]
    pub execute_timeout: Option<f64>,
    /// When set to true, this value causes a task to fail if the actual size of a LOB column is greater than the specified LobMaxSize. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failTasksOnLobTruncation")]
    pub fail_tasks_on_lob_truncation: Option<bool>,
    /// The write-ahead log (WAL) heartbeat feature mimics a dummy transaction. By doing this, it prevents idle logical replication slots from holding onto old WAL logs, which can result in storage full situations on the source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "heartbeatEnable")]
    pub heartbeat_enable: Option<bool>,
    /// Sets the WAL heartbeat frequency (in minutes). Default value is 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "heartbeatFrequency")]
    pub heartbeat_frequency: Option<f64>,
    /// Sets the schema in which the heartbeat artifacts are created. Default value is public.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "heartbeatSchema")]
    pub heartbeat_schema: Option<String>,
    /// You can use PostgreSQL endpoint settings to map a boolean as a boolean from your PostgreSQL source to a Amazon Redshift target. Default value is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mapBooleanAsBoolean")]
    pub map_boolean_as_boolean: Option<bool>,
    /// Optional When true, DMS migrates JSONB values as CLOB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mapJsonbAsClob")]
    pub map_jsonb_as_clob: Option<bool>,
    /// Optional When true, DMS migrates LONG values as VARCHAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mapLongVarcharAs")]
    pub map_long_varchar_as: Option<String>,
    /// Specifies the maximum size (in KB) of any .csv file used to transfer data to PostgreSQL. Default is 32,768 KB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxFileSize")]
    pub max_file_size: Option<f64>,
    /// Specifies the plugin to use to create a replication slot. Valid values: pglogical, test_decoding.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pluginName")]
    pub plugin_name: Option<String>,
    /// Sets the name of a previously created logical replication slot for a CDC load of the PostgreSQL source instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slotName")]
    pub slot_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderRedisSettings {
    /// The password provided with the auth-role and auth-token options of the AuthType setting for a Redis target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authPasswordSecretRef")]
    pub auth_password_secret_ref: Option<EndpointInitProviderRedisSettingsAuthPasswordSecretRef>,
    /// Authentication type to access the MongoDB source endpoint. Default is password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authType")]
    pub auth_type: Option<String>,
    /// The username provided with the auth-role option of the AuthType setting for a Redis target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authUserName")]
    pub auth_user_name: Option<String>,
    /// Port used by the endpoint database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Host name of the server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
    /// The Amazon Resource Name (ARN) for the certificate authority (CA) that DMS uses to connect to your Redis target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCaCertificateArn")]
    pub ssl_ca_certificate_arn: Option<String>,
    /// The plaintext option doesn't provide Transport Layer Security (TLS) encryption for traffic between endpoint and database. Options include plaintext, ssl-encryption. The default is ssl-encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslSecurityProtocol")]
    pub ssl_security_protocol: Option<String>,
}

/// The password provided with the auth-role and auth-token options of the AuthType setting for a Redis target endpoint.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderRedisSettingsAuthPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Configuration block for Redshift settings. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderRedshiftSettings {
    /// Custom S3 Bucket Object prefix for intermediate storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketFolder")]
    pub bucket_folder: Option<String>,
    /// Custom S3 Bucket name for intermediate storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    pub bucket_name: Option<String>,
    /// The server-side encryption mode that you want to encrypt your intermediate .csv object files copied to S3. Defaults to SSE_S3. Valid values are SSE_S3 and SSE_KMS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionMode")]
    pub encryption_mode: Option<String>,
    /// ARN or Id of KMS Key to use when encryption_mode is SSE_KMS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideEncryptionKmsKeyId")]
    pub server_side_encryption_kms_key_id: Option<String>,
    /// Amazon Resource Name (ARN) of the IAM Role with permissions to read from or write to the S3 Bucket for intermediate storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRoleArn")]
    pub service_access_role_arn: Option<String>,
}

/// (Deprecated, use the aws_dms_s3_endpoint resource instead) Configuration block for S3 settings. See below.
/// This argument is deprecated and will be removed in a future version; use aws_dms_s3_endpoint instead
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderS3Settings {
    /// Whether to add column name information to the .csv output file. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addColumnName")]
    pub add_column_name: Option<bool>,
    /// S3 object prefix.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketFolder")]
    pub bucket_folder: Option<String>,
    /// S3 bucket name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    pub bucket_name: Option<String>,
    /// Predefined (canned) access control list for objects created in an S3 bucket. Valid values include none, private, public-read, public-read-write, authenticated-read, aws-exec-read, bucket-owner-read, and bucket-owner-full-control. Default is none.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cannedAclForObjects")]
    pub canned_acl_for_objects: Option<String>,
    /// Whether to write insert and update operations to .csv or .parquet output files. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdcInsertsAndUpdates")]
    pub cdc_inserts_and_updates: Option<bool>,
    /// Whether to write insert operations to .csv or .parquet output files. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdcInsertsOnly")]
    pub cdc_inserts_only: Option<bool>,
    /// Maximum length of the interval, defined in seconds, after which to output a file to Amazon S3. Default is 60.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdcMaxBatchInterval")]
    pub cdc_max_batch_interval: Option<f64>,
    /// Minimum file size condition as defined in kilobytes to output a file to Amazon S3. Default is 32000. NOTE: Previously, this setting was measured in megabytes but now represents kilobytes. Update configurations accordingly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdcMinFileSize")]
    pub cdc_min_file_size: Option<f64>,
    /// Folder path of CDC files. For an S3 source, this setting is required if a task captures change data; otherwise, it's optional. If cdc_path is set, AWS DMS reads CDC files from this path and replicates the data changes to the target endpoint. Supported in AWS DMS versions 3.4.2 and later.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdcPath")]
    pub cdc_path: Option<String>,
    /// Set to compress target files. Default is NONE. Valid values are GZIP and NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionType")]
    pub compression_type: Option<String>,
    /// Delimiter used to separate columns in the source files. Default is ,.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csvDelimiter")]
    pub csv_delimiter: Option<String>,
    /// String to use for all columns not included in the supplemental log.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csvNoSupValue")]
    pub csv_no_sup_value: Option<String>,
    /// String to as null when writing to the target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csvNullValue")]
    pub csv_null_value: Option<String>,
    /// Delimiter used to separate rows in the source files. Default is \n.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csvRowDelimiter")]
    pub csv_row_delimiter: Option<String>,
    /// Output format for the files that AWS DMS uses to create S3 objects. Valid values are csv and parquet. Default is csv.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataFormat")]
    pub data_format: Option<String>,
    /// Size of one data page in bytes. Default is 1048576 (1 MiB).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataPageSize")]
    pub data_page_size: Option<f64>,
    /// Date separating delimiter to use during folder partitioning. Valid values are SLASH, UNDERSCORE, DASH, and NONE. Default is SLASH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datePartitionDelimiter")]
    pub date_partition_delimiter: Option<String>,
    /// Partition S3 bucket folders based on transaction commit dates. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datePartitionEnabled")]
    pub date_partition_enabled: Option<bool>,
    /// Date format to use during folder partitioning. Use this parameter when date_partition_enabled is set to true. Valid values are YYYYMMDD, YYYYMMDDHH, YYYYMM, MMYYYYDD, and DDMMYYYY. Default is YYYYMMDD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datePartitionSequence")]
    pub date_partition_sequence: Option<String>,
    /// Maximum size in bytes of an encoded dictionary page of a column. Default is 1048576 (1 MiB).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dictPageSizeLimit")]
    pub dict_page_size_limit: Option<f64>,
    /// Whether to enable statistics for Parquet pages and row groups. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableStatistics")]
    pub enable_statistics: Option<bool>,
    /// Type of encoding to use. Value values are rle_dictionary, plain, and plain_dictionary. Default is rle_dictionary.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encodingType")]
    pub encoding_type: Option<String>,
    /// Server-side encryption mode that you want to encrypt your .csv or .parquet object files copied to S3. Valid values are SSE_S3 and SSE_KMS. Default is SSE_S3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionMode")]
    pub encryption_mode: Option<String>,
    /// JSON document that describes how AWS DMS should interpret the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalTableDefinition")]
    pub external_table_definition: Option<String>,
    /// Whether to integrate AWS Glue Data Catalog with an Amazon S3 target. See Using AWS Glue Data Catalog with an Amazon S3 target for AWS DMS for more information. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "glueCatalogGeneration")]
    pub glue_catalog_generation: Option<bool>,
    /// When this value is set to 1, DMS ignores the first row header in a .csv file. Default is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreHeaderRows")]
    pub ignore_header_rows: Option<f64>,
    /// Whether to enable a full load to write INSERT operations to the .csv output files only to indicate how the rows were added to the source database. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeOpForFullLoad")]
    pub include_op_for_full_load: Option<bool>,
    /// Maximum size (in KB) of any .csv file to be created while migrating to an S3 target during full load. Valid values are from 1 to 1048576. Default is 1048576 (1 GB).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxFileSize")]
    pub max_file_size: Option<f64>,
    /// - Specifies the precision of any TIMESTAMP column values written to an S3 object file in .parquet format. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parquetTimestampInMillisecond")]
    pub parquet_timestamp_in_millisecond: Option<bool>,
    /// Version of the .parquet file format. Default is parquet-1-0. Valid values are parquet-1-0 and parquet-2-0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parquetVersion")]
    pub parquet_version: Option<String>,
    /// Whether DMS saves the transaction order for a CDC load on the S3 target specified by cdc_path. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveTransactions")]
    pub preserve_transactions: Option<bool>,
    /// For an S3 source, whether each leading double quotation mark has to be followed by an ending double quotation mark. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rfc4180: Option<bool>,
    /// Number of rows in a row group. Default is 10000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rowGroupLength")]
    pub row_group_length: Option<f64>,
    /// ARN or Id of KMS Key to use when encryption_mode is SSE_KMS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideEncryptionKmsKeyId")]
    pub server_side_encryption_kms_key_id: Option<String>,
    /// ARN of the IAM Role with permissions to read from or write to the S3 Bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRoleArn")]
    pub service_access_role_arn: Option<String>,
    /// Column to add with timestamp information to the endpoint data for an Amazon S3 target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timestampColumnName")]
    pub timestamp_column_name: Option<String>,
    /// Whether to use csv_no_sup_value for columns not included in the supplemental log.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useCsvNoSupValue")]
    pub use_csv_no_sup_value: Option<bool>,
    /// When set to true, uses the task start time as the timestamp column value instead of the time data is written to target. For full load, when set to true, each row of the timestamp column contains the task start time. For CDC loads, each row of the timestamp column contains the transaction commit time. When set to false, the full load timestamp in the timestamp column increments with the time data arrives at the target. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTaskStartTimeForFullLoadTimestamp")]
    pub use_task_start_time_for_full_load_timestamp: Option<bool>,
}

/// Reference to a Role in iam to populate secretsManagerAccessRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderSecretsManagerAccessRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointInitProviderSecretsManagerAccessRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderSecretsManagerAccessRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointInitProviderSecretsManagerAccessRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointInitProviderSecretsManagerAccessRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointInitProviderSecretsManagerAccessRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointInitProviderSecretsManagerAccessRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate secretsManagerAccessRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderSecretsManagerAccessRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointInitProviderSecretsManagerAccessRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderSecretsManagerAccessRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointInitProviderSecretsManagerAccessRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointInitProviderSecretsManagerAccessRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointInitProviderSecretsManagerAccessRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointInitProviderSecretsManagerAccessRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate serviceAccessRole.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderServiceAccessRoleRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointInitProviderServiceAccessRoleRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderServiceAccessRoleRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointInitProviderServiceAccessRoleRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointInitProviderServiceAccessRoleRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointInitProviderServiceAccessRoleRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointInitProviderServiceAccessRoleRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate serviceAccessRole.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderServiceAccessRoleSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointInitProviderServiceAccessRoleSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointInitProviderServiceAccessRoleSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointInitProviderServiceAccessRoleSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointInitProviderServiceAccessRoleSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointInitProviderServiceAccessRoleSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointInitProviderServiceAccessRoleSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<EndpointPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<EndpointPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// EndpointStatus defines the observed state of Endpoint.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<EndpointStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointStatusAtProvider {
    /// ARN for the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArn")]
    pub certificate_arn: Option<String>,
    /// Name of the endpoint database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseName")]
    pub database_name: Option<String>,
    /// Configuration block for OpenSearch settings. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticsearchSettings")]
    pub elasticsearch_settings: Option<EndpointStatusAtProviderElasticsearchSettings>,
    /// ARN for the endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointArn")]
    pub endpoint_arn: Option<String>,
    /// Type of endpoint. Valid values are source, target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointType")]
    pub endpoint_type: Option<String>,
    /// Type of engine for the endpoint. Valid values are aurora, aurora-postgresql, aurora-serverless, aurora-postgresql-serverless,azuredb, azure-sql-managed-instance, babelfish, db2, db2-zos, docdb, dynamodb, elasticsearch, kafka, kinesis, mariadb, mongodb, mysql, opensearch, oracle, postgres, redshift,redshift-serverless, s3, sqlserver, neptune ,sybase. Please note that some of engine names are available only for target endpoint type (e.g. redshift).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineName")]
    pub engine_name: Option<String>,
    /// Additional attributes associated with the connection. For available attributes for a source Endpoint, see Sources for data migration. For available attributes for a target Endpoint, see Targets for data migration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extraConnectionAttributes")]
    pub extra_connection_attributes: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Configuration block for Kafka settings. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kafkaSettings")]
    pub kafka_settings: Option<EndpointStatusAtProviderKafkaSettings>,
    /// Configuration block for Kinesis settings. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kinesisSettings")]
    pub kinesis_settings: Option<EndpointStatusAtProviderKinesisSettings>,
    /// ARN for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for kms_key_arn, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region. To encrypt an S3 target with a KMS Key, use the parameter s3_settings.server_side_encryption_kms_key_id. When engine_name is redshift, kms_key_arn is the KMS Key for the Redshift target and the parameter redshift_settings.server_side_encryption_kms_key_id encrypts the S3 intermediate storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// Configuration block for MongoDB settings. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mongodbSettings")]
    pub mongodb_settings: Option<EndpointStatusAtProviderMongodbSettings>,
    /// Only tasks paused by the resource will be restarted after the modification completes. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pauseReplicationTasks")]
    pub pause_replication_tasks: Option<bool>,
    /// Port used by the endpoint database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Configuration block for Postgres settings. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "postgresSettings")]
    pub postgres_settings: Option<EndpointStatusAtProviderPostgresSettings>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redisSettings")]
    pub redis_settings: Option<EndpointStatusAtProviderRedisSettings>,
    /// Configuration block for Redshift settings. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redshiftSettings")]
    pub redshift_settings: Option<EndpointStatusAtProviderRedshiftSettings>,
    /// (Deprecated, use the aws_dms_s3_endpoint resource instead) Configuration block for S3 settings. See below.
    /// This argument is deprecated and will be removed in a future version; use aws_dms_s3_endpoint instead
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Settings")]
    pub s3_settings: Option<EndpointStatusAtProviderS3Settings>,
    /// ARN of the IAM role that specifies AWS DMS as the trusted entity and has the required permissions to access the value in the Secrets Manager secret referred to by secrets_manager_arn. The role must allow the iam:PassRole action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerAccessRoleArn")]
    pub secrets_manager_access_role_arn: Option<String>,
    /// text values for username, password , server_name, and port. You can't specify both.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerArn")]
    pub secrets_manager_arn: Option<String>,
    /// Host name of the server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
    /// ARN used by the service access IAM role for dynamodb endpoints.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRole")]
    pub service_access_role: Option<String>,
    /// SSL mode to use for the connection. Valid values are none, require, verify-ca, verify-full
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslMode")]
    pub ssl_mode: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// User name to be used to login to the endpoint database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// Configuration block for OpenSearch settings. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointStatusAtProviderElasticsearchSettings {
    /// Endpoint for the OpenSearch cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointUri")]
    pub endpoint_uri: Option<String>,
    /// Maximum number of seconds for which DMS retries failed API requests to the OpenSearch cluster. Default is 300.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorRetryDuration")]
    pub error_retry_duration: Option<f64>,
    /// Maximum percentage of records that can fail to be written before a full load operation stops. Default is 10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fullLoadErrorPercentage")]
    pub full_load_error_percentage: Option<f64>,
    /// ARN of the IAM Role with permissions to write to the OpenSearch cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRoleArn")]
    pub service_access_role_arn: Option<String>,
    /// Enable to migrate documentation using the documentation type _doc. OpenSearch and an Elasticsearch clusters only support the _doc documentation type in versions 7.x and later. The default value is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useNewMappingType")]
    pub use_new_mapping_type: Option<bool>,
}

/// Configuration block for Kafka settings. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointStatusAtProviderKafkaSettings {
    /// Kafka broker location. Specify in the form broker-hostname-or-ip:port.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub broker: Option<String>,
    /// Shows detailed control information for table definition, column definition, and table and column changes in the Kafka message output. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeControlDetails")]
    pub include_control_details: Option<bool>,
    /// Include NULL and empty columns for records migrated to the endpoint. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeNullAndEmpty")]
    pub include_null_and_empty: Option<bool>,
    /// Shows the partition value within the Kafka message output unless the partition type is schema-table-type. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includePartitionValue")]
    pub include_partition_value: Option<bool>,
    /// Includes any data definition language (DDL) operations that change the table in the control data, such as rename-table, drop-table, add-column, drop-column, and rename-column. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeTableAlterOperations")]
    pub include_table_alter_operations: Option<bool>,
    /// Provides detailed transaction information from the source database. This information includes a commit timestamp, a log position, and values for transaction_id, previous transaction_id, and transaction_record_id (the record offset within a transaction). Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeTransactionDetails")]
    pub include_transaction_details: Option<bool>,
    /// Output format for the records created on the endpoint. Message format is JSON (default) or JSON_UNFORMATTED (a single line with no tab).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageFormat")]
    pub message_format: Option<String>,
    /// Maximum size in bytes for records created on the endpoint Default is 1,000,000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageMaxBytes")]
    pub message_max_bytes: Option<f64>,
    /// Set this optional parameter to true to avoid adding a '0x' prefix to raw data in hexadecimal format. For example, by default, AWS DMS adds a '0x' prefix to the LOB column type in hexadecimal format moving from an Oracle source to a Kafka target. Use the no_hex_prefix endpoint setting to enable migration of RAW data type columns without adding the '0x' prefix.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "noHexPrefix")]
    pub no_hex_prefix: Option<bool>,
    /// Prefixes schema and table names to partition values, when the partition type is primary-key-type. Doing this increases data distribution among Kafka partitions. For example, suppose that a SysBench schema has thousands of tables and each table has only limited range for a primary key. In this case, the same primary key is sent from thousands of tables to the same partition, which causes throttling. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "partitionIncludeSchemaTable")]
    pub partition_include_schema_table: Option<bool>,
    /// Secure user name you created when you first set up your MSK cluster to validate a client identity and make an encrypted connection between server and client using SASL-SSL authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "saslUsername")]
    pub sasl_username: Option<String>,
    /// Set secure connection to a Kafka target endpoint using Transport Layer Security (TLS). Options include ssl-encryption, ssl-authentication, and sasl-ssl. sasl-ssl requires sasl_username and sasl_password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityProtocol")]
    pub security_protocol: Option<String>,
    /// ARN for the private certificate authority (CA) cert that AWS DMS uses to securely connect to your Kafka target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCaCertificateArn")]
    pub ssl_ca_certificate_arn: Option<String>,
    /// ARN of the client certificate used to securely connect to a Kafka target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslClientCertificateArn")]
    pub ssl_client_certificate_arn: Option<String>,
    /// ARN for the client private key used to securely connect to a Kafka target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslClientKeyArn")]
    pub ssl_client_key_arn: Option<String>,
    /// Kafka topic for migration. Default is kafka-default-topic.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub topic: Option<String>,
}

/// Configuration block for Kinesis settings. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointStatusAtProviderKinesisSettings {
    /// Shows detailed control information for table definition, column definition, and table and column changes in the Kinesis message output. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeControlDetails")]
    pub include_control_details: Option<bool>,
    /// Include NULL and empty columns in the target. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeNullAndEmpty")]
    pub include_null_and_empty: Option<bool>,
    /// Shows the partition value within the Kinesis message output, unless the partition type is schema-table-type. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includePartitionValue")]
    pub include_partition_value: Option<bool>,
    /// Includes any data definition language (DDL) operations that change the table in the control data. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeTableAlterOperations")]
    pub include_table_alter_operations: Option<bool>,
    /// Provides detailed transaction information from the source database. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeTransactionDetails")]
    pub include_transaction_details: Option<bool>,
    /// Output format for the records created. Default is json. Valid values are json and json-unformatted (a single line with no tab).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageFormat")]
    pub message_format: Option<String>,
    /// Prefixes schema and table names to partition values, when the partition type is primary-key-type. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "partitionIncludeSchemaTable")]
    pub partition_include_schema_table: Option<bool>,
    /// ARN of the IAM Role with permissions to write to the Kinesis data stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRoleArn")]
    pub service_access_role_arn: Option<String>,
    /// ARN of the Kinesis data stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamArn")]
    pub stream_arn: Option<String>,
}

/// Configuration block for MongoDB settings. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointStatusAtProviderMongodbSettings {
    /// Authentication mechanism to access the MongoDB source endpoint. Default is default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authMechanism")]
    pub auth_mechanism: Option<String>,
    /// Authentication database name. Not used when auth_type is no. Default is admin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authSource")]
    pub auth_source: Option<String>,
    /// Authentication type to access the MongoDB source endpoint. Default is password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authType")]
    pub auth_type: Option<String>,
    /// Number of documents to preview to determine the document organization. Use this setting when nesting_level is set to one. Default is 1000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "docsToInvestigate")]
    pub docs_to_investigate: Option<String>,
    /// Document ID. Use this setting when nesting_level is set to none. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extractDocId")]
    pub extract_doc_id: Option<String>,
    /// Specifies either document or table mode. Default is none. Valid values are one (table mode) and none (document mode).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nestingLevel")]
    pub nesting_level: Option<String>,
}

/// Configuration block for Postgres settings. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointStatusAtProviderPostgresSettings {
    /// For use with change data capture (CDC) only, this attribute has AWS DMS bypass foreign keys and user triggers to reduce the time it takes to bulk load data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "afterConnectScript")]
    pub after_connect_script: Option<String>,
    /// The Babelfish for Aurora PostgreSQL database name for the endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "babelfishDatabaseName")]
    pub babelfish_database_name: Option<String>,
    /// To capture DDL events, AWS DMS creates various artifacts in the PostgreSQL database when the task starts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "captureDdls")]
    pub capture_ddls: Option<bool>,
    /// Specifies the default behavior of the replication's handling of PostgreSQL- compatible endpoints that require some additional configuration, such as Babelfish endpoints.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseMode")]
    pub database_mode: Option<String>,
    /// Sets the schema in which the operational DDL database artifacts are created. Default is public.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ddlArtifactsSchema")]
    pub ddl_artifacts_schema: Option<String>,
    /// Sets the client statement timeout for the PostgreSQL instance, in seconds. Default value is 60.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executeTimeout")]
    pub execute_timeout: Option<f64>,
    /// When set to true, this value causes a task to fail if the actual size of a LOB column is greater than the specified LobMaxSize. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failTasksOnLobTruncation")]
    pub fail_tasks_on_lob_truncation: Option<bool>,
    /// The write-ahead log (WAL) heartbeat feature mimics a dummy transaction. By doing this, it prevents idle logical replication slots from holding onto old WAL logs, which can result in storage full situations on the source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "heartbeatEnable")]
    pub heartbeat_enable: Option<bool>,
    /// Sets the WAL heartbeat frequency (in minutes). Default value is 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "heartbeatFrequency")]
    pub heartbeat_frequency: Option<f64>,
    /// Sets the schema in which the heartbeat artifacts are created. Default value is public.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "heartbeatSchema")]
    pub heartbeat_schema: Option<String>,
    /// You can use PostgreSQL endpoint settings to map a boolean as a boolean from your PostgreSQL source to a Amazon Redshift target. Default value is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mapBooleanAsBoolean")]
    pub map_boolean_as_boolean: Option<bool>,
    /// Optional When true, DMS migrates JSONB values as CLOB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mapJsonbAsClob")]
    pub map_jsonb_as_clob: Option<bool>,
    /// Optional When true, DMS migrates LONG values as VARCHAR.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mapLongVarcharAs")]
    pub map_long_varchar_as: Option<String>,
    /// Specifies the maximum size (in KB) of any .csv file used to transfer data to PostgreSQL. Default is 32,768 KB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxFileSize")]
    pub max_file_size: Option<f64>,
    /// Specifies the plugin to use to create a replication slot. Valid values: pglogical, test_decoding.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pluginName")]
    pub plugin_name: Option<String>,
    /// Sets the name of a previously created logical replication slot for a CDC load of the PostgreSQL source instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "slotName")]
    pub slot_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointStatusAtProviderRedisSettings {
    /// Authentication type to access the MongoDB source endpoint. Default is password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authType")]
    pub auth_type: Option<String>,
    /// The username provided with the auth-role option of the AuthType setting for a Redis target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authUserName")]
    pub auth_user_name: Option<String>,
    /// Port used by the endpoint database.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Host name of the server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverName")]
    pub server_name: Option<String>,
    /// The Amazon Resource Name (ARN) for the certificate authority (CA) that DMS uses to connect to your Redis target endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCaCertificateArn")]
    pub ssl_ca_certificate_arn: Option<String>,
    /// The plaintext option doesn't provide Transport Layer Security (TLS) encryption for traffic between endpoint and database. Options include plaintext, ssl-encryption. The default is ssl-encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslSecurityProtocol")]
    pub ssl_security_protocol: Option<String>,
}

/// Configuration block for Redshift settings. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointStatusAtProviderRedshiftSettings {
    /// Custom S3 Bucket Object prefix for intermediate storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketFolder")]
    pub bucket_folder: Option<String>,
    /// Custom S3 Bucket name for intermediate storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    pub bucket_name: Option<String>,
    /// The server-side encryption mode that you want to encrypt your intermediate .csv object files copied to S3. Defaults to SSE_S3. Valid values are SSE_S3 and SSE_KMS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionMode")]
    pub encryption_mode: Option<String>,
    /// ARN or Id of KMS Key to use when encryption_mode is SSE_KMS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideEncryptionKmsKeyId")]
    pub server_side_encryption_kms_key_id: Option<String>,
    /// Amazon Resource Name (ARN) of the IAM Role with permissions to read from or write to the S3 Bucket for intermediate storage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRoleArn")]
    pub service_access_role_arn: Option<String>,
}

/// (Deprecated, use the aws_dms_s3_endpoint resource instead) Configuration block for S3 settings. See below.
/// This argument is deprecated and will be removed in a future version; use aws_dms_s3_endpoint instead
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointStatusAtProviderS3Settings {
    /// Whether to add column name information to the .csv output file. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "addColumnName")]
    pub add_column_name: Option<bool>,
    /// S3 object prefix.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketFolder")]
    pub bucket_folder: Option<String>,
    /// S3 bucket name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    pub bucket_name: Option<String>,
    /// Predefined (canned) access control list for objects created in an S3 bucket. Valid values include none, private, public-read, public-read-write, authenticated-read, aws-exec-read, bucket-owner-read, and bucket-owner-full-control. Default is none.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cannedAclForObjects")]
    pub canned_acl_for_objects: Option<String>,
    /// Whether to write insert and update operations to .csv or .parquet output files. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdcInsertsAndUpdates")]
    pub cdc_inserts_and_updates: Option<bool>,
    /// Whether to write insert operations to .csv or .parquet output files. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdcInsertsOnly")]
    pub cdc_inserts_only: Option<bool>,
    /// Maximum length of the interval, defined in seconds, after which to output a file to Amazon S3. Default is 60.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdcMaxBatchInterval")]
    pub cdc_max_batch_interval: Option<f64>,
    /// Minimum file size condition as defined in kilobytes to output a file to Amazon S3. Default is 32000. NOTE: Previously, this setting was measured in megabytes but now represents kilobytes. Update configurations accordingly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdcMinFileSize")]
    pub cdc_min_file_size: Option<f64>,
    /// Folder path of CDC files. For an S3 source, this setting is required if a task captures change data; otherwise, it's optional. If cdc_path is set, AWS DMS reads CDC files from this path and replicates the data changes to the target endpoint. Supported in AWS DMS versions 3.4.2 and later.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdcPath")]
    pub cdc_path: Option<String>,
    /// Set to compress target files. Default is NONE. Valid values are GZIP and NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionType")]
    pub compression_type: Option<String>,
    /// Delimiter used to separate columns in the source files. Default is ,.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csvDelimiter")]
    pub csv_delimiter: Option<String>,
    /// String to use for all columns not included in the supplemental log.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csvNoSupValue")]
    pub csv_no_sup_value: Option<String>,
    /// String to as null when writing to the target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csvNullValue")]
    pub csv_null_value: Option<String>,
    /// Delimiter used to separate rows in the source files. Default is \n.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "csvRowDelimiter")]
    pub csv_row_delimiter: Option<String>,
    /// Output format for the files that AWS DMS uses to create S3 objects. Valid values are csv and parquet. Default is csv.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataFormat")]
    pub data_format: Option<String>,
    /// Size of one data page in bytes. Default is 1048576 (1 MiB).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataPageSize")]
    pub data_page_size: Option<f64>,
    /// Date separating delimiter to use during folder partitioning. Valid values are SLASH, UNDERSCORE, DASH, and NONE. Default is SLASH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datePartitionDelimiter")]
    pub date_partition_delimiter: Option<String>,
    /// Partition S3 bucket folders based on transaction commit dates. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datePartitionEnabled")]
    pub date_partition_enabled: Option<bool>,
    /// Date format to use during folder partitioning. Use this parameter when date_partition_enabled is set to true. Valid values are YYYYMMDD, YYYYMMDDHH, YYYYMM, MMYYYYDD, and DDMMYYYY. Default is YYYYMMDD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "datePartitionSequence")]
    pub date_partition_sequence: Option<String>,
    /// Maximum size in bytes of an encoded dictionary page of a column. Default is 1048576 (1 MiB).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dictPageSizeLimit")]
    pub dict_page_size_limit: Option<f64>,
    /// Whether to enable statistics for Parquet pages and row groups. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableStatistics")]
    pub enable_statistics: Option<bool>,
    /// Type of encoding to use. Value values are rle_dictionary, plain, and plain_dictionary. Default is rle_dictionary.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encodingType")]
    pub encoding_type: Option<String>,
    /// Server-side encryption mode that you want to encrypt your .csv or .parquet object files copied to S3. Valid values are SSE_S3 and SSE_KMS. Default is SSE_S3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionMode")]
    pub encryption_mode: Option<String>,
    /// JSON document that describes how AWS DMS should interpret the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalTableDefinition")]
    pub external_table_definition: Option<String>,
    /// Whether to integrate AWS Glue Data Catalog with an Amazon S3 target. See Using AWS Glue Data Catalog with an Amazon S3 target for AWS DMS for more information. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "glueCatalogGeneration")]
    pub glue_catalog_generation: Option<bool>,
    /// When this value is set to 1, DMS ignores the first row header in a .csv file. Default is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreHeaderRows")]
    pub ignore_header_rows: Option<f64>,
    /// Whether to enable a full load to write INSERT operations to the .csv output files only to indicate how the rows were added to the source database. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeOpForFullLoad")]
    pub include_op_for_full_load: Option<bool>,
    /// Maximum size (in KB) of any .csv file to be created while migrating to an S3 target during full load. Valid values are from 1 to 1048576. Default is 1048576 (1 GB).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxFileSize")]
    pub max_file_size: Option<f64>,
    /// - Specifies the precision of any TIMESTAMP column values written to an S3 object file in .parquet format. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parquetTimestampInMillisecond")]
    pub parquet_timestamp_in_millisecond: Option<bool>,
    /// Version of the .parquet file format. Default is parquet-1-0. Valid values are parquet-1-0 and parquet-2-0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parquetVersion")]
    pub parquet_version: Option<String>,
    /// Whether DMS saves the transaction order for a CDC load on the S3 target specified by cdc_path. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preserveTransactions")]
    pub preserve_transactions: Option<bool>,
    /// For an S3 source, whether each leading double quotation mark has to be followed by an ending double quotation mark. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rfc4180: Option<bool>,
    /// Number of rows in a row group. Default is 10000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rowGroupLength")]
    pub row_group_length: Option<f64>,
    /// ARN or Id of KMS Key to use when encryption_mode is SSE_KMS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideEncryptionKmsKeyId")]
    pub server_side_encryption_kms_key_id: Option<String>,
    /// ARN of the IAM Role with permissions to read from or write to the S3 Bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccessRoleArn")]
    pub service_access_role_arn: Option<String>,
    /// Column to add with timestamp information to the endpoint data for an Amazon S3 target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timestampColumnName")]
    pub timestamp_column_name: Option<String>,
    /// Whether to use csv_no_sup_value for columns not included in the supplemental log.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useCsvNoSupValue")]
    pub use_csv_no_sup_value: Option<bool>,
    /// When set to true, uses the task start time as the timestamp column value instead of the time data is written to target. For full load, when set to true, each row of the timestamp column contains the task start time. For CDC loads, each row of the timestamp column contains the transaction commit time. When set to false, the full load timestamp in the timestamp column increments with the time data arrives at the target. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useTaskStartTimeForFullLoadTimestamp")]
    pub use_task_start_time_for_full_load_timestamp: Option<bool>,
}


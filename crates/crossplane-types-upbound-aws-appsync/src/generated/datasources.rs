// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// DatasourceSpec defines the desired state of Datasource
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "appsync.aws.upbound.io", version = "v1beta2", kind = "Datasource", plural = "datasources")]
#[kube(status = "DatasourceStatus")]
pub struct DatasourceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<DatasourceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: DatasourceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<DatasourceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<DatasourceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<DatasourcePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<DatasourceWriteConnectionSecretToRef>,
}

/// DatasourceSpec defines the desired state of Datasource
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProvider {
    /// API ID for the GraphQL API for the data source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiId")]
    pub api_id: Option<String>,
    /// Reference to a GraphQLAPI in appsync to populate apiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiIdRef")]
    pub api_id_ref: Option<DatasourceForProviderApiIdRef>,
    /// Selector for a GraphQLAPI in appsync to populate apiId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiIdSelector")]
    pub api_id_selector: Option<DatasourceForProviderApiIdSelector>,
    /// Description of the data source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// DynamoDB settings. See dynamodb_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamodbConfig")]
    pub dynamodb_config: Option<DatasourceForProviderDynamodbConfig>,
    /// Amazon Elasticsearch settings. See elasticsearch_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticsearchConfig")]
    pub elasticsearch_config: Option<DatasourceForProviderElasticsearchConfig>,
    /// AWS EventBridge settings. See event_bridge_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventBridgeConfig")]
    pub event_bridge_config: Option<DatasourceForProviderEventBridgeConfig>,
    /// HTTP settings. See http_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConfig")]
    pub http_config: Option<DatasourceForProviderHttpConfig>,
    /// AWS Lambda settings. See lambda_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lambdaConfig")]
    pub lambda_config: Option<DatasourceForProviderLambdaConfig>,
    /// Amazon OpenSearch Service settings. See opensearchservice_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "opensearchserviceConfig")]
    pub opensearchservice_config: Option<DatasourceForProviderOpensearchserviceConfig>,
    /// AWS Region for RDS HTTP endpoint. Defaults to current region.
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// AWS RDS settings. See relational_database_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "relationalDatabaseConfig")]
    pub relational_database_config: Option<DatasourceForProviderRelationalDatabaseConfig>,
    /// IAM service role ARN for the data source. Required if type is specified as AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, AMAZON_EVENTBRIDGE, or AMAZON_OPENSEARCH_SERVICE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArn")]
    pub service_role_arn: Option<String>,
    /// Reference to a Role in iam to populate serviceRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArnRef")]
    pub service_role_arn_ref: Option<DatasourceForProviderServiceRoleArnRef>,
    /// Selector for a Role in iam to populate serviceRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArnSelector")]
    pub service_role_arn_selector: Option<DatasourceForProviderServiceRoleArnSelector>,
    /// Type of the Data Source. Valid values: AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, HTTP, NONE, RELATIONAL_DATABASE, AMAZON_EVENTBRIDGE, AMAZON_OPENSEARCH_SERVICE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Reference to a GraphQLAPI in appsync to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderApiIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasourceForProviderApiIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderApiIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasourceForProviderApiIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasourceForProviderApiIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceForProviderApiIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceForProviderApiIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a GraphQLAPI in appsync to populate apiId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderApiIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasourceForProviderApiIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderApiIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasourceForProviderApiIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasourceForProviderApiIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceForProviderApiIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceForProviderApiIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// DynamoDB settings. See dynamodb_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderDynamodbConfig {
    /// The DeltaSyncConfig for a versioned data source. See delta_sync_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deltaSyncConfig")]
    pub delta_sync_config: Option<DatasourceForProviderDynamodbConfigDeltaSyncConfig>,
    /// AWS region of the DynamoDB table. Defaults to current region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// Name of the DynamoDB table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    pub table_name: Option<String>,
    /// Reference to a Table in dynamodb to populate tableName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableNameRef")]
    pub table_name_ref: Option<DatasourceForProviderDynamodbConfigTableNameRef>,
    /// Selector for a Table in dynamodb to populate tableName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableNameSelector")]
    pub table_name_selector: Option<DatasourceForProviderDynamodbConfigTableNameSelector>,
    /// Set to true to use Amazon Cognito credentials with this data source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useCallerCredentials")]
    pub use_caller_credentials: Option<bool>,
    /// Detects Conflict Detection and Resolution with this data source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub versioned: Option<bool>,
}

/// The DeltaSyncConfig for a versioned data source. See delta_sync_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderDynamodbConfigDeltaSyncConfig {
    /// The number of minutes that an Item is stored in the data source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseTableTtl")]
    pub base_table_ttl: Option<f64>,
    /// The table name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deltaSyncTableName")]
    pub delta_sync_table_name: Option<String>,
    /// The number of minutes that a Delta Sync log entry is stored in the Delta Sync table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deltaSyncTableTtl")]
    pub delta_sync_table_ttl: Option<f64>,
}

/// Reference to a Table in dynamodb to populate tableName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderDynamodbConfigTableNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasourceForProviderDynamodbConfigTableNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderDynamodbConfigTableNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasourceForProviderDynamodbConfigTableNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasourceForProviderDynamodbConfigTableNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceForProviderDynamodbConfigTableNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceForProviderDynamodbConfigTableNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Table in dynamodb to populate tableName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderDynamodbConfigTableNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasourceForProviderDynamodbConfigTableNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderDynamodbConfigTableNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasourceForProviderDynamodbConfigTableNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasourceForProviderDynamodbConfigTableNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceForProviderDynamodbConfigTableNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceForProviderDynamodbConfigTableNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Amazon Elasticsearch settings. See elasticsearch_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderElasticsearchConfig {
    /// HTTP endpoint of the Elasticsearch domain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// AWS region of Elasticsearch domain. Defaults to current region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

/// AWS EventBridge settings. See event_bridge_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderEventBridgeConfig {
    /// ARN for the EventBridge bus.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventBusArn")]
    pub event_bus_arn: Option<String>,
}

/// HTTP settings. See http_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderHttpConfig {
    /// Authorization configuration in case the HTTP endpoint requires authorization. See authorization_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationConfig")]
    pub authorization_config: Option<DatasourceForProviderHttpConfigAuthorizationConfig>,
    /// HTTP URL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
}

/// Authorization configuration in case the HTTP endpoint requires authorization. See authorization_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderHttpConfigAuthorizationConfig {
    /// Authorization type that the HTTP endpoint requires. Default values is AWS_IAM.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationType")]
    pub authorization_type: Option<String>,
    /// Identity and Access Management (IAM) settings. See aws_iam_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsIamConfig")]
    pub aws_iam_config: Option<DatasourceForProviderHttpConfigAuthorizationConfigAwsIamConfig>,
}

/// Identity and Access Management (IAM) settings. See aws_iam_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderHttpConfigAuthorizationConfigAwsIamConfig {
    /// Signing Amazon Web Services Region for IAM authorization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signingRegion")]
    pub signing_region: Option<String>,
    /// Signing service name for IAM authorization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signingServiceName")]
    pub signing_service_name: Option<String>,
}

/// AWS Lambda settings. See lambda_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderLambdaConfig {
    /// ARN for the Lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionArn")]
    pub function_arn: Option<String>,
}

/// Amazon OpenSearch Service settings. See opensearchservice_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderOpensearchserviceConfig {
    /// HTTP endpoint of the OpenSearch domain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// AWS region of the OpenSearch domain. Defaults to current region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

/// AWS RDS settings. See relational_database_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderRelationalDatabaseConfig {
    /// Amazon RDS HTTP endpoint configuration. See http_endpoint_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpEndpointConfig")]
    pub http_endpoint_config: Option<DatasourceForProviderRelationalDatabaseConfigHttpEndpointConfig>,
    /// Source type for the relational database. Valid values: RDS_HTTP_ENDPOINT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceType")]
    pub source_type: Option<String>,
}

/// Amazon RDS HTTP endpoint configuration. See http_endpoint_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderRelationalDatabaseConfigHttpEndpointConfig {
    /// AWS secret store ARN for database credentials.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsSecretStoreArn")]
    pub aws_secret_store_arn: Option<String>,
    /// Logical database name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseName")]
    pub database_name: Option<String>,
    /// Amazon RDS cluster identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbClusterIdentifier")]
    pub db_cluster_identifier: Option<String>,
    /// AWS Region for RDS HTTP endpoint. Defaults to current region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// Logical schema name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
}

/// Reference to a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderServiceRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasourceForProviderServiceRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderServiceRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasourceForProviderServiceRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasourceForProviderServiceRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceForProviderServiceRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceForProviderServiceRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderServiceRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasourceForProviderServiceRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceForProviderServiceRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasourceForProviderServiceRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasourceForProviderServiceRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceForProviderServiceRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceForProviderServiceRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProvider {
    /// Description of the data source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// DynamoDB settings. See dynamodb_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamodbConfig")]
    pub dynamodb_config: Option<DatasourceInitProviderDynamodbConfig>,
    /// Amazon Elasticsearch settings. See elasticsearch_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticsearchConfig")]
    pub elasticsearch_config: Option<DatasourceInitProviderElasticsearchConfig>,
    /// AWS EventBridge settings. See event_bridge_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventBridgeConfig")]
    pub event_bridge_config: Option<DatasourceInitProviderEventBridgeConfig>,
    /// HTTP settings. See http_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConfig")]
    pub http_config: Option<DatasourceInitProviderHttpConfig>,
    /// AWS Lambda settings. See lambda_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lambdaConfig")]
    pub lambda_config: Option<DatasourceInitProviderLambdaConfig>,
    /// Amazon OpenSearch Service settings. See opensearchservice_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "opensearchserviceConfig")]
    pub opensearchservice_config: Option<DatasourceInitProviderOpensearchserviceConfig>,
    /// AWS RDS settings. See relational_database_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "relationalDatabaseConfig")]
    pub relational_database_config: Option<DatasourceInitProviderRelationalDatabaseConfig>,
    /// IAM service role ARN for the data source. Required if type is specified as AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, AMAZON_EVENTBRIDGE, or AMAZON_OPENSEARCH_SERVICE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArn")]
    pub service_role_arn: Option<String>,
    /// Reference to a Role in iam to populate serviceRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArnRef")]
    pub service_role_arn_ref: Option<DatasourceInitProviderServiceRoleArnRef>,
    /// Selector for a Role in iam to populate serviceRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArnSelector")]
    pub service_role_arn_selector: Option<DatasourceInitProviderServiceRoleArnSelector>,
    /// Type of the Data Source. Valid values: AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, HTTP, NONE, RELATIONAL_DATABASE, AMAZON_EVENTBRIDGE, AMAZON_OPENSEARCH_SERVICE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// DynamoDB settings. See dynamodb_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderDynamodbConfig {
    /// The DeltaSyncConfig for a versioned data source. See delta_sync_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deltaSyncConfig")]
    pub delta_sync_config: Option<DatasourceInitProviderDynamodbConfigDeltaSyncConfig>,
    /// Name of the DynamoDB table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    pub table_name: Option<String>,
    /// Reference to a Table in dynamodb to populate tableName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableNameRef")]
    pub table_name_ref: Option<DatasourceInitProviderDynamodbConfigTableNameRef>,
    /// Selector for a Table in dynamodb to populate tableName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableNameSelector")]
    pub table_name_selector: Option<DatasourceInitProviderDynamodbConfigTableNameSelector>,
    /// Set to true to use Amazon Cognito credentials with this data source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useCallerCredentials")]
    pub use_caller_credentials: Option<bool>,
    /// Detects Conflict Detection and Resolution with this data source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub versioned: Option<bool>,
}

/// The DeltaSyncConfig for a versioned data source. See delta_sync_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderDynamodbConfigDeltaSyncConfig {
    /// The number of minutes that an Item is stored in the data source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseTableTtl")]
    pub base_table_ttl: Option<f64>,
    /// The table name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deltaSyncTableName")]
    pub delta_sync_table_name: Option<String>,
    /// The number of minutes that a Delta Sync log entry is stored in the Delta Sync table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deltaSyncTableTtl")]
    pub delta_sync_table_ttl: Option<f64>,
}

/// Reference to a Table in dynamodb to populate tableName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderDynamodbConfigTableNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasourceInitProviderDynamodbConfigTableNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderDynamodbConfigTableNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasourceInitProviderDynamodbConfigTableNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasourceInitProviderDynamodbConfigTableNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceInitProviderDynamodbConfigTableNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceInitProviderDynamodbConfigTableNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Table in dynamodb to populate tableName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderDynamodbConfigTableNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasourceInitProviderDynamodbConfigTableNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderDynamodbConfigTableNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasourceInitProviderDynamodbConfigTableNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasourceInitProviderDynamodbConfigTableNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceInitProviderDynamodbConfigTableNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceInitProviderDynamodbConfigTableNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Amazon Elasticsearch settings. See elasticsearch_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderElasticsearchConfig {
    /// HTTP endpoint of the Elasticsearch domain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
}

/// AWS EventBridge settings. See event_bridge_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderEventBridgeConfig {
    /// ARN for the EventBridge bus.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventBusArn")]
    pub event_bus_arn: Option<String>,
}

/// HTTP settings. See http_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderHttpConfig {
    /// Authorization configuration in case the HTTP endpoint requires authorization. See authorization_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationConfig")]
    pub authorization_config: Option<DatasourceInitProviderHttpConfigAuthorizationConfig>,
    /// HTTP URL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
}

/// Authorization configuration in case the HTTP endpoint requires authorization. See authorization_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderHttpConfigAuthorizationConfig {
    /// Authorization type that the HTTP endpoint requires. Default values is AWS_IAM.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationType")]
    pub authorization_type: Option<String>,
    /// Identity and Access Management (IAM) settings. See aws_iam_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsIamConfig")]
    pub aws_iam_config: Option<DatasourceInitProviderHttpConfigAuthorizationConfigAwsIamConfig>,
}

/// Identity and Access Management (IAM) settings. See aws_iam_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderHttpConfigAuthorizationConfigAwsIamConfig {
    /// Signing Amazon Web Services Region for IAM authorization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signingRegion")]
    pub signing_region: Option<String>,
    /// Signing service name for IAM authorization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signingServiceName")]
    pub signing_service_name: Option<String>,
}

/// AWS Lambda settings. See lambda_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderLambdaConfig {
    /// ARN for the Lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionArn")]
    pub function_arn: Option<String>,
}

/// Amazon OpenSearch Service settings. See opensearchservice_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderOpensearchserviceConfig {
    /// HTTP endpoint of the OpenSearch domain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
}

/// AWS RDS settings. See relational_database_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderRelationalDatabaseConfig {
    /// Amazon RDS HTTP endpoint configuration. See http_endpoint_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpEndpointConfig")]
    pub http_endpoint_config: Option<DatasourceInitProviderRelationalDatabaseConfigHttpEndpointConfig>,
    /// Source type for the relational database. Valid values: RDS_HTTP_ENDPOINT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceType")]
    pub source_type: Option<String>,
}

/// Amazon RDS HTTP endpoint configuration. See http_endpoint_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderRelationalDatabaseConfigHttpEndpointConfig {
    /// AWS secret store ARN for database credentials.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsSecretStoreArn")]
    pub aws_secret_store_arn: Option<String>,
    /// Logical database name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseName")]
    pub database_name: Option<String>,
    /// Amazon RDS cluster identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbClusterIdentifier")]
    pub db_cluster_identifier: Option<String>,
    /// Logical schema name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
}

/// Reference to a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderServiceRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasourceInitProviderServiceRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderServiceRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasourceInitProviderServiceRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasourceInitProviderServiceRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceInitProviderServiceRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceInitProviderServiceRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate serviceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderServiceRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasourceInitProviderServiceRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceInitProviderServiceRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasourceInitProviderServiceRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasourceInitProviderServiceRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceInitProviderServiceRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceInitProviderServiceRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasourceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasourceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasourceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourcePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<DatasourcePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<DatasourcePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourcePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatasourcePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourcePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatasourcePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatasourcePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourcePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatasourcePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourcePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// DatasourceStatus defines the observed state of Datasource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<DatasourceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceStatusAtProvider {
    /// API ID for the GraphQL API for the data source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiId")]
    pub api_id: Option<String>,
    /// ARN
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Description of the data source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// DynamoDB settings. See dynamodb_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamodbConfig")]
    pub dynamodb_config: Option<DatasourceStatusAtProviderDynamodbConfig>,
    /// Amazon Elasticsearch settings. See elasticsearch_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticsearchConfig")]
    pub elasticsearch_config: Option<DatasourceStatusAtProviderElasticsearchConfig>,
    /// AWS EventBridge settings. See event_bridge_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventBridgeConfig")]
    pub event_bridge_config: Option<DatasourceStatusAtProviderEventBridgeConfig>,
    /// HTTP settings. See http_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpConfig")]
    pub http_config: Option<DatasourceStatusAtProviderHttpConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// AWS Lambda settings. See lambda_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lambdaConfig")]
    pub lambda_config: Option<DatasourceStatusAtProviderLambdaConfig>,
    /// Amazon OpenSearch Service settings. See opensearchservice_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "opensearchserviceConfig")]
    pub opensearchservice_config: Option<DatasourceStatusAtProviderOpensearchserviceConfig>,
    /// AWS RDS settings. See relational_database_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "relationalDatabaseConfig")]
    pub relational_database_config: Option<DatasourceStatusAtProviderRelationalDatabaseConfig>,
    /// IAM service role ARN for the data source. Required if type is specified as AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, AMAZON_EVENTBRIDGE, or AMAZON_OPENSEARCH_SERVICE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRoleArn")]
    pub service_role_arn: Option<String>,
    /// Type of the Data Source. Valid values: AWS_LAMBDA, AMAZON_DYNAMODB, AMAZON_ELASTICSEARCH, HTTP, NONE, RELATIONAL_DATABASE, AMAZON_EVENTBRIDGE, AMAZON_OPENSEARCH_SERVICE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// DynamoDB settings. See dynamodb_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceStatusAtProviderDynamodbConfig {
    /// The DeltaSyncConfig for a versioned data source. See delta_sync_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deltaSyncConfig")]
    pub delta_sync_config: Option<DatasourceStatusAtProviderDynamodbConfigDeltaSyncConfig>,
    /// AWS region of the DynamoDB table. Defaults to current region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// Name of the DynamoDB table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    pub table_name: Option<String>,
    /// Set to true to use Amazon Cognito credentials with this data source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useCallerCredentials")]
    pub use_caller_credentials: Option<bool>,
    /// Detects Conflict Detection and Resolution with this data source.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub versioned: Option<bool>,
}

/// The DeltaSyncConfig for a versioned data source. See delta_sync_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceStatusAtProviderDynamodbConfigDeltaSyncConfig {
    /// The number of minutes that an Item is stored in the data source.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseTableTtl")]
    pub base_table_ttl: Option<f64>,
    /// The table name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deltaSyncTableName")]
    pub delta_sync_table_name: Option<String>,
    /// The number of minutes that a Delta Sync log entry is stored in the Delta Sync table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deltaSyncTableTtl")]
    pub delta_sync_table_ttl: Option<f64>,
}

/// Amazon Elasticsearch settings. See elasticsearch_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceStatusAtProviderElasticsearchConfig {
    /// HTTP endpoint of the Elasticsearch domain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// AWS region of Elasticsearch domain. Defaults to current region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

/// AWS EventBridge settings. See event_bridge_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceStatusAtProviderEventBridgeConfig {
    /// ARN for the EventBridge bus.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventBusArn")]
    pub event_bus_arn: Option<String>,
}

/// HTTP settings. See http_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceStatusAtProviderHttpConfig {
    /// Authorization configuration in case the HTTP endpoint requires authorization. See authorization_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationConfig")]
    pub authorization_config: Option<DatasourceStatusAtProviderHttpConfigAuthorizationConfig>,
    /// HTTP URL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
}

/// Authorization configuration in case the HTTP endpoint requires authorization. See authorization_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceStatusAtProviderHttpConfigAuthorizationConfig {
    /// Authorization type that the HTTP endpoint requires. Default values is AWS_IAM.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationType")]
    pub authorization_type: Option<String>,
    /// Identity and Access Management (IAM) settings. See aws_iam_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsIamConfig")]
    pub aws_iam_config: Option<DatasourceStatusAtProviderHttpConfigAuthorizationConfigAwsIamConfig>,
}

/// Identity and Access Management (IAM) settings. See aws_iam_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceStatusAtProviderHttpConfigAuthorizationConfigAwsIamConfig {
    /// Signing Amazon Web Services Region for IAM authorization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signingRegion")]
    pub signing_region: Option<String>,
    /// Signing service name for IAM authorization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signingServiceName")]
    pub signing_service_name: Option<String>,
}

/// AWS Lambda settings. See lambda_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceStatusAtProviderLambdaConfig {
    /// ARN for the Lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "functionArn")]
    pub function_arn: Option<String>,
}

/// Amazon OpenSearch Service settings. See opensearchservice_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceStatusAtProviderOpensearchserviceConfig {
    /// HTTP endpoint of the OpenSearch domain.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// AWS region of the OpenSearch domain. Defaults to current region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

/// AWS RDS settings. See relational_database_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceStatusAtProviderRelationalDatabaseConfig {
    /// Amazon RDS HTTP endpoint configuration. See http_endpoint_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpEndpointConfig")]
    pub http_endpoint_config: Option<DatasourceStatusAtProviderRelationalDatabaseConfigHttpEndpointConfig>,
    /// Source type for the relational database. Valid values: RDS_HTTP_ENDPOINT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceType")]
    pub source_type: Option<String>,
}

/// Amazon RDS HTTP endpoint configuration. See http_endpoint_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatasourceStatusAtProviderRelationalDatabaseConfigHttpEndpointConfig {
    /// AWS secret store ARN for database credentials.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsSecretStoreArn")]
    pub aws_secret_store_arn: Option<String>,
    /// Logical database name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseName")]
    pub database_name: Option<String>,
    /// Amazon RDS cluster identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbClusterIdentifier")]
    pub db_cluster_identifier: Option<String>,
    /// AWS Region for RDS HTTP endpoint. Defaults to current region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// Logical schema name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
}


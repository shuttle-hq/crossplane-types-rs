// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// CodepipelineSpec defines the desired state of Codepipeline
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "codepipeline.aws.upbound.io", version = "v1beta2", kind = "Codepipeline", plural = "codepipelines")]
#[kube(status = "CodepipelineStatus")]
pub struct CodepipelineSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<CodepipelineDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: CodepipelineForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<CodepipelineInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<CodepipelineProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<CodepipelinePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<CodepipelineWriteConnectionSecretToRef>,
}

/// CodepipelineSpec defines the desired state of Codepipeline
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProvider {
    /// One or more artifact_store blocks. Artifact stores are documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "artifactStore")]
    pub artifact_store: Option<Vec<CodepipelineForProviderArtifactStore>>,
    /// The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED. For value values, refer to the AWS documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionMode")]
    pub execution_mode: Option<String>,
    /// Type of the pipeline. Possible values are: V1 and V2. Default value is V1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pipelineType")]
    pub pipeline_type: Option<String>,
    /// The region in which to run the action.
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<CodepipelineForProviderRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<CodepipelineForProviderRoleArnSelector>,
    /// (Minimum of at least two stage blocks is required) A stage block. Stages are documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stage: Option<Vec<CodepipelineForProviderStage>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A trigger block. Valid only when pipeline_type is V2. Triggers are documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trigger: Option<Vec<CodepipelineForProviderTrigger>>,
    /// A pipeline-level variable block. Valid only when pipeline_type is V2. Variable are documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variable: Option<Vec<CodepipelineForProviderVariable>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderArtifactStore {
    /// The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An encryption_key block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionKey")]
    pub encryption_key: Option<CodepipelineForProviderArtifactStoreEncryptionKey>,
    /// The location where AWS CodePipeline stores artifacts for a pipeline; currently only S3 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Reference to a Bucket in s3 to populate location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationRef")]
    pub location_ref: Option<CodepipelineForProviderArtifactStoreLocationRef>,
    /// Selector for a Bucket in s3 to populate location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationSelector")]
    pub location_selector: Option<CodepipelineForProviderArtifactStoreLocationSelector>,
    /// The region where the artifact store is located. Required for a cross-region CodePipeline, do not provide for a single-region CodePipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The type of the artifact store, such as Amazon S3
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An encryption_key block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderArtifactStoreEncryptionKey {
    /// The KMS key ARN or ID
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The type of key; currently only KMS is supported
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Reference to a Bucket in s3 to populate location.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderArtifactStoreLocationRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CodepipelineForProviderArtifactStoreLocationRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderArtifactStoreLocationRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CodepipelineForProviderArtifactStoreLocationRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CodepipelineForProviderArtifactStoreLocationRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineForProviderArtifactStoreLocationRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineForProviderArtifactStoreLocationRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate location.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderArtifactStoreLocationSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CodepipelineForProviderArtifactStoreLocationSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderArtifactStoreLocationSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CodepipelineForProviderArtifactStoreLocationSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CodepipelineForProviderArtifactStoreLocationSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineForProviderArtifactStoreLocationSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineForProviderArtifactStoreLocationSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CodepipelineForProviderRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CodepipelineForProviderRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CodepipelineForProviderRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineForProviderRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineForProviderRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CodepipelineForProviderRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CodepipelineForProviderRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CodepipelineForProviderRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineForProviderRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineForProviderRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderStage {
    /// The action(s) to include in the stage. Defined as an action block below
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<Vec<CodepipelineForProviderStageAction>>,
    /// The name of the stage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderStageAction {
    /// A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are Approval, Build, Deploy, Invoke, Source and Test.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    /// A map of the action declaration's configuration. Configurations options for action types and providers can be found in the Pipeline Structure Reference and Action Structure Reference documentation. Note: The DetectChanges parameter  in the configuration section causes CodePipeline to automatically start your pipeline upon new commits. Please refer to AWS Documentation for more details: https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodestarConnectionSource.html#action-reference-CodestarConnectionSource-config.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<HashMap<String, String>>,
    /// A list of artifact names to be worked on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputArtifacts")]
    pub input_artifacts: Option<Vec<String>>,
    /// The action declaration's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The namespace all output variables will be accessed from.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// A list of artifact names to output. Output artifact names must be unique within a pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputArtifacts")]
    pub output_artifacts: Option<Vec<String>>,
    /// The creator of the action being called. Possible values are AWS, Custom and ThirdParty.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// The provider of the service being called by the action. Valid providers are determined by the action category. Provider names are listed in the Action Structure Reference documentation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    /// The region in which to run the action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// The order in which actions are run.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runOrder")]
    pub run_order: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutInMinutes")]
    pub timeout_in_minutes: Option<f64>,
    /// A string that identifies the action type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderTrigger {
    /// Provides the filter criteria and the source stage for the repository event that starts the pipeline. For more information, refer to the AWS documentation. A git_configuration block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gitConfiguration")]
    pub git_configuration: Option<CodepipelineForProviderTriggerGitConfiguration>,
    /// The source provider for the event. Possible value is CodeStarSourceConnection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerType")]
    pub provider_type: Option<String>,
}

/// Provides the filter criteria and the source stage for the repository event that starts the pipeline. For more information, refer to the AWS documentation. A git_configuration block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderTriggerGitConfiguration {
    /// The field where the repository event that will start the pipeline is specified as pull requests. A pull_request block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullRequest")]
    pub pull_request: Option<Vec<CodepipelineForProviderTriggerGitConfigurationPullRequest>>,
    /// The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details. A push block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub push: Option<Vec<CodepipelineForProviderTriggerGitConfigurationPush>>,
    /// The name of the pipeline source action where the trigger configuration, such as Git tags, is specified. The trigger configuration will start the pipeline upon the specified change only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceActionName")]
    pub source_action_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderTriggerGitConfigurationPullRequest {
    /// The field that specifies to filter on branches for the pull request trigger configuration. A branches block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branches: Option<CodepipelineForProviderTriggerGitConfigurationPullRequestBranches>,
    /// A list that specifies which pull request events to filter on (opened, updated, closed) for the trigger configuration. Possible values are OPEN, UPDATED  and CLOSED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events: Option<Vec<String>>,
    /// The field that specifies to filter on file paths for the pull request trigger configuration. A file_paths block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filePaths")]
    pub file_paths: Option<CodepipelineForProviderTriggerGitConfigurationPullRequestFilePaths>,
}

/// The field that specifies to filter on branches for the pull request trigger configuration. A branches block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderTriggerGitConfigurationPullRequestBranches {
    /// A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub excludes: Option<Vec<String>>,
    /// A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub includes: Option<Vec<String>>,
}

/// The field that specifies to filter on file paths for the pull request trigger configuration. A file_paths block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderTriggerGitConfigurationPullRequestFilePaths {
    /// A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub excludes: Option<Vec<String>>,
    /// A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub includes: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderTriggerGitConfigurationPush {
    /// The field that specifies to filter on branches for the pull request trigger configuration. A branches block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branches: Option<CodepipelineForProviderTriggerGitConfigurationPushBranches>,
    /// The field that specifies to filter on file paths for the pull request trigger configuration. A file_paths block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filePaths")]
    pub file_paths: Option<CodepipelineForProviderTriggerGitConfigurationPushFilePaths>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<CodepipelineForProviderTriggerGitConfigurationPushTags>,
}

/// The field that specifies to filter on branches for the pull request trigger configuration. A branches block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderTriggerGitConfigurationPushBranches {
    /// A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub excludes: Option<Vec<String>>,
    /// A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub includes: Option<Vec<String>>,
}

/// The field that specifies to filter on file paths for the pull request trigger configuration. A file_paths block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderTriggerGitConfigurationPushFilePaths {
    /// A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub excludes: Option<Vec<String>>,
    /// A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub includes: Option<Vec<String>>,
}

/// Key-value map of resource tags.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderTriggerGitConfigurationPushTags {
    /// A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub excludes: Option<Vec<String>>,
    /// A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub includes: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineForProviderVariable {
    /// The default value of a pipeline-level variable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    /// The description of a pipeline-level variable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The name of a pipeline-level variable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProvider {
    /// One or more artifact_store blocks. Artifact stores are documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "artifactStore")]
    pub artifact_store: Option<Vec<CodepipelineInitProviderArtifactStore>>,
    /// The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED. For value values, refer to the AWS documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionMode")]
    pub execution_mode: Option<String>,
    /// Type of the pipeline. Possible values are: V1 and V2. Default value is V1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pipelineType")]
    pub pipeline_type: Option<String>,
    /// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<CodepipelineInitProviderRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<CodepipelineInitProviderRoleArnSelector>,
    /// (Minimum of at least two stage blocks is required) A stage block. Stages are documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stage: Option<Vec<CodepipelineInitProviderStage>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A trigger block. Valid only when pipeline_type is V2. Triggers are documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trigger: Option<Vec<CodepipelineInitProviderTrigger>>,
    /// A pipeline-level variable block. Valid only when pipeline_type is V2. Variable are documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variable: Option<Vec<CodepipelineInitProviderVariable>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderArtifactStore {
    /// The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An encryption_key block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionKey")]
    pub encryption_key: Option<CodepipelineInitProviderArtifactStoreEncryptionKey>,
    /// The location where AWS CodePipeline stores artifacts for a pipeline; currently only S3 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Reference to a Bucket in s3 to populate location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationRef")]
    pub location_ref: Option<CodepipelineInitProviderArtifactStoreLocationRef>,
    /// Selector for a Bucket in s3 to populate location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationSelector")]
    pub location_selector: Option<CodepipelineInitProviderArtifactStoreLocationSelector>,
    /// The type of the artifact store, such as Amazon S3
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An encryption_key block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderArtifactStoreEncryptionKey {
    /// The KMS key ARN or ID
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The type of key; currently only KMS is supported
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Reference to a Bucket in s3 to populate location.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderArtifactStoreLocationRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CodepipelineInitProviderArtifactStoreLocationRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderArtifactStoreLocationRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CodepipelineInitProviderArtifactStoreLocationRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CodepipelineInitProviderArtifactStoreLocationRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineInitProviderArtifactStoreLocationRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineInitProviderArtifactStoreLocationRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate location.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderArtifactStoreLocationSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CodepipelineInitProviderArtifactStoreLocationSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderArtifactStoreLocationSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CodepipelineInitProviderArtifactStoreLocationSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CodepipelineInitProviderArtifactStoreLocationSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineInitProviderArtifactStoreLocationSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineInitProviderArtifactStoreLocationSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CodepipelineInitProviderRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CodepipelineInitProviderRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CodepipelineInitProviderRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineInitProviderRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineInitProviderRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CodepipelineInitProviderRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CodepipelineInitProviderRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CodepipelineInitProviderRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineInitProviderRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineInitProviderRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderStage {
    /// The action(s) to include in the stage. Defined as an action block below
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<Vec<CodepipelineInitProviderStageAction>>,
    /// The name of the stage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderStageAction {
    /// A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are Approval, Build, Deploy, Invoke, Source and Test.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    /// A map of the action declaration's configuration. Configurations options for action types and providers can be found in the Pipeline Structure Reference and Action Structure Reference documentation. Note: The DetectChanges parameter  in the configuration section causes CodePipeline to automatically start your pipeline upon new commits. Please refer to AWS Documentation for more details: https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodestarConnectionSource.html#action-reference-CodestarConnectionSource-config.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<HashMap<String, String>>,
    /// A list of artifact names to be worked on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputArtifacts")]
    pub input_artifacts: Option<Vec<String>>,
    /// The action declaration's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The namespace all output variables will be accessed from.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// A list of artifact names to output. Output artifact names must be unique within a pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputArtifacts")]
    pub output_artifacts: Option<Vec<String>>,
    /// The creator of the action being called. Possible values are AWS, Custom and ThirdParty.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// The provider of the service being called by the action. Valid providers are determined by the action category. Provider names are listed in the Action Structure Reference documentation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    /// The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// The order in which actions are run.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runOrder")]
    pub run_order: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutInMinutes")]
    pub timeout_in_minutes: Option<f64>,
    /// A string that identifies the action type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderTrigger {
    /// Provides the filter criteria and the source stage for the repository event that starts the pipeline. For more information, refer to the AWS documentation. A git_configuration block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gitConfiguration")]
    pub git_configuration: Option<CodepipelineInitProviderTriggerGitConfiguration>,
    /// The source provider for the event. Possible value is CodeStarSourceConnection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerType")]
    pub provider_type: Option<String>,
}

/// Provides the filter criteria and the source stage for the repository event that starts the pipeline. For more information, refer to the AWS documentation. A git_configuration block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderTriggerGitConfiguration {
    /// The field where the repository event that will start the pipeline is specified as pull requests. A pull_request block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullRequest")]
    pub pull_request: Option<Vec<CodepipelineInitProviderTriggerGitConfigurationPullRequest>>,
    /// The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details. A push block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub push: Option<Vec<CodepipelineInitProviderTriggerGitConfigurationPush>>,
    /// The name of the pipeline source action where the trigger configuration, such as Git tags, is specified. The trigger configuration will start the pipeline upon the specified change only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceActionName")]
    pub source_action_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderTriggerGitConfigurationPullRequest {
    /// The field that specifies to filter on branches for the pull request trigger configuration. A branches block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branches: Option<CodepipelineInitProviderTriggerGitConfigurationPullRequestBranches>,
    /// A list that specifies which pull request events to filter on (opened, updated, closed) for the trigger configuration. Possible values are OPEN, UPDATED  and CLOSED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events: Option<Vec<String>>,
    /// The field that specifies to filter on file paths for the pull request trigger configuration. A file_paths block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filePaths")]
    pub file_paths: Option<CodepipelineInitProviderTriggerGitConfigurationPullRequestFilePaths>,
}

/// The field that specifies to filter on branches for the pull request trigger configuration. A branches block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderTriggerGitConfigurationPullRequestBranches {
    /// A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub excludes: Option<Vec<String>>,
    /// A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub includes: Option<Vec<String>>,
}

/// The field that specifies to filter on file paths for the pull request trigger configuration. A file_paths block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderTriggerGitConfigurationPullRequestFilePaths {
    /// A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub excludes: Option<Vec<String>>,
    /// A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub includes: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderTriggerGitConfigurationPush {
    /// The field that specifies to filter on branches for the pull request trigger configuration. A branches block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branches: Option<CodepipelineInitProviderTriggerGitConfigurationPushBranches>,
    /// The field that specifies to filter on file paths for the pull request trigger configuration. A file_paths block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filePaths")]
    pub file_paths: Option<CodepipelineInitProviderTriggerGitConfigurationPushFilePaths>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<CodepipelineInitProviderTriggerGitConfigurationPushTags>,
}

/// The field that specifies to filter on branches for the pull request trigger configuration. A branches block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderTriggerGitConfigurationPushBranches {
    /// A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub excludes: Option<Vec<String>>,
    /// A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub includes: Option<Vec<String>>,
}

/// The field that specifies to filter on file paths for the pull request trigger configuration. A file_paths block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderTriggerGitConfigurationPushFilePaths {
    /// A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub excludes: Option<Vec<String>>,
    /// A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub includes: Option<Vec<String>>,
}

/// Key-value map of resource tags.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderTriggerGitConfigurationPushTags {
    /// A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub excludes: Option<Vec<String>>,
    /// A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub includes: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineInitProviderVariable {
    /// The default value of a pipeline-level variable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    /// The description of a pipeline-level variable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The name of a pipeline-level variable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CodepipelineProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CodepipelineProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CodepipelineProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelineProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelinePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<CodepipelinePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<CodepipelinePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelinePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CodepipelinePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelinePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CodepipelinePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CodepipelinePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelinePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CodepipelinePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelinePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// CodepipelineStatus defines the observed state of Codepipeline.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<CodepipelineStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineStatusAtProvider {
    /// The codepipeline ARN.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// One or more artifact_store blocks. Artifact stores are documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "artifactStore")]
    pub artifact_store: Option<Vec<CodepipelineStatusAtProviderArtifactStore>>,
    /// The method that the pipeline will use to handle multiple executions. The default mode is SUPERSEDED. For value values, refer to the AWS documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionMode")]
    pub execution_mode: Option<String>,
    /// The codepipeline ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Type of the pipeline. Possible values are: V1 and V2. Default value is V1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pipelineType")]
    pub pipeline_type: Option<String>,
    /// A service role Amazon Resource Name (ARN) that grants AWS CodePipeline permission to make calls to AWS services on your behalf.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// (Minimum of at least two stage blocks is required) A stage block. Stages are documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stage: Option<Vec<CodepipelineStatusAtProviderStage>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// A trigger block. Valid only when pipeline_type is V2. Triggers are documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub trigger: Option<Vec<CodepipelineStatusAtProviderTrigger>>,
    /// A pipeline-level variable block. Valid only when pipeline_type is V2. Variable are documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variable: Option<Vec<CodepipelineStatusAtProviderVariable>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineStatusAtProviderArtifactStore {
    /// The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An encryption_key block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionKey")]
    pub encryption_key: Option<CodepipelineStatusAtProviderArtifactStoreEncryptionKey>,
    /// The location where AWS CodePipeline stores artifacts for a pipeline; currently only S3 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// The region where the artifact store is located. Required for a cross-region CodePipeline, do not provide for a single-region CodePipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The type of the artifact store, such as Amazon S3
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// The encryption key block AWS CodePipeline uses to encrypt the data in the artifact store, such as an AWS Key Management Service (AWS KMS) key. If you don't specify a key, AWS CodePipeline uses the default key for Amazon Simple Storage Service (Amazon S3). An encryption_key block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineStatusAtProviderArtifactStoreEncryptionKey {
    /// The KMS key ARN or ID
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The type of key; currently only KMS is supported
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineStatusAtProviderStage {
    /// The action(s) to include in the stage. Defined as an action block below
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<Vec<CodepipelineStatusAtProviderStageAction>>,
    /// The name of the stage.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineStatusAtProviderStageAction {
    /// A category defines what kind of action can be taken in the stage, and constrains the provider type for the action. Possible values are Approval, Build, Deploy, Invoke, Source and Test.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    /// A map of the action declaration's configuration. Configurations options for action types and providers can be found in the Pipeline Structure Reference and Action Structure Reference documentation. Note: The DetectChanges parameter  in the configuration section causes CodePipeline to automatically start your pipeline upon new commits. Please refer to AWS Documentation for more details: https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodestarConnectionSource.html#action-reference-CodestarConnectionSource-config.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub configuration: Option<HashMap<String, String>>,
    /// A list of artifact names to be worked on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputArtifacts")]
    pub input_artifacts: Option<Vec<String>>,
    /// The action declaration's name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The namespace all output variables will be accessed from.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub namespace: Option<String>,
    /// A list of artifact names to output. Output artifact names must be unique within a pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputArtifacts")]
    pub output_artifacts: Option<Vec<String>>,
    /// The creator of the action being called. Possible values are AWS, Custom and ThirdParty.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// The provider of the service being called by the action. Valid providers are determined by the action category. Provider names are listed in the Action Structure Reference documentation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub provider: Option<String>,
    /// The region in which to run the action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The ARN of the IAM service role that will perform the declared action. This is assumed through the roleArn for the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// The order in which actions are run.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runOrder")]
    pub run_order: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutInMinutes")]
    pub timeout_in_minutes: Option<f64>,
    /// A string that identifies the action type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineStatusAtProviderTrigger {
    /// Provides the filter criteria and the source stage for the repository event that starts the pipeline. For more information, refer to the AWS documentation. A git_configuration block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gitConfiguration")]
    pub git_configuration: Option<CodepipelineStatusAtProviderTriggerGitConfiguration>,
    /// The source provider for the event. Possible value is CodeStarSourceConnection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerType")]
    pub provider_type: Option<String>,
}

/// Provides the filter criteria and the source stage for the repository event that starts the pipeline. For more information, refer to the AWS documentation. A git_configuration block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineStatusAtProviderTriggerGitConfiguration {
    /// The field where the repository event that will start the pipeline is specified as pull requests. A pull_request block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullRequest")]
    pub pull_request: Option<Vec<CodepipelineStatusAtProviderTriggerGitConfigurationPullRequest>>,
    /// The field where the repository event that will start the pipeline, such as pushing Git tags, is specified with details. A push block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub push: Option<Vec<CodepipelineStatusAtProviderTriggerGitConfigurationPush>>,
    /// The name of the pipeline source action where the trigger configuration, such as Git tags, is specified. The trigger configuration will start the pipeline upon the specified change only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceActionName")]
    pub source_action_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineStatusAtProviderTriggerGitConfigurationPullRequest {
    /// The field that specifies to filter on branches for the pull request trigger configuration. A branches block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branches: Option<CodepipelineStatusAtProviderTriggerGitConfigurationPullRequestBranches>,
    /// A list that specifies which pull request events to filter on (opened, updated, closed) for the trigger configuration. Possible values are OPEN, UPDATED  and CLOSED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub events: Option<Vec<String>>,
    /// The field that specifies to filter on file paths for the pull request trigger configuration. A file_paths block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filePaths")]
    pub file_paths: Option<CodepipelineStatusAtProviderTriggerGitConfigurationPullRequestFilePaths>,
}

/// The field that specifies to filter on branches for the pull request trigger configuration. A branches block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineStatusAtProviderTriggerGitConfigurationPullRequestBranches {
    /// A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub excludes: Option<Vec<String>>,
    /// A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub includes: Option<Vec<String>>,
}

/// The field that specifies to filter on file paths for the pull request trigger configuration. A file_paths block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineStatusAtProviderTriggerGitConfigurationPullRequestFilePaths {
    /// A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub excludes: Option<Vec<String>>,
    /// A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub includes: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineStatusAtProviderTriggerGitConfigurationPush {
    /// The field that specifies to filter on branches for the pull request trigger configuration. A branches block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub branches: Option<CodepipelineStatusAtProviderTriggerGitConfigurationPushBranches>,
    /// The field that specifies to filter on file paths for the pull request trigger configuration. A file_paths block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filePaths")]
    pub file_paths: Option<CodepipelineStatusAtProviderTriggerGitConfigurationPushFilePaths>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<CodepipelineStatusAtProviderTriggerGitConfigurationPushTags>,
}

/// The field that specifies to filter on branches for the pull request trigger configuration. A branches block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineStatusAtProviderTriggerGitConfigurationPushBranches {
    /// A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub excludes: Option<Vec<String>>,
    /// A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub includes: Option<Vec<String>>,
}

/// The field that specifies to filter on file paths for the pull request trigger configuration. A file_paths block is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineStatusAtProviderTriggerGitConfigurationPushFilePaths {
    /// A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub excludes: Option<Vec<String>>,
    /// A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub includes: Option<Vec<String>>,
}

/// Key-value map of resource tags.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineStatusAtProviderTriggerGitConfigurationPushTags {
    /// A list of patterns of Git tags that, when pushed, are to be excluded from starting the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub excludes: Option<Vec<String>>,
    /// A list of patterns of Git tags that, when pushed, are to be included as criteria that starts the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub includes: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CodepipelineStatusAtProviderVariable {
    /// The default value of a pipeline-level variable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultValue")]
    pub default_value: Option<String>,
    /// The description of a pipeline-level variable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The name of a pipeline-level variable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// CustomActionTypeSpec defines the desired state of CustomActionType
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "codepipeline.aws.upbound.io", version = "v1beta2", kind = "CustomActionType", plural = "customactiontypes")]
#[kube(status = "CustomActionTypeStatus")]
pub struct CustomActionTypeSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<CustomActionTypeDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: CustomActionTypeForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<CustomActionTypeInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<CustomActionTypeProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<CustomActionTypePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<CustomActionTypeWriteConnectionSecretToRef>,
}

/// CustomActionTypeSpec defines the desired state of CustomActionType
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomActionTypeDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeForProvider {
    /// The category of the custom action. Valid values: Source, Build, Deploy, Test, Invoke, Approval
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    /// The configuration properties for the custom action. Max 10 items.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configurationProperty")]
    pub configuration_property: Option<Vec<CustomActionTypeForProviderConfigurationProperty>>,
    /// The details of the input artifact for the action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputArtifactDetails")]
    pub input_artifact_details: Option<CustomActionTypeForProviderInputArtifactDetails>,
    /// The details of the output artifact of the action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputArtifactDetails")]
    pub output_artifact_details: Option<CustomActionTypeForProviderOutputArtifactDetails>,
    /// The provider of the service used in the custom action
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerName")]
    pub provider_name: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The settings for an action type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<CustomActionTypeForProviderSettings>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The version identifier of the custom action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeForProviderConfigurationProperty {
    /// The description of the action configuration property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Whether the configuration property is a key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<bool>,
    /// The name of the action configuration property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Indicates that the property will be used in conjunction with PollForJobs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queryable: Option<bool>,
    /// Whether the configuration property is a required value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    /// Whether the configuration property is secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<bool>,
    /// The type of the configuration property. Valid values: String, Number, Boolean
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// The details of the input artifact for the action.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeForProviderInputArtifactDetails {
    /// The maximum number of artifacts allowed for the action type. Min: 0, Max: 5
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumCount")]
    pub maximum_count: Option<f64>,
    /// The minimum number of artifacts allowed for the action type. Min: 0, Max: 5
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumCount")]
    pub minimum_count: Option<f64>,
}

/// The details of the output artifact of the action.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeForProviderOutputArtifactDetails {
    /// The maximum number of artifacts allowed for the action type. Min: 0, Max: 5
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumCount")]
    pub maximum_count: Option<f64>,
    /// The minimum number of artifacts allowed for the action type. Min: 0, Max: 5
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumCount")]
    pub minimum_count: Option<f64>,
}

/// The settings for an action type.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeForProviderSettings {
    /// The URL returned to the AWS CodePipeline console that provides a deep link to the resources of the external system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entityUrlTemplate")]
    pub entity_url_template: Option<String>,
    /// The URL returned to the AWS CodePipeline console that contains a link to the top-level landing page for the external system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionUrlTemplate")]
    pub execution_url_template: Option<String>,
    /// The URL returned to the AWS CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionUrlTemplate")]
    pub revision_url_template: Option<String>,
    /// The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thirdPartyConfigurationUrl")]
    pub third_party_configuration_url: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeInitProvider {
    /// The category of the custom action. Valid values: Source, Build, Deploy, Test, Invoke, Approval
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    /// The configuration properties for the custom action. Max 10 items.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configurationProperty")]
    pub configuration_property: Option<Vec<CustomActionTypeInitProviderConfigurationProperty>>,
    /// The details of the input artifact for the action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputArtifactDetails")]
    pub input_artifact_details: Option<CustomActionTypeInitProviderInputArtifactDetails>,
    /// The details of the output artifact of the action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputArtifactDetails")]
    pub output_artifact_details: Option<CustomActionTypeInitProviderOutputArtifactDetails>,
    /// The provider of the service used in the custom action
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerName")]
    pub provider_name: Option<String>,
    /// The settings for an action type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<CustomActionTypeInitProviderSettings>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The version identifier of the custom action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeInitProviderConfigurationProperty {
    /// The description of the action configuration property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Whether the configuration property is a key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<bool>,
    /// The name of the action configuration property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Indicates that the property will be used in conjunction with PollForJobs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queryable: Option<bool>,
    /// Whether the configuration property is a required value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    /// Whether the configuration property is secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<bool>,
    /// The type of the configuration property. Valid values: String, Number, Boolean
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// The details of the input artifact for the action.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeInitProviderInputArtifactDetails {
    /// The maximum number of artifacts allowed for the action type. Min: 0, Max: 5
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumCount")]
    pub maximum_count: Option<f64>,
    /// The minimum number of artifacts allowed for the action type. Min: 0, Max: 5
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumCount")]
    pub minimum_count: Option<f64>,
}

/// The details of the output artifact of the action.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeInitProviderOutputArtifactDetails {
    /// The maximum number of artifacts allowed for the action type. Min: 0, Max: 5
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumCount")]
    pub maximum_count: Option<f64>,
    /// The minimum number of artifacts allowed for the action type. Min: 0, Max: 5
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumCount")]
    pub minimum_count: Option<f64>,
}

/// The settings for an action type.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeInitProviderSettings {
    /// The URL returned to the AWS CodePipeline console that provides a deep link to the resources of the external system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entityUrlTemplate")]
    pub entity_url_template: Option<String>,
    /// The URL returned to the AWS CodePipeline console that contains a link to the top-level landing page for the external system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionUrlTemplate")]
    pub execution_url_template: Option<String>,
    /// The URL returned to the AWS CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionUrlTemplate")]
    pub revision_url_template: Option<String>,
    /// The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thirdPartyConfigurationUrl")]
    pub third_party_configuration_url: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CustomActionTypeProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CustomActionTypeProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CustomActionTypeProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomActionTypeProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomActionTypeProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<CustomActionTypePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<CustomActionTypePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<CustomActionTypePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<CustomActionTypePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<CustomActionTypePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomActionTypePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum CustomActionTypePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// CustomActionTypeStatus defines the observed state of CustomActionType.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<CustomActionTypeStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeStatusAtProvider {
    /// The action ARN.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// The category of the custom action. Valid values: Source, Build, Deploy, Test, Invoke, Approval
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub category: Option<String>,
    /// The configuration properties for the custom action. Max 10 items.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configurationProperty")]
    pub configuration_property: Option<Vec<CustomActionTypeStatusAtProviderConfigurationProperty>>,
    /// Composed of category, provider and version
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The details of the input artifact for the action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputArtifactDetails")]
    pub input_artifact_details: Option<CustomActionTypeStatusAtProviderInputArtifactDetails>,
    /// The details of the output artifact of the action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputArtifactDetails")]
    pub output_artifact_details: Option<CustomActionTypeStatusAtProviderOutputArtifactDetails>,
    /// The creator of the action being called.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// The provider of the service used in the custom action
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerName")]
    pub provider_name: Option<String>,
    /// The settings for an action type.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<CustomActionTypeStatusAtProviderSettings>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// The version identifier of the custom action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeStatusAtProviderConfigurationProperty {
    /// The description of the action configuration property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Whether the configuration property is a key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<bool>,
    /// The name of the action configuration property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Indicates that the property will be used in conjunction with PollForJobs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub queryable: Option<bool>,
    /// Whether the configuration property is a required value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    /// Whether the configuration property is secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<bool>,
    /// The type of the configuration property. Valid values: String, Number, Boolean
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// The details of the input artifact for the action.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeStatusAtProviderInputArtifactDetails {
    /// The maximum number of artifacts allowed for the action type. Min: 0, Max: 5
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumCount")]
    pub maximum_count: Option<f64>,
    /// The minimum number of artifacts allowed for the action type. Min: 0, Max: 5
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumCount")]
    pub minimum_count: Option<f64>,
}

/// The details of the output artifact of the action.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeStatusAtProviderOutputArtifactDetails {
    /// The maximum number of artifacts allowed for the action type. Min: 0, Max: 5
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumCount")]
    pub maximum_count: Option<f64>,
    /// The minimum number of artifacts allowed for the action type. Min: 0, Max: 5
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumCount")]
    pub minimum_count: Option<f64>,
}

/// The settings for an action type.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct CustomActionTypeStatusAtProviderSettings {
    /// The URL returned to the AWS CodePipeline console that provides a deep link to the resources of the external system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entityUrlTemplate")]
    pub entity_url_template: Option<String>,
    /// The URL returned to the AWS CodePipeline console that contains a link to the top-level landing page for the external system.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionUrlTemplate")]
    pub execution_url_template: Option<String>,
    /// The URL returned to the AWS CodePipeline console that contains a link to the page where customers can update or change the configuration of the external action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionUrlTemplate")]
    pub revision_url_template: Option<String>,
    /// The URL of a sign-up page where users can sign up for an external service and perform initial configuration of the action provided by that service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thirdPartyConfigurationUrl")]
    pub third_party_configuration_url: Option<String>,
}


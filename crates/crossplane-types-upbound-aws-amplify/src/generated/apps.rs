// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// AppSpec defines the desired state of App
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "amplify.aws.upbound.io", version = "v1beta2", kind = "App", plural = "apps")]
#[kube(status = "AppStatus")]
pub struct AppSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<AppDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: AppForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<AppInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<AppProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<AppPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<AppWriteConnectionSecretToRef>,
}

/// AppSpec defines the desired state of App
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProvider {
    /// Personal access token for a third-party source control system for an Amplify app. This token must have write access to the relevant repo to create a webhook and a read-only deploy key for the Amplify project. The token is not stored, so after applying this attribute can be removed and the setup token deleted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessTokenSecretRef")]
    pub access_token_secret_ref: Option<AppForProviderAccessTokenSecretRef>,
    /// Automated branch creation configuration for an Amplify app. See auto_branch_creation_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBranchCreationConfig")]
    pub auto_branch_creation_config: Option<AppForProviderAutoBranchCreationConfig>,
    /// Automated branch creation glob patterns for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBranchCreationPatterns")]
    pub auto_branch_creation_patterns: Option<Vec<String>>,
    /// Credentials for basic authorization for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuthCredentialsSecretRef")]
    pub basic_auth_credentials_secret_ref: Option<AppForProviderBasicAuthCredentialsSecretRef>,
    /// The build specification (build spec) for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildSpec")]
    pub build_spec: Option<String>,
    /// Cache configuration for the Amplify app. See cache_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheConfig")]
    pub cache_config: Option<AppForProviderCacheConfig>,
    /// The custom HTTP headers for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHeaders")]
    pub custom_headers: Option<String>,
    /// Custom rewrite and redirect rules for an Amplify app. See custom_rule Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRule")]
    pub custom_rule: Option<Vec<AppForProviderCustomRule>>,
    /// Description for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Enables automated branch creation for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableAutoBranchCreation")]
    pub enable_auto_branch_creation: Option<bool>,
    /// Enables basic authorization for an Amplify app. This will apply to all branches that are part of this app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableBasicAuth")]
    pub enable_basic_auth: Option<bool>,
    /// Enables auto-building of branches for the Amplify App.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableBranchAutoBuild")]
    pub enable_branch_auto_build: Option<bool>,
    /// Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableBranchAutoDeletion")]
    pub enable_branch_auto_deletion: Option<bool>,
    /// Environment variables map for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentVariables")]
    pub environment_variables: Option<HashMap<String, String>>,
    /// AWS Identity and Access Management (IAM) service role for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamServiceRoleArn")]
    pub iam_service_role_arn: Option<String>,
    /// Reference to a Role in iam to populate iamServiceRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamServiceRoleArnRef")]
    pub iam_service_role_arn_ref: Option<AppForProviderIamServiceRoleArnRef>,
    /// Selector for a Role in iam to populate iamServiceRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamServiceRoleArnSelector")]
    pub iam_service_role_arn_selector: Option<AppForProviderIamServiceRoleArnSelector>,
    /// Name for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key. The OAuth token is not stored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauthTokenSecretRef")]
    pub oauth_token_secret_ref: Option<AppForProviderOauthTokenSecretRef>,
    /// Platform or framework for an Amplify app. Valid values: WEB, WEB_COMPUTE. Default value: WEB.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Repository for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// Personal access token for a third-party source control system for an Amplify app. This token must have write access to the relevant repo to create a webhook and a read-only deploy key for the Amplify project. The token is not stored, so after applying this attribute can be removed and the setup token deleted.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderAccessTokenSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Automated branch creation configuration for an Amplify app. See auto_branch_creation_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderAutoBranchCreationConfig {
    /// Basic authorization credentials for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuthCredentialsSecretRef")]
    pub basic_auth_credentials_secret_ref: Option<AppForProviderAutoBranchCreationConfigBasicAuthCredentialsSecretRef>,
    /// Build specification (build spec) for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildSpec")]
    pub build_spec: Option<String>,
    /// Enables auto building for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableAutoBuild")]
    pub enable_auto_build: Option<bool>,
    /// Enables basic authorization for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableBasicAuth")]
    pub enable_basic_auth: Option<bool>,
    /// Enables performance mode for the branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePerformanceMode")]
    pub enable_performance_mode: Option<bool>,
    /// Enables pull request previews for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePullRequestPreview")]
    pub enable_pull_request_preview: Option<bool>,
    /// Environment variables for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentVariables")]
    pub environment_variables: Option<HashMap<String, String>>,
    /// Framework for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub framework: Option<String>,
    /// Amplify environment name for the pull request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullRequestEnvironmentName")]
    pub pull_request_environment_name: Option<String>,
    /// Describes the current stage for the autocreated branch. Valid values: PRODUCTION, BETA, DEVELOPMENT, EXPERIMENTAL, PULL_REQUEST.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stage: Option<String>,
}

/// Basic authorization credentials for the autocreated branch.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderAutoBranchCreationConfigBasicAuthCredentialsSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Credentials for basic authorization for an Amplify app.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderBasicAuthCredentialsSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Cache configuration for the Amplify app. See cache_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderCacheConfig {
    /// Type of cache configuration to use for an Amplify app. Valid values: AMPLIFY_MANAGED, AMPLIFY_MANAGED_NO_COOKIES.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderCustomRule {
    /// Condition for a URL rewrite or redirect rule, such as a country code.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    /// Source pattern for a URL rewrite or redirect rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    /// Status code for a URL rewrite or redirect rule. Valid values: 200, 301, 302, 404, 404-200.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Target pattern for a URL rewrite or redirect rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
}

/// Reference to a Role in iam to populate iamServiceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderIamServiceRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppForProviderIamServiceRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderIamServiceRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppForProviderIamServiceRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppForProviderIamServiceRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppForProviderIamServiceRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppForProviderIamServiceRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate iamServiceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderIamServiceRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppForProviderIamServiceRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderIamServiceRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppForProviderIamServiceRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppForProviderIamServiceRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppForProviderIamServiceRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppForProviderIamServiceRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key. The OAuth token is not stored.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderOauthTokenSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProvider {
    /// Personal access token for a third-party source control system for an Amplify app. This token must have write access to the relevant repo to create a webhook and a read-only deploy key for the Amplify project. The token is not stored, so after applying this attribute can be removed and the setup token deleted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessTokenSecretRef")]
    pub access_token_secret_ref: Option<AppInitProviderAccessTokenSecretRef>,
    /// Automated branch creation configuration for an Amplify app. See auto_branch_creation_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBranchCreationConfig")]
    pub auto_branch_creation_config: Option<AppInitProviderAutoBranchCreationConfig>,
    /// Automated branch creation glob patterns for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBranchCreationPatterns")]
    pub auto_branch_creation_patterns: Option<Vec<String>>,
    /// Credentials for basic authorization for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuthCredentialsSecretRef")]
    pub basic_auth_credentials_secret_ref: Option<AppInitProviderBasicAuthCredentialsSecretRef>,
    /// The build specification (build spec) for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildSpec")]
    pub build_spec: Option<String>,
    /// Cache configuration for the Amplify app. See cache_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheConfig")]
    pub cache_config: Option<AppInitProviderCacheConfig>,
    /// The custom HTTP headers for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHeaders")]
    pub custom_headers: Option<String>,
    /// Custom rewrite and redirect rules for an Amplify app. See custom_rule Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRule")]
    pub custom_rule: Option<Vec<AppInitProviderCustomRule>>,
    /// Description for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Enables automated branch creation for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableAutoBranchCreation")]
    pub enable_auto_branch_creation: Option<bool>,
    /// Enables basic authorization for an Amplify app. This will apply to all branches that are part of this app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableBasicAuth")]
    pub enable_basic_auth: Option<bool>,
    /// Enables auto-building of branches for the Amplify App.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableBranchAutoBuild")]
    pub enable_branch_auto_build: Option<bool>,
    /// Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableBranchAutoDeletion")]
    pub enable_branch_auto_deletion: Option<bool>,
    /// Environment variables map for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentVariables")]
    pub environment_variables: Option<HashMap<String, String>>,
    /// AWS Identity and Access Management (IAM) service role for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamServiceRoleArn")]
    pub iam_service_role_arn: Option<String>,
    /// Reference to a Role in iam to populate iamServiceRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamServiceRoleArnRef")]
    pub iam_service_role_arn_ref: Option<AppInitProviderIamServiceRoleArnRef>,
    /// Selector for a Role in iam to populate iamServiceRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamServiceRoleArnSelector")]
    pub iam_service_role_arn_selector: Option<AppInitProviderIamServiceRoleArnSelector>,
    /// Name for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key. The OAuth token is not stored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauthTokenSecretRef")]
    pub oauth_token_secret_ref: Option<AppInitProviderOauthTokenSecretRef>,
    /// Platform or framework for an Amplify app. Valid values: WEB, WEB_COMPUTE. Default value: WEB.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<String>,
    /// Repository for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// Personal access token for a third-party source control system for an Amplify app. This token must have write access to the relevant repo to create a webhook and a read-only deploy key for the Amplify project. The token is not stored, so after applying this attribute can be removed and the setup token deleted.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderAccessTokenSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Automated branch creation configuration for an Amplify app. See auto_branch_creation_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderAutoBranchCreationConfig {
    /// Basic authorization credentials for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicAuthCredentialsSecretRef")]
    pub basic_auth_credentials_secret_ref: Option<AppInitProviderAutoBranchCreationConfigBasicAuthCredentialsSecretRef>,
    /// Build specification (build spec) for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildSpec")]
    pub build_spec: Option<String>,
    /// Enables auto building for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableAutoBuild")]
    pub enable_auto_build: Option<bool>,
    /// Enables basic authorization for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableBasicAuth")]
    pub enable_basic_auth: Option<bool>,
    /// Enables performance mode for the branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePerformanceMode")]
    pub enable_performance_mode: Option<bool>,
    /// Enables pull request previews for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePullRequestPreview")]
    pub enable_pull_request_preview: Option<bool>,
    /// Environment variables for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentVariables")]
    pub environment_variables: Option<HashMap<String, String>>,
    /// Framework for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub framework: Option<String>,
    /// Amplify environment name for the pull request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullRequestEnvironmentName")]
    pub pull_request_environment_name: Option<String>,
    /// Describes the current stage for the autocreated branch. Valid values: PRODUCTION, BETA, DEVELOPMENT, EXPERIMENTAL, PULL_REQUEST.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stage: Option<String>,
}

/// Basic authorization credentials for the autocreated branch.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderAutoBranchCreationConfigBasicAuthCredentialsSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Credentials for basic authorization for an Amplify app.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderBasicAuthCredentialsSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Cache configuration for the Amplify app. See cache_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderCacheConfig {
    /// Type of cache configuration to use for an Amplify app. Valid values: AMPLIFY_MANAGED, AMPLIFY_MANAGED_NO_COOKIES.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderCustomRule {
    /// Condition for a URL rewrite or redirect rule, such as a country code.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    /// Source pattern for a URL rewrite or redirect rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    /// Status code for a URL rewrite or redirect rule. Valid values: 200, 301, 302, 404, 404-200.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Target pattern for a URL rewrite or redirect rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
}

/// Reference to a Role in iam to populate iamServiceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderIamServiceRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppInitProviderIamServiceRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderIamServiceRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppInitProviderIamServiceRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppInitProviderIamServiceRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppInitProviderIamServiceRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppInitProviderIamServiceRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate iamServiceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderIamServiceRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppInitProviderIamServiceRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderIamServiceRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppInitProviderIamServiceRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppInitProviderIamServiceRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppInitProviderIamServiceRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppInitProviderIamServiceRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key. The OAuth token is not stored.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderOauthTokenSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<AppPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<AppPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// AppStatus defines the observed state of App.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<AppStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppStatusAtProvider {
    /// ARN of the Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Automated branch creation configuration for an Amplify app. See auto_branch_creation_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBranchCreationConfig")]
    pub auto_branch_creation_config: Option<AppStatusAtProviderAutoBranchCreationConfig>,
    /// Automated branch creation glob patterns for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoBranchCreationPatterns")]
    pub auto_branch_creation_patterns: Option<Vec<String>>,
    /// The build specification (build spec) for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildSpec")]
    pub build_spec: Option<String>,
    /// Cache configuration for the Amplify app. See cache_config Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheConfig")]
    pub cache_config: Option<AppStatusAtProviderCacheConfig>,
    /// The custom HTTP headers for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customHeaders")]
    pub custom_headers: Option<String>,
    /// Custom rewrite and redirect rules for an Amplify app. See custom_rule Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRule")]
    pub custom_rule: Option<Vec<AppStatusAtProviderCustomRule>>,
    /// Default domain for the Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultDomain")]
    pub default_domain: Option<String>,
    /// Description for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Enables automated branch creation for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableAutoBranchCreation")]
    pub enable_auto_branch_creation: Option<bool>,
    /// Enables basic authorization for an Amplify app. This will apply to all branches that are part of this app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableBasicAuth")]
    pub enable_basic_auth: Option<bool>,
    /// Enables auto-building of branches for the Amplify App.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableBranchAutoBuild")]
    pub enable_branch_auto_build: Option<bool>,
    /// Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableBranchAutoDeletion")]
    pub enable_branch_auto_deletion: Option<bool>,
    /// Environment variables map for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentVariables")]
    pub environment_variables: Option<HashMap<String, String>>,
    /// AWS Identity and Access Management (IAM) service role for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamServiceRoleArn")]
    pub iam_service_role_arn: Option<String>,
    /// Unique ID of the Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Platform or framework for an Amplify app. Valid values: WEB, WEB_COMPUTE. Default value: WEB.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub platform: Option<String>,
    /// Describes the information about a production branch for an Amplify app. A production_branch block is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "productionBranch")]
    pub production_branch: Option<Vec<AppStatusAtProviderProductionBranch>>,
    /// Repository for an Amplify app.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
}

/// Automated branch creation configuration for an Amplify app. See auto_branch_creation_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppStatusAtProviderAutoBranchCreationConfig {
    /// Build specification (build spec) for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildSpec")]
    pub build_spec: Option<String>,
    /// Enables auto building for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableAutoBuild")]
    pub enable_auto_build: Option<bool>,
    /// Enables basic authorization for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableBasicAuth")]
    pub enable_basic_auth: Option<bool>,
    /// Enables performance mode for the branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePerformanceMode")]
    pub enable_performance_mode: Option<bool>,
    /// Enables pull request previews for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePullRequestPreview")]
    pub enable_pull_request_preview: Option<bool>,
    /// Environment variables for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentVariables")]
    pub environment_variables: Option<HashMap<String, String>>,
    /// Framework for the autocreated branch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub framework: Option<String>,
    /// Amplify environment name for the pull request.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullRequestEnvironmentName")]
    pub pull_request_environment_name: Option<String>,
    /// Describes the current stage for the autocreated branch. Valid values: PRODUCTION, BETA, DEVELOPMENT, EXPERIMENTAL, PULL_REQUEST.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stage: Option<String>,
}

/// Cache configuration for the Amplify app. See cache_config Block for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppStatusAtProviderCacheConfig {
    /// Type of cache configuration to use for an Amplify app. Valid values: AMPLIFY_MANAGED, AMPLIFY_MANAGED_NO_COOKIES.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppStatusAtProviderCustomRule {
    /// Condition for a URL rewrite or redirect rule, such as a country code.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub condition: Option<String>,
    /// Source pattern for a URL rewrite or redirect rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<String>,
    /// Status code for a URL rewrite or redirect rule. Valid values: 200, 301, 302, 404, 404-200.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Target pattern for a URL rewrite or redirect rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppStatusAtProviderProductionBranch {
    /// Branch name for the production branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "branchName")]
    pub branch_name: Option<String>,
    /// Last deploy time of the production branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastDeployTime")]
    pub last_deploy_time: Option<String>,
    /// Status of the production branch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Thumbnail URL for the production branch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thumbnailUrl")]
    pub thumbnail_url: Option<String>,
}


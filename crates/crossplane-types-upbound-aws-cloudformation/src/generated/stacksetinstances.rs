// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// StackSetInstanceSpec defines the desired state of StackSetInstance
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "cloudformation.aws.upbound.io", version = "v1beta2", kind = "StackSetInstance", plural = "stacksetinstances")]
#[kube(status = "StackSetInstanceStatus")]
pub struct StackSetInstanceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<StackSetInstanceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: StackSetInstanceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<StackSetInstanceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<StackSetInstanceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<StackSetInstancePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<StackSetInstanceWriteConnectionSecretToRef>,
}

/// StackSetInstanceSpec defines the desired state of StackSetInstance
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetInstanceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceForProvider {
    /// Target AWS Account ID to create a Stack based on the StackSet. Defaults to current account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    pub account_id: Option<String>,
    /// Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. Valid values: SELF (default), DELEGATED_ADMIN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callAs")]
    pub call_as: Option<String>,
    /// AWS Organizations accounts to which StackSets deploys. StackSets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. Drift detection is not possible for this argument. See deployment_targets below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentTargets")]
    pub deployment_targets: Option<StackSetInstanceForProviderDeploymentTargets>,
    /// Preferences for how AWS CloudFormation performs a stack set operation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operationPreferences")]
    pub operation_preferences: Option<StackSetInstanceForProviderOperationPreferences>,
    /// Key-value map of input parameters to override from the StackSet for this Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterOverrides")]
    pub parameter_overrides: Option<HashMap<String, String>>,
    /// Target AWS Region to create a Stack based on the StackSet. Defaults to current region.
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// You cannot reassociate a retained Stack or add an existing, saved Stack to a new StackSet. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retainStack")]
    pub retain_stack: Option<bool>,
    /// Name of the StackSet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackSetName")]
    pub stack_set_name: Option<String>,
    /// Reference to a StackSet in cloudformation to populate stackSetName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackSetNameRef")]
    pub stack_set_name_ref: Option<StackSetInstanceForProviderStackSetNameRef>,
    /// Selector for a StackSet in cloudformation to populate stackSetName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackSetNameSelector")]
    pub stack_set_name_selector: Option<StackSetInstanceForProviderStackSetNameSelector>,
}

/// AWS Organizations accounts to which StackSets deploys. StackSets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. Drift detection is not possible for this argument. See deployment_targets below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceForProviderDeploymentTargets {
    /// Limit deployment targets to individual accounts or include additional accounts with provided OUs. Valid values: INTERSECTION, DIFFERENCE, UNION, NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountFilterType")]
    pub account_filter_type: Option<String>,
    /// List of accounts to deploy stack set updates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub accounts: Option<Vec<String>>,
    /// S3 URL of the file containing the list of accounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountsUrl")]
    pub accounts_url: Option<String>,
    /// Organization root ID or organizational unit (OU) IDs to which StackSets deploys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "organizationalUnitIds")]
    pub organizational_unit_ids: Option<Vec<String>>,
}

/// Preferences for how AWS CloudFormation performs a stack set operation.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceForProviderOperationPreferences {
    /// Specifies how the concurrency level behaves during the operation execution. Valid values are STRICT_FAILURE_TOLERANCE and SOFT_FAILURE_TOLERANCE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "concurrencyMode")]
    pub concurrency_mode: Option<String>,
    /// Number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureToleranceCount")]
    pub failure_tolerance_count: Option<f64>,
    /// Percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureTolerancePercentage")]
    pub failure_tolerance_percentage: Option<f64>,
    /// Maximum number of accounts in which to perform this operation at one time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentCount")]
    pub max_concurrent_count: Option<f64>,
    /// Maximum percentage of accounts in which to perform this operation at one time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentPercentage")]
    pub max_concurrent_percentage: Option<f64>,
    /// Concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time. Valid values are SEQUENTIAL and PARALLEL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionConcurrencyType")]
    pub region_concurrency_type: Option<String>,
    /// Order of the Regions in where you want to perform the stack operation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionOrder")]
    pub region_order: Option<Vec<String>>,
}

/// Reference to a StackSet in cloudformation to populate stackSetName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceForProviderStackSetNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<StackSetInstanceForProviderStackSetNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceForProviderStackSetNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<StackSetInstanceForProviderStackSetNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<StackSetInstanceForProviderStackSetNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetInstanceForProviderStackSetNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetInstanceForProviderStackSetNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a StackSet in cloudformation to populate stackSetName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceForProviderStackSetNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<StackSetInstanceForProviderStackSetNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceForProviderStackSetNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<StackSetInstanceForProviderStackSetNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<StackSetInstanceForProviderStackSetNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetInstanceForProviderStackSetNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetInstanceForProviderStackSetNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceInitProvider {
    /// Target AWS Account ID to create a Stack based on the StackSet. Defaults to current account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    pub account_id: Option<String>,
    /// Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. Valid values: SELF (default), DELEGATED_ADMIN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callAs")]
    pub call_as: Option<String>,
    /// AWS Organizations accounts to which StackSets deploys. StackSets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. Drift detection is not possible for this argument. See deployment_targets below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentTargets")]
    pub deployment_targets: Option<StackSetInstanceInitProviderDeploymentTargets>,
    /// Preferences for how AWS CloudFormation performs a stack set operation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operationPreferences")]
    pub operation_preferences: Option<StackSetInstanceInitProviderOperationPreferences>,
    /// Key-value map of input parameters to override from the StackSet for this Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterOverrides")]
    pub parameter_overrides: Option<HashMap<String, String>>,
    /// You cannot reassociate a retained Stack or add an existing, saved Stack to a new StackSet. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retainStack")]
    pub retain_stack: Option<bool>,
    /// Name of the StackSet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackSetName")]
    pub stack_set_name: Option<String>,
    /// Reference to a StackSet in cloudformation to populate stackSetName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackSetNameRef")]
    pub stack_set_name_ref: Option<StackSetInstanceInitProviderStackSetNameRef>,
    /// Selector for a StackSet in cloudformation to populate stackSetName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackSetNameSelector")]
    pub stack_set_name_selector: Option<StackSetInstanceInitProviderStackSetNameSelector>,
}

/// AWS Organizations accounts to which StackSets deploys. StackSets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. Drift detection is not possible for this argument. See deployment_targets below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceInitProviderDeploymentTargets {
    /// Limit deployment targets to individual accounts or include additional accounts with provided OUs. Valid values: INTERSECTION, DIFFERENCE, UNION, NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountFilterType")]
    pub account_filter_type: Option<String>,
    /// List of accounts to deploy stack set updates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub accounts: Option<Vec<String>>,
    /// S3 URL of the file containing the list of accounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountsUrl")]
    pub accounts_url: Option<String>,
    /// Organization root ID or organizational unit (OU) IDs to which StackSets deploys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "organizationalUnitIds")]
    pub organizational_unit_ids: Option<Vec<String>>,
}

/// Preferences for how AWS CloudFormation performs a stack set operation.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceInitProviderOperationPreferences {
    /// Specifies how the concurrency level behaves during the operation execution. Valid values are STRICT_FAILURE_TOLERANCE and SOFT_FAILURE_TOLERANCE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "concurrencyMode")]
    pub concurrency_mode: Option<String>,
    /// Number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureToleranceCount")]
    pub failure_tolerance_count: Option<f64>,
    /// Percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureTolerancePercentage")]
    pub failure_tolerance_percentage: Option<f64>,
    /// Maximum number of accounts in which to perform this operation at one time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentCount")]
    pub max_concurrent_count: Option<f64>,
    /// Maximum percentage of accounts in which to perform this operation at one time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentPercentage")]
    pub max_concurrent_percentage: Option<f64>,
    /// Concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time. Valid values are SEQUENTIAL and PARALLEL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionConcurrencyType")]
    pub region_concurrency_type: Option<String>,
    /// Order of the Regions in where you want to perform the stack operation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionOrder")]
    pub region_order: Option<Vec<String>>,
}

/// Reference to a StackSet in cloudformation to populate stackSetName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceInitProviderStackSetNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<StackSetInstanceInitProviderStackSetNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceInitProviderStackSetNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<StackSetInstanceInitProviderStackSetNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<StackSetInstanceInitProviderStackSetNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetInstanceInitProviderStackSetNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetInstanceInitProviderStackSetNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a StackSet in cloudformation to populate stackSetName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceInitProviderStackSetNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<StackSetInstanceInitProviderStackSetNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceInitProviderStackSetNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<StackSetInstanceInitProviderStackSetNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<StackSetInstanceInitProviderStackSetNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetInstanceInitProviderStackSetNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetInstanceInitProviderStackSetNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<StackSetInstanceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<StackSetInstanceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<StackSetInstanceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetInstanceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetInstanceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstancePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<StackSetInstancePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<StackSetInstancePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstancePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<StackSetInstancePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstancePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<StackSetInstancePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<StackSetInstancePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetInstancePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum StackSetInstancePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstancePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// StackSetInstanceStatus defines the observed state of StackSetInstance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<StackSetInstanceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceStatusAtProvider {
    /// Target AWS Account ID to create a Stack based on the StackSet. Defaults to current account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    pub account_id: Option<String>,
    /// Specifies whether you are acting as an account administrator in the organization's management account or as a delegated administrator in a member account. Valid values: SELF (default), DELEGATED_ADMIN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "callAs")]
    pub call_as: Option<String>,
    /// AWS Organizations accounts to which StackSets deploys. StackSets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. Drift detection is not possible for this argument. See deployment_targets below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deploymentTargets")]
    pub deployment_targets: Option<StackSetInstanceStatusAtProviderDeploymentTargets>,
    /// Unique identifier for the resource. If deployment_targets is set, this is a comma-delimited string combining stack set name, organizational unit IDs (/-delimited), and region (ie. mystack,ou-123/ou-456,us-east-1). Otherwise, this is a comma-delimited string combining stack set name, AWS account ID, and region (ie. mystack,123456789012,us-east-1).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Preferences for how AWS CloudFormation performs a stack set operation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "operationPreferences")]
    pub operation_preferences: Option<StackSetInstanceStatusAtProviderOperationPreferences>,
    /// Organization root ID or organizational unit (OU) ID in which the stack is deployed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "organizationalUnitId")]
    pub organizational_unit_id: Option<String>,
    /// Key-value map of input parameters to override from the StackSet for this Instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterOverrides")]
    pub parameter_overrides: Option<HashMap<String, String>>,
    /// You cannot reassociate a retained Stack or add an existing, saved Stack to a new StackSet. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retainStack")]
    pub retain_stack: Option<bool>,
    /// Stack identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackId")]
    pub stack_id: Option<String>,
    /// List of stack instances created from an organizational unit deployment target. This will only be populated when deployment_targets is set. See stack_instance_summaries.
    /// List of stack instances created from an organizational unit deployment target. This will only be populated when `deployment_targets` is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackInstanceSummaries")]
    pub stack_instance_summaries: Option<Vec<StackSetInstanceStatusAtProviderStackInstanceSummaries>>,
    /// Name of the StackSet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackSetName")]
    pub stack_set_name: Option<String>,
}

/// AWS Organizations accounts to which StackSets deploys. StackSets doesn't deploy stack instances to the organization management account, even if the organization management account is in your organization or in an OU in your organization. Drift detection is not possible for this argument. See deployment_targets below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceStatusAtProviderDeploymentTargets {
    /// Limit deployment targets to individual accounts or include additional accounts with provided OUs. Valid values: INTERSECTION, DIFFERENCE, UNION, NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountFilterType")]
    pub account_filter_type: Option<String>,
    /// List of accounts to deploy stack set updates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub accounts: Option<Vec<String>>,
    /// S3 URL of the file containing the list of accounts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountsUrl")]
    pub accounts_url: Option<String>,
    /// Organization root ID or organizational unit (OU) IDs to which StackSets deploys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "organizationalUnitIds")]
    pub organizational_unit_ids: Option<Vec<String>>,
}

/// Preferences for how AWS CloudFormation performs a stack set operation.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceStatusAtProviderOperationPreferences {
    /// Specifies how the concurrency level behaves during the operation execution. Valid values are STRICT_FAILURE_TOLERANCE and SOFT_FAILURE_TOLERANCE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "concurrencyMode")]
    pub concurrency_mode: Option<String>,
    /// Number of accounts, per Region, for which this operation can fail before AWS CloudFormation stops the operation in that Region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureToleranceCount")]
    pub failure_tolerance_count: Option<f64>,
    /// Percentage of accounts, per Region, for which this stack operation can fail before AWS CloudFormation stops the operation in that Region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failureTolerancePercentage")]
    pub failure_tolerance_percentage: Option<f64>,
    /// Maximum number of accounts in which to perform this operation at one time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentCount")]
    pub max_concurrent_count: Option<f64>,
    /// Maximum percentage of accounts in which to perform this operation at one time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentPercentage")]
    pub max_concurrent_percentage: Option<f64>,
    /// Concurrency type of deploying StackSets operations in Regions, could be in parallel or one Region at a time. Valid values are SEQUENTIAL and PARALLEL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionConcurrencyType")]
    pub region_concurrency_type: Option<String>,
    /// Order of the Regions in where you want to perform the stack operation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "regionOrder")]
    pub region_order: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct StackSetInstanceStatusAtProviderStackInstanceSummaries {
    /// Target AWS Account ID to create a Stack based on the StackSet. Defaults to current account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    pub account_id: Option<String>,
    /// Organization root ID or organizational unit (OU) ID in which the stack is deployed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "organizationalUnitId")]
    pub organizational_unit_id: Option<String>,
    /// Stack identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackId")]
    pub stack_id: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// IndexingConfigurationSpec defines the desired state of IndexingConfiguration
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "iot.aws.upbound.io", version = "v1beta2", kind = "IndexingConfiguration", plural = "indexingconfigurations")]
#[kube(status = "IndexingConfigurationStatus")]
pub struct IndexingConfigurationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<IndexingConfigurationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: IndexingConfigurationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<IndexingConfigurationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<IndexingConfigurationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<IndexingConfigurationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<IndexingConfigurationWriteConnectionSecretToRef>,
}

/// IndexingConfigurationSpec defines the desired state of IndexingConfiguration
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IndexingConfigurationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationForProvider {
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Thing group indexing configuration. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thingGroupIndexingConfiguration")]
    pub thing_group_indexing_configuration: Option<IndexingConfigurationForProviderThingGroupIndexingConfiguration>,
    /// Thing indexing configuration. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thingIndexingConfiguration")]
    pub thing_indexing_configuration: Option<IndexingConfigurationForProviderThingIndexingConfiguration>,
}

/// Thing group indexing configuration. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationForProviderThingGroupIndexingConfiguration {
    /// A list of thing group fields to index. This list cannot contain any managed fields. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customField")]
    pub custom_field: Option<Vec<IndexingConfigurationForProviderThingGroupIndexingConfigurationCustomField>>,
    /// Contains fields that are indexed and whose types are already known by the Fleet Indexing service. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedField")]
    pub managed_field: Option<Vec<IndexingConfigurationForProviderThingGroupIndexingConfigurationManagedField>>,
    /// Thing group indexing mode. Valid values: OFF, ON.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thingGroupIndexingMode")]
    pub thing_group_indexing_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationForProviderThingGroupIndexingConfigurationCustomField {
    /// The name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The data type of the field. Valid values: Number, String, Boolean.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationForProviderThingGroupIndexingConfigurationManagedField {
    /// The name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The data type of the field. Valid values: Number, String, Boolean.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Thing indexing configuration. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationForProviderThingIndexingConfiguration {
    /// Contains custom field names and their data type. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customField")]
    pub custom_field: Option<Vec<IndexingConfigurationForProviderThingIndexingConfigurationCustomField>>,
    /// Device Defender indexing mode. Valid values: VIOLATIONS, OFF. Default: OFF.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceDefenderIndexingMode")]
    pub device_defender_indexing_mode: Option<String>,
    /// Required if named_shadow_indexing_mode is ON. Enables to add named shadows filtered by filter to fleet indexing configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<IndexingConfigurationForProviderThingIndexingConfigurationFilter>,
    /// Contains fields that are indexed and whose types are already known by the Fleet Indexing service. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedField")]
    pub managed_field: Option<Vec<IndexingConfigurationForProviderThingIndexingConfigurationManagedField>>,
    /// Named shadow indexing mode. Valid values: ON, OFF. Default: OFF.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namedShadowIndexingMode")]
    pub named_shadow_indexing_mode: Option<String>,
    /// Thing connectivity indexing mode. Valid values: STATUS, OFF. Default: OFF.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thingConnectivityIndexingMode")]
    pub thing_connectivity_indexing_mode: Option<String>,
    /// Thing indexing mode. Valid values: REGISTRY, REGISTRY_AND_SHADOW, OFF.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thingIndexingMode")]
    pub thing_indexing_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationForProviderThingIndexingConfigurationCustomField {
    /// The name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The data type of the field. Valid values: Number, String, Boolean.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Required if named_shadow_indexing_mode is ON. Enables to add named shadows filtered by filter to fleet indexing configuration.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationForProviderThingIndexingConfigurationFilter {
    /// List of shadow names that you select to index.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namedShadowNames")]
    pub named_shadow_names: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationForProviderThingIndexingConfigurationManagedField {
    /// The name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The data type of the field. Valid values: Number, String, Boolean.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationInitProvider {
    /// Thing group indexing configuration. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thingGroupIndexingConfiguration")]
    pub thing_group_indexing_configuration: Option<IndexingConfigurationInitProviderThingGroupIndexingConfiguration>,
    /// Thing indexing configuration. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thingIndexingConfiguration")]
    pub thing_indexing_configuration: Option<IndexingConfigurationInitProviderThingIndexingConfiguration>,
}

/// Thing group indexing configuration. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationInitProviderThingGroupIndexingConfiguration {
    /// A list of thing group fields to index. This list cannot contain any managed fields. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customField")]
    pub custom_field: Option<Vec<IndexingConfigurationInitProviderThingGroupIndexingConfigurationCustomField>>,
    /// Contains fields that are indexed and whose types are already known by the Fleet Indexing service. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedField")]
    pub managed_field: Option<Vec<IndexingConfigurationInitProviderThingGroupIndexingConfigurationManagedField>>,
    /// Thing group indexing mode. Valid values: OFF, ON.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thingGroupIndexingMode")]
    pub thing_group_indexing_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationInitProviderThingGroupIndexingConfigurationCustomField {
    /// The name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The data type of the field. Valid values: Number, String, Boolean.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationInitProviderThingGroupIndexingConfigurationManagedField {
    /// The name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The data type of the field. Valid values: Number, String, Boolean.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Thing indexing configuration. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationInitProviderThingIndexingConfiguration {
    /// Contains custom field names and their data type. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customField")]
    pub custom_field: Option<Vec<IndexingConfigurationInitProviderThingIndexingConfigurationCustomField>>,
    /// Device Defender indexing mode. Valid values: VIOLATIONS, OFF. Default: OFF.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceDefenderIndexingMode")]
    pub device_defender_indexing_mode: Option<String>,
    /// Required if named_shadow_indexing_mode is ON. Enables to add named shadows filtered by filter to fleet indexing configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<IndexingConfigurationInitProviderThingIndexingConfigurationFilter>,
    /// Contains fields that are indexed and whose types are already known by the Fleet Indexing service. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedField")]
    pub managed_field: Option<Vec<IndexingConfigurationInitProviderThingIndexingConfigurationManagedField>>,
    /// Named shadow indexing mode. Valid values: ON, OFF. Default: OFF.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namedShadowIndexingMode")]
    pub named_shadow_indexing_mode: Option<String>,
    /// Thing connectivity indexing mode. Valid values: STATUS, OFF. Default: OFF.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thingConnectivityIndexingMode")]
    pub thing_connectivity_indexing_mode: Option<String>,
    /// Thing indexing mode. Valid values: REGISTRY, REGISTRY_AND_SHADOW, OFF.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thingIndexingMode")]
    pub thing_indexing_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationInitProviderThingIndexingConfigurationCustomField {
    /// The name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The data type of the field. Valid values: Number, String, Boolean.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Required if named_shadow_indexing_mode is ON. Enables to add named shadows filtered by filter to fleet indexing configuration.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationInitProviderThingIndexingConfigurationFilter {
    /// List of shadow names that you select to index.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namedShadowNames")]
    pub named_shadow_names: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationInitProviderThingIndexingConfigurationManagedField {
    /// The name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The data type of the field. Valid values: Number, String, Boolean.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IndexingConfigurationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IndexingConfigurationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IndexingConfigurationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IndexingConfigurationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IndexingConfigurationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<IndexingConfigurationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<IndexingConfigurationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<IndexingConfigurationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<IndexingConfigurationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<IndexingConfigurationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IndexingConfigurationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum IndexingConfigurationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// IndexingConfigurationStatus defines the observed state of IndexingConfiguration.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<IndexingConfigurationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationStatusAtProvider {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Thing group indexing configuration. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thingGroupIndexingConfiguration")]
    pub thing_group_indexing_configuration: Option<IndexingConfigurationStatusAtProviderThingGroupIndexingConfiguration>,
    /// Thing indexing configuration. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thingIndexingConfiguration")]
    pub thing_indexing_configuration: Option<IndexingConfigurationStatusAtProviderThingIndexingConfiguration>,
}

/// Thing group indexing configuration. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationStatusAtProviderThingGroupIndexingConfiguration {
    /// A list of thing group fields to index. This list cannot contain any managed fields. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customField")]
    pub custom_field: Option<Vec<IndexingConfigurationStatusAtProviderThingGroupIndexingConfigurationCustomField>>,
    /// Contains fields that are indexed and whose types are already known by the Fleet Indexing service. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedField")]
    pub managed_field: Option<Vec<IndexingConfigurationStatusAtProviderThingGroupIndexingConfigurationManagedField>>,
    /// Thing group indexing mode. Valid values: OFF, ON.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thingGroupIndexingMode")]
    pub thing_group_indexing_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationStatusAtProviderThingGroupIndexingConfigurationCustomField {
    /// The name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The data type of the field. Valid values: Number, String, Boolean.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationStatusAtProviderThingGroupIndexingConfigurationManagedField {
    /// The name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The data type of the field. Valid values: Number, String, Boolean.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Thing indexing configuration. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationStatusAtProviderThingIndexingConfiguration {
    /// Contains custom field names and their data type. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customField")]
    pub custom_field: Option<Vec<IndexingConfigurationStatusAtProviderThingIndexingConfigurationCustomField>>,
    /// Device Defender indexing mode. Valid values: VIOLATIONS, OFF. Default: OFF.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deviceDefenderIndexingMode")]
    pub device_defender_indexing_mode: Option<String>,
    /// Required if named_shadow_indexing_mode is ON. Enables to add named shadows filtered by filter to fleet indexing configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<IndexingConfigurationStatusAtProviderThingIndexingConfigurationFilter>,
    /// Contains fields that are indexed and whose types are already known by the Fleet Indexing service. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managedField")]
    pub managed_field: Option<Vec<IndexingConfigurationStatusAtProviderThingIndexingConfigurationManagedField>>,
    /// Named shadow indexing mode. Valid values: ON, OFF. Default: OFF.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namedShadowIndexingMode")]
    pub named_shadow_indexing_mode: Option<String>,
    /// Thing connectivity indexing mode. Valid values: STATUS, OFF. Default: OFF.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thingConnectivityIndexingMode")]
    pub thing_connectivity_indexing_mode: Option<String>,
    /// Thing indexing mode. Valid values: REGISTRY, REGISTRY_AND_SHADOW, OFF.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thingIndexingMode")]
    pub thing_indexing_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationStatusAtProviderThingIndexingConfigurationCustomField {
    /// The name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The data type of the field. Valid values: Number, String, Boolean.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Required if named_shadow_indexing_mode is ON. Enables to add named shadows filtered by filter to fleet indexing configuration.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationStatusAtProviderThingIndexingConfigurationFilter {
    /// List of shadow names that you select to index.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namedShadowNames")]
    pub named_shadow_names: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct IndexingConfigurationStatusAtProviderThingIndexingConfigurationManagedField {
    /// The name of the field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The data type of the field. Valid values: Number, String, Boolean.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// DatabaseInstanceSpec defines the desired state of DatabaseInstance
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "sql.gcp.upbound.io", version = "v1beta2", kind = "DatabaseInstance", plural = "databaseinstances")]
#[kube(status = "DatabaseInstanceStatus")]
pub struct DatabaseInstanceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<DatabaseInstanceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: DatabaseInstanceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<DatabaseInstanceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<DatabaseInstanceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<DatabaseInstancePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<DatabaseInstanceWriteConnectionSecretToRef>,
}

/// DatabaseInstanceSpec defines the desired state of DatabaseInstance
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatabaseInstanceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProvider {
    /// The context needed to create this instance as a clone of another instance. The
    /// configuration is detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clone: Option<DatabaseInstanceForProviderClone>,
    /// The MySQL, PostgreSQL or
    /// SQL Server version to use. Supported values include MYSQL_5_6,
    /// MYSQL_5_7, MYSQL_8_0, POSTGRES_9_6,POSTGRES_10, POSTGRES_11,
    /// POSTGRES_12, POSTGRES_13, POSTGRES_14, POSTGRES_15, SQLSERVER_2017_STANDARD,
    /// SQLSERVER_2017_ENTERPRISE, SQLSERVER_2017_EXPRESS, SQLSERVER_2017_WEB.
    /// SQLSERVER_2019_STANDARD, SQLSERVER_2019_ENTERPRISE, SQLSERVER_2019_EXPRESS,
    /// SQLSERVER_2019_WEB.
    /// Database Version Policies
    /// includes an up-to-date reference of supported versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseVersion")]
    pub database_version: Option<String>,
    /// When the field is set to false, deleting the instance is allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionProtection")]
    pub deletion_protection: Option<bool>,
    /// The full path to the encryption key used for the CMEK disk encryption.
    /// The provided key must be in the same region as the SQL instance.  In order
    /// to use this feature, a special kind of service account must be created and
    /// granted permission on this key.  This step can currently only be done
    /// manually, please see this step.
    /// That service account needs the Cloud KMS > Cloud KMS CryptoKey Encrypter/Decrypter role on your
    /// key - please see this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionKeyName")]
    pub encryption_key_name: Option<String>,
    /// The current software version on the instance. This attribute can not be set during creation. Refer to available_maintenance_versions attribute to see what maintenance_version are available for upgrade. When this attribute gets updated, it will cause an instance restart. Setting a maintenance_version value that is older than the current one on the instance will be ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceVersion")]
    pub maintenance_version: Option<String>,
    /// The name of the existing instance that will
    /// act as the master in the replication setup. Note, this requires the master to
    /// have binary_log_enabled set, as well as existing backups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterInstanceName")]
    pub master_instance_name: Option<String>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The region the instance will sit in. If a region is not provided in the resource definition,
    /// the provider region will be used instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The configuration for replication. The
    /// configuration is detailed below. Valid only for MySQL instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaConfiguration")]
    pub replica_configuration: Option<DatabaseInstanceForProviderReplicaConfiguration>,
    /// The context needed to restore the database to a backup run. The configuration is detailed below. Adding or modifying this
    /// block during resource creation/update will trigger the restore action after the resource is created/updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restoreBackupContext")]
    pub restore_backup_context: Option<DatabaseInstanceForProviderRestoreBackupContext>,
    /// Initial root password. Can be updated. Required for MS SQL Server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootPasswordSecretRef")]
    pub root_password_secret_ref: Option<DatabaseInstanceForProviderRootPasswordSecretRef>,
    /// The settings to use for the database. The
    /// configuration is detailed below. Required if clone is not set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<DatabaseInstanceForProviderSettings>,
}

/// The context needed to create this instance as a clone of another instance. The
/// configuration is detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderClone {
    /// The name of the allocated ip range for the private ip CloudSQL instance. For example: "google-managed-services-default". If set, the cloned instance ip will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression a-z?.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocatedIpRange")]
    pub allocated_ip_range: Option<String>,
    /// (SQL Server only, use with point_in_time) Clone only the specified databases from the source instance. Clone all databases if empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseNames")]
    pub database_names: Option<Vec<String>>,
    /// The timestamp of the point in time that should be restored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pointInTime")]
    pub point_in_time: Option<String>,
    /// (Point-in-time recovery for PostgreSQL only) Clone to an instance in the specified zone. If no zone is specified, clone to the same zone as the source instance. clone-unavailable-instance
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredZone")]
    pub preferred_zone: Option<String>,
    /// Name of the source instance which will be cloned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceInstanceName")]
    pub source_instance_name: Option<String>,
}

/// The configuration for replication. The
/// configuration is detailed below. Valid only for MySQL instances.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderReplicaConfiguration {
    /// PEM representation of the trusted CA's x509
    /// certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificate")]
    pub ca_certificate: Option<String>,
    /// PEM representation of the replica's x509
    /// certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertificate")]
    pub client_certificate: Option<String>,
    /// PEM representation of the replica's private key. The
    /// corresponding public key in encoded in the client_certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientKey")]
    pub client_key: Option<String>,
    /// The number of seconds
    /// between connect retries. MySQL's default is 60 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectRetryInterval")]
    pub connect_retry_interval: Option<f64>,
    /// Path to a SQL file in GCS from which replica
    /// instances are created. Format is gs://bucket/filename.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dumpFilePath")]
    pub dump_file_path: Option<String>,
    /// Specifies if the replica is the failover target.
    /// If the field is set to true the replica will be designated as a failover replica.
    /// If the master instance fails, the replica instance will be promoted as
    /// the new master instance.
    /// ~> NOTE: Not supported for Postgres database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failoverTarget")]
    pub failover_target: Option<bool>,
    /// Time in ms between replication
    /// heartbeats.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterHeartbeatPeriod")]
    pub master_heartbeat_period: Option<f64>,
    /// Password for the replication connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretRef")]
    pub password_secret_ref: Option<DatabaseInstanceForProviderReplicaConfigurationPasswordSecretRef>,
    /// Permissible ciphers for use in SSL encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCipher")]
    pub ssl_cipher: Option<String>,
    /// Username for replication connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    /// True if the master's common name
    /// value is checked during the SSL handshake.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifyServerCertificate")]
    pub verify_server_certificate: Option<bool>,
}

/// Password for the replication connection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderReplicaConfigurationPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// The context needed to restore the database to a backup run. The configuration is detailed below. Adding or modifying this
/// block during resource creation/update will trigger the restore action after the resource is created/updated.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderRestoreBackupContext {
    /// The ID of the backup run to restore from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupRunId")]
    pub backup_run_id: Option<f64>,
    /// The ID of the instance that the backup was taken from. If left empty,
    /// this instance's ID will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceId")]
    pub instance_id: Option<String>,
    /// The full project ID of the source instance.`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

/// Initial root password. Can be updated. Required for MS SQL Server.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderRootPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// The settings to use for the database. The
/// configuration is detailed below. Required if clone is not set.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettings {
    /// This specifies when the instance should be
    /// active. Can be either ALWAYS, NEVER or ON_DEMAND.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activationPolicy")]
    pub activation_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeDirectoryConfig")]
    pub active_directory_config: Option<DatabaseInstanceForProviderSettingsActiveDirectoryConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedMachineFeatures")]
    pub advanced_machine_features: Option<DatabaseInstanceForProviderSettingsAdvancedMachineFeatures>,
    /// The availability type of the Cloud SQL
    /// instance, high availability (REGIONAL) or single zone (ZONAL).' For all instances, ensure that
    /// settings.backup_configuration.enabled is set to true.
    /// For MySQL instances, ensure that settings.backup_configuration.binary_log_enabled is set to true.
    /// For Postgres and SQL Server instances, ensure that settings.backup_configuration.point_in_time_recovery_enabled
    /// is set to true. Defaults to ZONAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityType")]
    pub availability_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupConfiguration")]
    pub backup_configuration: Option<DatabaseInstanceForProviderSettingsBackupConfiguration>,
    /// The name of server instance collation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collation: Option<String>,
    /// Enables the enforcement of Cloud SQL Auth Proxy or Cloud SQL connectors for all the connections. If enabled, all the direct connections are rejected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectorEnforcement")]
    pub connector_enforcement: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCacheConfig")]
    pub data_cache_config: Option<DatabaseInstanceForProviderSettingsDataCacheConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseFlags")]
    pub database_flags: Option<Vec<DatabaseInstanceForProviderSettingsDatabaseFlags>>,
    /// .
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionProtectionEnabled")]
    pub deletion_protection_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "denyMaintenancePeriod")]
    pub deny_maintenance_period: Option<DatabaseInstanceForProviderSettingsDenyMaintenancePeriod>,
    /// Enables auto-resizing of the storage size. Defaults to true. To avoid this, ensure that lifecycle.ignore_changes is applied to disk_size.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskAutoresize")]
    pub disk_autoresize: Option<bool>,
    /// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskAutoresizeLimit")]
    pub disk_autoresize_limit: Option<f64>,
    /// The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB. Note that this value will override the resizing from disk_autoresize if that feature is enabled. To avoid this, set lifecycle.ignore_changes on this field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSize")]
    pub disk_size: Option<f64>,
    /// The type of data disk: PD_SSD or PD_HDD. Defaults to PD_SSD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskType")]
    pub disk_type: Option<String>,
    /// The edition of the instance, can be ENTERPRISE or ENTERPRISE_PLUS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub edition: Option<String>,
    /// Enables Cloud SQL instance integration with Dataplex. MySQL, Postgres and SQL Server instances are supported for this feature. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDataplexIntegration")]
    pub enable_dataplex_integration: Option<bool>,
    /// Enables Cloud SQL instances to connect to Vertex AI and pass requests for real-time predictions and insights. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableGoogleMlIntegration")]
    pub enable_google_ml_integration: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insightsConfig")]
    pub insights_config: Option<DatabaseInstanceForProviderSettingsInsightsConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipConfiguration")]
    pub ip_configuration: Option<DatabaseInstanceForProviderSettingsIpConfiguration>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationPreference")]
    pub location_preference: Option<DatabaseInstanceForProviderSettingsLocationPreference>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceWindow")]
    pub maintenance_window: Option<DatabaseInstanceForProviderSettingsMaintenanceWindow>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordValidationPolicy")]
    pub password_validation_policy: Option<DatabaseInstanceForProviderSettingsPasswordValidationPolicy>,
    /// Pricing plan for this instance, can only be PER_USE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pricingPlan")]
    pub pricing_plan: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqlServerAuditConfig")]
    pub sql_server_audit_config: Option<DatabaseInstanceForProviderSettingsSqlServerAuditConfig>,
    /// The machine type to use. See tiers
    /// for more details and supported versions. Postgres supports only shared-core machine types,
    /// and custom machine types such as db-custom-2-13312. See the Custom Machine Type Documentation to learn about specifying custom machine types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tier: Option<String>,
    /// The time_zone to be used by the database engine (supported only for SQL Server), in SQL Server timezone format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    pub time_zone: Option<String>,
    /// A set of key/value user label pairs to assign to the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userLabels")]
    pub user_labels: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsActiveDirectoryConfig {
    /// The domain name for the active directory (e.g., mydomain.com).
    /// Can only be used with SQL Server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsAdvancedMachineFeatures {
    /// The number of threads per core. The value of this flag can be 1 or 2. To disable SMT, set this flag to 1. Only available in Cloud SQL for SQL Server instances. See smt for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threadsPerCore")]
    pub threads_per_core: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsBackupConfiguration {
    /// Backup retention settings. The configuration is detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupRetentionSettings")]
    pub backup_retention_settings: Option<DatabaseInstanceForProviderSettingsBackupConfigurationBackupRetentionSettings>,
    /// True if binary logging is enabled.
    /// Can only be used with MySQL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "binaryLogEnabled")]
    pub binary_log_enabled: Option<bool>,
    /// True if backup configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The region where the backup will be stored
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// True if Point-in-time recovery is enabled. Will restart database if enabled after instance creation. Valid only for PostgreSQL and SQL Server instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pointInTimeRecoveryEnabled")]
    pub point_in_time_recovery_enabled: Option<bool>,
    /// HH:MM format time indicating when backup
    /// configuration starts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
    /// The number of days of transaction logs we retain for point in time restore, from 1-7. For PostgreSQL Enterprise Plus instances, the number of days of retained transaction logs can be set from 1 to 35.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transactionLogRetentionDays")]
    pub transaction_log_retention_days: Option<f64>,
}

/// Backup retention settings. The configuration is detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsBackupConfigurationBackupRetentionSettings {
    /// Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit
    /// is 'COUNT', we will retain this many backups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retainedBackups")]
    pub retained_backups: Option<f64>,
    /// The unit that 'retained_backups' represents. Defaults to COUNT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retentionUnit")]
    pub retention_unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsDataCacheConfig {
    /// Whether data cache is enabled for the instance. Defaults to false. Can be used with MYSQL and PostgreSQL only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCacheEnabled")]
    pub data_cache_enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsDatabaseFlags {
    /// A name for this whitelist entry.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A CIDR notation IPv4 or IPv6 address that is allowed to
    /// access this instance. Must be set even if other two attributes are not for
    /// the whitelist to become active.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsDenyMaintenancePeriod {
    /// "deny maintenance period" end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the no maintenance interval recurs every year. The date is in format yyyy-m-dd (the month is without leading zeros)i.e., 2020-1-01, or 2020-11-01, or mm-dd, i.e., 11-01
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endDate")]
    pub end_date: Option<String>,
    /// "deny maintenance period" start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-m-dd (the month is without leading zeros)i.e., 2020-1-01, or 2020-11-01, or mm-dd, i.e., 11-01
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startDate")]
    pub start_date: Option<String>,
    /// Time in UTC when the "deny maintenance period" starts on startDate and ends on endDate. The time is in format: HH:mm:SS, i.e., 00:00:00
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsInsightsConfig {
    /// True if Query Insights feature is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryInsightsEnabled")]
    pub query_insights_enabled: Option<bool>,
    /// Number of query execution plans captured by Insights per minute for all queries combined. Between 0 and 20. Default to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryPlansPerMinute")]
    pub query_plans_per_minute: Option<f64>,
    /// Maximum query length stored in bytes. Between 256 and 4500. Default to 1024. Higher query lengths are more useful for analytical queries, but they also require more memory. Changing the query length requires you to restart the instance. You can still add tags to queries that exceed the length limit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringLength")]
    pub query_string_length: Option<f64>,
    /// True if Query Insights will record application tags from query when enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordApplicationTags")]
    pub record_application_tags: Option<bool>,
    /// True if Query Insights will record client address when enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordClientAddress")]
    pub record_client_address: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsIpConfiguration {
    /// The name of the allocated ip range for the private ip CloudSQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression a-z?.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocatedIpRange")]
    pub allocated_ip_range: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetworks")]
    pub authorized_networks: Option<Vec<DatabaseInstanceForProviderSettingsIpConfigurationAuthorizedNetworks>>,
    /// Whether Google Cloud services such as BigQuery are allowed to access data in this Cloud SQL instance over a private IP connection. SQLSERVER database type is not supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePrivatePathForGoogleCloudServices")]
    pub enable_private_path_for_google_cloud_services: Option<bool>,
    /// Whether this Cloud SQL instance should be assigned
    /// a public IPV4 address. At least ipv4_enabled must be enabled or a
    /// private_network must be configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4Enabled")]
    pub ipv4_enabled: Option<bool>,
    /// The VPC network from which the Cloud SQL
    /// instance is accessible for private IP. For example, projects/myProject/global/networks/default.
    /// Specifying a network enables private IP.
    /// At least ipv4_enabled must be enabled or a private_network must be configured.
    /// This setting can be updated, but it cannot be removed after it is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateNetwork")]
    pub private_network: Option<String>,
    /// Reference to a Network in compute to populate privateNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateNetworkRef")]
    pub private_network_ref: Option<DatabaseInstanceForProviderSettingsIpConfigurationPrivateNetworkRef>,
    /// Selector for a Network in compute to populate privateNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateNetworkSelector")]
    pub private_network_selector: Option<DatabaseInstanceForProviderSettingsIpConfigurationPrivateNetworkSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pscConfig")]
    pub psc_config: Option<Vec<DatabaseInstanceForProviderSettingsIpConfigurationPscConfig>>,
    /// Whether SSL connections over IP are enforced or not. To change this field, also set the corresponding value in ssl_mode. It will be fully deprecated in a future major release. For now, please use ssl_mode with a compatible require_ssl value instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireSsl")]
    pub require_ssl: Option<bool>,
    /// Specify how the server certificate's Certificate Authority is hosted. Supported value is GOOGLE_MANAGED_INTERNAL_CA.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverCaMode")]
    pub server_ca_mode: Option<String>,
    /// Specify how SSL connection should be enforced in DB connections. This field provides more SSL enforcement options compared to require_ssl. To change this field, also set the correspoding value in require_ssl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslMode")]
    pub ssl_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsIpConfigurationAuthorizedNetworks {
    /// The RFC 3339
    /// formatted date time string indicating when this whitelist expires.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expirationTime")]
    pub expiration_time: Option<String>,
    /// A name for this whitelist entry.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A CIDR notation IPv4 or IPv6 address that is allowed to
    /// access this instance. Must be set even if other two attributes are not for
    /// the whitelist to become active.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Reference to a Network in compute to populate privateNetwork.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsIpConfigurationPrivateNetworkRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatabaseInstanceForProviderSettingsIpConfigurationPrivateNetworkRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsIpConfigurationPrivateNetworkRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatabaseInstanceForProviderSettingsIpConfigurationPrivateNetworkRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatabaseInstanceForProviderSettingsIpConfigurationPrivateNetworkRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatabaseInstanceForProviderSettingsIpConfigurationPrivateNetworkRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatabaseInstanceForProviderSettingsIpConfigurationPrivateNetworkRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate privateNetwork.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsIpConfigurationPrivateNetworkSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatabaseInstanceForProviderSettingsIpConfigurationPrivateNetworkSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsIpConfigurationPrivateNetworkSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatabaseInstanceForProviderSettingsIpConfigurationPrivateNetworkSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatabaseInstanceForProviderSettingsIpConfigurationPrivateNetworkSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatabaseInstanceForProviderSettingsIpConfigurationPrivateNetworkSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatabaseInstanceForProviderSettingsIpConfigurationPrivateNetworkSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsIpConfigurationPscConfig {
    /// List of consumer projects that are allow-listed for PSC connections to this instance. This instance can be connected to with PSC from any network in these projects. Each consumer project in this list may be represented by a project number (numeric) or by a project id (alphanumeric).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedConsumerProjects")]
    pub allowed_consumer_projects: Option<Vec<String>>,
    /// Whether PSC connectivity is enabled for this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pscEnabled")]
    pub psc_enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsLocationPreference {
    /// A GAE application whose zone to remain
    /// in. Must be in the same region as this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followGaeApplication")]
    pub follow_gae_application: Option<String>,
    /// The preferred Compute Engine zone for the secondary/failover.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryZone")]
    pub secondary_zone: Option<String>,
    /// The preferred compute engine
    /// zone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsMaintenanceWindow {
    /// Day of week (1-7), starting on Monday
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub day: Option<f64>,
    /// Hour of day (0-23), ignored if day not set
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hour: Option<f64>,
    /// Receive updates after one week (canary) or after two weeks (stable) or after five weeks (week5) of notification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateTrack")]
    pub update_track: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsPasswordValidationPolicy {
    /// Checks if the password is a combination of lowercase, uppercase, numeric, and non-alphanumeric characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub complexity: Option<String>,
    /// Prevents the use of the username in the password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowUsernameSubstring")]
    pub disallow_username_substring: Option<bool>,
    /// Enables or disable the password validation policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePasswordPolicy")]
    pub enable_password_policy: Option<bool>,
    /// Specifies the minimum number of characters that the password must have.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minLength")]
    pub min_length: Option<f64>,
    /// Specifies the minimum duration after which you can change the password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordChangeInterval")]
    pub password_change_interval: Option<String>,
    /// Specifies the number of previous passwords that you can't reuse.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reuseInterval")]
    pub reuse_interval: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceForProviderSettingsSqlServerAuditConfig {
    /// The name of the destination bucket (e.g., gs://mybucket).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// How long to keep generated audit files. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retentionInterval")]
    pub retention_interval: Option<String>,
    /// How often to upload generated audit files. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uploadInterval")]
    pub upload_interval: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProvider {
    /// The context needed to create this instance as a clone of another instance. The
    /// configuration is detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clone: Option<DatabaseInstanceInitProviderClone>,
    /// The MySQL, PostgreSQL or
    /// SQL Server version to use. Supported values include MYSQL_5_6,
    /// MYSQL_5_7, MYSQL_8_0, POSTGRES_9_6,POSTGRES_10, POSTGRES_11,
    /// POSTGRES_12, POSTGRES_13, POSTGRES_14, POSTGRES_15, SQLSERVER_2017_STANDARD,
    /// SQLSERVER_2017_ENTERPRISE, SQLSERVER_2017_EXPRESS, SQLSERVER_2017_WEB.
    /// SQLSERVER_2019_STANDARD, SQLSERVER_2019_ENTERPRISE, SQLSERVER_2019_EXPRESS,
    /// SQLSERVER_2019_WEB.
    /// Database Version Policies
    /// includes an up-to-date reference of supported versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseVersion")]
    pub database_version: Option<String>,
    /// When the field is set to false, deleting the instance is allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionProtection")]
    pub deletion_protection: Option<bool>,
    /// The full path to the encryption key used for the CMEK disk encryption.
    /// The provided key must be in the same region as the SQL instance.  In order
    /// to use this feature, a special kind of service account must be created and
    /// granted permission on this key.  This step can currently only be done
    /// manually, please see this step.
    /// That service account needs the Cloud KMS > Cloud KMS CryptoKey Encrypter/Decrypter role on your
    /// key - please see this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionKeyName")]
    pub encryption_key_name: Option<String>,
    /// The current software version on the instance. This attribute can not be set during creation. Refer to available_maintenance_versions attribute to see what maintenance_version are available for upgrade. When this attribute gets updated, it will cause an instance restart. Setting a maintenance_version value that is older than the current one on the instance will be ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceVersion")]
    pub maintenance_version: Option<String>,
    /// The name of the existing instance that will
    /// act as the master in the replication setup. Note, this requires the master to
    /// have binary_log_enabled set, as well as existing backups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterInstanceName")]
    pub master_instance_name: Option<String>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The region the instance will sit in. If a region is not provided in the resource definition,
    /// the provider region will be used instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The configuration for replication. The
    /// configuration is detailed below. Valid only for MySQL instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaConfiguration")]
    pub replica_configuration: Option<DatabaseInstanceInitProviderReplicaConfiguration>,
    /// The context needed to restore the database to a backup run. The configuration is detailed below. Adding or modifying this
    /// block during resource creation/update will trigger the restore action after the resource is created/updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restoreBackupContext")]
    pub restore_backup_context: Option<DatabaseInstanceInitProviderRestoreBackupContext>,
    /// Initial root password. Can be updated. Required for MS SQL Server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rootPasswordSecretRef")]
    pub root_password_secret_ref: Option<DatabaseInstanceInitProviderRootPasswordSecretRef>,
    /// The settings to use for the database. The
    /// configuration is detailed below. Required if clone is not set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<DatabaseInstanceInitProviderSettings>,
}

/// The context needed to create this instance as a clone of another instance. The
/// configuration is detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderClone {
    /// The name of the allocated ip range for the private ip CloudSQL instance. For example: "google-managed-services-default". If set, the cloned instance ip will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression a-z?.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocatedIpRange")]
    pub allocated_ip_range: Option<String>,
    /// (SQL Server only, use with point_in_time) Clone only the specified databases from the source instance. Clone all databases if empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseNames")]
    pub database_names: Option<Vec<String>>,
    /// The timestamp of the point in time that should be restored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pointInTime")]
    pub point_in_time: Option<String>,
    /// (Point-in-time recovery for PostgreSQL only) Clone to an instance in the specified zone. If no zone is specified, clone to the same zone as the source instance. clone-unavailable-instance
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredZone")]
    pub preferred_zone: Option<String>,
    /// Name of the source instance which will be cloned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceInstanceName")]
    pub source_instance_name: Option<String>,
}

/// The configuration for replication. The
/// configuration is detailed below. Valid only for MySQL instances.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderReplicaConfiguration {
    /// PEM representation of the trusted CA's x509
    /// certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificate")]
    pub ca_certificate: Option<String>,
    /// PEM representation of the replica's x509
    /// certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertificate")]
    pub client_certificate: Option<String>,
    /// PEM representation of the replica's private key. The
    /// corresponding public key in encoded in the client_certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientKey")]
    pub client_key: Option<String>,
    /// The number of seconds
    /// between connect retries. MySQL's default is 60 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectRetryInterval")]
    pub connect_retry_interval: Option<f64>,
    /// Path to a SQL file in GCS from which replica
    /// instances are created. Format is gs://bucket/filename.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dumpFilePath")]
    pub dump_file_path: Option<String>,
    /// Specifies if the replica is the failover target.
    /// If the field is set to true the replica will be designated as a failover replica.
    /// If the master instance fails, the replica instance will be promoted as
    /// the new master instance.
    /// ~> NOTE: Not supported for Postgres database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failoverTarget")]
    pub failover_target: Option<bool>,
    /// Time in ms between replication
    /// heartbeats.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterHeartbeatPeriod")]
    pub master_heartbeat_period: Option<f64>,
    /// Password for the replication connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretRef")]
    pub password_secret_ref: Option<DatabaseInstanceInitProviderReplicaConfigurationPasswordSecretRef>,
    /// Permissible ciphers for use in SSL encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCipher")]
    pub ssl_cipher: Option<String>,
    /// Username for replication connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    /// True if the master's common name
    /// value is checked during the SSL handshake.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifyServerCertificate")]
    pub verify_server_certificate: Option<bool>,
}

/// Password for the replication connection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderReplicaConfigurationPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// The context needed to restore the database to a backup run. The configuration is detailed below. Adding or modifying this
/// block during resource creation/update will trigger the restore action after the resource is created/updated.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderRestoreBackupContext {
    /// The ID of the backup run to restore from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupRunId")]
    pub backup_run_id: Option<f64>,
    /// The ID of the instance that the backup was taken from. If left empty,
    /// this instance's ID will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceId")]
    pub instance_id: Option<String>,
    /// The full project ID of the source instance.`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

/// Initial root password. Can be updated. Required for MS SQL Server.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderRootPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// The settings to use for the database. The
/// configuration is detailed below. Required if clone is not set.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettings {
    /// This specifies when the instance should be
    /// active. Can be either ALWAYS, NEVER or ON_DEMAND.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activationPolicy")]
    pub activation_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeDirectoryConfig")]
    pub active_directory_config: Option<DatabaseInstanceInitProviderSettingsActiveDirectoryConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedMachineFeatures")]
    pub advanced_machine_features: Option<DatabaseInstanceInitProviderSettingsAdvancedMachineFeatures>,
    /// The availability type of the Cloud SQL
    /// instance, high availability (REGIONAL) or single zone (ZONAL).' For all instances, ensure that
    /// settings.backup_configuration.enabled is set to true.
    /// For MySQL instances, ensure that settings.backup_configuration.binary_log_enabled is set to true.
    /// For Postgres and SQL Server instances, ensure that settings.backup_configuration.point_in_time_recovery_enabled
    /// is set to true. Defaults to ZONAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityType")]
    pub availability_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupConfiguration")]
    pub backup_configuration: Option<DatabaseInstanceInitProviderSettingsBackupConfiguration>,
    /// The name of server instance collation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collation: Option<String>,
    /// Enables the enforcement of Cloud SQL Auth Proxy or Cloud SQL connectors for all the connections. If enabled, all the direct connections are rejected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectorEnforcement")]
    pub connector_enforcement: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCacheConfig")]
    pub data_cache_config: Option<DatabaseInstanceInitProviderSettingsDataCacheConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseFlags")]
    pub database_flags: Option<Vec<DatabaseInstanceInitProviderSettingsDatabaseFlags>>,
    /// .
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionProtectionEnabled")]
    pub deletion_protection_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "denyMaintenancePeriod")]
    pub deny_maintenance_period: Option<DatabaseInstanceInitProviderSettingsDenyMaintenancePeriod>,
    /// Enables auto-resizing of the storage size. Defaults to true. To avoid this, ensure that lifecycle.ignore_changes is applied to disk_size.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskAutoresize")]
    pub disk_autoresize: Option<bool>,
    /// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskAutoresizeLimit")]
    pub disk_autoresize_limit: Option<f64>,
    /// The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB. Note that this value will override the resizing from disk_autoresize if that feature is enabled. To avoid this, set lifecycle.ignore_changes on this field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSize")]
    pub disk_size: Option<f64>,
    /// The type of data disk: PD_SSD or PD_HDD. Defaults to PD_SSD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskType")]
    pub disk_type: Option<String>,
    /// The edition of the instance, can be ENTERPRISE or ENTERPRISE_PLUS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub edition: Option<String>,
    /// Enables Cloud SQL instance integration with Dataplex. MySQL, Postgres and SQL Server instances are supported for this feature. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDataplexIntegration")]
    pub enable_dataplex_integration: Option<bool>,
    /// Enables Cloud SQL instances to connect to Vertex AI and pass requests for real-time predictions and insights. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableGoogleMlIntegration")]
    pub enable_google_ml_integration: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insightsConfig")]
    pub insights_config: Option<DatabaseInstanceInitProviderSettingsInsightsConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipConfiguration")]
    pub ip_configuration: Option<DatabaseInstanceInitProviderSettingsIpConfiguration>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationPreference")]
    pub location_preference: Option<DatabaseInstanceInitProviderSettingsLocationPreference>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceWindow")]
    pub maintenance_window: Option<DatabaseInstanceInitProviderSettingsMaintenanceWindow>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordValidationPolicy")]
    pub password_validation_policy: Option<DatabaseInstanceInitProviderSettingsPasswordValidationPolicy>,
    /// Pricing plan for this instance, can only be PER_USE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pricingPlan")]
    pub pricing_plan: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqlServerAuditConfig")]
    pub sql_server_audit_config: Option<DatabaseInstanceInitProviderSettingsSqlServerAuditConfig>,
    /// The machine type to use. See tiers
    /// for more details and supported versions. Postgres supports only shared-core machine types,
    /// and custom machine types such as db-custom-2-13312. See the Custom Machine Type Documentation to learn about specifying custom machine types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tier: Option<String>,
    /// The time_zone to be used by the database engine (supported only for SQL Server), in SQL Server timezone format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    pub time_zone: Option<String>,
    /// A set of key/value user label pairs to assign to the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userLabels")]
    pub user_labels: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsActiveDirectoryConfig {
    /// The domain name for the active directory (e.g., mydomain.com).
    /// Can only be used with SQL Server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsAdvancedMachineFeatures {
    /// The number of threads per core. The value of this flag can be 1 or 2. To disable SMT, set this flag to 1. Only available in Cloud SQL for SQL Server instances. See smt for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threadsPerCore")]
    pub threads_per_core: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsBackupConfiguration {
    /// Backup retention settings. The configuration is detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupRetentionSettings")]
    pub backup_retention_settings: Option<DatabaseInstanceInitProviderSettingsBackupConfigurationBackupRetentionSettings>,
    /// True if binary logging is enabled.
    /// Can only be used with MySQL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "binaryLogEnabled")]
    pub binary_log_enabled: Option<bool>,
    /// True if backup configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The region where the backup will be stored
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// True if Point-in-time recovery is enabled. Will restart database if enabled after instance creation. Valid only for PostgreSQL and SQL Server instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pointInTimeRecoveryEnabled")]
    pub point_in_time_recovery_enabled: Option<bool>,
    /// HH:MM format time indicating when backup
    /// configuration starts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
    /// The number of days of transaction logs we retain for point in time restore, from 1-7. For PostgreSQL Enterprise Plus instances, the number of days of retained transaction logs can be set from 1 to 35.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transactionLogRetentionDays")]
    pub transaction_log_retention_days: Option<f64>,
}

/// Backup retention settings. The configuration is detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsBackupConfigurationBackupRetentionSettings {
    /// Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit
    /// is 'COUNT', we will retain this many backups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retainedBackups")]
    pub retained_backups: Option<f64>,
    /// The unit that 'retained_backups' represents. Defaults to COUNT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retentionUnit")]
    pub retention_unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsDataCacheConfig {
    /// Whether data cache is enabled for the instance. Defaults to false. Can be used with MYSQL and PostgreSQL only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCacheEnabled")]
    pub data_cache_enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsDatabaseFlags {
    /// A name for this whitelist entry.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A CIDR notation IPv4 or IPv6 address that is allowed to
    /// access this instance. Must be set even if other two attributes are not for
    /// the whitelist to become active.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsDenyMaintenancePeriod {
    /// "deny maintenance period" end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the no maintenance interval recurs every year. The date is in format yyyy-m-dd (the month is without leading zeros)i.e., 2020-1-01, or 2020-11-01, or mm-dd, i.e., 11-01
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endDate")]
    pub end_date: Option<String>,
    /// "deny maintenance period" start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-m-dd (the month is without leading zeros)i.e., 2020-1-01, or 2020-11-01, or mm-dd, i.e., 11-01
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startDate")]
    pub start_date: Option<String>,
    /// Time in UTC when the "deny maintenance period" starts on startDate and ends on endDate. The time is in format: HH:mm:SS, i.e., 00:00:00
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsInsightsConfig {
    /// True if Query Insights feature is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryInsightsEnabled")]
    pub query_insights_enabled: Option<bool>,
    /// Number of query execution plans captured by Insights per minute for all queries combined. Between 0 and 20. Default to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryPlansPerMinute")]
    pub query_plans_per_minute: Option<f64>,
    /// Maximum query length stored in bytes. Between 256 and 4500. Default to 1024. Higher query lengths are more useful for analytical queries, but they also require more memory. Changing the query length requires you to restart the instance. You can still add tags to queries that exceed the length limit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringLength")]
    pub query_string_length: Option<f64>,
    /// True if Query Insights will record application tags from query when enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordApplicationTags")]
    pub record_application_tags: Option<bool>,
    /// True if Query Insights will record client address when enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordClientAddress")]
    pub record_client_address: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsIpConfiguration {
    /// The name of the allocated ip range for the private ip CloudSQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression a-z?.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocatedIpRange")]
    pub allocated_ip_range: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetworks")]
    pub authorized_networks: Option<Vec<DatabaseInstanceInitProviderSettingsIpConfigurationAuthorizedNetworks>>,
    /// Whether Google Cloud services such as BigQuery are allowed to access data in this Cloud SQL instance over a private IP connection. SQLSERVER database type is not supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePrivatePathForGoogleCloudServices")]
    pub enable_private_path_for_google_cloud_services: Option<bool>,
    /// Whether this Cloud SQL instance should be assigned
    /// a public IPV4 address. At least ipv4_enabled must be enabled or a
    /// private_network must be configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4Enabled")]
    pub ipv4_enabled: Option<bool>,
    /// The VPC network from which the Cloud SQL
    /// instance is accessible for private IP. For example, projects/myProject/global/networks/default.
    /// Specifying a network enables private IP.
    /// At least ipv4_enabled must be enabled or a private_network must be configured.
    /// This setting can be updated, but it cannot be removed after it is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateNetwork")]
    pub private_network: Option<String>,
    /// Reference to a Network in compute to populate privateNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateNetworkRef")]
    pub private_network_ref: Option<DatabaseInstanceInitProviderSettingsIpConfigurationPrivateNetworkRef>,
    /// Selector for a Network in compute to populate privateNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateNetworkSelector")]
    pub private_network_selector: Option<DatabaseInstanceInitProviderSettingsIpConfigurationPrivateNetworkSelector>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pscConfig")]
    pub psc_config: Option<Vec<DatabaseInstanceInitProviderSettingsIpConfigurationPscConfig>>,
    /// Whether SSL connections over IP are enforced or not. To change this field, also set the corresponding value in ssl_mode. It will be fully deprecated in a future major release. For now, please use ssl_mode with a compatible require_ssl value instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireSsl")]
    pub require_ssl: Option<bool>,
    /// Specify how the server certificate's Certificate Authority is hosted. Supported value is GOOGLE_MANAGED_INTERNAL_CA.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverCaMode")]
    pub server_ca_mode: Option<String>,
    /// Specify how SSL connection should be enforced in DB connections. This field provides more SSL enforcement options compared to require_ssl. To change this field, also set the correspoding value in require_ssl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslMode")]
    pub ssl_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsIpConfigurationAuthorizedNetworks {
    /// The RFC 3339
    /// formatted date time string indicating when this whitelist expires.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expirationTime")]
    pub expiration_time: Option<String>,
    /// A name for this whitelist entry.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A CIDR notation IPv4 or IPv6 address that is allowed to
    /// access this instance. Must be set even if other two attributes are not for
    /// the whitelist to become active.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Reference to a Network in compute to populate privateNetwork.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsIpConfigurationPrivateNetworkRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatabaseInstanceInitProviderSettingsIpConfigurationPrivateNetworkRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsIpConfigurationPrivateNetworkRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatabaseInstanceInitProviderSettingsIpConfigurationPrivateNetworkRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatabaseInstanceInitProviderSettingsIpConfigurationPrivateNetworkRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatabaseInstanceInitProviderSettingsIpConfigurationPrivateNetworkRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatabaseInstanceInitProviderSettingsIpConfigurationPrivateNetworkRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate privateNetwork.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsIpConfigurationPrivateNetworkSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatabaseInstanceInitProviderSettingsIpConfigurationPrivateNetworkSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsIpConfigurationPrivateNetworkSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatabaseInstanceInitProviderSettingsIpConfigurationPrivateNetworkSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatabaseInstanceInitProviderSettingsIpConfigurationPrivateNetworkSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatabaseInstanceInitProviderSettingsIpConfigurationPrivateNetworkSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatabaseInstanceInitProviderSettingsIpConfigurationPrivateNetworkSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsIpConfigurationPscConfig {
    /// List of consumer projects that are allow-listed for PSC connections to this instance. This instance can be connected to with PSC from any network in these projects. Each consumer project in this list may be represented by a project number (numeric) or by a project id (alphanumeric).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedConsumerProjects")]
    pub allowed_consumer_projects: Option<Vec<String>>,
    /// Whether PSC connectivity is enabled for this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pscEnabled")]
    pub psc_enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsLocationPreference {
    /// A GAE application whose zone to remain
    /// in. Must be in the same region as this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followGaeApplication")]
    pub follow_gae_application: Option<String>,
    /// The preferred Compute Engine zone for the secondary/failover.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryZone")]
    pub secondary_zone: Option<String>,
    /// The preferred compute engine
    /// zone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsMaintenanceWindow {
    /// Day of week (1-7), starting on Monday
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub day: Option<f64>,
    /// Hour of day (0-23), ignored if day not set
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hour: Option<f64>,
    /// Receive updates after one week (canary) or after two weeks (stable) or after five weeks (week5) of notification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateTrack")]
    pub update_track: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsPasswordValidationPolicy {
    /// Checks if the password is a combination of lowercase, uppercase, numeric, and non-alphanumeric characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub complexity: Option<String>,
    /// Prevents the use of the username in the password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowUsernameSubstring")]
    pub disallow_username_substring: Option<bool>,
    /// Enables or disable the password validation policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePasswordPolicy")]
    pub enable_password_policy: Option<bool>,
    /// Specifies the minimum number of characters that the password must have.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minLength")]
    pub min_length: Option<f64>,
    /// Specifies the minimum duration after which you can change the password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordChangeInterval")]
    pub password_change_interval: Option<String>,
    /// Specifies the number of previous passwords that you can't reuse.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reuseInterval")]
    pub reuse_interval: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceInitProviderSettingsSqlServerAuditConfig {
    /// The name of the destination bucket (e.g., gs://mybucket).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// How long to keep generated audit files. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retentionInterval")]
    pub retention_interval: Option<String>,
    /// How often to upload generated audit files. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uploadInterval")]
    pub upload_interval: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatabaseInstanceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatabaseInstanceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatabaseInstanceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatabaseInstanceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatabaseInstanceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstancePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<DatabaseInstancePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<DatabaseInstancePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstancePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DatabaseInstancePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstancePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DatabaseInstancePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DatabaseInstancePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatabaseInstancePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DatabaseInstancePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstancePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// DatabaseInstanceStatus defines the observed state of DatabaseInstance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<DatabaseInstanceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProvider {
    /// The list of all maintenance versions applicable on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availableMaintenanceVersions")]
    pub available_maintenance_versions: Option<Vec<String>>,
    /// The context needed to create this instance as a clone of another instance. The
    /// configuration is detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub clone: Option<DatabaseInstanceStatusAtProviderClone>,
    /// The connection name of the instance to be used in
    /// connection strings. For example, when connecting with Cloud SQL Proxy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionName")]
    pub connection_name: Option<String>,
    /// The MySQL, PostgreSQL or
    /// SQL Server version to use. Supported values include MYSQL_5_6,
    /// MYSQL_5_7, MYSQL_8_0, POSTGRES_9_6,POSTGRES_10, POSTGRES_11,
    /// POSTGRES_12, POSTGRES_13, POSTGRES_14, POSTGRES_15, SQLSERVER_2017_STANDARD,
    /// SQLSERVER_2017_ENTERPRISE, SQLSERVER_2017_EXPRESS, SQLSERVER_2017_WEB.
    /// SQLSERVER_2019_STANDARD, SQLSERVER_2019_ENTERPRISE, SQLSERVER_2019_EXPRESS,
    /// SQLSERVER_2019_WEB.
    /// Database Version Policies
    /// includes an up-to-date reference of supported versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseVersion")]
    pub database_version: Option<String>,
    /// When the field is set to false, deleting the instance is allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionProtection")]
    pub deletion_protection: Option<bool>,
    /// The name of the instance. This is done because after a name is used, it cannot be reused for
    /// up to one week.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsName")]
    pub dns_name: Option<String>,
    /// The full path to the encryption key used for the CMEK disk encryption.
    /// The provided key must be in the same region as the SQL instance.  In order
    /// to use this feature, a special kind of service account must be created and
    /// granted permission on this key.  This step can currently only be done
    /// manually, please see this step.
    /// That service account needs the Cloud KMS > Cloud KMS CryptoKey Encrypter/Decrypter role on your
    /// key - please see this step.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionKeyName")]
    pub encryption_key_name: Option<String>,
    /// The first IPv4 address of any type assigned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firstIpAddress")]
    pub first_ip_address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The type of the instance. The supported values are SQL_INSTANCE_TYPE_UNSPECIFIED, CLOUD_SQL_INSTANCE, ON_PREMISES_INSTANCE and READ_REPLICA_INSTANCE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    pub instance_type: Option<String>,
    /// The IPv4 address assigned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<Vec<DatabaseInstanceStatusAtProviderIpAddress>>,
    /// The current software version on the instance. This attribute can not be set during creation. Refer to available_maintenance_versions attribute to see what maintenance_version are available for upgrade. When this attribute gets updated, it will cause an instance restart. Setting a maintenance_version value that is older than the current one on the instance will be ignored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceVersion")]
    pub maintenance_version: Option<String>,
    /// The name of the existing instance that will
    /// act as the master in the replication setup. Note, this requires the master to
    /// have binary_log_enabled set, as well as existing backups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterInstanceName")]
    pub master_instance_name: Option<String>,
    /// The first private (PRIVATE) IPv4 address assigned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIpAddress")]
    pub private_ip_address: Option<String>,
    /// The ID of the project in which the resource belongs. If it
    /// is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// the URI that points to the service attachment of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pscServiceAttachmentLink")]
    pub psc_service_attachment_link: Option<String>,
    /// The first public (PRIMARY) IPv4 address assigned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicIpAddress")]
    pub public_ip_address: Option<String>,
    /// The region the instance will sit in. If a region is not provided in the resource definition,
    /// the provider region will be used instead.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The configuration for replication. The
    /// configuration is detailed below. Valid only for MySQL instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaConfiguration")]
    pub replica_configuration: Option<DatabaseInstanceStatusAtProviderReplicaConfiguration>,
    /// The context needed to restore the database to a backup run. The configuration is detailed below. Adding or modifying this
    /// block during resource creation/update will trigger the restore action after the resource is created/updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restoreBackupContext")]
    pub restore_backup_context: Option<DatabaseInstanceStatusAtProviderRestoreBackupContext>,
    /// The URI of the created resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    pub self_link: Option<String>,
    /// The service account email address assigned to the
    /// instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountEmailAddress")]
    pub service_account_email_address: Option<String>,
    /// The settings to use for the database. The
    /// configuration is detailed below. Required if clone is not set.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub settings: Option<DatabaseInstanceStatusAtProviderSettings>,
}

/// The context needed to create this instance as a clone of another instance. The
/// configuration is detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderClone {
    /// The name of the allocated ip range for the private ip CloudSQL instance. For example: "google-managed-services-default". If set, the cloned instance ip will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression a-z?.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocatedIpRange")]
    pub allocated_ip_range: Option<String>,
    /// (SQL Server only, use with point_in_time) Clone only the specified databases from the source instance. Clone all databases if empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseNames")]
    pub database_names: Option<Vec<String>>,
    /// The timestamp of the point in time that should be restored.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pointInTime")]
    pub point_in_time: Option<String>,
    /// (Point-in-time recovery for PostgreSQL only) Clone to an instance in the specified zone. If no zone is specified, clone to the same zone as the source instance. clone-unavailable-instance
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredZone")]
    pub preferred_zone: Option<String>,
    /// Name of the source instance which will be cloned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceInstanceName")]
    pub source_instance_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderIpAddress {
    /// The IPv4 address assigned.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// The time this IP address will be retired, in RFC
    /// 3339 format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeToRetire")]
    pub time_to_retire: Option<String>,
    /// The type of this IP address.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// The configuration for replication. The
/// configuration is detailed below. Valid only for MySQL instances.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderReplicaConfiguration {
    /// PEM representation of the trusted CA's x509
    /// certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificate")]
    pub ca_certificate: Option<String>,
    /// PEM representation of the replica's x509
    /// certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientCertificate")]
    pub client_certificate: Option<String>,
    /// PEM representation of the replica's private key. The
    /// corresponding public key in encoded in the client_certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientKey")]
    pub client_key: Option<String>,
    /// The number of seconds
    /// between connect retries. MySQL's default is 60 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectRetryInterval")]
    pub connect_retry_interval: Option<f64>,
    /// Path to a SQL file in GCS from which replica
    /// instances are created. Format is gs://bucket/filename.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dumpFilePath")]
    pub dump_file_path: Option<String>,
    /// Specifies if the replica is the failover target.
    /// If the field is set to true the replica will be designated as a failover replica.
    /// If the master instance fails, the replica instance will be promoted as
    /// the new master instance.
    /// ~> NOTE: Not supported for Postgres database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failoverTarget")]
    pub failover_target: Option<bool>,
    /// Time in ms between replication
    /// heartbeats.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterHeartbeatPeriod")]
    pub master_heartbeat_period: Option<f64>,
    /// Permissible ciphers for use in SSL encryption.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCipher")]
    pub ssl_cipher: Option<String>,
    /// Username for replication connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    /// True if the master's common name
    /// value is checked during the SSL handshake.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "verifyServerCertificate")]
    pub verify_server_certificate: Option<bool>,
}

/// The context needed to restore the database to a backup run. The configuration is detailed below. Adding or modifying this
/// block during resource creation/update will trigger the restore action after the resource is created/updated.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderRestoreBackupContext {
    /// The ID of the backup run to restore from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupRunId")]
    pub backup_run_id: Option<f64>,
    /// The ID of the instance that the backup was taken from. If left empty,
    /// this instance's ID will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceId")]
    pub instance_id: Option<String>,
    /// The full project ID of the source instance.`
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

/// The settings to use for the database. The
/// configuration is detailed below. Required if clone is not set.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderSettings {
    /// This specifies when the instance should be
    /// active. Can be either ALWAYS, NEVER or ON_DEMAND.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activationPolicy")]
    pub activation_policy: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "activeDirectoryConfig")]
    pub active_directory_config: Option<DatabaseInstanceStatusAtProviderSettingsActiveDirectoryConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advancedMachineFeatures")]
    pub advanced_machine_features: Option<DatabaseInstanceStatusAtProviderSettingsAdvancedMachineFeatures>,
    /// The availability type of the Cloud SQL
    /// instance, high availability (REGIONAL) or single zone (ZONAL).' For all instances, ensure that
    /// settings.backup_configuration.enabled is set to true.
    /// For MySQL instances, ensure that settings.backup_configuration.binary_log_enabled is set to true.
    /// For Postgres and SQL Server instances, ensure that settings.backup_configuration.point_in_time_recovery_enabled
    /// is set to true. Defaults to ZONAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityType")]
    pub availability_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupConfiguration")]
    pub backup_configuration: Option<DatabaseInstanceStatusAtProviderSettingsBackupConfiguration>,
    /// The name of server instance collation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collation: Option<String>,
    /// Enables the enforcement of Cloud SQL Auth Proxy or Cloud SQL connectors for all the connections. If enabled, all the direct connections are rejected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectorEnforcement")]
    pub connector_enforcement: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCacheConfig")]
    pub data_cache_config: Option<DatabaseInstanceStatusAtProviderSettingsDataCacheConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseFlags")]
    pub database_flags: Option<Vec<DatabaseInstanceStatusAtProviderSettingsDatabaseFlags>>,
    /// .
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionProtectionEnabled")]
    pub deletion_protection_enabled: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "denyMaintenancePeriod")]
    pub deny_maintenance_period: Option<DatabaseInstanceStatusAtProviderSettingsDenyMaintenancePeriod>,
    /// Enables auto-resizing of the storage size. Defaults to true. To avoid this, ensure that lifecycle.ignore_changes is applied to disk_size.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskAutoresize")]
    pub disk_autoresize: Option<bool>,
    /// The maximum size to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskAutoresizeLimit")]
    pub disk_autoresize_limit: Option<f64>,
    /// The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB. Note that this value will override the resizing from disk_autoresize if that feature is enabled. To avoid this, set lifecycle.ignore_changes on this field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSize")]
    pub disk_size: Option<f64>,
    /// The type of data disk: PD_SSD or PD_HDD. Defaults to PD_SSD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskType")]
    pub disk_type: Option<String>,
    /// The edition of the instance, can be ENTERPRISE or ENTERPRISE_PLUS.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub edition: Option<String>,
    /// Enables Cloud SQL instance integration with Dataplex. MySQL, Postgres and SQL Server instances are supported for this feature. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDataplexIntegration")]
    pub enable_dataplex_integration: Option<bool>,
    /// Enables Cloud SQL instances to connect to Vertex AI and pass requests for real-time predictions and insights. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableGoogleMlIntegration")]
    pub enable_google_ml_integration: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "insightsConfig")]
    pub insights_config: Option<DatabaseInstanceStatusAtProviderSettingsInsightsConfig>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipConfiguration")]
    pub ip_configuration: Option<DatabaseInstanceStatusAtProviderSettingsIpConfiguration>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationPreference")]
    pub location_preference: Option<DatabaseInstanceStatusAtProviderSettingsLocationPreference>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceWindow")]
    pub maintenance_window: Option<DatabaseInstanceStatusAtProviderSettingsMaintenanceWindow>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordValidationPolicy")]
    pub password_validation_policy: Option<DatabaseInstanceStatusAtProviderSettingsPasswordValidationPolicy>,
    /// Pricing plan for this instance, can only be PER_USE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pricingPlan")]
    pub pricing_plan: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqlServerAuditConfig")]
    pub sql_server_audit_config: Option<DatabaseInstanceStatusAtProviderSettingsSqlServerAuditConfig>,
    /// The machine type to use. See tiers
    /// for more details and supported versions. Postgres supports only shared-core machine types,
    /// and custom machine types such as db-custom-2-13312. See the Custom Machine Type Documentation to learn about specifying custom machine types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tier: Option<String>,
    /// The time_zone to be used by the database engine (supported only for SQL Server), in SQL Server timezone format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    pub time_zone: Option<String>,
    /// A set of key/value user label pairs to assign to the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userLabels")]
    pub user_labels: Option<HashMap<String, String>>,
    /// Used to make sure changes to the settings block are
    /// atomic.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderSettingsActiveDirectoryConfig {
    /// The domain name for the active directory (e.g., mydomain.com).
    /// Can only be used with SQL Server.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderSettingsAdvancedMachineFeatures {
    /// The number of threads per core. The value of this flag can be 1 or 2. To disable SMT, set this flag to 1. Only available in Cloud SQL for SQL Server instances. See smt for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "threadsPerCore")]
    pub threads_per_core: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderSettingsBackupConfiguration {
    /// Backup retention settings. The configuration is detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupRetentionSettings")]
    pub backup_retention_settings: Option<DatabaseInstanceStatusAtProviderSettingsBackupConfigurationBackupRetentionSettings>,
    /// True if binary logging is enabled.
    /// Can only be used with MySQL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "binaryLogEnabled")]
    pub binary_log_enabled: Option<bool>,
    /// True if backup configuration is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The region where the backup will be stored
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// True if Point-in-time recovery is enabled. Will restart database if enabled after instance creation. Valid only for PostgreSQL and SQL Server instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pointInTimeRecoveryEnabled")]
    pub point_in_time_recovery_enabled: Option<bool>,
    /// HH:MM format time indicating when backup
    /// configuration starts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
    /// The number of days of transaction logs we retain for point in time restore, from 1-7. For PostgreSQL Enterprise Plus instances, the number of days of retained transaction logs can be set from 1 to 35.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transactionLogRetentionDays")]
    pub transaction_log_retention_days: Option<f64>,
}

/// Backup retention settings. The configuration is detailed below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderSettingsBackupConfigurationBackupRetentionSettings {
    /// Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit
    /// is 'COUNT', we will retain this many backups.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retainedBackups")]
    pub retained_backups: Option<f64>,
    /// The unit that 'retained_backups' represents. Defaults to COUNT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retentionUnit")]
    pub retention_unit: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderSettingsDataCacheConfig {
    /// Whether data cache is enabled for the instance. Defaults to false. Can be used with MYSQL and PostgreSQL only.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataCacheEnabled")]
    pub data_cache_enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderSettingsDatabaseFlags {
    /// A name for this whitelist entry.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A CIDR notation IPv4 or IPv6 address that is allowed to
    /// access this instance. Must be set even if other two attributes are not for
    /// the whitelist to become active.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderSettingsDenyMaintenancePeriod {
    /// "deny maintenance period" end date. If the year of the end date is empty, the year of the start date also must be empty. In this case, it means the no maintenance interval recurs every year. The date is in format yyyy-m-dd (the month is without leading zeros)i.e., 2020-1-01, or 2020-11-01, or mm-dd, i.e., 11-01
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endDate")]
    pub end_date: Option<String>,
    /// "deny maintenance period" start date. If the year of the start date is empty, the year of the end date also must be empty. In this case, it means the deny maintenance period recurs every year. The date is in format yyyy-m-dd (the month is without leading zeros)i.e., 2020-1-01, or 2020-11-01, or mm-dd, i.e., 11-01
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startDate")]
    pub start_date: Option<String>,
    /// Time in UTC when the "deny maintenance period" starts on startDate and ends on endDate. The time is in format: HH:mm:SS, i.e., 00:00:00
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderSettingsInsightsConfig {
    /// True if Query Insights feature is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryInsightsEnabled")]
    pub query_insights_enabled: Option<bool>,
    /// Number of query execution plans captured by Insights per minute for all queries combined. Between 0 and 20. Default to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryPlansPerMinute")]
    pub query_plans_per_minute: Option<f64>,
    /// Maximum query length stored in bytes. Between 256 and 4500. Default to 1024. Higher query lengths are more useful for analytical queries, but they also require more memory. Changing the query length requires you to restart the instance. You can still add tags to queries that exceed the length limit.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringLength")]
    pub query_string_length: Option<f64>,
    /// True if Query Insights will record application tags from query when enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordApplicationTags")]
    pub record_application_tags: Option<bool>,
    /// True if Query Insights will record client address when enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordClientAddress")]
    pub record_client_address: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderSettingsIpConfiguration {
    /// The name of the allocated ip range for the private ip CloudSQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression a-z?.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocatedIpRange")]
    pub allocated_ip_range: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetworks")]
    pub authorized_networks: Option<Vec<DatabaseInstanceStatusAtProviderSettingsIpConfigurationAuthorizedNetworks>>,
    /// Whether Google Cloud services such as BigQuery are allowed to access data in this Cloud SQL instance over a private IP connection. SQLSERVER database type is not supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePrivatePathForGoogleCloudServices")]
    pub enable_private_path_for_google_cloud_services: Option<bool>,
    /// Whether this Cloud SQL instance should be assigned
    /// a public IPV4 address. At least ipv4_enabled must be enabled or a
    /// private_network must be configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv4Enabled")]
    pub ipv4_enabled: Option<bool>,
    /// The VPC network from which the Cloud SQL
    /// instance is accessible for private IP. For example, projects/myProject/global/networks/default.
    /// Specifying a network enables private IP.
    /// At least ipv4_enabled must be enabled or a private_network must be configured.
    /// This setting can be updated, but it cannot be removed after it is set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateNetwork")]
    pub private_network: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pscConfig")]
    pub psc_config: Option<Vec<DatabaseInstanceStatusAtProviderSettingsIpConfigurationPscConfig>>,
    /// Whether SSL connections over IP are enforced or not. To change this field, also set the corresponding value in ssl_mode. It will be fully deprecated in a future major release. For now, please use ssl_mode with a compatible require_ssl value instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireSsl")]
    pub require_ssl: Option<bool>,
    /// Specify how the server certificate's Certificate Authority is hosted. Supported value is GOOGLE_MANAGED_INTERNAL_CA.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverCaMode")]
    pub server_ca_mode: Option<String>,
    /// Specify how SSL connection should be enforced in DB connections. This field provides more SSL enforcement options compared to require_ssl. To change this field, also set the correspoding value in require_ssl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslMode")]
    pub ssl_mode: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderSettingsIpConfigurationAuthorizedNetworks {
    /// The RFC 3339
    /// formatted date time string indicating when this whitelist expires.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expirationTime")]
    pub expiration_time: Option<String>,
    /// A name for this whitelist entry.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A CIDR notation IPv4 or IPv6 address that is allowed to
    /// access this instance. Must be set even if other two attributes are not for
    /// the whitelist to become active.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderSettingsIpConfigurationPscConfig {
    /// List of consumer projects that are allow-listed for PSC connections to this instance. This instance can be connected to with PSC from any network in these projects. Each consumer project in this list may be represented by a project number (numeric) or by a project id (alphanumeric).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedConsumerProjects")]
    pub allowed_consumer_projects: Option<Vec<String>>,
    /// Whether PSC connectivity is enabled for this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pscEnabled")]
    pub psc_enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderSettingsLocationPreference {
    /// A GAE application whose zone to remain
    /// in. Must be in the same region as this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "followGaeApplication")]
    pub follow_gae_application: Option<String>,
    /// The preferred Compute Engine zone for the secondary/failover.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryZone")]
    pub secondary_zone: Option<String>,
    /// The preferred compute engine
    /// zone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderSettingsMaintenanceWindow {
    /// Day of week (1-7), starting on Monday
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub day: Option<f64>,
    /// Hour of day (0-23), ignored if day not set
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hour: Option<f64>,
    /// Receive updates after one week (canary) or after two weeks (stable) or after five weeks (week5) of notification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateTrack")]
    pub update_track: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderSettingsPasswordValidationPolicy {
    /// Checks if the password is a combination of lowercase, uppercase, numeric, and non-alphanumeric characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub complexity: Option<String>,
    /// Prevents the use of the username in the password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disallowUsernameSubstring")]
    pub disallow_username_substring: Option<bool>,
    /// Enables or disable the password validation policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePasswordPolicy")]
    pub enable_password_policy: Option<bool>,
    /// Specifies the minimum number of characters that the password must have.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minLength")]
    pub min_length: Option<f64>,
    /// Specifies the minimum duration after which you can change the password.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordChangeInterval")]
    pub password_change_interval: Option<String>,
    /// Specifies the number of previous passwords that you can't reuse.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reuseInterval")]
    pub reuse_interval: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DatabaseInstanceStatusAtProviderSettingsSqlServerAuditConfig {
    /// The name of the destination bucket (e.g., gs://mybucket).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// How long to keep generated audit files. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retentionInterval")]
    pub retention_interval: Option<String>,
    /// How often to upload generated audit files. A duration in seconds with up to nine fractional digits, terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uploadInterval")]
    pub upload_interval: Option<String>,
}


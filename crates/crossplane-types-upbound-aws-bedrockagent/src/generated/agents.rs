// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
}
use self::prelude::*;

/// AgentSpec defines the desired state of Agent
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(
    group = "bedrockagent.aws.upbound.io",
    version = "v1beta1",
    kind = "Agent",
    plural = "agents"
)]
#[kube(status = "AgentStatus")]
pub struct AgentSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    pub deletion_policy: Option<AgentDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: AgentForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    pub init_provider: Option<AgentInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    pub provider_config_ref: Option<AgentProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    pub publish_connection_details_to: Option<AgentPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    pub write_connection_secret_to_ref: Option<AgentWriteConnectionSecretToRef>,
}

/// AgentSpec defines the desired state of Agent
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AgentDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentForProvider {
    /// Agents collaboration role. Valid values: SUPERVISOR, SUPERVISOR_ROUTER, DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "agentCollaboration"
    )]
    pub agent_collaboration: Option<String>,
    /// Name of the agent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentName")]
    pub agent_name: Option<String>,
    /// ARN of the IAM role with permissions to invoke API operations on the agent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "agentResourceRoleArn"
    )]
    pub agent_resource_role_arn: Option<String>,
    /// Reference to a Role in iam to populate agentResourceRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "agentResourceRoleArnRef"
    )]
    pub agent_resource_role_arn_ref: Option<AgentForProviderAgentResourceRoleArnRef>,
    /// Selector for a Role in iam to populate agentResourceRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "agentResourceRoleArnSelector"
    )]
    pub agent_resource_role_arn_selector: Option<AgentForProviderAgentResourceRoleArnSelector>,
    /// ARN of the AWS KMS key that encrypts the agent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customerEncryptionKeyArn"
    )]
    pub customer_encryption_key_arn: Option<String>,
    /// Description of the agent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Foundation model used for orchestration by the agent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "foundationModel"
    )]
    pub foundation_model: Option<String>,
    /// Details about the guardrail associated with the agent. See guardrail_configuration Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guardrailConfiguration"
    )]
    pub guardrail_configuration: Option<Vec<AgentForProviderGuardrailConfiguration>>,
    /// Number of seconds for which Amazon Bedrock keeps information about a user's conversation with the agent. A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleSessionTtlInSeconds"
    )]
    pub idle_session_ttl_in_seconds: Option<f64>,
    /// Instructions that tell the agent what it should do and how it should interact with users. The valid range is 40 - 8000 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instruction: Option<String>,
    /// Whether to prepare the agent after creation or modification. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "prepareAgent"
    )]
    pub prepare_agent: Option<bool>,
    /// Configurations to override prompt templates in different parts of an agent sequence. For more information, see Advanced prompts. See prompt_override_configuration Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "promptOverrideConfiguration"
    )]
    pub prompt_override_configuration: Option<Vec<AgentForProviderPromptOverrideConfiguration>>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Whether the in-use check is skipped when deleting the agent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipResourceInUseCheck"
    )]
    pub skip_resource_in_use_check: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// Reference to a Role in iam to populate agentResourceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentForProviderAgentResourceRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AgentForProviderAgentResourceRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentForProviderAgentResourceRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AgentForProviderAgentResourceRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AgentForProviderAgentResourceRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AgentForProviderAgentResourceRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AgentForProviderAgentResourceRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate agentResourceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentForProviderAgentResourceRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AgentForProviderAgentResourceRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentForProviderAgentResourceRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AgentForProviderAgentResourceRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AgentForProviderAgentResourceRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AgentForProviderAgentResourceRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AgentForProviderAgentResourceRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentForProviderGuardrailConfiguration {
    /// Unique identifier of the guardrail.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guardrailIdentifier"
    )]
    pub guardrail_identifier: Option<String>,
    /// Version of the guardrail.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guardrailVersion"
    )]
    pub guardrail_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentForProviderPromptOverrideConfiguration {
    /// ARN of the Lambda function to use when parsing the raw foundation model output in parts of the agent sequence. If you specify this field, at least one of the prompt_configurations block must contain a parser_mode value that is set to OVERRIDDEN.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "overrideLambda"
    )]
    pub override_lambda: Option<String>,
    /// Configurations to override a prompt template in one part of an agent sequence. See prompt_configurations Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "promptConfigurations"
    )]
    pub prompt_configurations:
        Option<Vec<AgentForProviderPromptOverrideConfigurationPromptConfigurations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentForProviderPromptOverrideConfigurationPromptConfigurations {
    /// prompt template with which to replace the default prompt template. You can use placeholder variables in the base prompt template to customize the prompt. For more information, see Prompt template placeholder variables.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "basePromptTemplate"
    )]
    pub base_prompt_template: Option<String>,
    /// Inference parameters to use when the agent invokes a foundation model in the part of the agent sequence defined by the prompt_type. For more information, see Inference parameters for foundation models. See inference_configuration Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inferenceConfiguration"
    )]
    pub inference_configuration: Option<
        Vec<AgentForProviderPromptOverrideConfigurationPromptConfigurationsInferenceConfiguration>,
    >,
    /// Whether to override the default parser Lambda function when parsing the raw foundation model output in the part of the agent sequence defined by the prompt_type. If you set the argument as OVERRIDDEN, the override_lambda argument in the prompt_override_configuration block must be specified with the ARN of a Lambda function. Valid values: DEFAULT, OVERRIDDEN.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parserMode"
    )]
    pub parser_mode: Option<String>,
    /// Whether to override the default prompt template for this prompt_type. Set this argument to OVERRIDDEN to use the prompt that you provide in the base_prompt_template. If you leave it as DEFAULT, the agent uses a default prompt template. Valid values: DEFAULT, OVERRIDDEN.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "promptCreationMode"
    )]
    pub prompt_creation_mode: Option<String>,
    /// Whether to allow the agent to carry out the step specified in the prompt_type. If you set this argument to DISABLED, the agent skips that step. Valid Values: ENABLED, DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "promptState"
    )]
    pub prompt_state: Option<String>,
    /// Step in the agent sequence that this prompt configuration applies to. Valid values: PRE_PROCESSING, ORCHESTRATION, POST_PROCESSING, KNOWLEDGE_BASE_RESPONSE_GENERATION.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "promptType"
    )]
    pub prompt_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentForProviderPromptOverrideConfigurationPromptConfigurationsInferenceConfiguration {
    /// Maximum number of tokens to allow in the generated response.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxLength")]
    pub max_length: Option<f64>,
    /// List of stop sequences. A stop sequence is a sequence of characters that causes the model to stop generating the response.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stopSequences"
    )]
    pub stop_sequences: Option<Vec<String>>,
    /// Likelihood of the model selecting higher-probability options while generating a response. A lower value makes the model more likely to choose higher-probability options, while a higher value makes the model more likely to choose lower-probability options.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub temperature: Option<f64>,
    /// Number of top most-likely candidates, between 0 and 500, from which the model chooses the next token in the sequence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topK")]
    pub top_k: Option<f64>,
    /// Top percentage of the probability distribution of next tokens, between 0 and 1 (denoting 0% and 100%), from which the model chooses the next token in the sequence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topP")]
    pub top_p: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentInitProvider {
    /// Agents collaboration role. Valid values: SUPERVISOR, SUPERVISOR_ROUTER, DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "agentCollaboration"
    )]
    pub agent_collaboration: Option<String>,
    /// Name of the agent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentName")]
    pub agent_name: Option<String>,
    /// ARN of the IAM role with permissions to invoke API operations on the agent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "agentResourceRoleArn"
    )]
    pub agent_resource_role_arn: Option<String>,
    /// Reference to a Role in iam to populate agentResourceRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "agentResourceRoleArnRef"
    )]
    pub agent_resource_role_arn_ref: Option<AgentInitProviderAgentResourceRoleArnRef>,
    /// Selector for a Role in iam to populate agentResourceRoleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "agentResourceRoleArnSelector"
    )]
    pub agent_resource_role_arn_selector: Option<AgentInitProviderAgentResourceRoleArnSelector>,
    /// ARN of the AWS KMS key that encrypts the agent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customerEncryptionKeyArn"
    )]
    pub customer_encryption_key_arn: Option<String>,
    /// Description of the agent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Foundation model used for orchestration by the agent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "foundationModel"
    )]
    pub foundation_model: Option<String>,
    /// Details about the guardrail associated with the agent. See guardrail_configuration Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guardrailConfiguration"
    )]
    pub guardrail_configuration: Option<Vec<AgentInitProviderGuardrailConfiguration>>,
    /// Number of seconds for which Amazon Bedrock keeps information about a user's conversation with the agent. A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleSessionTtlInSeconds"
    )]
    pub idle_session_ttl_in_seconds: Option<f64>,
    /// Instructions that tell the agent what it should do and how it should interact with users. The valid range is 40 - 8000 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instruction: Option<String>,
    /// Whether to prepare the agent after creation or modification. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "prepareAgent"
    )]
    pub prepare_agent: Option<bool>,
    /// Configurations to override prompt templates in different parts of an agent sequence. For more information, see Advanced prompts. See prompt_override_configuration Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "promptOverrideConfiguration"
    )]
    pub prompt_override_configuration: Option<Vec<AgentInitProviderPromptOverrideConfiguration>>,
    /// Whether the in-use check is skipped when deleting the agent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipResourceInUseCheck"
    )]
    pub skip_resource_in_use_check: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// Reference to a Role in iam to populate agentResourceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentInitProviderAgentResourceRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AgentInitProviderAgentResourceRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentInitProviderAgentResourceRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AgentInitProviderAgentResourceRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AgentInitProviderAgentResourceRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AgentInitProviderAgentResourceRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AgentInitProviderAgentResourceRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate agentResourceRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentInitProviderAgentResourceRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AgentInitProviderAgentResourceRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentInitProviderAgentResourceRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AgentInitProviderAgentResourceRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AgentInitProviderAgentResourceRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AgentInitProviderAgentResourceRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AgentInitProviderAgentResourceRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentInitProviderGuardrailConfiguration {
    /// Unique identifier of the guardrail.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guardrailIdentifier"
    )]
    pub guardrail_identifier: Option<String>,
    /// Version of the guardrail.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guardrailVersion"
    )]
    pub guardrail_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentInitProviderPromptOverrideConfiguration {
    /// ARN of the Lambda function to use when parsing the raw foundation model output in parts of the agent sequence. If you specify this field, at least one of the prompt_configurations block must contain a parser_mode value that is set to OVERRIDDEN.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "overrideLambda"
    )]
    pub override_lambda: Option<String>,
    /// Configurations to override a prompt template in one part of an agent sequence. See prompt_configurations Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "promptConfigurations"
    )]
    pub prompt_configurations:
        Option<Vec<AgentInitProviderPromptOverrideConfigurationPromptConfigurations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentInitProviderPromptOverrideConfigurationPromptConfigurations {
    /// prompt template with which to replace the default prompt template. You can use placeholder variables in the base prompt template to customize the prompt. For more information, see Prompt template placeholder variables.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "basePromptTemplate"
    )]
    pub base_prompt_template: Option<String>,
    /// Inference parameters to use when the agent invokes a foundation model in the part of the agent sequence defined by the prompt_type. For more information, see Inference parameters for foundation models. See inference_configuration Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "inferenceConfiguration"
    )]
    pub inference_configuration: Option<
        Vec<AgentInitProviderPromptOverrideConfigurationPromptConfigurationsInferenceConfiguration>,
    >,
    /// Whether to override the default parser Lambda function when parsing the raw foundation model output in the part of the agent sequence defined by the prompt_type. If you set the argument as OVERRIDDEN, the override_lambda argument in the prompt_override_configuration block must be specified with the ARN of a Lambda function. Valid values: DEFAULT, OVERRIDDEN.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "parserMode"
    )]
    pub parser_mode: Option<String>,
    /// Whether to override the default prompt template for this prompt_type. Set this argument to OVERRIDDEN to use the prompt that you provide in the base_prompt_template. If you leave it as DEFAULT, the agent uses a default prompt template. Valid values: DEFAULT, OVERRIDDEN.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "promptCreationMode"
    )]
    pub prompt_creation_mode: Option<String>,
    /// Whether to allow the agent to carry out the step specified in the prompt_type. If you set this argument to DISABLED, the agent skips that step. Valid Values: ENABLED, DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "promptState"
    )]
    pub prompt_state: Option<String>,
    /// Step in the agent sequence that this prompt configuration applies to. Valid values: PRE_PROCESSING, ORCHESTRATION, POST_PROCESSING, KNOWLEDGE_BASE_RESPONSE_GENERATION.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "promptType"
    )]
    pub prompt_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentInitProviderPromptOverrideConfigurationPromptConfigurationsInferenceConfiguration {
    /// Maximum number of tokens to allow in the generated response.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxLength")]
    pub max_length: Option<f64>,
    /// List of stop sequences. A stop sequence is a sequence of characters that causes the model to stop generating the response.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stopSequences"
    )]
    pub stop_sequences: Option<Vec<String>>,
    /// Likelihood of the model selecting higher-probability options while generating a response. A lower value makes the model more likely to choose higher-probability options, while a higher value makes the model more likely to choose lower-probability options.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub temperature: Option<f64>,
    /// Number of top most-likely candidates, between 0 and 500, from which the model chooses the next token in the sequence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topK")]
    pub top_k: Option<f64>,
    /// Top percentage of the probability distribution of next tokens, between 0 and 1 (denoting 0% and 100%), from which the model chooses the next token in the sequence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topP")]
    pub top_p: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AgentProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AgentProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AgentProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AgentProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AgentProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<AgentPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<AgentPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AgentPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AgentPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AgentPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AgentPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AgentPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// AgentStatus defines the observed state of Agent.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    pub at_provider: Option<AgentStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentStatusAtProvider {
    /// ARN of the agent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentArn")]
    pub agent_arn: Option<String>,
    /// Agents collaboration role. Valid values: SUPERVISOR, SUPERVISOR_ROUTER, DISABLED.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "agentCollaboration"
    )]
    pub agent_collaboration: Option<String>,
    /// Unique identifier of the agent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentId")]
    pub agent_id: Option<String>,
    /// Name of the agent.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "agentName")]
    pub agent_name: Option<String>,
    /// ARN of the IAM role with permissions to invoke API operations on the agent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "agentResourceRoleArn"
    )]
    pub agent_resource_role_arn: Option<String>,
    /// Version of the agent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "agentVersion"
    )]
    pub agent_version: Option<String>,
    /// ARN of the AWS KMS key that encrypts the agent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "customerEncryptionKeyArn"
    )]
    pub customer_encryption_key_arn: Option<String>,
    /// Description of the agent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Foundation model used for orchestration by the agent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "foundationModel"
    )]
    pub foundation_model: Option<String>,
    /// Details about the guardrail associated with the agent. See guardrail_configuration Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guardrailConfiguration"
    )]
    pub guardrail_configuration: Option<Vec<AgentStatusAtProviderGuardrailConfiguration>>,
    /// Unique identifier of the agent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Number of seconds for which Amazon Bedrock keeps information about a user's conversation with the agent. A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleSessionTtlInSeconds"
    )]
    pub idle_session_ttl_in_seconds: Option<f64>,
    /// Instructions that tell the agent what it should do and how it should interact with users. The valid range is 40 - 8000 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instruction: Option<String>,
    /// Whether to prepare the agent after creation or modification. Defaults to true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "prepareAgent"
    )]
    pub prepare_agent: Option<bool>,
    /// Configurations to override prompt templates in different parts of an agent sequence. For more information, see Advanced prompts. See prompt_override_configuration Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "promptOverrideConfiguration"
    )]
    pub prompt_override_configuration:
        Option<Vec<AgentStatusAtProviderPromptOverrideConfiguration>>,
    /// Whether the in-use check is skipped when deleting the agent.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "skipResourceInUseCheck"
    )]
    pub skip_resource_in_use_check: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentStatusAtProviderGuardrailConfiguration {
    /// Unique identifier of the guardrail.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guardrailIdentifier"
    )]
    pub guardrail_identifier: Option<String>,
    /// Version of the guardrail.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "guardrailVersion"
    )]
    pub guardrail_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentStatusAtProviderPromptOverrideConfiguration {
    /// ARN of the Lambda function to use when parsing the raw foundation model output in parts of the agent sequence. If you specify this field, at least one of the prompt_configurations block must contain a parser_mode value that is set to OVERRIDDEN.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "overrideLambda"
    )]
    pub override_lambda: Option<String>,
    /// Configurations to override a prompt template in one part of an agent sequence. See prompt_configurations Block for details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "promptConfigurations"
    )]
    pub prompt_configurations:
        Option<Vec<AgentStatusAtProviderPromptOverrideConfigurationPromptConfigurations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentStatusAtProviderPromptOverrideConfigurationPromptConfigurations {
    /// prompt template with which to replace the default prompt template. You can use placeholder variables in the base prompt template to customize the prompt. For more information, see Prompt template placeholder variables.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basePromptTemplate")]
    pub base_prompt_template: Option<String>,
    /// Inference parameters to use when the agent invokes a foundation model in the part of the agent sequence defined by the prompt_type. For more information, see Inference parameters for foundation models. See inference_configuration Block for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inferenceConfiguration")]
    pub inference_configuration: Option<Vec<AgentStatusAtProviderPromptOverrideConfigurationPromptConfigurationsInferenceConfiguration>>,
    /// Whether to override the default parser Lambda function when parsing the raw foundation model output in the part of the agent sequence defined by the prompt_type. If you set the argument as OVERRIDDEN, the override_lambda argument in the prompt_override_configuration block must be specified with the ARN of a Lambda function. Valid values: DEFAULT, OVERRIDDEN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parserMode")]
    pub parser_mode: Option<String>,
    /// Whether to override the default prompt template for this prompt_type. Set this argument to OVERRIDDEN to use the prompt that you provide in the base_prompt_template. If you leave it as DEFAULT, the agent uses a default prompt template. Valid values: DEFAULT, OVERRIDDEN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "promptCreationMode")]
    pub prompt_creation_mode: Option<String>,
    /// Whether to allow the agent to carry out the step specified in the prompt_type. If you set this argument to DISABLED, the agent skips that step. Valid Values: ENABLED, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "promptState")]
    pub prompt_state: Option<String>,
    /// Step in the agent sequence that this prompt configuration applies to. Valid values: PRE_PROCESSING, ORCHESTRATION, POST_PROCESSING, KNOWLEDGE_BASE_RESPONSE_GENERATION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "promptType")]
    pub prompt_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AgentStatusAtProviderPromptOverrideConfigurationPromptConfigurationsInferenceConfiguration
{
    /// Maximum number of tokens to allow in the generated response.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxLength")]
    pub max_length: Option<f64>,
    /// List of stop sequences. A stop sequence is a sequence of characters that causes the model to stop generating the response.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "stopSequences"
    )]
    pub stop_sequences: Option<Vec<String>>,
    /// Likelihood of the model selecting higher-probability options while generating a response. A lower value makes the model more likely to choose higher-probability options, while a higher value makes the model more likely to choose lower-probability options.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub temperature: Option<f64>,
    /// Number of top most-likely candidates, between 0 and 500, from which the model chooses the next token in the sequence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topK")]
    pub top_k: Option<f64>,
    /// Top percentage of the probability distribution of next tokens, between 0 and 1 (denoting 0% and 100%), from which the model chooses the next token in the sequence.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topP")]
    pub top_p: Option<f64>,
}

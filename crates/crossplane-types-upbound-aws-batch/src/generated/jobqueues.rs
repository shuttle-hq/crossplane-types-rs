// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// JobQueueSpec defines the desired state of JobQueue
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "batch.aws.upbound.io", version = "v1beta1", kind = "JobQueue", plural = "jobqueues")]
#[kube(status = "JobQueueStatus")]
pub struct JobQueueSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<JobQueueDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: JobQueueForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<JobQueueInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<JobQueueProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<JobQueuePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<JobQueueWriteConnectionSecretToRef>,
}

/// JobQueueSpec defines the desired state of JobQueue
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueForProvider {
    /// The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment runs a specific job. Compute environments must be in the VALID state before you can associate them with a job queue. You can associate up to three compute environments with a job queue.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeEnvironmentOrder")]
    pub compute_environment_order: Option<Vec<JobQueueForProviderComputeEnvironmentOrder>>,
    /// (Deprecated)  This parameter is deprecated, please use compute_environment_order instead. List of compute environment ARNs mapped to a job queue. The position of the compute environments in the list will dictate the order. When importing a AWS Batch Job Queue, the parameter compute_environments will always be used over compute_environment_order. Please adjust your HCL accordingly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeEnvironments")]
    pub compute_environments: Option<Vec<String>>,
    /// The set of job state time limit actions mapped to a job queue. Specifies an action that AWS Batch will take after the job has remained at the head of the queue in the specified state for longer than the specified time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobStateTimeLimitAction")]
    pub job_state_time_limit_action: Option<Vec<JobQueueForProviderJobStateTimeLimitAction>>,
    /// The priority of the job queue. Job queues with a higher priority
    /// are evaluated first when associated with the same compute environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The ARN of the fair share scheduling policy. If this parameter is specified, the job queue uses a fair share scheduling policy. If this parameter isn't specified, the job queue uses a first in, first out (FIFO) scheduling policy. After a job queue is created, you can replace but can't remove the fair share scheduling policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulingPolicyArn")]
    pub scheduling_policy_arn: Option<String>,
    /// Reference to a SchedulingPolicy in batch to populate schedulingPolicyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulingPolicyArnRef")]
    pub scheduling_policy_arn_ref: Option<JobQueueForProviderSchedulingPolicyArnRef>,
    /// Selector for a SchedulingPolicy in batch to populate schedulingPolicyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulingPolicyArnSelector")]
    pub scheduling_policy_arn_selector: Option<JobQueueForProviderSchedulingPolicyArnSelector>,
    /// The state of the job queue. Must be one of: ENABLED or DISABLED
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueForProviderComputeEnvironmentOrder {
    /// The Amazon Resource Name (ARN) of the compute environment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeEnvironment")]
    pub compute_environment: Option<String>,
    /// Reference to a ComputeEnvironment in batch to populate computeEnvironment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeEnvironmentRef")]
    pub compute_environment_ref: Option<JobQueueForProviderComputeEnvironmentOrderComputeEnvironmentRef>,
    /// Selector for a ComputeEnvironment in batch to populate computeEnvironment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeEnvironmentSelector")]
    pub compute_environment_selector: Option<JobQueueForProviderComputeEnvironmentOrderComputeEnvironmentSelector>,
    /// The order of the compute environment. Compute environments are tried in ascending order. For example, if two compute environments are associated with a job queue, the compute environment with a lower order integer value is tried for job placement first.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<f64>,
}

/// Reference to a ComputeEnvironment in batch to populate computeEnvironment.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueForProviderComputeEnvironmentOrderComputeEnvironmentRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<JobQueueForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<JobQueueForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<JobQueueForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueForProviderComputeEnvironmentOrderComputeEnvironmentRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ComputeEnvironment in batch to populate computeEnvironment.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueForProviderComputeEnvironmentOrderComputeEnvironmentSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<JobQueueForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<JobQueueForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<JobQueueForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueForProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueForProviderJobStateTimeLimitAction {
    /// The action to take when a job is at the head of the job queue in the specified state for the specified period of time. Valid values include "CANCEL"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    /// The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. Valid values include integers between 600 & 86400
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTimeSeconds")]
    pub max_time_seconds: Option<f64>,
    /// The reason to log for the action being taken.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// The state of the job needed to trigger the action. Valid values include "RUNNABLE".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// Reference to a SchedulingPolicy in batch to populate schedulingPolicyArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueForProviderSchedulingPolicyArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<JobQueueForProviderSchedulingPolicyArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueForProviderSchedulingPolicyArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<JobQueueForProviderSchedulingPolicyArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<JobQueueForProviderSchedulingPolicyArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueForProviderSchedulingPolicyArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueForProviderSchedulingPolicyArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a SchedulingPolicy in batch to populate schedulingPolicyArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueForProviderSchedulingPolicyArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<JobQueueForProviderSchedulingPolicyArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueForProviderSchedulingPolicyArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<JobQueueForProviderSchedulingPolicyArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<JobQueueForProviderSchedulingPolicyArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueForProviderSchedulingPolicyArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueForProviderSchedulingPolicyArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueInitProvider {
    /// The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment runs a specific job. Compute environments must be in the VALID state before you can associate them with a job queue. You can associate up to three compute environments with a job queue.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeEnvironmentOrder")]
    pub compute_environment_order: Option<Vec<JobQueueInitProviderComputeEnvironmentOrder>>,
    /// (Deprecated)  This parameter is deprecated, please use compute_environment_order instead. List of compute environment ARNs mapped to a job queue. The position of the compute environments in the list will dictate the order. When importing a AWS Batch Job Queue, the parameter compute_environments will always be used over compute_environment_order. Please adjust your HCL accordingly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeEnvironments")]
    pub compute_environments: Option<Vec<String>>,
    /// The set of job state time limit actions mapped to a job queue. Specifies an action that AWS Batch will take after the job has remained at the head of the queue in the specified state for longer than the specified time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobStateTimeLimitAction")]
    pub job_state_time_limit_action: Option<Vec<JobQueueInitProviderJobStateTimeLimitAction>>,
    /// The priority of the job queue. Job queues with a higher priority
    /// are evaluated first when associated with the same compute environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// The ARN of the fair share scheduling policy. If this parameter is specified, the job queue uses a fair share scheduling policy. If this parameter isn't specified, the job queue uses a first in, first out (FIFO) scheduling policy. After a job queue is created, you can replace but can't remove the fair share scheduling policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulingPolicyArn")]
    pub scheduling_policy_arn: Option<String>,
    /// Reference to a SchedulingPolicy in batch to populate schedulingPolicyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulingPolicyArnRef")]
    pub scheduling_policy_arn_ref: Option<JobQueueInitProviderSchedulingPolicyArnRef>,
    /// Selector for a SchedulingPolicy in batch to populate schedulingPolicyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulingPolicyArnSelector")]
    pub scheduling_policy_arn_selector: Option<JobQueueInitProviderSchedulingPolicyArnSelector>,
    /// The state of the job queue. Must be one of: ENABLED or DISABLED
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueInitProviderComputeEnvironmentOrder {
    /// The Amazon Resource Name (ARN) of the compute environment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeEnvironment")]
    pub compute_environment: Option<String>,
    /// Reference to a ComputeEnvironment in batch to populate computeEnvironment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeEnvironmentRef")]
    pub compute_environment_ref: Option<JobQueueInitProviderComputeEnvironmentOrderComputeEnvironmentRef>,
    /// Selector for a ComputeEnvironment in batch to populate computeEnvironment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeEnvironmentSelector")]
    pub compute_environment_selector: Option<JobQueueInitProviderComputeEnvironmentOrderComputeEnvironmentSelector>,
    /// The order of the compute environment. Compute environments are tried in ascending order. For example, if two compute environments are associated with a job queue, the compute environment with a lower order integer value is tried for job placement first.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<f64>,
}

/// Reference to a ComputeEnvironment in batch to populate computeEnvironment.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueInitProviderComputeEnvironmentOrderComputeEnvironmentRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<JobQueueInitProviderComputeEnvironmentOrderComputeEnvironmentRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueInitProviderComputeEnvironmentOrderComputeEnvironmentRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<JobQueueInitProviderComputeEnvironmentOrderComputeEnvironmentRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<JobQueueInitProviderComputeEnvironmentOrderComputeEnvironmentRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueInitProviderComputeEnvironmentOrderComputeEnvironmentRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueInitProviderComputeEnvironmentOrderComputeEnvironmentRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ComputeEnvironment in batch to populate computeEnvironment.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueInitProviderComputeEnvironmentOrderComputeEnvironmentSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<JobQueueInitProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueInitProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<JobQueueInitProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<JobQueueInitProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueInitProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueInitProviderComputeEnvironmentOrderComputeEnvironmentSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueInitProviderJobStateTimeLimitAction {
    /// The action to take when a job is at the head of the job queue in the specified state for the specified period of time. Valid values include "CANCEL"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    /// The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. Valid values include integers between 600 & 86400
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTimeSeconds")]
    pub max_time_seconds: Option<f64>,
    /// The reason to log for the action being taken.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// The state of the job needed to trigger the action. Valid values include "RUNNABLE".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// Reference to a SchedulingPolicy in batch to populate schedulingPolicyArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueInitProviderSchedulingPolicyArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<JobQueueInitProviderSchedulingPolicyArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueInitProviderSchedulingPolicyArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<JobQueueInitProviderSchedulingPolicyArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<JobQueueInitProviderSchedulingPolicyArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueInitProviderSchedulingPolicyArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueInitProviderSchedulingPolicyArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a SchedulingPolicy in batch to populate schedulingPolicyArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueInitProviderSchedulingPolicyArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<JobQueueInitProviderSchedulingPolicyArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueInitProviderSchedulingPolicyArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<JobQueueInitProviderSchedulingPolicyArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<JobQueueInitProviderSchedulingPolicyArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueInitProviderSchedulingPolicyArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueInitProviderSchedulingPolicyArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<JobQueueProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<JobQueueProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<JobQueueProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueueProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueuePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<JobQueuePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<JobQueuePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueuePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<JobQueuePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueuePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<JobQueuePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<JobQueuePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueuePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobQueuePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueuePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// JobQueueStatus defines the observed state of JobQueue.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<JobQueueStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueStatusAtProvider {
    /// The Amazon Resource Name of the job queue.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// The set of compute environments mapped to a job queue and their order relative to each other. The job scheduler uses this parameter to determine which compute environment runs a specific job. Compute environments must be in the VALID state before you can associate them with a job queue. You can associate up to three compute environments with a job queue.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeEnvironmentOrder")]
    pub compute_environment_order: Option<Vec<JobQueueStatusAtProviderComputeEnvironmentOrder>>,
    /// (Deprecated)  This parameter is deprecated, please use compute_environment_order instead. List of compute environment ARNs mapped to a job queue. The position of the compute environments in the list will dictate the order. When importing a AWS Batch Job Queue, the parameter compute_environments will always be used over compute_environment_order. Please adjust your HCL accordingly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeEnvironments")]
    pub compute_environments: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The set of job state time limit actions mapped to a job queue. Specifies an action that AWS Batch will take after the job has remained at the head of the queue in the specified state for longer than the specified time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jobStateTimeLimitAction")]
    pub job_state_time_limit_action: Option<Vec<JobQueueStatusAtProviderJobStateTimeLimitAction>>,
    /// The priority of the job queue. Job queues with a higher priority
    /// are evaluated first when associated with the same compute environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// The ARN of the fair share scheduling policy. If this parameter is specified, the job queue uses a fair share scheduling policy. If this parameter isn't specified, the job queue uses a first in, first out (FIFO) scheduling policy. After a job queue is created, you can replace but can't remove the fair share scheduling policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulingPolicyArn")]
    pub scheduling_policy_arn: Option<String>,
    /// The state of the job queue. Must be one of: ENABLED or DISABLED
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueStatusAtProviderComputeEnvironmentOrder {
    /// The Amazon Resource Name (ARN) of the compute environment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "computeEnvironment")]
    pub compute_environment: Option<String>,
    /// The order of the compute environment. Compute environments are tried in ascending order. For example, if two compute environments are associated with a job queue, the compute environment with a lower order integer value is tried for job placement first.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobQueueStatusAtProviderJobStateTimeLimitAction {
    /// The action to take when a job is at the head of the job queue in the specified state for the specified period of time. Valid values include "CANCEL"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    /// The approximate amount of time, in seconds, that must pass with the job in the specified state before the action is taken. Valid values include integers between 600 & 86400
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTimeSeconds")]
    pub max_time_seconds: Option<f64>,
    /// The reason to log for the action being taken.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// The state of the job needed to trigger the action. Valid values include "RUNNABLE".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}


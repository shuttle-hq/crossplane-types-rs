// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// JobDefinitionSpec defines the desired state of JobDefinition
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "batch.aws.upbound.io", version = "v1beta2", kind = "JobDefinition", plural = "jobdefinitions")]
#[kube(status = "JobDefinitionStatus")]
pub struct JobDefinitionSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<JobDefinitionDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: JobDefinitionForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<JobDefinitionInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<JobDefinitionProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<JobDefinitionPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<JobDefinitionWriteConnectionSecretToRef>,
}

/// JobDefinitionSpec defines the desired state of JobDefinition
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobDefinitionDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProvider {
    /// Valid container properties provided as a single valid JSON document. This parameter is only valid if the type parameter is container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerProperties")]
    pub container_properties: Option<String>,
    /// When updating a job definition a new revision is created. This parameter determines if the previous version is deregistered (INACTIVE) or left  ACTIVE. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deregisterOnNewRevision")]
    pub deregister_on_new_revision: Option<bool>,
    /// Valid ECS properties provided as a single valid JSON document. This parameter is only valid if the type parameter is container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecsProperties")]
    pub ecs_properties: Option<String>,
    /// Valid eks properties. This parameter is only valid if the type parameter is container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eksProperties")]
    pub eks_properties: Option<JobDefinitionForProviderEksProperties>,
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Valid node properties provided as a single valid JSON document. This parameter is required if the type parameter is multinode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeProperties")]
    pub node_properties: Option<String>,
    /// Parameter substitution placeholders to set in the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<HashMap<String, String>>,
    /// Platform capabilities required by the job definition. If no value is specified, it defaults to EC2. To run the job on Fargate resources, specify FARGATE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "platformCapabilities")]
    pub platform_capabilities: Option<Vec<String>>,
    /// Whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "propagateTags")]
    pub propagate_tags: Option<bool>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of retry_strategy is 1.  Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryStrategy")]
    pub retry_strategy: Option<JobDefinitionForProviderRetryStrategy>,
    /// Scheduling priority of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority. Allowed values 0 through 9999.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulingPriority")]
    pub scheduling_priority: Option<f64>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of timeout is 1. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<JobDefinitionForProviderTimeout>,
    /// Type of job definition. Must be container or multinode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Valid eks properties. This parameter is only valid if the type parameter is container.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderEksProperties {
    /// Properties for the Kubernetes pod resources of a job. See pod_properties below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podProperties")]
    pub pod_properties: Option<JobDefinitionForProviderEksPropertiesPodProperties>,
}

/// Properties for the Kubernetes pod resources of a job. See pod_properties below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderEksPropertiesPodProperties {
    /// Properties of the container that's used on the Amazon EKS pod. See containers below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<JobDefinitionForProviderEksPropertiesPodPropertiesContainers>>,
    /// DNS policy for the pod. The default value is ClusterFirst. If the host_network argument is not specified, the default is ClusterFirstWithHostNet. ClusterFirst indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node. For more information, see Pod's DNS policy in the Kubernetes documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsPolicy")]
    pub dns_policy: Option<String>,
    /// Whether the pod uses the hosts' network IP address. The default value is true. Setting this to false enables the Kubernetes pod networking model. Most AWS Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostNetwork")]
    pub host_network: Option<bool>,
    /// List of Kubernetes secret resources. See image_pull_secret below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecret")]
    pub image_pull_secret: Option<Vec<JobDefinitionForProviderEksPropertiesPodPropertiesImagePullSecret>>,
    /// Containers which run before application containers, always runs to completion, and must complete successfully before the next container starts. These containers are registered with the Amazon EKS Connector agent and persists the registration information in the Kubernetes backend data store. See containers below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initContainers")]
    pub init_containers: Option<Vec<JobDefinitionForProviderEksPropertiesPodPropertiesInitContainers>>,
    /// Metadata about the Kubernetes pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<JobDefinitionForProviderEksPropertiesPodPropertiesMetadata>,
    /// Name of the service account that's used to run the pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountName")]
    pub service_account_name: Option<String>,
    /// Indicates if the processes in a container are shared, or visible, to other containers in the same pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareProcessNamespace")]
    pub share_process_namespace: Option<bool>,
    /// Volumes for a job definition that uses Amazon EKS resources. AWS Batch supports emptyDir, hostPath, and secret volume types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<JobDefinitionForProviderEksPropertiesPodPropertiesVolumes>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderEksPropertiesPodPropertiesContainers {
    /// Array of arguments to the entrypoint. If this isn't specified, the CMD of the container image is used. This corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes. Environment variable references are expanded using the container's environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Entrypoint for the container. This isn't run within a shell. If this isn't specified, the ENTRYPOINT of the container image is used. Environment variable references are expanded using the container's environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Environment variables to pass to a container. See EKS Environment below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<JobDefinitionForProviderEksPropertiesPodPropertiesContainersEnv>>,
    /// Docker image used to start the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// Image pull policy for the container. Supported values are Always, IfNotPresent, and Never.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    /// Name of the container. If the name isn't specified, the default name "Default" is used. Each container in a pod must have a unique name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<JobDefinitionForProviderEksPropertiesPodPropertiesContainersResources>,
    /// Security context for a job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<JobDefinitionForProviderEksPropertiesPodPropertiesContainersSecurityContext>,
    /// Volume mounts for the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<JobDefinitionForProviderEksPropertiesPodPropertiesContainersVolumeMounts>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderEksPropertiesPodPropertiesContainersEnv {
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value of the environment variable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderEksPropertiesPodPropertiesContainersResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<HashMap<String, String>>,
}

/// Security context for a job.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderEksPropertiesPodPropertiesContainersSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFileSystem")]
    pub read_only_root_file_system: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderEksPropertiesPodPropertiesContainersVolumeMounts {
    /// Path of the file or directory on the host to mount into containers on the pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    pub mount_path: Option<String>,
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderEksPropertiesPodPropertiesImagePullSecret {
    /// Unique identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderEksPropertiesPodPropertiesInitContainers {
    /// Array of arguments to the entrypoint. If this isn't specified, the CMD of the container image is used. This corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes. Environment variable references are expanded using the container's environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Entrypoint for the container. This isn't run within a shell. If this isn't specified, the ENTRYPOINT of the container image is used. Environment variable references are expanded using the container's environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Environment variables to pass to a container. See EKS Environment below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<JobDefinitionForProviderEksPropertiesPodPropertiesInitContainersEnv>>,
    /// Docker image used to start the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// Image pull policy for the container. Supported values are Always, IfNotPresent, and Never.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<JobDefinitionForProviderEksPropertiesPodPropertiesInitContainersResources>,
    /// Security context for a job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<JobDefinitionForProviderEksPropertiesPodPropertiesInitContainersSecurityContext>,
    /// Volume mounts for the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<JobDefinitionForProviderEksPropertiesPodPropertiesInitContainersVolumeMounts>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderEksPropertiesPodPropertiesInitContainersEnv {
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value of the environment variable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderEksPropertiesPodPropertiesInitContainersResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<HashMap<String, String>>,
}

/// Security context for a job.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderEksPropertiesPodPropertiesInitContainersSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFileSystem")]
    pub read_only_root_file_system: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderEksPropertiesPodPropertiesInitContainersVolumeMounts {
    /// Path of the file or directory on the host to mount into containers on the pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    pub mount_path: Option<String>,
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

/// Metadata about the Kubernetes pod.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderEksPropertiesPodPropertiesMetadata {
    /// Key-value pairs used to identify, sort, and organize cube resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderEksPropertiesPodPropertiesVolumes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDir")]
    pub empty_dir: Option<JobDefinitionForProviderEksPropertiesPodPropertiesVolumesEmptyDir>,
    /// Path of the file or directory on the host to mount into containers on the pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    pub host_path: Option<JobDefinitionForProviderEksPropertiesPodPropertiesVolumesHostPath>,
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<JobDefinitionForProviderEksPropertiesPodPropertiesVolumesSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderEksPropertiesPodPropertiesVolumesEmptyDir {
    /// Medium to store the volume. The default value is an empty string, which uses the storage of the node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub medium: Option<String>,
    /// Maximum size of the volume. By default, there's no maximum size defined.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeLimit")]
    pub size_limit: Option<String>,
}

/// Path of the file or directory on the host to mount into containers on the pod.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderEksPropertiesPodPropertiesVolumesHostPath {
    /// Path of the file or directory on the host to mount into containers on the pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderEksPropertiesPodPropertiesVolumesSecret {
    /// Whether the secret or the secret's keys must be defined.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
    /// Name of the secret. The name must be allowed as a DNS subdomain name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// Retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of retry_strategy is 1.  Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderRetryStrategy {
    /// Number of times to move a job to the RUNNABLE status. You may specify between 1 and 10 attempts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempts: Option<f64>,
    /// Evaluate on exit conditions under which the job should be retried or failed. If this parameter is specified, then the attempts parameter must also be specified. You may specify up to 5 configuration blocks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluateOnExit")]
    pub evaluate_on_exit: Option<Vec<JobDefinitionForProviderRetryStrategyEvaluateOnExit>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderRetryStrategyEvaluateOnExit {
    /// Action to take if all of the specified conditions are met. The values are not case sensitive. Valid values: retry, exit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    /// Glob pattern to match against the decimal representation of the exit code returned for a job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onExitCode")]
    pub on_exit_code: Option<String>,
    /// Glob pattern to match against the reason returned for a job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onReason")]
    pub on_reason: Option<String>,
    /// Glob pattern to match against the status reason returned for a job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onStatusReason")]
    pub on_status_reason: Option<String>,
}

/// Timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of timeout is 1. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionForProviderTimeout {
    /// Time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is 60 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attemptDurationSeconds")]
    pub attempt_duration_seconds: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProvider {
    /// Valid container properties provided as a single valid JSON document. This parameter is only valid if the type parameter is container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerProperties")]
    pub container_properties: Option<String>,
    /// When updating a job definition a new revision is created. This parameter determines if the previous version is deregistered (INACTIVE) or left  ACTIVE. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deregisterOnNewRevision")]
    pub deregister_on_new_revision: Option<bool>,
    /// Valid ECS properties provided as a single valid JSON document. This parameter is only valid if the type parameter is container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecsProperties")]
    pub ecs_properties: Option<String>,
    /// Valid eks properties. This parameter is only valid if the type parameter is container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eksProperties")]
    pub eks_properties: Option<JobDefinitionInitProviderEksProperties>,
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Valid node properties provided as a single valid JSON document. This parameter is required if the type parameter is multinode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeProperties")]
    pub node_properties: Option<String>,
    /// Parameter substitution placeholders to set in the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<HashMap<String, String>>,
    /// Platform capabilities required by the job definition. If no value is specified, it defaults to EC2. To run the job on Fargate resources, specify FARGATE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "platformCapabilities")]
    pub platform_capabilities: Option<Vec<String>>,
    /// Whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "propagateTags")]
    pub propagate_tags: Option<bool>,
    /// Retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of retry_strategy is 1.  Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryStrategy")]
    pub retry_strategy: Option<JobDefinitionInitProviderRetryStrategy>,
    /// Scheduling priority of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority. Allowed values 0 through 9999.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulingPriority")]
    pub scheduling_priority: Option<f64>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of timeout is 1. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<JobDefinitionInitProviderTimeout>,
    /// Type of job definition. Must be container or multinode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Valid eks properties. This parameter is only valid if the type parameter is container.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderEksProperties {
    /// Properties for the Kubernetes pod resources of a job. See pod_properties below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podProperties")]
    pub pod_properties: Option<JobDefinitionInitProviderEksPropertiesPodProperties>,
}

/// Properties for the Kubernetes pod resources of a job. See pod_properties below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderEksPropertiesPodProperties {
    /// Properties of the container that's used on the Amazon EKS pod. See containers below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<JobDefinitionInitProviderEksPropertiesPodPropertiesContainers>>,
    /// DNS policy for the pod. The default value is ClusterFirst. If the host_network argument is not specified, the default is ClusterFirstWithHostNet. ClusterFirst indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node. For more information, see Pod's DNS policy in the Kubernetes documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsPolicy")]
    pub dns_policy: Option<String>,
    /// Whether the pod uses the hosts' network IP address. The default value is true. Setting this to false enables the Kubernetes pod networking model. Most AWS Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostNetwork")]
    pub host_network: Option<bool>,
    /// List of Kubernetes secret resources. See image_pull_secret below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecret")]
    pub image_pull_secret: Option<Vec<JobDefinitionInitProviderEksPropertiesPodPropertiesImagePullSecret>>,
    /// Containers which run before application containers, always runs to completion, and must complete successfully before the next container starts. These containers are registered with the Amazon EKS Connector agent and persists the registration information in the Kubernetes backend data store. See containers below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initContainers")]
    pub init_containers: Option<Vec<JobDefinitionInitProviderEksPropertiesPodPropertiesInitContainers>>,
    /// Metadata about the Kubernetes pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<JobDefinitionInitProviderEksPropertiesPodPropertiesMetadata>,
    /// Name of the service account that's used to run the pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountName")]
    pub service_account_name: Option<String>,
    /// Indicates if the processes in a container are shared, or visible, to other containers in the same pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareProcessNamespace")]
    pub share_process_namespace: Option<bool>,
    /// Volumes for a job definition that uses Amazon EKS resources. AWS Batch supports emptyDir, hostPath, and secret volume types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<JobDefinitionInitProviderEksPropertiesPodPropertiesVolumes>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderEksPropertiesPodPropertiesContainers {
    /// Array of arguments to the entrypoint. If this isn't specified, the CMD of the container image is used. This corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes. Environment variable references are expanded using the container's environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Entrypoint for the container. This isn't run within a shell. If this isn't specified, the ENTRYPOINT of the container image is used. Environment variable references are expanded using the container's environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Environment variables to pass to a container. See EKS Environment below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<JobDefinitionInitProviderEksPropertiesPodPropertiesContainersEnv>>,
    /// Docker image used to start the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// Image pull policy for the container. Supported values are Always, IfNotPresent, and Never.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    /// Name of the container. If the name isn't specified, the default name "Default" is used. Each container in a pod must have a unique name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<JobDefinitionInitProviderEksPropertiesPodPropertiesContainersResources>,
    /// Security context for a job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<JobDefinitionInitProviderEksPropertiesPodPropertiesContainersSecurityContext>,
    /// Volume mounts for the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<JobDefinitionInitProviderEksPropertiesPodPropertiesContainersVolumeMounts>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderEksPropertiesPodPropertiesContainersEnv {
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value of the environment variable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderEksPropertiesPodPropertiesContainersResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<HashMap<String, String>>,
}

/// Security context for a job.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderEksPropertiesPodPropertiesContainersSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFileSystem")]
    pub read_only_root_file_system: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderEksPropertiesPodPropertiesContainersVolumeMounts {
    /// Path of the file or directory on the host to mount into containers on the pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    pub mount_path: Option<String>,
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderEksPropertiesPodPropertiesImagePullSecret {
    /// Unique identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderEksPropertiesPodPropertiesInitContainers {
    /// Array of arguments to the entrypoint. If this isn't specified, the CMD of the container image is used. This corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes. Environment variable references are expanded using the container's environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Entrypoint for the container. This isn't run within a shell. If this isn't specified, the ENTRYPOINT of the container image is used. Environment variable references are expanded using the container's environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Environment variables to pass to a container. See EKS Environment below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<JobDefinitionInitProviderEksPropertiesPodPropertiesInitContainersEnv>>,
    /// Docker image used to start the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// Image pull policy for the container. Supported values are Always, IfNotPresent, and Never.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<JobDefinitionInitProviderEksPropertiesPodPropertiesInitContainersResources>,
    /// Security context for a job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<JobDefinitionInitProviderEksPropertiesPodPropertiesInitContainersSecurityContext>,
    /// Volume mounts for the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<JobDefinitionInitProviderEksPropertiesPodPropertiesInitContainersVolumeMounts>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderEksPropertiesPodPropertiesInitContainersEnv {
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value of the environment variable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderEksPropertiesPodPropertiesInitContainersResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<HashMap<String, String>>,
}

/// Security context for a job.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderEksPropertiesPodPropertiesInitContainersSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFileSystem")]
    pub read_only_root_file_system: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderEksPropertiesPodPropertiesInitContainersVolumeMounts {
    /// Path of the file or directory on the host to mount into containers on the pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    pub mount_path: Option<String>,
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

/// Metadata about the Kubernetes pod.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderEksPropertiesPodPropertiesMetadata {
    /// Key-value pairs used to identify, sort, and organize cube resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderEksPropertiesPodPropertiesVolumes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDir")]
    pub empty_dir: Option<JobDefinitionInitProviderEksPropertiesPodPropertiesVolumesEmptyDir>,
    /// Path of the file or directory on the host to mount into containers on the pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    pub host_path: Option<JobDefinitionInitProviderEksPropertiesPodPropertiesVolumesHostPath>,
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<JobDefinitionInitProviderEksPropertiesPodPropertiesVolumesSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderEksPropertiesPodPropertiesVolumesEmptyDir {
    /// Medium to store the volume. The default value is an empty string, which uses the storage of the node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub medium: Option<String>,
    /// Maximum size of the volume. By default, there's no maximum size defined.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeLimit")]
    pub size_limit: Option<String>,
}

/// Path of the file or directory on the host to mount into containers on the pod.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderEksPropertiesPodPropertiesVolumesHostPath {
    /// Path of the file or directory on the host to mount into containers on the pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderEksPropertiesPodPropertiesVolumesSecret {
    /// Whether the secret or the secret's keys must be defined.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
    /// Name of the secret. The name must be allowed as a DNS subdomain name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// Retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of retry_strategy is 1.  Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderRetryStrategy {
    /// Number of times to move a job to the RUNNABLE status. You may specify between 1 and 10 attempts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempts: Option<f64>,
    /// Evaluate on exit conditions under which the job should be retried or failed. If this parameter is specified, then the attempts parameter must also be specified. You may specify up to 5 configuration blocks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluateOnExit")]
    pub evaluate_on_exit: Option<Vec<JobDefinitionInitProviderRetryStrategyEvaluateOnExit>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderRetryStrategyEvaluateOnExit {
    /// Action to take if all of the specified conditions are met. The values are not case sensitive. Valid values: retry, exit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    /// Glob pattern to match against the decimal representation of the exit code returned for a job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onExitCode")]
    pub on_exit_code: Option<String>,
    /// Glob pattern to match against the reason returned for a job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onReason")]
    pub on_reason: Option<String>,
    /// Glob pattern to match against the status reason returned for a job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onStatusReason")]
    pub on_status_reason: Option<String>,
}

/// Timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of timeout is 1. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionInitProviderTimeout {
    /// Time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is 60 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attemptDurationSeconds")]
    pub attempt_duration_seconds: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<JobDefinitionProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<JobDefinitionProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<JobDefinitionProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobDefinitionProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobDefinitionProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<JobDefinitionPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<JobDefinitionPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<JobDefinitionPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<JobDefinitionPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<JobDefinitionPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobDefinitionPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum JobDefinitionPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// JobDefinitionStatus defines the observed state of JobDefinition.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<JobDefinitionStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProvider {
    /// ARN of the job definition, includes revision (:#).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ARN without the revision number.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "arnPrefix")]
    pub arn_prefix: Option<String>,
    /// Valid container properties provided as a single valid JSON document. This parameter is only valid if the type parameter is container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "containerProperties")]
    pub container_properties: Option<String>,
    /// When updating a job definition a new revision is created. This parameter determines if the previous version is deregistered (INACTIVE) or left  ACTIVE. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deregisterOnNewRevision")]
    pub deregister_on_new_revision: Option<bool>,
    /// Valid ECS properties provided as a single valid JSON document. This parameter is only valid if the type parameter is container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ecsProperties")]
    pub ecs_properties: Option<String>,
    /// Valid eks properties. This parameter is only valid if the type parameter is container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eksProperties")]
    pub eks_properties: Option<JobDefinitionStatusAtProviderEksProperties>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Valid node properties provided as a single valid JSON document. This parameter is required if the type parameter is multinode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeProperties")]
    pub node_properties: Option<String>,
    /// Parameter substitution placeholders to set in the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<HashMap<String, String>>,
    /// Platform capabilities required by the job definition. If no value is specified, it defaults to EC2. To run the job on Fargate resources, specify FARGATE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "platformCapabilities")]
    pub platform_capabilities: Option<Vec<String>>,
    /// Whether to propagate the tags from the job definition to the corresponding Amazon ECS task. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "propagateTags")]
    pub propagate_tags: Option<bool>,
    /// Retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of retry_strategy is 1.  Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryStrategy")]
    pub retry_strategy: Option<JobDefinitionStatusAtProviderRetryStrategy>,
    /// Revision of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub revision: Option<f64>,
    /// Scheduling priority of the job definition. This only affects jobs in job queues with a fair share policy. Jobs with a higher scheduling priority are scheduled before jobs with a lower scheduling priority. Allowed values 0 through 9999.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schedulingPriority")]
    pub scheduling_priority: Option<f64>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// Timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of timeout is 1. Defined below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<JobDefinitionStatusAtProviderTimeout>,
    /// Type of job definition. Must be container or multinode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Valid eks properties. This parameter is only valid if the type parameter is container.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderEksProperties {
    /// Properties for the Kubernetes pod resources of a job. See pod_properties below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "podProperties")]
    pub pod_properties: Option<JobDefinitionStatusAtProviderEksPropertiesPodProperties>,
}

/// Properties for the Kubernetes pod resources of a job. See pod_properties below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderEksPropertiesPodProperties {
    /// Properties of the container that's used on the Amazon EKS pod. See containers below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub containers: Option<Vec<JobDefinitionStatusAtProviderEksPropertiesPodPropertiesContainers>>,
    /// DNS policy for the pod. The default value is ClusterFirst. If the host_network argument is not specified, the default is ClusterFirstWithHostNet. ClusterFirst indicates that any DNS query that does not match the configured cluster domain suffix is forwarded to the upstream nameserver inherited from the node. For more information, see Pod's DNS policy in the Kubernetes documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsPolicy")]
    pub dns_policy: Option<String>,
    /// Whether the pod uses the hosts' network IP address. The default value is true. Setting this to false enables the Kubernetes pod networking model. Most AWS Batch workloads are egress-only and don't require the overhead of IP allocation for each pod for incoming connections.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostNetwork")]
    pub host_network: Option<bool>,
    /// List of Kubernetes secret resources. See image_pull_secret below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullSecret")]
    pub image_pull_secret: Option<Vec<JobDefinitionStatusAtProviderEksPropertiesPodPropertiesImagePullSecret>>,
    /// Containers which run before application containers, always runs to completion, and must complete successfully before the next container starts. These containers are registered with the Amazon EKS Connector agent and persists the registration information in the Kubernetes backend data store. See containers below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initContainers")]
    pub init_containers: Option<Vec<JobDefinitionStatusAtProviderEksPropertiesPodPropertiesInitContainers>>,
    /// Metadata about the Kubernetes pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<JobDefinitionStatusAtProviderEksPropertiesPodPropertiesMetadata>,
    /// Name of the service account that's used to run the pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountName")]
    pub service_account_name: Option<String>,
    /// Indicates if the processes in a container are shared, or visible, to other containers in the same pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareProcessNamespace")]
    pub share_process_namespace: Option<bool>,
    /// Volumes for a job definition that uses Amazon EKS resources. AWS Batch supports emptyDir, hostPath, and secret volume types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub volumes: Option<Vec<JobDefinitionStatusAtProviderEksPropertiesPodPropertiesVolumes>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderEksPropertiesPodPropertiesContainers {
    /// Array of arguments to the entrypoint. If this isn't specified, the CMD of the container image is used. This corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes. Environment variable references are expanded using the container's environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Entrypoint for the container. This isn't run within a shell. If this isn't specified, the ENTRYPOINT of the container image is used. Environment variable references are expanded using the container's environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Environment variables to pass to a container. See EKS Environment below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<JobDefinitionStatusAtProviderEksPropertiesPodPropertiesContainersEnv>>,
    /// Docker image used to start the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// Image pull policy for the container. Supported values are Always, IfNotPresent, and Never.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    /// Name of the container. If the name isn't specified, the default name "Default" is used. Each container in a pod must have a unique name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<JobDefinitionStatusAtProviderEksPropertiesPodPropertiesContainersResources>,
    /// Security context for a job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<JobDefinitionStatusAtProviderEksPropertiesPodPropertiesContainersSecurityContext>,
    /// Volume mounts for the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<JobDefinitionStatusAtProviderEksPropertiesPodPropertiesContainersVolumeMounts>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderEksPropertiesPodPropertiesContainersEnv {
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value of the environment variable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderEksPropertiesPodPropertiesContainersResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<HashMap<String, String>>,
}

/// Security context for a job.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderEksPropertiesPodPropertiesContainersSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFileSystem")]
    pub read_only_root_file_system: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderEksPropertiesPodPropertiesContainersVolumeMounts {
    /// Path of the file or directory on the host to mount into containers on the pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    pub mount_path: Option<String>,
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderEksPropertiesPodPropertiesImagePullSecret {
    /// Unique identifier.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderEksPropertiesPodPropertiesInitContainers {
    /// Array of arguments to the entrypoint. If this isn't specified, the CMD of the container image is used. This corresponds to the args member in the Entrypoint portion of the Pod in Kubernetes. Environment variable references are expanded using the container's environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// Entrypoint for the container. This isn't run within a shell. If this isn't specified, the ENTRYPOINT of the container image is used. Environment variable references are expanded using the container's environment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub command: Option<Vec<String>>,
    /// Environment variables to pass to a container. See EKS Environment below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<Vec<JobDefinitionStatusAtProviderEksPropertiesPodPropertiesInitContainersEnv>>,
    /// Docker image used to start the container.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// Image pull policy for the container. Supported values are Always, IfNotPresent, and Never.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imagePullPolicy")]
    pub image_pull_policy: Option<String>,
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<JobDefinitionStatusAtProviderEksPropertiesPodPropertiesInitContainersResources>,
    /// Security context for a job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityContext")]
    pub security_context: Option<JobDefinitionStatusAtProviderEksPropertiesPodPropertiesInitContainersSecurityContext>,
    /// Volume mounts for the container.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "volumeMounts")]
    pub volume_mounts: Option<Vec<JobDefinitionStatusAtProviderEksPropertiesPodPropertiesInitContainersVolumeMounts>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderEksPropertiesPodPropertiesInitContainersEnv {
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value of the environment variable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Type and amount of resources to assign to a container. The supported resources include memory, cpu, and nvidia.com/gpu.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderEksPropertiesPodPropertiesInitContainersResources {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub limits: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub requests: Option<HashMap<String, String>>,
}

/// Security context for a job.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderEksPropertiesPodPropertiesInitContainersSecurityContext {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub privileged: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnlyRootFileSystem")]
    pub read_only_root_file_system: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsGroup")]
    pub run_as_group: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsNonRoot")]
    pub run_as_non_root: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runAsUser")]
    pub run_as_user: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderEksPropertiesPodPropertiesInitContainersVolumeMounts {
    /// Path of the file or directory on the host to mount into containers on the pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    pub mount_path: Option<String>,
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readOnly")]
    pub read_only: Option<bool>,
}

/// Metadata about the Kubernetes pod.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderEksPropertiesPodPropertiesMetadata {
    /// Key-value pairs used to identify, sort, and organize cube resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderEksPropertiesPodPropertiesVolumes {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "emptyDir")]
    pub empty_dir: Option<JobDefinitionStatusAtProviderEksPropertiesPodPropertiesVolumesEmptyDir>,
    /// Path of the file or directory on the host to mount into containers on the pod.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostPath")]
    pub host_path: Option<JobDefinitionStatusAtProviderEksPropertiesPodPropertiesVolumesHostPath>,
    /// Name of the job definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<JobDefinitionStatusAtProviderEksPropertiesPodPropertiesVolumesSecret>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderEksPropertiesPodPropertiesVolumesEmptyDir {
    /// Medium to store the volume. The default value is an empty string, which uses the storage of the node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub medium: Option<String>,
    /// Maximum size of the volume. By default, there's no maximum size defined.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sizeLimit")]
    pub size_limit: Option<String>,
}

/// Path of the file or directory on the host to mount into containers on the pod.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderEksPropertiesPodPropertiesVolumesHostPath {
    /// Path of the file or directory on the host to mount into containers on the pod.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderEksPropertiesPodPropertiesVolumesSecret {
    /// Whether the secret or the secret's keys must be defined.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub optional: Option<bool>,
    /// Name of the secret. The name must be allowed as a DNS subdomain name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretName")]
    pub secret_name: Option<String>,
}

/// Retry strategy to use for failed jobs that are submitted with this job definition. Maximum number of retry_strategy is 1.  Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderRetryStrategy {
    /// Number of times to move a job to the RUNNABLE status. You may specify between 1 and 10 attempts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub attempts: Option<f64>,
    /// Evaluate on exit conditions under which the job should be retried or failed. If this parameter is specified, then the attempts parameter must also be specified. You may specify up to 5 configuration blocks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluateOnExit")]
    pub evaluate_on_exit: Option<Vec<JobDefinitionStatusAtProviderRetryStrategyEvaluateOnExit>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderRetryStrategyEvaluateOnExit {
    /// Action to take if all of the specified conditions are met. The values are not case sensitive. Valid values: retry, exit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    /// Glob pattern to match against the decimal representation of the exit code returned for a job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onExitCode")]
    pub on_exit_code: Option<String>,
    /// Glob pattern to match against the reason returned for a job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onReason")]
    pub on_reason: Option<String>,
    /// Glob pattern to match against the status reason returned for a job.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onStatusReason")]
    pub on_status_reason: Option<String>,
}

/// Timeout for jobs so that if a job runs longer, AWS Batch terminates the job. Maximum number of timeout is 1. Defined below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct JobDefinitionStatusAtProviderTimeout {
    /// Time duration in seconds after which AWS Batch terminates your jobs if they have not finished. The minimum value for the timeout is 60 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attemptDurationSeconds")]
    pub attempt_duration_seconds: Option<f64>,
}


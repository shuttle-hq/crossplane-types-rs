// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ConnectAttachmentSpec defines the desired state of ConnectAttachment
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "networkmanager.aws.upbound.io", version = "v1beta2", kind = "ConnectAttachment", plural = "connectattachments")]
#[kube(status = "ConnectAttachmentStatus")]
pub struct ConnectAttachmentSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<ConnectAttachmentDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ConnectAttachmentForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<ConnectAttachmentInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<ConnectAttachmentProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<ConnectAttachmentPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<ConnectAttachmentWriteConnectionSecretToRef>,
}

/// ConnectAttachmentSpec defines the desired state of ConnectAttachment
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentForProvider {
    /// The ID of a core network where you want to create the attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreNetworkId")]
    pub core_network_id: Option<String>,
    /// Reference to a CoreNetwork in networkmanager to populate coreNetworkId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreNetworkIdRef")]
    pub core_network_id_ref: Option<ConnectAttachmentForProviderCoreNetworkIdRef>,
    /// Selector for a CoreNetwork in networkmanager to populate coreNetworkId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreNetworkIdSelector")]
    pub core_network_id_selector: Option<ConnectAttachmentForProviderCoreNetworkIdSelector>,
    /// The Region where the edge is located.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "edgeLocation")]
    pub edge_location: Option<String>,
    /// Reference to a VPCAttachment in networkmanager to populate edgeLocation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "edgeLocationRef")]
    pub edge_location_ref: Option<ConnectAttachmentForProviderEdgeLocationRef>,
    /// Selector for a VPCAttachment in networkmanager to populate edgeLocation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "edgeLocationSelector")]
    pub edge_location_selector: Option<ConnectAttachmentForProviderEdgeLocationSelector>,
    /// Options block. See options for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<ConnectAttachmentForProviderOptions>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The ID of the attachment between the two connections.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportAttachmentId")]
    pub transport_attachment_id: Option<String>,
    /// Reference to a VPCAttachment in networkmanager to populate transportAttachmentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportAttachmentIdRef")]
    pub transport_attachment_id_ref: Option<ConnectAttachmentForProviderTransportAttachmentIdRef>,
    /// Selector for a VPCAttachment in networkmanager to populate transportAttachmentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportAttachmentIdSelector")]
    pub transport_attachment_id_selector: Option<ConnectAttachmentForProviderTransportAttachmentIdSelector>,
}

/// Reference to a CoreNetwork in networkmanager to populate coreNetworkId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentForProviderCoreNetworkIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectAttachmentForProviderCoreNetworkIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentForProviderCoreNetworkIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectAttachmentForProviderCoreNetworkIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectAttachmentForProviderCoreNetworkIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentForProviderCoreNetworkIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentForProviderCoreNetworkIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CoreNetwork in networkmanager to populate coreNetworkId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentForProviderCoreNetworkIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectAttachmentForProviderCoreNetworkIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentForProviderCoreNetworkIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectAttachmentForProviderCoreNetworkIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectAttachmentForProviderCoreNetworkIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentForProviderCoreNetworkIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentForProviderCoreNetworkIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a VPCAttachment in networkmanager to populate edgeLocation.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentForProviderEdgeLocationRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectAttachmentForProviderEdgeLocationRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentForProviderEdgeLocationRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectAttachmentForProviderEdgeLocationRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectAttachmentForProviderEdgeLocationRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentForProviderEdgeLocationRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentForProviderEdgeLocationRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPCAttachment in networkmanager to populate edgeLocation.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentForProviderEdgeLocationSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectAttachmentForProviderEdgeLocationSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentForProviderEdgeLocationSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectAttachmentForProviderEdgeLocationSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectAttachmentForProviderEdgeLocationSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentForProviderEdgeLocationSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentForProviderEdgeLocationSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Options block. See options for more information.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentForProviderOptions {
    /// The protocol used for the attachment connection. Possible values are GRE and NO_ENCAP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}

/// Reference to a VPCAttachment in networkmanager to populate transportAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentForProviderTransportAttachmentIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectAttachmentForProviderTransportAttachmentIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentForProviderTransportAttachmentIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectAttachmentForProviderTransportAttachmentIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectAttachmentForProviderTransportAttachmentIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentForProviderTransportAttachmentIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentForProviderTransportAttachmentIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPCAttachment in networkmanager to populate transportAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentForProviderTransportAttachmentIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectAttachmentForProviderTransportAttachmentIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentForProviderTransportAttachmentIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectAttachmentForProviderTransportAttachmentIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectAttachmentForProviderTransportAttachmentIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentForProviderTransportAttachmentIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentForProviderTransportAttachmentIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentInitProvider {
    /// The ID of a core network where you want to create the attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreNetworkId")]
    pub core_network_id: Option<String>,
    /// Reference to a CoreNetwork in networkmanager to populate coreNetworkId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreNetworkIdRef")]
    pub core_network_id_ref: Option<ConnectAttachmentInitProviderCoreNetworkIdRef>,
    /// Selector for a CoreNetwork in networkmanager to populate coreNetworkId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreNetworkIdSelector")]
    pub core_network_id_selector: Option<ConnectAttachmentInitProviderCoreNetworkIdSelector>,
    /// The Region where the edge is located.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "edgeLocation")]
    pub edge_location: Option<String>,
    /// Reference to a VPCAttachment in networkmanager to populate edgeLocation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "edgeLocationRef")]
    pub edge_location_ref: Option<ConnectAttachmentInitProviderEdgeLocationRef>,
    /// Selector for a VPCAttachment in networkmanager to populate edgeLocation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "edgeLocationSelector")]
    pub edge_location_selector: Option<ConnectAttachmentInitProviderEdgeLocationSelector>,
    /// Options block. See options for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<ConnectAttachmentInitProviderOptions>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The ID of the attachment between the two connections.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportAttachmentId")]
    pub transport_attachment_id: Option<String>,
    /// Reference to a VPCAttachment in networkmanager to populate transportAttachmentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportAttachmentIdRef")]
    pub transport_attachment_id_ref: Option<ConnectAttachmentInitProviderTransportAttachmentIdRef>,
    /// Selector for a VPCAttachment in networkmanager to populate transportAttachmentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportAttachmentIdSelector")]
    pub transport_attachment_id_selector: Option<ConnectAttachmentInitProviderTransportAttachmentIdSelector>,
}

/// Reference to a CoreNetwork in networkmanager to populate coreNetworkId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentInitProviderCoreNetworkIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectAttachmentInitProviderCoreNetworkIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentInitProviderCoreNetworkIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectAttachmentInitProviderCoreNetworkIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectAttachmentInitProviderCoreNetworkIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentInitProviderCoreNetworkIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentInitProviderCoreNetworkIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CoreNetwork in networkmanager to populate coreNetworkId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentInitProviderCoreNetworkIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectAttachmentInitProviderCoreNetworkIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentInitProviderCoreNetworkIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectAttachmentInitProviderCoreNetworkIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectAttachmentInitProviderCoreNetworkIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentInitProviderCoreNetworkIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentInitProviderCoreNetworkIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a VPCAttachment in networkmanager to populate edgeLocation.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentInitProviderEdgeLocationRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectAttachmentInitProviderEdgeLocationRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentInitProviderEdgeLocationRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectAttachmentInitProviderEdgeLocationRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectAttachmentInitProviderEdgeLocationRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentInitProviderEdgeLocationRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentInitProviderEdgeLocationRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPCAttachment in networkmanager to populate edgeLocation.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentInitProviderEdgeLocationSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectAttachmentInitProviderEdgeLocationSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentInitProviderEdgeLocationSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectAttachmentInitProviderEdgeLocationSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectAttachmentInitProviderEdgeLocationSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentInitProviderEdgeLocationSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentInitProviderEdgeLocationSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Options block. See options for more information.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentInitProviderOptions {
    /// The protocol used for the attachment connection. Possible values are GRE and NO_ENCAP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}

/// Reference to a VPCAttachment in networkmanager to populate transportAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentInitProviderTransportAttachmentIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectAttachmentInitProviderTransportAttachmentIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentInitProviderTransportAttachmentIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectAttachmentInitProviderTransportAttachmentIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectAttachmentInitProviderTransportAttachmentIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentInitProviderTransportAttachmentIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentInitProviderTransportAttachmentIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPCAttachment in networkmanager to populate transportAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentInitProviderTransportAttachmentIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectAttachmentInitProviderTransportAttachmentIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentInitProviderTransportAttachmentIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectAttachmentInitProviderTransportAttachmentIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectAttachmentInitProviderTransportAttachmentIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentInitProviderTransportAttachmentIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentInitProviderTransportAttachmentIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectAttachmentProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectAttachmentProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectAttachmentProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ConnectAttachmentPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ConnectAttachmentPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectAttachmentPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectAttachmentPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectAttachmentPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectAttachmentPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ConnectAttachmentStatus defines the observed state of ConnectAttachment.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<ConnectAttachmentStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentStatusAtProvider {
    /// The ARN of the attachment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// The ID of the attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachmentId")]
    pub attachment_id: Option<String>,
    /// The policy rule number associated with the attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachmentPolicyRuleNumber")]
    pub attachment_policy_rule_number: Option<f64>,
    /// The type of attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachmentType")]
    pub attachment_type: Option<String>,
    /// The ARN of a core network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreNetworkArn")]
    pub core_network_arn: Option<String>,
    /// The ID of a core network where you want to create the attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "coreNetworkId")]
    pub core_network_id: Option<String>,
    /// The Region where the edge is located.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "edgeLocation")]
    pub edge_location: Option<String>,
    /// The ID of the attachment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Options block. See options for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<ConnectAttachmentStatusAtProviderOptions>,
    /// The ID of the attachment account owner.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerAccountId")]
    pub owner_account_id: Option<String>,
    /// The attachment resource ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArn")]
    pub resource_arn: Option<String>,
    /// The name of the segment attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "segmentName")]
    pub segment_name: Option<String>,
    /// The state of the attachment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// The ID of the attachment between the two connections.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transportAttachmentId")]
    pub transport_attachment_id: Option<String>,
}

/// Options block. See options for more information.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectAttachmentStatusAtProviderOptions {
    /// The protocol used for the attachment connection. Possible values are GRE and NO_ENCAP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
}


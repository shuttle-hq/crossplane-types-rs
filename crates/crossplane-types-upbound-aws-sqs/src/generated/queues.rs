// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// QueueSpec defines the desired state of Queue
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "sqs.aws.upbound.io", version = "v1beta1", kind = "Queue", plural = "queues")]
#[kube(status = "QueueStatus")]
pub struct QueueSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<QueueDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: QueueForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<QueueInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<QueueProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<QueuePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<QueueWriteConnectionSecretToRef>,
}

/// QueueSpec defines the desired state of Queue
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QueueDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueForProvider {
    /// Enables content-based deduplication for FIFO queues. For more information, see the related documentation
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentBasedDeduplication")]
    pub content_based_deduplication: Option<bool>,
    /// Specifies whether message deduplication occurs at the message group or queue level. Valid values are messageGroup and queue (default).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deduplicationScope")]
    pub deduplication_scope: Option<String>,
    /// The time in seconds that the delivery of all messages in the queue will be delayed. An integer from 0 to 900 (15 minutes). The default for this attribute is 0 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delaySeconds")]
    pub delay_seconds: Option<f64>,
    /// Boolean designating a FIFO queue. If not set, it defaults to false making it standard.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fifoQueue")]
    pub fifo_queue: Option<bool>,
    /// Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are perQueue (default) and perMessageGroupId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fifoThroughputLimit")]
    pub fifo_throughput_limit: Option<String>,
    /// The length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling AWS KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). The default is 300 (5 minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsDataKeyReusePeriodSeconds")]
    pub kms_data_key_reuse_period_seconds: Option<f64>,
    /// The ID of an AWS-managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see Key Terms.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsMasterKeyId")]
    pub kms_master_key_id: Option<String>,
    /// The limit of how many bytes a message can contain before Amazon SQS rejects it. An integer from 1024 bytes (1 KiB) up to 262144 bytes (256 KiB). The default for this attribute is 262144 (256 KiB).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxMessageSize")]
    pub max_message_size: Option<f64>,
    /// The number of seconds Amazon SQS retains a message. Integer representing seconds, from 60 (1 minute) to 1209600 (14 days). The default for this attribute is 345600 (4 days).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageRetentionSeconds")]
    pub message_retention_seconds: Option<f64>,
    /// The name of the queue. Queue names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1 and 80 characters long. For a FIFO (first-in-first-out) queue, the name must end with the .fifo suffix. Conflicts with name_prefix
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The JSON policy for the SQS queue.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
    /// The time for which a ReceiveMessage call will wait for a message to arrive (long polling) before returning. An integer from 0 to 20 (seconds). The default for this attribute is 0, meaning that the call will return immediately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "receiveWaitTimeSeconds")]
    pub receive_wait_time_seconds: Option<f64>,
    /// The JSON policy to set up the Dead Letter Queue redrive permission, see AWS docs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redriveAllowPolicy")]
    pub redrive_allow_policy: Option<String>,
    /// The JSON policy to set up the Dead Letter Queue, see AWS docs. Note: when specifying maxReceiveCount, you must specify it as an integer (5), and not a string ("5").
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redrivePolicy")]
    pub redrive_policy: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Boolean to enable server-side encryption (SSE) of message content with SQS-owned encryption keys. See Encryption at rest.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqsManagedSseEnabled")]
    pub sqs_managed_sse_enabled: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The visibility timeout for the queue. An integer from 0 to 43200 (12 hours). The default for this attribute is 30. For more information about visibility timeout, see AWS docs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "visibilityTimeoutSeconds")]
    pub visibility_timeout_seconds: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueInitProvider {
    /// Enables content-based deduplication for FIFO queues. For more information, see the related documentation
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentBasedDeduplication")]
    pub content_based_deduplication: Option<bool>,
    /// Specifies whether message deduplication occurs at the message group or queue level. Valid values are messageGroup and queue (default).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deduplicationScope")]
    pub deduplication_scope: Option<String>,
    /// The time in seconds that the delivery of all messages in the queue will be delayed. An integer from 0 to 900 (15 minutes). The default for this attribute is 0 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delaySeconds")]
    pub delay_seconds: Option<f64>,
    /// Boolean designating a FIFO queue. If not set, it defaults to false making it standard.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fifoQueue")]
    pub fifo_queue: Option<bool>,
    /// Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are perQueue (default) and perMessageGroupId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fifoThroughputLimit")]
    pub fifo_throughput_limit: Option<String>,
    /// The length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling AWS KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). The default is 300 (5 minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsDataKeyReusePeriodSeconds")]
    pub kms_data_key_reuse_period_seconds: Option<f64>,
    /// The ID of an AWS-managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see Key Terms.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsMasterKeyId")]
    pub kms_master_key_id: Option<String>,
    /// The limit of how many bytes a message can contain before Amazon SQS rejects it. An integer from 1024 bytes (1 KiB) up to 262144 bytes (256 KiB). The default for this attribute is 262144 (256 KiB).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxMessageSize")]
    pub max_message_size: Option<f64>,
    /// The number of seconds Amazon SQS retains a message. Integer representing seconds, from 60 (1 minute) to 1209600 (14 days). The default for this attribute is 345600 (4 days).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageRetentionSeconds")]
    pub message_retention_seconds: Option<f64>,
    /// The name of the queue. Queue names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1 and 80 characters long. For a FIFO (first-in-first-out) queue, the name must end with the .fifo suffix. Conflicts with name_prefix
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The JSON policy for the SQS queue.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
    /// The time for which a ReceiveMessage call will wait for a message to arrive (long polling) before returning. An integer from 0 to 20 (seconds). The default for this attribute is 0, meaning that the call will return immediately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "receiveWaitTimeSeconds")]
    pub receive_wait_time_seconds: Option<f64>,
    /// The JSON policy to set up the Dead Letter Queue redrive permission, see AWS docs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redriveAllowPolicy")]
    pub redrive_allow_policy: Option<String>,
    /// The JSON policy to set up the Dead Letter Queue, see AWS docs. Note: when specifying maxReceiveCount, you must specify it as an integer (5), and not a string ("5").
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redrivePolicy")]
    pub redrive_policy: Option<String>,
    /// Boolean to enable server-side encryption (SSE) of message content with SQS-owned encryption keys. See Encryption at rest.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqsManagedSseEnabled")]
    pub sqs_managed_sse_enabled: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The visibility timeout for the queue. An integer from 0 to 43200 (12 hours). The default for this attribute is 30. For more information about visibility timeout, see AWS docs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "visibilityTimeoutSeconds")]
    pub visibility_timeout_seconds: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<QueueProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<QueueProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<QueueProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QueueProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QueueProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueuePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<QueuePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<QueuePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueuePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<QueuePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueuePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<QueuePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<QueuePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QueuePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QueuePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueuePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// QueueStatus defines the observed state of Queue.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<QueueStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueStatusAtProvider {
    /// The ARN of the SQS queue
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Enables content-based deduplication for FIFO queues. For more information, see the related documentation
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentBasedDeduplication")]
    pub content_based_deduplication: Option<bool>,
    /// Specifies whether message deduplication occurs at the message group or queue level. Valid values are messageGroup and queue (default).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deduplicationScope")]
    pub deduplication_scope: Option<String>,
    /// The time in seconds that the delivery of all messages in the queue will be delayed. An integer from 0 to 900 (15 minutes). The default for this attribute is 0 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "delaySeconds")]
    pub delay_seconds: Option<f64>,
    /// Boolean designating a FIFO queue. If not set, it defaults to false making it standard.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fifoQueue")]
    pub fifo_queue: Option<bool>,
    /// Specifies whether the FIFO queue throughput quota applies to the entire queue or per message group. Valid values are perQueue (default) and perMessageGroupId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fifoThroughputLimit")]
    pub fifo_throughput_limit: Option<String>,
    /// The URL for the created Amazon SQS queue.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling AWS KMS again. An integer representing seconds, between 60 seconds (1 minute) and 86,400 seconds (24 hours). The default is 300 (5 minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsDataKeyReusePeriodSeconds")]
    pub kms_data_key_reuse_period_seconds: Option<f64>,
    /// The ID of an AWS-managed customer master key (CMK) for Amazon SQS or a custom CMK. For more information, see Key Terms.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsMasterKeyId")]
    pub kms_master_key_id: Option<String>,
    /// The limit of how many bytes a message can contain before Amazon SQS rejects it. An integer from 1024 bytes (1 KiB) up to 262144 bytes (256 KiB). The default for this attribute is 262144 (256 KiB).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxMessageSize")]
    pub max_message_size: Option<f64>,
    /// The number of seconds Amazon SQS retains a message. Integer representing seconds, from 60 (1 minute) to 1209600 (14 days). The default for this attribute is 345600 (4 days).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageRetentionSeconds")]
    pub message_retention_seconds: Option<f64>,
    /// The name of the queue. Queue names must be made up of only uppercase and lowercase ASCII letters, numbers, underscores, and hyphens, and must be between 1 and 80 characters long. For a FIFO (first-in-first-out) queue, the name must end with the .fifo suffix. Conflicts with name_prefix
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The JSON policy for the SQS queue.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<String>,
    /// The time for which a ReceiveMessage call will wait for a message to arrive (long polling) before returning. An integer from 0 to 20 (seconds). The default for this attribute is 0, meaning that the call will return immediately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "receiveWaitTimeSeconds")]
    pub receive_wait_time_seconds: Option<f64>,
    /// The JSON policy to set up the Dead Letter Queue redrive permission, see AWS docs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redriveAllowPolicy")]
    pub redrive_allow_policy: Option<String>,
    /// The JSON policy to set up the Dead Letter Queue, see AWS docs. Note: when specifying maxReceiveCount, you must specify it as an integer (5), and not a string ("5").
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redrivePolicy")]
    pub redrive_policy: Option<String>,
    /// Boolean to enable server-side encryption (SSE) of message content with SQS-owned encryption keys. See Encryption at rest.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqsManagedSseEnabled")]
    pub sqs_managed_sse_enabled: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// Same as id: The URL for the created Amazon SQS queue.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// The visibility timeout for the queue. An integer from 0 to 43200 (12 hours). The default for this attribute is 30. For more information about visibility timeout, see AWS docs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "visibilityTimeoutSeconds")]
    pub visibility_timeout_seconds: Option<f64>,
}


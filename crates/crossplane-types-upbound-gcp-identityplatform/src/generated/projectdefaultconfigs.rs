// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ProjectDefaultConfigSpec defines the desired state of ProjectDefaultConfig
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "identityplatform.gcp.upbound.io", version = "v1beta2", kind = "ProjectDefaultConfig", plural = "projectdefaultconfigs")]
#[kube(status = "ProjectDefaultConfigStatus")]
pub struct ProjectDefaultConfigSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<ProjectDefaultConfigDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ProjectDefaultConfigForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<ProjectDefaultConfigInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<ProjectDefaultConfigProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<ProjectDefaultConfigPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<ProjectDefaultConfigWriteConnectionSecretToRef>,
}

/// ProjectDefaultConfigSpec defines the desired state of ProjectDefaultConfig
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProjectDefaultConfigDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigForProvider {
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Configuration related to local sign in methods.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signIn")]
    pub sign_in: Option<ProjectDefaultConfigForProviderSignIn>,
}

/// Configuration related to local sign in methods.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigForProviderSignIn {
    /// Whether to allow more than one account to have the same email.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowDuplicateEmails")]
    pub allow_duplicate_emails: Option<bool>,
    /// Configuration options related to authenticating an anonymous user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub anonymous: Option<ProjectDefaultConfigForProviderSignInAnonymous>,
    /// Configuration options related to authenticating a user by their email address.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email: Option<ProjectDefaultConfigForProviderSignInEmail>,
    /// Configuration options related to authenticated a user by their phone number.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<ProjectDefaultConfigForProviderSignInPhoneNumber>,
}

/// Configuration options related to authenticating an anonymous user.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigForProviderSignInAnonymous {
    /// Whether phone number auth is enabled for the project or not.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Configuration options related to authenticating a user by their email address.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigForProviderSignInEmail {
    /// Whether phone number auth is enabled for the project or not.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Whether a password is required for email auth or not. If true, both an email and
    /// password must be provided to sign in. If false, a user may sign in via either
    /// email/password or email link.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordRequired")]
    pub password_required: Option<bool>,
}

/// Configuration options related to authenticated a user by their phone number.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigForProviderSignInPhoneNumber {
    /// Whether phone number auth is enabled for the project or not.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// A map of <test phone number, fake code> that can be used for phone auth testing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "testPhoneNumbers")]
    pub test_phone_numbers: Option<HashMap<String, String>>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigInitProvider {
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Configuration related to local sign in methods.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signIn")]
    pub sign_in: Option<ProjectDefaultConfigInitProviderSignIn>,
}

/// Configuration related to local sign in methods.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigInitProviderSignIn {
    /// Whether to allow more than one account to have the same email.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowDuplicateEmails")]
    pub allow_duplicate_emails: Option<bool>,
    /// Configuration options related to authenticating an anonymous user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub anonymous: Option<ProjectDefaultConfigInitProviderSignInAnonymous>,
    /// Configuration options related to authenticating a user by their email address.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email: Option<ProjectDefaultConfigInitProviderSignInEmail>,
    /// Configuration options related to authenticated a user by their phone number.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<ProjectDefaultConfigInitProviderSignInPhoneNumber>,
}

/// Configuration options related to authenticating an anonymous user.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigInitProviderSignInAnonymous {
    /// Whether phone number auth is enabled for the project or not.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Configuration options related to authenticating a user by their email address.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigInitProviderSignInEmail {
    /// Whether phone number auth is enabled for the project or not.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Whether a password is required for email auth or not. If true, both an email and
    /// password must be provided to sign in. If false, a user may sign in via either
    /// email/password or email link.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordRequired")]
    pub password_required: Option<bool>,
}

/// Configuration options related to authenticated a user by their phone number.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigInitProviderSignInPhoneNumber {
    /// Whether phone number auth is enabled for the project or not.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// A map of <test phone number, fake code> that can be used for phone auth testing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "testPhoneNumbers")]
    pub test_phone_numbers: Option<HashMap<String, String>>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ProjectDefaultConfigProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ProjectDefaultConfigProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ProjectDefaultConfigProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProjectDefaultConfigProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProjectDefaultConfigProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ProjectDefaultConfigPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ProjectDefaultConfigPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ProjectDefaultConfigPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ProjectDefaultConfigPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ProjectDefaultConfigPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProjectDefaultConfigPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProjectDefaultConfigPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ProjectDefaultConfigStatus defines the observed state of ProjectDefaultConfig.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<ProjectDefaultConfigStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigStatusAtProvider {
    /// an identifier for the resource with format {{project}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The name of the Config resource. Example: "projects/my-awesome-project/config"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Configuration related to local sign in methods.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signIn")]
    pub sign_in: Option<ProjectDefaultConfigStatusAtProviderSignIn>,
}

/// Configuration related to local sign in methods.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigStatusAtProviderSignIn {
    /// Whether to allow more than one account to have the same email.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowDuplicateEmails")]
    pub allow_duplicate_emails: Option<bool>,
    /// Configuration options related to authenticating an anonymous user.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub anonymous: Option<ProjectDefaultConfigStatusAtProviderSignInAnonymous>,
    /// Configuration options related to authenticating a user by their email address.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub email: Option<ProjectDefaultConfigStatusAtProviderSignInEmail>,
    /// (Output)
    /// Output only. Hash config information.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hashConfig")]
    pub hash_config: Option<Vec<ProjectDefaultConfigStatusAtProviderSignInHashConfig>>,
    /// Configuration options related to authenticated a user by their phone number.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "phoneNumber")]
    pub phone_number: Option<ProjectDefaultConfigStatusAtProviderSignInPhoneNumber>,
}

/// Configuration options related to authenticating an anonymous user.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigStatusAtProviderSignInAnonymous {
    /// Whether phone number auth is enabled for the project or not.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Configuration options related to authenticating a user by their email address.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigStatusAtProviderSignInEmail {
    /// Whether phone number auth is enabled for the project or not.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Whether a password is required for email auth or not. If true, both an email and
    /// password must be provided to sign in. If false, a user may sign in via either
    /// email/password or email link.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordRequired")]
    pub password_required: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigStatusAtProviderSignInHashConfig {
    /// (Output)
    /// Different password hash algorithms used in Identity Toolkit.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub algorithm: Option<String>,
    /// (Output)
    /// Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memoryCost")]
    pub memory_cost: Option<f64>,
    /// (Output)
    /// How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rounds: Option<f64>,
    /// (Output)
    /// Non-printable character to be inserted between the salt and plain text password in base64.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "saltSeparator")]
    pub salt_separator: Option<String>,
    /// (Output)
    /// Signer key in base64.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signerKey")]
    pub signer_key: Option<String>,
}

/// Configuration options related to authenticated a user by their phone number.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProjectDefaultConfigStatusAtProviderSignInPhoneNumber {
    /// Whether phone number auth is enabled for the project or not.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// A map of <test phone number, fake code> that can be used for phone auth testing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "testPhoneNumbers")]
    pub test_phone_numbers: Option<HashMap<String, String>>,
}


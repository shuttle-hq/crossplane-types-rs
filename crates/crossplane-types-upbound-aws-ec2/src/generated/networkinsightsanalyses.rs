// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// NetworkInsightsAnalysisSpec defines the desired state of NetworkInsightsAnalysis
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "ec2.aws.upbound.io", version = "v1beta1", kind = "NetworkInsightsAnalysis", plural = "networkinsightsanalyses")]
#[kube(status = "NetworkInsightsAnalysisStatus")]
pub struct NetworkInsightsAnalysisSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<NetworkInsightsAnalysisDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: NetworkInsightsAnalysisForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<NetworkInsightsAnalysisInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<NetworkInsightsAnalysisProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<NetworkInsightsAnalysisPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<NetworkInsightsAnalysisWriteConnectionSecretToRef>,
}

/// NetworkInsightsAnalysisSpec defines the desired state of NetworkInsightsAnalysis
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NetworkInsightsAnalysisDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisForProvider {
    /// A list of ARNs for resources the path must traverse.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterInArns")]
    pub filter_in_arns: Option<Vec<String>>,
    /// ID of the Network Insights Path to run an analysis on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInsightsPathId")]
    pub network_insights_path_id: Option<String>,
    /// Reference to a NetworkInsightsPath in ec2 to populate networkInsightsPathId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInsightsPathIdRef")]
    pub network_insights_path_id_ref: Option<NetworkInsightsAnalysisForProviderNetworkInsightsPathIdRef>,
    /// Selector for a NetworkInsightsPath in ec2 to populate networkInsightsPathId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInsightsPathIdSelector")]
    pub network_insights_path_id_selector: Option<NetworkInsightsAnalysisForProviderNetworkInsightsPathIdSelector>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// If enabled, the resource will wait for the Network Insights Analysis status to change to succeeded or failed. Setting this to false will skip the process. Default: true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "waitForCompletion")]
    pub wait_for_completion: Option<bool>,
}

/// Reference to a NetworkInsightsPath in ec2 to populate networkInsightsPathId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisForProviderNetworkInsightsPathIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NetworkInsightsAnalysisForProviderNetworkInsightsPathIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisForProviderNetworkInsightsPathIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NetworkInsightsAnalysisForProviderNetworkInsightsPathIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NetworkInsightsAnalysisForProviderNetworkInsightsPathIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NetworkInsightsAnalysisForProviderNetworkInsightsPathIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NetworkInsightsAnalysisForProviderNetworkInsightsPathIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a NetworkInsightsPath in ec2 to populate networkInsightsPathId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisForProviderNetworkInsightsPathIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NetworkInsightsAnalysisForProviderNetworkInsightsPathIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisForProviderNetworkInsightsPathIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NetworkInsightsAnalysisForProviderNetworkInsightsPathIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NetworkInsightsAnalysisForProviderNetworkInsightsPathIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NetworkInsightsAnalysisForProviderNetworkInsightsPathIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NetworkInsightsAnalysisForProviderNetworkInsightsPathIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisInitProvider {
    /// A list of ARNs for resources the path must traverse.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterInArns")]
    pub filter_in_arns: Option<Vec<String>>,
    /// ID of the Network Insights Path to run an analysis on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInsightsPathId")]
    pub network_insights_path_id: Option<String>,
    /// Reference to a NetworkInsightsPath in ec2 to populate networkInsightsPathId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInsightsPathIdRef")]
    pub network_insights_path_id_ref: Option<NetworkInsightsAnalysisInitProviderNetworkInsightsPathIdRef>,
    /// Selector for a NetworkInsightsPath in ec2 to populate networkInsightsPathId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInsightsPathIdSelector")]
    pub network_insights_path_id_selector: Option<NetworkInsightsAnalysisInitProviderNetworkInsightsPathIdSelector>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// If enabled, the resource will wait for the Network Insights Analysis status to change to succeeded or failed. Setting this to false will skip the process. Default: true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "waitForCompletion")]
    pub wait_for_completion: Option<bool>,
}

/// Reference to a NetworkInsightsPath in ec2 to populate networkInsightsPathId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisInitProviderNetworkInsightsPathIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NetworkInsightsAnalysisInitProviderNetworkInsightsPathIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisInitProviderNetworkInsightsPathIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NetworkInsightsAnalysisInitProviderNetworkInsightsPathIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NetworkInsightsAnalysisInitProviderNetworkInsightsPathIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NetworkInsightsAnalysisInitProviderNetworkInsightsPathIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NetworkInsightsAnalysisInitProviderNetworkInsightsPathIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a NetworkInsightsPath in ec2 to populate networkInsightsPathId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisInitProviderNetworkInsightsPathIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NetworkInsightsAnalysisInitProviderNetworkInsightsPathIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisInitProviderNetworkInsightsPathIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NetworkInsightsAnalysisInitProviderNetworkInsightsPathIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NetworkInsightsAnalysisInitProviderNetworkInsightsPathIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NetworkInsightsAnalysisInitProviderNetworkInsightsPathIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NetworkInsightsAnalysisInitProviderNetworkInsightsPathIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NetworkInsightsAnalysisProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NetworkInsightsAnalysisProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NetworkInsightsAnalysisProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NetworkInsightsAnalysisProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NetworkInsightsAnalysisProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<NetworkInsightsAnalysisPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<NetworkInsightsAnalysisPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NetworkInsightsAnalysisPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NetworkInsightsAnalysisPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NetworkInsightsAnalysisPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NetworkInsightsAnalysisPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NetworkInsightsAnalysisPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// NetworkInsightsAnalysisStatus defines the observed state of NetworkInsightsAnalysis.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<NetworkInsightsAnalysisStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProvider {
    /// Potential intermediate components of a feasible path. Described below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alternatePathHints")]
    pub alternate_path_hints: Option<Vec<NetworkInsightsAnalysisStatusAtProviderAlternatePathHints>>,
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Explanation codes for an unreachable path. See the AWS documentation for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub explanations: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanations>>,
    /// A list of ARNs for resources the path must traverse.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "filterInArns")]
    pub filter_in_arns: Option<Vec<String>>,
    /// The components in the path from source to destination. See the AWS documentation for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forwardPathComponents")]
    pub forward_path_components: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponents>>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// ID of the Network Insights Path to run an analysis on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInsightsPathId")]
    pub network_insights_path_id: Option<String>,
    /// Set to true if the destination was reachable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pathFound")]
    pub path_found: Option<bool>,
    /// The components in the path from destination to source. See the AWS documentation for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "returnPathComponents")]
    pub return_path_components: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponents>>,
    /// The date/time the analysis was started.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startDate")]
    pub start_date: Option<String>,
    /// The status of the analysis. succeeded means the analysis was completed, not that a path was found, for that see path_found.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// A message to provide more context when the status is failed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusMessage")]
    pub status_message: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// If enabled, the resource will wait for the Network Insights Analysis status to change to succeeded or failed. Setting this to false will skip the process. Default: true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "waitForCompletion")]
    pub wait_for_completion: Option<bool>,
    /// The warning message.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "warningMessage")]
    pub warning_message: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderAlternatePathHints {
    /// The Amazon Resource Name (ARN) of the component.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "componentArn")]
    pub component_arn: Option<String>,
    /// The ID of the component.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "componentId")]
    pub component_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanations {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub acl: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsAcl>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aclRule")]
    pub acl_rule: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsAclRule>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachedTo")]
    pub attached_to: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsAttachedTo>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZones")]
    pub availability_zones: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidrs: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "classicLoadBalancerListener")]
    pub classic_load_balancer_listener: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsClassicLoadBalancerListener>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsComponent>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerGateway")]
    pub customer_gateway: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsCustomerGateway>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsDestination>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationVpc")]
    pub destination_vpc: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsDestinationVpc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub direction: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticLoadBalancerListener")]
    pub elastic_load_balancer_listener: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsElasticLoadBalancerListener>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "explanationCode")]
    pub explanation_code: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressRouteTable")]
    pub ingress_route_table: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsIngressRouteTable>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "internetGateway")]
    pub internet_gateway: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsInternetGateway>>,
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerArn")]
    pub load_balancer_arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerListenerPort")]
    pub load_balancer_listener_port: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerTargetGroup")]
    pub load_balancer_target_group: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsLoadBalancerTargetGroup>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerTargetGroups")]
    pub load_balancer_target_groups: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsLoadBalancerTargetGroups>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerTargetPort")]
    pub load_balancer_target_port: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "missingComponent")]
    pub missing_component: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natGateway")]
    pub nat_gateway: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsNatGateway>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterface")]
    pub network_interface: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsNetworkInterface>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "packetField")]
    pub packet_field: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portRanges")]
    pub port_ranges: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsPortRanges>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixList")]
    pub prefix_list: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsPrefixList>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocols: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeTable")]
    pub route_table: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsRouteTable>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeTableRoute")]
    pub route_table_route: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsRouteTableRoute>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroup")]
    pub security_group: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsSecurityGroup>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupRule")]
    pub security_group_rule: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsSecurityGroupRule>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroups")]
    pub security_groups: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsSecurityGroups>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceVpc")]
    pub source_vpc: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsSourceVpc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnet: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsSubnet>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetRouteTable")]
    pub subnet_route_table: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsSubnetRouteTable>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGateway")]
    pub transit_gateway: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsTransitGateway>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachment")]
    pub transit_gateway_attachment: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsTransitGatewayAttachment>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTable")]
    pub transit_gateway_route_table: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsTransitGatewayRouteTable>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableRoute")]
    pub transit_gateway_route_table_route: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsTransitGatewayRouteTableRoute>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vpc: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsVpc>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcEndpoint")]
    pub vpc_endpoint: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsVpcEndpoint>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcPeeringConnection")]
    pub vpc_peering_connection: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsVpcPeeringConnection>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpnConnection")]
    pub vpn_connection: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsVpnConnection>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpnGateway")]
    pub vpn_gateway: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsVpnGateway>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsAcl {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsAclRule {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub egress: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portRange")]
    pub port_range: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsAclRulePortRange>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleAction")]
    pub rule_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleNumber")]
    pub rule_number: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsAclRulePortRange {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsAttachedTo {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsClassicLoadBalancerListener {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instancePort")]
    pub instance_port: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerPort")]
    pub load_balancer_port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsComponent {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsCustomerGateway {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsDestination {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsDestinationVpc {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsElasticLoadBalancerListener {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsIngressRouteTable {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsInternetGateway {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsLoadBalancerTargetGroup {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsLoadBalancerTargetGroups {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsNatGateway {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsNetworkInterface {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsPortRanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsPrefixList {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsRouteTable {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsRouteTableRoute {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCidr")]
    pub destination_cidr: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationPrefixListId")]
    pub destination_prefix_list_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressOnlyInternetGatewayId")]
    pub egress_only_internet_gateway_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gatewayId")]
    pub gateway_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceId")]
    pub instance_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natGatewayId")]
    pub nat_gateway_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaceId")]
    pub network_interface_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayId")]
    pub transit_gateway_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcPeeringConnectionId")]
    pub vpc_peering_connection_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsSecurityGroup {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsSecurityGroupRule {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub direction: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portRange")]
    pub port_range: Option<Vec<NetworkInsightsAnalysisStatusAtProviderExplanationsSecurityGroupRulePortRange>>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixListId")]
    pub prefix_list_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupId")]
    pub security_group_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsSecurityGroupRulePortRange {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsSecurityGroups {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsSourceVpc {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsSubnet {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsSubnetRouteTable {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsTransitGateway {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsTransitGatewayAttachment {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsTransitGatewayRouteTable {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsTransitGatewayRouteTableRoute {
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachmentId")]
    pub attachment_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCidr")]
    pub destination_cidr: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixListId")]
    pub prefix_list_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceId")]
    pub resource_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceType")]
    pub resource_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeOrigin")]
    pub route_origin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsVpc {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsVpcEndpoint {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsVpcPeeringConnection {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsVpnConnection {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderExplanationsVpnGateway {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponents {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aclRule")]
    pub acl_rule: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsAclRule>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalDetails")]
    pub additional_details: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsAdditionalDetails>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachedTo")]
    pub attached_to: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsAttachedTo>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsComponent>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationVpc")]
    pub destination_vpc: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsDestinationVpc>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inboundHeader")]
    pub inbound_header: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsInboundHeader>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outboundHeader")]
    pub outbound_header: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsOutboundHeader>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeTableRoute")]
    pub route_table_route: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsRouteTableRoute>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupRule")]
    pub security_group_rule: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsSecurityGroupRule>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sequenceNumber")]
    pub sequence_number: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceVpc")]
    pub source_vpc: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsSourceVpc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnet: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsSubnet>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGateway")]
    pub transit_gateway: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsTransitGateway>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableRoute")]
    pub transit_gateway_route_table_route: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsTransitGatewayRouteTableRoute>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vpc: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsVpc>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsAclRule {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub egress: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portRange")]
    pub port_range: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsAclRulePortRange>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleAction")]
    pub rule_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleNumber")]
    pub rule_number: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsAclRulePortRange {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsAdditionalDetails {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalDetailType")]
    pub additional_detail_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsAdditionalDetailsComponent>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsAdditionalDetailsComponent {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsAttachedTo {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsComponent {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsDestinationVpc {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsInboundHeader {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationAddresses")]
    pub destination_addresses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationPortRanges")]
    pub destination_port_ranges: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsInboundHeaderDestinationPortRanges>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceAddresses")]
    pub source_addresses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourcePortRanges")]
    pub source_port_ranges: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsInboundHeaderSourcePortRanges>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsInboundHeaderDestinationPortRanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsInboundHeaderSourcePortRanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsOutboundHeader {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationAddresses")]
    pub destination_addresses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationPortRanges")]
    pub destination_port_ranges: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsOutboundHeaderDestinationPortRanges>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceAddresses")]
    pub source_addresses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourcePortRanges")]
    pub source_port_ranges: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsOutboundHeaderSourcePortRanges>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsOutboundHeaderDestinationPortRanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsOutboundHeaderSourcePortRanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsRouteTableRoute {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCidr")]
    pub destination_cidr: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationPrefixListId")]
    pub destination_prefix_list_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressOnlyInternetGatewayId")]
    pub egress_only_internet_gateway_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gatewayId")]
    pub gateway_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceId")]
    pub instance_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natGatewayId")]
    pub nat_gateway_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaceId")]
    pub network_interface_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayId")]
    pub transit_gateway_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcPeeringConnectionId")]
    pub vpc_peering_connection_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsSecurityGroupRule {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub direction: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portRange")]
    pub port_range: Option<Vec<NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsSecurityGroupRulePortRange>>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixListId")]
    pub prefix_list_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupId")]
    pub security_group_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsSecurityGroupRulePortRange {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsSourceVpc {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsSubnet {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsTransitGateway {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsTransitGatewayRouteTableRoute {
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachmentId")]
    pub attachment_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCidr")]
    pub destination_cidr: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixListId")]
    pub prefix_list_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceId")]
    pub resource_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceType")]
    pub resource_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeOrigin")]
    pub route_origin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderForwardPathComponentsVpc {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponents {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aclRule")]
    pub acl_rule: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsAclRule>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalDetails")]
    pub additional_details: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsAdditionalDetails>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachedTo")]
    pub attached_to: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsAttachedTo>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsComponent>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationVpc")]
    pub destination_vpc: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsDestinationVpc>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inboundHeader")]
    pub inbound_header: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsInboundHeader>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outboundHeader")]
    pub outbound_header: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsOutboundHeader>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeTableRoute")]
    pub route_table_route: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsRouteTableRoute>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupRule")]
    pub security_group_rule: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsSecurityGroupRule>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sequenceNumber")]
    pub sequence_number: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceVpc")]
    pub source_vpc: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsSourceVpc>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnet: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsSubnet>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGateway")]
    pub transit_gateway: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsTransitGateway>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableRoute")]
    pub transit_gateway_route_table_route: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsTransitGatewayRouteTableRoute>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vpc: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsVpc>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsAclRule {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub egress: Option<bool>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portRange")]
    pub port_range: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsAclRulePortRange>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleAction")]
    pub rule_action: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleNumber")]
    pub rule_number: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsAclRulePortRange {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsAdditionalDetails {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "additionalDetailType")]
    pub additional_detail_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub component: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsAdditionalDetailsComponent>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsAdditionalDetailsComponent {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsAttachedTo {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsComponent {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsDestinationVpc {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsInboundHeader {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationAddresses")]
    pub destination_addresses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationPortRanges")]
    pub destination_port_ranges: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsInboundHeaderDestinationPortRanges>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceAddresses")]
    pub source_addresses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourcePortRanges")]
    pub source_port_ranges: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsInboundHeaderSourcePortRanges>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsInboundHeaderDestinationPortRanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsInboundHeaderSourcePortRanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsOutboundHeader {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationAddresses")]
    pub destination_addresses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationPortRanges")]
    pub destination_port_ranges: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsOutboundHeaderDestinationPortRanges>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceAddresses")]
    pub source_addresses: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourcePortRanges")]
    pub source_port_ranges: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsOutboundHeaderSourcePortRanges>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsOutboundHeaderDestinationPortRanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsOutboundHeaderSourcePortRanges {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsRouteTableRoute {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCidr")]
    pub destination_cidr: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationPrefixListId")]
    pub destination_prefix_list_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "egressOnlyInternetGatewayId")]
    pub egress_only_internet_gateway_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gatewayId")]
    pub gateway_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceId")]
    pub instance_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natGatewayId")]
    pub nat_gateway_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaceId")]
    pub network_interface_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub origin: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayId")]
    pub transit_gateway_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcPeeringConnectionId")]
    pub vpc_peering_connection_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsSecurityGroupRule {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidr: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub direction: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portRange")]
    pub port_range: Option<Vec<NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsSecurityGroupRulePortRange>>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixListId")]
    pub prefix_list_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupId")]
    pub security_group_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsSecurityGroupRulePortRange {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub from: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub to: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsSourceVpc {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsSubnet {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsTransitGateway {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsTransitGatewayRouteTableRoute {
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachmentId")]
    pub attachment_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCidr")]
    pub destination_cidr: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixListId")]
    pub prefix_list_id: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceId")]
    pub resource_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceType")]
    pub resource_type: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routeOrigin")]
    pub route_origin: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NetworkInsightsAnalysisStatusAtProviderReturnPathComponentsVpc {
    /// ARN of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ID of the Network Insights Analysis.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}


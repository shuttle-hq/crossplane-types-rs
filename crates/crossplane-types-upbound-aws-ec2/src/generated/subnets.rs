// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// SubnetSpec defines the desired state of Subnet
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "ec2.aws.upbound.io", version = "v1beta1", kind = "Subnet", plural = "subnets")]
#[kube(status = "SubnetStatus")]
pub struct SubnetSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<SubnetDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: SubnetForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<SubnetInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<SubnetProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<SubnetPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<SubnetWriteConnectionSecretToRef>,
}

/// SubnetSpec defines the desired state of Subnet
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetForProvider {
    /// Specify true to indicate
    /// that network interfaces created in the specified subnet should be
    /// assigned an IPv6 address. Default is false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "assignIpv6AddressOnCreation")]
    pub assign_ipv6_address_on_creation: Option<bool>,
    /// AZ for the subnet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    pub availability_zone: Option<String>,
    /// AZ ID of the subnet. This argument is not supported in all regions or partitions. If necessary, use availability_zone instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZoneId")]
    pub availability_zone_id: Option<String>,
    /// The IPv4 CIDR block for the subnet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlock")]
    pub cidr_block: Option<String>,
    /// The customer owned IPv4 address pool. Typically used with the map_customer_owned_ip_on_launch argument. The outpost_arn argument must be specified when configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerOwnedIpv4Pool")]
    pub customer_owned_ipv4_pool: Option<String>,
    /// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDns64")]
    pub enable_dns64: Option<bool>,
    /// Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableLniAtDeviceIndex")]
    pub enable_lni_at_device_index: Option<f64>,
    /// Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableResourceNameDnsARecordOnLaunch")]
    pub enable_resource_name_dns_a_record_on_launch: Option<bool>,
    /// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableResourceNameDnsAaaaRecordOnLaunch")]
    pub enable_resource_name_dns_aaaa_record_on_launch: Option<bool>,
    /// The IPv6 network range for the subnet,
    /// in CIDR notation. The subnet size must use a /64 prefix length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6CidrBlock")]
    pub ipv6_cidr_block: Option<String>,
    /// Indicates whether to create an IPv6-only subnet. Default: false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6Native")]
    pub ipv6_native: Option<bool>,
    /// Specify true to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The customer_owned_ipv4_pool and outpost_arn arguments must be specified when set to true. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mapCustomerOwnedIpOnLaunch")]
    pub map_customer_owned_ip_on_launch: Option<bool>,
    /// Specify true to indicate
    /// that instances launched into the subnet should be assigned
    /// a public IP address. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mapPublicIpOnLaunch")]
    pub map_public_ip_on_launch: Option<bool>,
    /// The Amazon Resource Name (ARN) of the Outpost.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outpostArn")]
    pub outpost_arn: Option<String>,
    /// The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: ip-name, resource-name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateDnsHostnameTypeOnLaunch")]
    pub private_dns_hostname_type_on_launch: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The VPC ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    pub vpc_id: Option<String>,
    /// Reference to a VPC in ec2 to populate vpcId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcIdRef")]
    pub vpc_id_ref: Option<SubnetForProviderVpcIdRef>,
    /// Selector for a VPC in ec2 to populate vpcId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcIdSelector")]
    pub vpc_id_selector: Option<SubnetForProviderVpcIdSelector>,
}

/// Reference to a VPC in ec2 to populate vpcId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetForProviderVpcIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SubnetForProviderVpcIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetForProviderVpcIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SubnetForProviderVpcIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SubnetForProviderVpcIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetForProviderVpcIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetForProviderVpcIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPC in ec2 to populate vpcId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetForProviderVpcIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SubnetForProviderVpcIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetForProviderVpcIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SubnetForProviderVpcIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SubnetForProviderVpcIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetForProviderVpcIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetForProviderVpcIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetInitProvider {
    /// Specify true to indicate
    /// that network interfaces created in the specified subnet should be
    /// assigned an IPv6 address. Default is false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "assignIpv6AddressOnCreation")]
    pub assign_ipv6_address_on_creation: Option<bool>,
    /// AZ for the subnet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    pub availability_zone: Option<String>,
    /// AZ ID of the subnet. This argument is not supported in all regions or partitions. If necessary, use availability_zone instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZoneId")]
    pub availability_zone_id: Option<String>,
    /// The IPv4 CIDR block for the subnet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlock")]
    pub cidr_block: Option<String>,
    /// The customer owned IPv4 address pool. Typically used with the map_customer_owned_ip_on_launch argument. The outpost_arn argument must be specified when configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerOwnedIpv4Pool")]
    pub customer_owned_ipv4_pool: Option<String>,
    /// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDns64")]
    pub enable_dns64: Option<bool>,
    /// Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableLniAtDeviceIndex")]
    pub enable_lni_at_device_index: Option<f64>,
    /// Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableResourceNameDnsARecordOnLaunch")]
    pub enable_resource_name_dns_a_record_on_launch: Option<bool>,
    /// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableResourceNameDnsAaaaRecordOnLaunch")]
    pub enable_resource_name_dns_aaaa_record_on_launch: Option<bool>,
    /// The IPv6 network range for the subnet,
    /// in CIDR notation. The subnet size must use a /64 prefix length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6CidrBlock")]
    pub ipv6_cidr_block: Option<String>,
    /// Indicates whether to create an IPv6-only subnet. Default: false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6Native")]
    pub ipv6_native: Option<bool>,
    /// Specify true to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The customer_owned_ipv4_pool and outpost_arn arguments must be specified when set to true. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mapCustomerOwnedIpOnLaunch")]
    pub map_customer_owned_ip_on_launch: Option<bool>,
    /// Specify true to indicate
    /// that instances launched into the subnet should be assigned
    /// a public IP address. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mapPublicIpOnLaunch")]
    pub map_public_ip_on_launch: Option<bool>,
    /// The Amazon Resource Name (ARN) of the Outpost.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outpostArn")]
    pub outpost_arn: Option<String>,
    /// The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: ip-name, resource-name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateDnsHostnameTypeOnLaunch")]
    pub private_dns_hostname_type_on_launch: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The VPC ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    pub vpc_id: Option<String>,
    /// Reference to a VPC in ec2 to populate vpcId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcIdRef")]
    pub vpc_id_ref: Option<SubnetInitProviderVpcIdRef>,
    /// Selector for a VPC in ec2 to populate vpcId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcIdSelector")]
    pub vpc_id_selector: Option<SubnetInitProviderVpcIdSelector>,
}

/// Reference to a VPC in ec2 to populate vpcId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetInitProviderVpcIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SubnetInitProviderVpcIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetInitProviderVpcIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SubnetInitProviderVpcIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SubnetInitProviderVpcIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetInitProviderVpcIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetInitProviderVpcIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPC in ec2 to populate vpcId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetInitProviderVpcIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SubnetInitProviderVpcIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetInitProviderVpcIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SubnetInitProviderVpcIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SubnetInitProviderVpcIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetInitProviderVpcIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetInitProviderVpcIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SubnetProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SubnetProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SubnetProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<SubnetPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<SubnetPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SubnetPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SubnetPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SubnetPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SubnetPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// SubnetStatus defines the observed state of Subnet.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<SubnetStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SubnetStatusAtProvider {
    /// The ARN of the subnet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Specify true to indicate
    /// that network interfaces created in the specified subnet should be
    /// assigned an IPv6 address. Default is false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "assignIpv6AddressOnCreation")]
    pub assign_ipv6_address_on_creation: Option<bool>,
    /// AZ for the subnet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    pub availability_zone: Option<String>,
    /// AZ ID of the subnet. This argument is not supported in all regions or partitions. If necessary, use availability_zone instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZoneId")]
    pub availability_zone_id: Option<String>,
    /// The IPv4 CIDR block for the subnet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlock")]
    pub cidr_block: Option<String>,
    /// The customer owned IPv4 address pool. Typically used with the map_customer_owned_ip_on_launch argument. The outpost_arn argument must be specified when configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerOwnedIpv4Pool")]
    pub customer_owned_ipv4_pool: Option<String>,
    /// Indicates whether DNS queries made to the Amazon-provided DNS Resolver in this subnet should return synthetic IPv6 addresses for IPv4-only destinations. Default: false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDns64")]
    pub enable_dns64: Option<bool>,
    /// Indicates the device position for local network interfaces in this subnet. For example, 1 indicates local network interfaces in this subnet are the secondary network interface (eth1). A local network interface cannot be the primary network interface (eth0).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableLniAtDeviceIndex")]
    pub enable_lni_at_device_index: Option<f64>,
    /// Indicates whether to respond to DNS queries for instance hostnames with DNS A records. Default: false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableResourceNameDnsARecordOnLaunch")]
    pub enable_resource_name_dns_a_record_on_launch: Option<bool>,
    /// Indicates whether to respond to DNS queries for instance hostnames with DNS AAAA records. Default: false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableResourceNameDnsAaaaRecordOnLaunch")]
    pub enable_resource_name_dns_aaaa_record_on_launch: Option<bool>,
    /// The ID of the subnet
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The IPv6 network range for the subnet,
    /// in CIDR notation. The subnet size must use a /64 prefix length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6CidrBlock")]
    pub ipv6_cidr_block: Option<String>,
    /// The association ID for the IPv6 CIDR block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6CidrBlockAssociationId")]
    pub ipv6_cidr_block_association_id: Option<String>,
    /// Indicates whether to create an IPv6-only subnet. Default: false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6Native")]
    pub ipv6_native: Option<bool>,
    /// Specify true to indicate that network interfaces created in the subnet should be assigned a customer owned IP address. The customer_owned_ipv4_pool and outpost_arn arguments must be specified when set to true. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mapCustomerOwnedIpOnLaunch")]
    pub map_customer_owned_ip_on_launch: Option<bool>,
    /// Specify true to indicate
    /// that instances launched into the subnet should be assigned
    /// a public IP address. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mapPublicIpOnLaunch")]
    pub map_public_ip_on_launch: Option<bool>,
    /// The Amazon Resource Name (ARN) of the Outpost.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outpostArn")]
    pub outpost_arn: Option<String>,
    /// The ID of the AWS account that owns the subnet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerId")]
    pub owner_id: Option<String>,
    /// The type of hostnames to assign to instances in the subnet at launch. For IPv6-only subnets, an instance DNS name must be based on the instance ID. For dual-stack and IPv4-only subnets, you can specify whether DNS names use the instance IPv4 address or the instance ID. Valid values: ip-name, resource-name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateDnsHostnameTypeOnLaunch")]
    pub private_dns_hostname_type_on_launch: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// The VPC ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    pub vpc_id: Option<String>,
}


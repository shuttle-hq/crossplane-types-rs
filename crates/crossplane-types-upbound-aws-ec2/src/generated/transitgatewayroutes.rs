// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// TransitGatewayRouteSpec defines the desired state of TransitGatewayRoute
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "ec2.aws.upbound.io", version = "v1beta1", kind = "TransitGatewayRoute", plural = "transitgatewayroutes")]
#[kube(status = "TransitGatewayRouteStatus")]
pub struct TransitGatewayRouteSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<TransitGatewayRouteDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: TransitGatewayRouteForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<TransitGatewayRouteInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<TransitGatewayRouteProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<TransitGatewayRoutePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<TransitGatewayRouteWriteConnectionSecretToRef>,
}

/// TransitGatewayRouteSpec defines the desired state of TransitGatewayRoute
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteForProvider {
    /// Indicates whether to drop traffic that matches this route (default to false).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blackhole: Option<bool>,
    /// IPv4 or IPv6 RFC1924 CIDR used for destination matches. Routing decisions are based on the most specific match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCidrBlock")]
    pub destination_cidr_block: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Identifier of EC2 Transit Gateway Attachment .
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentId")]
    pub transit_gateway_attachment_id: Option<String>,
    /// Reference to a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentIdRef")]
    pub transit_gateway_attachment_id_ref: Option<TransitGatewayRouteForProviderTransitGatewayAttachmentIdRef>,
    /// Selector for a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentIdSelector")]
    pub transit_gateway_attachment_id_selector: Option<TransitGatewayRouteForProviderTransitGatewayAttachmentIdSelector>,
    /// Identifier of EC2 Transit Gateway Route Table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableId")]
    pub transit_gateway_route_table_id: Option<String>,
    /// Reference to a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableIdRef")]
    pub transit_gateway_route_table_id_ref: Option<TransitGatewayRouteForProviderTransitGatewayRouteTableIdRef>,
    /// Selector for a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableIdSelector")]
    pub transit_gateway_route_table_id_selector: Option<TransitGatewayRouteForProviderTransitGatewayRouteTableIdSelector>,
}

/// Reference to a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteForProviderTransitGatewayAttachmentIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteForProviderTransitGatewayAttachmentIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteForProviderTransitGatewayAttachmentIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteForProviderTransitGatewayAttachmentIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteForProviderTransitGatewayAttachmentIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteForProviderTransitGatewayAttachmentIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteForProviderTransitGatewayAttachmentIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteForProviderTransitGatewayAttachmentIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteForProviderTransitGatewayAttachmentIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteForProviderTransitGatewayAttachmentIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteForProviderTransitGatewayAttachmentIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteForProviderTransitGatewayAttachmentIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteForProviderTransitGatewayAttachmentIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteForProviderTransitGatewayAttachmentIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteForProviderTransitGatewayRouteTableIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteForProviderTransitGatewayRouteTableIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteForProviderTransitGatewayRouteTableIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteForProviderTransitGatewayRouteTableIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteForProviderTransitGatewayRouteTableIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteForProviderTransitGatewayRouteTableIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteForProviderTransitGatewayRouteTableIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteForProviderTransitGatewayRouteTableIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteForProviderTransitGatewayRouteTableIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteForProviderTransitGatewayRouteTableIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteForProviderTransitGatewayRouteTableIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteForProviderTransitGatewayRouteTableIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteForProviderTransitGatewayRouteTableIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteForProviderTransitGatewayRouteTableIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteInitProvider {
    /// Indicates whether to drop traffic that matches this route (default to false).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blackhole: Option<bool>,
    /// IPv4 or IPv6 RFC1924 CIDR used for destination matches. Routing decisions are based on the most specific match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCidrBlock")]
    pub destination_cidr_block: Option<String>,
    /// Identifier of EC2 Transit Gateway Attachment .
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentId")]
    pub transit_gateway_attachment_id: Option<String>,
    /// Reference to a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentIdRef")]
    pub transit_gateway_attachment_id_ref: Option<TransitGatewayRouteInitProviderTransitGatewayAttachmentIdRef>,
    /// Selector for a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentIdSelector")]
    pub transit_gateway_attachment_id_selector: Option<TransitGatewayRouteInitProviderTransitGatewayAttachmentIdSelector>,
    /// Identifier of EC2 Transit Gateway Route Table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableId")]
    pub transit_gateway_route_table_id: Option<String>,
    /// Reference to a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableIdRef")]
    pub transit_gateway_route_table_id_ref: Option<TransitGatewayRouteInitProviderTransitGatewayRouteTableIdRef>,
    /// Selector for a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableIdSelector")]
    pub transit_gateway_route_table_id_selector: Option<TransitGatewayRouteInitProviderTransitGatewayRouteTableIdSelector>,
}

/// Reference to a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteInitProviderTransitGatewayAttachmentIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteInitProviderTransitGatewayAttachmentIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteInitProviderTransitGatewayAttachmentIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteInitProviderTransitGatewayAttachmentIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteInitProviderTransitGatewayAttachmentIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteInitProviderTransitGatewayAttachmentIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteInitProviderTransitGatewayAttachmentIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteInitProviderTransitGatewayAttachmentIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteInitProviderTransitGatewayAttachmentIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteInitProviderTransitGatewayAttachmentIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteInitProviderTransitGatewayAttachmentIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteInitProviderTransitGatewayAttachmentIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteInitProviderTransitGatewayAttachmentIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteInitProviderTransitGatewayAttachmentIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteInitProviderTransitGatewayRouteTableIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteInitProviderTransitGatewayRouteTableIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteInitProviderTransitGatewayRouteTableIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteInitProviderTransitGatewayRouteTableIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteInitProviderTransitGatewayRouteTableIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteInitProviderTransitGatewayRouteTableIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteInitProviderTransitGatewayRouteTableIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteInitProviderTransitGatewayRouteTableIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteInitProviderTransitGatewayRouteTableIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteInitProviderTransitGatewayRouteTableIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteInitProviderTransitGatewayRouteTableIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteInitProviderTransitGatewayRouteTableIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteInitProviderTransitGatewayRouteTableIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteInitProviderTransitGatewayRouteTableIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRoutePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<TransitGatewayRoutePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<TransitGatewayRoutePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRoutePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRoutePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRoutePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRoutePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRoutePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRoutePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRoutePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRoutePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// TransitGatewayRouteStatus defines the observed state of TransitGatewayRoute.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<TransitGatewayRouteStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteStatusAtProvider {
    /// Indicates whether to drop traffic that matches this route (default to false).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blackhole: Option<bool>,
    /// IPv4 or IPv6 RFC1924 CIDR used for destination matches. Routing decisions are based on the most specific match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationCidrBlock")]
    pub destination_cidr_block: Option<String>,
    /// EC2 Transit Gateway Route Table identifier combined with destination
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Identifier of EC2 Transit Gateway Attachment .
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentId")]
    pub transit_gateway_attachment_id: Option<String>,
    /// Identifier of EC2 Transit Gateway Route Table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableId")]
    pub transit_gateway_route_table_id: Option<String>,
}


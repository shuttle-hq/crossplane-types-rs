// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// DefaultNetworkACLSpec defines the desired state of DefaultNetworkACL
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "ec2.aws.upbound.io", version = "v1beta1", kind = "DefaultNetworkACL", plural = "defaultnetworkacls")]
#[kube(status = "DefaultNetworkACLStatus")]
pub struct DefaultNetworkACLSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<DefaultNetworkACLDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: DefaultNetworkACLForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<DefaultNetworkACLInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<DefaultNetworkACLProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<DefaultNetworkACLPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<DefaultNetworkACLWriteConnectionSecretToRef>,
}

/// DefaultNetworkACLSpec defines the desired state of DefaultNetworkACL
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLForProvider {
    /// Network ACL ID to manage. This attribute is exported from aws_vpc, or manually found via the AWS Console.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultNetworkAclId")]
    pub default_network_acl_id: Option<String>,
    /// Reference to a VPC in ec2 to populate defaultNetworkAclId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultNetworkAclIdRef")]
    pub default_network_acl_id_ref: Option<DefaultNetworkACLForProviderDefaultNetworkAclIdRef>,
    /// Selector for a VPC in ec2 to populate defaultNetworkAclId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultNetworkAclIdSelector")]
    pub default_network_acl_id_selector: Option<DefaultNetworkACLForProviderDefaultNetworkAclIdSelector>,
    /// Configuration block for an egress rule. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub egress: Option<Vec<DefaultNetworkACLForProviderEgress>>,
    /// Configuration block for an ingress rule. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingress: Option<Vec<DefaultNetworkACLForProviderIngress>>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdRefs")]
    pub subnet_id_refs: Option<Vec<DefaultNetworkACLForProviderSubnetIdRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdSelector")]
    pub subnet_id_selector: Option<DefaultNetworkACLForProviderSubnetIdSelector>,
    /// List of Subnet IDs to apply the ACL to. See the notes above on Managing Subnets in the Default Network ACL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// Reference to a VPC in ec2 to populate defaultNetworkAclId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLForProviderDefaultNetworkAclIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DefaultNetworkACLForProviderDefaultNetworkAclIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLForProviderDefaultNetworkAclIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DefaultNetworkACLForProviderDefaultNetworkAclIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DefaultNetworkACLForProviderDefaultNetworkAclIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLForProviderDefaultNetworkAclIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLForProviderDefaultNetworkAclIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPC in ec2 to populate defaultNetworkAclId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLForProviderDefaultNetworkAclIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DefaultNetworkACLForProviderDefaultNetworkAclIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLForProviderDefaultNetworkAclIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DefaultNetworkACLForProviderDefaultNetworkAclIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DefaultNetworkACLForProviderDefaultNetworkAclIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLForProviderDefaultNetworkAclIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLForProviderDefaultNetworkAclIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLForProviderEgress {
    /// The action to take.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    /// The CIDR block to match. This must be a valid network mask.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlock")]
    pub cidr_block: Option<String>,
    /// The from port to match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromPort")]
    pub from_port: Option<f64>,
    /// The ICMP type code to be used. Default 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpCode")]
    pub icmp_code: Option<f64>,
    /// The ICMP type to be used. Default 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpType")]
    pub icmp_type: Option<f64>,
    /// The IPv6 CIDR block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6CidrBlock")]
    pub ipv6_cidr_block: Option<String>,
    /// The protocol to match. If using the -1 'all' protocol, you must specify a from and to port of 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// The rule number. Used for ordering.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleNo")]
    pub rule_no: Option<f64>,
    /// The to port to match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toPort")]
    pub to_port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLForProviderIngress {
    /// The action to take.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    /// The CIDR block to match. This must be a valid network mask.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlock")]
    pub cidr_block: Option<String>,
    /// Reference to a DefaultVPC in ec2 to populate cidrBlock.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlockRef")]
    pub cidr_block_ref: Option<DefaultNetworkACLForProviderIngressCidrBlockRef>,
    /// Selector for a DefaultVPC in ec2 to populate cidrBlock.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlockSelector")]
    pub cidr_block_selector: Option<DefaultNetworkACLForProviderIngressCidrBlockSelector>,
    /// The from port to match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromPort")]
    pub from_port: Option<f64>,
    /// The ICMP type code to be used. Default 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpCode")]
    pub icmp_code: Option<f64>,
    /// The ICMP type to be used. Default 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpType")]
    pub icmp_type: Option<f64>,
    /// The IPv6 CIDR block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6CidrBlock")]
    pub ipv6_cidr_block: Option<String>,
    /// The protocol to match. If using the -1 'all' protocol, you must specify a from and to port of 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// The rule number. Used for ordering.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleNo")]
    pub rule_no: Option<f64>,
    /// The to port to match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toPort")]
    pub to_port: Option<f64>,
}

/// Reference to a DefaultVPC in ec2 to populate cidrBlock.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLForProviderIngressCidrBlockRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DefaultNetworkACLForProviderIngressCidrBlockRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLForProviderIngressCidrBlockRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DefaultNetworkACLForProviderIngressCidrBlockRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DefaultNetworkACLForProviderIngressCidrBlockRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLForProviderIngressCidrBlockRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLForProviderIngressCidrBlockRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a DefaultVPC in ec2 to populate cidrBlock.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLForProviderIngressCidrBlockSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DefaultNetworkACLForProviderIngressCidrBlockSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLForProviderIngressCidrBlockSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DefaultNetworkACLForProviderIngressCidrBlockSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DefaultNetworkACLForProviderIngressCidrBlockSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLForProviderIngressCidrBlockSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLForProviderIngressCidrBlockSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLForProviderSubnetIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DefaultNetworkACLForProviderSubnetIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLForProviderSubnetIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DefaultNetworkACLForProviderSubnetIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DefaultNetworkACLForProviderSubnetIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLForProviderSubnetIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLForProviderSubnetIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLForProviderSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DefaultNetworkACLForProviderSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLForProviderSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DefaultNetworkACLForProviderSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DefaultNetworkACLForProviderSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLForProviderSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLForProviderSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLInitProvider {
    /// Network ACL ID to manage. This attribute is exported from aws_vpc, or manually found via the AWS Console.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultNetworkAclId")]
    pub default_network_acl_id: Option<String>,
    /// Reference to a VPC in ec2 to populate defaultNetworkAclId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultNetworkAclIdRef")]
    pub default_network_acl_id_ref: Option<DefaultNetworkACLInitProviderDefaultNetworkAclIdRef>,
    /// Selector for a VPC in ec2 to populate defaultNetworkAclId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultNetworkAclIdSelector")]
    pub default_network_acl_id_selector: Option<DefaultNetworkACLInitProviderDefaultNetworkAclIdSelector>,
    /// Configuration block for an egress rule. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub egress: Option<Vec<DefaultNetworkACLInitProviderEgress>>,
    /// Configuration block for an ingress rule. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingress: Option<Vec<DefaultNetworkACLInitProviderIngress>>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdRefs")]
    pub subnet_id_refs: Option<Vec<DefaultNetworkACLInitProviderSubnetIdRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdSelector")]
    pub subnet_id_selector: Option<DefaultNetworkACLInitProviderSubnetIdSelector>,
    /// List of Subnet IDs to apply the ACL to. See the notes above on Managing Subnets in the Default Network ACL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// Reference to a VPC in ec2 to populate defaultNetworkAclId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLInitProviderDefaultNetworkAclIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DefaultNetworkACLInitProviderDefaultNetworkAclIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLInitProviderDefaultNetworkAclIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DefaultNetworkACLInitProviderDefaultNetworkAclIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DefaultNetworkACLInitProviderDefaultNetworkAclIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLInitProviderDefaultNetworkAclIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLInitProviderDefaultNetworkAclIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPC in ec2 to populate defaultNetworkAclId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLInitProviderDefaultNetworkAclIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DefaultNetworkACLInitProviderDefaultNetworkAclIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLInitProviderDefaultNetworkAclIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DefaultNetworkACLInitProviderDefaultNetworkAclIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DefaultNetworkACLInitProviderDefaultNetworkAclIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLInitProviderDefaultNetworkAclIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLInitProviderDefaultNetworkAclIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLInitProviderEgress {
    /// The action to take.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    /// The CIDR block to match. This must be a valid network mask.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlock")]
    pub cidr_block: Option<String>,
    /// The from port to match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromPort")]
    pub from_port: Option<f64>,
    /// The ICMP type code to be used. Default 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpCode")]
    pub icmp_code: Option<f64>,
    /// The ICMP type to be used. Default 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpType")]
    pub icmp_type: Option<f64>,
    /// The IPv6 CIDR block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6CidrBlock")]
    pub ipv6_cidr_block: Option<String>,
    /// The protocol to match. If using the -1 'all' protocol, you must specify a from and to port of 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// The rule number. Used for ordering.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleNo")]
    pub rule_no: Option<f64>,
    /// The to port to match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toPort")]
    pub to_port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLInitProviderIngress {
    /// The action to take.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    /// The CIDR block to match. This must be a valid network mask.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlock")]
    pub cidr_block: Option<String>,
    /// Reference to a DefaultVPC in ec2 to populate cidrBlock.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlockRef")]
    pub cidr_block_ref: Option<DefaultNetworkACLInitProviderIngressCidrBlockRef>,
    /// Selector for a DefaultVPC in ec2 to populate cidrBlock.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlockSelector")]
    pub cidr_block_selector: Option<DefaultNetworkACLInitProviderIngressCidrBlockSelector>,
    /// The from port to match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromPort")]
    pub from_port: Option<f64>,
    /// The ICMP type code to be used. Default 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpCode")]
    pub icmp_code: Option<f64>,
    /// The ICMP type to be used. Default 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpType")]
    pub icmp_type: Option<f64>,
    /// The IPv6 CIDR block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6CidrBlock")]
    pub ipv6_cidr_block: Option<String>,
    /// The protocol to match. If using the -1 'all' protocol, you must specify a from and to port of 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// The rule number. Used for ordering.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleNo")]
    pub rule_no: Option<f64>,
    /// The to port to match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toPort")]
    pub to_port: Option<f64>,
}

/// Reference to a DefaultVPC in ec2 to populate cidrBlock.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLInitProviderIngressCidrBlockRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DefaultNetworkACLInitProviderIngressCidrBlockRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLInitProviderIngressCidrBlockRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DefaultNetworkACLInitProviderIngressCidrBlockRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DefaultNetworkACLInitProviderIngressCidrBlockRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLInitProviderIngressCidrBlockRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLInitProviderIngressCidrBlockRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a DefaultVPC in ec2 to populate cidrBlock.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLInitProviderIngressCidrBlockSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DefaultNetworkACLInitProviderIngressCidrBlockSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLInitProviderIngressCidrBlockSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DefaultNetworkACLInitProviderIngressCidrBlockSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DefaultNetworkACLInitProviderIngressCidrBlockSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLInitProviderIngressCidrBlockSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLInitProviderIngressCidrBlockSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLInitProviderSubnetIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DefaultNetworkACLInitProviderSubnetIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLInitProviderSubnetIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DefaultNetworkACLInitProviderSubnetIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DefaultNetworkACLInitProviderSubnetIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLInitProviderSubnetIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLInitProviderSubnetIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLInitProviderSubnetIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DefaultNetworkACLInitProviderSubnetIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLInitProviderSubnetIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DefaultNetworkACLInitProviderSubnetIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DefaultNetworkACLInitProviderSubnetIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLInitProviderSubnetIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLInitProviderSubnetIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DefaultNetworkACLProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DefaultNetworkACLProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DefaultNetworkACLProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<DefaultNetworkACLPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<DefaultNetworkACLPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DefaultNetworkACLPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DefaultNetworkACLPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DefaultNetworkACLPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DefaultNetworkACLPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// DefaultNetworkACLStatus defines the observed state of DefaultNetworkACL.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<DefaultNetworkACLStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLStatusAtProvider {
    /// ARN of the Default Network ACL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Network ACL ID to manage. This attribute is exported from aws_vpc, or manually found via the AWS Console.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultNetworkAclId")]
    pub default_network_acl_id: Option<String>,
    /// Configuration block for an egress rule. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub egress: Option<Vec<DefaultNetworkACLStatusAtProviderEgress>>,
    /// ID of the Default Network ACL
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Configuration block for an ingress rule. Detailed below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ingress: Option<Vec<DefaultNetworkACLStatusAtProviderIngress>>,
    /// ID of the AWS account that owns the Default Network ACL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerId")]
    pub owner_id: Option<String>,
    /// List of Subnet IDs to apply the ACL to. See the notes above on Managing Subnets in the Default Network ACL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// ID of the associated VPC
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    pub vpc_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLStatusAtProviderEgress {
    /// The action to take.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    /// The CIDR block to match. This must be a valid network mask.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlock")]
    pub cidr_block: Option<String>,
    /// The from port to match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromPort")]
    pub from_port: Option<f64>,
    /// The ICMP type code to be used. Default 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpCode")]
    pub icmp_code: Option<f64>,
    /// The ICMP type to be used. Default 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpType")]
    pub icmp_type: Option<f64>,
    /// The IPv6 CIDR block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6CidrBlock")]
    pub ipv6_cidr_block: Option<String>,
    /// The protocol to match. If using the -1 'all' protocol, you must specify a from and to port of 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// The rule number. Used for ordering.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleNo")]
    pub rule_no: Option<f64>,
    /// The to port to match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toPort")]
    pub to_port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DefaultNetworkACLStatusAtProviderIngress {
    /// The action to take.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
    /// The CIDR block to match. This must be a valid network mask.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrBlock")]
    pub cidr_block: Option<String>,
    /// The from port to match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fromPort")]
    pub from_port: Option<f64>,
    /// The ICMP type code to be used. Default 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpCode")]
    pub icmp_code: Option<f64>,
    /// The ICMP type to be used. Default 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icmpType")]
    pub icmp_type: Option<f64>,
    /// The IPv6 CIDR block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipv6CidrBlock")]
    pub ipv6_cidr_block: Option<String>,
    /// The protocol to match. If using the -1 'all' protocol, you must specify a from and to port of 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// The rule number. Used for ordering.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleNo")]
    pub rule_no: Option<f64>,
    /// The to port to match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "toPort")]
    pub to_port: Option<f64>,
}


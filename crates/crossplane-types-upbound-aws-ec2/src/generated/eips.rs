// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// EIPSpec defines the desired state of EIP
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "ec2.aws.upbound.io", version = "v1beta1", kind = "EIP", plural = "eips")]
#[kube(status = "EIPStatus")]
pub struct EIPSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<EIPDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: EIPForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<EIPInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<EIPProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<EIPPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<EIPWriteConnectionSecretToRef>,
}

/// EIPSpec defines the desired state of EIP
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPForProvider {
    /// IP address from an EC2 BYOIP pool. This option is only available for VPC EIPs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// User-specified primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associateWithPrivateIp")]
    pub associate_with_private_ip: Option<String>,
    /// ID  of a customer-owned address pool. For more on customer owned IP addressed check out Customer-owned IP addresses guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerOwnedIpv4Pool")]
    pub customer_owned_ipv4_pool: Option<String>,
    /// Indicates if this EIP is for use in VPC (vpc).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// EC2 instance ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instance: Option<String>,
    /// Reference to a Instance in ec2 to populate instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceRef")]
    pub instance_ref: Option<EIPForProviderInstanceRef>,
    /// Selector for a Instance in ec2 to populate instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceSelector")]
    pub instance_selector: Option<EIPForProviderInstanceSelector>,
    /// The ID of an IPAM pool which has an Amazon-provided or BYOIP public IPv4 CIDR provisioned to it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipamPoolId")]
    pub ipam_pool_id: Option<String>,
    /// Location from which the IP address is advertised. Use this parameter to limit the address to this location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkBorderGroup")]
    pub network_border_group: Option<String>,
    /// Network interface ID to associate with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterface")]
    pub network_interface: Option<String>,
    /// Reference to a NetworkInterface in ec2 to populate networkInterface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaceRef")]
    pub network_interface_ref: Option<EIPForProviderNetworkInterfaceRef>,
    /// Selector for a NetworkInterface in ec2 to populate networkInterface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaceSelector")]
    pub network_interface_selector: Option<EIPForProviderNetworkInterfaceSelector>,
    /// EC2 IPv4 address pool identifier or amazon.
    /// This option is only available for VPC EIPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicIpv4Pool")]
    pub public_ipv4_pool: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Boolean if the EIP is in a VPC or not. Use domain instead.
    /// Defaults to true unless the region supports EC2-Classic.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vpc: Option<bool>,
}

/// Reference to a Instance in ec2 to populate instance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPForProviderInstanceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EIPForProviderInstanceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPForProviderInstanceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EIPForProviderInstanceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EIPForProviderInstanceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPForProviderInstanceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPForProviderInstanceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Instance in ec2 to populate instance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPForProviderInstanceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EIPForProviderInstanceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPForProviderInstanceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EIPForProviderInstanceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EIPForProviderInstanceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPForProviderInstanceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPForProviderInstanceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a NetworkInterface in ec2 to populate networkInterface.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPForProviderNetworkInterfaceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EIPForProviderNetworkInterfaceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPForProviderNetworkInterfaceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EIPForProviderNetworkInterfaceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EIPForProviderNetworkInterfaceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPForProviderNetworkInterfaceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPForProviderNetworkInterfaceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a NetworkInterface in ec2 to populate networkInterface.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPForProviderNetworkInterfaceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EIPForProviderNetworkInterfaceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPForProviderNetworkInterfaceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EIPForProviderNetworkInterfaceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EIPForProviderNetworkInterfaceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPForProviderNetworkInterfaceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPForProviderNetworkInterfaceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPInitProvider {
    /// IP address from an EC2 BYOIP pool. This option is only available for VPC EIPs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// User-specified primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associateWithPrivateIp")]
    pub associate_with_private_ip: Option<String>,
    /// ID  of a customer-owned address pool. For more on customer owned IP addressed check out Customer-owned IP addresses guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerOwnedIpv4Pool")]
    pub customer_owned_ipv4_pool: Option<String>,
    /// Indicates if this EIP is for use in VPC (vpc).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// EC2 instance ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instance: Option<String>,
    /// Reference to a Instance in ec2 to populate instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceRef")]
    pub instance_ref: Option<EIPInitProviderInstanceRef>,
    /// Selector for a Instance in ec2 to populate instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceSelector")]
    pub instance_selector: Option<EIPInitProviderInstanceSelector>,
    /// The ID of an IPAM pool which has an Amazon-provided or BYOIP public IPv4 CIDR provisioned to it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipamPoolId")]
    pub ipam_pool_id: Option<String>,
    /// Location from which the IP address is advertised. Use this parameter to limit the address to this location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkBorderGroup")]
    pub network_border_group: Option<String>,
    /// Network interface ID to associate with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterface")]
    pub network_interface: Option<String>,
    /// Reference to a NetworkInterface in ec2 to populate networkInterface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaceRef")]
    pub network_interface_ref: Option<EIPInitProviderNetworkInterfaceRef>,
    /// Selector for a NetworkInterface in ec2 to populate networkInterface.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterfaceSelector")]
    pub network_interface_selector: Option<EIPInitProviderNetworkInterfaceSelector>,
    /// EC2 IPv4 address pool identifier or amazon.
    /// This option is only available for VPC EIPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicIpv4Pool")]
    pub public_ipv4_pool: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Boolean if the EIP is in a VPC or not. Use domain instead.
    /// Defaults to true unless the region supports EC2-Classic.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vpc: Option<bool>,
}

/// Reference to a Instance in ec2 to populate instance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPInitProviderInstanceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EIPInitProviderInstanceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPInitProviderInstanceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EIPInitProviderInstanceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EIPInitProviderInstanceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPInitProviderInstanceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPInitProviderInstanceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Instance in ec2 to populate instance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPInitProviderInstanceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EIPInitProviderInstanceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPInitProviderInstanceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EIPInitProviderInstanceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EIPInitProviderInstanceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPInitProviderInstanceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPInitProviderInstanceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a NetworkInterface in ec2 to populate networkInterface.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPInitProviderNetworkInterfaceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EIPInitProviderNetworkInterfaceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPInitProviderNetworkInterfaceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EIPInitProviderNetworkInterfaceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EIPInitProviderNetworkInterfaceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPInitProviderNetworkInterfaceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPInitProviderNetworkInterfaceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a NetworkInterface in ec2 to populate networkInterface.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPInitProviderNetworkInterfaceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EIPInitProviderNetworkInterfaceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPInitProviderNetworkInterfaceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EIPInitProviderNetworkInterfaceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EIPInitProviderNetworkInterfaceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPInitProviderNetworkInterfaceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPInitProviderNetworkInterfaceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EIPProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EIPProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EIPProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<EIPPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<EIPPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EIPPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EIPPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EIPPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EIPPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// EIPStatus defines the observed state of EIP.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<EIPStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EIPStatusAtProvider {
    /// IP address from an EC2 BYOIP pool. This option is only available for VPC EIPs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// ID that AWS assigns to represent the allocation of the Elastic IP address for use with instances in a VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocationId")]
    pub allocation_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// User-specified primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associateWithPrivateIp")]
    pub associate_with_private_ip: Option<String>,
    /// ID representing the association of the address with an instance in a VPC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "associationId")]
    pub association_id: Option<String>,
    /// Carrier IP address.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "carrierIp")]
    pub carrier_ip: Option<String>,
    /// Customer owned IP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerOwnedIp")]
    pub customer_owned_ip: Option<String>,
    /// ID  of a customer-owned address pool. For more on customer owned IP addressed check out Customer-owned IP addresses guide.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerOwnedIpv4Pool")]
    pub customer_owned_ipv4_pool: Option<String>,
    /// Indicates if this EIP is for use in VPC (vpc).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// Contains the EIP allocation ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// EC2 instance ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instance: Option<String>,
    /// The ID of an IPAM pool which has an Amazon-provided or BYOIP public IPv4 CIDR provisioned to it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipamPoolId")]
    pub ipam_pool_id: Option<String>,
    /// Location from which the IP address is advertised. Use this parameter to limit the address to this location.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkBorderGroup")]
    pub network_border_group: Option<String>,
    /// Network interface ID to associate with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkInterface")]
    pub network_interface: Option<String>,
    /// The Private DNS associated with the Elastic IP address (if in VPC).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateDns")]
    pub private_dns: Option<String>,
    /// Contains the private IP address (if in VPC).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIp")]
    pub private_ip: Option<String>,
    /// The DNS pointer (PTR) record for the IP address.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ptrRecord")]
    pub ptr_record: Option<String>,
    /// Public DNS associated with the Elastic IP address.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicDns")]
    pub public_dns: Option<String>,
    /// Contains the public IP address.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicIp")]
    pub public_ip: Option<String>,
    /// EC2 IPv4 address pool identifier or amazon.
    /// This option is only available for VPC EIPs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicIpv4Pool")]
    pub public_ipv4_pool: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// Boolean if the EIP is in a VPC or not. Use domain instead.
    /// Defaults to true unless the region supports EC2-Classic.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub vpc: Option<bool>,
}


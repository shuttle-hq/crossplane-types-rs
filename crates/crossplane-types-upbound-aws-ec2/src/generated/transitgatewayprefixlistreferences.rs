// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// TransitGatewayPrefixListReferenceSpec defines the desired state of TransitGatewayPrefixListReference
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "ec2.aws.upbound.io", version = "v1beta1", kind = "TransitGatewayPrefixListReference", plural = "transitgatewayprefixlistreferences")]
#[kube(status = "TransitGatewayPrefixListReferenceStatus")]
pub struct TransitGatewayPrefixListReferenceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<TransitGatewayPrefixListReferenceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: TransitGatewayPrefixListReferenceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<TransitGatewayPrefixListReferenceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<TransitGatewayPrefixListReferenceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<TransitGatewayPrefixListReferencePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<TransitGatewayPrefixListReferenceWriteConnectionSecretToRef>,
}

/// TransitGatewayPrefixListReferenceSpec defines the desired state of TransitGatewayPrefixListReference
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceForProvider {
    /// Indicates whether to drop traffic that matches the Prefix List. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blackhole: Option<bool>,
    /// Identifier of EC2 Prefix List.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixListId")]
    pub prefix_list_id: Option<String>,
    /// Reference to a ManagedPrefixList in ec2 to populate prefixListId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixListIdRef")]
    pub prefix_list_id_ref: Option<TransitGatewayPrefixListReferenceForProviderPrefixListIdRef>,
    /// Selector for a ManagedPrefixList in ec2 to populate prefixListId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixListIdSelector")]
    pub prefix_list_id_selector: Option<TransitGatewayPrefixListReferenceForProviderPrefixListIdSelector>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Identifier of EC2 Transit Gateway Attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentId")]
    pub transit_gateway_attachment_id: Option<String>,
    /// Reference to a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentIdRef")]
    pub transit_gateway_attachment_id_ref: Option<TransitGatewayPrefixListReferenceForProviderTransitGatewayAttachmentIdRef>,
    /// Selector for a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentIdSelector")]
    pub transit_gateway_attachment_id_selector: Option<TransitGatewayPrefixListReferenceForProviderTransitGatewayAttachmentIdSelector>,
    /// Identifier of EC2 Transit Gateway Route Table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableId")]
    pub transit_gateway_route_table_id: Option<String>,
    /// Reference to a TransitGateway in ec2 to populate transitGatewayRouteTableId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableIdRef")]
    pub transit_gateway_route_table_id_ref: Option<TransitGatewayPrefixListReferenceForProviderTransitGatewayRouteTableIdRef>,
    /// Selector for a TransitGateway in ec2 to populate transitGatewayRouteTableId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableIdSelector")]
    pub transit_gateway_route_table_id_selector: Option<TransitGatewayPrefixListReferenceForProviderTransitGatewayRouteTableIdSelector>,
}

/// Reference to a ManagedPrefixList in ec2 to populate prefixListId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceForProviderPrefixListIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPrefixListReferenceForProviderPrefixListIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceForProviderPrefixListIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPrefixListReferenceForProviderPrefixListIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPrefixListReferenceForProviderPrefixListIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceForProviderPrefixListIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceForProviderPrefixListIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ManagedPrefixList in ec2 to populate prefixListId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceForProviderPrefixListIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPrefixListReferenceForProviderPrefixListIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceForProviderPrefixListIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPrefixListReferenceForProviderPrefixListIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPrefixListReferenceForProviderPrefixListIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceForProviderPrefixListIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceForProviderPrefixListIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceForProviderTransitGatewayAttachmentIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPrefixListReferenceForProviderTransitGatewayAttachmentIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceForProviderTransitGatewayAttachmentIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPrefixListReferenceForProviderTransitGatewayAttachmentIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPrefixListReferenceForProviderTransitGatewayAttachmentIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceForProviderTransitGatewayAttachmentIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceForProviderTransitGatewayAttachmentIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceForProviderTransitGatewayAttachmentIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPrefixListReferenceForProviderTransitGatewayAttachmentIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceForProviderTransitGatewayAttachmentIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPrefixListReferenceForProviderTransitGatewayAttachmentIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPrefixListReferenceForProviderTransitGatewayAttachmentIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceForProviderTransitGatewayAttachmentIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceForProviderTransitGatewayAttachmentIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a TransitGateway in ec2 to populate transitGatewayRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceForProviderTransitGatewayRouteTableIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPrefixListReferenceForProviderTransitGatewayRouteTableIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceForProviderTransitGatewayRouteTableIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPrefixListReferenceForProviderTransitGatewayRouteTableIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPrefixListReferenceForProviderTransitGatewayRouteTableIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceForProviderTransitGatewayRouteTableIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceForProviderTransitGatewayRouteTableIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGateway in ec2 to populate transitGatewayRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceForProviderTransitGatewayRouteTableIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPrefixListReferenceForProviderTransitGatewayRouteTableIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceForProviderTransitGatewayRouteTableIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPrefixListReferenceForProviderTransitGatewayRouteTableIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPrefixListReferenceForProviderTransitGatewayRouteTableIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceForProviderTransitGatewayRouteTableIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceForProviderTransitGatewayRouteTableIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceInitProvider {
    /// Indicates whether to drop traffic that matches the Prefix List. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blackhole: Option<bool>,
    /// Identifier of EC2 Prefix List.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixListId")]
    pub prefix_list_id: Option<String>,
    /// Reference to a ManagedPrefixList in ec2 to populate prefixListId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixListIdRef")]
    pub prefix_list_id_ref: Option<TransitGatewayPrefixListReferenceInitProviderPrefixListIdRef>,
    /// Selector for a ManagedPrefixList in ec2 to populate prefixListId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixListIdSelector")]
    pub prefix_list_id_selector: Option<TransitGatewayPrefixListReferenceInitProviderPrefixListIdSelector>,
    /// Identifier of EC2 Transit Gateway Attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentId")]
    pub transit_gateway_attachment_id: Option<String>,
    /// Reference to a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentIdRef")]
    pub transit_gateway_attachment_id_ref: Option<TransitGatewayPrefixListReferenceInitProviderTransitGatewayAttachmentIdRef>,
    /// Selector for a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentIdSelector")]
    pub transit_gateway_attachment_id_selector: Option<TransitGatewayPrefixListReferenceInitProviderTransitGatewayAttachmentIdSelector>,
    /// Identifier of EC2 Transit Gateway Route Table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableId")]
    pub transit_gateway_route_table_id: Option<String>,
    /// Reference to a TransitGateway in ec2 to populate transitGatewayRouteTableId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableIdRef")]
    pub transit_gateway_route_table_id_ref: Option<TransitGatewayPrefixListReferenceInitProviderTransitGatewayRouteTableIdRef>,
    /// Selector for a TransitGateway in ec2 to populate transitGatewayRouteTableId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableIdSelector")]
    pub transit_gateway_route_table_id_selector: Option<TransitGatewayPrefixListReferenceInitProviderTransitGatewayRouteTableIdSelector>,
}

/// Reference to a ManagedPrefixList in ec2 to populate prefixListId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceInitProviderPrefixListIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPrefixListReferenceInitProviderPrefixListIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceInitProviderPrefixListIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPrefixListReferenceInitProviderPrefixListIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPrefixListReferenceInitProviderPrefixListIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceInitProviderPrefixListIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceInitProviderPrefixListIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ManagedPrefixList in ec2 to populate prefixListId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceInitProviderPrefixListIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPrefixListReferenceInitProviderPrefixListIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceInitProviderPrefixListIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPrefixListReferenceInitProviderPrefixListIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPrefixListReferenceInitProviderPrefixListIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceInitProviderPrefixListIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceInitProviderPrefixListIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceInitProviderTransitGatewayAttachmentIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPrefixListReferenceInitProviderTransitGatewayAttachmentIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceInitProviderTransitGatewayAttachmentIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPrefixListReferenceInitProviderTransitGatewayAttachmentIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPrefixListReferenceInitProviderTransitGatewayAttachmentIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceInitProviderTransitGatewayAttachmentIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceInitProviderTransitGatewayAttachmentIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceInitProviderTransitGatewayAttachmentIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPrefixListReferenceInitProviderTransitGatewayAttachmentIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceInitProviderTransitGatewayAttachmentIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPrefixListReferenceInitProviderTransitGatewayAttachmentIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPrefixListReferenceInitProviderTransitGatewayAttachmentIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceInitProviderTransitGatewayAttachmentIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceInitProviderTransitGatewayAttachmentIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a TransitGateway in ec2 to populate transitGatewayRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceInitProviderTransitGatewayRouteTableIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPrefixListReferenceInitProviderTransitGatewayRouteTableIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceInitProviderTransitGatewayRouteTableIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPrefixListReferenceInitProviderTransitGatewayRouteTableIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPrefixListReferenceInitProviderTransitGatewayRouteTableIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceInitProviderTransitGatewayRouteTableIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceInitProviderTransitGatewayRouteTableIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGateway in ec2 to populate transitGatewayRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceInitProviderTransitGatewayRouteTableIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPrefixListReferenceInitProviderTransitGatewayRouteTableIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceInitProviderTransitGatewayRouteTableIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPrefixListReferenceInitProviderTransitGatewayRouteTableIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPrefixListReferenceInitProviderTransitGatewayRouteTableIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceInitProviderTransitGatewayRouteTableIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceInitProviderTransitGatewayRouteTableIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPrefixListReferenceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPrefixListReferenceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPrefixListReferenceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferenceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferencePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<TransitGatewayPrefixListReferencePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<TransitGatewayPrefixListReferencePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferencePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPrefixListReferencePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferencePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPrefixListReferencePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPrefixListReferencePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferencePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPrefixListReferencePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferencePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// TransitGatewayPrefixListReferenceStatus defines the observed state of TransitGatewayPrefixListReference.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<TransitGatewayPrefixListReferenceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPrefixListReferenceStatusAtProvider {
    /// Indicates whether to drop traffic that matches the Prefix List. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub blackhole: Option<bool>,
    /// EC2 Transit Gateway Route Table identifier and EC2 Prefix List identifier, separated by an underscore (_)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Identifier of EC2 Prefix List.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixListId")]
    pub prefix_list_id: Option<String>,
    /// EC2 Transit Gateway Route Table identifier and EC2 Prefix List identifier, separated by an underscore (_)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "prefixListOwnerId")]
    pub prefix_list_owner_id: Option<String>,
    /// Identifier of EC2 Transit Gateway Attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentId")]
    pub transit_gateway_attachment_id: Option<String>,
    /// Identifier of EC2 Transit Gateway Route Table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableId")]
    pub transit_gateway_route_table_id: Option<String>,
}


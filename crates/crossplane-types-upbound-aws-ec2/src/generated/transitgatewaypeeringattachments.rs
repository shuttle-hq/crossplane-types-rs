// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// TransitGatewayPeeringAttachmentSpec defines the desired state of TransitGatewayPeeringAttachment
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "ec2.aws.upbound.io", version = "v1beta1", kind = "TransitGatewayPeeringAttachment", plural = "transitgatewaypeeringattachments")]
#[kube(status = "TransitGatewayPeeringAttachmentStatus")]
pub struct TransitGatewayPeeringAttachmentSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<TransitGatewayPeeringAttachmentDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: TransitGatewayPeeringAttachmentForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<TransitGatewayPeeringAttachmentInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<TransitGatewayPeeringAttachmentProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<TransitGatewayPeeringAttachmentPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<TransitGatewayPeeringAttachmentWriteConnectionSecretToRef>,
}

/// TransitGatewayPeeringAttachmentSpec defines the desired state of TransitGatewayPeeringAttachment
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentForProvider {
    /// Describes whether dynamic routing is enabled or disabled for the transit gateway peering request. See options below for more details!
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<TransitGatewayPeeringAttachmentForProviderOptions>,
    /// Account ID of EC2 Transit Gateway to peer with. Defaults to the account ID the AWS provider is currently connected to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerAccountId")]
    pub peer_account_id: Option<String>,
    /// Region of EC2 Transit Gateway to peer with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerRegion")]
    pub peer_region: Option<String>,
    /// Identifier of EC2 Transit Gateway to peer with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerTransitGatewayId")]
    pub peer_transit_gateway_id: Option<String>,
    /// Reference to a TransitGateway in ec2 to populate peerTransitGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerTransitGatewayIdRef")]
    pub peer_transit_gateway_id_ref: Option<TransitGatewayPeeringAttachmentForProviderPeerTransitGatewayIdRef>,
    /// Selector for a TransitGateway in ec2 to populate peerTransitGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerTransitGatewayIdSelector")]
    pub peer_transit_gateway_id_selector: Option<TransitGatewayPeeringAttachmentForProviderPeerTransitGatewayIdSelector>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Identifier of EC2 Transit Gateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayId")]
    pub transit_gateway_id: Option<String>,
    /// Reference to a TransitGateway in ec2 to populate transitGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayIdRef")]
    pub transit_gateway_id_ref: Option<TransitGatewayPeeringAttachmentForProviderTransitGatewayIdRef>,
    /// Selector for a TransitGateway in ec2 to populate transitGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayIdSelector")]
    pub transit_gateway_id_selector: Option<TransitGatewayPeeringAttachmentForProviderTransitGatewayIdSelector>,
}

/// Describes whether dynamic routing is enabled or disabled for the transit gateway peering request. See options below for more details!
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentForProviderOptions {
    /// Indicates whether dynamic routing is enabled or disabled.. Supports enable and disable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicRouting")]
    pub dynamic_routing: Option<String>,
}

/// Reference to a TransitGateway in ec2 to populate peerTransitGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentForProviderPeerTransitGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPeeringAttachmentForProviderPeerTransitGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentForProviderPeerTransitGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPeeringAttachmentForProviderPeerTransitGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPeeringAttachmentForProviderPeerTransitGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentForProviderPeerTransitGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentForProviderPeerTransitGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGateway in ec2 to populate peerTransitGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentForProviderPeerTransitGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPeeringAttachmentForProviderPeerTransitGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentForProviderPeerTransitGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPeeringAttachmentForProviderPeerTransitGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPeeringAttachmentForProviderPeerTransitGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentForProviderPeerTransitGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentForProviderPeerTransitGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a TransitGateway in ec2 to populate transitGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentForProviderTransitGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPeeringAttachmentForProviderTransitGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentForProviderTransitGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPeeringAttachmentForProviderTransitGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPeeringAttachmentForProviderTransitGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentForProviderTransitGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentForProviderTransitGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGateway in ec2 to populate transitGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentForProviderTransitGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPeeringAttachmentForProviderTransitGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentForProviderTransitGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPeeringAttachmentForProviderTransitGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPeeringAttachmentForProviderTransitGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentForProviderTransitGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentForProviderTransitGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentInitProvider {
    /// Describes whether dynamic routing is enabled or disabled for the transit gateway peering request. See options below for more details!
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<TransitGatewayPeeringAttachmentInitProviderOptions>,
    /// Account ID of EC2 Transit Gateway to peer with. Defaults to the account ID the AWS provider is currently connected to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerAccountId")]
    pub peer_account_id: Option<String>,
    /// Region of EC2 Transit Gateway to peer with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerRegion")]
    pub peer_region: Option<String>,
    /// Identifier of EC2 Transit Gateway to peer with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerTransitGatewayId")]
    pub peer_transit_gateway_id: Option<String>,
    /// Reference to a TransitGateway in ec2 to populate peerTransitGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerTransitGatewayIdRef")]
    pub peer_transit_gateway_id_ref: Option<TransitGatewayPeeringAttachmentInitProviderPeerTransitGatewayIdRef>,
    /// Selector for a TransitGateway in ec2 to populate peerTransitGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerTransitGatewayIdSelector")]
    pub peer_transit_gateway_id_selector: Option<TransitGatewayPeeringAttachmentInitProviderPeerTransitGatewayIdSelector>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Identifier of EC2 Transit Gateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayId")]
    pub transit_gateway_id: Option<String>,
    /// Reference to a TransitGateway in ec2 to populate transitGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayIdRef")]
    pub transit_gateway_id_ref: Option<TransitGatewayPeeringAttachmentInitProviderTransitGatewayIdRef>,
    /// Selector for a TransitGateway in ec2 to populate transitGatewayId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayIdSelector")]
    pub transit_gateway_id_selector: Option<TransitGatewayPeeringAttachmentInitProviderTransitGatewayIdSelector>,
}

/// Describes whether dynamic routing is enabled or disabled for the transit gateway peering request. See options below for more details!
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentInitProviderOptions {
    /// Indicates whether dynamic routing is enabled or disabled.. Supports enable and disable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicRouting")]
    pub dynamic_routing: Option<String>,
}

/// Reference to a TransitGateway in ec2 to populate peerTransitGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentInitProviderPeerTransitGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPeeringAttachmentInitProviderPeerTransitGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentInitProviderPeerTransitGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPeeringAttachmentInitProviderPeerTransitGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPeeringAttachmentInitProviderPeerTransitGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentInitProviderPeerTransitGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentInitProviderPeerTransitGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGateway in ec2 to populate peerTransitGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentInitProviderPeerTransitGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPeeringAttachmentInitProviderPeerTransitGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentInitProviderPeerTransitGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPeeringAttachmentInitProviderPeerTransitGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPeeringAttachmentInitProviderPeerTransitGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentInitProviderPeerTransitGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentInitProviderPeerTransitGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a TransitGateway in ec2 to populate transitGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentInitProviderTransitGatewayIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPeeringAttachmentInitProviderTransitGatewayIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentInitProviderTransitGatewayIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPeeringAttachmentInitProviderTransitGatewayIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPeeringAttachmentInitProviderTransitGatewayIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentInitProviderTransitGatewayIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentInitProviderTransitGatewayIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGateway in ec2 to populate transitGatewayId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentInitProviderTransitGatewayIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPeeringAttachmentInitProviderTransitGatewayIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentInitProviderTransitGatewayIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPeeringAttachmentInitProviderTransitGatewayIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPeeringAttachmentInitProviderTransitGatewayIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentInitProviderTransitGatewayIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentInitProviderTransitGatewayIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPeeringAttachmentProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPeeringAttachmentProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPeeringAttachmentProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<TransitGatewayPeeringAttachmentPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<TransitGatewayPeeringAttachmentPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayPeeringAttachmentPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayPeeringAttachmentPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayPeeringAttachmentPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayPeeringAttachmentPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// TransitGatewayPeeringAttachmentStatus defines the observed state of TransitGatewayPeeringAttachment.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<TransitGatewayPeeringAttachmentStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentStatusAtProvider {
    /// EC2 Transit Gateway Attachment identifier
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Describes whether dynamic routing is enabled or disabled for the transit gateway peering request. See options below for more details!
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub options: Option<TransitGatewayPeeringAttachmentStatusAtProviderOptions>,
    /// Account ID of EC2 Transit Gateway to peer with. Defaults to the account ID the AWS provider is currently connected to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerAccountId")]
    pub peer_account_id: Option<String>,
    /// Region of EC2 Transit Gateway to peer with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerRegion")]
    pub peer_region: Option<String>,
    /// Identifier of EC2 Transit Gateway to peer with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerTransitGatewayId")]
    pub peer_transit_gateway_id: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// Identifier of EC2 Transit Gateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayId")]
    pub transit_gateway_id: Option<String>,
}

/// Describes whether dynamic routing is enabled or disabled for the transit gateway peering request. See options below for more details!
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayPeeringAttachmentStatusAtProviderOptions {
    /// Indicates whether dynamic routing is enabled or disabled.. Supports enable and disable.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicRouting")]
    pub dynamic_routing: Option<String>,
}


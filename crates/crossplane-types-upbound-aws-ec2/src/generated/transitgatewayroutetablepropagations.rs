// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// TransitGatewayRouteTablePropagationSpec defines the desired state of TransitGatewayRouteTablePropagation
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "ec2.aws.upbound.io", version = "v1beta1", kind = "TransitGatewayRouteTablePropagation", plural = "transitgatewayroutetablepropagations")]
#[kube(status = "TransitGatewayRouteTablePropagationStatus")]
pub struct TransitGatewayRouteTablePropagationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<TransitGatewayRouteTablePropagationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: TransitGatewayRouteTablePropagationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<TransitGatewayRouteTablePropagationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<TransitGatewayRouteTablePropagationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<TransitGatewayRouteTablePropagationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<TransitGatewayRouteTablePropagationWriteConnectionSecretToRef>,
}

/// TransitGatewayRouteTablePropagationSpec defines the desired state of TransitGatewayRouteTablePropagation
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationForProvider {
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Identifier of EC2 Transit Gateway Attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentId")]
    pub transit_gateway_attachment_id: Option<String>,
    /// Reference to a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentIdRef")]
    pub transit_gateway_attachment_id_ref: Option<TransitGatewayRouteTablePropagationForProviderTransitGatewayAttachmentIdRef>,
    /// Selector for a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentIdSelector")]
    pub transit_gateway_attachment_id_selector: Option<TransitGatewayRouteTablePropagationForProviderTransitGatewayAttachmentIdSelector>,
    /// Identifier of EC2 Transit Gateway Route Table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableId")]
    pub transit_gateway_route_table_id: Option<String>,
    /// Reference to a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableIdRef")]
    pub transit_gateway_route_table_id_ref: Option<TransitGatewayRouteTablePropagationForProviderTransitGatewayRouteTableIdRef>,
    /// Selector for a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableIdSelector")]
    pub transit_gateway_route_table_id_selector: Option<TransitGatewayRouteTablePropagationForProviderTransitGatewayRouteTableIdSelector>,
}

/// Reference to a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationForProviderTransitGatewayAttachmentIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteTablePropagationForProviderTransitGatewayAttachmentIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationForProviderTransitGatewayAttachmentIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteTablePropagationForProviderTransitGatewayAttachmentIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteTablePropagationForProviderTransitGatewayAttachmentIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationForProviderTransitGatewayAttachmentIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationForProviderTransitGatewayAttachmentIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationForProviderTransitGatewayAttachmentIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteTablePropagationForProviderTransitGatewayAttachmentIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationForProviderTransitGatewayAttachmentIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteTablePropagationForProviderTransitGatewayAttachmentIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteTablePropagationForProviderTransitGatewayAttachmentIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationForProviderTransitGatewayAttachmentIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationForProviderTransitGatewayAttachmentIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationForProviderTransitGatewayRouteTableIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteTablePropagationForProviderTransitGatewayRouteTableIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationForProviderTransitGatewayRouteTableIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteTablePropagationForProviderTransitGatewayRouteTableIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteTablePropagationForProviderTransitGatewayRouteTableIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationForProviderTransitGatewayRouteTableIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationForProviderTransitGatewayRouteTableIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationForProviderTransitGatewayRouteTableIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteTablePropagationForProviderTransitGatewayRouteTableIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationForProviderTransitGatewayRouteTableIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteTablePropagationForProviderTransitGatewayRouteTableIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteTablePropagationForProviderTransitGatewayRouteTableIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationForProviderTransitGatewayRouteTableIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationForProviderTransitGatewayRouteTableIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationInitProvider {
    /// Identifier of EC2 Transit Gateway Attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentId")]
    pub transit_gateway_attachment_id: Option<String>,
    /// Reference to a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentIdRef")]
    pub transit_gateway_attachment_id_ref: Option<TransitGatewayRouteTablePropagationInitProviderTransitGatewayAttachmentIdRef>,
    /// Selector for a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentIdSelector")]
    pub transit_gateway_attachment_id_selector: Option<TransitGatewayRouteTablePropagationInitProviderTransitGatewayAttachmentIdSelector>,
    /// Identifier of EC2 Transit Gateway Route Table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableId")]
    pub transit_gateway_route_table_id: Option<String>,
    /// Reference to a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableIdRef")]
    pub transit_gateway_route_table_id_ref: Option<TransitGatewayRouteTablePropagationInitProviderTransitGatewayRouteTableIdRef>,
    /// Selector for a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableIdSelector")]
    pub transit_gateway_route_table_id_selector: Option<TransitGatewayRouteTablePropagationInitProviderTransitGatewayRouteTableIdSelector>,
}

/// Reference to a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationInitProviderTransitGatewayAttachmentIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteTablePropagationInitProviderTransitGatewayAttachmentIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationInitProviderTransitGatewayAttachmentIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteTablePropagationInitProviderTransitGatewayAttachmentIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteTablePropagationInitProviderTransitGatewayAttachmentIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationInitProviderTransitGatewayAttachmentIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationInitProviderTransitGatewayAttachmentIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGatewayVPCAttachment in ec2 to populate transitGatewayAttachmentId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationInitProviderTransitGatewayAttachmentIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteTablePropagationInitProviderTransitGatewayAttachmentIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationInitProviderTransitGatewayAttachmentIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteTablePropagationInitProviderTransitGatewayAttachmentIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteTablePropagationInitProviderTransitGatewayAttachmentIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationInitProviderTransitGatewayAttachmentIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationInitProviderTransitGatewayAttachmentIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationInitProviderTransitGatewayRouteTableIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteTablePropagationInitProviderTransitGatewayRouteTableIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationInitProviderTransitGatewayRouteTableIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteTablePropagationInitProviderTransitGatewayRouteTableIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteTablePropagationInitProviderTransitGatewayRouteTableIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationInitProviderTransitGatewayRouteTableIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationInitProviderTransitGatewayRouteTableIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a TransitGatewayRouteTable in ec2 to populate transitGatewayRouteTableId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationInitProviderTransitGatewayRouteTableIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteTablePropagationInitProviderTransitGatewayRouteTableIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationInitProviderTransitGatewayRouteTableIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteTablePropagationInitProviderTransitGatewayRouteTableIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteTablePropagationInitProviderTransitGatewayRouteTableIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationInitProviderTransitGatewayRouteTableIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationInitProviderTransitGatewayRouteTableIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteTablePropagationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteTablePropagationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteTablePropagationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<TransitGatewayRouteTablePropagationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<TransitGatewayRouteTablePropagationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TransitGatewayRouteTablePropagationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TransitGatewayRouteTablePropagationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TransitGatewayRouteTablePropagationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TransitGatewayRouteTablePropagationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// TransitGatewayRouteTablePropagationStatus defines the observed state of TransitGatewayRouteTablePropagation.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<TransitGatewayRouteTablePropagationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TransitGatewayRouteTablePropagationStatusAtProvider {
    /// EC2 Transit Gateway Route Table identifier combined with EC2 Transit Gateway Attachment identifier
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Identifier of the resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceId")]
    pub resource_id: Option<String>,
    /// Type of the resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceType")]
    pub resource_type: Option<String>,
    /// Identifier of EC2 Transit Gateway Attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayAttachmentId")]
    pub transit_gateway_attachment_id: Option<String>,
    /// Identifier of EC2 Transit Gateway Route Table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitGatewayRouteTableId")]
    pub transit_gateway_route_table_id: Option<String>,
}


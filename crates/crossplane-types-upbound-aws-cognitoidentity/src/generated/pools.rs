// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// PoolSpec defines the desired state of Pool
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "cognitoidentity.aws.upbound.io", version = "v1beta1", kind = "Pool", plural = "pools")]
#[kube(status = "PoolStatus")]
pub struct PoolSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<PoolDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: PoolForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<PoolInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<PoolProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<PoolPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<PoolWriteConnectionSecretToRef>,
}

/// PoolSpec defines the desired state of Pool
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolForProvider {
    /// Enables or disables the classic / basic authentication flow. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowClassicFlow")]
    pub allow_classic_flow: Option<bool>,
    /// Whether the identity pool supports unauthenticated logins or not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowUnauthenticatedIdentities")]
    pub allow_unauthenticated_identities: Option<bool>,
    /// An array of Amazon Cognito Identity user pools and their client IDs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cognitoIdentityProviders")]
    pub cognito_identity_providers: Option<Vec<PoolForProviderCognitoIdentityProviders>>,
    /// The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your
    /// backend and the Cognito service to communicate about the developer provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "developerProviderName")]
    pub developer_provider_name: Option<String>,
    /// The Cognito Identity Pool name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityPoolName")]
    pub identity_pool_name: Option<String>,
    /// Set of OpendID Connect provider ARNs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openidConnectProviderArns")]
    pub openid_connect_provider_arns: Option<Vec<String>>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "samlProviderArns")]
    pub saml_provider_arns: Option<Vec<String>>,
    /// References to SAMLProvider in iam to populate samlProviderArns.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "samlProviderArnsRefs")]
    pub saml_provider_arns_refs: Option<Vec<PoolForProviderSamlProviderArnsRefs>>,
    /// Selector for a list of SAMLProvider in iam to populate samlProviderArns.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "samlProviderArnsSelector")]
    pub saml_provider_arns_selector: Option<PoolForProviderSamlProviderArnsSelector>,
    /// Key-Value pairs mapping provider names to provider app IDs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supportedLoginProviders")]
    pub supported_login_providers: Option<HashMap<String, String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolForProviderCognitoIdentityProviders {
    /// The client ID for the Amazon Cognito Identity User Pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// Reference to a UserPoolClient in cognitoidp to populate clientId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientIdRef")]
    pub client_id_ref: Option<PoolForProviderCognitoIdentityProvidersClientIdRef>,
    /// Selector for a UserPoolClient in cognitoidp to populate clientId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientIdSelector")]
    pub client_id_selector: Option<PoolForProviderCognitoIdentityProvidersClientIdSelector>,
    /// The provider name for an Amazon Cognito Identity User Pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerName")]
    pub provider_name: Option<String>,
    /// Whether server-side token validation is enabled for the identity providerâ€™s token or not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideTokenCheck")]
    pub server_side_token_check: Option<bool>,
}

/// Reference to a UserPoolClient in cognitoidp to populate clientId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolForProviderCognitoIdentityProvidersClientIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PoolForProviderCognitoIdentityProvidersClientIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolForProviderCognitoIdentityProvidersClientIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PoolForProviderCognitoIdentityProvidersClientIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PoolForProviderCognitoIdentityProvidersClientIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolForProviderCognitoIdentityProvidersClientIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolForProviderCognitoIdentityProvidersClientIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a UserPoolClient in cognitoidp to populate clientId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolForProviderCognitoIdentityProvidersClientIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PoolForProviderCognitoIdentityProvidersClientIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolForProviderCognitoIdentityProvidersClientIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PoolForProviderCognitoIdentityProvidersClientIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PoolForProviderCognitoIdentityProvidersClientIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolForProviderCognitoIdentityProvidersClientIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolForProviderCognitoIdentityProvidersClientIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolForProviderSamlProviderArnsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PoolForProviderSamlProviderArnsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolForProviderSamlProviderArnsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PoolForProviderSamlProviderArnsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PoolForProviderSamlProviderArnsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolForProviderSamlProviderArnsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolForProviderSamlProviderArnsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SAMLProvider in iam to populate samlProviderArns.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolForProviderSamlProviderArnsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PoolForProviderSamlProviderArnsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolForProviderSamlProviderArnsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PoolForProviderSamlProviderArnsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PoolForProviderSamlProviderArnsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolForProviderSamlProviderArnsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolForProviderSamlProviderArnsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolInitProvider {
    /// Enables or disables the classic / basic authentication flow. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowClassicFlow")]
    pub allow_classic_flow: Option<bool>,
    /// Whether the identity pool supports unauthenticated logins or not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowUnauthenticatedIdentities")]
    pub allow_unauthenticated_identities: Option<bool>,
    /// An array of Amazon Cognito Identity user pools and their client IDs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cognitoIdentityProviders")]
    pub cognito_identity_providers: Option<Vec<PoolInitProviderCognitoIdentityProviders>>,
    /// The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your
    /// backend and the Cognito service to communicate about the developer provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "developerProviderName")]
    pub developer_provider_name: Option<String>,
    /// The Cognito Identity Pool name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityPoolName")]
    pub identity_pool_name: Option<String>,
    /// Set of OpendID Connect provider ARNs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openidConnectProviderArns")]
    pub openid_connect_provider_arns: Option<Vec<String>>,
    /// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "samlProviderArns")]
    pub saml_provider_arns: Option<Vec<String>>,
    /// References to SAMLProvider in iam to populate samlProviderArns.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "samlProviderArnsRefs")]
    pub saml_provider_arns_refs: Option<Vec<PoolInitProviderSamlProviderArnsRefs>>,
    /// Selector for a list of SAMLProvider in iam to populate samlProviderArns.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "samlProviderArnsSelector")]
    pub saml_provider_arns_selector: Option<PoolInitProviderSamlProviderArnsSelector>,
    /// Key-Value pairs mapping provider names to provider app IDs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supportedLoginProviders")]
    pub supported_login_providers: Option<HashMap<String, String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolInitProviderCognitoIdentityProviders {
    /// The client ID for the Amazon Cognito Identity User Pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// Reference to a UserPoolClient in cognitoidp to populate clientId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientIdRef")]
    pub client_id_ref: Option<PoolInitProviderCognitoIdentityProvidersClientIdRef>,
    /// Selector for a UserPoolClient in cognitoidp to populate clientId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientIdSelector")]
    pub client_id_selector: Option<PoolInitProviderCognitoIdentityProvidersClientIdSelector>,
    /// The provider name for an Amazon Cognito Identity User Pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerName")]
    pub provider_name: Option<String>,
    /// Whether server-side token validation is enabled for the identity providerâ€™s token or not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideTokenCheck")]
    pub server_side_token_check: Option<bool>,
}

/// Reference to a UserPoolClient in cognitoidp to populate clientId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolInitProviderCognitoIdentityProvidersClientIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PoolInitProviderCognitoIdentityProvidersClientIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolInitProviderCognitoIdentityProvidersClientIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PoolInitProviderCognitoIdentityProvidersClientIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PoolInitProviderCognitoIdentityProvidersClientIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolInitProviderCognitoIdentityProvidersClientIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolInitProviderCognitoIdentityProvidersClientIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a UserPoolClient in cognitoidp to populate clientId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolInitProviderCognitoIdentityProvidersClientIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PoolInitProviderCognitoIdentityProvidersClientIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolInitProviderCognitoIdentityProvidersClientIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PoolInitProviderCognitoIdentityProvidersClientIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PoolInitProviderCognitoIdentityProvidersClientIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolInitProviderCognitoIdentityProvidersClientIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolInitProviderCognitoIdentityProvidersClientIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolInitProviderSamlProviderArnsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PoolInitProviderSamlProviderArnsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolInitProviderSamlProviderArnsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PoolInitProviderSamlProviderArnsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PoolInitProviderSamlProviderArnsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolInitProviderSamlProviderArnsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolInitProviderSamlProviderArnsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SAMLProvider in iam to populate samlProviderArns.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolInitProviderSamlProviderArnsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PoolInitProviderSamlProviderArnsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolInitProviderSamlProviderArnsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PoolInitProviderSamlProviderArnsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PoolInitProviderSamlProviderArnsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolInitProviderSamlProviderArnsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolInitProviderSamlProviderArnsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PoolProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PoolProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PoolProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<PoolPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<PoolPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PoolPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PoolPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PoolPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PoolPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// PoolStatus defines the observed state of Pool.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<PoolStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolStatusAtProvider {
    /// Enables or disables the classic / basic authentication flow. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowClassicFlow")]
    pub allow_classic_flow: Option<bool>,
    /// Whether the identity pool supports unauthenticated logins or not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowUnauthenticatedIdentities")]
    pub allow_unauthenticated_identities: Option<bool>,
    /// The ARN of the identity pool.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// An array of Amazon Cognito Identity user pools and their client IDs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cognitoIdentityProviders")]
    pub cognito_identity_providers: Option<Vec<PoolStatusAtProviderCognitoIdentityProviders>>,
    /// The "domain" by which Cognito will refer to your users. This name acts as a placeholder that allows your
    /// backend and the Cognito service to communicate about the developer provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "developerProviderName")]
    pub developer_provider_name: Option<String>,
    /// An identity pool ID, e.g. us-west-2:1a234567-8901-234b-5cde-f6789g01h2i3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The Cognito Identity Pool name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identityPoolName")]
    pub identity_pool_name: Option<String>,
    /// Set of OpendID Connect provider ARNs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openidConnectProviderArns")]
    pub openid_connect_provider_arns: Option<Vec<String>>,
    /// An array of Amazon Resource Names (ARNs) of the SAML provider for your identity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "samlProviderArns")]
    pub saml_provider_arns: Option<Vec<String>>,
    /// Key-Value pairs mapping provider names to provider app IDs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "supportedLoginProviders")]
    pub supported_login_providers: Option<HashMap<String, String>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PoolStatusAtProviderCognitoIdentityProviders {
    /// The client ID for the Amazon Cognito Identity User Pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// The provider name for an Amazon Cognito Identity User Pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerName")]
    pub provider_name: Option<String>,
    /// Whether server-side token validation is enabled for the identity providerâ€™s token or not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideTokenCheck")]
    pub server_side_token_check: Option<bool>,
}


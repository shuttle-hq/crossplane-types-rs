// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// InstanceSpec defines the desired state of Instance
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "redis.gcp.upbound.io", version = "v1beta2", kind = "Instance", plural = "instances")]
#[kube(status = "InstanceStatus")]
pub struct InstanceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<InstanceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: InstanceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<InstanceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<InstanceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<InstancePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<InstanceWriteConnectionSecretToRef>,
}

/// InstanceSpec defines the desired state of Instance
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProvider {
    /// Only applicable to STANDARD_HA tier which protects the instance
    /// against zonal failures by provisioning it across two zones.
    /// If provided, it must be a different zone from the one provided in
    /// [locationId].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alternativeLocationId")]
    pub alternative_location_id: Option<String>,
    /// Optional. Indicates whether OSS Redis AUTH is enabled for the
    /// instance. If set to "true" AUTH is enabled on the instance.
    /// Default value is "false" meaning AUTH is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authEnabled")]
    pub auth_enabled: Option<bool>,
    /// The full name of the Google Compute Engine network to which the
    /// instance is connected. If left unspecified, the default network
    /// will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetwork")]
    pub authorized_network: Option<String>,
    /// Reference to a Network in compute to populate authorizedNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetworkRef")]
    pub authorized_network_ref: Option<InstanceForProviderAuthorizedNetworkRef>,
    /// Selector for a Network in compute to populate authorizedNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetworkSelector")]
    pub authorized_network_selector: Option<InstanceForProviderAuthorizedNetworkSelector>,
    /// The connection mode of the Redis instance.
    /// Default value is DIRECT_PEERING.
    /// Possible values are: DIRECT_PEERING, PRIVATE_SERVICE_ACCESS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMode")]
    pub connect_mode: Option<String>,
    /// Optional. The KMS key reference that you want to use to encrypt the data at rest for this Redis
    /// instance. If this is provided, CMEK is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerManagedKey")]
    pub customer_managed_key: Option<String>,
    /// Reference to a CryptoKey in kms to populate customerManagedKey.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerManagedKeyRef")]
    pub customer_managed_key_ref: Option<InstanceForProviderCustomerManagedKeyRef>,
    /// Selector for a CryptoKey in kms to populate customerManagedKey.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerManagedKeySelector")]
    pub customer_managed_key_selector: Option<InstanceForProviderCustomerManagedKeySelector>,
    /// An arbitrary and optional user-provided name for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// Resource labels to represent user provided metadata.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The zone where the instance will be provisioned. If not provided,
    /// the service will choose a zone for the instance. For STANDARD_HA tier,
    /// instances will be created across two zones for protection against
    /// zonal failures. If [alternativeLocationId] is also provided, it must
    /// be different from [locationId].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationId")]
    pub location_id: Option<String>,
    /// Maintenance policy for an instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenancePolicy")]
    pub maintenance_policy: Option<InstanceForProviderMaintenancePolicy>,
    /// The self service update maintenance version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceVersion")]
    pub maintenance_version: Option<String>,
    /// Redis memory size in GiB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memorySizeGb")]
    pub memory_size_gb: Option<f64>,
    /// Persistence configuration for an instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistenceConfig")]
    pub persistence_config: Option<InstanceForProviderPersistenceConfig>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Optional. Read replica mode. Can only be specified when trying to create the instance.
    /// If not set, Memorystore Redis backend will default to READ_REPLICAS_DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readReplicasMode")]
    pub read_replicas_mode: Option<String>,
    /// Redis configuration parameters, according to http://redis.io/topics/config.
    /// Please check Memorystore documentation for the list of supported parameters:
    /// https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redisConfigs")]
    pub redis_configs: Option<HashMap<String, String>>,
    /// The version of Redis software. If not provided, latest supported
    /// version will be used. Please check the API documentation linked
    /// at the top for the latest valid values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redisVersion")]
    pub redis_version: Option<String>,
    /// The name of the Redis region of the instance.
    pub region: String,
    /// Optional. The number of replica nodes. The valid range for the Standard Tier with
    /// read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled
    /// for a Standard Tier instance, the only valid value is 1 and the default is 1.
    /// The valid value for basic tier is 0 and the default is also 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaCount")]
    pub replica_count: Option<f64>,
    /// The CIDR range of internal addresses that are reserved for this
    /// instance. If not provided, the service will choose an unused /29
    /// block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be
    /// unique and non-overlapping with existing subnets in an authorized
    /// network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reservedIpRange")]
    pub reserved_ip_range: Option<String>,
    /// Optional. Additional IP range for node placement. Required when enabling read replicas on
    /// an existing instance. For DIRECT_PEERING mode value must be a CIDR range of size /28, or
    /// "auto". For PRIVATE_SERVICE_ACCESS mode value must be the name of an allocated address
    /// range associated with the private service access connection, or "auto".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryIpRange")]
    pub secondary_ip_range: Option<String>,
    /// The service tier of the instance. Must be one of these values:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tier: Option<String>,
    /// The TLS mode of the Redis instance, If not provided, TLS is disabled for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitEncryptionMode")]
    pub transit_encryption_mode: Option<String>,
}

/// Reference to a Network in compute to populate authorizedNetwork.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderAuthorizedNetworkRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderAuthorizedNetworkRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderAuthorizedNetworkRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderAuthorizedNetworkRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderAuthorizedNetworkRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderAuthorizedNetworkRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderAuthorizedNetworkRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate authorizedNetwork.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderAuthorizedNetworkSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderAuthorizedNetworkSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderAuthorizedNetworkSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderAuthorizedNetworkSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderAuthorizedNetworkSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderAuthorizedNetworkSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderAuthorizedNetworkSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a CryptoKey in kms to populate customerManagedKey.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderCustomerManagedKeyRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderCustomerManagedKeyRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderCustomerManagedKeyRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderCustomerManagedKeyRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderCustomerManagedKeyRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderCustomerManagedKeyRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderCustomerManagedKeyRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CryptoKey in kms to populate customerManagedKey.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderCustomerManagedKeySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderCustomerManagedKeySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderCustomerManagedKeySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderCustomerManagedKeySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderCustomerManagedKeySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderCustomerManagedKeySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderCustomerManagedKeySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Maintenance policy for an instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderMaintenancePolicy {
    /// Optional. Description of what this policy is for.
    /// Create/Update methods return INVALID_ARGUMENT if the
    /// length is greater than 512.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Optional. Maintenance window that is applied to resources covered by this policy.
    /// Minimum 1. For the current version, the maximum number
    /// of weekly_window is expected to be one.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weeklyMaintenanceWindow")]
    pub weekly_maintenance_window: Option<Vec<InstanceForProviderMaintenancePolicyWeeklyMaintenanceWindow>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderMaintenancePolicyWeeklyMaintenanceWindow {
    /// Required. The day of week that maintenance updates occur.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub day: Option<String>,
    /// Required. Start time of the window in UTC time.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<InstanceForProviderMaintenancePolicyWeeklyMaintenanceWindowStartTime>,
}

/// Required. Start time of the window in UTC time.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderMaintenancePolicyWeeklyMaintenanceWindowStartTime {
    /// Hours of day in 24 hour format. Should be from 0 to 23.
    /// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hours: Option<f64>,
    /// Minutes of hour of day. Must be from 0 to 59.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minutes: Option<f64>,
    /// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<f64>,
    /// Seconds of minutes of the time. Must normally be from 0 to 59.
    /// An API may allow the value 60 if it allows leap-seconds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<f64>,
}

/// Persistence configuration for an instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderPersistenceConfig {
    /// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistenceMode")]
    pub persistence_mode: Option<String>,
    /// Optional. Available snapshot periods for scheduling.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rdbSnapshotPeriod")]
    pub rdb_snapshot_period: Option<String>,
    /// Optional. Date and time that the first snapshot was/will be attempted,
    /// and to which future snapshots will be aligned. If not provided,
    /// the current time will be used.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution
    /// and up to nine fractional digits.
    /// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rdbSnapshotStartTime")]
    pub rdb_snapshot_start_time: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProvider {
    /// Only applicable to STANDARD_HA tier which protects the instance
    /// against zonal failures by provisioning it across two zones.
    /// If provided, it must be a different zone from the one provided in
    /// [locationId].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alternativeLocationId")]
    pub alternative_location_id: Option<String>,
    /// Optional. Indicates whether OSS Redis AUTH is enabled for the
    /// instance. If set to "true" AUTH is enabled on the instance.
    /// Default value is "false" meaning AUTH is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authEnabled")]
    pub auth_enabled: Option<bool>,
    /// The full name of the Google Compute Engine network to which the
    /// instance is connected. If left unspecified, the default network
    /// will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetwork")]
    pub authorized_network: Option<String>,
    /// Reference to a Network in compute to populate authorizedNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetworkRef")]
    pub authorized_network_ref: Option<InstanceInitProviderAuthorizedNetworkRef>,
    /// Selector for a Network in compute to populate authorizedNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetworkSelector")]
    pub authorized_network_selector: Option<InstanceInitProviderAuthorizedNetworkSelector>,
    /// The connection mode of the Redis instance.
    /// Default value is DIRECT_PEERING.
    /// Possible values are: DIRECT_PEERING, PRIVATE_SERVICE_ACCESS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMode")]
    pub connect_mode: Option<String>,
    /// Optional. The KMS key reference that you want to use to encrypt the data at rest for this Redis
    /// instance. If this is provided, CMEK is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerManagedKey")]
    pub customer_managed_key: Option<String>,
    /// Reference to a CryptoKey in kms to populate customerManagedKey.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerManagedKeyRef")]
    pub customer_managed_key_ref: Option<InstanceInitProviderCustomerManagedKeyRef>,
    /// Selector for a CryptoKey in kms to populate customerManagedKey.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerManagedKeySelector")]
    pub customer_managed_key_selector: Option<InstanceInitProviderCustomerManagedKeySelector>,
    /// An arbitrary and optional user-provided name for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// Resource labels to represent user provided metadata.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The zone where the instance will be provisioned. If not provided,
    /// the service will choose a zone for the instance. For STANDARD_HA tier,
    /// instances will be created across two zones for protection against
    /// zonal failures. If [alternativeLocationId] is also provided, it must
    /// be different from [locationId].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationId")]
    pub location_id: Option<String>,
    /// Maintenance policy for an instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenancePolicy")]
    pub maintenance_policy: Option<InstanceInitProviderMaintenancePolicy>,
    /// The self service update maintenance version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceVersion")]
    pub maintenance_version: Option<String>,
    /// Redis memory size in GiB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memorySizeGb")]
    pub memory_size_gb: Option<f64>,
    /// Persistence configuration for an instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistenceConfig")]
    pub persistence_config: Option<InstanceInitProviderPersistenceConfig>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Optional. Read replica mode. Can only be specified when trying to create the instance.
    /// If not set, Memorystore Redis backend will default to READ_REPLICAS_DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readReplicasMode")]
    pub read_replicas_mode: Option<String>,
    /// Redis configuration parameters, according to http://redis.io/topics/config.
    /// Please check Memorystore documentation for the list of supported parameters:
    /// https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redisConfigs")]
    pub redis_configs: Option<HashMap<String, String>>,
    /// The version of Redis software. If not provided, latest supported
    /// version will be used. Please check the API documentation linked
    /// at the top for the latest valid values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redisVersion")]
    pub redis_version: Option<String>,
    /// Optional. The number of replica nodes. The valid range for the Standard Tier with
    /// read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled
    /// for a Standard Tier instance, the only valid value is 1 and the default is 1.
    /// The valid value for basic tier is 0 and the default is also 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaCount")]
    pub replica_count: Option<f64>,
    /// The CIDR range of internal addresses that are reserved for this
    /// instance. If not provided, the service will choose an unused /29
    /// block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be
    /// unique and non-overlapping with existing subnets in an authorized
    /// network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reservedIpRange")]
    pub reserved_ip_range: Option<String>,
    /// Optional. Additional IP range for node placement. Required when enabling read replicas on
    /// an existing instance. For DIRECT_PEERING mode value must be a CIDR range of size /28, or
    /// "auto". For PRIVATE_SERVICE_ACCESS mode value must be the name of an allocated address
    /// range associated with the private service access connection, or "auto".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryIpRange")]
    pub secondary_ip_range: Option<String>,
    /// The service tier of the instance. Must be one of these values:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tier: Option<String>,
    /// The TLS mode of the Redis instance, If not provided, TLS is disabled for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitEncryptionMode")]
    pub transit_encryption_mode: Option<String>,
}

/// Reference to a Network in compute to populate authorizedNetwork.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderAuthorizedNetworkRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderAuthorizedNetworkRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderAuthorizedNetworkRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderAuthorizedNetworkRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderAuthorizedNetworkRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderAuthorizedNetworkRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderAuthorizedNetworkRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate authorizedNetwork.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderAuthorizedNetworkSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderAuthorizedNetworkSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderAuthorizedNetworkSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderAuthorizedNetworkSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderAuthorizedNetworkSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderAuthorizedNetworkSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderAuthorizedNetworkSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a CryptoKey in kms to populate customerManagedKey.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderCustomerManagedKeyRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderCustomerManagedKeyRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderCustomerManagedKeyRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderCustomerManagedKeyRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderCustomerManagedKeyRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderCustomerManagedKeyRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderCustomerManagedKeyRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CryptoKey in kms to populate customerManagedKey.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderCustomerManagedKeySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderCustomerManagedKeySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderCustomerManagedKeySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderCustomerManagedKeySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderCustomerManagedKeySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderCustomerManagedKeySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderCustomerManagedKeySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Maintenance policy for an instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderMaintenancePolicy {
    /// Optional. Description of what this policy is for.
    /// Create/Update methods return INVALID_ARGUMENT if the
    /// length is greater than 512.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Optional. Maintenance window that is applied to resources covered by this policy.
    /// Minimum 1. For the current version, the maximum number
    /// of weekly_window is expected to be one.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weeklyMaintenanceWindow")]
    pub weekly_maintenance_window: Option<Vec<InstanceInitProviderMaintenancePolicyWeeklyMaintenanceWindow>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderMaintenancePolicyWeeklyMaintenanceWindow {
    /// Required. The day of week that maintenance updates occur.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub day: Option<String>,
    /// Required. Start time of the window in UTC time.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<InstanceInitProviderMaintenancePolicyWeeklyMaintenanceWindowStartTime>,
}

/// Required. Start time of the window in UTC time.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderMaintenancePolicyWeeklyMaintenanceWindowStartTime {
    /// Hours of day in 24 hour format. Should be from 0 to 23.
    /// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hours: Option<f64>,
    /// Minutes of hour of day. Must be from 0 to 59.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minutes: Option<f64>,
    /// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<f64>,
    /// Seconds of minutes of the time. Must normally be from 0 to 59.
    /// An API may allow the value 60 if it allows leap-seconds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<f64>,
}

/// Persistence configuration for an instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderPersistenceConfig {
    /// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistenceMode")]
    pub persistence_mode: Option<String>,
    /// Optional. Available snapshot periods for scheduling.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rdbSnapshotPeriod")]
    pub rdb_snapshot_period: Option<String>,
    /// Optional. Date and time that the first snapshot was/will be attempted,
    /// and to which future snapshots will be aligned. If not provided,
    /// the current time will be used.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution
    /// and up to nine fractional digits.
    /// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rdbSnapshotStartTime")]
    pub rdb_snapshot_start_time: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<InstancePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<InstancePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstancePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// InstanceStatus defines the observed state of Instance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<InstanceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProvider {
    /// Only applicable to STANDARD_HA tier which protects the instance
    /// against zonal failures by provisioning it across two zones.
    /// If provided, it must be a different zone from the one provided in
    /// [locationId].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alternativeLocationId")]
    pub alternative_location_id: Option<String>,
    /// Optional. Indicates whether OSS Redis AUTH is enabled for the
    /// instance. If set to "true" AUTH is enabled on the instance.
    /// Default value is "false" meaning AUTH is disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authEnabled")]
    pub auth_enabled: Option<bool>,
    /// The full name of the Google Compute Engine network to which the
    /// instance is connected. If left unspecified, the default network
    /// will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetwork")]
    pub authorized_network: Option<String>,
    /// The connection mode of the Redis instance.
    /// Default value is DIRECT_PEERING.
    /// Possible values are: DIRECT_PEERING, PRIVATE_SERVICE_ACCESS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectMode")]
    pub connect_mode: Option<String>,
    /// The time the instance was created in RFC3339 UTC "Zulu" format,
    /// accurate to nanoseconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createTime")]
    pub create_time: Option<String>,
    /// The current zone where the Redis endpoint is placed.
    /// For Basic Tier instances, this will always be the same as the
    /// [locationId] provided by the user at creation time. For Standard Tier
    /// instances, this can be either [locationId] or [alternativeLocationId]
    /// and can change after a failover event.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "currentLocationId")]
    pub current_location_id: Option<String>,
    /// Optional. The KMS key reference that you want to use to encrypt the data at rest for this Redis
    /// instance. If this is provided, CMEK is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerManagedKey")]
    pub customer_managed_key: Option<String>,
    /// An arbitrary and optional user-provided name for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// Hostname or IP address of the exposed Redis endpoint used by clients
    /// to connect to the service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{region}}/instances/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Resource labels to represent user provided metadata.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The zone where the instance will be provisioned. If not provided,
    /// the service will choose a zone for the instance. For STANDARD_HA tier,
    /// instances will be created across two zones for protection against
    /// zonal failures. If [alternativeLocationId] is also provided, it must
    /// be different from [locationId].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "locationId")]
    pub location_id: Option<String>,
    /// Maintenance policy for an instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenancePolicy")]
    pub maintenance_policy: Option<InstanceStatusAtProviderMaintenancePolicy>,
    /// Upcoming maintenance schedule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceSchedule")]
    pub maintenance_schedule: Option<Vec<InstanceStatusAtProviderMaintenanceSchedule>>,
    /// The self service update maintenance version.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceVersion")]
    pub maintenance_version: Option<String>,
    /// Redis memory size in GiB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "memorySizeGb")]
    pub memory_size_gb: Option<f64>,
    /// Output only. Info per node.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nodes: Option<Vec<InstanceStatusAtProviderNodes>>,
    /// Persistence configuration for an instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistenceConfig")]
    pub persistence_config: Option<InstanceStatusAtProviderPersistenceConfig>,
    /// Output only. Cloud IAM identity used by import / export operations
    /// to transfer data to/from Cloud Storage. Format is "serviceAccount:".
    /// The value may change over time for a given instance so should be
    /// checked before each import/export operation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistenceIamIdentity")]
    pub persistence_iam_identity: Option<String>,
    /// The port number of the exposed Redis endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Output only. Hostname or IP address of the exposed readonly Redis endpoint. Standard tier only.
    /// Targets all healthy replica nodes in instance. Replication is asynchronous and replica nodes
    /// will exhibit some lag behind the primary. Write requests must target 'host'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readEndpoint")]
    pub read_endpoint: Option<String>,
    /// Output only. The port number of the exposed readonly redis endpoint. Standard tier only.
    /// Write requests should target 'port'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readEndpointPort")]
    pub read_endpoint_port: Option<f64>,
    /// Optional. Read replica mode. Can only be specified when trying to create the instance.
    /// If not set, Memorystore Redis backend will default to READ_REPLICAS_DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readReplicasMode")]
    pub read_replicas_mode: Option<String>,
    /// Redis configuration parameters, according to http://redis.io/topics/config.
    /// Please check Memorystore documentation for the list of supported parameters:
    /// https://cloud.google.com/memorystore/docs/redis/reference/rest/v1/projects.locations.instances#Instance.FIELDS.redis_configs
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redisConfigs")]
    pub redis_configs: Option<HashMap<String, String>>,
    /// The version of Redis software. If not provided, latest supported
    /// version will be used. Please check the API documentation linked
    /// at the top for the latest valid values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redisVersion")]
    pub redis_version: Option<String>,
    /// The name of the Redis region of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// Optional. The number of replica nodes. The valid range for the Standard Tier with
    /// read replicas enabled is [1-5] and defaults to 2. If read replicas are not enabled
    /// for a Standard Tier instance, the only valid value is 1 and the default is 1.
    /// The valid value for basic tier is 0 and the default is also 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaCount")]
    pub replica_count: Option<f64>,
    /// The CIDR range of internal addresses that are reserved for this
    /// instance. If not provided, the service will choose an unused /29
    /// block, for example, 10.0.0.0/29 or 192.168.0.0/29. Ranges must be
    /// unique and non-overlapping with existing subnets in an authorized
    /// network.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reservedIpRange")]
    pub reserved_ip_range: Option<String>,
    /// Optional. Additional IP range for node placement. Required when enabling read replicas on
    /// an existing instance. For DIRECT_PEERING mode value must be a CIDR range of size /28, or
    /// "auto". For PRIVATE_SERVICE_ACCESS mode value must be the name of an allocated address
    /// range associated with the private service access connection, or "auto".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secondaryIpRange")]
    pub secondary_ip_range: Option<String>,
    /// List of server CA certificates for the instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverCaCerts")]
    pub server_ca_certs: Option<Vec<InstanceStatusAtProviderServerCaCerts>>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// The service tier of the instance. Must be one of these values:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tier: Option<String>,
    /// The TLS mode of the Redis instance, If not provided, TLS is disabled for the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitEncryptionMode")]
    pub transit_encryption_mode: Option<String>,
}

/// Maintenance policy for an instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderMaintenancePolicy {
    /// (Output)
    /// Output only. The time when the policy was created.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
    /// resolution and up to nine fractional digits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createTime")]
    pub create_time: Option<String>,
    /// Optional. Description of what this policy is for.
    /// Create/Update methods return INVALID_ARGUMENT if the
    /// length is greater than 512.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// (Output)
    /// Output only. The time when the policy was last updated.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
    /// resolution and up to nine fractional digits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateTime")]
    pub update_time: Option<String>,
    /// Optional. Maintenance window that is applied to resources covered by this policy.
    /// Minimum 1. For the current version, the maximum number
    /// of weekly_window is expected to be one.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weeklyMaintenanceWindow")]
    pub weekly_maintenance_window: Option<Vec<InstanceStatusAtProviderMaintenancePolicyWeeklyMaintenanceWindow>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderMaintenancePolicyWeeklyMaintenanceWindow {
    /// Required. The day of week that maintenance updates occur.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub day: Option<String>,
    /// (Output)
    /// Output only. Duration of the maintenance window.
    /// The current window is fixed at 1 hour.
    /// A duration in seconds with up to nine fractional digits,
    /// terminated by 's'. Example: "3.5s".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<String>,
    /// Required. Start time of the window in UTC time.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<InstanceStatusAtProviderMaintenancePolicyWeeklyMaintenanceWindowStartTime>,
}

/// Required. Start time of the window in UTC time.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderMaintenancePolicyWeeklyMaintenanceWindowStartTime {
    /// Hours of day in 24 hour format. Should be from 0 to 23.
    /// An API may choose to allow the value "24:00:00" for scenarios like business closing time.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hours: Option<f64>,
    /// Minutes of hour of day. Must be from 0 to 59.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub minutes: Option<f64>,
    /// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<f64>,
    /// Seconds of minutes of the time. Must normally be from 0 to 59.
    /// An API may allow the value 60 if it allows leap-seconds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderMaintenanceSchedule {
    /// (Output)
    /// Output only. The end time of any upcoming scheduled maintenance for this instance.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
    /// resolution and up to nine fractional digits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endTime")]
    pub end_time: Option<String>,
    /// (Output)
    /// Output only. The deadline that the maintenance schedule start time
    /// can not go beyond, including reschedule.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
    /// resolution and up to nine fractional digits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scheduleDeadlineTime")]
    pub schedule_deadline_time: Option<String>,
    /// (Output)
    /// Output only. The start time of any upcoming scheduled maintenance for this instance.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond
    /// resolution and up to nine fractional digits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderNodes {
    /// (Output)
    /// Node identifying string. e.g. 'node-0', 'node-1'
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// (Output)
    /// Location of the node.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// Persistence configuration for an instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderPersistenceConfig {
    /// Optional. Controls whether Persistence features are enabled. If not provided, the existing value will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistenceMode")]
    pub persistence_mode: Option<String>,
    /// (Output)
    /// Output only. The next time that a snapshot attempt is scheduled to occur.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up
    /// to nine fractional digits.
    /// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rdbNextSnapshotTime")]
    pub rdb_next_snapshot_time: Option<String>,
    /// Optional. Available snapshot periods for scheduling.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rdbSnapshotPeriod")]
    pub rdb_snapshot_period: Option<String>,
    /// Optional. Date and time that the first snapshot was/will be attempted,
    /// and to which future snapshots will be aligned. If not provided,
    /// the current time will be used.
    /// A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution
    /// and up to nine fractional digits.
    /// Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rdbSnapshotStartTime")]
    pub rdb_snapshot_start_time: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderServerCaCerts {
    /// (Output)
    /// The certificate data in PEM format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cert: Option<String>,
    /// (Output)
    /// The time when the certificate was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createTime")]
    pub create_time: Option<String>,
    /// (Output)
    /// The time when the certificate expires.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expireTime")]
    pub expire_time: Option<String>,
    /// (Output)
    /// Serial number, as extracted from the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serialNumber")]
    pub serial_number: Option<String>,
    /// (Output)
    /// Sha1 Fingerprint of the certificate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha1Fingerprint")]
    pub sha1_fingerprint: Option<String>,
}


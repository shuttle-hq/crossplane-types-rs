// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// UptimeCheckConfigSpec defines the desired state of UptimeCheckConfig
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "monitoring.gcp.upbound.io", version = "v1beta2", kind = "UptimeCheckConfig", plural = "uptimecheckconfigs")]
#[kube(status = "UptimeCheckConfigStatus")]
pub struct UptimeCheckConfigSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<UptimeCheckConfigDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: UptimeCheckConfigForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<UptimeCheckConfigInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<UptimeCheckConfigProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<UptimeCheckConfigPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<UptimeCheckConfigWriteConnectionSecretToRef>,
}

/// UptimeCheckConfigSpec defines the desired state of UptimeCheckConfig
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProvider {
    /// The checker type to use for the check. If the monitored resource type is servicedirectory_service, checker_type must be set to VPC_CHECKERS.
    /// Possible values are: STATIC_IP_CHECKERS, VPC_CHECKERS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkerType")]
    pub checker_type: Option<String>,
    /// The expected content on the page the check is run against. Currently, only the first entry in the list is supported, and other entries will be ignored. The server will look for an exact match of the string in the page response's content. This field is optional and should only be specified if a content match is required.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMatchers")]
    pub content_matchers: Option<Vec<UptimeCheckConfigForProviderContentMatchers>>,
    /// A human-friendly name for the uptime check configuration. The display name should be unique within a Stackdriver Workspace in order to make it easier to identify; however, uniqueness is not enforced.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// Contains information needed to make an HTTP or HTTPS check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpCheck")]
    pub http_check: Option<UptimeCheckConfigForProviderHttpCheck>,
    /// The [monitored resource]
    /// (https://cloud.google.com/monitoring/api/resources) associated with the
    /// configuration. The following monitored resource types are supported for
    /// uptime checks:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoredResource")]
    pub monitored_resource: Option<UptimeCheckConfigForProviderMonitoredResource>,
    /// How often, in seconds, the uptime check is performed. Currently, the only supported values are 60s (1 minute), 300s (5 minutes), 600s (10 minutes), and 900s (15 minutes). Optional, defaults to 300s.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub period: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The group resource associated with the configuration.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroup")]
    pub resource_group: Option<UptimeCheckConfigForProviderResourceGroup>,
    /// The list of regions from which the check will be run. Some regions contain one location, and others contain more than one. If this field is specified, enough regions to include a minimum of 3 locations must be provided, or an error message is returned. Not specifying this field will result in uptime checks running from all regions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectedRegions")]
    pub selected_regions: Option<Vec<String>>,
    /// A Synthetic Monitor deployed to a Cloud Functions V2 instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syntheticMonitor")]
    pub synthetic_monitor: Option<UptimeCheckConfigForProviderSyntheticMonitor>,
    /// Contains information needed to make a TCP check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpCheck")]
    pub tcp_check: Option<UptimeCheckConfigForProviderTcpCheck>,
    /// The maximum amount of time to wait for the request to complete (must be between 1 and 60 seconds). See the accepted formats
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
    /// User-supplied key/value data to be used for organizing and identifying the UptimeCheckConfig objects. The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userLabels")]
    pub user_labels: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderContentMatchers {
    /// String or regex content to match (max 1024 bytes)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// Information needed to perform a JSONPath content match. Used for ContentMatcherOption::MATCHES_JSON_PATH and ContentMatcherOption::NOT_MATCHES_JSON_PATH.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPathMatcher")]
    pub json_path_matcher: Option<UptimeCheckConfigForProviderContentMatchersJsonPathMatcher>,
    /// The type of content matcher that will be applied to the server output, compared to the content string when the check is run.
    /// Default value is CONTAINS_STRING.
    /// Possible values are: CONTAINS_STRING, NOT_CONTAINS_STRING, MATCHES_REGEX, NOT_MATCHES_REGEX, MATCHES_JSON_PATH, NOT_MATCHES_JSON_PATH.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<String>,
}

/// Information needed to perform a JSONPath content match. Used for ContentMatcherOption::MATCHES_JSON_PATH and ContentMatcherOption::NOT_MATCHES_JSON_PATH.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderContentMatchersJsonPathMatcher {
    /// Options to perform JSONPath content matching.
    /// Default value is EXACT_MATCH.
    /// Possible values are: EXACT_MATCH, REGEX_MATCH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonMatcher")]
    pub json_matcher: Option<String>,
    /// JSONPath within the response output pointing to the expected ContentMatcher::content to match against.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    pub json_path: Option<String>,
}

/// Contains information needed to make an HTTP or HTTPS check.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderHttpCheck {
    /// If present, the check will only pass if the HTTP response status code is in this set of status codes. If empty, the HTTP status code will only pass if the HTTP status code is 200-299.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceptedResponseStatusCodes")]
    pub accepted_response_status_codes: Option<Vec<UptimeCheckConfigForProviderHttpCheckAcceptedResponseStatusCodes>>,
    /// The authentication information using username and password. Optional when creating an HTTP check; defaults to empty. Do not use with other authentication fields.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authInfo")]
    pub auth_info: Option<UptimeCheckConfigForProviderHttpCheckAuthInfo>,
    /// The request body associated with the HTTP POST request. If content_type is URL_ENCODED, the body passed in must be URL-encoded. Users can provide a Content-Length header via the headers field or the API will do so. If the request_method is GET and body is not empty, the API will return an error. The maximum byte size is 1 megabyte. Note - As with all bytes fields JSON representations are base64 encoded. e.g. foo=bar in URL-encoded form is foo%3Dbar and in base64 encoding is Zm9vJTI1M0RiYXI=.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    /// The content type to use for the check.
    /// Possible values are: TYPE_UNSPECIFIED, URL_ENCODED, USER_PROVIDED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    /// A user provided content type header to use for the check. The invalid configurations outlined in the content_type field apply to custom_content_type, as well as the following 1. content_typeisURL_ENCODEDandcustom_content_typeis set. 2.content_typeisUSER_PROVIDEDandcustom_content_type` is not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customContentType")]
    pub custom_content_type: Option<String>,
    /// The list of headers to send as part of the uptime check request. If two headers have the same key and different values, they should be entered as a single header, with the value being a comma-separated list of all the desired values as described in RFC 2616 (page 31). Entering two separate headers with the same key in a Create call will cause the first to be overwritten by the second. The maximum number of headers allowed is 100.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<HashMap<String, String>>,
    /// Boolean specifying whether to encrypt the header information. Encryption should be specified for any headers related to authentication that you do not wish to be seen when retrieving the configuration. The server will be responsible for encrypting the headers. On Get/List calls, if mask_headers is set to true then the headers will be obscured with ******.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maskHeaders")]
    pub mask_headers: Option<bool>,
    /// The path to the page to run the check against. Will be combined with the host (specified within the MonitoredResource) and port to construct the full URL. If the provided path does not begin with /, a / will be prepended automatically. Optional (defaults to /).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Contains information needed to add pings to an HTTP check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pingConfig")]
    pub ping_config: Option<UptimeCheckConfigForProviderHttpCheckPingConfig>,
    /// The port to the page to run the check against. Will be combined with host (specified within the monitored_resource) and path to construct the full URL. Optional (defaults to 80 without SSL, or 443 with SSL).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// The HTTP request method to use for the check. If set to METHOD_UNSPECIFIED then request_method defaults to GET.
    /// Default value is GET.
    /// Possible values are: METHOD_UNSPECIFIED, GET, POST.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMethod")]
    pub request_method: Option<String>,
    /// The authentication information using the Monitoring Service Agent. Optional when creating an HTTPS check; defaults to empty. Do not use with other authentication fields.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAgentAuthentication")]
    pub service_agent_authentication: Option<UptimeCheckConfigForProviderHttpCheckServiceAgentAuthentication>,
    /// If true, use HTTPS instead of HTTP to run the check.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useSsl")]
    pub use_ssl: Option<bool>,
    /// Boolean specifying whether to include SSL certificate validation as a part of the Uptime check. Only applies to checks where monitored_resource is set to uptime_url. If use_ssl is false, setting validate_ssl to true has no effect.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validateSsl")]
    pub validate_ssl: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderHttpCheckAcceptedResponseStatusCodes {
    /// A class of status codes to accept.
    /// Possible values are: STATUS_CLASS_1XX, STATUS_CLASS_2XX, STATUS_CLASS_3XX, STATUS_CLASS_4XX, STATUS_CLASS_5XX, STATUS_CLASS_ANY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusClass")]
    pub status_class: Option<String>,
    /// A status code to accept.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusValue")]
    pub status_value: Option<f64>,
}

/// The authentication information using username and password. Optional when creating an HTTP check; defaults to empty. Do not use with other authentication fields.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderHttpCheckAuthInfo {
    /// The password to authenticate.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretRef")]
    pub password_secret_ref: Option<UptimeCheckConfigForProviderHttpCheckAuthInfoPasswordSecretRef>,
    /// The username to authenticate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// The password to authenticate.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderHttpCheckAuthInfoPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Contains information needed to add pings to an HTTP check.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderHttpCheckPingConfig {
    /// Number of ICMP pings. A maximum of 3 ICMP pings is currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pingsCount")]
    pub pings_count: Option<f64>,
}

/// The authentication information using the Monitoring Service Agent. Optional when creating an HTTPS check; defaults to empty. Do not use with other authentication fields.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderHttpCheckServiceAgentAuthentication {
    /// The type of authentication to use.
    /// Possible values are: SERVICE_AGENT_AUTHENTICATION_TYPE_UNSPECIFIED, OIDC_TOKEN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// The [monitored resource]
/// (https://cloud.google.com/monitoring/api/resources) associated with the
/// configuration. The following monitored resource types are supported for
/// uptime checks:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderMonitoredResource {
    /// Values for all of the labels listed in the associated monitored resource descriptor. For example, Compute Engine VM instances use the labels project_id, instance_id, and zone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The monitored resource type. This field must match the type field of a MonitoredResourceDescriptor object. For example, the type of a Compute Engine VM instance is gce_instance. For a list of types, see Monitoring resource types and Logging resource types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// The group resource associated with the configuration.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderResourceGroup {
    /// The group of resources being monitored. Should be the name of a group
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupId")]
    pub group_id: Option<String>,
    /// Reference to a Group in monitoring to populate groupId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupIdRef")]
    pub group_id_ref: Option<UptimeCheckConfigForProviderResourceGroupGroupIdRef>,
    /// Selector for a Group in monitoring to populate groupId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupIdSelector")]
    pub group_id_selector: Option<UptimeCheckConfigForProviderResourceGroupGroupIdSelector>,
    /// The resource type of the group members.
    /// Possible values are: RESOURCE_TYPE_UNSPECIFIED, INSTANCE, AWS_ELB_LOAD_BALANCER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceType")]
    pub resource_type: Option<String>,
}

/// Reference to a Group in monitoring to populate groupId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderResourceGroupGroupIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<UptimeCheckConfigForProviderResourceGroupGroupIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderResourceGroupGroupIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<UptimeCheckConfigForProviderResourceGroupGroupIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<UptimeCheckConfigForProviderResourceGroupGroupIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigForProviderResourceGroupGroupIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigForProviderResourceGroupGroupIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Group in monitoring to populate groupId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderResourceGroupGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<UptimeCheckConfigForProviderResourceGroupGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderResourceGroupGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<UptimeCheckConfigForProviderResourceGroupGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<UptimeCheckConfigForProviderResourceGroupGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigForProviderResourceGroupGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigForProviderResourceGroupGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Synthetic Monitor deployed to a Cloud Functions V2 instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderSyntheticMonitor {
    /// Target a Synthetic Monitor GCFv2 Instance
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudFunctionV2")]
    pub cloud_function_v2: Option<UptimeCheckConfigForProviderSyntheticMonitorCloudFunctionV2>,
}

/// Target a Synthetic Monitor GCFv2 Instance
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderSyntheticMonitorCloudFunctionV2 {
    /// The fully qualified name of the cloud function resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Reference to a Function in cloudfunctions2 to populate name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameRef")]
    pub name_ref: Option<UptimeCheckConfigForProviderSyntheticMonitorCloudFunctionV2NameRef>,
    /// Selector for a Function in cloudfunctions2 to populate name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSelector")]
    pub name_selector: Option<UptimeCheckConfigForProviderSyntheticMonitorCloudFunctionV2NameSelector>,
}

/// Reference to a Function in cloudfunctions2 to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderSyntheticMonitorCloudFunctionV2NameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<UptimeCheckConfigForProviderSyntheticMonitorCloudFunctionV2NameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderSyntheticMonitorCloudFunctionV2NameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<UptimeCheckConfigForProviderSyntheticMonitorCloudFunctionV2NameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<UptimeCheckConfigForProviderSyntheticMonitorCloudFunctionV2NameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigForProviderSyntheticMonitorCloudFunctionV2NameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigForProviderSyntheticMonitorCloudFunctionV2NameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Function in cloudfunctions2 to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderSyntheticMonitorCloudFunctionV2NameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<UptimeCheckConfigForProviderSyntheticMonitorCloudFunctionV2NameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderSyntheticMonitorCloudFunctionV2NameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<UptimeCheckConfigForProviderSyntheticMonitorCloudFunctionV2NameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<UptimeCheckConfigForProviderSyntheticMonitorCloudFunctionV2NameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigForProviderSyntheticMonitorCloudFunctionV2NameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigForProviderSyntheticMonitorCloudFunctionV2NameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Contains information needed to make a TCP check.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderTcpCheck {
    /// Contains information needed to add pings to a TCP check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pingConfig")]
    pub ping_config: Option<UptimeCheckConfigForProviderTcpCheckPingConfig>,
    /// The port to the page to run the check against. Will be combined with host (specified within the monitored_resource) to construct the full URL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
}

/// Contains information needed to add pings to a TCP check.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigForProviderTcpCheckPingConfig {
    /// Number of ICMP pings. A maximum of 3 ICMP pings is currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pingsCount")]
    pub pings_count: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProvider {
    /// The checker type to use for the check. If the monitored resource type is servicedirectory_service, checker_type must be set to VPC_CHECKERS.
    /// Possible values are: STATIC_IP_CHECKERS, VPC_CHECKERS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkerType")]
    pub checker_type: Option<String>,
    /// The expected content on the page the check is run against. Currently, only the first entry in the list is supported, and other entries will be ignored. The server will look for an exact match of the string in the page response's content. This field is optional and should only be specified if a content match is required.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMatchers")]
    pub content_matchers: Option<Vec<UptimeCheckConfigInitProviderContentMatchers>>,
    /// A human-friendly name for the uptime check configuration. The display name should be unique within a Stackdriver Workspace in order to make it easier to identify; however, uniqueness is not enforced.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// Contains information needed to make an HTTP or HTTPS check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpCheck")]
    pub http_check: Option<UptimeCheckConfigInitProviderHttpCheck>,
    /// The [monitored resource]
    /// (https://cloud.google.com/monitoring/api/resources) associated with the
    /// configuration. The following monitored resource types are supported for
    /// uptime checks:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoredResource")]
    pub monitored_resource: Option<UptimeCheckConfigInitProviderMonitoredResource>,
    /// How often, in seconds, the uptime check is performed. Currently, the only supported values are 60s (1 minute), 300s (5 minutes), 600s (10 minutes), and 900s (15 minutes). Optional, defaults to 300s.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub period: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The group resource associated with the configuration.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroup")]
    pub resource_group: Option<UptimeCheckConfigInitProviderResourceGroup>,
    /// The list of regions from which the check will be run. Some regions contain one location, and others contain more than one. If this field is specified, enough regions to include a minimum of 3 locations must be provided, or an error message is returned. Not specifying this field will result in uptime checks running from all regions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectedRegions")]
    pub selected_regions: Option<Vec<String>>,
    /// A Synthetic Monitor deployed to a Cloud Functions V2 instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syntheticMonitor")]
    pub synthetic_monitor: Option<UptimeCheckConfigInitProviderSyntheticMonitor>,
    /// Contains information needed to make a TCP check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpCheck")]
    pub tcp_check: Option<UptimeCheckConfigInitProviderTcpCheck>,
    /// The maximum amount of time to wait for the request to complete (must be between 1 and 60 seconds). See the accepted formats
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
    /// User-supplied key/value data to be used for organizing and identifying the UptimeCheckConfig objects. The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userLabels")]
    pub user_labels: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderContentMatchers {
    /// String or regex content to match (max 1024 bytes)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// Information needed to perform a JSONPath content match. Used for ContentMatcherOption::MATCHES_JSON_PATH and ContentMatcherOption::NOT_MATCHES_JSON_PATH.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPathMatcher")]
    pub json_path_matcher: Option<UptimeCheckConfigInitProviderContentMatchersJsonPathMatcher>,
    /// The type of content matcher that will be applied to the server output, compared to the content string when the check is run.
    /// Default value is CONTAINS_STRING.
    /// Possible values are: CONTAINS_STRING, NOT_CONTAINS_STRING, MATCHES_REGEX, NOT_MATCHES_REGEX, MATCHES_JSON_PATH, NOT_MATCHES_JSON_PATH.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<String>,
}

/// Information needed to perform a JSONPath content match. Used for ContentMatcherOption::MATCHES_JSON_PATH and ContentMatcherOption::NOT_MATCHES_JSON_PATH.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderContentMatchersJsonPathMatcher {
    /// Options to perform JSONPath content matching.
    /// Default value is EXACT_MATCH.
    /// Possible values are: EXACT_MATCH, REGEX_MATCH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonMatcher")]
    pub json_matcher: Option<String>,
    /// JSONPath within the response output pointing to the expected ContentMatcher::content to match against.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    pub json_path: Option<String>,
}

/// Contains information needed to make an HTTP or HTTPS check.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderHttpCheck {
    /// If present, the check will only pass if the HTTP response status code is in this set of status codes. If empty, the HTTP status code will only pass if the HTTP status code is 200-299.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceptedResponseStatusCodes")]
    pub accepted_response_status_codes: Option<Vec<UptimeCheckConfigInitProviderHttpCheckAcceptedResponseStatusCodes>>,
    /// The authentication information using username and password. Optional when creating an HTTP check; defaults to empty. Do not use with other authentication fields.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authInfo")]
    pub auth_info: Option<UptimeCheckConfigInitProviderHttpCheckAuthInfo>,
    /// The request body associated with the HTTP POST request. If content_type is URL_ENCODED, the body passed in must be URL-encoded. Users can provide a Content-Length header via the headers field or the API will do so. If the request_method is GET and body is not empty, the API will return an error. The maximum byte size is 1 megabyte. Note - As with all bytes fields JSON representations are base64 encoded. e.g. foo=bar in URL-encoded form is foo%3Dbar and in base64 encoding is Zm9vJTI1M0RiYXI=.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    /// The content type to use for the check.
    /// Possible values are: TYPE_UNSPECIFIED, URL_ENCODED, USER_PROVIDED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    /// A user provided content type header to use for the check. The invalid configurations outlined in the content_type field apply to custom_content_type, as well as the following 1. content_typeisURL_ENCODEDandcustom_content_typeis set. 2.content_typeisUSER_PROVIDEDandcustom_content_type` is not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customContentType")]
    pub custom_content_type: Option<String>,
    /// The list of headers to send as part of the uptime check request. If two headers have the same key and different values, they should be entered as a single header, with the value being a comma-separated list of all the desired values as described in RFC 2616 (page 31). Entering two separate headers with the same key in a Create call will cause the first to be overwritten by the second. The maximum number of headers allowed is 100.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<HashMap<String, String>>,
    /// Boolean specifying whether to encrypt the header information. Encryption should be specified for any headers related to authentication that you do not wish to be seen when retrieving the configuration. The server will be responsible for encrypting the headers. On Get/List calls, if mask_headers is set to true then the headers will be obscured with ******.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maskHeaders")]
    pub mask_headers: Option<bool>,
    /// The path to the page to run the check against. Will be combined with the host (specified within the MonitoredResource) and port to construct the full URL. If the provided path does not begin with /, a / will be prepended automatically. Optional (defaults to /).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Contains information needed to add pings to an HTTP check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pingConfig")]
    pub ping_config: Option<UptimeCheckConfigInitProviderHttpCheckPingConfig>,
    /// The port to the page to run the check against. Will be combined with host (specified within the monitored_resource) and path to construct the full URL. Optional (defaults to 80 without SSL, or 443 with SSL).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// The HTTP request method to use for the check. If set to METHOD_UNSPECIFIED then request_method defaults to GET.
    /// Default value is GET.
    /// Possible values are: METHOD_UNSPECIFIED, GET, POST.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMethod")]
    pub request_method: Option<String>,
    /// The authentication information using the Monitoring Service Agent. Optional when creating an HTTPS check; defaults to empty. Do not use with other authentication fields.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAgentAuthentication")]
    pub service_agent_authentication: Option<UptimeCheckConfigInitProviderHttpCheckServiceAgentAuthentication>,
    /// If true, use HTTPS instead of HTTP to run the check.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useSsl")]
    pub use_ssl: Option<bool>,
    /// Boolean specifying whether to include SSL certificate validation as a part of the Uptime check. Only applies to checks where monitored_resource is set to uptime_url. If use_ssl is false, setting validate_ssl to true has no effect.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validateSsl")]
    pub validate_ssl: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderHttpCheckAcceptedResponseStatusCodes {
    /// A class of status codes to accept.
    /// Possible values are: STATUS_CLASS_1XX, STATUS_CLASS_2XX, STATUS_CLASS_3XX, STATUS_CLASS_4XX, STATUS_CLASS_5XX, STATUS_CLASS_ANY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusClass")]
    pub status_class: Option<String>,
    /// A status code to accept.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusValue")]
    pub status_value: Option<f64>,
}

/// The authentication information using username and password. Optional when creating an HTTP check; defaults to empty. Do not use with other authentication fields.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderHttpCheckAuthInfo {
    /// The password to authenticate.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(rename = "passwordSecretRef")]
    pub password_secret_ref: UptimeCheckConfigInitProviderHttpCheckAuthInfoPasswordSecretRef,
    /// The username to authenticate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// The password to authenticate.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderHttpCheckAuthInfoPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Contains information needed to add pings to an HTTP check.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderHttpCheckPingConfig {
    /// Number of ICMP pings. A maximum of 3 ICMP pings is currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pingsCount")]
    pub pings_count: Option<f64>,
}

/// The authentication information using the Monitoring Service Agent. Optional when creating an HTTPS check; defaults to empty. Do not use with other authentication fields.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderHttpCheckServiceAgentAuthentication {
    /// The type of authentication to use.
    /// Possible values are: SERVICE_AGENT_AUTHENTICATION_TYPE_UNSPECIFIED, OIDC_TOKEN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// The [monitored resource]
/// (https://cloud.google.com/monitoring/api/resources) associated with the
/// configuration. The following monitored resource types are supported for
/// uptime checks:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderMonitoredResource {
    /// Values for all of the labels listed in the associated monitored resource descriptor. For example, Compute Engine VM instances use the labels project_id, instance_id, and zone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The monitored resource type. This field must match the type field of a MonitoredResourceDescriptor object. For example, the type of a Compute Engine VM instance is gce_instance. For a list of types, see Monitoring resource types and Logging resource types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// The group resource associated with the configuration.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderResourceGroup {
    /// The group of resources being monitored. Should be the name of a group
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupId")]
    pub group_id: Option<String>,
    /// Reference to a Group in monitoring to populate groupId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupIdRef")]
    pub group_id_ref: Option<UptimeCheckConfigInitProviderResourceGroupGroupIdRef>,
    /// Selector for a Group in monitoring to populate groupId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupIdSelector")]
    pub group_id_selector: Option<UptimeCheckConfigInitProviderResourceGroupGroupIdSelector>,
    /// The resource type of the group members.
    /// Possible values are: RESOURCE_TYPE_UNSPECIFIED, INSTANCE, AWS_ELB_LOAD_BALANCER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceType")]
    pub resource_type: Option<String>,
}

/// Reference to a Group in monitoring to populate groupId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderResourceGroupGroupIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<UptimeCheckConfigInitProviderResourceGroupGroupIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderResourceGroupGroupIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<UptimeCheckConfigInitProviderResourceGroupGroupIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<UptimeCheckConfigInitProviderResourceGroupGroupIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigInitProviderResourceGroupGroupIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigInitProviderResourceGroupGroupIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Group in monitoring to populate groupId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderResourceGroupGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<UptimeCheckConfigInitProviderResourceGroupGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderResourceGroupGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<UptimeCheckConfigInitProviderResourceGroupGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<UptimeCheckConfigInitProviderResourceGroupGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigInitProviderResourceGroupGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigInitProviderResourceGroupGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Synthetic Monitor deployed to a Cloud Functions V2 instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderSyntheticMonitor {
    /// Target a Synthetic Monitor GCFv2 Instance
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudFunctionV2")]
    pub cloud_function_v2: Option<UptimeCheckConfigInitProviderSyntheticMonitorCloudFunctionV2>,
}

/// Target a Synthetic Monitor GCFv2 Instance
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderSyntheticMonitorCloudFunctionV2 {
    /// The fully qualified name of the cloud function resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Reference to a Function in cloudfunctions2 to populate name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameRef")]
    pub name_ref: Option<UptimeCheckConfigInitProviderSyntheticMonitorCloudFunctionV2NameRef>,
    /// Selector for a Function in cloudfunctions2 to populate name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nameSelector")]
    pub name_selector: Option<UptimeCheckConfigInitProviderSyntheticMonitorCloudFunctionV2NameSelector>,
}

/// Reference to a Function in cloudfunctions2 to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderSyntheticMonitorCloudFunctionV2NameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<UptimeCheckConfigInitProviderSyntheticMonitorCloudFunctionV2NameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderSyntheticMonitorCloudFunctionV2NameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<UptimeCheckConfigInitProviderSyntheticMonitorCloudFunctionV2NameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<UptimeCheckConfigInitProviderSyntheticMonitorCloudFunctionV2NameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigInitProviderSyntheticMonitorCloudFunctionV2NameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigInitProviderSyntheticMonitorCloudFunctionV2NameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Function in cloudfunctions2 to populate name.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderSyntheticMonitorCloudFunctionV2NameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<UptimeCheckConfigInitProviderSyntheticMonitorCloudFunctionV2NameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderSyntheticMonitorCloudFunctionV2NameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<UptimeCheckConfigInitProviderSyntheticMonitorCloudFunctionV2NameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<UptimeCheckConfigInitProviderSyntheticMonitorCloudFunctionV2NameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigInitProviderSyntheticMonitorCloudFunctionV2NameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigInitProviderSyntheticMonitorCloudFunctionV2NameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Contains information needed to make a TCP check.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderTcpCheck {
    /// Contains information needed to add pings to a TCP check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pingConfig")]
    pub ping_config: Option<UptimeCheckConfigInitProviderTcpCheckPingConfig>,
    /// The port to the page to run the check against. Will be combined with host (specified within the monitored_resource) to construct the full URL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
}

/// Contains information needed to add pings to a TCP check.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigInitProviderTcpCheckPingConfig {
    /// Number of ICMP pings. A maximum of 3 ICMP pings is currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pingsCount")]
    pub pings_count: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<UptimeCheckConfigProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<UptimeCheckConfigProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<UptimeCheckConfigProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<UptimeCheckConfigPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<UptimeCheckConfigPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<UptimeCheckConfigPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<UptimeCheckConfigPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<UptimeCheckConfigPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum UptimeCheckConfigPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// UptimeCheckConfigStatus defines the observed state of UptimeCheckConfig.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<UptimeCheckConfigStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigStatusAtProvider {
    /// The checker type to use for the check. If the monitored resource type is servicedirectory_service, checker_type must be set to VPC_CHECKERS.
    /// Possible values are: STATIC_IP_CHECKERS, VPC_CHECKERS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "checkerType")]
    pub checker_type: Option<String>,
    /// The expected content on the page the check is run against. Currently, only the first entry in the list is supported, and other entries will be ignored. The server will look for an exact match of the string in the page response's content. This field is optional and should only be specified if a content match is required.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentMatchers")]
    pub content_matchers: Option<Vec<UptimeCheckConfigStatusAtProviderContentMatchers>>,
    /// A human-friendly name for the uptime check configuration. The display name should be unique within a Stackdriver Workspace in order to make it easier to identify; however, uniqueness is not enforced.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// Contains information needed to make an HTTP or HTTPS check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpCheck")]
    pub http_check: Option<UptimeCheckConfigStatusAtProviderHttpCheck>,
    /// an identifier for the resource with format {{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The [monitored resource]
    /// (https://cloud.google.com/monitoring/api/resources) associated with the
    /// configuration. The following monitored resource types are supported for
    /// uptime checks:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoredResource")]
    pub monitored_resource: Option<UptimeCheckConfigStatusAtProviderMonitoredResource>,
    /// A unique resource name for this UptimeCheckConfig. The format is projects/[PROJECT_ID]/uptimeCheckConfigs/[UPTIME_CHECK_ID].
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// How often, in seconds, the uptime check is performed. Currently, the only supported values are 60s (1 minute), 300s (5 minutes), 600s (10 minutes), and 900s (15 minutes). Optional, defaults to 300s.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub period: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The group resource associated with the configuration.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroup")]
    pub resource_group: Option<UptimeCheckConfigStatusAtProviderResourceGroup>,
    /// The list of regions from which the check will be run. Some regions contain one location, and others contain more than one. If this field is specified, enough regions to include a minimum of 3 locations must be provided, or an error message is returned. Not specifying this field will result in uptime checks running from all regions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selectedRegions")]
    pub selected_regions: Option<Vec<String>>,
    /// A Synthetic Monitor deployed to a Cloud Functions V2 instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "syntheticMonitor")]
    pub synthetic_monitor: Option<UptimeCheckConfigStatusAtProviderSyntheticMonitor>,
    /// Contains information needed to make a TCP check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpCheck")]
    pub tcp_check: Option<UptimeCheckConfigStatusAtProviderTcpCheck>,
    /// The maximum amount of time to wait for the request to complete (must be between 1 and 60 seconds). See the accepted formats
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<String>,
    /// The id of the uptime check
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uptimeCheckId")]
    pub uptime_check_id: Option<String>,
    /// User-supplied key/value data to be used for organizing and identifying the UptimeCheckConfig objects. The field can contain up to 64 entries. Each key and value is limited to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values can contain only lowercase letters, numerals, underscores, and dashes. Keys must begin with a letter.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userLabels")]
    pub user_labels: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigStatusAtProviderContentMatchers {
    /// String or regex content to match (max 1024 bytes)
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// Information needed to perform a JSONPath content match. Used for ContentMatcherOption::MATCHES_JSON_PATH and ContentMatcherOption::NOT_MATCHES_JSON_PATH.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPathMatcher")]
    pub json_path_matcher: Option<UptimeCheckConfigStatusAtProviderContentMatchersJsonPathMatcher>,
    /// The type of content matcher that will be applied to the server output, compared to the content string when the check is run.
    /// Default value is CONTAINS_STRING.
    /// Possible values are: CONTAINS_STRING, NOT_CONTAINS_STRING, MATCHES_REGEX, NOT_MATCHES_REGEX, MATCHES_JSON_PATH, NOT_MATCHES_JSON_PATH.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub matcher: Option<String>,
}

/// Information needed to perform a JSONPath content match. Used for ContentMatcherOption::MATCHES_JSON_PATH and ContentMatcherOption::NOT_MATCHES_JSON_PATH.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigStatusAtProviderContentMatchersJsonPathMatcher {
    /// Options to perform JSONPath content matching.
    /// Default value is EXACT_MATCH.
    /// Possible values are: EXACT_MATCH, REGEX_MATCH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonMatcher")]
    pub json_matcher: Option<String>,
    /// JSONPath within the response output pointing to the expected ContentMatcher::content to match against.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jsonPath")]
    pub json_path: Option<String>,
}

/// Contains information needed to make an HTTP or HTTPS check.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigStatusAtProviderHttpCheck {
    /// If present, the check will only pass if the HTTP response status code is in this set of status codes. If empty, the HTTP status code will only pass if the HTTP status code is 200-299.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceptedResponseStatusCodes")]
    pub accepted_response_status_codes: Option<Vec<UptimeCheckConfigStatusAtProviderHttpCheckAcceptedResponseStatusCodes>>,
    /// The authentication information using username and password. Optional when creating an HTTP check; defaults to empty. Do not use with other authentication fields.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authInfo")]
    pub auth_info: Option<UptimeCheckConfigStatusAtProviderHttpCheckAuthInfo>,
    /// The request body associated with the HTTP POST request. If content_type is URL_ENCODED, the body passed in must be URL-encoded. Users can provide a Content-Length header via the headers field or the API will do so. If the request_method is GET and body is not empty, the API will return an error. The maximum byte size is 1 megabyte. Note - As with all bytes fields JSON representations are base64 encoded. e.g. foo=bar in URL-encoded form is foo%3Dbar and in base64 encoding is Zm9vJTI1M0RiYXI=.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<String>,
    /// The content type to use for the check.
    /// Possible values are: TYPE_UNSPECIFIED, URL_ENCODED, USER_PROVIDED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    /// A user provided content type header to use for the check. The invalid configurations outlined in the content_type field apply to custom_content_type, as well as the following 1. content_typeisURL_ENCODEDandcustom_content_typeis set. 2.content_typeisUSER_PROVIDEDandcustom_content_type` is not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customContentType")]
    pub custom_content_type: Option<String>,
    /// The list of headers to send as part of the uptime check request. If two headers have the same key and different values, they should be entered as a single header, with the value being a comma-separated list of all the desired values as described in RFC 2616 (page 31). Entering two separate headers with the same key in a Create call will cause the first to be overwritten by the second. The maximum number of headers allowed is 100.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub headers: Option<HashMap<String, String>>,
    /// Boolean specifying whether to encrypt the header information. Encryption should be specified for any headers related to authentication that you do not wish to be seen when retrieving the configuration. The server will be responsible for encrypting the headers. On Get/List calls, if mask_headers is set to true then the headers will be obscured with ******.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maskHeaders")]
    pub mask_headers: Option<bool>,
    /// The path to the page to run the check against. Will be combined with the host (specified within the MonitoredResource) and port to construct the full URL. If the provided path does not begin with /, a / will be prepended automatically. Optional (defaults to /).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Contains information needed to add pings to an HTTP check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pingConfig")]
    pub ping_config: Option<UptimeCheckConfigStatusAtProviderHttpCheckPingConfig>,
    /// The port to the page to run the check against. Will be combined with host (specified within the monitored_resource) and path to construct the full URL. Optional (defaults to 80 without SSL, or 443 with SSL).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// The HTTP request method to use for the check. If set to METHOD_UNSPECIFIED then request_method defaults to GET.
    /// Default value is GET.
    /// Possible values are: METHOD_UNSPECIFIED, GET, POST.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestMethod")]
    pub request_method: Option<String>,
    /// The authentication information using the Monitoring Service Agent. Optional when creating an HTTPS check; defaults to empty. Do not use with other authentication fields.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAgentAuthentication")]
    pub service_agent_authentication: Option<UptimeCheckConfigStatusAtProviderHttpCheckServiceAgentAuthentication>,
    /// If true, use HTTPS instead of HTTP to run the check.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useSsl")]
    pub use_ssl: Option<bool>,
    /// Boolean specifying whether to include SSL certificate validation as a part of the Uptime check. Only applies to checks where monitored_resource is set to uptime_url. If use_ssl is false, setting validate_ssl to true has no effect.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "validateSsl")]
    pub validate_ssl: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigStatusAtProviderHttpCheckAcceptedResponseStatusCodes {
    /// A class of status codes to accept.
    /// Possible values are: STATUS_CLASS_1XX, STATUS_CLASS_2XX, STATUS_CLASS_3XX, STATUS_CLASS_4XX, STATUS_CLASS_5XX, STATUS_CLASS_ANY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusClass")]
    pub status_class: Option<String>,
    /// A status code to accept.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusValue")]
    pub status_value: Option<f64>,
}

/// The authentication information using username and password. Optional when creating an HTTP check; defaults to empty. Do not use with other authentication fields.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigStatusAtProviderHttpCheckAuthInfo {
    /// The username to authenticate.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// Contains information needed to add pings to an HTTP check.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigStatusAtProviderHttpCheckPingConfig {
    /// Number of ICMP pings. A maximum of 3 ICMP pings is currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pingsCount")]
    pub pings_count: Option<f64>,
}

/// The authentication information using the Monitoring Service Agent. Optional when creating an HTTPS check; defaults to empty. Do not use with other authentication fields.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigStatusAtProviderHttpCheckServiceAgentAuthentication {
    /// The type of authentication to use.
    /// Possible values are: SERVICE_AGENT_AUTHENTICATION_TYPE_UNSPECIFIED, OIDC_TOKEN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// The [monitored resource]
/// (https://cloud.google.com/monitoring/api/resources) associated with the
/// configuration. The following monitored resource types are supported for
/// uptime checks:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigStatusAtProviderMonitoredResource {
    /// Values for all of the labels listed in the associated monitored resource descriptor. For example, Compute Engine VM instances use the labels project_id, instance_id, and zone.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The monitored resource type. This field must match the type field of a MonitoredResourceDescriptor object. For example, the type of a Compute Engine VM instance is gce_instance. For a list of types, see Monitoring resource types and Logging resource types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// The group resource associated with the configuration.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigStatusAtProviderResourceGroup {
    /// The group of resources being monitored. Should be the name of a group
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupId")]
    pub group_id: Option<String>,
    /// The resource type of the group members.
    /// Possible values are: RESOURCE_TYPE_UNSPECIFIED, INSTANCE, AWS_ELB_LOAD_BALANCER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceType")]
    pub resource_type: Option<String>,
}

/// A Synthetic Monitor deployed to a Cloud Functions V2 instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigStatusAtProviderSyntheticMonitor {
    /// Target a Synthetic Monitor GCFv2 Instance
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudFunctionV2")]
    pub cloud_function_v2: Option<UptimeCheckConfigStatusAtProviderSyntheticMonitorCloudFunctionV2>,
}

/// Target a Synthetic Monitor GCFv2 Instance
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigStatusAtProviderSyntheticMonitorCloudFunctionV2 {
    /// The fully qualified name of the cloud function resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Contains information needed to make a TCP check.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigStatusAtProviderTcpCheck {
    /// Contains information needed to add pings to a TCP check.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pingConfig")]
    pub ping_config: Option<UptimeCheckConfigStatusAtProviderTcpCheckPingConfig>,
    /// The port to the page to run the check against. Will be combined with host (specified within the monitored_resource) to construct the full URL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
}

/// Contains information needed to add pings to a TCP check.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct UptimeCheckConfigStatusAtProviderTcpCheckPingConfig {
    /// Number of ICMP pings. A maximum of 3 ICMP pings is currently supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pingsCount")]
    pub pings_count: Option<f64>,
}


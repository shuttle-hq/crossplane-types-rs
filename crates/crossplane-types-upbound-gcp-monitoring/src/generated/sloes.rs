// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// SLOSpec defines the desired state of SLO
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "monitoring.gcp.upbound.io", version = "v1beta2", kind = "SLO", plural = "sloes")]
#[kube(status = "SLOStatus")]
pub struct SLOSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<SLODeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: SLOForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<SLOInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<SLOProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<SLOPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<SLOWriteConnectionSecretToRef>,
}

/// SLOSpec defines the desired state of SLO
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SLODeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProvider {
    /// Basic Service-Level Indicator (SLI) on a well-known service type.
    /// Performance will be computed on the basis of pre-defined metrics.
    /// SLIs are used to measure and calculate the quality of the Service's
    /// performance with respect to a single aspect of service quality.
    /// Exactly one of the following must be set:
    /// basic_sli, request_based_sli, windows_based_sli
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicSli")]
    pub basic_sli: Option<SLOForProviderBasicSli>,
    /// A calendar period, semantically "since the start of the current
    /// ".
    /// Possible values are: DAY, WEEK, FORTNIGHT, MONTH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "calendarPeriod")]
    pub calendar_period: Option<String>,
    /// Name used for UI elements listing this SLO.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The fraction of service that must be good in order for this objective
    /// to be met. 0 < goal <= 0.999
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub goal: Option<f64>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// A request-based SLI defines a SLI for which atomic units of
    /// service are counted directly.
    /// A SLI describes a good service.
    /// It is used to measure and calculate the quality of the Service's
    /// performance with respect to a single aspect of service quality.
    /// Exactly one of the following must be set:
    /// basic_sli, request_based_sli, windows_based_sli
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestBasedSli")]
    pub request_based_sli: Option<SLOForProviderRequestBasedSli>,
    /// A rolling time period, semantically "in the past X days".
    /// Must be between 1 to 30 days, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingPeriodDays")]
    pub rolling_period_days: Option<f64>,
    /// ID of the service to which this SLO belongs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
    /// Reference to a CustomService in monitoring to populate service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRef")]
    pub service_ref: Option<SLOForProviderServiceRef>,
    /// Selector for a CustomService in monitoring to populate service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSelector")]
    pub service_selector: Option<SLOForProviderServiceSelector>,
    /// The id to use for this ServiceLevelObjective. If omitted, an id will be generated instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sloId")]
    pub slo_id: Option<String>,
    /// This field is intended to be used for organizing and identifying the AlertPolicy
    /// objects.The field can contain up to 64 entries. Each key and value is limited
    /// to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
    /// can contain only lowercase letters, numerals, underscores, and dashes. Keys
    /// must begin with a letter.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userLabels")]
    pub user_labels: Option<HashMap<String, String>>,
    /// A windows-based SLI defines the criteria for time windows.
    /// good_service is defined based off the count of these time windows
    /// for which the provided service was of good quality.
    /// A SLI describes a good service. It is used to measure and calculate
    /// the quality of the Service's performance with respect to a single
    /// aspect of service quality.
    /// Exactly one of the following must be set:
    /// basic_sli, request_based_sli, windows_based_sli
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsBasedSli")]
    pub windows_based_sli: Option<SLOForProviderWindowsBasedSli>,
}

/// Basic Service-Level Indicator (SLI) on a well-known service type.
/// Performance will be computed on the basis of pre-defined metrics.
/// SLIs are used to measure and calculate the quality of the Service's
/// performance with respect to a single aspect of service quality.
/// Exactly one of the following must be set:
/// basic_sli, request_based_sli, windows_based_sli
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderBasicSli {
    /// Availability based SLI, dervied from count of requests made to this service that return successfully.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub availability: Option<SLOForProviderBasicSliAvailability>,
    /// Parameters for a latency threshold SLI.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<SLOForProviderBasicSliLatency>,
    /// An optional set of locations to which this SLI is relevant.
    /// Telemetry from other locations will not be used to calculate
    /// performance for this SLI. If omitted, this SLI applies to all
    /// locations in which the Service has activity. For service types
    /// that don't support breaking down by location, setting this
    /// field will result in an error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<Vec<String>>,
    /// An optional set of RPCs to which this SLI is relevant.
    /// Telemetry from other methods will not be used to calculate
    /// performance for this SLI. If omitted, this SLI applies to all
    /// the Service's methods. For service types that don't support
    /// breaking down by method, setting this field will result in an
    /// error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<Vec<String>>,
    /// The set of API versions to which this SLI is relevant.
    /// Telemetry from other API versions will not be used to
    /// calculate performance for this SLI. If omitted,
    /// this SLI applies to all API versions. For service types
    /// that don't support breaking down by version, setting this
    /// field will result in an error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<Vec<String>>,
}

/// Availability based SLI, dervied from count of requests made to this service that return successfully.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderBasicSliAvailability {
    /// Whether an availability SLI is enabled or not. Must be set to true. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Parameters for a latency threshold SLI.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderBasicSliLatency {
    /// A duration string, e.g. 10s.
    /// Good service is defined to be the count of requests made to
    /// this service that return in no more than threshold.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threshold: Option<String>,
}

/// A request-based SLI defines a SLI for which atomic units of
/// service are counted directly.
/// A SLI describes a good service.
/// It is used to measure and calculate the quality of the Service's
/// performance with respect to a single aspect of service quality.
/// Exactly one of the following must be set:
/// basic_sli, request_based_sli, windows_based_sli
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderRequestBasedSli {
    /// Used when good_service is defined by a count of values aggregated in a
    /// Distribution that fall into a good range. The total_service is the
    /// total count of all values aggregated in the Distribution.
    /// Defines a distribution TimeSeries filter and thresholds used for
    /// measuring good service and total service.
    /// Exactly one of distribution_cut or good_total_ratio can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionCut")]
    pub distribution_cut: Option<SLOForProviderRequestBasedSliDistributionCut>,
    /// A means to compute a ratio of good_service to total_service.
    /// Defines computing this ratio with two TimeSeries monitoring filters
    /// Must specify exactly two of good, bad, and total service filters.
    /// The relationship good_service + bad_service = total_service
    /// will be assumed.
    /// Exactly one of distribution_cut or good_total_ratio can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goodTotalRatio")]
    pub good_total_ratio: Option<SLOForProviderRequestBasedSliGoodTotalRatio>,
}

/// Used when good_service is defined by a count of values aggregated in a
/// Distribution that fall into a good range. The total_service is the
/// total count of all values aggregated in the Distribution.
/// Defines a distribution TimeSeries filter and thresholds used for
/// measuring good service and total service.
/// Exactly one of distribution_cut or good_total_ratio can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderRequestBasedSliDistributionCut {
    /// A TimeSeries monitoring filter
    /// aggregating values to quantify the good service provided.
    /// Must have ValueType = DISTRIBUTION and
    /// MetricKind = DELTA or MetricKind = CUMULATIVE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionFilter")]
    pub distribution_filter: Option<String>,
    /// Range of numerical values. The computed good_service
    /// will be the count of values x in the Distribution such
    /// that range.min <= x <= range.max. inclusive of min and
    /// max. Open ranges can be defined by setting
    /// just one of min or max. Summed value X should satisfy
    /// range.min <= X <= range.max for a good window.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<SLOForProviderRequestBasedSliDistributionCutRange>,
}

/// Range of numerical values. The computed good_service
/// will be the count of values x in the Distribution such
/// that range.min <= x <= range.max. inclusive of min and
/// max. Open ranges can be defined by setting
/// just one of min or max. Summed value X should satisfy
/// range.min <= X <= range.max for a good window.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderRequestBasedSliDistributionCutRange {
    /// max value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<f64>,
    /// Min value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<f64>,
}

/// A means to compute a ratio of good_service to total_service.
/// Defines computing this ratio with two TimeSeries monitoring filters
/// Must specify exactly two of good, bad, and total service filters.
/// The relationship good_service + bad_service = total_service
/// will be assumed.
/// Exactly one of distribution_cut or good_total_ratio can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderRequestBasedSliGoodTotalRatio {
    /// A TimeSeries monitoring filter
    /// quantifying bad service provided, either demanded service that
    /// was not provided or demanded service that was of inadequate
    /// quality.
    /// Must have ValueType = DOUBLE or ValueType = INT64 and
    /// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
    /// Exactly two of good_service_filter,bad_service_filter,total_service_filter
    /// must be set (good + bad = total is assumed).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "badServiceFilter")]
    pub bad_service_filter: Option<String>,
    /// A TimeSeries monitoring filter
    /// quantifying good service provided.
    /// Must have ValueType = DOUBLE or ValueType = INT64 and
    /// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
    /// Exactly two of good_service_filter,bad_service_filter,total_service_filter
    /// must be set (good + bad = total is assumed).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goodServiceFilter")]
    pub good_service_filter: Option<String>,
    /// A TimeSeries monitoring filter
    /// quantifying total demanded service.
    /// Must have ValueType = DOUBLE or ValueType = INT64 and
    /// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
    /// Exactly two of good_service_filter,bad_service_filter,total_service_filter
    /// must be set (good + bad = total is assumed).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalServiceFilter")]
    pub total_service_filter: Option<String>,
}

/// Reference to a CustomService in monitoring to populate service.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderServiceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SLOForProviderServiceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderServiceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SLOForProviderServiceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SLOForProviderServiceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SLOForProviderServiceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SLOForProviderServiceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CustomService in monitoring to populate service.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderServiceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SLOForProviderServiceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderServiceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SLOForProviderServiceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SLOForProviderServiceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SLOForProviderServiceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SLOForProviderServiceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A windows-based SLI defines the criteria for time windows.
/// good_service is defined based off the count of these time windows
/// for which the provided service was of good quality.
/// A SLI describes a good service. It is used to measure and calculate
/// the quality of the Service's performance with respect to a single
/// aspect of service quality.
/// Exactly one of the following must be set:
/// basic_sli, request_based_sli, windows_based_sli
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderWindowsBasedSli {
    /// A TimeSeries monitoring filter
    /// with ValueType = BOOL. The window is good if any true values
    /// appear in the window. One of good_bad_metric_filter,
    /// good_total_ratio_threshold, metric_mean_in_range,
    /// metric_sum_in_range must be set for windows_based_sli.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goodBadMetricFilter")]
    pub good_bad_metric_filter: Option<String>,
    /// Criterion that describes a window as good if its performance is
    /// high enough. One of good_bad_metric_filter,
    /// good_total_ratio_threshold, metric_mean_in_range,
    /// metric_sum_in_range must be set for windows_based_sli.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goodTotalRatioThreshold")]
    pub good_total_ratio_threshold: Option<SLOForProviderWindowsBasedSliGoodTotalRatioThreshold>,
    /// Criterion that describes a window as good if the metric's value
    /// is in a good range, averaged across returned streams.
    /// One of good_bad_metric_filter,
    /// good_total_ratio_threshold, metric_mean_in_range,
    /// metric_sum_in_range must be set for windows_based_sli.
    /// Average value X of time_series should satisfy
    /// range.min <= X <= range.max for a good window.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricMeanInRange")]
    pub metric_mean_in_range: Option<SLOForProviderWindowsBasedSliMetricMeanInRange>,
    /// Criterion that describes a window as good if the metric's value
    /// is in a good range, summed across returned streams.
    /// Summed value X of time_series should satisfy
    /// range.min <= X <= range.max for a good window.
    /// One of good_bad_metric_filter,
    /// good_total_ratio_threshold, metric_mean_in_range,
    /// metric_sum_in_range must be set for windows_based_sli.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricSumInRange")]
    pub metric_sum_in_range: Option<SLOForProviderWindowsBasedSliMetricSumInRange>,
    /// Duration over which window quality is evaluated, given as a
    /// duration string "{X}s" representing X seconds. Must be an
    /// integer fraction of a day and at least 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowPeriod")]
    pub window_period: Option<String>,
}

/// Criterion that describes a window as good if its performance is
/// high enough. One of good_bad_metric_filter,
/// good_total_ratio_threshold, metric_mean_in_range,
/// metric_sum_in_range must be set for windows_based_sli.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderWindowsBasedSliGoodTotalRatioThreshold {
    /// Basic SLI to evaluate to judge window quality.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicSliPerformance")]
    pub basic_sli_performance: Option<SLOForProviderWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformance>,
    /// Request-based SLI to evaluate to judge window quality.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub performance: Option<SLOForProviderWindowsBasedSliGoodTotalRatioThresholdPerformance>,
    /// A duration string, e.g. 10s.
    /// Good service is defined to be the count of requests made to
    /// this service that return in no more than threshold.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threshold: Option<f64>,
}

/// Basic SLI to evaluate to judge window quality.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformance {
    /// Availability based SLI, dervied from count of requests made to this service that return successfully.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub availability: Option<SLOForProviderWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailability>,
    /// Parameters for a latency threshold SLI.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<SLOForProviderWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatency>,
    /// An optional set of locations to which this SLI is relevant.
    /// Telemetry from other locations will not be used to calculate
    /// performance for this SLI. If omitted, this SLI applies to all
    /// locations in which the Service has activity. For service types
    /// that don't support breaking down by location, setting this
    /// field will result in an error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<Vec<String>>,
    /// An optional set of RPCs to which this SLI is relevant.
    /// Telemetry from other methods will not be used to calculate
    /// performance for this SLI. If omitted, this SLI applies to all
    /// the Service's methods. For service types that don't support
    /// breaking down by method, setting this field will result in an
    /// error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<Vec<String>>,
    /// The set of API versions to which this SLI is relevant.
    /// Telemetry from other API versions will not be used to
    /// calculate performance for this SLI. If omitted,
    /// this SLI applies to all API versions. For service types
    /// that don't support breaking down by version, setting this
    /// field will result in an error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<Vec<String>>,
}

/// Availability based SLI, dervied from count of requests made to this service that return successfully.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailability {
    /// Whether an availability SLI is enabled or not. Must be set to true. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Parameters for a latency threshold SLI.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatency {
    /// A duration string, e.g. 10s.
    /// Good service is defined to be the count of requests made to
    /// this service that return in no more than threshold.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threshold: Option<String>,
}

/// Request-based SLI to evaluate to judge window quality.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderWindowsBasedSliGoodTotalRatioThresholdPerformance {
    /// Used when good_service is defined by a count of values aggregated in a
    /// Distribution that fall into a good range. The total_service is the
    /// total count of all values aggregated in the Distribution.
    /// Defines a distribution TimeSeries filter and thresholds used for
    /// measuring good service and total service.
    /// Exactly one of distribution_cut or good_total_ratio can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionCut")]
    pub distribution_cut: Option<SLOForProviderWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCut>,
    /// A means to compute a ratio of good_service to total_service.
    /// Defines computing this ratio with two TimeSeries monitoring filters
    /// Must specify exactly two of good, bad, and total service filters.
    /// The relationship good_service + bad_service = total_service
    /// will be assumed.
    /// Exactly one of distribution_cut or good_total_ratio can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goodTotalRatio")]
    pub good_total_ratio: Option<SLOForProviderWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatio>,
}

/// Used when good_service is defined by a count of values aggregated in a
/// Distribution that fall into a good range. The total_service is the
/// total count of all values aggregated in the Distribution.
/// Defines a distribution TimeSeries filter and thresholds used for
/// measuring good service and total service.
/// Exactly one of distribution_cut or good_total_ratio can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCut {
    /// A TimeSeries monitoring filter
    /// aggregating values to quantify the good service provided.
    /// Must have ValueType = DISTRIBUTION and
    /// MetricKind = DELTA or MetricKind = CUMULATIVE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionFilter")]
    pub distribution_filter: Option<String>,
    /// Range of numerical values. The computed good_service
    /// will be the count of values x in the Distribution such
    /// that range.min <= x <= range.max. inclusive of min and
    /// max. Open ranges can be defined by setting
    /// just one of min or max. Summed value X should satisfy
    /// range.min <= X <= range.max for a good window.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<SLOForProviderWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRange>,
}

/// Range of numerical values. The computed good_service
/// will be the count of values x in the Distribution such
/// that range.min <= x <= range.max. inclusive of min and
/// max. Open ranges can be defined by setting
/// just one of min or max. Summed value X should satisfy
/// range.min <= X <= range.max for a good window.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRange {
    /// max value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<f64>,
    /// Min value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<f64>,
}

/// A means to compute a ratio of good_service to total_service.
/// Defines computing this ratio with two TimeSeries monitoring filters
/// Must specify exactly two of good, bad, and total service filters.
/// The relationship good_service + bad_service = total_service
/// will be assumed.
/// Exactly one of distribution_cut or good_total_ratio can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatio {
    /// A TimeSeries monitoring filter
    /// quantifying bad service provided, either demanded service that
    /// was not provided or demanded service that was of inadequate
    /// quality.
    /// Must have ValueType = DOUBLE or ValueType = INT64 and
    /// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
    /// Exactly two of good_service_filter,bad_service_filter,total_service_filter
    /// must be set (good + bad = total is assumed).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "badServiceFilter")]
    pub bad_service_filter: Option<String>,
    /// A TimeSeries monitoring filter
    /// quantifying good service provided.
    /// Must have ValueType = DOUBLE or ValueType = INT64 and
    /// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
    /// Exactly two of good_service_filter,bad_service_filter,total_service_filter
    /// must be set (good + bad = total is assumed).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goodServiceFilter")]
    pub good_service_filter: Option<String>,
    /// A TimeSeries monitoring filter
    /// quantifying total demanded service.
    /// Must have ValueType = DOUBLE or ValueType = INT64 and
    /// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
    /// Exactly two of good_service_filter,bad_service_filter,total_service_filter
    /// must be set (good + bad = total is assumed).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalServiceFilter")]
    pub total_service_filter: Option<String>,
}

/// Criterion that describes a window as good if the metric's value
/// is in a good range, averaged across returned streams.
/// One of good_bad_metric_filter,
/// good_total_ratio_threshold, metric_mean_in_range,
/// metric_sum_in_range must be set for windows_based_sli.
/// Average value X of time_series should satisfy
/// range.min <= X <= range.max for a good window.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderWindowsBasedSliMetricMeanInRange {
    /// Range of numerical values. The computed good_service
    /// will be the count of values x in the Distribution such
    /// that range.min <= x <= range.max. inclusive of min and
    /// max. Open ranges can be defined by setting
    /// just one of min or max. Summed value X should satisfy
    /// range.min <= X <= range.max for a good window.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<SLOForProviderWindowsBasedSliMetricMeanInRangeRange>,
    /// A monitoring filter
    /// specifying the TimeSeries to use for evaluating window
    /// quality. The provided TimeSeries must have
    /// ValueType = INT64 or ValueType = DOUBLE and
    /// MetricKind = GAUGE.
    /// Summed value X should satisfy
    /// range.min <= X <= range.max for a good window.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeSeries")]
    pub time_series: Option<String>,
}

/// Range of numerical values. The computed good_service
/// will be the count of values x in the Distribution such
/// that range.min <= x <= range.max. inclusive of min and
/// max. Open ranges can be defined by setting
/// just one of min or max. Summed value X should satisfy
/// range.min <= X <= range.max for a good window.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderWindowsBasedSliMetricMeanInRangeRange {
    /// max value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<f64>,
    /// Min value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<f64>,
}

/// Criterion that describes a window as good if the metric's value
/// is in a good range, summed across returned streams.
/// Summed value X of time_series should satisfy
/// range.min <= X <= range.max for a good window.
/// One of good_bad_metric_filter,
/// good_total_ratio_threshold, metric_mean_in_range,
/// metric_sum_in_range must be set for windows_based_sli.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderWindowsBasedSliMetricSumInRange {
    /// Range of numerical values. The computed good_service
    /// will be the count of values x in the Distribution such
    /// that range.min <= x <= range.max. inclusive of min and
    /// max. Open ranges can be defined by setting
    /// just one of min or max. Summed value X should satisfy
    /// range.min <= X <= range.max for a good window.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<SLOForProviderWindowsBasedSliMetricSumInRangeRange>,
    /// A monitoring filter
    /// specifying the TimeSeries to use for evaluating window
    /// quality. The provided TimeSeries must have
    /// ValueType = INT64 or ValueType = DOUBLE and
    /// MetricKind = GAUGE.
    /// Summed value X should satisfy
    /// range.min <= X <= range.max for a good window.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeSeries")]
    pub time_series: Option<String>,
}

/// Range of numerical values. The computed good_service
/// will be the count of values x in the Distribution such
/// that range.min <= x <= range.max. inclusive of min and
/// max. Open ranges can be defined by setting
/// just one of min or max. Summed value X should satisfy
/// range.min <= X <= range.max for a good window.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOForProviderWindowsBasedSliMetricSumInRangeRange {
    /// max value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<f64>,
    /// Min value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProvider {
    /// Basic Service-Level Indicator (SLI) on a well-known service type.
    /// Performance will be computed on the basis of pre-defined metrics.
    /// SLIs are used to measure and calculate the quality of the Service's
    /// performance with respect to a single aspect of service quality.
    /// Exactly one of the following must be set:
    /// basic_sli, request_based_sli, windows_based_sli
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicSli")]
    pub basic_sli: Option<SLOInitProviderBasicSli>,
    /// A calendar period, semantically "since the start of the current
    /// ".
    /// Possible values are: DAY, WEEK, FORTNIGHT, MONTH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "calendarPeriod")]
    pub calendar_period: Option<String>,
    /// Name used for UI elements listing this SLO.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The fraction of service that must be good in order for this objective
    /// to be met. 0 < goal <= 0.999
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub goal: Option<f64>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// A request-based SLI defines a SLI for which atomic units of
    /// service are counted directly.
    /// A SLI describes a good service.
    /// It is used to measure and calculate the quality of the Service's
    /// performance with respect to a single aspect of service quality.
    /// Exactly one of the following must be set:
    /// basic_sli, request_based_sli, windows_based_sli
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestBasedSli")]
    pub request_based_sli: Option<SLOInitProviderRequestBasedSli>,
    /// A rolling time period, semantically "in the past X days".
    /// Must be between 1 to 30 days, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingPeriodDays")]
    pub rolling_period_days: Option<f64>,
    /// ID of the service to which this SLO belongs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
    /// Reference to a CustomService in monitoring to populate service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceRef")]
    pub service_ref: Option<SLOInitProviderServiceRef>,
    /// Selector for a CustomService in monitoring to populate service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceSelector")]
    pub service_selector: Option<SLOInitProviderServiceSelector>,
    /// The id to use for this ServiceLevelObjective. If omitted, an id will be generated instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sloId")]
    pub slo_id: Option<String>,
    /// This field is intended to be used for organizing and identifying the AlertPolicy
    /// objects.The field can contain up to 64 entries. Each key and value is limited
    /// to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
    /// can contain only lowercase letters, numerals, underscores, and dashes. Keys
    /// must begin with a letter.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userLabels")]
    pub user_labels: Option<HashMap<String, String>>,
    /// A windows-based SLI defines the criteria for time windows.
    /// good_service is defined based off the count of these time windows
    /// for which the provided service was of good quality.
    /// A SLI describes a good service. It is used to measure and calculate
    /// the quality of the Service's performance with respect to a single
    /// aspect of service quality.
    /// Exactly one of the following must be set:
    /// basic_sli, request_based_sli, windows_based_sli
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsBasedSli")]
    pub windows_based_sli: Option<SLOInitProviderWindowsBasedSli>,
}

/// Basic Service-Level Indicator (SLI) on a well-known service type.
/// Performance will be computed on the basis of pre-defined metrics.
/// SLIs are used to measure and calculate the quality of the Service's
/// performance with respect to a single aspect of service quality.
/// Exactly one of the following must be set:
/// basic_sli, request_based_sli, windows_based_sli
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderBasicSli {
    /// Availability based SLI, dervied from count of requests made to this service that return successfully.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub availability: Option<SLOInitProviderBasicSliAvailability>,
    /// Parameters for a latency threshold SLI.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<SLOInitProviderBasicSliLatency>,
    /// An optional set of locations to which this SLI is relevant.
    /// Telemetry from other locations will not be used to calculate
    /// performance for this SLI. If omitted, this SLI applies to all
    /// locations in which the Service has activity. For service types
    /// that don't support breaking down by location, setting this
    /// field will result in an error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<Vec<String>>,
    /// An optional set of RPCs to which this SLI is relevant.
    /// Telemetry from other methods will not be used to calculate
    /// performance for this SLI. If omitted, this SLI applies to all
    /// the Service's methods. For service types that don't support
    /// breaking down by method, setting this field will result in an
    /// error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<Vec<String>>,
    /// The set of API versions to which this SLI is relevant.
    /// Telemetry from other API versions will not be used to
    /// calculate performance for this SLI. If omitted,
    /// this SLI applies to all API versions. For service types
    /// that don't support breaking down by version, setting this
    /// field will result in an error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<Vec<String>>,
}

/// Availability based SLI, dervied from count of requests made to this service that return successfully.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderBasicSliAvailability {
    /// Whether an availability SLI is enabled or not. Must be set to true. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Parameters for a latency threshold SLI.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderBasicSliLatency {
    /// A duration string, e.g. 10s.
    /// Good service is defined to be the count of requests made to
    /// this service that return in no more than threshold.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threshold: Option<String>,
}

/// A request-based SLI defines a SLI for which atomic units of
/// service are counted directly.
/// A SLI describes a good service.
/// It is used to measure and calculate the quality of the Service's
/// performance with respect to a single aspect of service quality.
/// Exactly one of the following must be set:
/// basic_sli, request_based_sli, windows_based_sli
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderRequestBasedSli {
    /// Used when good_service is defined by a count of values aggregated in a
    /// Distribution that fall into a good range. The total_service is the
    /// total count of all values aggregated in the Distribution.
    /// Defines a distribution TimeSeries filter and thresholds used for
    /// measuring good service and total service.
    /// Exactly one of distribution_cut or good_total_ratio can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionCut")]
    pub distribution_cut: Option<SLOInitProviderRequestBasedSliDistributionCut>,
    /// A means to compute a ratio of good_service to total_service.
    /// Defines computing this ratio with two TimeSeries monitoring filters
    /// Must specify exactly two of good, bad, and total service filters.
    /// The relationship good_service + bad_service = total_service
    /// will be assumed.
    /// Exactly one of distribution_cut or good_total_ratio can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goodTotalRatio")]
    pub good_total_ratio: Option<SLOInitProviderRequestBasedSliGoodTotalRatio>,
}

/// Used when good_service is defined by a count of values aggregated in a
/// Distribution that fall into a good range. The total_service is the
/// total count of all values aggregated in the Distribution.
/// Defines a distribution TimeSeries filter and thresholds used for
/// measuring good service and total service.
/// Exactly one of distribution_cut or good_total_ratio can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderRequestBasedSliDistributionCut {
    /// A TimeSeries monitoring filter
    /// aggregating values to quantify the good service provided.
    /// Must have ValueType = DISTRIBUTION and
    /// MetricKind = DELTA or MetricKind = CUMULATIVE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionFilter")]
    pub distribution_filter: Option<String>,
    /// Range of numerical values. The computed good_service
    /// will be the count of values x in the Distribution such
    /// that range.min <= x <= range.max. inclusive of min and
    /// max. Open ranges can be defined by setting
    /// just one of min or max. Summed value X should satisfy
    /// range.min <= X <= range.max for a good window.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<SLOInitProviderRequestBasedSliDistributionCutRange>,
}

/// Range of numerical values. The computed good_service
/// will be the count of values x in the Distribution such
/// that range.min <= x <= range.max. inclusive of min and
/// max. Open ranges can be defined by setting
/// just one of min or max. Summed value X should satisfy
/// range.min <= X <= range.max for a good window.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderRequestBasedSliDistributionCutRange {
    /// max value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<f64>,
    /// Min value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<f64>,
}

/// A means to compute a ratio of good_service to total_service.
/// Defines computing this ratio with two TimeSeries monitoring filters
/// Must specify exactly two of good, bad, and total service filters.
/// The relationship good_service + bad_service = total_service
/// will be assumed.
/// Exactly one of distribution_cut or good_total_ratio can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderRequestBasedSliGoodTotalRatio {
    /// A TimeSeries monitoring filter
    /// quantifying bad service provided, either demanded service that
    /// was not provided or demanded service that was of inadequate
    /// quality.
    /// Must have ValueType = DOUBLE or ValueType = INT64 and
    /// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
    /// Exactly two of good_service_filter,bad_service_filter,total_service_filter
    /// must be set (good + bad = total is assumed).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "badServiceFilter")]
    pub bad_service_filter: Option<String>,
    /// A TimeSeries monitoring filter
    /// quantifying good service provided.
    /// Must have ValueType = DOUBLE or ValueType = INT64 and
    /// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
    /// Exactly two of good_service_filter,bad_service_filter,total_service_filter
    /// must be set (good + bad = total is assumed).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goodServiceFilter")]
    pub good_service_filter: Option<String>,
    /// A TimeSeries monitoring filter
    /// quantifying total demanded service.
    /// Must have ValueType = DOUBLE or ValueType = INT64 and
    /// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
    /// Exactly two of good_service_filter,bad_service_filter,total_service_filter
    /// must be set (good + bad = total is assumed).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalServiceFilter")]
    pub total_service_filter: Option<String>,
}

/// Reference to a CustomService in monitoring to populate service.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderServiceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SLOInitProviderServiceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderServiceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SLOInitProviderServiceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SLOInitProviderServiceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SLOInitProviderServiceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SLOInitProviderServiceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CustomService in monitoring to populate service.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderServiceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SLOInitProviderServiceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderServiceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SLOInitProviderServiceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SLOInitProviderServiceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SLOInitProviderServiceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SLOInitProviderServiceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A windows-based SLI defines the criteria for time windows.
/// good_service is defined based off the count of these time windows
/// for which the provided service was of good quality.
/// A SLI describes a good service. It is used to measure and calculate
/// the quality of the Service's performance with respect to a single
/// aspect of service quality.
/// Exactly one of the following must be set:
/// basic_sli, request_based_sli, windows_based_sli
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderWindowsBasedSli {
    /// A TimeSeries monitoring filter
    /// with ValueType = BOOL. The window is good if any true values
    /// appear in the window. One of good_bad_metric_filter,
    /// good_total_ratio_threshold, metric_mean_in_range,
    /// metric_sum_in_range must be set for windows_based_sli.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goodBadMetricFilter")]
    pub good_bad_metric_filter: Option<String>,
    /// Criterion that describes a window as good if its performance is
    /// high enough. One of good_bad_metric_filter,
    /// good_total_ratio_threshold, metric_mean_in_range,
    /// metric_sum_in_range must be set for windows_based_sli.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goodTotalRatioThreshold")]
    pub good_total_ratio_threshold: Option<SLOInitProviderWindowsBasedSliGoodTotalRatioThreshold>,
    /// Criterion that describes a window as good if the metric's value
    /// is in a good range, averaged across returned streams.
    /// One of good_bad_metric_filter,
    /// good_total_ratio_threshold, metric_mean_in_range,
    /// metric_sum_in_range must be set for windows_based_sli.
    /// Average value X of time_series should satisfy
    /// range.min <= X <= range.max for a good window.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricMeanInRange")]
    pub metric_mean_in_range: Option<SLOInitProviderWindowsBasedSliMetricMeanInRange>,
    /// Criterion that describes a window as good if the metric's value
    /// is in a good range, summed across returned streams.
    /// Summed value X of time_series should satisfy
    /// range.min <= X <= range.max for a good window.
    /// One of good_bad_metric_filter,
    /// good_total_ratio_threshold, metric_mean_in_range,
    /// metric_sum_in_range must be set for windows_based_sli.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricSumInRange")]
    pub metric_sum_in_range: Option<SLOInitProviderWindowsBasedSliMetricSumInRange>,
    /// Duration over which window quality is evaluated, given as a
    /// duration string "{X}s" representing X seconds. Must be an
    /// integer fraction of a day and at least 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowPeriod")]
    pub window_period: Option<String>,
}

/// Criterion that describes a window as good if its performance is
/// high enough. One of good_bad_metric_filter,
/// good_total_ratio_threshold, metric_mean_in_range,
/// metric_sum_in_range must be set for windows_based_sli.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderWindowsBasedSliGoodTotalRatioThreshold {
    /// Basic SLI to evaluate to judge window quality.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicSliPerformance")]
    pub basic_sli_performance: Option<SLOInitProviderWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformance>,
    /// Request-based SLI to evaluate to judge window quality.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub performance: Option<SLOInitProviderWindowsBasedSliGoodTotalRatioThresholdPerformance>,
    /// A duration string, e.g. 10s.
    /// Good service is defined to be the count of requests made to
    /// this service that return in no more than threshold.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threshold: Option<f64>,
}

/// Basic SLI to evaluate to judge window quality.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformance {
    /// Availability based SLI, dervied from count of requests made to this service that return successfully.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub availability: Option<SLOInitProviderWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailability>,
    /// Parameters for a latency threshold SLI.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<SLOInitProviderWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatency>,
    /// An optional set of locations to which this SLI is relevant.
    /// Telemetry from other locations will not be used to calculate
    /// performance for this SLI. If omitted, this SLI applies to all
    /// locations in which the Service has activity. For service types
    /// that don't support breaking down by location, setting this
    /// field will result in an error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<Vec<String>>,
    /// An optional set of RPCs to which this SLI is relevant.
    /// Telemetry from other methods will not be used to calculate
    /// performance for this SLI. If omitted, this SLI applies to all
    /// the Service's methods. For service types that don't support
    /// breaking down by method, setting this field will result in an
    /// error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<Vec<String>>,
    /// The set of API versions to which this SLI is relevant.
    /// Telemetry from other API versions will not be used to
    /// calculate performance for this SLI. If omitted,
    /// this SLI applies to all API versions. For service types
    /// that don't support breaking down by version, setting this
    /// field will result in an error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<Vec<String>>,
}

/// Availability based SLI, dervied from count of requests made to this service that return successfully.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailability {
    /// Whether an availability SLI is enabled or not. Must be set to true. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Parameters for a latency threshold SLI.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatency {
    /// A duration string, e.g. 10s.
    /// Good service is defined to be the count of requests made to
    /// this service that return in no more than threshold.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threshold: Option<String>,
}

/// Request-based SLI to evaluate to judge window quality.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderWindowsBasedSliGoodTotalRatioThresholdPerformance {
    /// Used when good_service is defined by a count of values aggregated in a
    /// Distribution that fall into a good range. The total_service is the
    /// total count of all values aggregated in the Distribution.
    /// Defines a distribution TimeSeries filter and thresholds used for
    /// measuring good service and total service.
    /// Exactly one of distribution_cut or good_total_ratio can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionCut")]
    pub distribution_cut: Option<SLOInitProviderWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCut>,
    /// A means to compute a ratio of good_service to total_service.
    /// Defines computing this ratio with two TimeSeries monitoring filters
    /// Must specify exactly two of good, bad, and total service filters.
    /// The relationship good_service + bad_service = total_service
    /// will be assumed.
    /// Exactly one of distribution_cut or good_total_ratio can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goodTotalRatio")]
    pub good_total_ratio: Option<SLOInitProviderWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatio>,
}

/// Used when good_service is defined by a count of values aggregated in a
/// Distribution that fall into a good range. The total_service is the
/// total count of all values aggregated in the Distribution.
/// Defines a distribution TimeSeries filter and thresholds used for
/// measuring good service and total service.
/// Exactly one of distribution_cut or good_total_ratio can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCut {
    /// A TimeSeries monitoring filter
    /// aggregating values to quantify the good service provided.
    /// Must have ValueType = DISTRIBUTION and
    /// MetricKind = DELTA or MetricKind = CUMULATIVE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionFilter")]
    pub distribution_filter: Option<String>,
    /// Range of numerical values. The computed good_service
    /// will be the count of values x in the Distribution such
    /// that range.min <= x <= range.max. inclusive of min and
    /// max. Open ranges can be defined by setting
    /// just one of min or max. Summed value X should satisfy
    /// range.min <= X <= range.max for a good window.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<SLOInitProviderWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRange>,
}

/// Range of numerical values. The computed good_service
/// will be the count of values x in the Distribution such
/// that range.min <= x <= range.max. inclusive of min and
/// max. Open ranges can be defined by setting
/// just one of min or max. Summed value X should satisfy
/// range.min <= X <= range.max for a good window.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRange {
    /// max value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<f64>,
    /// Min value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<f64>,
}

/// A means to compute a ratio of good_service to total_service.
/// Defines computing this ratio with two TimeSeries monitoring filters
/// Must specify exactly two of good, bad, and total service filters.
/// The relationship good_service + bad_service = total_service
/// will be assumed.
/// Exactly one of distribution_cut or good_total_ratio can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatio {
    /// A TimeSeries monitoring filter
    /// quantifying bad service provided, either demanded service that
    /// was not provided or demanded service that was of inadequate
    /// quality.
    /// Must have ValueType = DOUBLE or ValueType = INT64 and
    /// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
    /// Exactly two of good_service_filter,bad_service_filter,total_service_filter
    /// must be set (good + bad = total is assumed).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "badServiceFilter")]
    pub bad_service_filter: Option<String>,
    /// A TimeSeries monitoring filter
    /// quantifying good service provided.
    /// Must have ValueType = DOUBLE or ValueType = INT64 and
    /// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
    /// Exactly two of good_service_filter,bad_service_filter,total_service_filter
    /// must be set (good + bad = total is assumed).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goodServiceFilter")]
    pub good_service_filter: Option<String>,
    /// A TimeSeries monitoring filter
    /// quantifying total demanded service.
    /// Must have ValueType = DOUBLE or ValueType = INT64 and
    /// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
    /// Exactly two of good_service_filter,bad_service_filter,total_service_filter
    /// must be set (good + bad = total is assumed).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalServiceFilter")]
    pub total_service_filter: Option<String>,
}

/// Criterion that describes a window as good if the metric's value
/// is in a good range, averaged across returned streams.
/// One of good_bad_metric_filter,
/// good_total_ratio_threshold, metric_mean_in_range,
/// metric_sum_in_range must be set for windows_based_sli.
/// Average value X of time_series should satisfy
/// range.min <= X <= range.max for a good window.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderWindowsBasedSliMetricMeanInRange {
    /// Range of numerical values. The computed good_service
    /// will be the count of values x in the Distribution such
    /// that range.min <= x <= range.max. inclusive of min and
    /// max. Open ranges can be defined by setting
    /// just one of min or max. Summed value X should satisfy
    /// range.min <= X <= range.max for a good window.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<SLOInitProviderWindowsBasedSliMetricMeanInRangeRange>,
    /// A monitoring filter
    /// specifying the TimeSeries to use for evaluating window
    /// quality. The provided TimeSeries must have
    /// ValueType = INT64 or ValueType = DOUBLE and
    /// MetricKind = GAUGE.
    /// Summed value X should satisfy
    /// range.min <= X <= range.max for a good window.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeSeries")]
    pub time_series: Option<String>,
}

/// Range of numerical values. The computed good_service
/// will be the count of values x in the Distribution such
/// that range.min <= x <= range.max. inclusive of min and
/// max. Open ranges can be defined by setting
/// just one of min or max. Summed value X should satisfy
/// range.min <= X <= range.max for a good window.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderWindowsBasedSliMetricMeanInRangeRange {
    /// max value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<f64>,
    /// Min value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<f64>,
}

/// Criterion that describes a window as good if the metric's value
/// is in a good range, summed across returned streams.
/// Summed value X of time_series should satisfy
/// range.min <= X <= range.max for a good window.
/// One of good_bad_metric_filter,
/// good_total_ratio_threshold, metric_mean_in_range,
/// metric_sum_in_range must be set for windows_based_sli.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderWindowsBasedSliMetricSumInRange {
    /// Range of numerical values. The computed good_service
    /// will be the count of values x in the Distribution such
    /// that range.min <= x <= range.max. inclusive of min and
    /// max. Open ranges can be defined by setting
    /// just one of min or max. Summed value X should satisfy
    /// range.min <= X <= range.max for a good window.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<SLOInitProviderWindowsBasedSliMetricSumInRangeRange>,
    /// A monitoring filter
    /// specifying the TimeSeries to use for evaluating window
    /// quality. The provided TimeSeries must have
    /// ValueType = INT64 or ValueType = DOUBLE and
    /// MetricKind = GAUGE.
    /// Summed value X should satisfy
    /// range.min <= X <= range.max for a good window.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeSeries")]
    pub time_series: Option<String>,
}

/// Range of numerical values. The computed good_service
/// will be the count of values x in the Distribution such
/// that range.min <= x <= range.max. inclusive of min and
/// max. Open ranges can be defined by setting
/// just one of min or max. Summed value X should satisfy
/// range.min <= X <= range.max for a good window.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOInitProviderWindowsBasedSliMetricSumInRangeRange {
    /// max value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<f64>,
    /// Min value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SLOProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SLOProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SLOProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SLOProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SLOProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<SLOPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<SLOPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SLOPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SLOPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SLOPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SLOPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SLOPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// SLOStatus defines the observed state of SLO.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<SLOStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProvider {
    /// Basic Service-Level Indicator (SLI) on a well-known service type.
    /// Performance will be computed on the basis of pre-defined metrics.
    /// SLIs are used to measure and calculate the quality of the Service's
    /// performance with respect to a single aspect of service quality.
    /// Exactly one of the following must be set:
    /// basic_sli, request_based_sli, windows_based_sli
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicSli")]
    pub basic_sli: Option<SLOStatusAtProviderBasicSli>,
    /// A calendar period, semantically "since the start of the current
    /// ".
    /// Possible values are: DAY, WEEK, FORTNIGHT, MONTH.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "calendarPeriod")]
    pub calendar_period: Option<String>,
    /// Name used for UI elements listing this SLO.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The fraction of service that must be good in order for this objective
    /// to be met. 0 < goal <= 0.999
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub goal: Option<f64>,
    /// an identifier for the resource with format {{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The full resource name for this service. The syntax is:
    /// projects/[PROJECT_ID_OR_NUMBER]/services/[SERVICE_ID]/serviceLevelObjectives/[SLO_NAME]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// A request-based SLI defines a SLI for which atomic units of
    /// service are counted directly.
    /// A SLI describes a good service.
    /// It is used to measure and calculate the quality of the Service's
    /// performance with respect to a single aspect of service quality.
    /// Exactly one of the following must be set:
    /// basic_sli, request_based_sli, windows_based_sli
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestBasedSli")]
    pub request_based_sli: Option<SLOStatusAtProviderRequestBasedSli>,
    /// A rolling time period, semantically "in the past X days".
    /// Must be between 1 to 30 days, inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rollingPeriodDays")]
    pub rolling_period_days: Option<f64>,
    /// ID of the service to which this SLO belongs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
    /// The id to use for this ServiceLevelObjective. If omitted, an id will be generated instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sloId")]
    pub slo_id: Option<String>,
    /// This field is intended to be used for organizing and identifying the AlertPolicy
    /// objects.The field can contain up to 64 entries. Each key and value is limited
    /// to 63 Unicode characters or 128 bytes, whichever is smaller. Labels and values
    /// can contain only lowercase letters, numerals, underscores, and dashes. Keys
    /// must begin with a letter.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userLabels")]
    pub user_labels: Option<HashMap<String, String>>,
    /// A windows-based SLI defines the criteria for time windows.
    /// good_service is defined based off the count of these time windows
    /// for which the provided service was of good quality.
    /// A SLI describes a good service. It is used to measure and calculate
    /// the quality of the Service's performance with respect to a single
    /// aspect of service quality.
    /// Exactly one of the following must be set:
    /// basic_sli, request_based_sli, windows_based_sli
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowsBasedSli")]
    pub windows_based_sli: Option<SLOStatusAtProviderWindowsBasedSli>,
}

/// Basic Service-Level Indicator (SLI) on a well-known service type.
/// Performance will be computed on the basis of pre-defined metrics.
/// SLIs are used to measure and calculate the quality of the Service's
/// performance with respect to a single aspect of service quality.
/// Exactly one of the following must be set:
/// basic_sli, request_based_sli, windows_based_sli
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderBasicSli {
    /// Availability based SLI, dervied from count of requests made to this service that return successfully.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub availability: Option<SLOStatusAtProviderBasicSliAvailability>,
    /// Parameters for a latency threshold SLI.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<SLOStatusAtProviderBasicSliLatency>,
    /// An optional set of locations to which this SLI is relevant.
    /// Telemetry from other locations will not be used to calculate
    /// performance for this SLI. If omitted, this SLI applies to all
    /// locations in which the Service has activity. For service types
    /// that don't support breaking down by location, setting this
    /// field will result in an error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<Vec<String>>,
    /// An optional set of RPCs to which this SLI is relevant.
    /// Telemetry from other methods will not be used to calculate
    /// performance for this SLI. If omitted, this SLI applies to all
    /// the Service's methods. For service types that don't support
    /// breaking down by method, setting this field will result in an
    /// error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<Vec<String>>,
    /// The set of API versions to which this SLI is relevant.
    /// Telemetry from other API versions will not be used to
    /// calculate performance for this SLI. If omitted,
    /// this SLI applies to all API versions. For service types
    /// that don't support breaking down by version, setting this
    /// field will result in an error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<Vec<String>>,
}

/// Availability based SLI, dervied from count of requests made to this service that return successfully.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderBasicSliAvailability {
    /// Whether an availability SLI is enabled or not. Must be set to true. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Parameters for a latency threshold SLI.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderBasicSliLatency {
    /// A duration string, e.g. 10s.
    /// Good service is defined to be the count of requests made to
    /// this service that return in no more than threshold.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threshold: Option<String>,
}

/// A request-based SLI defines a SLI for which atomic units of
/// service are counted directly.
/// A SLI describes a good service.
/// It is used to measure and calculate the quality of the Service's
/// performance with respect to a single aspect of service quality.
/// Exactly one of the following must be set:
/// basic_sli, request_based_sli, windows_based_sli
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderRequestBasedSli {
    /// Used when good_service is defined by a count of values aggregated in a
    /// Distribution that fall into a good range. The total_service is the
    /// total count of all values aggregated in the Distribution.
    /// Defines a distribution TimeSeries filter and thresholds used for
    /// measuring good service and total service.
    /// Exactly one of distribution_cut or good_total_ratio can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionCut")]
    pub distribution_cut: Option<SLOStatusAtProviderRequestBasedSliDistributionCut>,
    /// A means to compute a ratio of good_service to total_service.
    /// Defines computing this ratio with two TimeSeries monitoring filters
    /// Must specify exactly two of good, bad, and total service filters.
    /// The relationship good_service + bad_service = total_service
    /// will be assumed.
    /// Exactly one of distribution_cut or good_total_ratio can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goodTotalRatio")]
    pub good_total_ratio: Option<SLOStatusAtProviderRequestBasedSliGoodTotalRatio>,
}

/// Used when good_service is defined by a count of values aggregated in a
/// Distribution that fall into a good range. The total_service is the
/// total count of all values aggregated in the Distribution.
/// Defines a distribution TimeSeries filter and thresholds used for
/// measuring good service and total service.
/// Exactly one of distribution_cut or good_total_ratio can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderRequestBasedSliDistributionCut {
    /// A TimeSeries monitoring filter
    /// aggregating values to quantify the good service provided.
    /// Must have ValueType = DISTRIBUTION and
    /// MetricKind = DELTA or MetricKind = CUMULATIVE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionFilter")]
    pub distribution_filter: Option<String>,
    /// Range of numerical values. The computed good_service
    /// will be the count of values x in the Distribution such
    /// that range.min <= x <= range.max. inclusive of min and
    /// max. Open ranges can be defined by setting
    /// just one of min or max. Summed value X should satisfy
    /// range.min <= X <= range.max for a good window.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<SLOStatusAtProviderRequestBasedSliDistributionCutRange>,
}

/// Range of numerical values. The computed good_service
/// will be the count of values x in the Distribution such
/// that range.min <= x <= range.max. inclusive of min and
/// max. Open ranges can be defined by setting
/// just one of min or max. Summed value X should satisfy
/// range.min <= X <= range.max for a good window.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderRequestBasedSliDistributionCutRange {
    /// max value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<f64>,
    /// Min value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<f64>,
}

/// A means to compute a ratio of good_service to total_service.
/// Defines computing this ratio with two TimeSeries monitoring filters
/// Must specify exactly two of good, bad, and total service filters.
/// The relationship good_service + bad_service = total_service
/// will be assumed.
/// Exactly one of distribution_cut or good_total_ratio can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderRequestBasedSliGoodTotalRatio {
    /// A TimeSeries monitoring filter
    /// quantifying bad service provided, either demanded service that
    /// was not provided or demanded service that was of inadequate
    /// quality.
    /// Must have ValueType = DOUBLE or ValueType = INT64 and
    /// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
    /// Exactly two of good_service_filter,bad_service_filter,total_service_filter
    /// must be set (good + bad = total is assumed).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "badServiceFilter")]
    pub bad_service_filter: Option<String>,
    /// A TimeSeries monitoring filter
    /// quantifying good service provided.
    /// Must have ValueType = DOUBLE or ValueType = INT64 and
    /// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
    /// Exactly two of good_service_filter,bad_service_filter,total_service_filter
    /// must be set (good + bad = total is assumed).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goodServiceFilter")]
    pub good_service_filter: Option<String>,
    /// A TimeSeries monitoring filter
    /// quantifying total demanded service.
    /// Must have ValueType = DOUBLE or ValueType = INT64 and
    /// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
    /// Exactly two of good_service_filter,bad_service_filter,total_service_filter
    /// must be set (good + bad = total is assumed).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalServiceFilter")]
    pub total_service_filter: Option<String>,
}

/// A windows-based SLI defines the criteria for time windows.
/// good_service is defined based off the count of these time windows
/// for which the provided service was of good quality.
/// A SLI describes a good service. It is used to measure and calculate
/// the quality of the Service's performance with respect to a single
/// aspect of service quality.
/// Exactly one of the following must be set:
/// basic_sli, request_based_sli, windows_based_sli
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderWindowsBasedSli {
    /// A TimeSeries monitoring filter
    /// with ValueType = BOOL. The window is good if any true values
    /// appear in the window. One of good_bad_metric_filter,
    /// good_total_ratio_threshold, metric_mean_in_range,
    /// metric_sum_in_range must be set for windows_based_sli.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goodBadMetricFilter")]
    pub good_bad_metric_filter: Option<String>,
    /// Criterion that describes a window as good if its performance is
    /// high enough. One of good_bad_metric_filter,
    /// good_total_ratio_threshold, metric_mean_in_range,
    /// metric_sum_in_range must be set for windows_based_sli.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goodTotalRatioThreshold")]
    pub good_total_ratio_threshold: Option<SLOStatusAtProviderWindowsBasedSliGoodTotalRatioThreshold>,
    /// Criterion that describes a window as good if the metric's value
    /// is in a good range, averaged across returned streams.
    /// One of good_bad_metric_filter,
    /// good_total_ratio_threshold, metric_mean_in_range,
    /// metric_sum_in_range must be set for windows_based_sli.
    /// Average value X of time_series should satisfy
    /// range.min <= X <= range.max for a good window.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricMeanInRange")]
    pub metric_mean_in_range: Option<SLOStatusAtProviderWindowsBasedSliMetricMeanInRange>,
    /// Criterion that describes a window as good if the metric's value
    /// is in a good range, summed across returned streams.
    /// Summed value X of time_series should satisfy
    /// range.min <= X <= range.max for a good window.
    /// One of good_bad_metric_filter,
    /// good_total_ratio_threshold, metric_mean_in_range,
    /// metric_sum_in_range must be set for windows_based_sli.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricSumInRange")]
    pub metric_sum_in_range: Option<SLOStatusAtProviderWindowsBasedSliMetricSumInRange>,
    /// Duration over which window quality is evaluated, given as a
    /// duration string "{X}s" representing X seconds. Must be an
    /// integer fraction of a day and at least 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "windowPeriod")]
    pub window_period: Option<String>,
}

/// Criterion that describes a window as good if its performance is
/// high enough. One of good_bad_metric_filter,
/// good_total_ratio_threshold, metric_mean_in_range,
/// metric_sum_in_range must be set for windows_based_sli.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderWindowsBasedSliGoodTotalRatioThreshold {
    /// Basic SLI to evaluate to judge window quality.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "basicSliPerformance")]
    pub basic_sli_performance: Option<SLOStatusAtProviderWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformance>,
    /// Request-based SLI to evaluate to judge window quality.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub performance: Option<SLOStatusAtProviderWindowsBasedSliGoodTotalRatioThresholdPerformance>,
    /// A duration string, e.g. 10s.
    /// Good service is defined to be the count of requests made to
    /// this service that return in no more than threshold.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threshold: Option<f64>,
}

/// Basic SLI to evaluate to judge window quality.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformance {
    /// Availability based SLI, dervied from count of requests made to this service that return successfully.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub availability: Option<SLOStatusAtProviderWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailability>,
    /// Parameters for a latency threshold SLI.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub latency: Option<SLOStatusAtProviderWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatency>,
    /// An optional set of locations to which this SLI is relevant.
    /// Telemetry from other locations will not be used to calculate
    /// performance for this SLI. If omitted, this SLI applies to all
    /// locations in which the Service has activity. For service types
    /// that don't support breaking down by location, setting this
    /// field will result in an error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<Vec<String>>,
    /// An optional set of RPCs to which this SLI is relevant.
    /// Telemetry from other methods will not be used to calculate
    /// performance for this SLI. If omitted, this SLI applies to all
    /// the Service's methods. For service types that don't support
    /// breaking down by method, setting this field will result in an
    /// error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub method: Option<Vec<String>>,
    /// The set of API versions to which this SLI is relevant.
    /// Telemetry from other API versions will not be used to
    /// calculate performance for this SLI. If omitted,
    /// this SLI applies to all API versions. For service types
    /// that don't support breaking down by version, setting this
    /// field will result in an error.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<Vec<String>>,
}

/// Availability based SLI, dervied from count of requests made to this service that return successfully.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceAvailability {
    /// Whether an availability SLI is enabled or not. Must be set to true. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Parameters for a latency threshold SLI.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderWindowsBasedSliGoodTotalRatioThresholdBasicSliPerformanceLatency {
    /// A duration string, e.g. 10s.
    /// Good service is defined to be the count of requests made to
    /// this service that return in no more than threshold.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threshold: Option<String>,
}

/// Request-based SLI to evaluate to judge window quality.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderWindowsBasedSliGoodTotalRatioThresholdPerformance {
    /// Used when good_service is defined by a count of values aggregated in a
    /// Distribution that fall into a good range. The total_service is the
    /// total count of all values aggregated in the Distribution.
    /// Defines a distribution TimeSeries filter and thresholds used for
    /// measuring good service and total service.
    /// Exactly one of distribution_cut or good_total_ratio can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionCut")]
    pub distribution_cut: Option<SLOStatusAtProviderWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCut>,
    /// A means to compute a ratio of good_service to total_service.
    /// Defines computing this ratio with two TimeSeries monitoring filters
    /// Must specify exactly two of good, bad, and total service filters.
    /// The relationship good_service + bad_service = total_service
    /// will be assumed.
    /// Exactly one of distribution_cut or good_total_ratio can be set.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goodTotalRatio")]
    pub good_total_ratio: Option<SLOStatusAtProviderWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatio>,
}

/// Used when good_service is defined by a count of values aggregated in a
/// Distribution that fall into a good range. The total_service is the
/// total count of all values aggregated in the Distribution.
/// Defines a distribution TimeSeries filter and thresholds used for
/// measuring good service and total service.
/// Exactly one of distribution_cut or good_total_ratio can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCut {
    /// A TimeSeries monitoring filter
    /// aggregating values to quantify the good service provided.
    /// Must have ValueType = DISTRIBUTION and
    /// MetricKind = DELTA or MetricKind = CUMULATIVE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "distributionFilter")]
    pub distribution_filter: Option<String>,
    /// Range of numerical values. The computed good_service
    /// will be the count of values x in the Distribution such
    /// that range.min <= x <= range.max. inclusive of min and
    /// max. Open ranges can be defined by setting
    /// just one of min or max. Summed value X should satisfy
    /// range.min <= X <= range.max for a good window.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<SLOStatusAtProviderWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRange>,
}

/// Range of numerical values. The computed good_service
/// will be the count of values x in the Distribution such
/// that range.min <= x <= range.max. inclusive of min and
/// max. Open ranges can be defined by setting
/// just one of min or max. Summed value X should satisfy
/// range.min <= X <= range.max for a good window.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderWindowsBasedSliGoodTotalRatioThresholdPerformanceDistributionCutRange {
    /// max value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<f64>,
    /// Min value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<f64>,
}

/// A means to compute a ratio of good_service to total_service.
/// Defines computing this ratio with two TimeSeries monitoring filters
/// Must specify exactly two of good, bad, and total service filters.
/// The relationship good_service + bad_service = total_service
/// will be assumed.
/// Exactly one of distribution_cut or good_total_ratio can be set.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderWindowsBasedSliGoodTotalRatioThresholdPerformanceGoodTotalRatio {
    /// A TimeSeries monitoring filter
    /// quantifying bad service provided, either demanded service that
    /// was not provided or demanded service that was of inadequate
    /// quality.
    /// Must have ValueType = DOUBLE or ValueType = INT64 and
    /// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
    /// Exactly two of good_service_filter,bad_service_filter,total_service_filter
    /// must be set (good + bad = total is assumed).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "badServiceFilter")]
    pub bad_service_filter: Option<String>,
    /// A TimeSeries monitoring filter
    /// quantifying good service provided.
    /// Must have ValueType = DOUBLE or ValueType = INT64 and
    /// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
    /// Exactly two of good_service_filter,bad_service_filter,total_service_filter
    /// must be set (good + bad = total is assumed).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "goodServiceFilter")]
    pub good_service_filter: Option<String>,
    /// A TimeSeries monitoring filter
    /// quantifying total demanded service.
    /// Must have ValueType = DOUBLE or ValueType = INT64 and
    /// must have MetricKind = DELTA or MetricKind = CUMULATIVE.
    /// Exactly two of good_service_filter,bad_service_filter,total_service_filter
    /// must be set (good + bad = total is assumed).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "totalServiceFilter")]
    pub total_service_filter: Option<String>,
}

/// Criterion that describes a window as good if the metric's value
/// is in a good range, averaged across returned streams.
/// One of good_bad_metric_filter,
/// good_total_ratio_threshold, metric_mean_in_range,
/// metric_sum_in_range must be set for windows_based_sli.
/// Average value X of time_series should satisfy
/// range.min <= X <= range.max for a good window.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderWindowsBasedSliMetricMeanInRange {
    /// Range of numerical values. The computed good_service
    /// will be the count of values x in the Distribution such
    /// that range.min <= x <= range.max. inclusive of min and
    /// max. Open ranges can be defined by setting
    /// just one of min or max. Summed value X should satisfy
    /// range.min <= X <= range.max for a good window.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<SLOStatusAtProviderWindowsBasedSliMetricMeanInRangeRange>,
    /// A monitoring filter
    /// specifying the TimeSeries to use for evaluating window
    /// quality. The provided TimeSeries must have
    /// ValueType = INT64 or ValueType = DOUBLE and
    /// MetricKind = GAUGE.
    /// Summed value X should satisfy
    /// range.min <= X <= range.max for a good window.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeSeries")]
    pub time_series: Option<String>,
}

/// Range of numerical values. The computed good_service
/// will be the count of values x in the Distribution such
/// that range.min <= x <= range.max. inclusive of min and
/// max. Open ranges can be defined by setting
/// just one of min or max. Summed value X should satisfy
/// range.min <= X <= range.max for a good window.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderWindowsBasedSliMetricMeanInRangeRange {
    /// max value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<f64>,
    /// Min value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<f64>,
}

/// Criterion that describes a window as good if the metric's value
/// is in a good range, summed across returned streams.
/// Summed value X of time_series should satisfy
/// range.min <= X <= range.max for a good window.
/// One of good_bad_metric_filter,
/// good_total_ratio_threshold, metric_mean_in_range,
/// metric_sum_in_range must be set for windows_based_sli.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderWindowsBasedSliMetricSumInRange {
    /// Range of numerical values. The computed good_service
    /// will be the count of values x in the Distribution such
    /// that range.min <= x <= range.max. inclusive of min and
    /// max. Open ranges can be defined by setting
    /// just one of min or max. Summed value X should satisfy
    /// range.min <= X <= range.max for a good window.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub range: Option<SLOStatusAtProviderWindowsBasedSliMetricSumInRangeRange>,
    /// A monitoring filter
    /// specifying the TimeSeries to use for evaluating window
    /// quality. The provided TimeSeries must have
    /// ValueType = INT64 or ValueType = DOUBLE and
    /// MetricKind = GAUGE.
    /// Summed value X should satisfy
    /// range.min <= X <= range.max for a good window.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeSeries")]
    pub time_series: Option<String>,
}

/// Range of numerical values. The computed good_service
/// will be the count of values x in the Distribution such
/// that range.min <= x <= range.max. inclusive of min and
/// max. Open ranges can be defined by setting
/// just one of min or max. Summed value X should satisfy
/// range.min <= X <= range.max for a good window.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SLOStatusAtProviderWindowsBasedSliMetricSumInRangeRange {
    /// max value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub max: Option<f64>,
    /// Min value for the range (inclusive). If not given,
    /// will be set to 0
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub min: Option<f64>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// AppSpec defines the desired state of App
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "sagemaker.aws.upbound.io", version = "v1beta2", kind = "App", plural = "apps")]
#[kube(status = "AppStatus")]
pub struct AppSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<AppDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: AppForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<AppInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<AppProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<AppPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<AppWriteConnectionSecretToRef>,
}

/// AppSpec defines the desired state of App
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProvider {
    /// The name of the app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appName")]
    pub app_name: Option<String>,
    /// The type of app. Valid values are JupyterServer, KernelGateway, RStudioServerPro, RSessionGateway, TensorBoard, CodeEditor, JupyterLab, DetailedProfiler, and Canvas.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appType")]
    pub app_type: Option<String>,
    /// The domain ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainId")]
    pub domain_id: Option<String>,
    /// Reference to a Domain in sagemaker to populate domainId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainIdRef")]
    pub domain_id_ref: Option<AppForProviderDomainIdRef>,
    /// Selector for a Domain in sagemaker to populate domainId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainIdSelector")]
    pub domain_id_selector: Option<AppForProviderDomainIdSelector>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.See Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceSpec")]
    pub resource_spec: Option<AppForProviderResourceSpec>,
    /// The name of the space. At least one of user_profile_name or space_name required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spaceName")]
    pub space_name: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The user profile name. At least one of user_profile_name or space_name required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userProfileName")]
    pub user_profile_name: Option<String>,
    /// Reference to a UserProfile in sagemaker to populate userProfileName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userProfileNameRef")]
    pub user_profile_name_ref: Option<AppForProviderUserProfileNameRef>,
    /// Selector for a UserProfile in sagemaker to populate userProfileName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userProfileNameSelector")]
    pub user_profile_name_selector: Option<AppForProviderUserProfileNameSelector>,
}

/// Reference to a Domain in sagemaker to populate domainId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderDomainIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppForProviderDomainIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderDomainIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppForProviderDomainIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppForProviderDomainIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppForProviderDomainIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppForProviderDomainIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Domain in sagemaker to populate domainId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderDomainIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppForProviderDomainIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderDomainIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppForProviderDomainIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppForProviderDomainIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppForProviderDomainIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppForProviderDomainIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.See Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderResourceSpec {
    /// The instance type that the image version runs on. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    pub sagemaker_image_version_arn: Option<String>,
}

/// Reference to a UserProfile in sagemaker to populate userProfileName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderUserProfileNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppForProviderUserProfileNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderUserProfileNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppForProviderUserProfileNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppForProviderUserProfileNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppForProviderUserProfileNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppForProviderUserProfileNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a UserProfile in sagemaker to populate userProfileName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderUserProfileNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppForProviderUserProfileNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppForProviderUserProfileNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppForProviderUserProfileNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppForProviderUserProfileNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppForProviderUserProfileNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppForProviderUserProfileNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProvider {
    /// The name of the app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appName")]
    pub app_name: Option<String>,
    /// The type of app. Valid values are JupyterServer, KernelGateway, RStudioServerPro, RSessionGateway, TensorBoard, CodeEditor, JupyterLab, DetailedProfiler, and Canvas.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appType")]
    pub app_type: Option<String>,
    /// The domain ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainId")]
    pub domain_id: Option<String>,
    /// Reference to a Domain in sagemaker to populate domainId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainIdRef")]
    pub domain_id_ref: Option<AppInitProviderDomainIdRef>,
    /// Selector for a Domain in sagemaker to populate domainId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainIdSelector")]
    pub domain_id_selector: Option<AppInitProviderDomainIdSelector>,
    /// The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.See Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceSpec")]
    pub resource_spec: Option<AppInitProviderResourceSpec>,
    /// The name of the space. At least one of user_profile_name or space_name required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spaceName")]
    pub space_name: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The user profile name. At least one of user_profile_name or space_name required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userProfileName")]
    pub user_profile_name: Option<String>,
    /// Reference to a UserProfile in sagemaker to populate userProfileName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userProfileNameRef")]
    pub user_profile_name_ref: Option<AppInitProviderUserProfileNameRef>,
    /// Selector for a UserProfile in sagemaker to populate userProfileName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userProfileNameSelector")]
    pub user_profile_name_selector: Option<AppInitProviderUserProfileNameSelector>,
}

/// Reference to a Domain in sagemaker to populate domainId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderDomainIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppInitProviderDomainIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderDomainIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppInitProviderDomainIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppInitProviderDomainIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppInitProviderDomainIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppInitProviderDomainIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Domain in sagemaker to populate domainId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderDomainIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppInitProviderDomainIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderDomainIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppInitProviderDomainIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppInitProviderDomainIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppInitProviderDomainIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppInitProviderDomainIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.See Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderResourceSpec {
    /// The instance type that the image version runs on. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    pub sagemaker_image_version_arn: Option<String>,
}

/// Reference to a UserProfile in sagemaker to populate userProfileName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderUserProfileNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppInitProviderUserProfileNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderUserProfileNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppInitProviderUserProfileNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppInitProviderUserProfileNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppInitProviderUserProfileNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppInitProviderUserProfileNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a UserProfile in sagemaker to populate userProfileName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderUserProfileNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppInitProviderUserProfileNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppInitProviderUserProfileNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppInitProviderUserProfileNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppInitProviderUserProfileNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppInitProviderUserProfileNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppInitProviderUserProfileNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<AppPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<AppPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AppPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AppPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AppPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AppPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// AppStatus defines the observed state of App.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<AppStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppStatusAtProvider {
    /// The name of the app.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appName")]
    pub app_name: Option<String>,
    /// The type of app. Valid values are JupyterServer, KernelGateway, RStudioServerPro, RSessionGateway, TensorBoard, CodeEditor, JupyterLab, DetailedProfiler, and Canvas.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appType")]
    pub app_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the app.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// The domain ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainId")]
    pub domain_id: Option<String>,
    /// The Amazon Resource Name (ARN) of the app.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.See Resource Spec below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceSpec")]
    pub resource_spec: Option<AppStatusAtProviderResourceSpec>,
    /// The name of the space. At least one of user_profile_name or space_name required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "spaceName")]
    pub space_name: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// The user profile name. At least one of user_profile_name or space_name required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userProfileName")]
    pub user_profile_name: Option<String>,
}

/// The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.See Resource Spec below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AppStatusAtProviderResourceSpec {
    /// The instance type that the image version runs on. For valid values see SageMaker Instance Types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceType")]
    pub instance_type: Option<String>,
    /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lifecycleConfigArn")]
    pub lifecycle_config_arn: Option<String>,
    /// The ARN of the SageMaker image that the image version belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageArn")]
    pub sagemaker_image_arn: Option<String>,
    /// The SageMaker Image Version Alias.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionAlias")]
    pub sagemaker_image_version_alias: Option<String>,
    /// The ARN of the image version created on the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sagemakerImageVersionArn")]
    pub sagemaker_image_version_arn: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// WorkforceSpec defines the desired state of Workforce
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "sagemaker.aws.upbound.io", version = "v1beta2", kind = "Workforce", plural = "workforces")]
#[kube(status = "WorkforceStatus")]
pub struct WorkforceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<WorkforceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: WorkforceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<WorkforceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<WorkforceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<WorkforcePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<WorkforceWriteConnectionSecretToRef>,
}

/// WorkforceSpec defines the desired state of Workforce
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceForProvider {
    /// Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single Amazon Cognito user pool. Conflicts with oidc_config. see Cognito Config details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cognitoConfig")]
    pub cognito_config: Option<WorkforceForProviderCognitoConfig>,
    /// Use this parameter to configure a private workforce using your own OIDC Identity Provider. Conflicts with cognito_config. see OIDC Config details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oidcConfig")]
    pub oidc_config: Option<WorkforceForProviderOidcConfig>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// A list of IP address ranges Used to create an allow list of IP addresses for a private workforce. By default, a workforce isn't restricted to specific IP addresses. see Source Ip Config details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceIpConfig")]
    pub source_ip_config: Option<WorkforceForProviderSourceIpConfig>,
    /// configure a workforce using VPC. see Workforce VPC Config details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workforceVpcConfig")]
    pub workforce_vpc_config: Option<WorkforceForProviderWorkforceVpcConfig>,
}

/// Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single Amazon Cognito user pool. Conflicts with oidc_config. see Cognito Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceForProviderCognitoConfig {
    /// The client ID for your Amazon Cognito user pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// Reference to a UserPoolClient in cognitoidp to populate clientId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientIdRef")]
    pub client_id_ref: Option<WorkforceForProviderCognitoConfigClientIdRef>,
    /// Selector for a UserPoolClient in cognitoidp to populate clientId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientIdSelector")]
    pub client_id_selector: Option<WorkforceForProviderCognitoConfigClientIdSelector>,
    /// ID for your Amazon Cognito user pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPool")]
    pub user_pool: Option<String>,
    /// Reference to a UserPoolDomain in cognitoidp to populate userPool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolRef")]
    pub user_pool_ref: Option<WorkforceForProviderCognitoConfigUserPoolRef>,
    /// Selector for a UserPoolDomain in cognitoidp to populate userPool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolSelector")]
    pub user_pool_selector: Option<WorkforceForProviderCognitoConfigUserPoolSelector>,
}

/// Reference to a UserPoolClient in cognitoidp to populate clientId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceForProviderCognitoConfigClientIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WorkforceForProviderCognitoConfigClientIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceForProviderCognitoConfigClientIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WorkforceForProviderCognitoConfigClientIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WorkforceForProviderCognitoConfigClientIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceForProviderCognitoConfigClientIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceForProviderCognitoConfigClientIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a UserPoolClient in cognitoidp to populate clientId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceForProviderCognitoConfigClientIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WorkforceForProviderCognitoConfigClientIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceForProviderCognitoConfigClientIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WorkforceForProviderCognitoConfigClientIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WorkforceForProviderCognitoConfigClientIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceForProviderCognitoConfigClientIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceForProviderCognitoConfigClientIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a UserPoolDomain in cognitoidp to populate userPool.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceForProviderCognitoConfigUserPoolRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WorkforceForProviderCognitoConfigUserPoolRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceForProviderCognitoConfigUserPoolRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WorkforceForProviderCognitoConfigUserPoolRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WorkforceForProviderCognitoConfigUserPoolRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceForProviderCognitoConfigUserPoolRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceForProviderCognitoConfigUserPoolRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a UserPoolDomain in cognitoidp to populate userPool.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceForProviderCognitoConfigUserPoolSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WorkforceForProviderCognitoConfigUserPoolSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceForProviderCognitoConfigUserPoolSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WorkforceForProviderCognitoConfigUserPoolSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WorkforceForProviderCognitoConfigUserPoolSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceForProviderCognitoConfigUserPoolSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceForProviderCognitoConfigUserPoolSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Use this parameter to configure a private workforce using your own OIDC Identity Provider. Conflicts with cognito_config. see OIDC Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceForProviderOidcConfig {
    /// A string to string map of identifiers specific to the custom identity provider (IdP) being used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationRequestExtraParams")]
    pub authentication_request_extra_params: Option<HashMap<String, String>>,
    /// The OIDC IdP authorization endpoint used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationEndpoint")]
    pub authorization_endpoint: Option<String>,
    /// The client ID for your Amazon Cognito user pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// The OIDC IdP client secret used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSecretSecretRef")]
    pub client_secret_secret_ref: Option<WorkforceForProviderOidcConfigClientSecretSecretRef>,
    /// The OIDC IdP issuer used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    /// The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwksUri")]
    pub jwks_uri: Option<String>,
    /// The OIDC IdP logout endpoint used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logoutEndpoint")]
    pub logout_endpoint: Option<String>,
    /// An array of string identifiers used to refer to the specific pieces of user data or claims that the client application wants to access.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// The OIDC IdP token endpoint used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenEndpoint")]
    pub token_endpoint: Option<String>,
    /// The OIDC IdP user information endpoint used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userInfoEndpoint")]
    pub user_info_endpoint: Option<String>,
}

/// The OIDC IdP client secret used to configure your private workforce.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceForProviderOidcConfigClientSecretSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// A list of IP address ranges Used to create an allow list of IP addresses for a private workforce. By default, a workforce isn't restricted to specific IP addresses. see Source Ip Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceForProviderSourceIpConfig {
    /// A list of up to 10 CIDR values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidrs: Option<Vec<String>>,
}

/// configure a workforce using VPC. see Workforce VPC Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceForProviderWorkforceVpcConfig {
    /// The VPC security group IDs. The security groups must be for the same VPC as specified in the subnet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// The ID of the subnets in the VPC that you want to connect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnets: Option<Vec<String>>,
    /// The ID of the VPC that the workforce uses for communication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    pub vpc_id: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceInitProvider {
    /// Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single Amazon Cognito user pool. Conflicts with oidc_config. see Cognito Config details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cognitoConfig")]
    pub cognito_config: Option<WorkforceInitProviderCognitoConfig>,
    /// Use this parameter to configure a private workforce using your own OIDC Identity Provider. Conflicts with cognito_config. see OIDC Config details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oidcConfig")]
    pub oidc_config: Option<WorkforceInitProviderOidcConfig>,
    /// A list of IP address ranges Used to create an allow list of IP addresses for a private workforce. By default, a workforce isn't restricted to specific IP addresses. see Source Ip Config details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceIpConfig")]
    pub source_ip_config: Option<WorkforceInitProviderSourceIpConfig>,
    /// configure a workforce using VPC. see Workforce VPC Config details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workforceVpcConfig")]
    pub workforce_vpc_config: Option<WorkforceInitProviderWorkforceVpcConfig>,
}

/// Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single Amazon Cognito user pool. Conflicts with oidc_config. see Cognito Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceInitProviderCognitoConfig {
    /// The client ID for your Amazon Cognito user pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// Reference to a UserPoolClient in cognitoidp to populate clientId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientIdRef")]
    pub client_id_ref: Option<WorkforceInitProviderCognitoConfigClientIdRef>,
    /// Selector for a UserPoolClient in cognitoidp to populate clientId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientIdSelector")]
    pub client_id_selector: Option<WorkforceInitProviderCognitoConfigClientIdSelector>,
    /// ID for your Amazon Cognito user pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPool")]
    pub user_pool: Option<String>,
    /// Reference to a UserPoolDomain in cognitoidp to populate userPool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolRef")]
    pub user_pool_ref: Option<WorkforceInitProviderCognitoConfigUserPoolRef>,
    /// Selector for a UserPoolDomain in cognitoidp to populate userPool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolSelector")]
    pub user_pool_selector: Option<WorkforceInitProviderCognitoConfigUserPoolSelector>,
}

/// Reference to a UserPoolClient in cognitoidp to populate clientId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceInitProviderCognitoConfigClientIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WorkforceInitProviderCognitoConfigClientIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceInitProviderCognitoConfigClientIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WorkforceInitProviderCognitoConfigClientIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WorkforceInitProviderCognitoConfigClientIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceInitProviderCognitoConfigClientIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceInitProviderCognitoConfigClientIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a UserPoolClient in cognitoidp to populate clientId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceInitProviderCognitoConfigClientIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WorkforceInitProviderCognitoConfigClientIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceInitProviderCognitoConfigClientIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WorkforceInitProviderCognitoConfigClientIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WorkforceInitProviderCognitoConfigClientIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceInitProviderCognitoConfigClientIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceInitProviderCognitoConfigClientIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a UserPoolDomain in cognitoidp to populate userPool.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceInitProviderCognitoConfigUserPoolRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WorkforceInitProviderCognitoConfigUserPoolRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceInitProviderCognitoConfigUserPoolRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WorkforceInitProviderCognitoConfigUserPoolRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WorkforceInitProviderCognitoConfigUserPoolRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceInitProviderCognitoConfigUserPoolRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceInitProviderCognitoConfigUserPoolRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a UserPoolDomain in cognitoidp to populate userPool.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceInitProviderCognitoConfigUserPoolSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WorkforceInitProviderCognitoConfigUserPoolSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceInitProviderCognitoConfigUserPoolSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WorkforceInitProviderCognitoConfigUserPoolSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WorkforceInitProviderCognitoConfigUserPoolSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceInitProviderCognitoConfigUserPoolSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceInitProviderCognitoConfigUserPoolSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Use this parameter to configure a private workforce using your own OIDC Identity Provider. Conflicts with cognito_config. see OIDC Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceInitProviderOidcConfig {
    /// A string to string map of identifiers specific to the custom identity provider (IdP) being used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationRequestExtraParams")]
    pub authentication_request_extra_params: Option<HashMap<String, String>>,
    /// The OIDC IdP authorization endpoint used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationEndpoint")]
    pub authorization_endpoint: Option<String>,
    /// The client ID for your Amazon Cognito user pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// The OIDC IdP client secret used to configure your private workforce.
    #[serde(rename = "clientSecretSecretRef")]
    pub client_secret_secret_ref: WorkforceInitProviderOidcConfigClientSecretSecretRef,
    /// The OIDC IdP issuer used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    /// The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwksUri")]
    pub jwks_uri: Option<String>,
    /// The OIDC IdP logout endpoint used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logoutEndpoint")]
    pub logout_endpoint: Option<String>,
    /// An array of string identifiers used to refer to the specific pieces of user data or claims that the client application wants to access.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// The OIDC IdP token endpoint used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenEndpoint")]
    pub token_endpoint: Option<String>,
    /// The OIDC IdP user information endpoint used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userInfoEndpoint")]
    pub user_info_endpoint: Option<String>,
}

/// The OIDC IdP client secret used to configure your private workforce.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceInitProviderOidcConfigClientSecretSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// A list of IP address ranges Used to create an allow list of IP addresses for a private workforce. By default, a workforce isn't restricted to specific IP addresses. see Source Ip Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceInitProviderSourceIpConfig {
    /// A list of up to 10 CIDR values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidrs: Option<Vec<String>>,
}

/// configure a workforce using VPC. see Workforce VPC Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceInitProviderWorkforceVpcConfig {
    /// The VPC security group IDs. The security groups must be for the same VPC as specified in the subnet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// The ID of the subnets in the VPC that you want to connect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnets: Option<Vec<String>>,
    /// The ID of the VPC that the workforce uses for communication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    pub vpc_id: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WorkforceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WorkforceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WorkforceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforcePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<WorkforcePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<WorkforcePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforcePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<WorkforcePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforcePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<WorkforcePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<WorkforcePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforcePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum WorkforcePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforcePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// WorkforceStatus defines the observed state of Workforce.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<WorkforceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceStatusAtProvider {
    /// The Amazon Resource Name (ARN) assigned by AWS to this Workforce.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single Amazon Cognito user pool. Conflicts with oidc_config. see Cognito Config details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cognitoConfig")]
    pub cognito_config: Option<WorkforceStatusAtProviderCognitoConfig>,
    /// The name of the Workforce.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Use this parameter to configure a private workforce using your own OIDC Identity Provider. Conflicts with cognito_config. see OIDC Config details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oidcConfig")]
    pub oidc_config: Option<WorkforceStatusAtProviderOidcConfig>,
    /// A list of IP address ranges Used to create an allow list of IP addresses for a private workforce. By default, a workforce isn't restricted to specific IP addresses. see Source Ip Config details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceIpConfig")]
    pub source_ip_config: Option<WorkforceStatusAtProviderSourceIpConfig>,
    /// The subdomain for your OIDC Identity Provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subdomain: Option<String>,
    /// configure a workforce using VPC. see Workforce VPC Config details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "workforceVpcConfig")]
    pub workforce_vpc_config: Option<WorkforceStatusAtProviderWorkforceVpcConfig>,
}

/// Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single Amazon Cognito user pool. Conflicts with oidc_config. see Cognito Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceStatusAtProviderCognitoConfig {
    /// The client ID for your Amazon Cognito user pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// ID for your Amazon Cognito user pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPool")]
    pub user_pool: Option<String>,
}

/// Use this parameter to configure a private workforce using your own OIDC Identity Provider. Conflicts with cognito_config. see OIDC Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceStatusAtProviderOidcConfig {
    /// A string to string map of identifiers specific to the custom identity provider (IdP) being used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationRequestExtraParams")]
    pub authentication_request_extra_params: Option<HashMap<String, String>>,
    /// The OIDC IdP authorization endpoint used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationEndpoint")]
    pub authorization_endpoint: Option<String>,
    /// The client ID for your Amazon Cognito user pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// The OIDC IdP issuer used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    /// The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "jwksUri")]
    pub jwks_uri: Option<String>,
    /// The OIDC IdP logout endpoint used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logoutEndpoint")]
    pub logout_endpoint: Option<String>,
    /// An array of string identifiers used to refer to the specific pieces of user data or claims that the client application wants to access.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// The OIDC IdP token endpoint used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenEndpoint")]
    pub token_endpoint: Option<String>,
    /// The OIDC IdP user information endpoint used to configure your private workforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userInfoEndpoint")]
    pub user_info_endpoint: Option<String>,
}

/// A list of IP address ranges Used to create an allow list of IP addresses for a private workforce. By default, a workforce isn't restricted to specific IP addresses. see Source Ip Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceStatusAtProviderSourceIpConfig {
    /// A list of up to 10 CIDR values.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cidrs: Option<Vec<String>>,
}

/// configure a workforce using VPC. see Workforce VPC Config details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct WorkforceStatusAtProviderWorkforceVpcConfig {
    /// The VPC security group IDs. The security groups must be for the same VPC as specified in the subnet.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// The ID of the subnets in the VPC that you want to connect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnets: Option<Vec<String>>,
    /// The IDs for the VPC service endpoints of your VPC workforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcEndpointId")]
    pub vpc_endpoint_id: Option<String>,
    /// The ID of the VPC that the workforce uses for communication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    pub vpc_id: Option<String>,
}


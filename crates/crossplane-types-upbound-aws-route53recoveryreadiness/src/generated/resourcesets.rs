// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ResourceSetSpec defines the desired state of ResourceSet
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "route53recoveryreadiness.aws.upbound.io", version = "v1beta2", kind = "ResourceSet", plural = "resourcesets")]
#[kube(status = "ResourceSetStatus")]
pub struct ResourceSetSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<ResourceSetDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ResourceSetForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<ResourceSetInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<ResourceSetProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<ResourceSetPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<ResourceSetWriteConnectionSecretToRef>,
}

/// ResourceSetSpec defines the desired state of ResourceSet
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResourceSetDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetForProvider {
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Type of the resources in the resource set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceSetType")]
    pub resource_set_type: Option<String>,
    /// List of resources to add to this resource set. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<ResourceSetForProviderResources>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetForProviderResources {
    /// Component for DNS/Routing Control Readiness Checks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsTargetResource")]
    pub dns_target_resource: Option<ResourceSetForProviderResourcesDnsTargetResource>,
    /// Recovery group ARN or cell ARN that contains this resource set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessScopes")]
    pub readiness_scopes: Option<Vec<String>>,
    /// ARN of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArn")]
    pub resource_arn: Option<String>,
    /// Reference to a MetricAlarm in cloudwatch to populate resourceArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArnRef")]
    pub resource_arn_ref: Option<ResourceSetForProviderResourcesResourceArnRef>,
    /// Selector for a MetricAlarm in cloudwatch to populate resourceArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArnSelector")]
    pub resource_arn_selector: Option<ResourceSetForProviderResourcesResourceArnSelector>,
}

/// Component for DNS/Routing Control Readiness Checks.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetForProviderResourcesDnsTargetResource {
    /// DNS Name that acts as the ingress point to a portion of application.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainName")]
    pub domain_name: Option<String>,
    /// Hosted Zone ARN that contains the DNS record with the provided name of target resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostedZoneArn")]
    pub hosted_zone_arn: Option<String>,
    /// Route53 record set id to uniquely identify a record given a domain_name and a record_type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordSetId")]
    pub record_set_id: Option<String>,
    /// Type of DNS Record of target resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordType")]
    pub record_type: Option<String>,
    /// Target resource the R53 record specified with the above params points to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetResource")]
    pub target_resource: Option<ResourceSetForProviderResourcesDnsTargetResourceTargetResource>,
}

/// Target resource the R53 record specified with the above params points to.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetForProviderResourcesDnsTargetResourceTargetResource {
    /// NLB resource a DNS Target Resource points to. Required if r53_resource is not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nlbResource")]
    pub nlb_resource: Option<ResourceSetForProviderResourcesDnsTargetResourceTargetResourceNlbResource>,
    /// Route53 resource a DNS Target Resource record points to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "r53Resource")]
    pub r53_resource: Option<ResourceSetForProviderResourcesDnsTargetResourceTargetResourceR53Resource>,
}

/// NLB resource a DNS Target Resource points to. Required if r53_resource is not set.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetForProviderResourcesDnsTargetResourceTargetResourceNlbResource {
    /// NLB resource ARN.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
}

/// Route53 resource a DNS Target Resource record points to.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetForProviderResourcesDnsTargetResourceTargetResourceR53Resource {
    /// Domain name that is targeted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainName")]
    pub domain_name: Option<String>,
    /// Resource record set ID that is targeted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordSetId")]
    pub record_set_id: Option<String>,
}

/// Reference to a MetricAlarm in cloudwatch to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetForProviderResourcesResourceArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ResourceSetForProviderResourcesResourceArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetForProviderResourcesResourceArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ResourceSetForProviderResourcesResourceArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ResourceSetForProviderResourcesResourceArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResourceSetForProviderResourcesResourceArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResourceSetForProviderResourcesResourceArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a MetricAlarm in cloudwatch to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetForProviderResourcesResourceArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ResourceSetForProviderResourcesResourceArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetForProviderResourcesResourceArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ResourceSetForProviderResourcesResourceArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ResourceSetForProviderResourcesResourceArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResourceSetForProviderResourcesResourceArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResourceSetForProviderResourcesResourceArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetInitProvider {
    /// Type of the resources in the resource set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceSetType")]
    pub resource_set_type: Option<String>,
    /// List of resources to add to this resource set. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<ResourceSetInitProviderResources>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetInitProviderResources {
    /// Component for DNS/Routing Control Readiness Checks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsTargetResource")]
    pub dns_target_resource: Option<ResourceSetInitProviderResourcesDnsTargetResource>,
    /// Recovery group ARN or cell ARN that contains this resource set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessScopes")]
    pub readiness_scopes: Option<Vec<String>>,
    /// ARN of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArn")]
    pub resource_arn: Option<String>,
    /// Reference to a MetricAlarm in cloudwatch to populate resourceArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArnRef")]
    pub resource_arn_ref: Option<ResourceSetInitProviderResourcesResourceArnRef>,
    /// Selector for a MetricAlarm in cloudwatch to populate resourceArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArnSelector")]
    pub resource_arn_selector: Option<ResourceSetInitProviderResourcesResourceArnSelector>,
}

/// Component for DNS/Routing Control Readiness Checks.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetInitProviderResourcesDnsTargetResource {
    /// DNS Name that acts as the ingress point to a portion of application.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainName")]
    pub domain_name: Option<String>,
    /// Hosted Zone ARN that contains the DNS record with the provided name of target resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostedZoneArn")]
    pub hosted_zone_arn: Option<String>,
    /// Route53 record set id to uniquely identify a record given a domain_name and a record_type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordSetId")]
    pub record_set_id: Option<String>,
    /// Type of DNS Record of target resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordType")]
    pub record_type: Option<String>,
    /// Target resource the R53 record specified with the above params points to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetResource")]
    pub target_resource: Option<ResourceSetInitProviderResourcesDnsTargetResourceTargetResource>,
}

/// Target resource the R53 record specified with the above params points to.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetInitProviderResourcesDnsTargetResourceTargetResource {
    /// NLB resource a DNS Target Resource points to. Required if r53_resource is not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nlbResource")]
    pub nlb_resource: Option<ResourceSetInitProviderResourcesDnsTargetResourceTargetResourceNlbResource>,
    /// Route53 resource a DNS Target Resource record points to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "r53Resource")]
    pub r53_resource: Option<ResourceSetInitProviderResourcesDnsTargetResourceTargetResourceR53Resource>,
}

/// NLB resource a DNS Target Resource points to. Required if r53_resource is not set.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetInitProviderResourcesDnsTargetResourceTargetResourceNlbResource {
    /// NLB resource ARN.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
}

/// Route53 resource a DNS Target Resource record points to.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetInitProviderResourcesDnsTargetResourceTargetResourceR53Resource {
    /// Domain name that is targeted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainName")]
    pub domain_name: Option<String>,
    /// Resource record set ID that is targeted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordSetId")]
    pub record_set_id: Option<String>,
}

/// Reference to a MetricAlarm in cloudwatch to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetInitProviderResourcesResourceArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ResourceSetInitProviderResourcesResourceArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetInitProviderResourcesResourceArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ResourceSetInitProviderResourcesResourceArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ResourceSetInitProviderResourcesResourceArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResourceSetInitProviderResourcesResourceArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResourceSetInitProviderResourcesResourceArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a MetricAlarm in cloudwatch to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetInitProviderResourcesResourceArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ResourceSetInitProviderResourcesResourceArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetInitProviderResourcesResourceArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ResourceSetInitProviderResourcesResourceArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ResourceSetInitProviderResourcesResourceArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResourceSetInitProviderResourcesResourceArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResourceSetInitProviderResourcesResourceArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ResourceSetProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ResourceSetProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ResourceSetProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResourceSetProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResourceSetProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ResourceSetPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ResourceSetPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ResourceSetPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ResourceSetPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ResourceSetPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResourceSetPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResourceSetPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ResourceSetStatus defines the observed state of ResourceSet.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<ResourceSetStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetStatusAtProvider {
    /// ARN of the resource set
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Type of the resources in the resource set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceSetType")]
    pub resource_set_type: Option<String>,
    /// List of resources to add to this resource set. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<ResourceSetStatusAtProviderResources>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetStatusAtProviderResources {
    /// Unique identified for DNS Target Resources, use for readiness checks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "componentId")]
    pub component_id: Option<String>,
    /// Component for DNS/Routing Control Readiness Checks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsTargetResource")]
    pub dns_target_resource: Option<ResourceSetStatusAtProviderResourcesDnsTargetResource>,
    /// Recovery group ARN or cell ARN that contains this resource set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "readinessScopes")]
    pub readiness_scopes: Option<Vec<String>>,
    /// ARN of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArn")]
    pub resource_arn: Option<String>,
}

/// Component for DNS/Routing Control Readiness Checks.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetStatusAtProviderResourcesDnsTargetResource {
    /// DNS Name that acts as the ingress point to a portion of application.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainName")]
    pub domain_name: Option<String>,
    /// Hosted Zone ARN that contains the DNS record with the provided name of target resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostedZoneArn")]
    pub hosted_zone_arn: Option<String>,
    /// Route53 record set id to uniquely identify a record given a domain_name and a record_type.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordSetId")]
    pub record_set_id: Option<String>,
    /// Type of DNS Record of target resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordType")]
    pub record_type: Option<String>,
    /// Target resource the R53 record specified with the above params points to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetResource")]
    pub target_resource: Option<ResourceSetStatusAtProviderResourcesDnsTargetResourceTargetResource>,
}

/// Target resource the R53 record specified with the above params points to.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetStatusAtProviderResourcesDnsTargetResourceTargetResource {
    /// NLB resource a DNS Target Resource points to. Required if r53_resource is not set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nlbResource")]
    pub nlb_resource: Option<ResourceSetStatusAtProviderResourcesDnsTargetResourceTargetResourceNlbResource>,
    /// Route53 resource a DNS Target Resource record points to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "r53Resource")]
    pub r53_resource: Option<ResourceSetStatusAtProviderResourcesDnsTargetResourceTargetResourceR53Resource>,
}

/// NLB resource a DNS Target Resource points to. Required if r53_resource is not set.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetStatusAtProviderResourcesDnsTargetResourceTargetResourceNlbResource {
    /// NLB resource ARN.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
}

/// Route53 resource a DNS Target Resource record points to.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourceSetStatusAtProviderResourcesDnsTargetResourceTargetResourceR53Resource {
    /// Domain name that is targeted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainName")]
    pub domain_name: Option<String>,
    /// Resource record set ID that is targeted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "recordSetId")]
    pub record_set_id: Option<String>,
}


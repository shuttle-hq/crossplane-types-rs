// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
}
use self::prelude::*;

/// ApplicationSpec defines the desired state of Application
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(
    group = "kinesisanalytics.aws.upbound.io",
    version = "v1beta2",
    kind = "Application",
    plural = "applications"
)]
#[kube(status = "ApplicationStatus")]
pub struct ApplicationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    pub deletion_policy: Option<ApplicationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ApplicationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    pub init_provider: Option<ApplicationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    pub provider_config_ref: Option<ApplicationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    pub publish_connection_details_to: Option<ApplicationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    pub write_connection_secret_to_ref: Option<ApplicationWriteConnectionSecretToRef>,
}

/// ApplicationSpec defines the desired state of Application
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProvider {
    /// The CloudWatch log stream options to monitor application errors.
    /// See CloudWatch Logging Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLoggingOptions"
    )]
    pub cloudwatch_logging_options: Option<ApplicationForProviderCloudwatchLoggingOptions>,
    /// SQL Code to transform input data, and generate output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    /// Description of the application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Input configuration of the application. See Inputs below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inputs: Option<ApplicationForProviderInputs>,
    /// Output destination configuration of the application. See Outputs below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<ApplicationForProviderOutputs>>,
    /// An S3 Reference Data Source for the application.
    /// See Reference Data Sources below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "referenceDataSources"
    )]
    pub reference_data_sources: Option<ApplicationForProviderReferenceDataSources>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Whether to start or stop the Kinesis Analytics Application. To start an application, an input with a defined starting_position must be configured.
    /// To modify an application's starting position, first stop the application by setting start_application = false, then update starting_position and set start_application = true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startApplication"
    )]
    pub start_application: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// The CloudWatch log stream options to monitor application errors.
/// See CloudWatch Logging Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderCloudwatchLoggingOptions {
    /// The ARN of the CloudWatch Log Stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logStreamArn"
    )]
    pub log_stream_arn: Option<String>,
    /// Reference to a Stream in cloudwatchlogs to populate logStreamArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logStreamArnRef"
    )]
    pub log_stream_arn_ref: Option<ApplicationForProviderCloudwatchLoggingOptionsLogStreamArnRef>,
    /// Selector for a Stream in cloudwatchlogs to populate logStreamArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logStreamArnSelector"
    )]
    pub log_stream_arn_selector:
        Option<ApplicationForProviderCloudwatchLoggingOptionsLogStreamArnSelector>,
    /// The ARN of the IAM Role used to send application messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnRef"
    )]
    pub role_arn_ref: Option<ApplicationForProviderCloudwatchLoggingOptionsRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnSelector"
    )]
    pub role_arn_selector: Option<ApplicationForProviderCloudwatchLoggingOptionsRoleArnSelector>,
}

/// Reference to a Stream in cloudwatchlogs to populate logStreamArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderCloudwatchLoggingOptionsLogStreamArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationForProviderCloudwatchLoggingOptionsLogStreamArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderCloudwatchLoggingOptionsLogStreamArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationForProviderCloudwatchLoggingOptionsLogStreamArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationForProviderCloudwatchLoggingOptionsLogStreamArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderCloudwatchLoggingOptionsLogStreamArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderCloudwatchLoggingOptionsLogStreamArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Stream in cloudwatchlogs to populate logStreamArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderCloudwatchLoggingOptionsLogStreamArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationForProviderCloudwatchLoggingOptionsLogStreamArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderCloudwatchLoggingOptionsLogStreamArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationForProviderCloudwatchLoggingOptionsLogStreamArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve:
        Option<ApplicationForProviderCloudwatchLoggingOptionsLogStreamArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderCloudwatchLoggingOptionsLogStreamArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderCloudwatchLoggingOptionsLogStreamArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderCloudwatchLoggingOptionsRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationForProviderCloudwatchLoggingOptionsRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderCloudwatchLoggingOptionsRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationForProviderCloudwatchLoggingOptionsRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationForProviderCloudwatchLoggingOptionsRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderCloudwatchLoggingOptionsRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderCloudwatchLoggingOptionsRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderCloudwatchLoggingOptionsRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationForProviderCloudwatchLoggingOptionsRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderCloudwatchLoggingOptionsRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationForProviderCloudwatchLoggingOptionsRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationForProviderCloudwatchLoggingOptionsRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderCloudwatchLoggingOptionsRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderCloudwatchLoggingOptionsRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Input configuration of the application. See Inputs below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputs {
    /// The Kinesis Firehose configuration for the streaming source. Conflicts with kinesis_stream.
    /// See Kinesis Firehose below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisFirehose"
    )]
    pub kinesis_firehose: Option<ApplicationForProviderInputsKinesisFirehose>,
    /// The Kinesis Stream configuration for the streaming source. Conflicts with kinesis_firehose.
    /// See Kinesis Stream below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisStream"
    )]
    pub kinesis_stream: Option<ApplicationForProviderInputsKinesisStream>,
    /// The Name Prefix to use when creating an in-application stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "namePrefix"
    )]
    pub name_prefix: Option<String>,
    /// The number of Parallel in-application streams to create.
    /// See Parallelism below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parallelism: Option<ApplicationForProviderInputsParallelism>,
    /// The Processing Configuration to transform records as they are received from the stream.
    /// See Processing Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "processingConfiguration"
    )]
    pub processing_configuration: Option<ApplicationForProviderInputsProcessingConfiguration>,
    /// The Schema format of the data in the streaming source. See Source Schema below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<ApplicationForProviderInputsSchema>,
    /// The point at which the application starts processing records from the streaming source.
    /// See Starting Position Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startingPositionConfiguration"
    )]
    pub starting_position_configuration:
        Option<Vec<ApplicationForProviderInputsStartingPositionConfiguration>>,
}

/// The Kinesis Firehose configuration for the streaming source. Conflicts with kinesis_stream.
/// See Kinesis Firehose below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsKinesisFirehose {
    /// The ARN of the Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    pub resource_arn: Option<String>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The Kinesis Stream configuration for the streaming source. Conflicts with kinesis_firehose.
/// See Kinesis Stream below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsKinesisStream {
    /// The ARN of the Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    pub resource_arn: Option<String>,
    /// Reference to a Stream in kinesis to populate resourceArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArnRef"
    )]
    pub resource_arn_ref: Option<ApplicationForProviderInputsKinesisStreamResourceArnRef>,
    /// Selector for a Stream in kinesis to populate resourceArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArnSelector"
    )]
    pub resource_arn_selector: Option<ApplicationForProviderInputsKinesisStreamResourceArnSelector>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnRef"
    )]
    pub role_arn_ref: Option<ApplicationForProviderInputsKinesisStreamRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnSelector"
    )]
    pub role_arn_selector: Option<ApplicationForProviderInputsKinesisStreamRoleArnSelector>,
}

/// Reference to a Stream in kinesis to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsKinesisStreamResourceArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationForProviderInputsKinesisStreamResourceArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsKinesisStreamResourceArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationForProviderInputsKinesisStreamResourceArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationForProviderInputsKinesisStreamResourceArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderInputsKinesisStreamResourceArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderInputsKinesisStreamResourceArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Stream in kinesis to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsKinesisStreamResourceArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationForProviderInputsKinesisStreamResourceArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsKinesisStreamResourceArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationForProviderInputsKinesisStreamResourceArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationForProviderInputsKinesisStreamResourceArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderInputsKinesisStreamResourceArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderInputsKinesisStreamResourceArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsKinesisStreamRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationForProviderInputsKinesisStreamRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsKinesisStreamRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationForProviderInputsKinesisStreamRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationForProviderInputsKinesisStreamRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderInputsKinesisStreamRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderInputsKinesisStreamRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsKinesisStreamRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationForProviderInputsKinesisStreamRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsKinesisStreamRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationForProviderInputsKinesisStreamRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationForProviderInputsKinesisStreamRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderInputsKinesisStreamRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderInputsKinesisStreamRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The number of Parallel in-application streams to create.
/// See Parallelism below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsParallelism {
    /// The Count of streams.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<f64>,
}

/// The Processing Configuration to transform records as they are received from the stream.
/// See Processing Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsProcessingConfiguration {
    /// The Lambda function configuration. See Lambda below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lambda: Option<ApplicationForProviderInputsProcessingConfigurationLambda>,
}

/// The Lambda function configuration. See Lambda below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsProcessingConfigurationLambda {
    /// The ARN of the Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    pub resource_arn: Option<String>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The Schema format of the data in the streaming source. See Source Schema below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsSchema {
    /// The Record Column mapping for the streaming source data element.
    /// See Record Columns below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordColumns"
    )]
    pub record_columns: Option<Vec<ApplicationForProviderInputsSchemaRecordColumns>>,
    /// The Encoding of the record in the streaming source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordEncoding"
    )]
    pub record_encoding: Option<String>,
    /// The Record Format and mapping information to schematize a record.
    /// See Record Format below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordFormat"
    )]
    pub record_format: Option<ApplicationForProviderInputsSchemaRecordFormat>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsSchemaRecordColumns {
    /// The Mapping reference to the data element.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mapping: Option<String>,
    /// Name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The SQL Type of the column.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqlType")]
    pub sql_type: Option<String>,
}

/// The Record Format and mapping information to schematize a record.
/// See Record Format below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsSchemaRecordFormat {
    /// The Mapping Information for the record format.
    /// See Mapping Parameters below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mappingParameters"
    )]
    pub mapping_parameters: Option<ApplicationForProviderInputsSchemaRecordFormatMappingParameters>,
}

/// The Mapping Information for the record format.
/// See Mapping Parameters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsSchemaRecordFormatMappingParameters {
    /// Mapping information when the record format uses delimiters.
    /// See CSV Mapping Parameters below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csv: Option<ApplicationForProviderInputsSchemaRecordFormatMappingParametersCsv>,
    /// Mapping information when JSON is the record format on the streaming source.
    /// See JSON Mapping Parameters below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json: Option<ApplicationForProviderInputsSchemaRecordFormatMappingParametersJson>,
}

/// Mapping information when the record format uses delimiters.
/// See CSV Mapping Parameters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsSchemaRecordFormatMappingParametersCsv {
    /// The Column Delimiter.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordColumnDelimiter"
    )]
    pub record_column_delimiter: Option<String>,
    /// The Row Delimiter.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordRowDelimiter"
    )]
    pub record_row_delimiter: Option<String>,
}

/// Mapping information when JSON is the record format on the streaming source.
/// See JSON Mapping Parameters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsSchemaRecordFormatMappingParametersJson {
    /// Path to the top-level parent that contains the records.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordRowPath"
    )]
    pub record_row_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInputsStartingPositionConfiguration {
    /// The starting position on the stream. Valid values: LAST_STOPPED_POINT, NOW, TRIM_HORIZON.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startingPosition"
    )]
    pub starting_position: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderOutputs {
    /// The Kinesis Firehose configuration for the destination stream. Conflicts with kinesis_stream.
    /// See Kinesis Firehose below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisFirehose"
    )]
    pub kinesis_firehose: Option<ApplicationForProviderOutputsKinesisFirehose>,
    /// The Kinesis Stream configuration for the destination stream. Conflicts with kinesis_firehose.
    /// See Kinesis Stream below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisStream"
    )]
    pub kinesis_stream: Option<ApplicationForProviderOutputsKinesisStream>,
    /// The Lambda function destination. See Lambda below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lambda: Option<ApplicationForProviderOutputsLambda>,
    /// The Name of the in-application stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The Schema format of the data written to the destination. See Destination Schema below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<ApplicationForProviderOutputsSchema>,
}

/// The Kinesis Firehose configuration for the destination stream. Conflicts with kinesis_stream.
/// See Kinesis Firehose below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderOutputsKinesisFirehose {
    /// The ARN of the Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    pub resource_arn: Option<String>,
    /// Reference to a DeliveryStream in firehose to populate resourceArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArnRef"
    )]
    pub resource_arn_ref: Option<ApplicationForProviderOutputsKinesisFirehoseResourceArnRef>,
    /// Selector for a DeliveryStream in firehose to populate resourceArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArnSelector"
    )]
    pub resource_arn_selector:
        Option<ApplicationForProviderOutputsKinesisFirehoseResourceArnSelector>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnRef"
    )]
    pub role_arn_ref: Option<ApplicationForProviderOutputsKinesisFirehoseRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnSelector"
    )]
    pub role_arn_selector: Option<ApplicationForProviderOutputsKinesisFirehoseRoleArnSelector>,
}

/// Reference to a DeliveryStream in firehose to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderOutputsKinesisFirehoseResourceArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationForProviderOutputsKinesisFirehoseResourceArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderOutputsKinesisFirehoseResourceArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationForProviderOutputsKinesisFirehoseResourceArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationForProviderOutputsKinesisFirehoseResourceArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderOutputsKinesisFirehoseResourceArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderOutputsKinesisFirehoseResourceArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a DeliveryStream in firehose to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderOutputsKinesisFirehoseResourceArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationForProviderOutputsKinesisFirehoseResourceArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderOutputsKinesisFirehoseResourceArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationForProviderOutputsKinesisFirehoseResourceArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve:
        Option<ApplicationForProviderOutputsKinesisFirehoseResourceArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderOutputsKinesisFirehoseResourceArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderOutputsKinesisFirehoseResourceArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderOutputsKinesisFirehoseRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationForProviderOutputsKinesisFirehoseRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderOutputsKinesisFirehoseRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationForProviderOutputsKinesisFirehoseRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationForProviderOutputsKinesisFirehoseRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderOutputsKinesisFirehoseRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderOutputsKinesisFirehoseRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderOutputsKinesisFirehoseRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationForProviderOutputsKinesisFirehoseRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderOutputsKinesisFirehoseRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationForProviderOutputsKinesisFirehoseRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationForProviderOutputsKinesisFirehoseRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderOutputsKinesisFirehoseRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationForProviderOutputsKinesisFirehoseRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The Kinesis Stream configuration for the destination stream. Conflicts with kinesis_firehose.
/// See Kinesis Stream below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderOutputsKinesisStream {
    /// The ARN of the Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    pub resource_arn: Option<String>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The Lambda function destination. See Lambda below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderOutputsLambda {
    /// The ARN of the Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    pub resource_arn: Option<String>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The Schema format of the data written to the destination. See Destination Schema below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderOutputsSchema {
    /// The Format Type of the records on the output stream. Can be CSV or JSON.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordFormatType"
    )]
    pub record_format_type: Option<String>,
}

/// An S3 Reference Data Source for the application.
/// See Reference Data Sources below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderReferenceDataSources {
    /// The S3 configuration for the reference data source. See S3 Reference below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3: Option<ApplicationForProviderReferenceDataSourcesS3>,
    /// The Schema format of the data in the streaming source. See Source Schema below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<ApplicationForProviderReferenceDataSourcesSchema>,
    /// The in-application Table Name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    pub table_name: Option<String>,
}

/// The S3 configuration for the reference data source. See S3 Reference below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderReferenceDataSourcesS3 {
    /// The S3 Bucket ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// The File Key name containing reference data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileKey")]
    pub file_key: Option<String>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The Schema format of the data in the streaming source. See Source Schema below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderReferenceDataSourcesSchema {
    /// The Record Column mapping for the streaming source data element.
    /// See Record Columns below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordColumns"
    )]
    pub record_columns: Option<Vec<ApplicationForProviderReferenceDataSourcesSchemaRecordColumns>>,
    /// The Encoding of the record in the streaming source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordEncoding"
    )]
    pub record_encoding: Option<String>,
    /// The Record Format and mapping information to schematize a record.
    /// See Record Format below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordFormat"
    )]
    pub record_format: Option<ApplicationForProviderReferenceDataSourcesSchemaRecordFormat>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderReferenceDataSourcesSchemaRecordColumns {
    /// The Mapping reference to the data element.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mapping: Option<String>,
    /// Name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The SQL Type of the column.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqlType")]
    pub sql_type: Option<String>,
}

/// The Record Format and mapping information to schematize a record.
/// See Record Format below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderReferenceDataSourcesSchemaRecordFormat {
    /// The Mapping Information for the record format.
    /// See Mapping Parameters below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mappingParameters"
    )]
    pub mapping_parameters:
        Option<ApplicationForProviderReferenceDataSourcesSchemaRecordFormatMappingParameters>,
}

/// The Mapping Information for the record format.
/// See Mapping Parameters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderReferenceDataSourcesSchemaRecordFormatMappingParameters {
    /// Mapping information when the record format uses delimiters.
    /// See CSV Mapping Parameters below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csv:
        Option<ApplicationForProviderReferenceDataSourcesSchemaRecordFormatMappingParametersCsv>,
    /// Mapping information when JSON is the record format on the streaming source.
    /// See JSON Mapping Parameters below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json:
        Option<ApplicationForProviderReferenceDataSourcesSchemaRecordFormatMappingParametersJson>,
}

/// Mapping information when the record format uses delimiters.
/// See CSV Mapping Parameters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderReferenceDataSourcesSchemaRecordFormatMappingParametersCsv {
    /// The Column Delimiter.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordColumnDelimiter"
    )]
    pub record_column_delimiter: Option<String>,
    /// The Row Delimiter.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordRowDelimiter"
    )]
    pub record_row_delimiter: Option<String>,
}

/// Mapping information when JSON is the record format on the streaming source.
/// See JSON Mapping Parameters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderReferenceDataSourcesSchemaRecordFormatMappingParametersJson {
    /// Path to the top-level parent that contains the records.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordRowPath"
    )]
    pub record_row_path: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProvider {
    /// The CloudWatch log stream options to monitor application errors.
    /// See CloudWatch Logging Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLoggingOptions"
    )]
    pub cloudwatch_logging_options: Option<ApplicationInitProviderCloudwatchLoggingOptions>,
    /// SQL Code to transform input data, and generate output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    /// Description of the application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Input configuration of the application. See Inputs below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inputs: Option<ApplicationInitProviderInputs>,
    /// Output destination configuration of the application. See Outputs below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<ApplicationInitProviderOutputs>>,
    /// An S3 Reference Data Source for the application.
    /// See Reference Data Sources below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "referenceDataSources"
    )]
    pub reference_data_sources: Option<ApplicationInitProviderReferenceDataSources>,
    /// Whether to start or stop the Kinesis Analytics Application. To start an application, an input with a defined starting_position must be configured.
    /// To modify an application's starting position, first stop the application by setting start_application = false, then update starting_position and set start_application = true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startApplication"
    )]
    pub start_application: Option<bool>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// The CloudWatch log stream options to monitor application errors.
/// See CloudWatch Logging Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderCloudwatchLoggingOptions {
    /// The ARN of the CloudWatch Log Stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logStreamArn"
    )]
    pub log_stream_arn: Option<String>,
    /// Reference to a Stream in cloudwatchlogs to populate logStreamArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logStreamArnRef"
    )]
    pub log_stream_arn_ref: Option<ApplicationInitProviderCloudwatchLoggingOptionsLogStreamArnRef>,
    /// Selector for a Stream in cloudwatchlogs to populate logStreamArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logStreamArnSelector"
    )]
    pub log_stream_arn_selector:
        Option<ApplicationInitProviderCloudwatchLoggingOptionsLogStreamArnSelector>,
    /// The ARN of the IAM Role used to send application messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnRef"
    )]
    pub role_arn_ref: Option<ApplicationInitProviderCloudwatchLoggingOptionsRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnSelector"
    )]
    pub role_arn_selector: Option<ApplicationInitProviderCloudwatchLoggingOptionsRoleArnSelector>,
}

/// Reference to a Stream in cloudwatchlogs to populate logStreamArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderCloudwatchLoggingOptionsLogStreamArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationInitProviderCloudwatchLoggingOptionsLogStreamArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderCloudwatchLoggingOptionsLogStreamArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationInitProviderCloudwatchLoggingOptionsLogStreamArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve:
        Option<ApplicationInitProviderCloudwatchLoggingOptionsLogStreamArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderCloudwatchLoggingOptionsLogStreamArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderCloudwatchLoggingOptionsLogStreamArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Stream in cloudwatchlogs to populate logStreamArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderCloudwatchLoggingOptionsLogStreamArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationInitProviderCloudwatchLoggingOptionsLogStreamArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderCloudwatchLoggingOptionsLogStreamArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationInitProviderCloudwatchLoggingOptionsLogStreamArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve:
        Option<ApplicationInitProviderCloudwatchLoggingOptionsLogStreamArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderCloudwatchLoggingOptionsLogStreamArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderCloudwatchLoggingOptionsLogStreamArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderCloudwatchLoggingOptionsRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationInitProviderCloudwatchLoggingOptionsRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderCloudwatchLoggingOptionsRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationInitProviderCloudwatchLoggingOptionsRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationInitProviderCloudwatchLoggingOptionsRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderCloudwatchLoggingOptionsRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderCloudwatchLoggingOptionsRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderCloudwatchLoggingOptionsRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationInitProviderCloudwatchLoggingOptionsRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderCloudwatchLoggingOptionsRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationInitProviderCloudwatchLoggingOptionsRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve:
        Option<ApplicationInitProviderCloudwatchLoggingOptionsRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderCloudwatchLoggingOptionsRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderCloudwatchLoggingOptionsRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Input configuration of the application. See Inputs below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputs {
    /// The Kinesis Firehose configuration for the streaming source. Conflicts with kinesis_stream.
    /// See Kinesis Firehose below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisFirehose"
    )]
    pub kinesis_firehose: Option<ApplicationInitProviderInputsKinesisFirehose>,
    /// The Kinesis Stream configuration for the streaming source. Conflicts with kinesis_firehose.
    /// See Kinesis Stream below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisStream"
    )]
    pub kinesis_stream: Option<ApplicationInitProviderInputsKinesisStream>,
    /// The Name Prefix to use when creating an in-application stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "namePrefix"
    )]
    pub name_prefix: Option<String>,
    /// The number of Parallel in-application streams to create.
    /// See Parallelism below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parallelism: Option<ApplicationInitProviderInputsParallelism>,
    /// The Processing Configuration to transform records as they are received from the stream.
    /// See Processing Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "processingConfiguration"
    )]
    pub processing_configuration: Option<ApplicationInitProviderInputsProcessingConfiguration>,
    /// The Schema format of the data in the streaming source. See Source Schema below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<ApplicationInitProviderInputsSchema>,
    /// The point at which the application starts processing records from the streaming source.
    /// See Starting Position Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startingPositionConfiguration"
    )]
    pub starting_position_configuration:
        Option<Vec<ApplicationInitProviderInputsStartingPositionConfiguration>>,
}

/// The Kinesis Firehose configuration for the streaming source. Conflicts with kinesis_stream.
/// See Kinesis Firehose below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsKinesisFirehose {
    /// The ARN of the Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    pub resource_arn: Option<String>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The Kinesis Stream configuration for the streaming source. Conflicts with kinesis_firehose.
/// See Kinesis Stream below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsKinesisStream {
    /// The ARN of the Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    pub resource_arn: Option<String>,
    /// Reference to a Stream in kinesis to populate resourceArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArnRef"
    )]
    pub resource_arn_ref: Option<ApplicationInitProviderInputsKinesisStreamResourceArnRef>,
    /// Selector for a Stream in kinesis to populate resourceArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArnSelector"
    )]
    pub resource_arn_selector:
        Option<ApplicationInitProviderInputsKinesisStreamResourceArnSelector>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnRef"
    )]
    pub role_arn_ref: Option<ApplicationInitProviderInputsKinesisStreamRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnSelector"
    )]
    pub role_arn_selector: Option<ApplicationInitProviderInputsKinesisStreamRoleArnSelector>,
}

/// Reference to a Stream in kinesis to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsKinesisStreamResourceArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationInitProviderInputsKinesisStreamResourceArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsKinesisStreamResourceArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationInitProviderInputsKinesisStreamResourceArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationInitProviderInputsKinesisStreamResourceArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderInputsKinesisStreamResourceArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderInputsKinesisStreamResourceArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Stream in kinesis to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsKinesisStreamResourceArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationInitProviderInputsKinesisStreamResourceArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsKinesisStreamResourceArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationInitProviderInputsKinesisStreamResourceArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationInitProviderInputsKinesisStreamResourceArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderInputsKinesisStreamResourceArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderInputsKinesisStreamResourceArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsKinesisStreamRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationInitProviderInputsKinesisStreamRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsKinesisStreamRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationInitProviderInputsKinesisStreamRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationInitProviderInputsKinesisStreamRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderInputsKinesisStreamRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderInputsKinesisStreamRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsKinesisStreamRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationInitProviderInputsKinesisStreamRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsKinesisStreamRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationInitProviderInputsKinesisStreamRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationInitProviderInputsKinesisStreamRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderInputsKinesisStreamRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderInputsKinesisStreamRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The number of Parallel in-application streams to create.
/// See Parallelism below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsParallelism {
    /// The Count of streams.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<f64>,
}

/// The Processing Configuration to transform records as they are received from the stream.
/// See Processing Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsProcessingConfiguration {
    /// The Lambda function configuration. See Lambda below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lambda: Option<ApplicationInitProviderInputsProcessingConfigurationLambda>,
}

/// The Lambda function configuration. See Lambda below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsProcessingConfigurationLambda {
    /// The ARN of the Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    pub resource_arn: Option<String>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The Schema format of the data in the streaming source. See Source Schema below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsSchema {
    /// The Record Column mapping for the streaming source data element.
    /// See Record Columns below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordColumns"
    )]
    pub record_columns: Option<Vec<ApplicationInitProviderInputsSchemaRecordColumns>>,
    /// The Encoding of the record in the streaming source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordEncoding"
    )]
    pub record_encoding: Option<String>,
    /// The Record Format and mapping information to schematize a record.
    /// See Record Format below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordFormat"
    )]
    pub record_format: Option<ApplicationInitProviderInputsSchemaRecordFormat>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsSchemaRecordColumns {
    /// The Mapping reference to the data element.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mapping: Option<String>,
    /// Name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The SQL Type of the column.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqlType")]
    pub sql_type: Option<String>,
}

/// The Record Format and mapping information to schematize a record.
/// See Record Format below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsSchemaRecordFormat {
    /// The Mapping Information for the record format.
    /// See Mapping Parameters below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mappingParameters"
    )]
    pub mapping_parameters:
        Option<ApplicationInitProviderInputsSchemaRecordFormatMappingParameters>,
}

/// The Mapping Information for the record format.
/// See Mapping Parameters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsSchemaRecordFormatMappingParameters {
    /// Mapping information when the record format uses delimiters.
    /// See CSV Mapping Parameters below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csv: Option<ApplicationInitProviderInputsSchemaRecordFormatMappingParametersCsv>,
    /// Mapping information when JSON is the record format on the streaming source.
    /// See JSON Mapping Parameters below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json: Option<ApplicationInitProviderInputsSchemaRecordFormatMappingParametersJson>,
}

/// Mapping information when the record format uses delimiters.
/// See CSV Mapping Parameters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsSchemaRecordFormatMappingParametersCsv {
    /// The Column Delimiter.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordColumnDelimiter"
    )]
    pub record_column_delimiter: Option<String>,
    /// The Row Delimiter.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordRowDelimiter"
    )]
    pub record_row_delimiter: Option<String>,
}

/// Mapping information when JSON is the record format on the streaming source.
/// See JSON Mapping Parameters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsSchemaRecordFormatMappingParametersJson {
    /// Path to the top-level parent that contains the records.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordRowPath"
    )]
    pub record_row_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInputsStartingPositionConfiguration {
    /// The starting position on the stream. Valid values: LAST_STOPPED_POINT, NOW, TRIM_HORIZON.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startingPosition"
    )]
    pub starting_position: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderOutputs {
    /// The Kinesis Firehose configuration for the destination stream. Conflicts with kinesis_stream.
    /// See Kinesis Firehose below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisFirehose"
    )]
    pub kinesis_firehose: Option<ApplicationInitProviderOutputsKinesisFirehose>,
    /// The Kinesis Stream configuration for the destination stream. Conflicts with kinesis_firehose.
    /// See Kinesis Stream below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisStream"
    )]
    pub kinesis_stream: Option<ApplicationInitProviderOutputsKinesisStream>,
    /// The Lambda function destination. See Lambda below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lambda: Option<ApplicationInitProviderOutputsLambda>,
    /// The Name of the in-application stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The Schema format of the data written to the destination. See Destination Schema below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<ApplicationInitProviderOutputsSchema>,
}

/// The Kinesis Firehose configuration for the destination stream. Conflicts with kinesis_stream.
/// See Kinesis Firehose below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderOutputsKinesisFirehose {
    /// The ARN of the Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    pub resource_arn: Option<String>,
    /// Reference to a DeliveryStream in firehose to populate resourceArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArnRef"
    )]
    pub resource_arn_ref: Option<ApplicationInitProviderOutputsKinesisFirehoseResourceArnRef>,
    /// Selector for a DeliveryStream in firehose to populate resourceArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArnSelector"
    )]
    pub resource_arn_selector:
        Option<ApplicationInitProviderOutputsKinesisFirehoseResourceArnSelector>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnRef"
    )]
    pub role_arn_ref: Option<ApplicationInitProviderOutputsKinesisFirehoseRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "roleArnSelector"
    )]
    pub role_arn_selector: Option<ApplicationInitProviderOutputsKinesisFirehoseRoleArnSelector>,
}

/// Reference to a DeliveryStream in firehose to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderOutputsKinesisFirehoseResourceArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationInitProviderOutputsKinesisFirehoseResourceArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderOutputsKinesisFirehoseResourceArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationInitProviderOutputsKinesisFirehoseResourceArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationInitProviderOutputsKinesisFirehoseResourceArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderOutputsKinesisFirehoseResourceArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderOutputsKinesisFirehoseResourceArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a DeliveryStream in firehose to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderOutputsKinesisFirehoseResourceArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationInitProviderOutputsKinesisFirehoseResourceArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderOutputsKinesisFirehoseResourceArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationInitProviderOutputsKinesisFirehoseResourceArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve:
        Option<ApplicationInitProviderOutputsKinesisFirehoseResourceArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderOutputsKinesisFirehoseResourceArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderOutputsKinesisFirehoseResourceArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderOutputsKinesisFirehoseRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationInitProviderOutputsKinesisFirehoseRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderOutputsKinesisFirehoseRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationInitProviderOutputsKinesisFirehoseRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationInitProviderOutputsKinesisFirehoseRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderOutputsKinesisFirehoseRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderOutputsKinesisFirehoseRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderOutputsKinesisFirehoseRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchControllerRef"
    )]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "matchLabels"
    )]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationInitProviderOutputsKinesisFirehoseRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderOutputsKinesisFirehoseRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution:
        Option<ApplicationInitProviderOutputsKinesisFirehoseRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationInitProviderOutputsKinesisFirehoseRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderOutputsKinesisFirehoseRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationInitProviderOutputsKinesisFirehoseRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The Kinesis Stream configuration for the destination stream. Conflicts with kinesis_firehose.
/// See Kinesis Stream below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderOutputsKinesisStream {
    /// The ARN of the Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    pub resource_arn: Option<String>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The Lambda function destination. See Lambda below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderOutputsLambda {
    /// The ARN of the Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    pub resource_arn: Option<String>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The Schema format of the data written to the destination. See Destination Schema below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderOutputsSchema {
    /// The Format Type of the records on the output stream. Can be CSV or JSON.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordFormatType"
    )]
    pub record_format_type: Option<String>,
}

/// An S3 Reference Data Source for the application.
/// See Reference Data Sources below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderReferenceDataSources {
    /// The S3 configuration for the reference data source. See S3 Reference below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3: Option<ApplicationInitProviderReferenceDataSourcesS3>,
    /// The Schema format of the data in the streaming source. See Source Schema below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<ApplicationInitProviderReferenceDataSourcesSchema>,
    /// The in-application Table Name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    pub table_name: Option<String>,
}

/// The S3 configuration for the reference data source. See S3 Reference below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderReferenceDataSourcesS3 {
    /// The S3 Bucket ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// The File Key name containing reference data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileKey")]
    pub file_key: Option<String>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The Schema format of the data in the streaming source. See Source Schema below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderReferenceDataSourcesSchema {
    /// The Record Column mapping for the streaming source data element.
    /// See Record Columns below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordColumns"
    )]
    pub record_columns: Option<Vec<ApplicationInitProviderReferenceDataSourcesSchemaRecordColumns>>,
    /// The Encoding of the record in the streaming source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordEncoding"
    )]
    pub record_encoding: Option<String>,
    /// The Record Format and mapping information to schematize a record.
    /// See Record Format below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordFormat"
    )]
    pub record_format: Option<ApplicationInitProviderReferenceDataSourcesSchemaRecordFormat>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderReferenceDataSourcesSchemaRecordColumns {
    /// The Mapping reference to the data element.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mapping: Option<String>,
    /// Name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The SQL Type of the column.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqlType")]
    pub sql_type: Option<String>,
}

/// The Record Format and mapping information to schematize a record.
/// See Record Format below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderReferenceDataSourcesSchemaRecordFormat {
    /// The Mapping Information for the record format.
    /// See Mapping Parameters below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mappingParameters"
    )]
    pub mapping_parameters:
        Option<ApplicationInitProviderReferenceDataSourcesSchemaRecordFormatMappingParameters>,
}

/// The Mapping Information for the record format.
/// See Mapping Parameters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderReferenceDataSourcesSchemaRecordFormatMappingParameters {
    /// Mapping information when the record format uses delimiters.
    /// See CSV Mapping Parameters below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csv:
        Option<ApplicationInitProviderReferenceDataSourcesSchemaRecordFormatMappingParametersCsv>,
    /// Mapping information when JSON is the record format on the streaming source.
    /// See JSON Mapping Parameters below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json:
        Option<ApplicationInitProviderReferenceDataSourcesSchemaRecordFormatMappingParametersJson>,
}

/// Mapping information when the record format uses delimiters.
/// See CSV Mapping Parameters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderReferenceDataSourcesSchemaRecordFormatMappingParametersCsv {
    /// The Column Delimiter.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordColumnDelimiter"
    )]
    pub record_column_delimiter: Option<String>,
    /// The Row Delimiter.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordRowDelimiter"
    )]
    pub record_row_delimiter: Option<String>,
}

/// Mapping information when JSON is the record format on the streaming source.
/// See JSON Mapping Parameters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderReferenceDataSourcesSchemaRecordFormatMappingParametersJson {
    /// Path to the top-level parent that contains the records.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordRowPath"
    )]
    pub record_row_path: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ApplicationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ApplicationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ApplicationStatus defines the observed state of Application.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    pub at_provider: Option<ApplicationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProvider {
    /// The ARN of the Kinesis Analytics Appliation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// The CloudWatch log stream options to monitor application errors.
    /// See CloudWatch Logging Options below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "cloudwatchLoggingOptions"
    )]
    pub cloudwatch_logging_options: Option<ApplicationStatusAtProviderCloudwatchLoggingOptions>,
    /// SQL Code to transform input data, and generate output.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
    /// The Timestamp when the application version was created.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "createTimestamp"
    )]
    pub create_timestamp: Option<String>,
    /// Description of the application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The ARN of the Kinesis Analytics Application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Input configuration of the application. See Inputs below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inputs: Option<ApplicationStatusAtProviderInputs>,
    /// The Timestamp when the application was last updated.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "lastUpdateTimestamp"
    )]
    pub last_update_timestamp: Option<String>,
    /// Output destination configuration of the application. See Outputs below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub outputs: Option<Vec<ApplicationStatusAtProviderOutputs>>,
    /// An S3 Reference Data Source for the application.
    /// See Reference Data Sources below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "referenceDataSources"
    )]
    pub reference_data_sources: Option<ApplicationStatusAtProviderReferenceDataSources>,
    /// Whether to start or stop the Kinesis Analytics Application. To start an application, an input with a defined starting_position must be configured.
    /// To modify an application's starting position, first stop the application by setting start_application = false, then update starting_position and set start_application = true.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startApplication"
    )]
    pub start_application: Option<bool>,
    /// The Status of the application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// The Version of the application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<f64>,
}

/// The CloudWatch log stream options to monitor application errors.
/// See CloudWatch Logging Options below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderCloudwatchLoggingOptions {
    /// The ARN of the Kinesis Analytics Application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The ARN of the CloudWatch Log Stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "logStreamArn"
    )]
    pub log_stream_arn: Option<String>,
    /// The ARN of the IAM Role used to send application messages.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// Input configuration of the application. See Inputs below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderInputs {
    /// The ARN of the Kinesis Analytics Application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The Kinesis Firehose configuration for the streaming source. Conflicts with kinesis_stream.
    /// See Kinesis Firehose below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisFirehose"
    )]
    pub kinesis_firehose: Option<ApplicationStatusAtProviderInputsKinesisFirehose>,
    /// The Kinesis Stream configuration for the streaming source. Conflicts with kinesis_firehose.
    /// See Kinesis Stream below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisStream"
    )]
    pub kinesis_stream: Option<ApplicationStatusAtProviderInputsKinesisStream>,
    /// The Name Prefix to use when creating an in-application stream.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "namePrefix"
    )]
    pub name_prefix: Option<String>,
    /// The number of Parallel in-application streams to create.
    /// See Parallelism below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parallelism: Option<ApplicationStatusAtProviderInputsParallelism>,
    /// The Processing Configuration to transform records as they are received from the stream.
    /// See Processing Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "processingConfiguration"
    )]
    pub processing_configuration: Option<ApplicationStatusAtProviderInputsProcessingConfiguration>,
    /// The Schema format of the data in the streaming source. See Source Schema below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<ApplicationStatusAtProviderInputsSchema>,
    /// The point at which the application starts processing records from the streaming source.
    /// See Starting Position Configuration below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startingPositionConfiguration"
    )]
    pub starting_position_configuration:
        Option<Vec<ApplicationStatusAtProviderInputsStartingPositionConfiguration>>,
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "streamNames"
    )]
    pub stream_names: Option<Vec<String>>,
}

/// The Kinesis Firehose configuration for the streaming source. Conflicts with kinesis_stream.
/// See Kinesis Firehose below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderInputsKinesisFirehose {
    /// The ARN of the Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    pub resource_arn: Option<String>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The Kinesis Stream configuration for the streaming source. Conflicts with kinesis_firehose.
/// See Kinesis Stream below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderInputsKinesisStream {
    /// The ARN of the Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    pub resource_arn: Option<String>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The number of Parallel in-application streams to create.
/// See Parallelism below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderInputsParallelism {
    /// The Count of streams.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<f64>,
}

/// The Processing Configuration to transform records as they are received from the stream.
/// See Processing Configuration below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderInputsProcessingConfiguration {
    /// The Lambda function configuration. See Lambda below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lambda: Option<ApplicationStatusAtProviderInputsProcessingConfigurationLambda>,
}

/// The Lambda function configuration. See Lambda below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderInputsProcessingConfigurationLambda {
    /// The ARN of the Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    pub resource_arn: Option<String>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The Schema format of the data in the streaming source. See Source Schema below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderInputsSchema {
    /// The Record Column mapping for the streaming source data element.
    /// See Record Columns below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordColumns"
    )]
    pub record_columns: Option<Vec<ApplicationStatusAtProviderInputsSchemaRecordColumns>>,
    /// The Encoding of the record in the streaming source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordEncoding"
    )]
    pub record_encoding: Option<String>,
    /// The Record Format and mapping information to schematize a record.
    /// See Record Format below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordFormat"
    )]
    pub record_format: Option<ApplicationStatusAtProviderInputsSchemaRecordFormat>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderInputsSchemaRecordColumns {
    /// The Mapping reference to the data element.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mapping: Option<String>,
    /// Name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The SQL Type of the column.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqlType")]
    pub sql_type: Option<String>,
}

/// The Record Format and mapping information to schematize a record.
/// See Record Format below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderInputsSchemaRecordFormat {
    /// The Mapping Information for the record format.
    /// See Mapping Parameters below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mappingParameters"
    )]
    pub mapping_parameters:
        Option<ApplicationStatusAtProviderInputsSchemaRecordFormatMappingParameters>,
    /// The Format Type of the records on the output stream. Can be CSV or JSON.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordFormatType"
    )]
    pub record_format_type: Option<String>,
}

/// The Mapping Information for the record format.
/// See Mapping Parameters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderInputsSchemaRecordFormatMappingParameters {
    /// Mapping information when the record format uses delimiters.
    /// See CSV Mapping Parameters below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csv: Option<ApplicationStatusAtProviderInputsSchemaRecordFormatMappingParametersCsv>,
    /// Mapping information when JSON is the record format on the streaming source.
    /// See JSON Mapping Parameters below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json: Option<ApplicationStatusAtProviderInputsSchemaRecordFormatMappingParametersJson>,
}

/// Mapping information when the record format uses delimiters.
/// See CSV Mapping Parameters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderInputsSchemaRecordFormatMappingParametersCsv {
    /// The Column Delimiter.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordColumnDelimiter"
    )]
    pub record_column_delimiter: Option<String>,
    /// The Row Delimiter.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordRowDelimiter"
    )]
    pub record_row_delimiter: Option<String>,
}

/// Mapping information when JSON is the record format on the streaming source.
/// See JSON Mapping Parameters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderInputsSchemaRecordFormatMappingParametersJson {
    /// Path to the top-level parent that contains the records.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordRowPath"
    )]
    pub record_row_path: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderInputsStartingPositionConfiguration {
    /// The starting position on the stream. Valid values: LAST_STOPPED_POINT, NOW, TRIM_HORIZON.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "startingPosition"
    )]
    pub starting_position: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderOutputs {
    /// The ARN of the Kinesis Analytics Application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The Kinesis Firehose configuration for the destination stream. Conflicts with kinesis_stream.
    /// See Kinesis Firehose below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisFirehose"
    )]
    pub kinesis_firehose: Option<ApplicationStatusAtProviderOutputsKinesisFirehose>,
    /// The Kinesis Stream configuration for the destination stream. Conflicts with kinesis_firehose.
    /// See Kinesis Stream below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "kinesisStream"
    )]
    pub kinesis_stream: Option<ApplicationStatusAtProviderOutputsKinesisStream>,
    /// The Lambda function destination. See Lambda below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub lambda: Option<ApplicationStatusAtProviderOutputsLambda>,
    /// The Name of the in-application stream.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The Schema format of the data written to the destination. See Destination Schema below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<ApplicationStatusAtProviderOutputsSchema>,
}

/// The Kinesis Firehose configuration for the destination stream. Conflicts with kinesis_stream.
/// See Kinesis Firehose below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderOutputsKinesisFirehose {
    /// The ARN of the Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    pub resource_arn: Option<String>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The Kinesis Stream configuration for the destination stream. Conflicts with kinesis_firehose.
/// See Kinesis Stream below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderOutputsKinesisStream {
    /// The ARN of the Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    pub resource_arn: Option<String>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The Lambda function destination. See Lambda below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderOutputsLambda {
    /// The ARN of the Lambda function.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "resourceArn"
    )]
    pub resource_arn: Option<String>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The Schema format of the data written to the destination. See Destination Schema below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderOutputsSchema {
    /// The Format Type of the records on the output stream. Can be CSV or JSON.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordFormatType"
    )]
    pub record_format_type: Option<String>,
}

/// An S3 Reference Data Source for the application.
/// See Reference Data Sources below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderReferenceDataSources {
    /// The ARN of the Kinesis Analytics Application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The S3 configuration for the reference data source. See S3 Reference below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3: Option<ApplicationStatusAtProviderReferenceDataSourcesS3>,
    /// The Schema format of the data in the streaming source. See Source Schema below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<ApplicationStatusAtProviderReferenceDataSourcesSchema>,
    /// The in-application Table Name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    pub table_name: Option<String>,
}

/// The S3 configuration for the reference data source. See S3 Reference below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderReferenceDataSourcesS3 {
    /// The S3 Bucket ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// The File Key name containing reference data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileKey")]
    pub file_key: Option<String>,
    /// The IAM Role ARN to read the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The Schema format of the data in the streaming source. See Source Schema below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderReferenceDataSourcesSchema {
    /// The Record Column mapping for the streaming source data element.
    /// See Record Columns below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordColumns"
    )]
    pub record_columns:
        Option<Vec<ApplicationStatusAtProviderReferenceDataSourcesSchemaRecordColumns>>,
    /// The Encoding of the record in the streaming source.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordEncoding"
    )]
    pub record_encoding: Option<String>,
    /// The Record Format and mapping information to schematize a record.
    /// See Record Format below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordFormat"
    )]
    pub record_format: Option<ApplicationStatusAtProviderReferenceDataSourcesSchemaRecordFormat>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderReferenceDataSourcesSchemaRecordColumns {
    /// The Mapping reference to the data element.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mapping: Option<String>,
    /// Name of the column.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The SQL Type of the column.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sqlType")]
    pub sql_type: Option<String>,
}

/// The Record Format and mapping information to schematize a record.
/// See Record Format below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderReferenceDataSourcesSchemaRecordFormat {
    /// The Mapping Information for the record format.
    /// See Mapping Parameters below for more details.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "mappingParameters"
    )]
    pub mapping_parameters:
        Option<ApplicationStatusAtProviderReferenceDataSourcesSchemaRecordFormatMappingParameters>,
    /// The Format Type of the records on the output stream. Can be CSV or JSON.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordFormatType"
    )]
    pub record_format_type: Option<String>,
}

/// The Mapping Information for the record format.
/// See Mapping Parameters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderReferenceDataSourcesSchemaRecordFormatMappingParameters {
    /// Mapping information when the record format uses delimiters.
    /// See CSV Mapping Parameters below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub csv: Option<
        ApplicationStatusAtProviderReferenceDataSourcesSchemaRecordFormatMappingParametersCsv,
    >,
    /// Mapping information when JSON is the record format on the streaming source.
    /// See JSON Mapping Parameters below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub json: Option<
        ApplicationStatusAtProviderReferenceDataSourcesSchemaRecordFormatMappingParametersJson,
    >,
}

/// Mapping information when the record format uses delimiters.
/// See CSV Mapping Parameters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderReferenceDataSourcesSchemaRecordFormatMappingParametersCsv {
    /// The Column Delimiter.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordColumnDelimiter"
    )]
    pub record_column_delimiter: Option<String>,
    /// The Row Delimiter.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordRowDelimiter"
    )]
    pub record_row_delimiter: Option<String>,
}

/// Mapping information when JSON is the record format on the streaming source.
/// See JSON Mapping Parameters below for more details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderReferenceDataSourcesSchemaRecordFormatMappingParametersJson {
    /// Path to the top-level parent that contains the records.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "recordRowPath"
    )]
    pub record_row_path: Option<String>,
}

// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// InstanceSpec defines the desired state of Instance
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "rds.aws.upbound.io", version = "v1beta3", kind = "Instance", plural = "instances")]
#[kube(status = "InstanceStatus")]
pub struct InstanceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<InstanceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: InstanceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<InstanceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<InstanceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<InstancePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<InstanceWriteConnectionSecretToRef>,
}

/// InstanceSpec defines the desired state of Instance
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProvider {
    /// The allocated storage in gibibytes. If max_allocated_storage is configured, this argument represents the initial storage allocation and differences from the configuration will be ignored automatically when Storage Autoscaling occurs. If replicate_source_db is set, the value is ignored during the creation of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocatedStorage")]
    pub allocated_storage: Option<f64>,
    /// Indicates that major version
    /// upgrades are allowed. Changing this parameter does not result in an outage and
    /// the change is asynchronously applied as soon as possible.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowMajorVersionUpgrade")]
    pub allow_major_version_upgrade: Option<bool>,
    /// Specifies whether any database modifications
    /// are applied immediately, or during the next maintenance window. Default is
    /// false. See Amazon RDS Documentation for more
    /// information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applyImmediately")]
    pub apply_immediately: Option<bool>,
    /// Password for the master DB user. Note that this may show up in
    /// logs, and it will be stored in the state file. Cannot be set if manage_master_user_password is set to true.
    /// If true, the password will be auto-generated and stored in the Secret referenced by the passwordSecretRef field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoGeneratePassword")]
    pub auto_generate_password: Option<bool>,
    /// Indicates that minor engine upgrades
    /// will be applied automatically to the DB instance during the maintenance window.
    /// Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMinorVersionUpgrade")]
    pub auto_minor_version_upgrade: Option<bool>,
    /// The AZ for the RDS instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    pub availability_zone: Option<String>,
    /// The days to retain backups for.
    /// Must be between 0 and 35.
    /// Default is 0.
    /// Must be greater than 0 if the database is used as a source for a Read Replica,
    /// uses low-downtime updates,
    /// or will use RDS Blue/Green deployments.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupRetentionPeriod")]
    pub backup_retention_period: Option<f64>,
    /// Specifies where automated backups and manual snapshots are stored. Possible values are region (default) and outposts. See Working with Amazon RDS on AWS Outposts for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupTarget")]
    pub backup_target: Option<String>,
    /// The daily time range (in UTC) during which automated backups are created if they are enabled.
    /// Example: "09:46-10:16". Must not overlap with maintenance_window.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupWindow")]
    pub backup_window: Option<String>,
    /// Enables low-downtime updates using RDS Blue/Green deployments.
    /// See blue_green_update below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blueGreenUpdate")]
    pub blue_green_update: Option<InstanceForProviderBlueGreenUpdate>,
    /// The identifier of the CA certificate for the DB instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertIdentifier")]
    pub ca_cert_identifier: Option<String>,
    /// The character set name to use for DB encoding in Oracle and Microsoft SQL instances (collation).
    /// This can't be changed.
    /// See Oracle Character Sets Supported in Amazon RDS or
    /// Server-Level Collation for Microsoft SQL Server for more information.
    /// Cannot be set  with replicate_source_db, restore_to_point_in_time, s3_import, or snapshot_identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "characterSetName")]
    pub character_set_name: Option<String>,
    /// â€“  Copy all Instance tags to snapshots. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyTagsToSnapshot")]
    pub copy_tags_to_snapshot: Option<bool>,
    /// The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customIamInstanceProfile")]
    pub custom_iam_instance_profile: Option<String>,
    /// Indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance. See CoIP for RDS on Outposts for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerOwnedIpEnabled")]
    pub customer_owned_ip_enabled: Option<bool>,
    /// The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance. Note that this does not apply for Oracle or SQL Server engines. See the AWS documentation for more details on what applies for those engines. If you are providing an Oracle db name, it needs to be in all upper case. Cannot be specified for a replica.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbName")]
    pub db_name: Option<String>,
    /// Name of DB subnet group.
    /// DB instance will be created in the VPC associated with the DB subnet group.
    /// If unspecified, will be created in the default Subnet Group.
    /// When working with read replicas created in the same region, defaults to the Subnet Group Name of the source DB.
    /// When working with read replicas created in a different region, defaults to the default Subnet Group.
    /// See DBSubnetGroupName in API action CreateDBInstanceReadReplica for additional read replica constraints.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbSubnetGroupName")]
    pub db_subnet_group_name: Option<String>,
    /// Reference to a SubnetGroup in rds to populate dbSubnetGroupName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbSubnetGroupNameRef")]
    pub db_subnet_group_name_ref: Option<InstanceForProviderDbSubnetGroupNameRef>,
    /// Selector for a SubnetGroup in rds to populate dbSubnetGroupName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbSubnetGroupNameSelector")]
    pub db_subnet_group_name_selector: Option<InstanceForProviderDbSubnetGroupNameSelector>,
    /// Use a dedicated log volume (DLV) for the DB instance. Requires Provisioned IOPS. See the AWS documentation for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dedicatedLogVolume")]
    pub dedicated_log_volume: Option<bool>,
    /// Specifies whether to remove automated backups immediately after the DB instance is deleted. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteAutomatedBackups")]
    pub delete_automated_backups: Option<bool>,
    /// If the DB instance should have deletion protection enabled. The database can't be deleted when this value is set to true. The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionProtection")]
    pub deletion_protection: Option<bool>,
    /// The ID of the Directory Service Active Directory domain to create the instance in. Conflicts with domain_fqdn, domain_ou, domain_auth_secret_arn and a domain_dns_ips.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// The ARN for the Secrets Manager secret with the self managed Active Directory credentials for the user joining the domain. Conflicts with domain and domain_iam_role_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainAuthSecretArn")]
    pub domain_auth_secret_arn: Option<String>,
    /// The IPv4 DNS IP addresses of your primary and secondary self managed Active Directory domain controllers. Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list. Conflicts with domain and domain_iam_role_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainDnsIps")]
    pub domain_dns_ips: Option<Vec<String>>,
    /// The fully qualified domain name (FQDN) of the self managed Active Directory domain. Conflicts with domain and domain_iam_role_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainFqdn")]
    pub domain_fqdn: Option<String>,
    /// The name of the IAM role to be used when making API calls to the Directory Service. Conflicts with domain_fqdn, domain_ou, domain_auth_secret_arn and a domain_dns_ips.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainIamRoleName")]
    pub domain_iam_role_name: Option<String>,
    /// The self managed Active Directory organizational unit for your DB instance to join. Conflicts with domain and domain_iam_role_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainOu")]
    pub domain_ou: Option<String>,
    /// Set of log types to enable for exporting to CloudWatch logs. If omitted, no logs will be exported. For supported values, see the EnableCloudwatchLogsExports.member.N parameter in API action CreateDBInstance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enabledCloudwatchLogsExports")]
    pub enabled_cloudwatch_logs_exports: Option<Vec<String>>,
    /// The database engine to use. For supported values, see the Engine parameter in [API action CreateDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html). Note that for Amazon Aurora instances the engine must match the [DB Cluster](https://marketplace.upbound.io/providers/upbound/provider-aws/latest/resources/rds.aws.upbound.io/Cluster/v1beta1)'s engine'. For information on the difference between the available Aurora MySQL engines see Comparison in the [Amazon RDS Release Notes](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraMySQLReleaseNotes/Welcome.html).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub engine: Option<String>,
    /// The life cycle type for this DB instance. This setting applies only to RDS for MySQL and RDS for PostgreSQL. Valid values are open-source-rds-extended-support, open-source-rds-extended-support-disabled. Default value is open-source-rds-extended-support. [Using Amazon RDS Extended Support]: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineLifecycleSupport")]
    pub engine_lifecycle_support: Option<String>,
    /// The engine version to use. If `autoMinorVersionUpgrade` is enabled, you can provide a prefix of the version such as 5.7 (for 5.7.10). The actual engine version used is returned in the attribute `status.atProvider.engineVersionActual`. For supported values, see the EngineVersion parameter in [API action CreateDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html). Note that for Amazon Aurora instances the engine version must match the [DB Cluster](https://marketplace.upbound.io/providers/upbound/provider-aws/latest/resources/rds.aws.upbound.io/Cluster/v1beta1)'s engine version'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineVersion")]
    pub engine_version: Option<String>,
    /// The name of your final DB snapshot
    /// when this DB instance is deleted. Must be provided if skip_final_snapshot is
    /// set to false. The value must begin with a letter, only contain alphanumeric characters and hyphens, and not end with a hyphen or contain two consecutive hyphens. Must not be provided when deleting a read replica.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "finalSnapshotIdentifier")]
    pub final_snapshot_identifier: Option<String>,
    /// Specifies whether mappings of AWS Identity and Access Management (IAM) accounts to database
    /// accounts is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamDatabaseAuthenticationEnabled")]
    pub iam_database_authentication_enabled: Option<bool>,
    /// Required if restore_to_point_in_time is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
    /// Creates a unique identifier beginning with the specified prefix. Conflicts with identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identifierPrefix")]
    pub identifier_prefix: Option<String>,
    /// The instance type of the RDS instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceClass")]
    pub instance_class: Option<String>,
    /// The amount of provisioned IOPS. Setting this implies a
    /// storage_type of "io1" or "io2". Can only be set when storage_type is "io1", "io2 or "gp3".
    /// Cannot be specified for gp3 storage if the allocated_storage value is below a per-engine threshold.
    /// See the RDS User Guide for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iops: Option<f64>,
    /// The ARN for the KMS encryption key. If creating an
    /// encrypted replica, set this to the destination KMS ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    pub kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyIdRef")]
    pub kms_key_id_ref: Option<InstanceForProviderKmsKeyIdRef>,
    /// Selector for a Key in kms to populate kmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyIdSelector")]
    pub kms_key_id_selector: Option<InstanceForProviderKmsKeyIdSelector>,
    /// License model information for this DB instance. Valid values for this field are as follows:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "licenseModel")]
    pub license_model: Option<String>,
    /// The window to perform maintenance in.
    /// Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00". See RDS
    /// Maintenance Window
    /// docs
    /// for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceWindow")]
    pub maintenance_window: Option<String>,
    /// Set to true to allow RDS to manage the master user password in Secrets Manager. Cannot be set if password is provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manageMasterUserPassword")]
    pub manage_master_user_password: Option<bool>,
    /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. If not specified, the default KMS key for your Amazon Web Services account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUserSecretKmsKeyId")]
    pub master_user_secret_kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate masterUserSecretKmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUserSecretKmsKeyIdRef")]
    pub master_user_secret_kms_key_id_ref: Option<InstanceForProviderMasterUserSecretKmsKeyIdRef>,
    /// Selector for a Key in kms to populate masterUserSecretKmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUserSecretKmsKeyIdSelector")]
    pub master_user_secret_kms_key_id_selector: Option<InstanceForProviderMasterUserSecretKmsKeyIdSelector>,
    /// When configured, the upper limit to which Amazon RDS can automatically scale the storage of the DB instance. Configuring this will automatically ignore differences to allocated_storage. Must be greater than or equal to allocated_storage or 0 to disable Storage Autoscaling.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAllocatedStorage")]
    pub max_allocated_storage: Option<f64>,
    /// The interval, in seconds, between points
    /// when Enhanced Monitoring metrics are collected for the DB instance. To disable
    /// collecting Enhanced Monitoring metrics, specify 0. The default is 0. Valid
    /// Values: 0, 1, 5, 10, 15, 30, 60.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringInterval")]
    pub monitoring_interval: Option<f64>,
    /// The ARN for the IAM role that permits RDS
    /// to send enhanced monitoring metrics to CloudWatch Logs. You can find more
    /// information on the AWS
    /// Documentation
    /// what IAM permissions are needed to allow Enhanced Monitoring for RDS Instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringRoleArn")]
    pub monitoring_role_arn: Option<String>,
    /// Reference to a Role in iam to populate monitoringRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringRoleArnRef")]
    pub monitoring_role_arn_ref: Option<InstanceForProviderMonitoringRoleArnRef>,
    /// Selector for a Role in iam to populate monitoringRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringRoleArnSelector")]
    pub monitoring_role_arn_selector: Option<InstanceForProviderMonitoringRoleArnSelector>,
    /// Specifies if the RDS instance is multi-AZ
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiAz")]
    pub multi_az: Option<bool>,
    /// The national character set is used in the NCHAR, NVARCHAR2, and NCLOB data types for Oracle instances. This can't be changed. See Oracle Character Sets
    /// Supported in Amazon RDS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ncharCharacterSetName")]
    pub nchar_character_set_name: Option<String>,
    /// The network type of the DB instance. Valid values: IPV4, DUAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkType")]
    pub network_type: Option<String>,
    /// Name of the DB option group to associate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "optionGroupName")]
    pub option_group_name: Option<String>,
    /// Name of the DB parameter group to associate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterGroupName")]
    pub parameter_group_name: Option<String>,
    /// Reference to a ParameterGroup in rds to populate parameterGroupName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterGroupNameRef")]
    pub parameter_group_name_ref: Option<InstanceForProviderParameterGroupNameRef>,
    /// Selector for a ParameterGroup in rds to populate parameterGroupName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterGroupNameSelector")]
    pub parameter_group_name_selector: Option<InstanceForProviderParameterGroupNameSelector>,
    /// Password for the master DB user. Note that this may show up in
    /// logs, and it will be stored in the state file. Cannot be set if manage_master_user_password is set to true.
    /// Password for the master DB user. If you set autoGeneratePassword to true, the Secret referenced here will be created or updated with generated password if it does not already contain one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretRef")]
    pub password_secret_ref: Option<InstanceForProviderPasswordSecretRef>,
    /// Specifies whether Performance Insights are enabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "performanceInsightsEnabled")]
    pub performance_insights_enabled: Option<bool>,
    /// The ARN for the KMS key to encrypt Performance Insights data. When specifying performance_insights_kms_key_id, performance_insights_enabled needs to be set to true. Once KMS key is set, it can never be changed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "performanceInsightsKmsKeyId")]
    pub performance_insights_kms_key_id: Option<String>,
    /// Amount of time in days to retain Performance Insights data. Valid values are 7, 731 (2 years) or a multiple of 31. When specifying performance_insights_retention_period, performance_insights_enabled needs to be set to true. Defaults to '7'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "performanceInsightsRetentionPeriod")]
    pub performance_insights_retention_period: Option<f64>,
    /// The port on which the DB accepts connections.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Bool to control if instance is publicly
    /// accessible. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publiclyAccessible")]
    pub publicly_accessible: Option<bool>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Specifies whether the replica is in either mounted or open-read-only mode. This attribute
    /// is only supported by Oracle instances. Oracle replicas operate in open-read-only mode unless otherwise specified. See Working with Oracle Read Replicas for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaMode")]
    pub replica_mode: Option<String>,
    /// Specifies that this resource is a Replica database, and to use this value as the source database.
    /// If replicating an Amazon RDS Database Instance in the same region, use the identifier of the source DB, unless also specifying the db_subnet_group_name.
    /// If specifying the db_subnet_group_name in the same region, use the arn of the source DB.
    /// If replicating an Instance in a different region, use the arn of the source DB.
    /// Note that if you are creating a cross-region replica of an encrypted database you will also need to specify a kms_key_id.
    /// See DB Instance Replication and Working with PostgreSQL and MySQL Read Replicas for more information on using Replication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicateSourceDb")]
    pub replicate_source_db: Option<String>,
    /// Reference to a Instance in rds to populate replicateSourceDb.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicateSourceDbRef")]
    pub replicate_source_db_ref: Option<InstanceForProviderReplicateSourceDbRef>,
    /// Selector for a Instance in rds to populate replicateSourceDb.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicateSourceDbSelector")]
    pub replicate_source_db_selector: Option<InstanceForProviderReplicateSourceDbSelector>,
    /// A configuration block for restoring a DB instance to an arbitrary point in time.
    /// Requires the identifier argument to be set with the name of the new DB instance to be created.
    /// See Restore To Point In Time below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restoreToPointInTime")]
    pub restore_to_point_in_time: Option<InstanceForProviderRestoreToPointInTime>,
    /// Restore from a Percona Xtrabackup in S3.  See Importing Data into an Amazon RDS MySQL DB Instance
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Import")]
    pub s3_import: Option<InstanceForProviderS3Import>,
    /// Determines whether a final DB snapshot is
    /// created before the DB instance is deleted. If true is specified, no DBSnapshot
    /// is created. If false is specified, a DB snapshot is created before the DB
    /// instance is deleted, using the value from final_snapshot_identifier. Default
    /// is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipFinalSnapshot")]
    pub skip_final_snapshot: Option<bool>,
    /// Specifies whether or not to create this database from a snapshot.
    /// This corresponds to the snapshot ID you'd find in the RDS console, e.g: rds:production-2015-06-26-06-05.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotIdentifier")]
    pub snapshot_identifier: Option<String>,
    /// Specifies whether the DB instance is
    /// encrypted. Note that if you are creating a cross-region read replica this field
    /// is ignored and you should instead declare kms_key_id with a valid ARN. The
    /// default is false if not specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageEncrypted")]
    pub storage_encrypted: Option<bool>,
    /// The storage throughput value for the DB instance. Can only be set when storage_type is "gp3". Cannot be specified if the allocated_storage value is below a per-engine threshold. See the RDS User Guide for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageThroughput")]
    pub storage_throughput: Option<f64>,
    /// One of "standard" (magnetic), "gp2" (general
    /// purpose SSD), "gp3" (general purpose SSD that needs iops independently)
    /// "io1" (provisioned IOPS SSD) or "io2" (block express storage provisioned IOPS
    /// SSD). The default is "io1" if iops is specified, "gp2" if not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageType")]
    pub storage_type: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Time zone of the DB instance. timezone is currently
    /// only supported by Microsoft SQL Server. The timezone can only be set on
    /// creation. See MSSQL User
    /// Guide
    /// for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    /// Whether to upgrade the storage file system configuration on the read replica.
    /// Can only be set with replicate_source_db.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upgradeStorageConfig")]
    pub upgrade_storage_config: Option<bool>,
    /// Username for the master DB user. Cannot be specified for a replica.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    /// References to SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIdRefs")]
    pub vpc_security_group_id_refs: Option<Vec<InstanceForProviderVpcSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIdSelector")]
    pub vpc_security_group_id_selector: Option<InstanceForProviderVpcSecurityGroupIdSelector>,
    /// List of VPC security groups to
    /// associate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIds")]
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Enables low-downtime updates using RDS Blue/Green deployments.
/// See blue_green_update below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderBlueGreenUpdate {
    /// Enables low-downtime updates when true.
    /// Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Reference to a SubnetGroup in rds to populate dbSubnetGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderDbSubnetGroupNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderDbSubnetGroupNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderDbSubnetGroupNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderDbSubnetGroupNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderDbSubnetGroupNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderDbSubnetGroupNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderDbSubnetGroupNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a SubnetGroup in rds to populate dbSubnetGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderDbSubnetGroupNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderDbSubnetGroupNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderDbSubnetGroupNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderDbSubnetGroupNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderDbSubnetGroupNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderDbSubnetGroupNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderDbSubnetGroupNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Key in kms to populate masterUserSecretKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderMasterUserSecretKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderMasterUserSecretKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderMasterUserSecretKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderMasterUserSecretKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderMasterUserSecretKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderMasterUserSecretKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderMasterUserSecretKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate masterUserSecretKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderMasterUserSecretKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderMasterUserSecretKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderMasterUserSecretKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderMasterUserSecretKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderMasterUserSecretKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderMasterUserSecretKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderMasterUserSecretKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate monitoringRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderMonitoringRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderMonitoringRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderMonitoringRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderMonitoringRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderMonitoringRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderMonitoringRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderMonitoringRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate monitoringRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderMonitoringRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderMonitoringRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderMonitoringRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderMonitoringRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderMonitoringRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderMonitoringRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderMonitoringRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a ParameterGroup in rds to populate parameterGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderParameterGroupNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderParameterGroupNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderParameterGroupNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderParameterGroupNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderParameterGroupNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderParameterGroupNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderParameterGroupNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ParameterGroup in rds to populate parameterGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderParameterGroupNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderParameterGroupNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderParameterGroupNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderParameterGroupNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderParameterGroupNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderParameterGroupNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderParameterGroupNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Password for the master DB user. Note that this may show up in
/// logs, and it will be stored in the state file. Cannot be set if manage_master_user_password is set to true.
/// Password for the master DB user. If you set autoGeneratePassword to true, the Secret referenced here will be created or updated with generated password if it does not already contain one.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a Instance in rds to populate replicateSourceDb.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderReplicateSourceDbRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderReplicateSourceDbRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderReplicateSourceDbRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderReplicateSourceDbRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderReplicateSourceDbRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderReplicateSourceDbRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderReplicateSourceDbRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Instance in rds to populate replicateSourceDb.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderReplicateSourceDbSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderReplicateSourceDbSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderReplicateSourceDbSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderReplicateSourceDbSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderReplicateSourceDbSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderReplicateSourceDbSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderReplicateSourceDbSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A configuration block for restoring a DB instance to an arbitrary point in time.
/// Requires the identifier argument to be set with the name of the new DB instance to be created.
/// See Restore To Point In Time below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderRestoreToPointInTime {
    /// The date and time to restore from. Value must be a time in Universal Coordinated Time (UTC) format and must be before the latest restorable time for the DB instance. Cannot be specified with use_latest_restorable_time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restoreTime")]
    pub restore_time: Option<String>,
    /// The ARN of the automated backup from which to restore. Required if source_db_instance_identifier or source_dbi_resource_id is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDbInstanceAutomatedBackupsArn")]
    pub source_db_instance_automated_backups_arn: Option<String>,
    /// The identifier of the source DB instance from which to restore. Must match the identifier of an existing DB instance. Required if source_db_instance_automated_backups_arn or source_dbi_resource_id is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDbInstanceIdentifier")]
    pub source_db_instance_identifier: Option<String>,
    /// The resource ID of the source DB instance from which to restore. Required if source_db_instance_identifier or source_db_instance_automated_backups_arn is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDbiResourceId")]
    pub source_dbi_resource_id: Option<String>,
    /// A boolean value that indicates whether the DB instance is restored from the latest backup time. Defaults to false. Cannot be specified with restore_time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useLatestRestorableTime")]
    pub use_latest_restorable_time: Option<bool>,
}

/// Restore from a Percona Xtrabackup in S3.  See Importing Data into an Amazon RDS MySQL DB Instance
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderS3Import {
    /// The bucket name where your backup is stored
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    pub bucket_name: Option<String>,
    /// Can be blank, but is the path to your backup
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketPrefix")]
    pub bucket_prefix: Option<String>,
    /// Role applied to load the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingestionRole")]
    pub ingestion_role: Option<String>,
    /// Source engine for the backup
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceEngine")]
    pub source_engine: Option<String>,
    /// Version of the source engine used to make the backup
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceEngineVersion")]
    pub source_engine_version: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderVpcSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderVpcSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderVpcSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderVpcSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderVpcSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderVpcSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderVpcSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderVpcSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceForProviderVpcSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderVpcSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceForProviderVpcSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceForProviderVpcSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderVpcSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceForProviderVpcSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProvider {
    /// The allocated storage in gibibytes. If max_allocated_storage is configured, this argument represents the initial storage allocation and differences from the configuration will be ignored automatically when Storage Autoscaling occurs. If replicate_source_db is set, the value is ignored during the creation of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocatedStorage")]
    pub allocated_storage: Option<f64>,
    /// Indicates that major version
    /// upgrades are allowed. Changing this parameter does not result in an outage and
    /// the change is asynchronously applied as soon as possible.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowMajorVersionUpgrade")]
    pub allow_major_version_upgrade: Option<bool>,
    /// Specifies whether any database modifications
    /// are applied immediately, or during the next maintenance window. Default is
    /// false. See Amazon RDS Documentation for more
    /// information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applyImmediately")]
    pub apply_immediately: Option<bool>,
    /// Indicates that minor engine upgrades
    /// will be applied automatically to the DB instance during the maintenance window.
    /// Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMinorVersionUpgrade")]
    pub auto_minor_version_upgrade: Option<bool>,
    /// The AZ for the RDS instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    pub availability_zone: Option<String>,
    /// The days to retain backups for.
    /// Must be between 0 and 35.
    /// Default is 0.
    /// Must be greater than 0 if the database is used as a source for a Read Replica,
    /// uses low-downtime updates,
    /// or will use RDS Blue/Green deployments.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupRetentionPeriod")]
    pub backup_retention_period: Option<f64>,
    /// Specifies where automated backups and manual snapshots are stored. Possible values are region (default) and outposts. See Working with Amazon RDS on AWS Outposts for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupTarget")]
    pub backup_target: Option<String>,
    /// The daily time range (in UTC) during which automated backups are created if they are enabled.
    /// Example: "09:46-10:16". Must not overlap with maintenance_window.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupWindow")]
    pub backup_window: Option<String>,
    /// Enables low-downtime updates using RDS Blue/Green deployments.
    /// See blue_green_update below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blueGreenUpdate")]
    pub blue_green_update: Option<InstanceInitProviderBlueGreenUpdate>,
    /// The identifier of the CA certificate for the DB instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertIdentifier")]
    pub ca_cert_identifier: Option<String>,
    /// The character set name to use for DB encoding in Oracle and Microsoft SQL instances (collation).
    /// This can't be changed.
    /// See Oracle Character Sets Supported in Amazon RDS or
    /// Server-Level Collation for Microsoft SQL Server for more information.
    /// Cannot be set  with replicate_source_db, restore_to_point_in_time, s3_import, or snapshot_identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "characterSetName")]
    pub character_set_name: Option<String>,
    /// â€“  Copy all Instance tags to snapshots. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyTagsToSnapshot")]
    pub copy_tags_to_snapshot: Option<bool>,
    /// The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customIamInstanceProfile")]
    pub custom_iam_instance_profile: Option<String>,
    /// Indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance. See CoIP for RDS on Outposts for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerOwnedIpEnabled")]
    pub customer_owned_ip_enabled: Option<bool>,
    /// The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance. Note that this does not apply for Oracle or SQL Server engines. See the AWS documentation for more details on what applies for those engines. If you are providing an Oracle db name, it needs to be in all upper case. Cannot be specified for a replica.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbName")]
    pub db_name: Option<String>,
    /// Name of DB subnet group.
    /// DB instance will be created in the VPC associated with the DB subnet group.
    /// If unspecified, will be created in the default Subnet Group.
    /// When working with read replicas created in the same region, defaults to the Subnet Group Name of the source DB.
    /// When working with read replicas created in a different region, defaults to the default Subnet Group.
    /// See DBSubnetGroupName in API action CreateDBInstanceReadReplica for additional read replica constraints.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbSubnetGroupName")]
    pub db_subnet_group_name: Option<String>,
    /// Reference to a SubnetGroup in rds to populate dbSubnetGroupName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbSubnetGroupNameRef")]
    pub db_subnet_group_name_ref: Option<InstanceInitProviderDbSubnetGroupNameRef>,
    /// Selector for a SubnetGroup in rds to populate dbSubnetGroupName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbSubnetGroupNameSelector")]
    pub db_subnet_group_name_selector: Option<InstanceInitProviderDbSubnetGroupNameSelector>,
    /// Use a dedicated log volume (DLV) for the DB instance. Requires Provisioned IOPS. See the AWS documentation for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dedicatedLogVolume")]
    pub dedicated_log_volume: Option<bool>,
    /// Specifies whether to remove automated backups immediately after the DB instance is deleted. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteAutomatedBackups")]
    pub delete_automated_backups: Option<bool>,
    /// If the DB instance should have deletion protection enabled. The database can't be deleted when this value is set to true. The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionProtection")]
    pub deletion_protection: Option<bool>,
    /// The ID of the Directory Service Active Directory domain to create the instance in. Conflicts with domain_fqdn, domain_ou, domain_auth_secret_arn and a domain_dns_ips.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// The ARN for the Secrets Manager secret with the self managed Active Directory credentials for the user joining the domain. Conflicts with domain and domain_iam_role_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainAuthSecretArn")]
    pub domain_auth_secret_arn: Option<String>,
    /// The IPv4 DNS IP addresses of your primary and secondary self managed Active Directory domain controllers. Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list. Conflicts with domain and domain_iam_role_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainDnsIps")]
    pub domain_dns_ips: Option<Vec<String>>,
    /// The fully qualified domain name (FQDN) of the self managed Active Directory domain. Conflicts with domain and domain_iam_role_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainFqdn")]
    pub domain_fqdn: Option<String>,
    /// The name of the IAM role to be used when making API calls to the Directory Service. Conflicts with domain_fqdn, domain_ou, domain_auth_secret_arn and a domain_dns_ips.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainIamRoleName")]
    pub domain_iam_role_name: Option<String>,
    /// The self managed Active Directory organizational unit for your DB instance to join. Conflicts with domain and domain_iam_role_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainOu")]
    pub domain_ou: Option<String>,
    /// Set of log types to enable for exporting to CloudWatch logs. If omitted, no logs will be exported. For supported values, see the EnableCloudwatchLogsExports.member.N parameter in API action CreateDBInstance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enabledCloudwatchLogsExports")]
    pub enabled_cloudwatch_logs_exports: Option<Vec<String>>,
    /// The database engine to use. For supported values, see the Engine parameter in [API action CreateDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html). Note that for Amazon Aurora instances the engine must match the [DB Cluster](https://marketplace.upbound.io/providers/upbound/provider-aws/latest/resources/rds.aws.upbound.io/Cluster/v1beta1)'s engine'. For information on the difference between the available Aurora MySQL engines see Comparison in the [Amazon RDS Release Notes](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraMySQLReleaseNotes/Welcome.html).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub engine: Option<String>,
    /// The life cycle type for this DB instance. This setting applies only to RDS for MySQL and RDS for PostgreSQL. Valid values are open-source-rds-extended-support, open-source-rds-extended-support-disabled. Default value is open-source-rds-extended-support. [Using Amazon RDS Extended Support]: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineLifecycleSupport")]
    pub engine_lifecycle_support: Option<String>,
    /// The engine version to use. If `autoMinorVersionUpgrade` is enabled, you can provide a prefix of the version such as 5.7 (for 5.7.10). The actual engine version used is returned in the attribute `status.atProvider.engineVersionActual`. For supported values, see the EngineVersion parameter in [API action CreateDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html). Note that for Amazon Aurora instances the engine version must match the [DB Cluster](https://marketplace.upbound.io/providers/upbound/provider-aws/latest/resources/rds.aws.upbound.io/Cluster/v1beta1)'s engine version'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineVersion")]
    pub engine_version: Option<String>,
    /// The name of your final DB snapshot
    /// when this DB instance is deleted. Must be provided if skip_final_snapshot is
    /// set to false. The value must begin with a letter, only contain alphanumeric characters and hyphens, and not end with a hyphen or contain two consecutive hyphens. Must not be provided when deleting a read replica.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "finalSnapshotIdentifier")]
    pub final_snapshot_identifier: Option<String>,
    /// Specifies whether mappings of AWS Identity and Access Management (IAM) accounts to database
    /// accounts is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamDatabaseAuthenticationEnabled")]
    pub iam_database_authentication_enabled: Option<bool>,
    /// Required if restore_to_point_in_time is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
    /// Creates a unique identifier beginning with the specified prefix. Conflicts with identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identifierPrefix")]
    pub identifier_prefix: Option<String>,
    /// The instance type of the RDS instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceClass")]
    pub instance_class: Option<String>,
    /// The amount of provisioned IOPS. Setting this implies a
    /// storage_type of "io1" or "io2". Can only be set when storage_type is "io1", "io2 or "gp3".
    /// Cannot be specified for gp3 storage if the allocated_storage value is below a per-engine threshold.
    /// See the RDS User Guide for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iops: Option<f64>,
    /// The ARN for the KMS encryption key. If creating an
    /// encrypted replica, set this to the destination KMS ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    pub kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyIdRef")]
    pub kms_key_id_ref: Option<InstanceInitProviderKmsKeyIdRef>,
    /// Selector for a Key in kms to populate kmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyIdSelector")]
    pub kms_key_id_selector: Option<InstanceInitProviderKmsKeyIdSelector>,
    /// License model information for this DB instance. Valid values for this field are as follows:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "licenseModel")]
    pub license_model: Option<String>,
    /// The window to perform maintenance in.
    /// Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00". See RDS
    /// Maintenance Window
    /// docs
    /// for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceWindow")]
    pub maintenance_window: Option<String>,
    /// Set to true to allow RDS to manage the master user password in Secrets Manager. Cannot be set if password is provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manageMasterUserPassword")]
    pub manage_master_user_password: Option<bool>,
    /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. If not specified, the default KMS key for your Amazon Web Services account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUserSecretKmsKeyId")]
    pub master_user_secret_kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate masterUserSecretKmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUserSecretKmsKeyIdRef")]
    pub master_user_secret_kms_key_id_ref: Option<InstanceInitProviderMasterUserSecretKmsKeyIdRef>,
    /// Selector for a Key in kms to populate masterUserSecretKmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUserSecretKmsKeyIdSelector")]
    pub master_user_secret_kms_key_id_selector: Option<InstanceInitProviderMasterUserSecretKmsKeyIdSelector>,
    /// When configured, the upper limit to which Amazon RDS can automatically scale the storage of the DB instance. Configuring this will automatically ignore differences to allocated_storage. Must be greater than or equal to allocated_storage or 0 to disable Storage Autoscaling.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAllocatedStorage")]
    pub max_allocated_storage: Option<f64>,
    /// The interval, in seconds, between points
    /// when Enhanced Monitoring metrics are collected for the DB instance. To disable
    /// collecting Enhanced Monitoring metrics, specify 0. The default is 0. Valid
    /// Values: 0, 1, 5, 10, 15, 30, 60.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringInterval")]
    pub monitoring_interval: Option<f64>,
    /// The ARN for the IAM role that permits RDS
    /// to send enhanced monitoring metrics to CloudWatch Logs. You can find more
    /// information on the AWS
    /// Documentation
    /// what IAM permissions are needed to allow Enhanced Monitoring for RDS Instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringRoleArn")]
    pub monitoring_role_arn: Option<String>,
    /// Reference to a Role in iam to populate monitoringRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringRoleArnRef")]
    pub monitoring_role_arn_ref: Option<InstanceInitProviderMonitoringRoleArnRef>,
    /// Selector for a Role in iam to populate monitoringRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringRoleArnSelector")]
    pub monitoring_role_arn_selector: Option<InstanceInitProviderMonitoringRoleArnSelector>,
    /// Specifies if the RDS instance is multi-AZ
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiAz")]
    pub multi_az: Option<bool>,
    /// The national character set is used in the NCHAR, NVARCHAR2, and NCLOB data types for Oracle instances. This can't be changed. See Oracle Character Sets
    /// Supported in Amazon RDS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ncharCharacterSetName")]
    pub nchar_character_set_name: Option<String>,
    /// The network type of the DB instance. Valid values: IPV4, DUAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkType")]
    pub network_type: Option<String>,
    /// Name of the DB option group to associate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "optionGroupName")]
    pub option_group_name: Option<String>,
    /// Name of the DB parameter group to associate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterGroupName")]
    pub parameter_group_name: Option<String>,
    /// Reference to a ParameterGroup in rds to populate parameterGroupName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterGroupNameRef")]
    pub parameter_group_name_ref: Option<InstanceInitProviderParameterGroupNameRef>,
    /// Selector for a ParameterGroup in rds to populate parameterGroupName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterGroupNameSelector")]
    pub parameter_group_name_selector: Option<InstanceInitProviderParameterGroupNameSelector>,
    /// Password for the master DB user. Note that this may show up in
    /// logs, and it will be stored in the state file. Cannot be set if manage_master_user_password is set to true.
    /// Password for the master DB user. If you set autoGeneratePassword to true, the Secret referenced here will be created or updated with generated password if it does not already contain one.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretRef")]
    pub password_secret_ref: Option<InstanceInitProviderPasswordSecretRef>,
    /// Specifies whether Performance Insights are enabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "performanceInsightsEnabled")]
    pub performance_insights_enabled: Option<bool>,
    /// The ARN for the KMS key to encrypt Performance Insights data. When specifying performance_insights_kms_key_id, performance_insights_enabled needs to be set to true. Once KMS key is set, it can never be changed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "performanceInsightsKmsKeyId")]
    pub performance_insights_kms_key_id: Option<String>,
    /// Amount of time in days to retain Performance Insights data. Valid values are 7, 731 (2 years) or a multiple of 31. When specifying performance_insights_retention_period, performance_insights_enabled needs to be set to true. Defaults to '7'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "performanceInsightsRetentionPeriod")]
    pub performance_insights_retention_period: Option<f64>,
    /// The port on which the DB accepts connections.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Bool to control if instance is publicly
    /// accessible. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publiclyAccessible")]
    pub publicly_accessible: Option<bool>,
    /// Specifies whether the replica is in either mounted or open-read-only mode. This attribute
    /// is only supported by Oracle instances. Oracle replicas operate in open-read-only mode unless otherwise specified. See Working with Oracle Read Replicas for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaMode")]
    pub replica_mode: Option<String>,
    /// Specifies that this resource is a Replica database, and to use this value as the source database.
    /// If replicating an Amazon RDS Database Instance in the same region, use the identifier of the source DB, unless also specifying the db_subnet_group_name.
    /// If specifying the db_subnet_group_name in the same region, use the arn of the source DB.
    /// If replicating an Instance in a different region, use the arn of the source DB.
    /// Note that if you are creating a cross-region replica of an encrypted database you will also need to specify a kms_key_id.
    /// See DB Instance Replication and Working with PostgreSQL and MySQL Read Replicas for more information on using Replication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicateSourceDb")]
    pub replicate_source_db: Option<String>,
    /// Reference to a Instance in rds to populate replicateSourceDb.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicateSourceDbRef")]
    pub replicate_source_db_ref: Option<InstanceInitProviderReplicateSourceDbRef>,
    /// Selector for a Instance in rds to populate replicateSourceDb.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicateSourceDbSelector")]
    pub replicate_source_db_selector: Option<InstanceInitProviderReplicateSourceDbSelector>,
    /// A configuration block for restoring a DB instance to an arbitrary point in time.
    /// Requires the identifier argument to be set with the name of the new DB instance to be created.
    /// See Restore To Point In Time below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restoreToPointInTime")]
    pub restore_to_point_in_time: Option<InstanceInitProviderRestoreToPointInTime>,
    /// Restore from a Percona Xtrabackup in S3.  See Importing Data into an Amazon RDS MySQL DB Instance
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Import")]
    pub s3_import: Option<InstanceInitProviderS3Import>,
    /// Determines whether a final DB snapshot is
    /// created before the DB instance is deleted. If true is specified, no DBSnapshot
    /// is created. If false is specified, a DB snapshot is created before the DB
    /// instance is deleted, using the value from final_snapshot_identifier. Default
    /// is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipFinalSnapshot")]
    pub skip_final_snapshot: Option<bool>,
    /// Specifies whether or not to create this database from a snapshot.
    /// This corresponds to the snapshot ID you'd find in the RDS console, e.g: rds:production-2015-06-26-06-05.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotIdentifier")]
    pub snapshot_identifier: Option<String>,
    /// Specifies whether the DB instance is
    /// encrypted. Note that if you are creating a cross-region read replica this field
    /// is ignored and you should instead declare kms_key_id with a valid ARN. The
    /// default is false if not specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageEncrypted")]
    pub storage_encrypted: Option<bool>,
    /// The storage throughput value for the DB instance. Can only be set when storage_type is "gp3". Cannot be specified if the allocated_storage value is below a per-engine threshold. See the RDS User Guide for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageThroughput")]
    pub storage_throughput: Option<f64>,
    /// One of "standard" (magnetic), "gp2" (general
    /// purpose SSD), "gp3" (general purpose SSD that needs iops independently)
    /// "io1" (provisioned IOPS SSD) or "io2" (block express storage provisioned IOPS
    /// SSD). The default is "io1" if iops is specified, "gp2" if not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageType")]
    pub storage_type: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Time zone of the DB instance. timezone is currently
    /// only supported by Microsoft SQL Server. The timezone can only be set on
    /// creation. See MSSQL User
    /// Guide
    /// for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    /// Whether to upgrade the storage file system configuration on the read replica.
    /// Can only be set with replicate_source_db.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upgradeStorageConfig")]
    pub upgrade_storage_config: Option<bool>,
    /// Username for the master DB user. Cannot be specified for a replica.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    /// References to SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIdRefs")]
    pub vpc_security_group_id_refs: Option<Vec<InstanceInitProviderVpcSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIdSelector")]
    pub vpc_security_group_id_selector: Option<InstanceInitProviderVpcSecurityGroupIdSelector>,
    /// List of VPC security groups to
    /// associate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIds")]
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Enables low-downtime updates using RDS Blue/Green deployments.
/// See blue_green_update below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderBlueGreenUpdate {
    /// Enables low-downtime updates when true.
    /// Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Reference to a SubnetGroup in rds to populate dbSubnetGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderDbSubnetGroupNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderDbSubnetGroupNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderDbSubnetGroupNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderDbSubnetGroupNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderDbSubnetGroupNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderDbSubnetGroupNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderDbSubnetGroupNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a SubnetGroup in rds to populate dbSubnetGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderDbSubnetGroupNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderDbSubnetGroupNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderDbSubnetGroupNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderDbSubnetGroupNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderDbSubnetGroupNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderDbSubnetGroupNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderDbSubnetGroupNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Key in kms to populate masterUserSecretKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderMasterUserSecretKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderMasterUserSecretKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderMasterUserSecretKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderMasterUserSecretKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderMasterUserSecretKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderMasterUserSecretKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderMasterUserSecretKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate masterUserSecretKmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderMasterUserSecretKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderMasterUserSecretKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderMasterUserSecretKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderMasterUserSecretKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderMasterUserSecretKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderMasterUserSecretKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderMasterUserSecretKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Role in iam to populate monitoringRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderMonitoringRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderMonitoringRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderMonitoringRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderMonitoringRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderMonitoringRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderMonitoringRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderMonitoringRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate monitoringRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderMonitoringRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderMonitoringRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderMonitoringRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderMonitoringRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderMonitoringRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderMonitoringRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderMonitoringRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a ParameterGroup in rds to populate parameterGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderParameterGroupNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderParameterGroupNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderParameterGroupNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderParameterGroupNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderParameterGroupNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderParameterGroupNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderParameterGroupNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ParameterGroup in rds to populate parameterGroupName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderParameterGroupNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderParameterGroupNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderParameterGroupNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderParameterGroupNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderParameterGroupNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderParameterGroupNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderParameterGroupNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Password for the master DB user. Note that this may show up in
/// logs, and it will be stored in the state file. Cannot be set if manage_master_user_password is set to true.
/// Password for the master DB user. If you set autoGeneratePassword to true, the Secret referenced here will be created or updated with generated password if it does not already contain one.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a Instance in rds to populate replicateSourceDb.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderReplicateSourceDbRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderReplicateSourceDbRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderReplicateSourceDbRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderReplicateSourceDbRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderReplicateSourceDbRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderReplicateSourceDbRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderReplicateSourceDbRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Instance in rds to populate replicateSourceDb.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderReplicateSourceDbSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderReplicateSourceDbSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderReplicateSourceDbSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderReplicateSourceDbSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderReplicateSourceDbSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderReplicateSourceDbSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderReplicateSourceDbSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A configuration block for restoring a DB instance to an arbitrary point in time.
/// Requires the identifier argument to be set with the name of the new DB instance to be created.
/// See Restore To Point In Time below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderRestoreToPointInTime {
    /// The date and time to restore from. Value must be a time in Universal Coordinated Time (UTC) format and must be before the latest restorable time for the DB instance. Cannot be specified with use_latest_restorable_time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restoreTime")]
    pub restore_time: Option<String>,
    /// The ARN of the automated backup from which to restore. Required if source_db_instance_identifier or source_dbi_resource_id is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDbInstanceAutomatedBackupsArn")]
    pub source_db_instance_automated_backups_arn: Option<String>,
    /// The identifier of the source DB instance from which to restore. Must match the identifier of an existing DB instance. Required if source_db_instance_automated_backups_arn or source_dbi_resource_id is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDbInstanceIdentifier")]
    pub source_db_instance_identifier: Option<String>,
    /// The resource ID of the source DB instance from which to restore. Required if source_db_instance_identifier or source_db_instance_automated_backups_arn is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDbiResourceId")]
    pub source_dbi_resource_id: Option<String>,
    /// A boolean value that indicates whether the DB instance is restored from the latest backup time. Defaults to false. Cannot be specified with restore_time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useLatestRestorableTime")]
    pub use_latest_restorable_time: Option<bool>,
}

/// Restore from a Percona Xtrabackup in S3.  See Importing Data into an Amazon RDS MySQL DB Instance
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderS3Import {
    /// The bucket name where your backup is stored
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    pub bucket_name: Option<String>,
    /// Can be blank, but is the path to your backup
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketPrefix")]
    pub bucket_prefix: Option<String>,
    /// Role applied to load the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingestionRole")]
    pub ingestion_role: Option<String>,
    /// Source engine for the backup
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceEngine")]
    pub source_engine: Option<String>,
    /// Version of the source engine used to make the backup
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceEngineVersion")]
    pub source_engine_version: Option<String>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderVpcSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderVpcSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderVpcSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderVpcSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderVpcSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderVpcSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderVpcSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderVpcSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceInitProviderVpcSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderVpcSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceInitProviderVpcSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceInitProviderVpcSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderVpcSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceInitProviderVpcSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<InstancePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<InstancePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstancePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// InstanceStatus defines the observed state of Instance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<InstanceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProvider {
    /// The hostname of the RDS instance. See also endpoint and port.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// The allocated storage in gibibytes. If max_allocated_storage is configured, this argument represents the initial storage allocation and differences from the configuration will be ignored automatically when Storage Autoscaling occurs. If replicate_source_db is set, the value is ignored during the creation of the instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allocatedStorage")]
    pub allocated_storage: Option<f64>,
    /// Indicates that major version
    /// upgrades are allowed. Changing this parameter does not result in an outage and
    /// the change is asynchronously applied as soon as possible.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowMajorVersionUpgrade")]
    pub allow_major_version_upgrade: Option<bool>,
    /// Specifies whether any database modifications
    /// are applied immediately, or during the next maintenance window. Default is
    /// false. See Amazon RDS Documentation for more
    /// information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applyImmediately")]
    pub apply_immediately: Option<bool>,
    /// The ARN of the RDS instance.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Indicates that minor engine upgrades
    /// will be applied automatically to the DB instance during the maintenance window.
    /// Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoMinorVersionUpgrade")]
    pub auto_minor_version_upgrade: Option<bool>,
    /// The AZ for the RDS instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    pub availability_zone: Option<String>,
    /// The days to retain backups for.
    /// Must be between 0 and 35.
    /// Default is 0.
    /// Must be greater than 0 if the database is used as a source for a Read Replica,
    /// uses low-downtime updates,
    /// or will use RDS Blue/Green deployments.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupRetentionPeriod")]
    pub backup_retention_period: Option<f64>,
    /// Specifies where automated backups and manual snapshots are stored. Possible values are region (default) and outposts. See Working with Amazon RDS on AWS Outposts for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupTarget")]
    pub backup_target: Option<String>,
    /// The daily time range (in UTC) during which automated backups are created if they are enabled.
    /// Example: "09:46-10:16". Must not overlap with maintenance_window.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "backupWindow")]
    pub backup_window: Option<String>,
    /// Enables low-downtime updates using RDS Blue/Green deployments.
    /// See blue_green_update below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blueGreenUpdate")]
    pub blue_green_update: Option<InstanceStatusAtProviderBlueGreenUpdate>,
    /// The identifier of the CA certificate for the DB instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertIdentifier")]
    pub ca_cert_identifier: Option<String>,
    /// The character set name to use for DB encoding in Oracle and Microsoft SQL instances (collation).
    /// This can't be changed.
    /// See Oracle Character Sets Supported in Amazon RDS or
    /// Server-Level Collation for Microsoft SQL Server for more information.
    /// Cannot be set  with replicate_source_db, restore_to_point_in_time, s3_import, or snapshot_identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "characterSetName")]
    pub character_set_name: Option<String>,
    /// â€“  Copy all Instance tags to snapshots. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyTagsToSnapshot")]
    pub copy_tags_to_snapshot: Option<bool>,
    /// The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customIamInstanceProfile")]
    pub custom_iam_instance_profile: Option<String>,
    /// Indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance. See CoIP for RDS on Outposts for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customerOwnedIpEnabled")]
    pub customer_owned_ip_enabled: Option<bool>,
    /// The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance. Note that this does not apply for Oracle or SQL Server engines. See the AWS documentation for more details on what applies for those engines. If you are providing an Oracle db name, it needs to be in all upper case. Cannot be specified for a replica.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbName")]
    pub db_name: Option<String>,
    /// Name of DB subnet group.
    /// DB instance will be created in the VPC associated with the DB subnet group.
    /// If unspecified, will be created in the default Subnet Group.
    /// When working with read replicas created in the same region, defaults to the Subnet Group Name of the source DB.
    /// When working with read replicas created in a different region, defaults to the default Subnet Group.
    /// See DBSubnetGroupName in API action CreateDBInstanceReadReplica for additional read replica constraints.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dbSubnetGroupName")]
    pub db_subnet_group_name: Option<String>,
    /// Use a dedicated log volume (DLV) for the DB instance. Requires Provisioned IOPS. See the AWS documentation for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dedicatedLogVolume")]
    pub dedicated_log_volume: Option<bool>,
    /// Specifies whether to remove automated backups immediately after the DB instance is deleted. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deleteAutomatedBackups")]
    pub delete_automated_backups: Option<bool>,
    /// If the DB instance should have deletion protection enabled. The database can't be deleted when this value is set to true. The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionProtection")]
    pub deletion_protection: Option<bool>,
    /// The ID of the Directory Service Active Directory domain to create the instance in. Conflicts with domain_fqdn, domain_ou, domain_auth_secret_arn and a domain_dns_ips.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub domain: Option<String>,
    /// The ARN for the Secrets Manager secret with the self managed Active Directory credentials for the user joining the domain. Conflicts with domain and domain_iam_role_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainAuthSecretArn")]
    pub domain_auth_secret_arn: Option<String>,
    /// The IPv4 DNS IP addresses of your primary and secondary self managed Active Directory domain controllers. Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list. Conflicts with domain and domain_iam_role_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainDnsIps")]
    pub domain_dns_ips: Option<Vec<String>>,
    /// The fully qualified domain name (FQDN) of the self managed Active Directory domain. Conflicts with domain and domain_iam_role_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainFqdn")]
    pub domain_fqdn: Option<String>,
    /// The name of the IAM role to be used when making API calls to the Directory Service. Conflicts with domain_fqdn, domain_ou, domain_auth_secret_arn and a domain_dns_ips.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainIamRoleName")]
    pub domain_iam_role_name: Option<String>,
    /// The self managed Active Directory organizational unit for your DB instance to join. Conflicts with domain and domain_iam_role_name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainOu")]
    pub domain_ou: Option<String>,
    /// Set of log types to enable for exporting to CloudWatch logs. If omitted, no logs will be exported. For supported values, see the EnableCloudwatchLogsExports.member.N parameter in API action CreateDBInstance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enabledCloudwatchLogsExports")]
    pub enabled_cloudwatch_logs_exports: Option<Vec<String>>,
    /// The connection endpoint in address:port format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// The database engine to use. For supported values, see the Engine parameter in [API action CreateDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html). Note that for Amazon Aurora instances the engine must match the [DB Cluster](https://marketplace.upbound.io/providers/upbound/provider-aws/latest/resources/rds.aws.upbound.io/Cluster/v1beta1)'s engine'. For information on the difference between the available Aurora MySQL engines see Comparison in the [Amazon RDS Release Notes](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraMySQLReleaseNotes/Welcome.html).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub engine: Option<String>,
    /// The life cycle type for this DB instance. This setting applies only to RDS for MySQL and RDS for PostgreSQL. Valid values are open-source-rds-extended-support, open-source-rds-extended-support-disabled. Default value is open-source-rds-extended-support. [Using Amazon RDS Extended Support]: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineLifecycleSupport")]
    pub engine_lifecycle_support: Option<String>,
    /// The engine version to use. If `autoMinorVersionUpgrade` is enabled, you can provide a prefix of the version such as 5.7 (for 5.7.10). The actual engine version used is returned in the attribute `status.atProvider.engineVersionActual`. For supported values, see the EngineVersion parameter in [API action CreateDBInstance](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html). Note that for Amazon Aurora instances the engine version must match the [DB Cluster](https://marketplace.upbound.io/providers/upbound/provider-aws/latest/resources/rds.aws.upbound.io/Cluster/v1beta1)'s engine version'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineVersion")]
    pub engine_version: Option<String>,
    /// The running version of the database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "engineVersionActual")]
    pub engine_version_actual: Option<String>,
    /// The name of your final DB snapshot
    /// when this DB instance is deleted. Must be provided if skip_final_snapshot is
    /// set to false. The value must begin with a letter, only contain alphanumeric characters and hyphens, and not end with a hyphen or contain two consecutive hyphens. Must not be provided when deleting a read replica.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "finalSnapshotIdentifier")]
    pub final_snapshot_identifier: Option<String>,
    /// The canonical hosted zone ID of the DB instance (to be used
    /// in a Route 53 Alias record).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostedZoneId")]
    pub hosted_zone_id: Option<String>,
    /// Specifies whether mappings of AWS Identity and Access Management (IAM) accounts to database
    /// accounts is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamDatabaseAuthenticationEnabled")]
    pub iam_database_authentication_enabled: Option<bool>,
    /// RDS DBI resource ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Required if restore_to_point_in_time is specified.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub identifier: Option<String>,
    /// Creates a unique identifier beginning with the specified prefix. Conflicts with identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "identifierPrefix")]
    pub identifier_prefix: Option<String>,
    /// The instance type of the RDS instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceClass")]
    pub instance_class: Option<String>,
    /// The amount of provisioned IOPS. Setting this implies a
    /// storage_type of "io1" or "io2". Can only be set when storage_type is "io1", "io2 or "gp3".
    /// Cannot be specified for gp3 storage if the allocated_storage value is below a per-engine threshold.
    /// See the RDS User Guide for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iops: Option<f64>,
    /// The ARN for the KMS encryption key. If creating an
    /// encrypted replica, set this to the destination KMS ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    pub kms_key_id: Option<String>,
    /// The latest time, in UTC RFC3339 format, to which a database can be restored with point-in-time restore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "latestRestorableTime")]
    pub latest_restorable_time: Option<String>,
    /// License model information for this DB instance. Valid values for this field are as follows:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "licenseModel")]
    pub license_model: Option<String>,
    /// Specifies the listener connection endpoint for SQL Server Always On. See endpoint below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerEndpoint")]
    pub listener_endpoint: Option<Vec<InstanceStatusAtProviderListenerEndpoint>>,
    /// The window to perform maintenance in.
    /// Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00". See RDS
    /// Maintenance Window
    /// docs
    /// for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceWindow")]
    pub maintenance_window: Option<String>,
    /// Set to true to allow RDS to manage the master user password in Secrets Manager. Cannot be set if password is provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manageMasterUserPassword")]
    pub manage_master_user_password: Option<bool>,
    /// A block that specifies the master user secret. Only available when manage_master_user_password is set to true. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUserSecret")]
    pub master_user_secret: Option<Vec<InstanceStatusAtProviderMasterUserSecret>>,
    /// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN. If not specified, the default KMS key for your Amazon Web Services account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUserSecretKmsKeyId")]
    pub master_user_secret_kms_key_id: Option<String>,
    /// When configured, the upper limit to which Amazon RDS can automatically scale the storage of the DB instance. Configuring this will automatically ignore differences to allocated_storage. Must be greater than or equal to allocated_storage or 0 to disable Storage Autoscaling.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAllocatedStorage")]
    pub max_allocated_storage: Option<f64>,
    /// The interval, in seconds, between points
    /// when Enhanced Monitoring metrics are collected for the DB instance. To disable
    /// collecting Enhanced Monitoring metrics, specify 0. The default is 0. Valid
    /// Values: 0, 1, 5, 10, 15, 30, 60.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringInterval")]
    pub monitoring_interval: Option<f64>,
    /// The ARN for the IAM role that permits RDS
    /// to send enhanced monitoring metrics to CloudWatch Logs. You can find more
    /// information on the AWS
    /// Documentation
    /// what IAM permissions are needed to allow Enhanced Monitoring for RDS Instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringRoleArn")]
    pub monitoring_role_arn: Option<String>,
    /// Specifies if the RDS instance is multi-AZ
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiAz")]
    pub multi_az: Option<bool>,
    /// The national character set is used in the NCHAR, NVARCHAR2, and NCLOB data types for Oracle instances. This can't be changed. See Oracle Character Sets
    /// Supported in Amazon RDS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ncharCharacterSetName")]
    pub nchar_character_set_name: Option<String>,
    /// The network type of the DB instance. Valid values: IPV4, DUAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkType")]
    pub network_type: Option<String>,
    /// Name of the DB option group to associate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "optionGroupName")]
    pub option_group_name: Option<String>,
    /// Name of the DB parameter group to associate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterGroupName")]
    pub parameter_group_name: Option<String>,
    /// Specifies whether Performance Insights are enabled. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "performanceInsightsEnabled")]
    pub performance_insights_enabled: Option<bool>,
    /// The ARN for the KMS key to encrypt Performance Insights data. When specifying performance_insights_kms_key_id, performance_insights_enabled needs to be set to true. Once KMS key is set, it can never be changed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "performanceInsightsKmsKeyId")]
    pub performance_insights_kms_key_id: Option<String>,
    /// Amount of time in days to retain Performance Insights data. Valid values are 7, 731 (2 years) or a multiple of 31. When specifying performance_insights_retention_period, performance_insights_enabled needs to be set to true. Defaults to '7'.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "performanceInsightsRetentionPeriod")]
    pub performance_insights_retention_period: Option<f64>,
    /// The port on which the DB accepts connections.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Bool to control if instance is publicly
    /// accessible. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publiclyAccessible")]
    pub publicly_accessible: Option<bool>,
    /// Specifies whether the replica is in either mounted or open-read-only mode. This attribute
    /// is only supported by Oracle instances. Oracle replicas operate in open-read-only mode unless otherwise specified. See Working with Oracle Read Replicas for more information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicaMode")]
    pub replica_mode: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub replicas: Option<Vec<String>>,
    /// Specifies that this resource is a Replica database, and to use this value as the source database.
    /// If replicating an Amazon RDS Database Instance in the same region, use the identifier of the source DB, unless also specifying the db_subnet_group_name.
    /// If specifying the db_subnet_group_name in the same region, use the arn of the source DB.
    /// If replicating an Instance in a different region, use the arn of the source DB.
    /// Note that if you are creating a cross-region replica of an encrypted database you will also need to specify a kms_key_id.
    /// See DB Instance Replication and Working with PostgreSQL and MySQL Read Replicas for more information on using Replication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "replicateSourceDb")]
    pub replicate_source_db: Option<String>,
    /// The RDS Resource ID of this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceId")]
    pub resource_id: Option<String>,
    /// A configuration block for restoring a DB instance to an arbitrary point in time.
    /// Requires the identifier argument to be set with the name of the new DB instance to be created.
    /// See Restore To Point In Time below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restoreToPointInTime")]
    pub restore_to_point_in_time: Option<InstanceStatusAtProviderRestoreToPointInTime>,
    /// Restore from a Percona Xtrabackup in S3.  See Importing Data into an Amazon RDS MySQL DB Instance
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Import")]
    pub s3_import: Option<InstanceStatusAtProviderS3Import>,
    /// Determines whether a final DB snapshot is
    /// created before the DB instance is deleted. If true is specified, no DBSnapshot
    /// is created. If false is specified, a DB snapshot is created before the DB
    /// instance is deleted, using the value from final_snapshot_identifier. Default
    /// is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipFinalSnapshot")]
    pub skip_final_snapshot: Option<bool>,
    /// Specifies whether or not to create this database from a snapshot.
    /// This corresponds to the snapshot ID you'd find in the RDS console, e.g: rds:production-2015-06-26-06-05.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotIdentifier")]
    pub snapshot_identifier: Option<String>,
    /// The RDS instance status.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Specifies whether the DB instance is
    /// encrypted. Note that if you are creating a cross-region read replica this field
    /// is ignored and you should instead declare kms_key_id with a valid ARN. The
    /// default is false if not specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageEncrypted")]
    pub storage_encrypted: Option<bool>,
    /// The storage throughput value for the DB instance. Can only be set when storage_type is "gp3". Cannot be specified if the allocated_storage value is below a per-engine threshold. See the RDS User Guide for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageThroughput")]
    pub storage_throughput: Option<f64>,
    /// One of "standard" (magnetic), "gp2" (general
    /// purpose SSD), "gp3" (general purpose SSD that needs iops independently)
    /// "io1" (provisioned IOPS SSD) or "io2" (block express storage provisioned IOPS
    /// SSD). The default is "io1" if iops is specified, "gp2" if not.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageType")]
    pub storage_type: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// Time zone of the DB instance. timezone is currently
    /// only supported by Microsoft SQL Server. The timezone can only be set on
    /// creation. See MSSQL User
    /// Guide
    /// for more information.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
    /// Whether to upgrade the storage file system configuration on the read replica.
    /// Can only be set with replicate_source_db.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "upgradeStorageConfig")]
    pub upgrade_storage_config: Option<bool>,
    /// Username for the master DB user. Cannot be specified for a replica.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
    /// List of VPC security groups to
    /// associate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIds")]
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Enables low-downtime updates using RDS Blue/Green deployments.
/// See blue_green_update below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderBlueGreenUpdate {
    /// Enables low-downtime updates when true.
    /// Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderListenerEndpoint {
    /// The hostname of the RDS instance. See also endpoint and port.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// The canonical hosted zone ID of the DB instance (to be used
    /// in a Route 53 Alias record).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostedZoneId")]
    pub hosted_zone_id: Option<String>,
    /// The port on which the DB accepts connections.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderMasterUserSecret {
    /// The Amazon Web Services KMS key identifier that is used to encrypt the secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    pub kms_key_id: Option<String>,
    /// The Amazon Resource Name (ARN) of the secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    pub secret_arn: Option<String>,
    /// The status of the secret. Valid Values: creating | active | rotating | impaired.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretStatus")]
    pub secret_status: Option<String>,
}

/// A configuration block for restoring a DB instance to an arbitrary point in time.
/// Requires the identifier argument to be set with the name of the new DB instance to be created.
/// See Restore To Point In Time below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderRestoreToPointInTime {
    /// The date and time to restore from. Value must be a time in Universal Coordinated Time (UTC) format and must be before the latest restorable time for the DB instance. Cannot be specified with use_latest_restorable_time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "restoreTime")]
    pub restore_time: Option<String>,
    /// The ARN of the automated backup from which to restore. Required if source_db_instance_identifier or source_dbi_resource_id is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDbInstanceAutomatedBackupsArn")]
    pub source_db_instance_automated_backups_arn: Option<String>,
    /// The identifier of the source DB instance from which to restore. Must match the identifier of an existing DB instance. Required if source_db_instance_automated_backups_arn or source_dbi_resource_id is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDbInstanceIdentifier")]
    pub source_db_instance_identifier: Option<String>,
    /// The resource ID of the source DB instance from which to restore. Required if source_db_instance_identifier or source_db_instance_automated_backups_arn is not specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDbiResourceId")]
    pub source_dbi_resource_id: Option<String>,
    /// A boolean value that indicates whether the DB instance is restored from the latest backup time. Defaults to false. Cannot be specified with restore_time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useLatestRestorableTime")]
    pub use_latest_restorable_time: Option<bool>,
}

/// Restore from a Percona Xtrabackup in S3.  See Importing Data into an Amazon RDS MySQL DB Instance
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderS3Import {
    /// The bucket name where your backup is stored
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    pub bucket_name: Option<String>,
    /// Can be blank, but is the path to your backup
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketPrefix")]
    pub bucket_prefix: Option<String>,
    /// Role applied to load the data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingestionRole")]
    pub ingestion_role: Option<String>,
    /// Source engine for the backup
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceEngine")]
    pub source_engine: Option<String>,
    /// Version of the source engine used to make the backup
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceEngineVersion")]
    pub source_engine_version: Option<String>,
}


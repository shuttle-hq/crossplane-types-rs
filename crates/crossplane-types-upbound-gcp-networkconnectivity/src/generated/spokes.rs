// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// SpokeSpec defines the desired state of Spoke
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "networkconnectivity.gcp.upbound.io", version = "v1beta2", kind = "Spoke", plural = "spokes")]
#[kube(status = "SpokeStatus")]
pub struct SpokeSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<SpokeDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: SpokeForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<SpokeInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<SpokeProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<SpokePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<SpokeWriteConnectionSecretToRef>,
}

/// SpokeSpec defines the desired state of Spoke
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeForProvider {
    /// An optional description of the spoke.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Immutable. The URI of the hub that this spoke is attached to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hub: Option<String>,
    /// Reference to a Hub in networkconnectivity to populate hub.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hubRef")]
    pub hub_ref: Option<SpokeForProviderHubRef>,
    /// Selector for a Hub in networkconnectivity to populate hub.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hubSelector")]
    pub hub_selector: Option<SpokeForProviderHubSelector>,
    /// Optional labels in key:value format. For more information about labels, see Requirements for labels.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linkedInterconnectAttachments")]
    pub linked_interconnect_attachments: Option<SpokeForProviderLinkedInterconnectAttachments>,
    /// The URIs of linked Router appliance resources
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linkedRouterApplianceInstances")]
    pub linked_router_appliance_instances: Option<SpokeForProviderLinkedRouterApplianceInstances>,
    /// VPC network that is associated with the spoke.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linkedVpcNetwork")]
    pub linked_vpc_network: Option<SpokeForProviderLinkedVpcNetwork>,
    /// The URIs of linked VPN tunnel resources
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linkedVpnTunnels")]
    pub linked_vpn_tunnels: Option<SpokeForProviderLinkedVpnTunnels>,
    /// The location for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Immutable. The name of the spoke. Spoke names must be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

/// Reference to a Hub in networkconnectivity to populate hub.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeForProviderHubRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SpokeForProviderHubRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeForProviderHubRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SpokeForProviderHubRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SpokeForProviderHubRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeForProviderHubRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeForProviderHubRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Hub in networkconnectivity to populate hub.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeForProviderHubSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SpokeForProviderHubSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeForProviderHubSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SpokeForProviderHubSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SpokeForProviderHubSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeForProviderHubSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeForProviderHubSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeForProviderLinkedInterconnectAttachments {
    /// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "siteToSiteDataTransfer")]
    pub site_to_site_data_transfer: Option<bool>,
    /// The URIs of linked interconnect attachment resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uris: Option<Vec<String>>,
}

/// The URIs of linked Router appliance resources
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeForProviderLinkedRouterApplianceInstances {
    /// The list of router appliance instances
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instances: Option<Vec<SpokeForProviderLinkedRouterApplianceInstancesInstances>>,
    /// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "siteToSiteDataTransfer")]
    pub site_to_site_data_transfer: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeForProviderLinkedRouterApplianceInstancesInstances {
    /// The IP address on the VM to use for peering.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// The URI of the virtual machine resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualMachine")]
    pub virtual_machine: Option<String>,
    /// Reference to a Instance in compute to populate virtualMachine.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualMachineRef")]
    pub virtual_machine_ref: Option<SpokeForProviderLinkedRouterApplianceInstancesInstancesVirtualMachineRef>,
    /// Selector for a Instance in compute to populate virtualMachine.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualMachineSelector")]
    pub virtual_machine_selector: Option<SpokeForProviderLinkedRouterApplianceInstancesInstancesVirtualMachineSelector>,
}

/// Reference to a Instance in compute to populate virtualMachine.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeForProviderLinkedRouterApplianceInstancesInstancesVirtualMachineRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SpokeForProviderLinkedRouterApplianceInstancesInstancesVirtualMachineRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeForProviderLinkedRouterApplianceInstancesInstancesVirtualMachineRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SpokeForProviderLinkedRouterApplianceInstancesInstancesVirtualMachineRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SpokeForProviderLinkedRouterApplianceInstancesInstancesVirtualMachineRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeForProviderLinkedRouterApplianceInstancesInstancesVirtualMachineRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeForProviderLinkedRouterApplianceInstancesInstancesVirtualMachineRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Instance in compute to populate virtualMachine.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeForProviderLinkedRouterApplianceInstancesInstancesVirtualMachineSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SpokeForProviderLinkedRouterApplianceInstancesInstancesVirtualMachineSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeForProviderLinkedRouterApplianceInstancesInstancesVirtualMachineSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SpokeForProviderLinkedRouterApplianceInstancesInstancesVirtualMachineSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SpokeForProviderLinkedRouterApplianceInstancesInstancesVirtualMachineSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeForProviderLinkedRouterApplianceInstancesInstancesVirtualMachineSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeForProviderLinkedRouterApplianceInstancesInstancesVirtualMachineSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// VPC network that is associated with the spoke.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeForProviderLinkedVpcNetwork {
    /// IP ranges encompassing the subnets to be excluded from peering.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludeExportRanges")]
    pub exclude_export_ranges: Option<Vec<String>>,
    /// The URI of the VPC network resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    /// Reference to a Network in compute to populate uri.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uriRef")]
    pub uri_ref: Option<SpokeForProviderLinkedVpcNetworkUriRef>,
    /// Selector for a Network in compute to populate uri.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uriSelector")]
    pub uri_selector: Option<SpokeForProviderLinkedVpcNetworkUriSelector>,
}

/// Reference to a Network in compute to populate uri.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeForProviderLinkedVpcNetworkUriRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SpokeForProviderLinkedVpcNetworkUriRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeForProviderLinkedVpcNetworkUriRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SpokeForProviderLinkedVpcNetworkUriRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SpokeForProviderLinkedVpcNetworkUriRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeForProviderLinkedVpcNetworkUriRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeForProviderLinkedVpcNetworkUriRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate uri.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeForProviderLinkedVpcNetworkUriSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SpokeForProviderLinkedVpcNetworkUriSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeForProviderLinkedVpcNetworkUriSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SpokeForProviderLinkedVpcNetworkUriSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SpokeForProviderLinkedVpcNetworkUriSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeForProviderLinkedVpcNetworkUriSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeForProviderLinkedVpcNetworkUriSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The URIs of linked VPN tunnel resources
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeForProviderLinkedVpnTunnels {
    /// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "siteToSiteDataTransfer")]
    pub site_to_site_data_transfer: Option<bool>,
    /// The URIs of linked VPN tunnel resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uris: Option<Vec<String>>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeInitProvider {
    /// An optional description of the spoke.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Immutable. The URI of the hub that this spoke is attached to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hub: Option<String>,
    /// Reference to a Hub in networkconnectivity to populate hub.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hubRef")]
    pub hub_ref: Option<SpokeInitProviderHubRef>,
    /// Selector for a Hub in networkconnectivity to populate hub.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hubSelector")]
    pub hub_selector: Option<SpokeInitProviderHubSelector>,
    /// Optional labels in key:value format. For more information about labels, see Requirements for labels.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linkedInterconnectAttachments")]
    pub linked_interconnect_attachments: Option<SpokeInitProviderLinkedInterconnectAttachments>,
    /// The URIs of linked Router appliance resources
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linkedRouterApplianceInstances")]
    pub linked_router_appliance_instances: Option<SpokeInitProviderLinkedRouterApplianceInstances>,
    /// VPC network that is associated with the spoke.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linkedVpcNetwork")]
    pub linked_vpc_network: Option<SpokeInitProviderLinkedVpcNetwork>,
    /// The URIs of linked VPN tunnel resources
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linkedVpnTunnels")]
    pub linked_vpn_tunnels: Option<SpokeInitProviderLinkedVpnTunnels>,
    /// The location for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Immutable. The name of the spoke. Spoke names must be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

/// Reference to a Hub in networkconnectivity to populate hub.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeInitProviderHubRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SpokeInitProviderHubRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeInitProviderHubRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SpokeInitProviderHubRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SpokeInitProviderHubRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeInitProviderHubRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeInitProviderHubRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Hub in networkconnectivity to populate hub.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeInitProviderHubSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SpokeInitProviderHubSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeInitProviderHubSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SpokeInitProviderHubSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SpokeInitProviderHubSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeInitProviderHubSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeInitProviderHubSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeInitProviderLinkedInterconnectAttachments {
    /// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "siteToSiteDataTransfer")]
    pub site_to_site_data_transfer: Option<bool>,
    /// The URIs of linked interconnect attachment resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uris: Option<Vec<String>>,
}

/// The URIs of linked Router appliance resources
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeInitProviderLinkedRouterApplianceInstances {
    /// The list of router appliance instances
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instances: Option<Vec<SpokeInitProviderLinkedRouterApplianceInstancesInstances>>,
    /// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "siteToSiteDataTransfer")]
    pub site_to_site_data_transfer: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeInitProviderLinkedRouterApplianceInstancesInstances {
    /// The IP address on the VM to use for peering.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// The URI of the virtual machine resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualMachine")]
    pub virtual_machine: Option<String>,
    /// Reference to a Instance in compute to populate virtualMachine.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualMachineRef")]
    pub virtual_machine_ref: Option<SpokeInitProviderLinkedRouterApplianceInstancesInstancesVirtualMachineRef>,
    /// Selector for a Instance in compute to populate virtualMachine.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualMachineSelector")]
    pub virtual_machine_selector: Option<SpokeInitProviderLinkedRouterApplianceInstancesInstancesVirtualMachineSelector>,
}

/// Reference to a Instance in compute to populate virtualMachine.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeInitProviderLinkedRouterApplianceInstancesInstancesVirtualMachineRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SpokeInitProviderLinkedRouterApplianceInstancesInstancesVirtualMachineRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeInitProviderLinkedRouterApplianceInstancesInstancesVirtualMachineRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SpokeInitProviderLinkedRouterApplianceInstancesInstancesVirtualMachineRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SpokeInitProviderLinkedRouterApplianceInstancesInstancesVirtualMachineRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeInitProviderLinkedRouterApplianceInstancesInstancesVirtualMachineRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeInitProviderLinkedRouterApplianceInstancesInstancesVirtualMachineRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Instance in compute to populate virtualMachine.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeInitProviderLinkedRouterApplianceInstancesInstancesVirtualMachineSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SpokeInitProviderLinkedRouterApplianceInstancesInstancesVirtualMachineSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeInitProviderLinkedRouterApplianceInstancesInstancesVirtualMachineSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SpokeInitProviderLinkedRouterApplianceInstancesInstancesVirtualMachineSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SpokeInitProviderLinkedRouterApplianceInstancesInstancesVirtualMachineSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeInitProviderLinkedRouterApplianceInstancesInstancesVirtualMachineSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeInitProviderLinkedRouterApplianceInstancesInstancesVirtualMachineSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// VPC network that is associated with the spoke.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeInitProviderLinkedVpcNetwork {
    /// IP ranges encompassing the subnets to be excluded from peering.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludeExportRanges")]
    pub exclude_export_ranges: Option<Vec<String>>,
    /// The URI of the VPC network resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
    /// Reference to a Network in compute to populate uri.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uriRef")]
    pub uri_ref: Option<SpokeInitProviderLinkedVpcNetworkUriRef>,
    /// Selector for a Network in compute to populate uri.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uriSelector")]
    pub uri_selector: Option<SpokeInitProviderLinkedVpcNetworkUriSelector>,
}

/// Reference to a Network in compute to populate uri.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeInitProviderLinkedVpcNetworkUriRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SpokeInitProviderLinkedVpcNetworkUriRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeInitProviderLinkedVpcNetworkUriRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SpokeInitProviderLinkedVpcNetworkUriRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SpokeInitProviderLinkedVpcNetworkUriRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeInitProviderLinkedVpcNetworkUriRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeInitProviderLinkedVpcNetworkUriRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate uri.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeInitProviderLinkedVpcNetworkUriSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SpokeInitProviderLinkedVpcNetworkUriSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeInitProviderLinkedVpcNetworkUriSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SpokeInitProviderLinkedVpcNetworkUriSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SpokeInitProviderLinkedVpcNetworkUriSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeInitProviderLinkedVpcNetworkUriSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeInitProviderLinkedVpcNetworkUriSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The URIs of linked VPN tunnel resources
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeInitProviderLinkedVpnTunnels {
    /// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "siteToSiteDataTransfer")]
    pub site_to_site_data_transfer: Option<bool>,
    /// The URIs of linked VPN tunnel resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uris: Option<Vec<String>>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SpokeProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SpokeProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SpokeProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokeProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<SpokePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<SpokePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SpokePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SpokePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SpokePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SpokePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// SpokeStatus defines the observed state of Spoke.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<SpokeStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeStatusAtProvider {
    /// Output only. The time the spoke was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createTime")]
    pub create_time: Option<String>,
    /// An optional description of the spoke.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// Immutable. The URI of the hub that this spoke is attached to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub hub: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/spokes/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Optional labels in key:value format. For more information about labels, see Requirements for labels.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linkedInterconnectAttachments")]
    pub linked_interconnect_attachments: Option<SpokeStatusAtProviderLinkedInterconnectAttachments>,
    /// The URIs of linked Router appliance resources
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linkedRouterApplianceInstances")]
    pub linked_router_appliance_instances: Option<SpokeStatusAtProviderLinkedRouterApplianceInstances>,
    /// VPC network that is associated with the spoke.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linkedVpcNetwork")]
    pub linked_vpc_network: Option<SpokeStatusAtProviderLinkedVpcNetwork>,
    /// The URIs of linked VPN tunnel resources
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linkedVpnTunnels")]
    pub linked_vpn_tunnels: Option<SpokeStatusAtProviderLinkedVpnTunnels>,
    /// The location for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// Immutable. The name of the spoke. Spoke names must be unique.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Output only. The current lifecycle state of this spoke.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// Output only. The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different unique_id.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uniqueId")]
    pub unique_id: Option<String>,
    /// Output only. The time the spoke was last updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateTime")]
    pub update_time: Option<String>,
}

/// A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeStatusAtProviderLinkedInterconnectAttachments {
    /// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "siteToSiteDataTransfer")]
    pub site_to_site_data_transfer: Option<bool>,
    /// The URIs of linked interconnect attachment resources
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uris: Option<Vec<String>>,
}

/// The URIs of linked Router appliance resources
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeStatusAtProviderLinkedRouterApplianceInstances {
    /// The list of router appliance instances
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instances: Option<Vec<SpokeStatusAtProviderLinkedRouterApplianceInstancesInstances>>,
    /// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "siteToSiteDataTransfer")]
    pub site_to_site_data_transfer: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeStatusAtProviderLinkedRouterApplianceInstancesInstances {
    /// The IP address on the VM to use for peering.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipAddress")]
    pub ip_address: Option<String>,
    /// The URI of the virtual machine resource
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "virtualMachine")]
    pub virtual_machine: Option<String>,
}

/// VPC network that is associated with the spoke.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeStatusAtProviderLinkedVpcNetwork {
    /// IP ranges encompassing the subnets to be excluded from peering.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "excludeExportRanges")]
    pub exclude_export_ranges: Option<Vec<String>>,
    /// The URI of the VPC network resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// The URIs of linked VPN tunnel resources
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SpokeStatusAtProviderLinkedVpnTunnels {
    /// A value that controls whether site-to-site data transfer is enabled for these resources. Note that data transfer is available only in supported locations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "siteToSiteDataTransfer")]
    pub site_to_site_data_transfer: Option<bool>,
    /// The URIs of linked VPN tunnel resources.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uris: Option<Vec<String>>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// TargetHTTPSProxySpec defines the desired state of TargetHTTPSProxy
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta1", kind = "TargetHTTPSProxy", plural = "targethttpsproxies")]
#[kube(status = "TargetHTTPSProxyStatus")]
pub struct TargetHTTPSProxySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<TargetHTTPSProxyDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: TargetHTTPSProxyForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<TargetHTTPSProxyInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<TargetHTTPSProxyProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<TargetHTTPSProxyPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<TargetHTTPSProxyWriteConnectionSecretToRef>,
}

/// TargetHTTPSProxySpec defines the desired state of TargetHTTPSProxy
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyForProvider {
    /// URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
    /// Certificate manager certificates only apply when the load balancing scheme is set to INTERNAL_MANAGED.
    /// For EXTERNAL and EXTERNAL_MANAGED, use certificate_map instead.
    /// sslCertificates and certificateManagerCertificates fields can not be defined together.
    /// Accepted format is //certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName} or just the self_link projects/{project}/locations/{location}/certificates/{resourceName}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateManagerCertificates")]
    pub certificate_manager_certificates: Option<Vec<String>>,
    /// A reference to the CertificateMap resource uri that identifies a certificate map
    /// associated with the given target proxy. This field is only supported for EXTERNAL and EXTERNAL_MANAGED load balancing schemes.
    /// For INTERNAL_MANAGED, use certificate_manager_certificates instead.
    /// Accepted format is //certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificateMaps/{resourceName}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateMap")]
    pub certificate_map: Option<String>,
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Specifies how long to keep a connection open, after completing a response,
    /// while there is no matching traffic (in seconds). If an HTTP keepalive is
    /// not specified, a default value (610 seconds) will be used. For Global
    /// external HTTP(S) load balancer, the minimum allowed value is 5 seconds and
    /// the maximum allowed value is 1200 seconds. For Global external HTTP(S)
    /// load balancer (classic), this option is not available publicly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpKeepAliveTimeoutSec")]
    pub http_keep_alive_timeout_sec: Option<f64>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// This field only applies when the forwarding rule that references
    /// this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyBind")]
    pub proxy_bind: Option<bool>,
    /// Specifies the QUIC override policy for this resource. This determines
    /// whether the load balancer will attempt to negotiate QUIC with clients
    /// or not. Can specify one of NONE, ENABLE, or DISABLE. If NONE is
    /// specified, Google manages whether QUIC is used.
    /// Default value is NONE.
    /// Possible values are: NONE, ENABLE, DISABLE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "quicOverride")]
    pub quic_override: Option<String>,
    /// A URL referring to a networksecurity.ServerTlsPolicy
    /// resource that describes how the proxy should authenticate inbound
    /// traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
    /// attached to globalForwardingRules with the loadBalancingScheme
    /// set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
    /// For details which ServerTlsPolicy resources are accepted with
    /// INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
    /// loadBalancingScheme consult ServerTlsPolicy documentation.
    /// If left blank, communications are not encrypted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverTlsPolicy")]
    pub server_tls_policy: Option<String>,
    /// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
    /// Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
    /// sslCertificates and certificateManagerCertificates can not be defined together.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCertificates")]
    pub ssl_certificates: Option<Vec<String>>,
    /// References to SSLCertificate in compute to populate sslCertificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCertificatesRefs")]
    pub ssl_certificates_refs: Option<Vec<TargetHTTPSProxyForProviderSslCertificatesRefs>>,
    /// Selector for a list of SSLCertificate in compute to populate sslCertificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCertificatesSelector")]
    pub ssl_certificates_selector: Option<TargetHTTPSProxyForProviderSslCertificatesSelector>,
    /// A reference to the SslPolicy resource that will be associated with
    /// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
    /// resource will not have any SSL policy configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslPolicy")]
    pub ssl_policy: Option<String>,
    /// Specifies whether TLS 1.3 0-RTT Data (“Early Data”) should be accepted for this service.
    /// Early Data allows a TLS resumption handshake to include the initial application payload
    /// (a HTTP request) alongside the handshake, reducing the effective round trips to “zero”.
    /// This applies to TLS 1.3 connections over TCP (HTTP/2) as well as over UDP (QUIC/h3).
    /// Possible values are: STRICT, PERMISSIVE, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsEarlyData")]
    pub tls_early_data: Option<String>,
    /// A reference to the UrlMap resource that defines the mapping from URL
    /// to the BackendService.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlMap")]
    pub url_map: Option<String>,
    /// Reference to a URLMap in compute to populate urlMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlMapRef")]
    pub url_map_ref: Option<TargetHTTPSProxyForProviderUrlMapRef>,
    /// Selector for a URLMap in compute to populate urlMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlMapSelector")]
    pub url_map_selector: Option<TargetHTTPSProxyForProviderUrlMapSelector>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyForProviderSslCertificatesRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TargetHTTPSProxyForProviderSslCertificatesRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyForProviderSslCertificatesRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TargetHTTPSProxyForProviderSslCertificatesRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TargetHTTPSProxyForProviderSslCertificatesRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyForProviderSslCertificatesRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyForProviderSslCertificatesRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SSLCertificate in compute to populate sslCertificates.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyForProviderSslCertificatesSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TargetHTTPSProxyForProviderSslCertificatesSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyForProviderSslCertificatesSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TargetHTTPSProxyForProviderSslCertificatesSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TargetHTTPSProxyForProviderSslCertificatesSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyForProviderSslCertificatesSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyForProviderSslCertificatesSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a URLMap in compute to populate urlMap.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyForProviderUrlMapRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TargetHTTPSProxyForProviderUrlMapRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyForProviderUrlMapRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TargetHTTPSProxyForProviderUrlMapRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TargetHTTPSProxyForProviderUrlMapRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyForProviderUrlMapRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyForProviderUrlMapRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a URLMap in compute to populate urlMap.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyForProviderUrlMapSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TargetHTTPSProxyForProviderUrlMapSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyForProviderUrlMapSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TargetHTTPSProxyForProviderUrlMapSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TargetHTTPSProxyForProviderUrlMapSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyForProviderUrlMapSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyForProviderUrlMapSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyInitProvider {
    /// URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
    /// Certificate manager certificates only apply when the load balancing scheme is set to INTERNAL_MANAGED.
    /// For EXTERNAL and EXTERNAL_MANAGED, use certificate_map instead.
    /// sslCertificates and certificateManagerCertificates fields can not be defined together.
    /// Accepted format is //certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName} or just the self_link projects/{project}/locations/{location}/certificates/{resourceName}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateManagerCertificates")]
    pub certificate_manager_certificates: Option<Vec<String>>,
    /// A reference to the CertificateMap resource uri that identifies a certificate map
    /// associated with the given target proxy. This field is only supported for EXTERNAL and EXTERNAL_MANAGED load balancing schemes.
    /// For INTERNAL_MANAGED, use certificate_manager_certificates instead.
    /// Accepted format is //certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificateMaps/{resourceName}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateMap")]
    pub certificate_map: Option<String>,
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Specifies how long to keep a connection open, after completing a response,
    /// while there is no matching traffic (in seconds). If an HTTP keepalive is
    /// not specified, a default value (610 seconds) will be used. For Global
    /// external HTTP(S) load balancer, the minimum allowed value is 5 seconds and
    /// the maximum allowed value is 1200 seconds. For Global external HTTP(S)
    /// load balancer (classic), this option is not available publicly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpKeepAliveTimeoutSec")]
    pub http_keep_alive_timeout_sec: Option<f64>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// This field only applies when the forwarding rule that references
    /// this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyBind")]
    pub proxy_bind: Option<bool>,
    /// Specifies the QUIC override policy for this resource. This determines
    /// whether the load balancer will attempt to negotiate QUIC with clients
    /// or not. Can specify one of NONE, ENABLE, or DISABLE. If NONE is
    /// specified, Google manages whether QUIC is used.
    /// Default value is NONE.
    /// Possible values are: NONE, ENABLE, DISABLE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "quicOverride")]
    pub quic_override: Option<String>,
    /// A URL referring to a networksecurity.ServerTlsPolicy
    /// resource that describes how the proxy should authenticate inbound
    /// traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
    /// attached to globalForwardingRules with the loadBalancingScheme
    /// set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
    /// For details which ServerTlsPolicy resources are accepted with
    /// INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
    /// loadBalancingScheme consult ServerTlsPolicy documentation.
    /// If left blank, communications are not encrypted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverTlsPolicy")]
    pub server_tls_policy: Option<String>,
    /// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
    /// Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
    /// sslCertificates and certificateManagerCertificates can not be defined together.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCertificates")]
    pub ssl_certificates: Option<Vec<String>>,
    /// References to SSLCertificate in compute to populate sslCertificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCertificatesRefs")]
    pub ssl_certificates_refs: Option<Vec<TargetHTTPSProxyInitProviderSslCertificatesRefs>>,
    /// Selector for a list of SSLCertificate in compute to populate sslCertificates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCertificatesSelector")]
    pub ssl_certificates_selector: Option<TargetHTTPSProxyInitProviderSslCertificatesSelector>,
    /// A reference to the SslPolicy resource that will be associated with
    /// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
    /// resource will not have any SSL policy configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslPolicy")]
    pub ssl_policy: Option<String>,
    /// Specifies whether TLS 1.3 0-RTT Data (“Early Data”) should be accepted for this service.
    /// Early Data allows a TLS resumption handshake to include the initial application payload
    /// (a HTTP request) alongside the handshake, reducing the effective round trips to “zero”.
    /// This applies to TLS 1.3 connections over TCP (HTTP/2) as well as over UDP (QUIC/h3).
    /// Possible values are: STRICT, PERMISSIVE, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsEarlyData")]
    pub tls_early_data: Option<String>,
    /// A reference to the UrlMap resource that defines the mapping from URL
    /// to the BackendService.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlMap")]
    pub url_map: Option<String>,
    /// Reference to a URLMap in compute to populate urlMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlMapRef")]
    pub url_map_ref: Option<TargetHTTPSProxyInitProviderUrlMapRef>,
    /// Selector for a URLMap in compute to populate urlMap.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlMapSelector")]
    pub url_map_selector: Option<TargetHTTPSProxyInitProviderUrlMapSelector>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyInitProviderSslCertificatesRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TargetHTTPSProxyInitProviderSslCertificatesRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyInitProviderSslCertificatesRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TargetHTTPSProxyInitProviderSslCertificatesRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TargetHTTPSProxyInitProviderSslCertificatesRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyInitProviderSslCertificatesRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyInitProviderSslCertificatesRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SSLCertificate in compute to populate sslCertificates.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyInitProviderSslCertificatesSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TargetHTTPSProxyInitProviderSslCertificatesSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyInitProviderSslCertificatesSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TargetHTTPSProxyInitProviderSslCertificatesSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TargetHTTPSProxyInitProviderSslCertificatesSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyInitProviderSslCertificatesSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyInitProviderSslCertificatesSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a URLMap in compute to populate urlMap.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyInitProviderUrlMapRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TargetHTTPSProxyInitProviderUrlMapRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyInitProviderUrlMapRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TargetHTTPSProxyInitProviderUrlMapRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TargetHTTPSProxyInitProviderUrlMapRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyInitProviderUrlMapRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyInitProviderUrlMapRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a URLMap in compute to populate urlMap.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyInitProviderUrlMapSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TargetHTTPSProxyInitProviderUrlMapSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyInitProviderUrlMapSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TargetHTTPSProxyInitProviderUrlMapSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TargetHTTPSProxyInitProviderUrlMapSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyInitProviderUrlMapSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyInitProviderUrlMapSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TargetHTTPSProxyProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TargetHTTPSProxyProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TargetHTTPSProxyProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<TargetHTTPSProxyPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<TargetHTTPSProxyPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TargetHTTPSProxyPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TargetHTTPSProxyPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TargetHTTPSProxyPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TargetHTTPSProxyPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// TargetHTTPSProxyStatus defines the observed state of TargetHTTPSProxy.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<TargetHTTPSProxyStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TargetHTTPSProxyStatusAtProvider {
    /// URLs to certificate manager certificate resources that are used to authenticate connections between users and the load balancer.
    /// Certificate manager certificates only apply when the load balancing scheme is set to INTERNAL_MANAGED.
    /// For EXTERNAL and EXTERNAL_MANAGED, use certificate_map instead.
    /// sslCertificates and certificateManagerCertificates fields can not be defined together.
    /// Accepted format is //certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificates/{resourceName} or just the self_link projects/{project}/locations/{location}/certificates/{resourceName}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateManagerCertificates")]
    pub certificate_manager_certificates: Option<Vec<String>>,
    /// A reference to the CertificateMap resource uri that identifies a certificate map
    /// associated with the given target proxy. This field is only supported for EXTERNAL and EXTERNAL_MANAGED load balancing schemes.
    /// For INTERNAL_MANAGED, use certificate_manager_certificates instead.
    /// Accepted format is //certificatemanager.googleapis.com/projects/{project}/locations/{location}/certificateMaps/{resourceName}.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateMap")]
    pub certificate_map: Option<String>,
    /// Creation timestamp in RFC3339 text format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTimestamp")]
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Specifies how long to keep a connection open, after completing a response,
    /// while there is no matching traffic (in seconds). If an HTTP keepalive is
    /// not specified, a default value (610 seconds) will be used. For Global
    /// external HTTP(S) load balancer, the minimum allowed value is 5 seconds and
    /// the maximum allowed value is 1200 seconds. For Global external HTTP(S)
    /// load balancer (classic), this option is not available publicly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpKeepAliveTimeoutSec")]
    pub http_keep_alive_timeout_sec: Option<f64>,
    /// an identifier for the resource with format projects/{{project}}/global/targetHttpsProxies/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// This field only applies when the forwarding rule that references
    /// this target proxy has a loadBalancingScheme set to INTERNAL_SELF_MANAGED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyBind")]
    pub proxy_bind: Option<bool>,
    /// The unique identifier for the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "proxyId")]
    pub proxy_id: Option<f64>,
    /// Specifies the QUIC override policy for this resource. This determines
    /// whether the load balancer will attempt to negotiate QUIC with clients
    /// or not. Can specify one of NONE, ENABLE, or DISABLE. If NONE is
    /// specified, Google manages whether QUIC is used.
    /// Default value is NONE.
    /// Possible values are: NONE, ENABLE, DISABLE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "quicOverride")]
    pub quic_override: Option<String>,
    /// The URI of the created resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    pub self_link: Option<String>,
    /// A URL referring to a networksecurity.ServerTlsPolicy
    /// resource that describes how the proxy should authenticate inbound
    /// traffic. serverTlsPolicy only applies to a global TargetHttpsProxy
    /// attached to globalForwardingRules with the loadBalancingScheme
    /// set to INTERNAL_SELF_MANAGED or EXTERNAL or EXTERNAL_MANAGED.
    /// For details which ServerTlsPolicy resources are accepted with
    /// INTERNAL_SELF_MANAGED and which with EXTERNAL, EXTERNAL_MANAGED
    /// loadBalancingScheme consult ServerTlsPolicy documentation.
    /// If left blank, communications are not encrypted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverTlsPolicy")]
    pub server_tls_policy: Option<String>,
    /// URLs to SslCertificate resources that are used to authenticate connections between users and the load balancer.
    /// Currently, you may specify up to 15 SSL certificates. sslCertificates do not apply when the load balancing scheme is set to INTERNAL_SELF_MANAGED.
    /// sslCertificates and certificateManagerCertificates can not be defined together.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslCertificates")]
    pub ssl_certificates: Option<Vec<String>>,
    /// A reference to the SslPolicy resource that will be associated with
    /// the TargetHttpsProxy resource. If not set, the TargetHttpsProxy
    /// resource will not have any SSL policy configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslPolicy")]
    pub ssl_policy: Option<String>,
    /// Specifies whether TLS 1.3 0-RTT Data (“Early Data”) should be accepted for this service.
    /// Early Data allows a TLS resumption handshake to include the initial application payload
    /// (a HTTP request) alongside the handshake, reducing the effective round trips to “zero”.
    /// This applies to TLS 1.3 connections over TCP (HTTP/2) as well as over UDP (QUIC/h3).
    /// Possible values are: STRICT, PERMISSIVE, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsEarlyData")]
    pub tls_early_data: Option<String>,
    /// A reference to the UrlMap resource that defines the mapping from URL
    /// to the BackendService.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlMap")]
    pub url_map: Option<String>,
}


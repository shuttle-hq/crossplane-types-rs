// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// BackendServiceSpec defines the desired state of BackendService
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta2", kind = "BackendService", plural = "backendservices")]
#[kube(status = "BackendServiceStatus")]
pub struct BackendServiceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<BackendServiceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: BackendServiceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<BackendServiceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<BackendServiceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<BackendServicePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<BackendServiceWriteConnectionSecretToRef>,
}

/// BackendServiceSpec defines the desired state of BackendService
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProvider {
    /// Lifetime of cookies in seconds if session_affinity is
    /// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
    /// only until the end of the browser session (or equivalent). The
    /// maximum allowed value for TTL is one day.
    /// When the load balancing scheme is INTERNAL, this field is not used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "affinityCookieTtlSec")]
    pub affinity_cookie_ttl_sec: Option<f64>,
    /// The set of backends that serve this BackendService.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backend: Option<Vec<BackendServiceForProviderBackend>>,
    /// Cloud CDN configuration for this BackendService.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdnPolicy")]
    pub cdn_policy: Option<BackendServiceForProviderCdnPolicy>,
    /// Settings controlling the volume of connections to a backend service. This field
    /// is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "circuitBreakers")]
    pub circuit_breakers: Option<BackendServiceForProviderCircuitBreakers>,
    /// Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
    /// Possible values are: AUTOMATIC, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionMode")]
    pub compression_mode: Option<String>,
    /// Time for which instance will be drained (not accept new
    /// connections, but still work to finish started).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionDrainingTimeoutSec")]
    pub connection_draining_timeout_sec: Option<f64>,
    /// Consistent Hash-based load balancing can be used to provide soft session
    /// affinity based on HTTP headers, cookies or other properties. This load balancing
    /// policy is applicable only for HTTP connections. The affinity to a particular
    /// destination host will be lost when one or more hosts are added/removed from the
    /// destination service. This field specifies parameters that control consistent
    /// hashing. This field only applies if the load_balancing_scheme is set to
    /// INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
    /// set to MAGLEV or RING_HASH.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consistentHash")]
    pub consistent_hash: Option<BackendServiceForProviderConsistentHash>,
    /// Headers that the HTTP/S load balancer should add to proxied
    /// requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRequestHeaders")]
    pub custom_request_headers: Option<Vec<String>>,
    /// Headers that the HTTP/S load balancer should add to proxied
    /// responses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customResponseHeaders")]
    pub custom_response_headers: Option<Vec<String>>,
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The resource URL for the edge security policy associated with this backend service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "edgeSecurityPolicy")]
    pub edge_security_policy: Option<String>,
    /// If true, enable Cloud CDN for this BackendService.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCdn")]
    pub enable_cdn: Option<bool>,
    /// The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
    /// for health checking this BackendService. Currently at most one health
    /// check can be specified.
    /// A health check must be specified unless the backend service uses an internet
    /// or serverless NEG as a backend.
    /// For internal load balancing, a URL to a HealthCheck resource must be specified instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecks")]
    pub health_checks: Option<Vec<String>>,
    /// References to HealthCheck in compute to populate healthChecks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecksRefs")]
    pub health_checks_refs: Option<Vec<BackendServiceForProviderHealthChecksRefs>>,
    /// Selector for a list of HealthCheck in compute to populate healthChecks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecksSelector")]
    pub health_checks_selector: Option<BackendServiceForProviderHealthChecksSelector>,
    /// Settings for enabling Cloud Identity Aware Proxy
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iap: Option<BackendServiceForProviderIap>,
    /// Indicates whether the backend service will be used with internal or
    /// external load balancing. A backend service created for one type of
    /// load balancing cannot be used with the other. For more information, refer to
    /// Choosing a load balancer.
    /// Default value is EXTERNAL.
    /// Possible values are: EXTERNAL, INTERNAL_SELF_MANAGED, INTERNAL_MANAGED, EXTERNAL_MANAGED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancingScheme")]
    pub load_balancing_scheme: Option<String>,
    /// A list of locality load balancing policies to be used in order of
    /// preference. Either the policy or the customPolicy field should be set.
    /// Overrides any value set in the localityLbPolicy field.
    /// localityLbPolicies is only supported when the BackendService is referenced
    /// by a URL Map that is referenced by a target gRPC proxy that has the
    /// validateForProxyless field set to true.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localityLbPolicies")]
    pub locality_lb_policies: Option<Vec<BackendServiceForProviderLocalityLbPolicies>>,
    /// The load balancing algorithm used within the scope of the locality.
    /// The possible values are:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localityLbPolicy")]
    pub locality_lb_policy: Option<String>,
    /// This field denotes the logging options for the load balancer traffic served by this backend service.
    /// If logging is enabled, logs will be exported to Stackdriver.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logConfig")]
    pub log_config: Option<BackendServiceForProviderLogConfig>,
    /// Settings controlling eviction of unhealthy hosts from the load balancing pool.
    /// Applicable backend service types can be a global backend service with the
    /// loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL_MANAGED.
    /// From version 6.0.
    /// Default values are enforce by GCP without providing them.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlierDetection")]
    pub outlier_detection: Option<BackendServiceForProviderOutlierDetection>,
    /// Name of backend port. The same name should appear in the instance
    /// groups referenced by this service. Required when the load balancing
    /// scheme is EXTERNAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portName")]
    pub port_name: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The protocol this BackendService uses to communicate with backends.
    /// The default is HTTP. NOTE: HTTP2 is only valid for beta HTTP/2 load balancer
    /// types and may result in errors if used with the GA API. NOTE: With protocol “UNSPECIFIED”,
    /// the backend service can be used by Layer 4 Internal Load Balancing or Network Load Balancing
    /// with TCP/UDP/L3_DEFAULT Forwarding Rule protocol.
    /// Possible values are: HTTP, HTTPS, HTTP2, TCP, SSL, GRPC, UNSPECIFIED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// The security policy associated with this backend service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityPolicy")]
    pub security_policy: Option<String>,
    /// The security settings that apply to this backend service. This field is applicable to either
    /// a regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and
    /// load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
    /// load_balancing_scheme set to INTERNAL_SELF_MANAGED.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securitySettings")]
    pub security_settings: Option<BackendServiceForProviderSecuritySettings>,
    /// URL to networkservices.ServiceLbPolicy resource.
    /// Can only be set if load balancing scheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED or INTERNAL_SELF_MANAGED and the scope is global.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceLbPolicy")]
    pub service_lb_policy: Option<String>,
    /// Type of session affinity to use. The default is NONE. Session affinity is
    /// not applicable if the protocol is UDP.
    /// Possible values are: NONE, CLIENT_IP, CLIENT_IP_PORT_PROTO, CLIENT_IP_PROTO, GENERATED_COOKIE, HEADER_FIELD, HTTP_COOKIE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinity")]
    pub session_affinity: Option<String>,
    /// The backend service timeout has a different meaning depending on the type of load balancer.
    /// For more information see, Backend service settings.
    /// The default is 30 seconds.
    /// The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSec")]
    pub timeout_sec: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderBackend {
    /// Specifies the balancing mode for this backend.
    /// For global HTTP(S) or TCP/SSL load balancing, the default is
    /// UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S))
    /// and CONNECTION (for TCP/SSL).
    /// See the Backend Services Overview
    /// for an explanation of load balancing modes.
    /// From version 6.0.0 default value will be UTILIZATION to match default GCP value.
    /// Default value is UTILIZATION.
    /// Possible values are: UTILIZATION, RATE, CONNECTION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "balancingMode")]
    pub balancing_mode: Option<String>,
    /// A multiplier applied to the group's maximum servicing capacity
    /// (based on UTILIZATION, RATE or CONNECTION).
    /// Default value is 1, which means the group will serve up to 100%
    /// of its configured capacity (depending on balancingMode). A
    /// setting of 0 means the group is completely drained, offering
    /// 0% of its available Capacity. Valid range is [0.0,1.0].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityScaler")]
    pub capacity_scaler: Option<f64>,
    /// An optional description of this resource.
    /// Provide this property when you create the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The fully-qualified URL of an Instance Group or Network Endpoint
    /// Group resource. In case of instance group this defines the list
    /// of instances that serve traffic. Member virtual machine
    /// instances from each instance group must live in the same zone as
    /// the instance group itself. No two backends in a backend service
    /// are allowed to use same Instance Group resource.
    /// For Network Endpoint Groups this defines list of endpoints. All
    /// endpoints of Network Endpoint Group must be hosted on instances
    /// located in the same zone as the Network Endpoint Group.
    /// Backend services cannot mix Instance Group and
    /// Network Endpoint Group backends.
    /// Note that you must specify an Instance Group or Network Endpoint
    /// Group resource using the fully-qualified URL, rather than a
    /// partial URL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// Reference to a InstanceGroupManager in compute to populate group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupRef")]
    pub group_ref: Option<BackendServiceForProviderBackendGroupRef>,
    /// Selector for a InstanceGroupManager in compute to populate group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupSelector")]
    pub group_selector: Option<BackendServiceForProviderBackendGroupSelector>,
    /// The max number of simultaneous connections for the group. Can
    /// be used with either CONNECTION or UTILIZATION balancing modes.
    /// For CONNECTION mode, either maxConnections or one
    /// of maxConnectionsPerInstance or maxConnectionsPerEndpoint,
    /// as appropriate for group type, must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    pub max_connections: Option<f64>,
    /// The max number of simultaneous connections that a single backend
    /// network endpoint can handle. This is used to calculate the
    /// capacity of the group. Can be used in either CONNECTION or
    /// UTILIZATION balancing modes.
    /// For CONNECTION mode, either
    /// maxConnections or maxConnectionsPerEndpoint must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnectionsPerEndpoint")]
    pub max_connections_per_endpoint: Option<f64>,
    /// The max number of simultaneous connections that a single
    /// backend instance can handle. This is used to calculate the
    /// capacity of the group. Can be used in either CONNECTION or
    /// UTILIZATION balancing modes.
    /// For CONNECTION mode, either maxConnections or
    /// maxConnectionsPerInstance must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnectionsPerInstance")]
    pub max_connections_per_instance: Option<f64>,
    /// The max requests per second (RPS) of the group.
    /// Can be used with either RATE or UTILIZATION balancing modes,
    /// but required if RATE mode. For RATE mode, either maxRate or one
    /// of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
    /// group type, must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRate")]
    pub max_rate: Option<f64>,
    /// The max requests per second (RPS) that a single backend network
    /// endpoint can handle. This is used to calculate the capacity of
    /// the group. Can be used in either balancing mode. For RATE mode,
    /// either maxRate or maxRatePerEndpoint must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRatePerEndpoint")]
    pub max_rate_per_endpoint: Option<f64>,
    /// The max requests per second (RPS) that a single backend
    /// instance can handle. This is used to calculate the capacity of
    /// the group. Can be used in either balancing mode. For RATE mode,
    /// either maxRate or maxRatePerInstance must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRatePerInstance")]
    pub max_rate_per_instance: Option<f64>,
    /// Used when balancingMode is UTILIZATION. This ratio defines the
    /// CPU utilization target for the group. Valid range is [0.0, 1.0].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUtilization")]
    pub max_utilization: Option<f64>,
}

/// Reference to a InstanceGroupManager in compute to populate group.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderBackendGroupRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendServiceForProviderBackendGroupRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderBackendGroupRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendServiceForProviderBackendGroupRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendServiceForProviderBackendGroupRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceForProviderBackendGroupRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceForProviderBackendGroupRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a InstanceGroupManager in compute to populate group.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderBackendGroupSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendServiceForProviderBackendGroupSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderBackendGroupSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendServiceForProviderBackendGroupSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendServiceForProviderBackendGroupSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceForProviderBackendGroupSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceForProviderBackendGroupSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Cloud CDN configuration for this BackendService.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderCdnPolicy {
    /// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified.
    /// The cache is bypassed for all cdnPolicy.cacheMode settings.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bypassCacheOnRequestHeaders")]
    pub bypass_cache_on_request_headers: Option<Vec<BackendServiceForProviderCdnPolicyBypassCacheOnRequestHeaders>>,
    /// The CacheKeyPolicy for this CdnPolicy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheKeyPolicy")]
    pub cache_key_policy: Option<BackendServiceForProviderCdnPolicyCacheKeyPolicy>,
    /// Specifies the cache setting for all responses from this backend.
    /// The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC
    /// Possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL, CACHE_ALL_STATIC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheMode")]
    pub cache_mode: Option<String>,
    /// Specifies the maximum allowed TTL for cached content served by this origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTtl")]
    pub client_ttl: Option<f64>,
    /// Specifies the default TTL for cached content served by this origin for responses
    /// that do not have an existing valid TTL (max-age or s-max-age).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTtl")]
    pub default_ttl: Option<f64>,
    /// Specifies the maximum allowed TTL for cached content served by this origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTtl")]
    pub max_ttl: Option<f64>,
    /// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCaching")]
    pub negative_caching: Option<bool>,
    /// Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
    /// Omitting the policy and leaving negativeCaching enabled will use Cloud CDN's default cache TTLs.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCachingPolicy")]
    pub negative_caching_policy: Option<Vec<BackendServiceForProviderCdnPolicyNegativeCachingPolicy>>,
    /// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serveWhileStale")]
    pub serve_while_stale: Option<f64>,
    /// Maximum number of seconds the response to a signed URL request
    /// will be considered fresh, defaults to 1hr (3600s). After this
    /// time period, the response will be revalidated before
    /// being served.
    /// When serving responses to signed URL requests, Cloud CDN will
    /// internally behave as though all responses from this backend had a
    /// "Cache-Control: public, max-age=[TTL]" header, regardless of any
    /// existing Cache-Control header. The actual headers served in
    /// responses will not be altered.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signedUrlCacheMaxAgeSec")]
    pub signed_url_cache_max_age_sec: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderCdnPolicyBypassCacheOnRequestHeaders {
    /// The header field name to match on when bypassing cache. Values are case-insensitive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

/// The CacheKeyPolicy for this CdnPolicy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderCdnPolicyCacheKeyPolicy {
    /// If true requests to different hosts will be cached separately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeHost")]
    pub include_host: Option<bool>,
    /// Allows HTTP request headers (by name) to be used in the
    /// cache key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeHttpHeaders")]
    pub include_http_headers: Option<Vec<String>>,
    /// Names of cookies to include in cache keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeNamedCookies")]
    pub include_named_cookies: Option<Vec<String>>,
    /// If true, http and https requests will be cached separately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeProtocol")]
    pub include_protocol: Option<bool>,
    /// If true, include query string parameters in the cache key
    /// according to query_string_whitelist and
    /// query_string_blacklist. If neither is set, the entire query
    /// string will be included.
    /// If false, the query string will be excluded from the cache
    /// key entirely.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeQueryString")]
    pub include_query_string: Option<bool>,
    /// Names of query string parameters to exclude in cache keys.
    /// All other parameters will be included. Either specify
    /// query_string_whitelist or query_string_blacklist, not both.
    /// '&' and '=' will be percent encoded and not treated as
    /// delimiters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringBlacklist")]
    pub query_string_blacklist: Option<Vec<String>>,
    /// Names of query string parameters to include in cache keys.
    /// All other parameters will be excluded. Either specify
    /// query_string_whitelist or query_string_blacklist, not both.
    /// '&' and '=' will be percent encoded and not treated as
    /// delimiters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringWhitelist")]
    pub query_string_whitelist: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderCdnPolicyNegativeCachingPolicy {
    /// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501
    /// can be specified as values, and you cannot specify a status code more than once.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<f64>,
    /// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
    /// (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<f64>,
}

/// Settings controlling the volume of connections to a backend service. This field
/// is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderCircuitBreakers {
    /// The maximum number of connections to the backend cluster.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    pub max_connections: Option<f64>,
    /// The maximum number of pending requests to the backend cluster.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    pub max_pending_requests: Option<f64>,
    /// The maximum number of parallel requests to the backend cluster.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequests")]
    pub max_requests: Option<f64>,
    /// Maximum requests for a single backend connection. This parameter
    /// is respected by both the HTTP/1.1 and HTTP/2 implementations. If
    /// not specified, there is no limit. Setting this parameter to 1
    /// will effectively disable keep alive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestsPerConnection")]
    pub max_requests_per_connection: Option<f64>,
    /// The maximum number of parallel retries to the backend cluster.
    /// Defaults to 3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    pub max_retries: Option<f64>,
}

/// Consistent Hash-based load balancing can be used to provide soft session
/// affinity based on HTTP headers, cookies or other properties. This load balancing
/// policy is applicable only for HTTP connections. The affinity to a particular
/// destination host will be lost when one or more hosts are added/removed from the
/// destination service. This field specifies parameters that control consistent
/// hashing. This field only applies if the load_balancing_scheme is set to
/// INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
/// set to MAGLEV or RING_HASH.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderConsistentHash {
    /// Hash is based on HTTP Cookie. This field describes a HTTP cookie
    /// that will be used as the hash key for the consistent hash load
    /// balancer. If the cookie is not present, it will be generated.
    /// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpCookie")]
    pub http_cookie: Option<BackendServiceForProviderConsistentHashHttpCookie>,
    /// The hash based on the value of the specified header field.
    /// This field is applicable if the sessionAffinity is set to HEADER_FIELD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaderName")]
    pub http_header_name: Option<String>,
    /// The minimum number of virtual nodes to use for the hash ring.
    /// Larger ring sizes result in more granular load
    /// distributions. If the number of hosts in the load balancing pool
    /// is larger than the ring size, each host will be assigned a single
    /// virtual node.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumRingSize")]
    pub minimum_ring_size: Option<f64>,
}

/// Hash is based on HTTP Cookie. This field describes a HTTP cookie
/// that will be used as the hash key for the consistent hash load
/// balancer. If the cookie is not present, it will be generated.
/// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderConsistentHashHttpCookie {
    /// The name of a locality load balancer policy to be used. The value
    /// should be one of the predefined ones as supported by localityLbPolicy,
    /// although at the moment only ROUND_ROBIN is supported.
    /// This field should only be populated when the customPolicy field is not
    /// used.
    /// Note that specifying the same policy more than once for a backend is
    /// not a valid configuration and will be rejected.
    /// The possible values are:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Path to set for the cookie.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
    /// (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<BackendServiceForProviderConsistentHashHttpCookieTtl>,
}

/// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
/// (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderConsistentHashHttpCookieTtl {
    /// Span of time that's a fraction of a second at nanosecond
    /// resolution. Durations less than one second are represented
    /// with a 0 seconds field and a positive nanos field. Must
    /// be from 0 to 999,999,999 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<f64>,
    /// Span of time at a resolution of a second.
    /// Must be from 0 to 315,576,000,000 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<f64>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderHealthChecksRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendServiceForProviderHealthChecksRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderHealthChecksRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendServiceForProviderHealthChecksRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendServiceForProviderHealthChecksRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceForProviderHealthChecksRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceForProviderHealthChecksRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of HealthCheck in compute to populate healthChecks.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderHealthChecksSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendServiceForProviderHealthChecksSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderHealthChecksSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendServiceForProviderHealthChecksSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendServiceForProviderHealthChecksSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceForProviderHealthChecksSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceForProviderHealthChecksSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Settings for enabling Cloud Identity Aware Proxy
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderIap {
    /// OAuth2 Client ID for IAP
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauth2ClientId")]
    pub oauth2_client_id: Option<String>,
    /// OAuth2 Client Secret for IAP
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauth2ClientSecretSecretRef")]
    pub oauth2_client_secret_secret_ref: Option<BackendServiceForProviderIapOauth2ClientSecretSecretRef>,
}

/// OAuth2 Client Secret for IAP
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderIapOauth2ClientSecretSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderLocalityLbPolicies {
    /// The configuration for a custom policy implemented by the user and
    /// deployed with the client.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customPolicy")]
    pub custom_policy: Option<BackendServiceForProviderLocalityLbPoliciesCustomPolicy>,
    /// The configuration for a built-in load balancing policy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendServiceForProviderLocalityLbPoliciesPolicy>,
}

/// The configuration for a custom policy implemented by the user and
/// deployed with the client.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderLocalityLbPoliciesCustomPolicy {
    /// An optional, arbitrary JSON object with configuration data, understood
    /// by a locally installed custom policy implementation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<String>,
    /// The name of a locality load balancer policy to be used. The value
    /// should be one of the predefined ones as supported by localityLbPolicy,
    /// although at the moment only ROUND_ROBIN is supported.
    /// This field should only be populated when the customPolicy field is not
    /// used.
    /// Note that specifying the same policy more than once for a backend is
    /// not a valid configuration and will be rejected.
    /// The possible values are:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// The configuration for a built-in load balancing policy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderLocalityLbPoliciesPolicy {
    /// The name of a locality load balancer policy to be used. The value
    /// should be one of the predefined ones as supported by localityLbPolicy,
    /// although at the moment only ROUND_ROBIN is supported.
    /// This field should only be populated when the customPolicy field is not
    /// used.
    /// Note that specifying the same policy more than once for a backend is
    /// not a valid configuration and will be rejected.
    /// The possible values are:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// This field denotes the logging options for the load balancer traffic served by this backend service.
/// If logging is enabled, logs will be exported to Stackdriver.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderLogConfig {
    /// Whether to enable logging for the load balancer traffic served by this backend service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// This field can only be specified if logging is enabled for this backend service. The value of
    /// the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
    /// where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
    /// The default value is 1.0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleRate")]
    pub sample_rate: Option<f64>,
}

/// Settings controlling eviction of unhealthy hosts from the load balancing pool.
/// Applicable backend service types can be a global backend service with the
/// loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL_MANAGED.
/// From version 6.0.
/// Default values are enforce by GCP without providing them.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderOutlierDetection {
    /// The base time that a host is ejected for. The real time is equal to the base
    /// time multiplied by the number of times the host has been ejected. Defaults to
    /// 30000ms or 30s.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseEjectionTime")]
    pub base_ejection_time: Option<BackendServiceForProviderOutlierDetectionBaseEjectionTime>,
    /// Number of errors before a host is ejected from the connection pool. When the
    /// backend host is accessed over HTTP, a 5xx return code qualifies as an error.
    /// Defaults to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consecutiveErrors")]
    pub consecutive_errors: Option<f64>,
    /// The number of consecutive gateway failures (502, 503, 504 status or connection
    /// errors that are mapped to one of those status codes) before a consecutive
    /// gateway failure ejection occurs. Defaults to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consecutiveGatewayFailure")]
    pub consecutive_gateway_failure: Option<f64>,
    /// The percentage chance that a host will be actually ejected when an outlier
    /// status is detected through consecutive 5xx. This setting can be used to disable
    /// ejection or to ramp it up slowly. Defaults to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingConsecutiveErrors")]
    pub enforcing_consecutive_errors: Option<f64>,
    /// The percentage chance that a host will be actually ejected when an outlier
    /// status is detected through consecutive gateway failures. This setting can be
    /// used to disable ejection or to ramp it up slowly. Defaults to 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingConsecutiveGatewayFailure")]
    pub enforcing_consecutive_gateway_failure: Option<f64>,
    /// The percentage chance that a host will be actually ejected when an outlier
    /// status is detected through success rate statistics. This setting can be used to
    /// disable ejection or to ramp it up slowly. Defaults to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingSuccessRate")]
    pub enforcing_success_rate: Option<f64>,
    /// Time interval between ejection sweep analysis. This can result in both new
    /// ejections as well as hosts being returned to service. Defaults to 10 seconds.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<BackendServiceForProviderOutlierDetectionInterval>,
    /// Maximum percentage of hosts in the load balancing pool for the backend service
    /// that can be ejected. Defaults to 10%.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxEjectionPercent")]
    pub max_ejection_percent: Option<f64>,
    /// The number of hosts in a cluster that must have enough request volume to detect
    /// success rate outliers. If the number of hosts is less than this setting, outlier
    /// detection via success rate statistics is not performed for any host in the
    /// cluster. Defaults to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateMinimumHosts")]
    pub success_rate_minimum_hosts: Option<f64>,
    /// The minimum number of total requests that must be collected in one interval (as
    /// defined by the interval duration above) to include this host in success rate
    /// based outlier detection. If the volume is lower than this setting, outlier
    /// detection via success rate statistics is not performed for that host. Defaults
    /// to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateRequestVolume")]
    pub success_rate_request_volume: Option<f64>,
    /// This factor is used to determine the ejection threshold for success rate outlier
    /// ejection. The ejection threshold is the difference between the mean success
    /// rate, and the product of this factor and the standard deviation of the mean
    /// success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
    /// by a thousand to get a double. That is, if the desired factor is 1.9, the
    /// runtime value should be 1900. Defaults to 1900.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateStdevFactor")]
    pub success_rate_stdev_factor: Option<f64>,
}

/// The base time that a host is ejected for. The real time is equal to the base
/// time multiplied by the number of times the host has been ejected. Defaults to
/// 30000ms or 30s.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderOutlierDetectionBaseEjectionTime {
    /// Span of time that's a fraction of a second at nanosecond
    /// resolution. Durations less than one second are represented
    /// with a 0 seconds field and a positive nanos field. Must
    /// be from 0 to 999,999,999 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<f64>,
    /// Span of time at a resolution of a second.
    /// Must be from 0 to 315,576,000,000 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<f64>,
}

/// Time interval between ejection sweep analysis. This can result in both new
/// ejections as well as hosts being returned to service. Defaults to 10 seconds.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderOutlierDetectionInterval {
    /// Span of time that's a fraction of a second at nanosecond
    /// resolution. Durations less than one second are represented
    /// with a 0 seconds field and a positive nanos field. Must
    /// be from 0 to 999,999,999 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<f64>,
    /// Span of time at a resolution of a second.
    /// Must be from 0 to 315,576,000,000 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<f64>,
}

/// The security settings that apply to this backend service. This field is applicable to either
/// a regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and
/// load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
/// load_balancing_scheme set to INTERNAL_SELF_MANAGED.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderSecuritySettings {
    /// The configuration needed to generate a signature for access to private storage buckets that support AWS's Signature Version 4 for authentication.
    /// Allowed only for INTERNET_IP_PORT and INTERNET_FQDN_PORT NEG backends.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsV4Authentication")]
    pub aws_v4_authentication: Option<BackendServiceForProviderSecuritySettingsAwsV4Authentication>,
    /// ClientTlsPolicy is a resource that specifies how a client should authenticate
    /// connections to backends of a service. This resource itself does not affect
    /// configuration unless it is attached to a backend service resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTlsPolicy")]
    pub client_tls_policy: Option<String>,
    /// A list of alternate names to verify the subject identity in the certificate.
    /// If specified, the client will verify that the server certificate's subject
    /// alt name matches one of the specified values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAltNames")]
    pub subject_alt_names: Option<Vec<String>>,
}

/// The configuration needed to generate a signature for access to private storage buckets that support AWS's Signature Version 4 for authentication.
/// Allowed only for INTERNET_IP_PORT and INTERNET_FQDN_PORT NEG backends.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderSecuritySettingsAwsV4Authentication {
    /// The identifier of an access key used for s3 bucket authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<String>,
    /// The access key used for s3 bucket authentication.
    /// Required for updating or creating a backend that uses AWS v4 signature authentication, but will not be returned as part of the configuration when queried with a REST API GET request.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeySecretRef")]
    pub access_key_secret_ref: Option<BackendServiceForProviderSecuritySettingsAwsV4AuthenticationAccessKeySecretRef>,
    /// The optional version identifier for the access key. You can use this to keep track of different iterations of your access key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyVersion")]
    pub access_key_version: Option<String>,
    /// The name of the cloud region of your origin. This is a free-form field with the name of the region your cloud uses to host your origin.
    /// For example, "us-east-1" for AWS or "us-ashburn-1" for OCI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "originRegion")]
    pub origin_region: Option<String>,
}

/// The access key used for s3 bucket authentication.
/// Required for updating or creating a backend that uses AWS v4 signature authentication, but will not be returned as part of the configuration when queried with a REST API GET request.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceForProviderSecuritySettingsAwsV4AuthenticationAccessKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProvider {
    /// Lifetime of cookies in seconds if session_affinity is
    /// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
    /// only until the end of the browser session (or equivalent). The
    /// maximum allowed value for TTL is one day.
    /// When the load balancing scheme is INTERNAL, this field is not used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "affinityCookieTtlSec")]
    pub affinity_cookie_ttl_sec: Option<f64>,
    /// The set of backends that serve this BackendService.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backend: Option<Vec<BackendServiceInitProviderBackend>>,
    /// Cloud CDN configuration for this BackendService.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdnPolicy")]
    pub cdn_policy: Option<BackendServiceInitProviderCdnPolicy>,
    /// Settings controlling the volume of connections to a backend service. This field
    /// is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "circuitBreakers")]
    pub circuit_breakers: Option<BackendServiceInitProviderCircuitBreakers>,
    /// Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
    /// Possible values are: AUTOMATIC, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionMode")]
    pub compression_mode: Option<String>,
    /// Time for which instance will be drained (not accept new
    /// connections, but still work to finish started).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionDrainingTimeoutSec")]
    pub connection_draining_timeout_sec: Option<f64>,
    /// Consistent Hash-based load balancing can be used to provide soft session
    /// affinity based on HTTP headers, cookies or other properties. This load balancing
    /// policy is applicable only for HTTP connections. The affinity to a particular
    /// destination host will be lost when one or more hosts are added/removed from the
    /// destination service. This field specifies parameters that control consistent
    /// hashing. This field only applies if the load_balancing_scheme is set to
    /// INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
    /// set to MAGLEV or RING_HASH.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consistentHash")]
    pub consistent_hash: Option<BackendServiceInitProviderConsistentHash>,
    /// Headers that the HTTP/S load balancer should add to proxied
    /// requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRequestHeaders")]
    pub custom_request_headers: Option<Vec<String>>,
    /// Headers that the HTTP/S load balancer should add to proxied
    /// responses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customResponseHeaders")]
    pub custom_response_headers: Option<Vec<String>>,
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The resource URL for the edge security policy associated with this backend service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "edgeSecurityPolicy")]
    pub edge_security_policy: Option<String>,
    /// If true, enable Cloud CDN for this BackendService.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCdn")]
    pub enable_cdn: Option<bool>,
    /// The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
    /// for health checking this BackendService. Currently at most one health
    /// check can be specified.
    /// A health check must be specified unless the backend service uses an internet
    /// or serverless NEG as a backend.
    /// For internal load balancing, a URL to a HealthCheck resource must be specified instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecks")]
    pub health_checks: Option<Vec<String>>,
    /// References to HealthCheck in compute to populate healthChecks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecksRefs")]
    pub health_checks_refs: Option<Vec<BackendServiceInitProviderHealthChecksRefs>>,
    /// Selector for a list of HealthCheck in compute to populate healthChecks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecksSelector")]
    pub health_checks_selector: Option<BackendServiceInitProviderHealthChecksSelector>,
    /// Settings for enabling Cloud Identity Aware Proxy
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iap: Option<BackendServiceInitProviderIap>,
    /// Indicates whether the backend service will be used with internal or
    /// external load balancing. A backend service created for one type of
    /// load balancing cannot be used with the other. For more information, refer to
    /// Choosing a load balancer.
    /// Default value is EXTERNAL.
    /// Possible values are: EXTERNAL, INTERNAL_SELF_MANAGED, INTERNAL_MANAGED, EXTERNAL_MANAGED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancingScheme")]
    pub load_balancing_scheme: Option<String>,
    /// A list of locality load balancing policies to be used in order of
    /// preference. Either the policy or the customPolicy field should be set.
    /// Overrides any value set in the localityLbPolicy field.
    /// localityLbPolicies is only supported when the BackendService is referenced
    /// by a URL Map that is referenced by a target gRPC proxy that has the
    /// validateForProxyless field set to true.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localityLbPolicies")]
    pub locality_lb_policies: Option<Vec<BackendServiceInitProviderLocalityLbPolicies>>,
    /// The load balancing algorithm used within the scope of the locality.
    /// The possible values are:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localityLbPolicy")]
    pub locality_lb_policy: Option<String>,
    /// This field denotes the logging options for the load balancer traffic served by this backend service.
    /// If logging is enabled, logs will be exported to Stackdriver.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logConfig")]
    pub log_config: Option<BackendServiceInitProviderLogConfig>,
    /// Settings controlling eviction of unhealthy hosts from the load balancing pool.
    /// Applicable backend service types can be a global backend service with the
    /// loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL_MANAGED.
    /// From version 6.0.
    /// Default values are enforce by GCP without providing them.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlierDetection")]
    pub outlier_detection: Option<BackendServiceInitProviderOutlierDetection>,
    /// Name of backend port. The same name should appear in the instance
    /// groups referenced by this service. Required when the load balancing
    /// scheme is EXTERNAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portName")]
    pub port_name: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The protocol this BackendService uses to communicate with backends.
    /// The default is HTTP. NOTE: HTTP2 is only valid for beta HTTP/2 load balancer
    /// types and may result in errors if used with the GA API. NOTE: With protocol “UNSPECIFIED”,
    /// the backend service can be used by Layer 4 Internal Load Balancing or Network Load Balancing
    /// with TCP/UDP/L3_DEFAULT Forwarding Rule protocol.
    /// Possible values are: HTTP, HTTPS, HTTP2, TCP, SSL, GRPC, UNSPECIFIED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// The security policy associated with this backend service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityPolicy")]
    pub security_policy: Option<String>,
    /// The security settings that apply to this backend service. This field is applicable to either
    /// a regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and
    /// load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
    /// load_balancing_scheme set to INTERNAL_SELF_MANAGED.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securitySettings")]
    pub security_settings: Option<BackendServiceInitProviderSecuritySettings>,
    /// URL to networkservices.ServiceLbPolicy resource.
    /// Can only be set if load balancing scheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED or INTERNAL_SELF_MANAGED and the scope is global.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceLbPolicy")]
    pub service_lb_policy: Option<String>,
    /// Type of session affinity to use. The default is NONE. Session affinity is
    /// not applicable if the protocol is UDP.
    /// Possible values are: NONE, CLIENT_IP, CLIENT_IP_PORT_PROTO, CLIENT_IP_PROTO, GENERATED_COOKIE, HEADER_FIELD, HTTP_COOKIE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinity")]
    pub session_affinity: Option<String>,
    /// The backend service timeout has a different meaning depending on the type of load balancer.
    /// For more information see, Backend service settings.
    /// The default is 30 seconds.
    /// The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSec")]
    pub timeout_sec: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderBackend {
    /// Specifies the balancing mode for this backend.
    /// For global HTTP(S) or TCP/SSL load balancing, the default is
    /// UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S))
    /// and CONNECTION (for TCP/SSL).
    /// See the Backend Services Overview
    /// for an explanation of load balancing modes.
    /// From version 6.0.0 default value will be UTILIZATION to match default GCP value.
    /// Default value is UTILIZATION.
    /// Possible values are: UTILIZATION, RATE, CONNECTION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "balancingMode")]
    pub balancing_mode: Option<String>,
    /// A multiplier applied to the group's maximum servicing capacity
    /// (based on UTILIZATION, RATE or CONNECTION).
    /// Default value is 1, which means the group will serve up to 100%
    /// of its configured capacity (depending on balancingMode). A
    /// setting of 0 means the group is completely drained, offering
    /// 0% of its available Capacity. Valid range is [0.0,1.0].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityScaler")]
    pub capacity_scaler: Option<f64>,
    /// An optional description of this resource.
    /// Provide this property when you create the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The fully-qualified URL of an Instance Group or Network Endpoint
    /// Group resource. In case of instance group this defines the list
    /// of instances that serve traffic. Member virtual machine
    /// instances from each instance group must live in the same zone as
    /// the instance group itself. No two backends in a backend service
    /// are allowed to use same Instance Group resource.
    /// For Network Endpoint Groups this defines list of endpoints. All
    /// endpoints of Network Endpoint Group must be hosted on instances
    /// located in the same zone as the Network Endpoint Group.
    /// Backend services cannot mix Instance Group and
    /// Network Endpoint Group backends.
    /// Note that you must specify an Instance Group or Network Endpoint
    /// Group resource using the fully-qualified URL, rather than a
    /// partial URL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// Reference to a InstanceGroupManager in compute to populate group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupRef")]
    pub group_ref: Option<BackendServiceInitProviderBackendGroupRef>,
    /// Selector for a InstanceGroupManager in compute to populate group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupSelector")]
    pub group_selector: Option<BackendServiceInitProviderBackendGroupSelector>,
    /// The max number of simultaneous connections for the group. Can
    /// be used with either CONNECTION or UTILIZATION balancing modes.
    /// For CONNECTION mode, either maxConnections or one
    /// of maxConnectionsPerInstance or maxConnectionsPerEndpoint,
    /// as appropriate for group type, must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    pub max_connections: Option<f64>,
    /// The max number of simultaneous connections that a single backend
    /// network endpoint can handle. This is used to calculate the
    /// capacity of the group. Can be used in either CONNECTION or
    /// UTILIZATION balancing modes.
    /// For CONNECTION mode, either
    /// maxConnections or maxConnectionsPerEndpoint must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnectionsPerEndpoint")]
    pub max_connections_per_endpoint: Option<f64>,
    /// The max number of simultaneous connections that a single
    /// backend instance can handle. This is used to calculate the
    /// capacity of the group. Can be used in either CONNECTION or
    /// UTILIZATION balancing modes.
    /// For CONNECTION mode, either maxConnections or
    /// maxConnectionsPerInstance must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnectionsPerInstance")]
    pub max_connections_per_instance: Option<f64>,
    /// The max requests per second (RPS) of the group.
    /// Can be used with either RATE or UTILIZATION balancing modes,
    /// but required if RATE mode. For RATE mode, either maxRate or one
    /// of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
    /// group type, must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRate")]
    pub max_rate: Option<f64>,
    /// The max requests per second (RPS) that a single backend network
    /// endpoint can handle. This is used to calculate the capacity of
    /// the group. Can be used in either balancing mode. For RATE mode,
    /// either maxRate or maxRatePerEndpoint must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRatePerEndpoint")]
    pub max_rate_per_endpoint: Option<f64>,
    /// The max requests per second (RPS) that a single backend
    /// instance can handle. This is used to calculate the capacity of
    /// the group. Can be used in either balancing mode. For RATE mode,
    /// either maxRate or maxRatePerInstance must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRatePerInstance")]
    pub max_rate_per_instance: Option<f64>,
    /// Used when balancingMode is UTILIZATION. This ratio defines the
    /// CPU utilization target for the group. Valid range is [0.0, 1.0].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUtilization")]
    pub max_utilization: Option<f64>,
}

/// Reference to a InstanceGroupManager in compute to populate group.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderBackendGroupRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendServiceInitProviderBackendGroupRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderBackendGroupRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendServiceInitProviderBackendGroupRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendServiceInitProviderBackendGroupRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceInitProviderBackendGroupRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceInitProviderBackendGroupRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a InstanceGroupManager in compute to populate group.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderBackendGroupSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendServiceInitProviderBackendGroupSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderBackendGroupSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendServiceInitProviderBackendGroupSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendServiceInitProviderBackendGroupSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceInitProviderBackendGroupSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceInitProviderBackendGroupSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Cloud CDN configuration for this BackendService.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderCdnPolicy {
    /// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified.
    /// The cache is bypassed for all cdnPolicy.cacheMode settings.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bypassCacheOnRequestHeaders")]
    pub bypass_cache_on_request_headers: Option<Vec<BackendServiceInitProviderCdnPolicyBypassCacheOnRequestHeaders>>,
    /// The CacheKeyPolicy for this CdnPolicy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheKeyPolicy")]
    pub cache_key_policy: Option<BackendServiceInitProviderCdnPolicyCacheKeyPolicy>,
    /// Specifies the cache setting for all responses from this backend.
    /// The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC
    /// Possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL, CACHE_ALL_STATIC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheMode")]
    pub cache_mode: Option<String>,
    /// Specifies the maximum allowed TTL for cached content served by this origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTtl")]
    pub client_ttl: Option<f64>,
    /// Specifies the default TTL for cached content served by this origin for responses
    /// that do not have an existing valid TTL (max-age or s-max-age).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTtl")]
    pub default_ttl: Option<f64>,
    /// Specifies the maximum allowed TTL for cached content served by this origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTtl")]
    pub max_ttl: Option<f64>,
    /// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCaching")]
    pub negative_caching: Option<bool>,
    /// Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
    /// Omitting the policy and leaving negativeCaching enabled will use Cloud CDN's default cache TTLs.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCachingPolicy")]
    pub negative_caching_policy: Option<Vec<BackendServiceInitProviderCdnPolicyNegativeCachingPolicy>>,
    /// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serveWhileStale")]
    pub serve_while_stale: Option<f64>,
    /// Maximum number of seconds the response to a signed URL request
    /// will be considered fresh, defaults to 1hr (3600s). After this
    /// time period, the response will be revalidated before
    /// being served.
    /// When serving responses to signed URL requests, Cloud CDN will
    /// internally behave as though all responses from this backend had a
    /// "Cache-Control: public, max-age=[TTL]" header, regardless of any
    /// existing Cache-Control header. The actual headers served in
    /// responses will not be altered.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signedUrlCacheMaxAgeSec")]
    pub signed_url_cache_max_age_sec: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderCdnPolicyBypassCacheOnRequestHeaders {
    /// The header field name to match on when bypassing cache. Values are case-insensitive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

/// The CacheKeyPolicy for this CdnPolicy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderCdnPolicyCacheKeyPolicy {
    /// If true requests to different hosts will be cached separately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeHost")]
    pub include_host: Option<bool>,
    /// Allows HTTP request headers (by name) to be used in the
    /// cache key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeHttpHeaders")]
    pub include_http_headers: Option<Vec<String>>,
    /// Names of cookies to include in cache keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeNamedCookies")]
    pub include_named_cookies: Option<Vec<String>>,
    /// If true, http and https requests will be cached separately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeProtocol")]
    pub include_protocol: Option<bool>,
    /// If true, include query string parameters in the cache key
    /// according to query_string_whitelist and
    /// query_string_blacklist. If neither is set, the entire query
    /// string will be included.
    /// If false, the query string will be excluded from the cache
    /// key entirely.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeQueryString")]
    pub include_query_string: Option<bool>,
    /// Names of query string parameters to exclude in cache keys.
    /// All other parameters will be included. Either specify
    /// query_string_whitelist or query_string_blacklist, not both.
    /// '&' and '=' will be percent encoded and not treated as
    /// delimiters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringBlacklist")]
    pub query_string_blacklist: Option<Vec<String>>,
    /// Names of query string parameters to include in cache keys.
    /// All other parameters will be excluded. Either specify
    /// query_string_whitelist or query_string_blacklist, not both.
    /// '&' and '=' will be percent encoded and not treated as
    /// delimiters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringWhitelist")]
    pub query_string_whitelist: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderCdnPolicyNegativeCachingPolicy {
    /// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501
    /// can be specified as values, and you cannot specify a status code more than once.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<f64>,
    /// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
    /// (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<f64>,
}

/// Settings controlling the volume of connections to a backend service. This field
/// is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderCircuitBreakers {
    /// The maximum number of connections to the backend cluster.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    pub max_connections: Option<f64>,
    /// The maximum number of pending requests to the backend cluster.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    pub max_pending_requests: Option<f64>,
    /// The maximum number of parallel requests to the backend cluster.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequests")]
    pub max_requests: Option<f64>,
    /// Maximum requests for a single backend connection. This parameter
    /// is respected by both the HTTP/1.1 and HTTP/2 implementations. If
    /// not specified, there is no limit. Setting this parameter to 1
    /// will effectively disable keep alive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestsPerConnection")]
    pub max_requests_per_connection: Option<f64>,
    /// The maximum number of parallel retries to the backend cluster.
    /// Defaults to 3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    pub max_retries: Option<f64>,
}

/// Consistent Hash-based load balancing can be used to provide soft session
/// affinity based on HTTP headers, cookies or other properties. This load balancing
/// policy is applicable only for HTTP connections. The affinity to a particular
/// destination host will be lost when one or more hosts are added/removed from the
/// destination service. This field specifies parameters that control consistent
/// hashing. This field only applies if the load_balancing_scheme is set to
/// INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
/// set to MAGLEV or RING_HASH.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderConsistentHash {
    /// Hash is based on HTTP Cookie. This field describes a HTTP cookie
    /// that will be used as the hash key for the consistent hash load
    /// balancer. If the cookie is not present, it will be generated.
    /// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpCookie")]
    pub http_cookie: Option<BackendServiceInitProviderConsistentHashHttpCookie>,
    /// The hash based on the value of the specified header field.
    /// This field is applicable if the sessionAffinity is set to HEADER_FIELD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaderName")]
    pub http_header_name: Option<String>,
    /// The minimum number of virtual nodes to use for the hash ring.
    /// Larger ring sizes result in more granular load
    /// distributions. If the number of hosts in the load balancing pool
    /// is larger than the ring size, each host will be assigned a single
    /// virtual node.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumRingSize")]
    pub minimum_ring_size: Option<f64>,
}

/// Hash is based on HTTP Cookie. This field describes a HTTP cookie
/// that will be used as the hash key for the consistent hash load
/// balancer. If the cookie is not present, it will be generated.
/// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderConsistentHashHttpCookie {
    /// The name of a locality load balancer policy to be used. The value
    /// should be one of the predefined ones as supported by localityLbPolicy,
    /// although at the moment only ROUND_ROBIN is supported.
    /// This field should only be populated when the customPolicy field is not
    /// used.
    /// Note that specifying the same policy more than once for a backend is
    /// not a valid configuration and will be rejected.
    /// The possible values are:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Path to set for the cookie.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
    /// (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<BackendServiceInitProviderConsistentHashHttpCookieTtl>,
}

/// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
/// (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderConsistentHashHttpCookieTtl {
    /// Span of time that's a fraction of a second at nanosecond
    /// resolution. Durations less than one second are represented
    /// with a 0 seconds field and a positive nanos field. Must
    /// be from 0 to 999,999,999 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<f64>,
    /// Span of time at a resolution of a second.
    /// Must be from 0 to 315,576,000,000 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<f64>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderHealthChecksRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendServiceInitProviderHealthChecksRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderHealthChecksRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendServiceInitProviderHealthChecksRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendServiceInitProviderHealthChecksRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceInitProviderHealthChecksRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceInitProviderHealthChecksRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of HealthCheck in compute to populate healthChecks.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderHealthChecksSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendServiceInitProviderHealthChecksSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderHealthChecksSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendServiceInitProviderHealthChecksSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendServiceInitProviderHealthChecksSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceInitProviderHealthChecksSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceInitProviderHealthChecksSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Settings for enabling Cloud Identity Aware Proxy
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderIap {
    /// OAuth2 Client ID for IAP
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauth2ClientId")]
    pub oauth2_client_id: Option<String>,
    /// OAuth2 Client Secret for IAP
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(rename = "oauth2ClientSecretSecretRef")]
    pub oauth2_client_secret_secret_ref: BackendServiceInitProviderIapOauth2ClientSecretSecretRef,
}

/// OAuth2 Client Secret for IAP
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderIapOauth2ClientSecretSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderLocalityLbPolicies {
    /// The configuration for a custom policy implemented by the user and
    /// deployed with the client.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customPolicy")]
    pub custom_policy: Option<BackendServiceInitProviderLocalityLbPoliciesCustomPolicy>,
    /// The configuration for a built-in load balancing policy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendServiceInitProviderLocalityLbPoliciesPolicy>,
}

/// The configuration for a custom policy implemented by the user and
/// deployed with the client.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderLocalityLbPoliciesCustomPolicy {
    /// An optional, arbitrary JSON object with configuration data, understood
    /// by a locally installed custom policy implementation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<String>,
    /// The name of a locality load balancer policy to be used. The value
    /// should be one of the predefined ones as supported by localityLbPolicy,
    /// although at the moment only ROUND_ROBIN is supported.
    /// This field should only be populated when the customPolicy field is not
    /// used.
    /// Note that specifying the same policy more than once for a backend is
    /// not a valid configuration and will be rejected.
    /// The possible values are:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// The configuration for a built-in load balancing policy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderLocalityLbPoliciesPolicy {
    /// The name of a locality load balancer policy to be used. The value
    /// should be one of the predefined ones as supported by localityLbPolicy,
    /// although at the moment only ROUND_ROBIN is supported.
    /// This field should only be populated when the customPolicy field is not
    /// used.
    /// Note that specifying the same policy more than once for a backend is
    /// not a valid configuration and will be rejected.
    /// The possible values are:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// This field denotes the logging options for the load balancer traffic served by this backend service.
/// If logging is enabled, logs will be exported to Stackdriver.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderLogConfig {
    /// Whether to enable logging for the load balancer traffic served by this backend service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// This field can only be specified if logging is enabled for this backend service. The value of
    /// the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
    /// where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
    /// The default value is 1.0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleRate")]
    pub sample_rate: Option<f64>,
}

/// Settings controlling eviction of unhealthy hosts from the load balancing pool.
/// Applicable backend service types can be a global backend service with the
/// loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL_MANAGED.
/// From version 6.0.
/// Default values are enforce by GCP without providing them.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderOutlierDetection {
    /// The base time that a host is ejected for. The real time is equal to the base
    /// time multiplied by the number of times the host has been ejected. Defaults to
    /// 30000ms or 30s.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseEjectionTime")]
    pub base_ejection_time: Option<BackendServiceInitProviderOutlierDetectionBaseEjectionTime>,
    /// Number of errors before a host is ejected from the connection pool. When the
    /// backend host is accessed over HTTP, a 5xx return code qualifies as an error.
    /// Defaults to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consecutiveErrors")]
    pub consecutive_errors: Option<f64>,
    /// The number of consecutive gateway failures (502, 503, 504 status or connection
    /// errors that are mapped to one of those status codes) before a consecutive
    /// gateway failure ejection occurs. Defaults to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consecutiveGatewayFailure")]
    pub consecutive_gateway_failure: Option<f64>,
    /// The percentage chance that a host will be actually ejected when an outlier
    /// status is detected through consecutive 5xx. This setting can be used to disable
    /// ejection or to ramp it up slowly. Defaults to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingConsecutiveErrors")]
    pub enforcing_consecutive_errors: Option<f64>,
    /// The percentage chance that a host will be actually ejected when an outlier
    /// status is detected through consecutive gateway failures. This setting can be
    /// used to disable ejection or to ramp it up slowly. Defaults to 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingConsecutiveGatewayFailure")]
    pub enforcing_consecutive_gateway_failure: Option<f64>,
    /// The percentage chance that a host will be actually ejected when an outlier
    /// status is detected through success rate statistics. This setting can be used to
    /// disable ejection or to ramp it up slowly. Defaults to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingSuccessRate")]
    pub enforcing_success_rate: Option<f64>,
    /// Time interval between ejection sweep analysis. This can result in both new
    /// ejections as well as hosts being returned to service. Defaults to 10 seconds.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<BackendServiceInitProviderOutlierDetectionInterval>,
    /// Maximum percentage of hosts in the load balancing pool for the backend service
    /// that can be ejected. Defaults to 10%.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxEjectionPercent")]
    pub max_ejection_percent: Option<f64>,
    /// The number of hosts in a cluster that must have enough request volume to detect
    /// success rate outliers. If the number of hosts is less than this setting, outlier
    /// detection via success rate statistics is not performed for any host in the
    /// cluster. Defaults to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateMinimumHosts")]
    pub success_rate_minimum_hosts: Option<f64>,
    /// The minimum number of total requests that must be collected in one interval (as
    /// defined by the interval duration above) to include this host in success rate
    /// based outlier detection. If the volume is lower than this setting, outlier
    /// detection via success rate statistics is not performed for that host. Defaults
    /// to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateRequestVolume")]
    pub success_rate_request_volume: Option<f64>,
    /// This factor is used to determine the ejection threshold for success rate outlier
    /// ejection. The ejection threshold is the difference between the mean success
    /// rate, and the product of this factor and the standard deviation of the mean
    /// success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
    /// by a thousand to get a double. That is, if the desired factor is 1.9, the
    /// runtime value should be 1900. Defaults to 1900.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateStdevFactor")]
    pub success_rate_stdev_factor: Option<f64>,
}

/// The base time that a host is ejected for. The real time is equal to the base
/// time multiplied by the number of times the host has been ejected. Defaults to
/// 30000ms or 30s.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderOutlierDetectionBaseEjectionTime {
    /// Span of time that's a fraction of a second at nanosecond
    /// resolution. Durations less than one second are represented
    /// with a 0 seconds field and a positive nanos field. Must
    /// be from 0 to 999,999,999 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<f64>,
    /// Span of time at a resolution of a second.
    /// Must be from 0 to 315,576,000,000 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<f64>,
}

/// Time interval between ejection sweep analysis. This can result in both new
/// ejections as well as hosts being returned to service. Defaults to 10 seconds.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderOutlierDetectionInterval {
    /// Span of time that's a fraction of a second at nanosecond
    /// resolution. Durations less than one second are represented
    /// with a 0 seconds field and a positive nanos field. Must
    /// be from 0 to 999,999,999 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<f64>,
    /// Span of time at a resolution of a second.
    /// Must be from 0 to 315,576,000,000 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<f64>,
}

/// The security settings that apply to this backend service. This field is applicable to either
/// a regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and
/// load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
/// load_balancing_scheme set to INTERNAL_SELF_MANAGED.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderSecuritySettings {
    /// The configuration needed to generate a signature for access to private storage buckets that support AWS's Signature Version 4 for authentication.
    /// Allowed only for INTERNET_IP_PORT and INTERNET_FQDN_PORT NEG backends.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsV4Authentication")]
    pub aws_v4_authentication: Option<BackendServiceInitProviderSecuritySettingsAwsV4Authentication>,
    /// ClientTlsPolicy is a resource that specifies how a client should authenticate
    /// connections to backends of a service. This resource itself does not affect
    /// configuration unless it is attached to a backend service resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTlsPolicy")]
    pub client_tls_policy: Option<String>,
    /// A list of alternate names to verify the subject identity in the certificate.
    /// If specified, the client will verify that the server certificate's subject
    /// alt name matches one of the specified values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAltNames")]
    pub subject_alt_names: Option<Vec<String>>,
}

/// The configuration needed to generate a signature for access to private storage buckets that support AWS's Signature Version 4 for authentication.
/// Allowed only for INTERNET_IP_PORT and INTERNET_FQDN_PORT NEG backends.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderSecuritySettingsAwsV4Authentication {
    /// The identifier of an access key used for s3 bucket authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<String>,
    /// The access key used for s3 bucket authentication.
    /// Required for updating or creating a backend that uses AWS v4 signature authentication, but will not be returned as part of the configuration when queried with a REST API GET request.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeySecretRef")]
    pub access_key_secret_ref: Option<BackendServiceInitProviderSecuritySettingsAwsV4AuthenticationAccessKeySecretRef>,
    /// The optional version identifier for the access key. You can use this to keep track of different iterations of your access key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyVersion")]
    pub access_key_version: Option<String>,
    /// The name of the cloud region of your origin. This is a free-form field with the name of the region your cloud uses to host your origin.
    /// For example, "us-east-1" for AWS or "us-ashburn-1" for OCI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "originRegion")]
    pub origin_region: Option<String>,
}

/// The access key used for s3 bucket authentication.
/// Required for updating or creating a backend that uses AWS v4 signature authentication, but will not be returned as part of the configuration when queried with a REST API GET request.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceInitProviderSecuritySettingsAwsV4AuthenticationAccessKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendServiceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendServiceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendServiceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServiceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServicePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<BackendServicePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BackendServicePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServicePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendServicePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServicePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendServicePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendServicePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServicePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendServicePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServicePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// BackendServiceStatus defines the observed state of BackendService.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<BackendServiceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProvider {
    /// Lifetime of cookies in seconds if session_affinity is
    /// GENERATED_COOKIE. If set to 0, the cookie is non-persistent and lasts
    /// only until the end of the browser session (or equivalent). The
    /// maximum allowed value for TTL is one day.
    /// When the load balancing scheme is INTERNAL, this field is not used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "affinityCookieTtlSec")]
    pub affinity_cookie_ttl_sec: Option<f64>,
    /// The set of backends that serve this BackendService.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub backend: Option<Vec<BackendServiceStatusAtProviderBackend>>,
    /// Cloud CDN configuration for this BackendService.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdnPolicy")]
    pub cdn_policy: Option<BackendServiceStatusAtProviderCdnPolicy>,
    /// Settings controlling the volume of connections to a backend service. This field
    /// is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "circuitBreakers")]
    pub circuit_breakers: Option<BackendServiceStatusAtProviderCircuitBreakers>,
    /// Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
    /// Possible values are: AUTOMATIC, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionMode")]
    pub compression_mode: Option<String>,
    /// Time for which instance will be drained (not accept new
    /// connections, but still work to finish started).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionDrainingTimeoutSec")]
    pub connection_draining_timeout_sec: Option<f64>,
    /// Consistent Hash-based load balancing can be used to provide soft session
    /// affinity based on HTTP headers, cookies or other properties. This load balancing
    /// policy is applicable only for HTTP connections. The affinity to a particular
    /// destination host will be lost when one or more hosts are added/removed from the
    /// destination service. This field specifies parameters that control consistent
    /// hashing. This field only applies if the load_balancing_scheme is set to
    /// INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
    /// set to MAGLEV or RING_HASH.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consistentHash")]
    pub consistent_hash: Option<BackendServiceStatusAtProviderConsistentHash>,
    /// Creation timestamp in RFC3339 text format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTimestamp")]
    pub creation_timestamp: Option<String>,
    /// Headers that the HTTP/S load balancer should add to proxied
    /// requests.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customRequestHeaders")]
    pub custom_request_headers: Option<Vec<String>>,
    /// Headers that the HTTP/S load balancer should add to proxied
    /// responses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customResponseHeaders")]
    pub custom_response_headers: Option<Vec<String>>,
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The resource URL for the edge security policy associated with this backend service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "edgeSecurityPolicy")]
    pub edge_security_policy: Option<String>,
    /// If true, enable Cloud CDN for this BackendService.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCdn")]
    pub enable_cdn: Option<bool>,
    /// Fingerprint of this resource. A hash of the contents stored in this
    /// object. This field is used in optimistic locking.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fingerprint: Option<String>,
    /// The unique identifier for the resource. This identifier is defined by the server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "generatedId")]
    pub generated_id: Option<f64>,
    /// The set of URLs to the HttpHealthCheck or HttpsHealthCheck resource
    /// for health checking this BackendService. Currently at most one health
    /// check can be specified.
    /// A health check must be specified unless the backend service uses an internet
    /// or serverless NEG as a backend.
    /// For internal load balancing, a URL to a HealthCheck resource must be specified instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthChecks")]
    pub health_checks: Option<Vec<String>>,
    /// Settings for enabling Cloud Identity Aware Proxy
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub iap: Option<BackendServiceStatusAtProviderIap>,
    /// an identifier for the resource with format projects/{{project}}/global/backendServices/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Indicates whether the backend service will be used with internal or
    /// external load balancing. A backend service created for one type of
    /// load balancing cannot be used with the other. For more information, refer to
    /// Choosing a load balancer.
    /// Default value is EXTERNAL.
    /// Possible values are: EXTERNAL, INTERNAL_SELF_MANAGED, INTERNAL_MANAGED, EXTERNAL_MANAGED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancingScheme")]
    pub load_balancing_scheme: Option<String>,
    /// A list of locality load balancing policies to be used in order of
    /// preference. Either the policy or the customPolicy field should be set.
    /// Overrides any value set in the localityLbPolicy field.
    /// localityLbPolicies is only supported when the BackendService is referenced
    /// by a URL Map that is referenced by a target gRPC proxy that has the
    /// validateForProxyless field set to true.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localityLbPolicies")]
    pub locality_lb_policies: Option<Vec<BackendServiceStatusAtProviderLocalityLbPolicies>>,
    /// The load balancing algorithm used within the scope of the locality.
    /// The possible values are:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localityLbPolicy")]
    pub locality_lb_policy: Option<String>,
    /// This field denotes the logging options for the load balancer traffic served by this backend service.
    /// If logging is enabled, logs will be exported to Stackdriver.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logConfig")]
    pub log_config: Option<BackendServiceStatusAtProviderLogConfig>,
    /// Settings controlling eviction of unhealthy hosts from the load balancing pool.
    /// Applicable backend service types can be a global backend service with the
    /// loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL_MANAGED.
    /// From version 6.0.
    /// Default values are enforce by GCP without providing them.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outlierDetection")]
    pub outlier_detection: Option<BackendServiceStatusAtProviderOutlierDetection>,
    /// Name of backend port. The same name should appear in the instance
    /// groups referenced by this service. Required when the load balancing
    /// scheme is EXTERNAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portName")]
    pub port_name: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The protocol this BackendService uses to communicate with backends.
    /// The default is HTTP. NOTE: HTTP2 is only valid for beta HTTP/2 load balancer
    /// types and may result in errors if used with the GA API. NOTE: With protocol “UNSPECIFIED”,
    /// the backend service can be used by Layer 4 Internal Load Balancing or Network Load Balancing
    /// with TCP/UDP/L3_DEFAULT Forwarding Rule protocol.
    /// Possible values are: HTTP, HTTPS, HTTP2, TCP, SSL, GRPC, UNSPECIFIED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// The security policy associated with this backend service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityPolicy")]
    pub security_policy: Option<String>,
    /// The security settings that apply to this backend service. This field is applicable to either
    /// a regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and
    /// load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
    /// load_balancing_scheme set to INTERNAL_SELF_MANAGED.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securitySettings")]
    pub security_settings: Option<BackendServiceStatusAtProviderSecuritySettings>,
    /// The URI of the created resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    pub self_link: Option<String>,
    /// URL to networkservices.ServiceLbPolicy resource.
    /// Can only be set if load balancing scheme is EXTERNAL, EXTERNAL_MANAGED, INTERNAL_MANAGED or INTERNAL_SELF_MANAGED and the scope is global.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceLbPolicy")]
    pub service_lb_policy: Option<String>,
    /// Type of session affinity to use. The default is NONE. Session affinity is
    /// not applicable if the protocol is UDP.
    /// Possible values are: NONE, CLIENT_IP, CLIENT_IP_PORT_PROTO, CLIENT_IP_PROTO, GENERATED_COOKIE, HEADER_FIELD, HTTP_COOKIE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionAffinity")]
    pub session_affinity: Option<String>,
    /// The backend service timeout has a different meaning depending on the type of load balancer.
    /// For more information see, Backend service settings.
    /// The default is 30 seconds.
    /// The full range of timeout values allowed goes from 1 through 2,147,483,647 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeoutSec")]
    pub timeout_sec: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderBackend {
    /// Specifies the balancing mode for this backend.
    /// For global HTTP(S) or TCP/SSL load balancing, the default is
    /// UTILIZATION. Valid values are UTILIZATION, RATE (for HTTP(S))
    /// and CONNECTION (for TCP/SSL).
    /// See the Backend Services Overview
    /// for an explanation of load balancing modes.
    /// From version 6.0.0 default value will be UTILIZATION to match default GCP value.
    /// Default value is UTILIZATION.
    /// Possible values are: UTILIZATION, RATE, CONNECTION.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "balancingMode")]
    pub balancing_mode: Option<String>,
    /// A multiplier applied to the group's maximum servicing capacity
    /// (based on UTILIZATION, RATE or CONNECTION).
    /// Default value is 1, which means the group will serve up to 100%
    /// of its configured capacity (depending on balancingMode). A
    /// setting of 0 means the group is completely drained, offering
    /// 0% of its available Capacity. Valid range is [0.0,1.0].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "capacityScaler")]
    pub capacity_scaler: Option<f64>,
    /// An optional description of this resource.
    /// Provide this property when you create the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The fully-qualified URL of an Instance Group or Network Endpoint
    /// Group resource. In case of instance group this defines the list
    /// of instances that serve traffic. Member virtual machine
    /// instances from each instance group must live in the same zone as
    /// the instance group itself. No two backends in a backend service
    /// are allowed to use same Instance Group resource.
    /// For Network Endpoint Groups this defines list of endpoints. All
    /// endpoints of Network Endpoint Group must be hosted on instances
    /// located in the same zone as the Network Endpoint Group.
    /// Backend services cannot mix Instance Group and
    /// Network Endpoint Group backends.
    /// Note that you must specify an Instance Group or Network Endpoint
    /// Group resource using the fully-qualified URL, rather than a
    /// partial URL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub group: Option<String>,
    /// The max number of simultaneous connections for the group. Can
    /// be used with either CONNECTION or UTILIZATION balancing modes.
    /// For CONNECTION mode, either maxConnections or one
    /// of maxConnectionsPerInstance or maxConnectionsPerEndpoint,
    /// as appropriate for group type, must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    pub max_connections: Option<f64>,
    /// The max number of simultaneous connections that a single backend
    /// network endpoint can handle. This is used to calculate the
    /// capacity of the group. Can be used in either CONNECTION or
    /// UTILIZATION balancing modes.
    /// For CONNECTION mode, either
    /// maxConnections or maxConnectionsPerEndpoint must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnectionsPerEndpoint")]
    pub max_connections_per_endpoint: Option<f64>,
    /// The max number of simultaneous connections that a single
    /// backend instance can handle. This is used to calculate the
    /// capacity of the group. Can be used in either CONNECTION or
    /// UTILIZATION balancing modes.
    /// For CONNECTION mode, either maxConnections or
    /// maxConnectionsPerInstance must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnectionsPerInstance")]
    pub max_connections_per_instance: Option<f64>,
    /// The max requests per second (RPS) of the group.
    /// Can be used with either RATE or UTILIZATION balancing modes,
    /// but required if RATE mode. For RATE mode, either maxRate or one
    /// of maxRatePerInstance or maxRatePerEndpoint, as appropriate for
    /// group type, must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRate")]
    pub max_rate: Option<f64>,
    /// The max requests per second (RPS) that a single backend network
    /// endpoint can handle. This is used to calculate the capacity of
    /// the group. Can be used in either balancing mode. For RATE mode,
    /// either maxRate or maxRatePerEndpoint must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRatePerEndpoint")]
    pub max_rate_per_endpoint: Option<f64>,
    /// The max requests per second (RPS) that a single backend
    /// instance can handle. This is used to calculate the capacity of
    /// the group. Can be used in either balancing mode. For RATE mode,
    /// either maxRate or maxRatePerInstance must be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRatePerInstance")]
    pub max_rate_per_instance: Option<f64>,
    /// Used when balancingMode is UTILIZATION. This ratio defines the
    /// CPU utilization target for the group. Valid range is [0.0, 1.0].
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUtilization")]
    pub max_utilization: Option<f64>,
}

/// Cloud CDN configuration for this BackendService.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderCdnPolicy {
    /// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified.
    /// The cache is bypassed for all cdnPolicy.cacheMode settings.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bypassCacheOnRequestHeaders")]
    pub bypass_cache_on_request_headers: Option<Vec<BackendServiceStatusAtProviderCdnPolicyBypassCacheOnRequestHeaders>>,
    /// The CacheKeyPolicy for this CdnPolicy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheKeyPolicy")]
    pub cache_key_policy: Option<BackendServiceStatusAtProviderCdnPolicyCacheKeyPolicy>,
    /// Specifies the cache setting for all responses from this backend.
    /// The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC
    /// Possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL, CACHE_ALL_STATIC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheMode")]
    pub cache_mode: Option<String>,
    /// Specifies the maximum allowed TTL for cached content served by this origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTtl")]
    pub client_ttl: Option<f64>,
    /// Specifies the default TTL for cached content served by this origin for responses
    /// that do not have an existing valid TTL (max-age or s-max-age).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTtl")]
    pub default_ttl: Option<f64>,
    /// Specifies the maximum allowed TTL for cached content served by this origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTtl")]
    pub max_ttl: Option<f64>,
    /// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCaching")]
    pub negative_caching: Option<bool>,
    /// Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
    /// Omitting the policy and leaving negativeCaching enabled will use Cloud CDN's default cache TTLs.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCachingPolicy")]
    pub negative_caching_policy: Option<Vec<BackendServiceStatusAtProviderCdnPolicyNegativeCachingPolicy>>,
    /// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serveWhileStale")]
    pub serve_while_stale: Option<f64>,
    /// Maximum number of seconds the response to a signed URL request
    /// will be considered fresh, defaults to 1hr (3600s). After this
    /// time period, the response will be revalidated before
    /// being served.
    /// When serving responses to signed URL requests, Cloud CDN will
    /// internally behave as though all responses from this backend had a
    /// "Cache-Control: public, max-age=[TTL]" header, regardless of any
    /// existing Cache-Control header. The actual headers served in
    /// responses will not be altered.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signedUrlCacheMaxAgeSec")]
    pub signed_url_cache_max_age_sec: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderCdnPolicyBypassCacheOnRequestHeaders {
    /// The header field name to match on when bypassing cache. Values are case-insensitive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

/// The CacheKeyPolicy for this CdnPolicy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderCdnPolicyCacheKeyPolicy {
    /// If true requests to different hosts will be cached separately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeHost")]
    pub include_host: Option<bool>,
    /// Allows HTTP request headers (by name) to be used in the
    /// cache key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeHttpHeaders")]
    pub include_http_headers: Option<Vec<String>>,
    /// Names of cookies to include in cache keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeNamedCookies")]
    pub include_named_cookies: Option<Vec<String>>,
    /// If true, http and https requests will be cached separately.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeProtocol")]
    pub include_protocol: Option<bool>,
    /// If true, include query string parameters in the cache key
    /// according to query_string_whitelist and
    /// query_string_blacklist. If neither is set, the entire query
    /// string will be included.
    /// If false, the query string will be excluded from the cache
    /// key entirely.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeQueryString")]
    pub include_query_string: Option<bool>,
    /// Names of query string parameters to exclude in cache keys.
    /// All other parameters will be included. Either specify
    /// query_string_whitelist or query_string_blacklist, not both.
    /// '&' and '=' will be percent encoded and not treated as
    /// delimiters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringBlacklist")]
    pub query_string_blacklist: Option<Vec<String>>,
    /// Names of query string parameters to include in cache keys.
    /// All other parameters will be excluded. Either specify
    /// query_string_whitelist or query_string_blacklist, not both.
    /// '&' and '=' will be percent encoded and not treated as
    /// delimiters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringWhitelist")]
    pub query_string_whitelist: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderCdnPolicyNegativeCachingPolicy {
    /// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501
    /// can be specified as values, and you cannot specify a status code more than once.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<f64>,
    /// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
    /// (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<f64>,
}

/// Settings controlling the volume of connections to a backend service. This field
/// is applicable only when the load_balancing_scheme is set to INTERNAL_SELF_MANAGED.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderCircuitBreakers {
    /// The maximum number of connections to the backend cluster.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConnections")]
    pub max_connections: Option<f64>,
    /// The maximum number of pending requests to the backend cluster.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPendingRequests")]
    pub max_pending_requests: Option<f64>,
    /// The maximum number of parallel requests to the backend cluster.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequests")]
    pub max_requests: Option<f64>,
    /// Maximum requests for a single backend connection. This parameter
    /// is respected by both the HTTP/1.1 and HTTP/2 implementations. If
    /// not specified, there is no limit. Setting this parameter to 1
    /// will effectively disable keep alive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRequestsPerConnection")]
    pub max_requests_per_connection: Option<f64>,
    /// The maximum number of parallel retries to the backend cluster.
    /// Defaults to 3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetries")]
    pub max_retries: Option<f64>,
}

/// Consistent Hash-based load balancing can be used to provide soft session
/// affinity based on HTTP headers, cookies or other properties. This load balancing
/// policy is applicable only for HTTP connections. The affinity to a particular
/// destination host will be lost when one or more hosts are added/removed from the
/// destination service. This field specifies parameters that control consistent
/// hashing. This field only applies if the load_balancing_scheme is set to
/// INTERNAL_SELF_MANAGED. This field is only applicable when locality_lb_policy is
/// set to MAGLEV or RING_HASH.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderConsistentHash {
    /// Hash is based on HTTP Cookie. This field describes a HTTP cookie
    /// that will be used as the hash key for the consistent hash load
    /// balancer. If the cookie is not present, it will be generated.
    /// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpCookie")]
    pub http_cookie: Option<BackendServiceStatusAtProviderConsistentHashHttpCookie>,
    /// The hash based on the value of the specified header field.
    /// This field is applicable if the sessionAffinity is set to HEADER_FIELD.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpHeaderName")]
    pub http_header_name: Option<String>,
    /// The minimum number of virtual nodes to use for the hash ring.
    /// Larger ring sizes result in more granular load
    /// distributions. If the number of hosts in the load balancing pool
    /// is larger than the ring size, each host will be assigned a single
    /// virtual node.
    /// Defaults to 1024.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minimumRingSize")]
    pub minimum_ring_size: Option<f64>,
}

/// Hash is based on HTTP Cookie. This field describes a HTTP cookie
/// that will be used as the hash key for the consistent hash load
/// balancer. If the cookie is not present, it will be generated.
/// This field is applicable if the sessionAffinity is set to HTTP_COOKIE.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderConsistentHashHttpCookie {
    /// The name of a locality load balancer policy to be used. The value
    /// should be one of the predefined ones as supported by localityLbPolicy,
    /// although at the moment only ROUND_ROBIN is supported.
    /// This field should only be populated when the customPolicy field is not
    /// used.
    /// Note that specifying the same policy more than once for a backend is
    /// not a valid configuration and will be rejected.
    /// The possible values are:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Path to set for the cookie.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
    /// (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<BackendServiceStatusAtProviderConsistentHashHttpCookieTtl>,
}

/// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
/// (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderConsistentHashHttpCookieTtl {
    /// Span of time that's a fraction of a second at nanosecond
    /// resolution. Durations less than one second are represented
    /// with a 0 seconds field and a positive nanos field. Must
    /// be from 0 to 999,999,999 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<f64>,
    /// Span of time at a resolution of a second.
    /// Must be from 0 to 315,576,000,000 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<f64>,
}

/// Settings for enabling Cloud Identity Aware Proxy
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderIap {
    /// OAuth2 Client ID for IAP
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauth2ClientId")]
    pub oauth2_client_id: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderLocalityLbPolicies {
    /// The configuration for a custom policy implemented by the user and
    /// deployed with the client.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customPolicy")]
    pub custom_policy: Option<BackendServiceStatusAtProviderLocalityLbPoliciesCustomPolicy>,
    /// The configuration for a built-in load balancing policy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendServiceStatusAtProviderLocalityLbPoliciesPolicy>,
}

/// The configuration for a custom policy implemented by the user and
/// deployed with the client.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderLocalityLbPoliciesCustomPolicy {
    /// An optional, arbitrary JSON object with configuration data, understood
    /// by a locally installed custom policy implementation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<String>,
    /// The name of a locality load balancer policy to be used. The value
    /// should be one of the predefined ones as supported by localityLbPolicy,
    /// although at the moment only ROUND_ROBIN is supported.
    /// This field should only be populated when the customPolicy field is not
    /// used.
    /// Note that specifying the same policy more than once for a backend is
    /// not a valid configuration and will be rejected.
    /// The possible values are:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// The configuration for a built-in load balancing policy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderLocalityLbPoliciesPolicy {
    /// The name of a locality load balancer policy to be used. The value
    /// should be one of the predefined ones as supported by localityLbPolicy,
    /// although at the moment only ROUND_ROBIN is supported.
    /// This field should only be populated when the customPolicy field is not
    /// used.
    /// Note that specifying the same policy more than once for a backend is
    /// not a valid configuration and will be rejected.
    /// The possible values are:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// This field denotes the logging options for the load balancer traffic served by this backend service.
/// If logging is enabled, logs will be exported to Stackdriver.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderLogConfig {
    /// Whether to enable logging for the load balancer traffic served by this backend service.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// This field can only be specified if logging is enabled for this backend service. The value of
    /// the field must be in [0, 1]. This configures the sampling rate of requests to the load balancer
    /// where 1.0 means all logged requests are reported and 0.0 means no logged requests are reported.
    /// The default value is 1.0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sampleRate")]
    pub sample_rate: Option<f64>,
}

/// Settings controlling eviction of unhealthy hosts from the load balancing pool.
/// Applicable backend service types can be a global backend service with the
/// loadBalancingScheme set to INTERNAL_SELF_MANAGED or EXTERNAL_MANAGED.
/// From version 6.0.
/// Default values are enforce by GCP without providing them.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderOutlierDetection {
    /// The base time that a host is ejected for. The real time is equal to the base
    /// time multiplied by the number of times the host has been ejected. Defaults to
    /// 30000ms or 30s.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseEjectionTime")]
    pub base_ejection_time: Option<BackendServiceStatusAtProviderOutlierDetectionBaseEjectionTime>,
    /// Number of errors before a host is ejected from the connection pool. When the
    /// backend host is accessed over HTTP, a 5xx return code qualifies as an error.
    /// Defaults to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consecutiveErrors")]
    pub consecutive_errors: Option<f64>,
    /// The number of consecutive gateway failures (502, 503, 504 status or connection
    /// errors that are mapped to one of those status codes) before a consecutive
    /// gateway failure ejection occurs. Defaults to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consecutiveGatewayFailure")]
    pub consecutive_gateway_failure: Option<f64>,
    /// The percentage chance that a host will be actually ejected when an outlier
    /// status is detected through consecutive 5xx. This setting can be used to disable
    /// ejection or to ramp it up slowly. Defaults to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingConsecutiveErrors")]
    pub enforcing_consecutive_errors: Option<f64>,
    /// The percentage chance that a host will be actually ejected when an outlier
    /// status is detected through consecutive gateway failures. This setting can be
    /// used to disable ejection or to ramp it up slowly. Defaults to 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingConsecutiveGatewayFailure")]
    pub enforcing_consecutive_gateway_failure: Option<f64>,
    /// The percentage chance that a host will be actually ejected when an outlier
    /// status is detected through success rate statistics. This setting can be used to
    /// disable ejection or to ramp it up slowly. Defaults to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcingSuccessRate")]
    pub enforcing_success_rate: Option<f64>,
    /// Time interval between ejection sweep analysis. This can result in both new
    /// ejections as well as hosts being returned to service. Defaults to 10 seconds.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interval: Option<BackendServiceStatusAtProviderOutlierDetectionInterval>,
    /// Maximum percentage of hosts in the load balancing pool for the backend service
    /// that can be ejected. Defaults to 10%.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxEjectionPercent")]
    pub max_ejection_percent: Option<f64>,
    /// The number of hosts in a cluster that must have enough request volume to detect
    /// success rate outliers. If the number of hosts is less than this setting, outlier
    /// detection via success rate statistics is not performed for any host in the
    /// cluster. Defaults to 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateMinimumHosts")]
    pub success_rate_minimum_hosts: Option<f64>,
    /// The minimum number of total requests that must be collected in one interval (as
    /// defined by the interval duration above) to include this host in success rate
    /// based outlier detection. If the volume is lower than this setting, outlier
    /// detection via success rate statistics is not performed for that host. Defaults
    /// to 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateRequestVolume")]
    pub success_rate_request_volume: Option<f64>,
    /// This factor is used to determine the ejection threshold for success rate outlier
    /// ejection. The ejection threshold is the difference between the mean success
    /// rate, and the product of this factor and the standard deviation of the mean
    /// success rate: mean - (stdev * success_rate_stdev_factor). This factor is divided
    /// by a thousand to get a double. That is, if the desired factor is 1.9, the
    /// runtime value should be 1900. Defaults to 1900.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "successRateStdevFactor")]
    pub success_rate_stdev_factor: Option<f64>,
}

/// The base time that a host is ejected for. The real time is equal to the base
/// time multiplied by the number of times the host has been ejected. Defaults to
/// 30000ms or 30s.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderOutlierDetectionBaseEjectionTime {
    /// Span of time that's a fraction of a second at nanosecond
    /// resolution. Durations less than one second are represented
    /// with a 0 seconds field and a positive nanos field. Must
    /// be from 0 to 999,999,999 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<f64>,
    /// Span of time at a resolution of a second.
    /// Must be from 0 to 315,576,000,000 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<f64>,
}

/// Time interval between ejection sweep analysis. This can result in both new
/// ejections as well as hosts being returned to service. Defaults to 10 seconds.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderOutlierDetectionInterval {
    /// Span of time that's a fraction of a second at nanosecond
    /// resolution. Durations less than one second are represented
    /// with a 0 seconds field and a positive nanos field. Must
    /// be from 0 to 999,999,999 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub nanos: Option<f64>,
    /// Span of time at a resolution of a second.
    /// Must be from 0 to 315,576,000,000 inclusive.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub seconds: Option<f64>,
}

/// The security settings that apply to this backend service. This field is applicable to either
/// a regional backend service with the service_protocol set to HTTP, HTTPS, or HTTP2, and
/// load_balancing_scheme set to INTERNAL_MANAGED; or a global backend service with the
/// load_balancing_scheme set to INTERNAL_SELF_MANAGED.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderSecuritySettings {
    /// The configuration needed to generate a signature for access to private storage buckets that support AWS's Signature Version 4 for authentication.
    /// Allowed only for INTERNET_IP_PORT and INTERNET_FQDN_PORT NEG backends.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsV4Authentication")]
    pub aws_v4_authentication: Option<BackendServiceStatusAtProviderSecuritySettingsAwsV4Authentication>,
    /// ClientTlsPolicy is a resource that specifies how a client should authenticate
    /// connections to backends of a service. This resource itself does not affect
    /// configuration unless it is attached to a backend service resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTlsPolicy")]
    pub client_tls_policy: Option<String>,
    /// A list of alternate names to verify the subject identity in the certificate.
    /// If specified, the client will verify that the server certificate's subject
    /// alt name matches one of the specified values.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subjectAltNames")]
    pub subject_alt_names: Option<Vec<String>>,
}

/// The configuration needed to generate a signature for access to private storage buckets that support AWS's Signature Version 4 for authentication.
/// Allowed only for INTERNET_IP_PORT and INTERNET_FQDN_PORT NEG backends.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendServiceStatusAtProviderSecuritySettingsAwsV4Authentication {
    /// The identifier of an access key used for s3 bucket authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyId")]
    pub access_key_id: Option<String>,
    /// The optional version identifier for the access key. You can use this to keep track of different iterations of your access key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeyVersion")]
    pub access_key_version: Option<String>,
    /// The name of the cloud region of your origin. This is a free-form field with the name of the region your cloud uses to host your origin.
    /// For example, "us-east-1" for AWS or "us-ashburn-1" for OCI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "originRegion")]
    pub origin_region: Option<String>,
}


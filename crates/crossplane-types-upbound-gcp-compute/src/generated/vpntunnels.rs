// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// VPNTunnelSpec defines the desired state of VPNTunnel
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta1", kind = "VPNTunnel", plural = "vpntunnels")]
#[kube(status = "VPNTunnelStatus")]
pub struct VPNTunnelSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<VPNTunnelDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: VPNTunnelForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<VPNTunnelInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<VPNTunnelProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<VPNTunnelPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<VPNTunnelWriteConnectionSecretToRef>,
}

/// VPNTunnelSpec defines the desired state of VPNTunnel
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelForProvider {
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// IKE protocol version to use when establishing the VPN tunnel with
    /// peer VPN gateway.
    /// Acceptable IKE versions are 1 or 2. Default version is 2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ikeVersion")]
    pub ike_version: Option<f64>,
    /// Labels to apply to this VpnTunnel.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Local traffic selector to use when establishing the VPN tunnel with
    /// peer VPN gateway. The value should be a CIDR formatted string,
    /// for example 192.168.0.0/16. The ranges should be disjoint.
    /// Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localTrafficSelector")]
    pub local_traffic_selector: Option<Vec<String>>,
    /// URL of the peer side external VPN gateway to which this VPN tunnel is connected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerExternalGateway")]
    pub peer_external_gateway: Option<String>,
    /// The interface ID of the external VPN gateway to which this VPN tunnel is connected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerExternalGatewayInterface")]
    pub peer_external_gateway_interface: Option<f64>,
    /// Reference to a ExternalVPNGateway in compute to populate peerExternalGateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerExternalGatewayRef")]
    pub peer_external_gateway_ref: Option<VPNTunnelForProviderPeerExternalGatewayRef>,
    /// Selector for a ExternalVPNGateway in compute to populate peerExternalGateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerExternalGatewaySelector")]
    pub peer_external_gateway_selector: Option<VPNTunnelForProviderPeerExternalGatewaySelector>,
    /// URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected.
    /// If provided, the VPN tunnel will automatically use the same vpn_gateway_interface
    /// ID in the peer GCP VPN gateway.
    /// This field must reference a google_compute_ha_vpn_gateway resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerGcpGateway")]
    pub peer_gcp_gateway: Option<String>,
    /// IP address of the peer VPN gateway. Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIp")]
    pub peer_ip: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The region where the tunnel is located. If unset, is set to the region of target_vpn_gateway.
    pub region: String,
    /// Remote traffic selector to use when establishing the VPN tunnel with
    /// peer VPN gateway. The value should be a CIDR formatted string,
    /// for example 192.168.0.0/16. The ranges should be disjoint.
    /// Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteTrafficSelector")]
    pub remote_traffic_selector: Option<Vec<String>>,
    /// URL of router resource to be used for dynamic routing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub router: Option<String>,
    /// Reference to a Router in compute to populate router.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerRef")]
    pub router_ref: Option<VPNTunnelForProviderRouterRef>,
    /// Selector for a Router in compute to populate router.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerSelector")]
    pub router_selector: Option<VPNTunnelForProviderRouterSelector>,
    /// Shared secret used to set the secure session between the Cloud VPN
    /// gateway and the peer VPN gateway.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sharedSecretSecretRef")]
    pub shared_secret_secret_ref: Option<VPNTunnelForProviderSharedSecretSecretRef>,
    /// URL of the Target VPN gateway with which this VPN tunnel is
    /// associated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetVpnGateway")]
    pub target_vpn_gateway: Option<String>,
    /// Reference to a VPNGateway in compute to populate targetVpnGateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetVpnGatewayRef")]
    pub target_vpn_gateway_ref: Option<VPNTunnelForProviderTargetVpnGatewayRef>,
    /// Selector for a VPNGateway in compute to populate targetVpnGateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetVpnGatewaySelector")]
    pub target_vpn_gateway_selector: Option<VPNTunnelForProviderTargetVpnGatewaySelector>,
    /// URL of the VPN gateway with which this VPN tunnel is associated.
    /// This must be used if a High Availability VPN gateway resource is created.
    /// This field must reference a google_compute_ha_vpn_gateway resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpnGateway")]
    pub vpn_gateway: Option<String>,
    /// The interface ID of the VPN gateway with which this VPN tunnel is associated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpnGatewayInterface")]
    pub vpn_gateway_interface: Option<f64>,
    /// Reference to a HaVPNGateway in compute to populate vpnGateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpnGatewayRef")]
    pub vpn_gateway_ref: Option<VPNTunnelForProviderVpnGatewayRef>,
    /// Selector for a HaVPNGateway in compute to populate vpnGateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpnGatewaySelector")]
    pub vpn_gateway_selector: Option<VPNTunnelForProviderVpnGatewaySelector>,
}

/// Reference to a ExternalVPNGateway in compute to populate peerExternalGateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelForProviderPeerExternalGatewayRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VPNTunnelForProviderPeerExternalGatewayRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelForProviderPeerExternalGatewayRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VPNTunnelForProviderPeerExternalGatewayRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VPNTunnelForProviderPeerExternalGatewayRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelForProviderPeerExternalGatewayRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelForProviderPeerExternalGatewayRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ExternalVPNGateway in compute to populate peerExternalGateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelForProviderPeerExternalGatewaySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VPNTunnelForProviderPeerExternalGatewaySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelForProviderPeerExternalGatewaySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VPNTunnelForProviderPeerExternalGatewaySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VPNTunnelForProviderPeerExternalGatewaySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelForProviderPeerExternalGatewaySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelForProviderPeerExternalGatewaySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Router in compute to populate router.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelForProviderRouterRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VPNTunnelForProviderRouterRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelForProviderRouterRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VPNTunnelForProviderRouterRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VPNTunnelForProviderRouterRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelForProviderRouterRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelForProviderRouterRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Router in compute to populate router.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelForProviderRouterSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VPNTunnelForProviderRouterSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelForProviderRouterSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VPNTunnelForProviderRouterSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VPNTunnelForProviderRouterSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelForProviderRouterSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelForProviderRouterSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Shared secret used to set the secure session between the Cloud VPN
/// gateway and the peer VPN gateway.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelForProviderSharedSecretSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a VPNGateway in compute to populate targetVpnGateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelForProviderTargetVpnGatewayRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VPNTunnelForProviderTargetVpnGatewayRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelForProviderTargetVpnGatewayRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VPNTunnelForProviderTargetVpnGatewayRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VPNTunnelForProviderTargetVpnGatewayRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelForProviderTargetVpnGatewayRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelForProviderTargetVpnGatewayRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPNGateway in compute to populate targetVpnGateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelForProviderTargetVpnGatewaySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VPNTunnelForProviderTargetVpnGatewaySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelForProviderTargetVpnGatewaySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VPNTunnelForProviderTargetVpnGatewaySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VPNTunnelForProviderTargetVpnGatewaySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelForProviderTargetVpnGatewaySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelForProviderTargetVpnGatewaySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a HaVPNGateway in compute to populate vpnGateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelForProviderVpnGatewayRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VPNTunnelForProviderVpnGatewayRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelForProviderVpnGatewayRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VPNTunnelForProviderVpnGatewayRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VPNTunnelForProviderVpnGatewayRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelForProviderVpnGatewayRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelForProviderVpnGatewayRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a HaVPNGateway in compute to populate vpnGateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelForProviderVpnGatewaySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VPNTunnelForProviderVpnGatewaySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelForProviderVpnGatewaySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VPNTunnelForProviderVpnGatewaySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VPNTunnelForProviderVpnGatewaySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelForProviderVpnGatewaySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelForProviderVpnGatewaySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelInitProvider {
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// IKE protocol version to use when establishing the VPN tunnel with
    /// peer VPN gateway.
    /// Acceptable IKE versions are 1 or 2. Default version is 2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ikeVersion")]
    pub ike_version: Option<f64>,
    /// Labels to apply to this VpnTunnel.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Local traffic selector to use when establishing the VPN tunnel with
    /// peer VPN gateway. The value should be a CIDR formatted string,
    /// for example 192.168.0.0/16. The ranges should be disjoint.
    /// Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localTrafficSelector")]
    pub local_traffic_selector: Option<Vec<String>>,
    /// URL of the peer side external VPN gateway to which this VPN tunnel is connected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerExternalGateway")]
    pub peer_external_gateway: Option<String>,
    /// The interface ID of the external VPN gateway to which this VPN tunnel is connected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerExternalGatewayInterface")]
    pub peer_external_gateway_interface: Option<f64>,
    /// Reference to a ExternalVPNGateway in compute to populate peerExternalGateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerExternalGatewayRef")]
    pub peer_external_gateway_ref: Option<VPNTunnelInitProviderPeerExternalGatewayRef>,
    /// Selector for a ExternalVPNGateway in compute to populate peerExternalGateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerExternalGatewaySelector")]
    pub peer_external_gateway_selector: Option<VPNTunnelInitProviderPeerExternalGatewaySelector>,
    /// URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected.
    /// If provided, the VPN tunnel will automatically use the same vpn_gateway_interface
    /// ID in the peer GCP VPN gateway.
    /// This field must reference a google_compute_ha_vpn_gateway resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerGcpGateway")]
    pub peer_gcp_gateway: Option<String>,
    /// IP address of the peer VPN gateway. Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIp")]
    pub peer_ip: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Remote traffic selector to use when establishing the VPN tunnel with
    /// peer VPN gateway. The value should be a CIDR formatted string,
    /// for example 192.168.0.0/16. The ranges should be disjoint.
    /// Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteTrafficSelector")]
    pub remote_traffic_selector: Option<Vec<String>>,
    /// URL of router resource to be used for dynamic routing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub router: Option<String>,
    /// Reference to a Router in compute to populate router.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerRef")]
    pub router_ref: Option<VPNTunnelInitProviderRouterRef>,
    /// Selector for a Router in compute to populate router.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "routerSelector")]
    pub router_selector: Option<VPNTunnelInitProviderRouterSelector>,
    /// Shared secret used to set the secure session between the Cloud VPN
    /// gateway and the peer VPN gateway.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(rename = "sharedSecretSecretRef")]
    pub shared_secret_secret_ref: VPNTunnelInitProviderSharedSecretSecretRef,
    /// URL of the Target VPN gateway with which this VPN tunnel is
    /// associated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetVpnGateway")]
    pub target_vpn_gateway: Option<String>,
    /// Reference to a VPNGateway in compute to populate targetVpnGateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetVpnGatewayRef")]
    pub target_vpn_gateway_ref: Option<VPNTunnelInitProviderTargetVpnGatewayRef>,
    /// Selector for a VPNGateway in compute to populate targetVpnGateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetVpnGatewaySelector")]
    pub target_vpn_gateway_selector: Option<VPNTunnelInitProviderTargetVpnGatewaySelector>,
    /// URL of the VPN gateway with which this VPN tunnel is associated.
    /// This must be used if a High Availability VPN gateway resource is created.
    /// This field must reference a google_compute_ha_vpn_gateway resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpnGateway")]
    pub vpn_gateway: Option<String>,
    /// The interface ID of the VPN gateway with which this VPN tunnel is associated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpnGatewayInterface")]
    pub vpn_gateway_interface: Option<f64>,
    /// Reference to a HaVPNGateway in compute to populate vpnGateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpnGatewayRef")]
    pub vpn_gateway_ref: Option<VPNTunnelInitProviderVpnGatewayRef>,
    /// Selector for a HaVPNGateway in compute to populate vpnGateway.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpnGatewaySelector")]
    pub vpn_gateway_selector: Option<VPNTunnelInitProviderVpnGatewaySelector>,
}

/// Reference to a ExternalVPNGateway in compute to populate peerExternalGateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelInitProviderPeerExternalGatewayRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VPNTunnelInitProviderPeerExternalGatewayRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelInitProviderPeerExternalGatewayRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VPNTunnelInitProviderPeerExternalGatewayRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VPNTunnelInitProviderPeerExternalGatewayRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelInitProviderPeerExternalGatewayRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelInitProviderPeerExternalGatewayRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ExternalVPNGateway in compute to populate peerExternalGateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelInitProviderPeerExternalGatewaySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VPNTunnelInitProviderPeerExternalGatewaySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelInitProviderPeerExternalGatewaySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VPNTunnelInitProviderPeerExternalGatewaySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VPNTunnelInitProviderPeerExternalGatewaySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelInitProviderPeerExternalGatewaySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelInitProviderPeerExternalGatewaySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Router in compute to populate router.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelInitProviderRouterRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VPNTunnelInitProviderRouterRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelInitProviderRouterRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VPNTunnelInitProviderRouterRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VPNTunnelInitProviderRouterRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelInitProviderRouterRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelInitProviderRouterRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Router in compute to populate router.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelInitProviderRouterSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VPNTunnelInitProviderRouterSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelInitProviderRouterSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VPNTunnelInitProviderRouterSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VPNTunnelInitProviderRouterSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelInitProviderRouterSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelInitProviderRouterSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Shared secret used to set the secure session between the Cloud VPN
/// gateway and the peer VPN gateway.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelInitProviderSharedSecretSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a VPNGateway in compute to populate targetVpnGateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelInitProviderTargetVpnGatewayRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VPNTunnelInitProviderTargetVpnGatewayRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelInitProviderTargetVpnGatewayRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VPNTunnelInitProviderTargetVpnGatewayRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VPNTunnelInitProviderTargetVpnGatewayRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelInitProviderTargetVpnGatewayRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelInitProviderTargetVpnGatewayRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a VPNGateway in compute to populate targetVpnGateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelInitProviderTargetVpnGatewaySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VPNTunnelInitProviderTargetVpnGatewaySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelInitProviderTargetVpnGatewaySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VPNTunnelInitProviderTargetVpnGatewaySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VPNTunnelInitProviderTargetVpnGatewaySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelInitProviderTargetVpnGatewaySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelInitProviderTargetVpnGatewaySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a HaVPNGateway in compute to populate vpnGateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelInitProviderVpnGatewayRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VPNTunnelInitProviderVpnGatewayRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelInitProviderVpnGatewayRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VPNTunnelInitProviderVpnGatewayRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VPNTunnelInitProviderVpnGatewayRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelInitProviderVpnGatewayRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelInitProviderVpnGatewayRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a HaVPNGateway in compute to populate vpnGateway.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelInitProviderVpnGatewaySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VPNTunnelInitProviderVpnGatewaySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelInitProviderVpnGatewaySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VPNTunnelInitProviderVpnGatewaySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VPNTunnelInitProviderVpnGatewaySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelInitProviderVpnGatewaySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelInitProviderVpnGatewaySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VPNTunnelProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VPNTunnelProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VPNTunnelProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<VPNTunnelPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<VPNTunnelPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<VPNTunnelPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<VPNTunnelPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<VPNTunnelPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum VPNTunnelPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// VPNTunnelStatus defines the observed state of VPNTunnel.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<VPNTunnelStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct VPNTunnelStatusAtProvider {
    /// Creation timestamp in RFC3339 text format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTimestamp")]
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Detailed status message for the VPN tunnel.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "detailedStatus")]
    pub detailed_status: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// an identifier for the resource with format projects/{{project}}/regions/{{region}}/vpnTunnels/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// IKE protocol version to use when establishing the VPN tunnel with
    /// peer VPN gateway.
    /// Acceptable IKE versions are 1 or 2. Default version is 2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ikeVersion")]
    pub ike_version: Option<f64>,
    /// The fingerprint used for optimistic locking of this resource.  Used
    /// internally during updates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelFingerprint")]
    pub label_fingerprint: Option<String>,
    /// Labels to apply to this VpnTunnel.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Local traffic selector to use when establishing the VPN tunnel with
    /// peer VPN gateway. The value should be a CIDR formatted string,
    /// for example 192.168.0.0/16. The ranges should be disjoint.
    /// Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localTrafficSelector")]
    pub local_traffic_selector: Option<Vec<String>>,
    /// URL of the peer side external VPN gateway to which this VPN tunnel is connected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerExternalGateway")]
    pub peer_external_gateway: Option<String>,
    /// The interface ID of the external VPN gateway to which this VPN tunnel is connected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerExternalGatewayInterface")]
    pub peer_external_gateway_interface: Option<f64>,
    /// URL of the peer side HA GCP VPN gateway to which this VPN tunnel is connected.
    /// If provided, the VPN tunnel will automatically use the same vpn_gateway_interface
    /// ID in the peer GCP VPN gateway.
    /// This field must reference a google_compute_ha_vpn_gateway resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerGcpGateway")]
    pub peer_gcp_gateway: Option<String>,
    /// IP address of the peer VPN gateway. Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "peerIp")]
    pub peer_ip: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The region where the tunnel is located. If unset, is set to the region of target_vpn_gateway.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// Remote traffic selector to use when establishing the VPN tunnel with
    /// peer VPN gateway. The value should be a CIDR formatted string,
    /// for example 192.168.0.0/16. The ranges should be disjoint.
    /// Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "remoteTrafficSelector")]
    pub remote_traffic_selector: Option<Vec<String>>,
    /// URL of router resource to be used for dynamic routing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub router: Option<String>,
    /// The URI of the created resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    pub self_link: Option<String>,
    /// Hash of the shared secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sharedSecretHash")]
    pub shared_secret_hash: Option<String>,
    /// URL of the Target VPN gateway with which this VPN tunnel is
    /// associated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetVpnGateway")]
    pub target_vpn_gateway: Option<String>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// The unique identifier for the resource. This identifier is defined by the server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tunnelId")]
    pub tunnel_id: Option<String>,
    /// URL of the VPN gateway with which this VPN tunnel is associated.
    /// This must be used if a High Availability VPN gateway resource is created.
    /// This field must reference a google_compute_ha_vpn_gateway resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpnGateway")]
    pub vpn_gateway: Option<String>,
    /// The interface ID of the VPN gateway with which this VPN tunnel is associated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpnGatewayInterface")]
    pub vpn_gateway_interface: Option<f64>,
}


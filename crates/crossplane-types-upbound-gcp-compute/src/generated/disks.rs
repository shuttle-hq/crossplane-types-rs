// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// DiskSpec defines the desired state of Disk
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta2", kind = "Disk", plural = "disks")]
#[kube(status = "DiskStatus")]
pub struct DiskSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<DiskDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: DiskForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<DiskInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<DiskProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<DiskPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<DiskWriteConnectionSecretToRef>,
}

/// DiskSpec defines the desired state of Disk
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DiskDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskForProvider {
    /// The accessMode of the disk.
    /// For example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessMode")]
    pub access_mode: Option<String>,
    /// A nested object resource
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncPrimaryDisk")]
    pub async_primary_disk: Option<DiskForProviderAsyncPrimaryDisk>,
    /// An optional description of this resource. Provide this property when
    /// you create the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Encrypts the disk using a customer-supplied encryption key.
    /// After you encrypt a disk with a customer-supplied key, you must
    /// provide the same key if you use the disk later (e.g. to create a disk
    /// snapshot or an image, or to attach the disk to a virtual machine).
    /// Customer-supplied encryption keys do not protect access to metadata of
    /// the disk.
    /// If you do not provide an encryption key when creating the disk, then
    /// the disk will be encrypted using an automatically generated key and
    /// you do not need to provide a key to use the disk later.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskEncryptionKey")]
    pub disk_encryption_key: Option<DiskForProviderDiskEncryptionKey>,
    /// Whether this disk is using confidential compute mode.
    /// Note: Only supported on hyperdisk skus, disk_encryption_key is required when setting to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableConfidentialCompute")]
    pub enable_confidential_compute: Option<bool>,
    /// A list of features to enable on the guest operating system.
    /// Applicable only for bootable disks.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestOsFeatures")]
    pub guest_os_features: Option<Vec<DiskForProviderGuestOsFeatures>>,
    /// The image from which to initialize this disk. This can be
    /// one of: the image's self_link, projects/{project}/global/images/{image},
    /// projects/{project}/global/images/family/{family}, global/images/{image},
    /// global/images/family/{family}, family/{family}, {project}/{family},
    /// {project}/{image}, {family}, or {image}. If referred by family, the
    /// images names must include the family name. If they don't, use the
    /// google_compute_image data source.
    /// For instance, the image centos-6-v20180104 includes its family name centos-6.
    /// These images can be referred by family name here.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// Labels to apply to this disk.  A list of key->value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Any applicable license URI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub licenses: Option<Vec<String>>,
    /// Physical block size of the persistent disk, in bytes. If not present
    /// in a request, a default value is used. Currently supported sizes
    /// are 4096 and 16384, other sizes may be added in the future.
    /// If an unsupported value is requested, the error message will list
    /// the supported values for the caller's project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "physicalBlockSizeBytes")]
    pub physical_block_size_bytes: Option<f64>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Indicates how many IOPS must be provisioned for the disk.
    /// Note: Updating currently is only supported by hyperdisk skus without the need to delete and recreate the disk, hyperdisk
    /// allows for an update of IOPS every 4 hours. To update your hyperdisk more frequently, you'll need to manually delete and recreate it
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "provisionedIops")]
    pub provisioned_iops: Option<f64>,
    /// Indicates how much Throughput must be provisioned for the disk.
    /// Note: Updating currently is only supported by hyperdisk skus without the need to delete and recreate the disk, hyperdisk
    /// allows for an update of Throughput every 4 hours. To update your hyperdisk more frequently, you'll need to manually delete and recreate it
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "provisionedThroughput")]
    pub provisioned_throughput: Option<f64>,
    /// Size of the persistent disk, specified in GB. You can specify this
    /// field when creating a persistent disk using the image or
    /// snapshot parameter, or specify it alone to create an empty
    /// persistent disk.
    /// If you specify this field along with image or snapshot,
    /// the value must not be less than the size of the image
    /// or the size of the snapshot.
    /// You can add lifecycle.prevent_destroy in the config to prevent destroying
    /// and recreating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<f64>,
    /// The source snapshot used to create this disk. You can provide this as
    /// a partial or full URL to the resource. If the snapshot is in another
    /// project than this disk, you must supply a full URL. For example, the
    /// following are valid values:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub snapshot: Option<String>,
    /// The source disk used to create this disk. You can provide this as a partial or full URL to the resource.
    /// For example, the following are valid values:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDisk")]
    pub source_disk: Option<String>,
    /// The customer-supplied encryption key of the source image. Required if
    /// the source image is protected by a customer-supplied encryption key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceImageEncryptionKey")]
    pub source_image_encryption_key: Option<DiskForProviderSourceImageEncryptionKey>,
    /// The customer-supplied encryption key of the source snapshot. Required
    /// if the source snapshot is protected by a customer-supplied encryption
    /// key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSnapshotEncryptionKey")]
    pub source_snapshot_encryption_key: Option<DiskForProviderSourceSnapshotEncryptionKey>,
    /// The URL of the storage pool in which the new disk is created.
    /// For example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePool")]
    pub storage_pool: Option<String>,
    /// URL of the disk type resource describing which disk type to use to
    /// create the disk. Provide this when creating the disk.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// A reference to the zone where the disk resides.
    pub zone: String,
}

/// A nested object resource
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskForProviderAsyncPrimaryDisk {
    /// Primary disk for asynchronous disk replication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk: Option<String>,
    /// Reference to a Disk in compute to populate disk.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskRef")]
    pub disk_ref: Option<DiskForProviderAsyncPrimaryDiskDiskRef>,
    /// Selector for a Disk in compute to populate disk.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSelector")]
    pub disk_selector: Option<DiskForProviderAsyncPrimaryDiskDiskSelector>,
}

/// Reference to a Disk in compute to populate disk.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskForProviderAsyncPrimaryDiskDiskRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DiskForProviderAsyncPrimaryDiskDiskRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskForProviderAsyncPrimaryDiskDiskRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DiskForProviderAsyncPrimaryDiskDiskRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DiskForProviderAsyncPrimaryDiskDiskRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DiskForProviderAsyncPrimaryDiskDiskRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DiskForProviderAsyncPrimaryDiskDiskRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Disk in compute to populate disk.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskForProviderAsyncPrimaryDiskDiskSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DiskForProviderAsyncPrimaryDiskDiskSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskForProviderAsyncPrimaryDiskDiskSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DiskForProviderAsyncPrimaryDiskDiskSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DiskForProviderAsyncPrimaryDiskDiskSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DiskForProviderAsyncPrimaryDiskDiskSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DiskForProviderAsyncPrimaryDiskDiskSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Encrypts the disk using a customer-supplied encryption key.
/// After you encrypt a disk with a customer-supplied key, you must
/// provide the same key if you use the disk later (e.g. to create a disk
/// snapshot or an image, or to attach the disk to a virtual machine).
/// Customer-supplied encryption keys do not protect access to metadata of
/// the disk.
/// If you do not provide an encryption key when creating the disk, then
/// the disk will be encrypted using an automatically generated key and
/// you do not need to provide a key to use the disk later.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskForProviderDiskEncryptionKey {
    /// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
    /// in the cloud console. Your project's Compute Engine System service account
    /// (service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com) must have
    /// roles/cloudkms.cryptoKeyEncrypterDecrypter to use this feature.
    /// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeySelfLink")]
    pub kms_key_self_link: Option<String>,
    /// The service account used for the encryption request for the given KMS key.
    /// If absent, the Compute Engine Service Agent service account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyServiceAccount")]
    pub kms_key_service_account: Option<String>,
    /// Specifies a 256-bit customer-supplied encryption key, encoded in
    /// RFC 4648 base64 to either encrypt or decrypt this resource.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawKeySecretRef")]
    pub raw_key_secret_ref: Option<DiskForProviderDiskEncryptionKeyRawKeySecretRef>,
    /// Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit
    /// customer-supplied encryption key to either encrypt or decrypt
    /// this resource. You can provide either the rawKey or the rsaEncryptedKey.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rsaEncryptedKeySecretRef")]
    pub rsa_encrypted_key_secret_ref: Option<DiskForProviderDiskEncryptionKeyRsaEncryptedKeySecretRef>,
}

/// Specifies a 256-bit customer-supplied encryption key, encoded in
/// RFC 4648 base64 to either encrypt or decrypt this resource.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskForProviderDiskEncryptionKeyRawKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit
/// customer-supplied encryption key to either encrypt or decrypt
/// this resource. You can provide either the rawKey or the rsaEncryptedKey.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskForProviderDiskEncryptionKeyRsaEncryptedKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskForProviderGuestOsFeatures {
    /// The type of supported feature. Read Enabling guest operating system features to see a list of available options.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// The customer-supplied encryption key of the source image. Required if
/// the source image is protected by a customer-supplied encryption key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskForProviderSourceImageEncryptionKey {
    /// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
    /// in the cloud console. Your project's Compute Engine System service account
    /// (service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com) must have
    /// roles/cloudkms.cryptoKeyEncrypterDecrypter to use this feature.
    /// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeySelfLink")]
    pub kms_key_self_link: Option<String>,
    /// The service account used for the encryption request for the given KMS key.
    /// If absent, the Compute Engine Service Agent service account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyServiceAccount")]
    pub kms_key_service_account: Option<String>,
    /// Specifies a 256-bit customer-supplied encryption key, encoded in
    /// RFC 4648 base64 to either encrypt or decrypt this resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawKey")]
    pub raw_key: Option<String>,
}

/// The customer-supplied encryption key of the source snapshot. Required
/// if the source snapshot is protected by a customer-supplied encryption
/// key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskForProviderSourceSnapshotEncryptionKey {
    /// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
    /// in the cloud console. Your project's Compute Engine System service account
    /// (service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com) must have
    /// roles/cloudkms.cryptoKeyEncrypterDecrypter to use this feature.
    /// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeySelfLink")]
    pub kms_key_self_link: Option<String>,
    /// The service account used for the encryption request for the given KMS key.
    /// If absent, the Compute Engine Service Agent service account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyServiceAccount")]
    pub kms_key_service_account: Option<String>,
    /// Specifies a 256-bit customer-supplied encryption key, encoded in
    /// RFC 4648 base64 to either encrypt or decrypt this resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawKey")]
    pub raw_key: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskInitProvider {
    /// The accessMode of the disk.
    /// For example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessMode")]
    pub access_mode: Option<String>,
    /// A nested object resource
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncPrimaryDisk")]
    pub async_primary_disk: Option<DiskInitProviderAsyncPrimaryDisk>,
    /// An optional description of this resource. Provide this property when
    /// you create the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Encrypts the disk using a customer-supplied encryption key.
    /// After you encrypt a disk with a customer-supplied key, you must
    /// provide the same key if you use the disk later (e.g. to create a disk
    /// snapshot or an image, or to attach the disk to a virtual machine).
    /// Customer-supplied encryption keys do not protect access to metadata of
    /// the disk.
    /// If you do not provide an encryption key when creating the disk, then
    /// the disk will be encrypted using an automatically generated key and
    /// you do not need to provide a key to use the disk later.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskEncryptionKey")]
    pub disk_encryption_key: Option<DiskInitProviderDiskEncryptionKey>,
    /// Whether this disk is using confidential compute mode.
    /// Note: Only supported on hyperdisk skus, disk_encryption_key is required when setting to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableConfidentialCompute")]
    pub enable_confidential_compute: Option<bool>,
    /// A list of features to enable on the guest operating system.
    /// Applicable only for bootable disks.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestOsFeatures")]
    pub guest_os_features: Option<Vec<DiskInitProviderGuestOsFeatures>>,
    /// The image from which to initialize this disk. This can be
    /// one of: the image's self_link, projects/{project}/global/images/{image},
    /// projects/{project}/global/images/family/{family}, global/images/{image},
    /// global/images/family/{family}, family/{family}, {project}/{family},
    /// {project}/{image}, {family}, or {image}. If referred by family, the
    /// images names must include the family name. If they don't, use the
    /// google_compute_image data source.
    /// For instance, the image centos-6-v20180104 includes its family name centos-6.
    /// These images can be referred by family name here.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// Labels to apply to this disk.  A list of key->value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Any applicable license URI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub licenses: Option<Vec<String>>,
    /// Physical block size of the persistent disk, in bytes. If not present
    /// in a request, a default value is used. Currently supported sizes
    /// are 4096 and 16384, other sizes may be added in the future.
    /// If an unsupported value is requested, the error message will list
    /// the supported values for the caller's project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "physicalBlockSizeBytes")]
    pub physical_block_size_bytes: Option<f64>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Indicates how many IOPS must be provisioned for the disk.
    /// Note: Updating currently is only supported by hyperdisk skus without the need to delete and recreate the disk, hyperdisk
    /// allows for an update of IOPS every 4 hours. To update your hyperdisk more frequently, you'll need to manually delete and recreate it
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "provisionedIops")]
    pub provisioned_iops: Option<f64>,
    /// Indicates how much Throughput must be provisioned for the disk.
    /// Note: Updating currently is only supported by hyperdisk skus without the need to delete and recreate the disk, hyperdisk
    /// allows for an update of Throughput every 4 hours. To update your hyperdisk more frequently, you'll need to manually delete and recreate it
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "provisionedThroughput")]
    pub provisioned_throughput: Option<f64>,
    /// Size of the persistent disk, specified in GB. You can specify this
    /// field when creating a persistent disk using the image or
    /// snapshot parameter, or specify it alone to create an empty
    /// persistent disk.
    /// If you specify this field along with image or snapshot,
    /// the value must not be less than the size of the image
    /// or the size of the snapshot.
    /// You can add lifecycle.prevent_destroy in the config to prevent destroying
    /// and recreating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<f64>,
    /// The source snapshot used to create this disk. You can provide this as
    /// a partial or full URL to the resource. If the snapshot is in another
    /// project than this disk, you must supply a full URL. For example, the
    /// following are valid values:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub snapshot: Option<String>,
    /// The source disk used to create this disk. You can provide this as a partial or full URL to the resource.
    /// For example, the following are valid values:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDisk")]
    pub source_disk: Option<String>,
    /// The customer-supplied encryption key of the source image. Required if
    /// the source image is protected by a customer-supplied encryption key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceImageEncryptionKey")]
    pub source_image_encryption_key: Option<DiskInitProviderSourceImageEncryptionKey>,
    /// The customer-supplied encryption key of the source snapshot. Required
    /// if the source snapshot is protected by a customer-supplied encryption
    /// key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSnapshotEncryptionKey")]
    pub source_snapshot_encryption_key: Option<DiskInitProviderSourceSnapshotEncryptionKey>,
    /// The URL of the storage pool in which the new disk is created.
    /// For example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePool")]
    pub storage_pool: Option<String>,
    /// URL of the disk type resource describing which disk type to use to
    /// create the disk. Provide this when creating the disk.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// A nested object resource
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskInitProviderAsyncPrimaryDisk {
    /// Primary disk for asynchronous disk replication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk: Option<String>,
    /// Reference to a Disk in compute to populate disk.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskRef")]
    pub disk_ref: Option<DiskInitProviderAsyncPrimaryDiskDiskRef>,
    /// Selector for a Disk in compute to populate disk.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSelector")]
    pub disk_selector: Option<DiskInitProviderAsyncPrimaryDiskDiskSelector>,
}

/// Reference to a Disk in compute to populate disk.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskInitProviderAsyncPrimaryDiskDiskRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DiskInitProviderAsyncPrimaryDiskDiskRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskInitProviderAsyncPrimaryDiskDiskRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DiskInitProviderAsyncPrimaryDiskDiskRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DiskInitProviderAsyncPrimaryDiskDiskRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DiskInitProviderAsyncPrimaryDiskDiskRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DiskInitProviderAsyncPrimaryDiskDiskRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Disk in compute to populate disk.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskInitProviderAsyncPrimaryDiskDiskSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DiskInitProviderAsyncPrimaryDiskDiskSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskInitProviderAsyncPrimaryDiskDiskSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DiskInitProviderAsyncPrimaryDiskDiskSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DiskInitProviderAsyncPrimaryDiskDiskSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DiskInitProviderAsyncPrimaryDiskDiskSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DiskInitProviderAsyncPrimaryDiskDiskSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Encrypts the disk using a customer-supplied encryption key.
/// After you encrypt a disk with a customer-supplied key, you must
/// provide the same key if you use the disk later (e.g. to create a disk
/// snapshot or an image, or to attach the disk to a virtual machine).
/// Customer-supplied encryption keys do not protect access to metadata of
/// the disk.
/// If you do not provide an encryption key when creating the disk, then
/// the disk will be encrypted using an automatically generated key and
/// you do not need to provide a key to use the disk later.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskInitProviderDiskEncryptionKey {
    /// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
    /// in the cloud console. Your project's Compute Engine System service account
    /// (service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com) must have
    /// roles/cloudkms.cryptoKeyEncrypterDecrypter to use this feature.
    /// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeySelfLink")]
    pub kms_key_self_link: Option<String>,
    /// The service account used for the encryption request for the given KMS key.
    /// If absent, the Compute Engine Service Agent service account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyServiceAccount")]
    pub kms_key_service_account: Option<String>,
    /// Specifies a 256-bit customer-supplied encryption key, encoded in
    /// RFC 4648 base64 to either encrypt or decrypt this resource.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawKeySecretRef")]
    pub raw_key_secret_ref: Option<DiskInitProviderDiskEncryptionKeyRawKeySecretRef>,
    /// Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit
    /// customer-supplied encryption key to either encrypt or decrypt
    /// this resource. You can provide either the rawKey or the rsaEncryptedKey.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rsaEncryptedKeySecretRef")]
    pub rsa_encrypted_key_secret_ref: Option<DiskInitProviderDiskEncryptionKeyRsaEncryptedKeySecretRef>,
}

/// Specifies a 256-bit customer-supplied encryption key, encoded in
/// RFC 4648 base64 to either encrypt or decrypt this resource.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskInitProviderDiskEncryptionKeyRawKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Specifies an RFC 4648 base64 encoded, RSA-wrapped 2048-bit
/// customer-supplied encryption key to either encrypt or decrypt
/// this resource. You can provide either the rawKey or the rsaEncryptedKey.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskInitProviderDiskEncryptionKeyRsaEncryptedKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskInitProviderGuestOsFeatures {
    /// The type of supported feature. Read Enabling guest operating system features to see a list of available options.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// The customer-supplied encryption key of the source image. Required if
/// the source image is protected by a customer-supplied encryption key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskInitProviderSourceImageEncryptionKey {
    /// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
    /// in the cloud console. Your project's Compute Engine System service account
    /// (service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com) must have
    /// roles/cloudkms.cryptoKeyEncrypterDecrypter to use this feature.
    /// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeySelfLink")]
    pub kms_key_self_link: Option<String>,
    /// The service account used for the encryption request for the given KMS key.
    /// If absent, the Compute Engine Service Agent service account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyServiceAccount")]
    pub kms_key_service_account: Option<String>,
    /// Specifies a 256-bit customer-supplied encryption key, encoded in
    /// RFC 4648 base64 to either encrypt or decrypt this resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawKey")]
    pub raw_key: Option<String>,
}

/// The customer-supplied encryption key of the source snapshot. Required
/// if the source snapshot is protected by a customer-supplied encryption
/// key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskInitProviderSourceSnapshotEncryptionKey {
    /// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
    /// in the cloud console. Your project's Compute Engine System service account
    /// (service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com) must have
    /// roles/cloudkms.cryptoKeyEncrypterDecrypter to use this feature.
    /// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeySelfLink")]
    pub kms_key_self_link: Option<String>,
    /// The service account used for the encryption request for the given KMS key.
    /// If absent, the Compute Engine Service Agent service account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyServiceAccount")]
    pub kms_key_service_account: Option<String>,
    /// Specifies a 256-bit customer-supplied encryption key, encoded in
    /// RFC 4648 base64 to either encrypt or decrypt this resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawKey")]
    pub raw_key: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DiskProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DiskProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DiskProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DiskProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DiskProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<DiskPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<DiskPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DiskPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DiskPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DiskPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DiskPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DiskPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// DiskStatus defines the observed state of Disk.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<DiskStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskStatusAtProvider {
    /// The accessMode of the disk.
    /// For example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessMode")]
    pub access_mode: Option<String>,
    /// A nested object resource
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "asyncPrimaryDisk")]
    pub async_primary_disk: Option<DiskStatusAtProviderAsyncPrimaryDisk>,
    /// Creation timestamp in RFC3339 text format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTimestamp")]
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource. Provide this property when
    /// you create the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Encrypts the disk using a customer-supplied encryption key.
    /// After you encrypt a disk with a customer-supplied key, you must
    /// provide the same key if you use the disk later (e.g. to create a disk
    /// snapshot or an image, or to attach the disk to a virtual machine).
    /// Customer-supplied encryption keys do not protect access to metadata of
    /// the disk.
    /// If you do not provide an encryption key when creating the disk, then
    /// the disk will be encrypted using an automatically generated key and
    /// you do not need to provide a key to use the disk later.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskEncryptionKey")]
    pub disk_encryption_key: Option<DiskStatusAtProviderDiskEncryptionKey>,
    /// The unique identifier for the resource. This identifier is defined by the server.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskId")]
    pub disk_id: Option<String>,
    /// for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// Whether this disk is using confidential compute mode.
    /// Note: Only supported on hyperdisk skus, disk_encryption_key is required when setting to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableConfidentialCompute")]
    pub enable_confidential_compute: Option<bool>,
    /// A list of features to enable on the guest operating system.
    /// Applicable only for bootable disks.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestOsFeatures")]
    pub guest_os_features: Option<Vec<DiskStatusAtProviderGuestOsFeatures>>,
    /// an identifier for the resource with format projects/{{project}}/zones/{{zone}}/disks/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The image from which to initialize this disk. This can be
    /// one of: the image's self_link, projects/{project}/global/images/{image},
    /// projects/{project}/global/images/family/{family}, global/images/{image},
    /// global/images/family/{family}, family/{family}, {project}/{family},
    /// {project}/{image}, {family}, or {image}. If referred by family, the
    /// images names must include the family name. If they don't, use the
    /// google_compute_image data source.
    /// For instance, the image centos-6-v20180104 includes its family name centos-6.
    /// These images can be referred by family name here.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub image: Option<String>,
    /// The fingerprint used for optimistic locking of this resource.  Used
    /// internally during updates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelFingerprint")]
    pub label_fingerprint: Option<String>,
    /// Labels to apply to this disk.  A list of key->value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Last attach timestamp in RFC3339 text format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastAttachTimestamp")]
    pub last_attach_timestamp: Option<String>,
    /// Last detach timestamp in RFC3339 text format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastDetachTimestamp")]
    pub last_detach_timestamp: Option<String>,
    /// Any applicable license URI.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub licenses: Option<Vec<String>>,
    /// Physical block size of the persistent disk, in bytes. If not present
    /// in a request, a default value is used. Currently supported sizes
    /// are 4096 and 16384, other sizes may be added in the future.
    /// If an unsupported value is requested, the error message will list
    /// the supported values for the caller's project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "physicalBlockSizeBytes")]
    pub physical_block_size_bytes: Option<f64>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Indicates how many IOPS must be provisioned for the disk.
    /// Note: Updating currently is only supported by hyperdisk skus without the need to delete and recreate the disk, hyperdisk
    /// allows for an update of IOPS every 4 hours. To update your hyperdisk more frequently, you'll need to manually delete and recreate it
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "provisionedIops")]
    pub provisioned_iops: Option<f64>,
    /// Indicates how much Throughput must be provisioned for the disk.
    /// Note: Updating currently is only supported by hyperdisk skus without the need to delete and recreate the disk, hyperdisk
    /// allows for an update of Throughput every 4 hours. To update your hyperdisk more frequently, you'll need to manually delete and recreate it
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "provisionedThroughput")]
    pub provisioned_throughput: Option<f64>,
    /// The URI of the created resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    pub self_link: Option<String>,
    /// Size of the persistent disk, specified in GB. You can specify this
    /// field when creating a persistent disk using the image or
    /// snapshot parameter, or specify it alone to create an empty
    /// persistent disk.
    /// If you specify this field along with image or snapshot,
    /// the value must not be less than the size of the image
    /// or the size of the snapshot.
    /// You can add lifecycle.prevent_destroy in the config to prevent destroying
    /// and recreating.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<f64>,
    /// The source snapshot used to create this disk. You can provide this as
    /// a partial or full URL to the resource. If the snapshot is in another
    /// project than this disk, you must supply a full URL. For example, the
    /// following are valid values:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub snapshot: Option<String>,
    /// The source disk used to create this disk. You can provide this as a partial or full URL to the resource.
    /// For example, the following are valid values:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDisk")]
    pub source_disk: Option<String>,
    /// The ID value of the disk used to create this image. This value may
    /// be used to determine whether the image was taken from the current
    /// or a previous instance of a given disk name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDiskId")]
    pub source_disk_id: Option<String>,
    /// The customer-supplied encryption key of the source image. Required if
    /// the source image is protected by a customer-supplied encryption key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceImageEncryptionKey")]
    pub source_image_encryption_key: Option<DiskStatusAtProviderSourceImageEncryptionKey>,
    /// The ID value of the image used to create this disk. This value
    /// identifies the exact image that was used to create this persistent
    /// disk. For example, if you created the persistent disk from an image
    /// that was later deleted and recreated under the same name, the source
    /// image ID would identify the exact version of the image that was used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceImageId")]
    pub source_image_id: Option<String>,
    /// The customer-supplied encryption key of the source snapshot. Required
    /// if the source snapshot is protected by a customer-supplied encryption
    /// key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSnapshotEncryptionKey")]
    pub source_snapshot_encryption_key: Option<DiskStatusAtProviderSourceSnapshotEncryptionKey>,
    /// The unique ID of the snapshot used to create this disk. This value
    /// identifies the exact snapshot that was used to create this persistent
    /// disk. For example, if you created the persistent disk from a snapshot
    /// that was later deleted and recreated under the same name, the source
    /// snapshot ID would identify the exact version of the snapshot that was
    /// used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceSnapshotId")]
    pub source_snapshot_id: Option<String>,
    /// The URL of the storage pool in which the new disk is created.
    /// For example:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storagePool")]
    pub storage_pool: Option<String>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// URL of the disk type resource describing which disk type to use to
    /// create the disk. Provide this when creating the disk.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
    /// Links to the users of the disk (attached instances) in form:
    /// project/zones/zone/instances/instance
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<String>>,
    /// A reference to the zone where the disk resides.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// A nested object resource
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskStatusAtProviderAsyncPrimaryDisk {
    /// Primary disk for asynchronous disk replication.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk: Option<String>,
}

/// Encrypts the disk using a customer-supplied encryption key.
/// After you encrypt a disk with a customer-supplied key, you must
/// provide the same key if you use the disk later (e.g. to create a disk
/// snapshot or an image, or to attach the disk to a virtual machine).
/// Customer-supplied encryption keys do not protect access to metadata of
/// the disk.
/// If you do not provide an encryption key when creating the disk, then
/// the disk will be encrypted using an automatically generated key and
/// you do not need to provide a key to use the disk later.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskStatusAtProviderDiskEncryptionKey {
    /// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
    /// in the cloud console. Your project's Compute Engine System service account
    /// (service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com) must have
    /// roles/cloudkms.cryptoKeyEncrypterDecrypter to use this feature.
    /// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeySelfLink")]
    pub kms_key_self_link: Option<String>,
    /// The service account used for the encryption request for the given KMS key.
    /// If absent, the Compute Engine Service Agent service account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyServiceAccount")]
    pub kms_key_service_account: Option<String>,
    /// (Output)
    /// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
    /// encryption key that protects this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskStatusAtProviderGuestOsFeatures {
    /// The type of supported feature. Read Enabling guest operating system features to see a list of available options.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// The customer-supplied encryption key of the source image. Required if
/// the source image is protected by a customer-supplied encryption key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskStatusAtProviderSourceImageEncryptionKey {
    /// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
    /// in the cloud console. Your project's Compute Engine System service account
    /// (service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com) must have
    /// roles/cloudkms.cryptoKeyEncrypterDecrypter to use this feature.
    /// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeySelfLink")]
    pub kms_key_self_link: Option<String>,
    /// The service account used for the encryption request for the given KMS key.
    /// If absent, the Compute Engine Service Agent service account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyServiceAccount")]
    pub kms_key_service_account: Option<String>,
    /// Specifies a 256-bit customer-supplied encryption key, encoded in
    /// RFC 4648 base64 to either encrypt or decrypt this resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawKey")]
    pub raw_key: Option<String>,
    /// (Output)
    /// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
    /// encryption key that protects this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
}

/// The customer-supplied encryption key of the source snapshot. Required
/// if the source snapshot is protected by a customer-supplied encryption
/// key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DiskStatusAtProviderSourceSnapshotEncryptionKey {
    /// The self link of the encryption key used to encrypt the disk. Also called KmsKeyName
    /// in the cloud console. Your project's Compute Engine System service account
    /// (service-{{PROJECT_NUMBER}}@compute-system.iam.gserviceaccount.com) must have
    /// roles/cloudkms.cryptoKeyEncrypterDecrypter to use this feature.
    /// See https://cloud.google.com/compute/docs/disks/customer-managed-encryption#encrypt_a_new_persistent_disk_with_your_own_keys
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeySelfLink")]
    pub kms_key_self_link: Option<String>,
    /// The service account used for the encryption request for the given KMS key.
    /// If absent, the Compute Engine Service Agent service account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyServiceAccount")]
    pub kms_key_service_account: Option<String>,
    /// Specifies a 256-bit customer-supplied encryption key, encoded in
    /// RFC 4648 base64 to either encrypt or decrypt this resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawKey")]
    pub raw_key: Option<String>,
    /// (Output)
    /// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
    /// encryption key that protects this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
}


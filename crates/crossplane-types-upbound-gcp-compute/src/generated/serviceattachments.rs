// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ServiceAttachmentSpec defines the desired state of ServiceAttachment
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta1", kind = "ServiceAttachment", plural = "serviceattachments")]
#[kube(status = "ServiceAttachmentStatus")]
pub struct ServiceAttachmentSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<ServiceAttachmentDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ServiceAttachmentForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<ServiceAttachmentInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<ServiceAttachmentProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<ServiceAttachmentPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<ServiceAttachmentWriteConnectionSecretToRef>,
}

/// ServiceAttachmentSpec defines the desired state of ServiceAttachment
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentForProvider {
    /// The connection preference to use for this service attachment. Valid
    /// values include "ACCEPT_AUTOMATIC", "ACCEPT_MANUAL".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionPreference")]
    pub connection_preference: Option<String>,
    /// An array of projects that are allowed to connect to this service
    /// attachment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consumerAcceptLists")]
    pub consumer_accept_lists: Option<Vec<ServiceAttachmentForProviderConsumerAcceptLists>>,
    /// An array of projects that are not allowed to connect to this service
    /// attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consumerRejectLists")]
    pub consumer_reject_lists: Option<Vec<String>>,
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If specified, the domain name will be used during the integration between
    /// the PSC connected endpoints and the Cloud DNS. For example, this is a
    /// valid domain name: "p.mycompany.com.". Current max number of domain names
    /// supported is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainNames")]
    pub domain_names: Option<Vec<String>>,
    /// If true, enable the proxy protocol which is for supplying client TCP/IP
    /// address data in TCP connections that traverse proxies on their way to
    /// destination servers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableProxyProtocol")]
    pub enable_proxy_protocol: Option<bool>,
    /// An array of subnets that is provided for NAT in this service attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natSubnets")]
    pub nat_subnets: Option<Vec<String>>,
    /// References to Subnetwork in compute to populate natSubnets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natSubnetsRefs")]
    pub nat_subnets_refs: Option<Vec<ServiceAttachmentForProviderNatSubnetsRefs>>,
    /// Selector for a list of Subnetwork in compute to populate natSubnets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natSubnetsSelector")]
    pub nat_subnets_selector: Option<ServiceAttachmentForProviderNatSubnetsSelector>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// This flag determines whether a consumer accept/reject list change can reconcile the statuses of existing ACCEPTED or REJECTED PSC endpoints.
    /// If false, connection policy update will only affect existing PENDING PSC endpoints. Existing ACCEPTED/REJECTED endpoints will remain untouched regardless how the connection policy is modified .
    /// If true, update will affect both PENDING and ACCEPTED/REJECTED PSC endpoints. For example, an ACCEPTED PSC endpoint will be moved to REJECTED if its project is added to the reject list.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reconcileConnections")]
    pub reconcile_connections: Option<bool>,
    /// URL of the region where the resource resides.
    pub region: String,
    /// The URL of a service serving the endpoint identified by this service attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetService")]
    pub target_service: Option<String>,
    /// Reference to a ForwardingRule in compute to populate targetService.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetServiceRef")]
    pub target_service_ref: Option<ServiceAttachmentForProviderTargetServiceRef>,
    /// Selector for a ForwardingRule in compute to populate targetService.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetServiceSelector")]
    pub target_service_selector: Option<ServiceAttachmentForProviderTargetServiceSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentForProviderConsumerAcceptLists {
    /// The number of consumer forwarding rules the consumer project can
    /// create.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionLimit")]
    pub connection_limit: Option<f64>,
    /// The network that is allowed to connect to this service attachment.
    /// Only one of project_id_or_num and network_url may be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// Reference to a Network in compute to populate networkUrl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrlRef")]
    pub network_url_ref: Option<ServiceAttachmentForProviderConsumerAcceptListsNetworkUrlRef>,
    /// Selector for a Network in compute to populate networkUrl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrlSelector")]
    pub network_url_selector: Option<ServiceAttachmentForProviderConsumerAcceptListsNetworkUrlSelector>,
    /// A project that is allowed to connect to this service attachment.
    /// Only one of project_id_or_num and network_url may be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectIdOrNum")]
    pub project_id_or_num: Option<String>,
}

/// Reference to a Network in compute to populate networkUrl.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentForProviderConsumerAcceptListsNetworkUrlRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ServiceAttachmentForProviderConsumerAcceptListsNetworkUrlRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentForProviderConsumerAcceptListsNetworkUrlRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ServiceAttachmentForProviderConsumerAcceptListsNetworkUrlRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ServiceAttachmentForProviderConsumerAcceptListsNetworkUrlRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentForProviderConsumerAcceptListsNetworkUrlRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentForProviderConsumerAcceptListsNetworkUrlRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate networkUrl.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentForProviderConsumerAcceptListsNetworkUrlSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ServiceAttachmentForProviderConsumerAcceptListsNetworkUrlSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentForProviderConsumerAcceptListsNetworkUrlSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ServiceAttachmentForProviderConsumerAcceptListsNetworkUrlSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ServiceAttachmentForProviderConsumerAcceptListsNetworkUrlSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentForProviderConsumerAcceptListsNetworkUrlSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentForProviderConsumerAcceptListsNetworkUrlSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentForProviderNatSubnetsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ServiceAttachmentForProviderNatSubnetsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentForProviderNatSubnetsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ServiceAttachmentForProviderNatSubnetsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ServiceAttachmentForProviderNatSubnetsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentForProviderNatSubnetsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentForProviderNatSubnetsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnetwork in compute to populate natSubnets.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentForProviderNatSubnetsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ServiceAttachmentForProviderNatSubnetsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentForProviderNatSubnetsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ServiceAttachmentForProviderNatSubnetsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ServiceAttachmentForProviderNatSubnetsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentForProviderNatSubnetsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentForProviderNatSubnetsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a ForwardingRule in compute to populate targetService.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentForProviderTargetServiceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ServiceAttachmentForProviderTargetServiceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentForProviderTargetServiceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ServiceAttachmentForProviderTargetServiceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ServiceAttachmentForProviderTargetServiceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentForProviderTargetServiceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentForProviderTargetServiceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ForwardingRule in compute to populate targetService.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentForProviderTargetServiceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ServiceAttachmentForProviderTargetServiceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentForProviderTargetServiceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ServiceAttachmentForProviderTargetServiceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ServiceAttachmentForProviderTargetServiceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentForProviderTargetServiceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentForProviderTargetServiceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentInitProvider {
    /// The connection preference to use for this service attachment. Valid
    /// values include "ACCEPT_AUTOMATIC", "ACCEPT_MANUAL".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionPreference")]
    pub connection_preference: Option<String>,
    /// An array of projects that are allowed to connect to this service
    /// attachment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consumerAcceptLists")]
    pub consumer_accept_lists: Option<Vec<ServiceAttachmentInitProviderConsumerAcceptLists>>,
    /// An array of projects that are not allowed to connect to this service
    /// attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consumerRejectLists")]
    pub consumer_reject_lists: Option<Vec<String>>,
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If specified, the domain name will be used during the integration between
    /// the PSC connected endpoints and the Cloud DNS. For example, this is a
    /// valid domain name: "p.mycompany.com.". Current max number of domain names
    /// supported is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainNames")]
    pub domain_names: Option<Vec<String>>,
    /// If true, enable the proxy protocol which is for supplying client TCP/IP
    /// address data in TCP connections that traverse proxies on their way to
    /// destination servers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableProxyProtocol")]
    pub enable_proxy_protocol: Option<bool>,
    /// An array of subnets that is provided for NAT in this service attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natSubnets")]
    pub nat_subnets: Option<Vec<String>>,
    /// References to Subnetwork in compute to populate natSubnets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natSubnetsRefs")]
    pub nat_subnets_refs: Option<Vec<ServiceAttachmentInitProviderNatSubnetsRefs>>,
    /// Selector for a list of Subnetwork in compute to populate natSubnets.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natSubnetsSelector")]
    pub nat_subnets_selector: Option<ServiceAttachmentInitProviderNatSubnetsSelector>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// This flag determines whether a consumer accept/reject list change can reconcile the statuses of existing ACCEPTED or REJECTED PSC endpoints.
    /// If false, connection policy update will only affect existing PENDING PSC endpoints. Existing ACCEPTED/REJECTED endpoints will remain untouched regardless how the connection policy is modified .
    /// If true, update will affect both PENDING and ACCEPTED/REJECTED PSC endpoints. For example, an ACCEPTED PSC endpoint will be moved to REJECTED if its project is added to the reject list.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reconcileConnections")]
    pub reconcile_connections: Option<bool>,
    /// The URL of a service serving the endpoint identified by this service attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetService")]
    pub target_service: Option<String>,
    /// Reference to a ForwardingRule in compute to populate targetService.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetServiceRef")]
    pub target_service_ref: Option<ServiceAttachmentInitProviderTargetServiceRef>,
    /// Selector for a ForwardingRule in compute to populate targetService.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetServiceSelector")]
    pub target_service_selector: Option<ServiceAttachmentInitProviderTargetServiceSelector>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentInitProviderConsumerAcceptLists {
    /// The number of consumer forwarding rules the consumer project can
    /// create.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionLimit")]
    pub connection_limit: Option<f64>,
    /// The network that is allowed to connect to this service attachment.
    /// Only one of project_id_or_num and network_url may be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// Reference to a Network in compute to populate networkUrl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrlRef")]
    pub network_url_ref: Option<ServiceAttachmentInitProviderConsumerAcceptListsNetworkUrlRef>,
    /// Selector for a Network in compute to populate networkUrl.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrlSelector")]
    pub network_url_selector: Option<ServiceAttachmentInitProviderConsumerAcceptListsNetworkUrlSelector>,
    /// A project that is allowed to connect to this service attachment.
    /// Only one of project_id_or_num and network_url may be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectIdOrNum")]
    pub project_id_or_num: Option<String>,
}

/// Reference to a Network in compute to populate networkUrl.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentInitProviderConsumerAcceptListsNetworkUrlRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ServiceAttachmentInitProviderConsumerAcceptListsNetworkUrlRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentInitProviderConsumerAcceptListsNetworkUrlRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ServiceAttachmentInitProviderConsumerAcceptListsNetworkUrlRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ServiceAttachmentInitProviderConsumerAcceptListsNetworkUrlRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentInitProviderConsumerAcceptListsNetworkUrlRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentInitProviderConsumerAcceptListsNetworkUrlRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate networkUrl.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentInitProviderConsumerAcceptListsNetworkUrlSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ServiceAttachmentInitProviderConsumerAcceptListsNetworkUrlSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentInitProviderConsumerAcceptListsNetworkUrlSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ServiceAttachmentInitProviderConsumerAcceptListsNetworkUrlSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ServiceAttachmentInitProviderConsumerAcceptListsNetworkUrlSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentInitProviderConsumerAcceptListsNetworkUrlSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentInitProviderConsumerAcceptListsNetworkUrlSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentInitProviderNatSubnetsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ServiceAttachmentInitProviderNatSubnetsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentInitProviderNatSubnetsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ServiceAttachmentInitProviderNatSubnetsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ServiceAttachmentInitProviderNatSubnetsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentInitProviderNatSubnetsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentInitProviderNatSubnetsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnetwork in compute to populate natSubnets.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentInitProviderNatSubnetsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ServiceAttachmentInitProviderNatSubnetsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentInitProviderNatSubnetsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ServiceAttachmentInitProviderNatSubnetsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ServiceAttachmentInitProviderNatSubnetsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentInitProviderNatSubnetsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentInitProviderNatSubnetsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a ForwardingRule in compute to populate targetService.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentInitProviderTargetServiceRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ServiceAttachmentInitProviderTargetServiceRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentInitProviderTargetServiceRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ServiceAttachmentInitProviderTargetServiceRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ServiceAttachmentInitProviderTargetServiceRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentInitProviderTargetServiceRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentInitProviderTargetServiceRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ForwardingRule in compute to populate targetService.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentInitProviderTargetServiceSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ServiceAttachmentInitProviderTargetServiceSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentInitProviderTargetServiceSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ServiceAttachmentInitProviderTargetServiceSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ServiceAttachmentInitProviderTargetServiceSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentInitProviderTargetServiceSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentInitProviderTargetServiceSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ServiceAttachmentProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ServiceAttachmentProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ServiceAttachmentProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ServiceAttachmentPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ServiceAttachmentPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ServiceAttachmentPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ServiceAttachmentPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ServiceAttachmentPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ServiceAttachmentPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ServiceAttachmentStatus defines the observed state of ServiceAttachment.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<ServiceAttachmentStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentStatusAtProvider {
    /// An array of the consumer forwarding rules connected to this service
    /// attachment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectedEndpoints")]
    pub connected_endpoints: Option<Vec<ServiceAttachmentStatusAtProviderConnectedEndpoints>>,
    /// The connection preference to use for this service attachment. Valid
    /// values include "ACCEPT_AUTOMATIC", "ACCEPT_MANUAL".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionPreference")]
    pub connection_preference: Option<String>,
    /// An array of projects that are allowed to connect to this service
    /// attachment.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consumerAcceptLists")]
    pub consumer_accept_lists: Option<Vec<ServiceAttachmentStatusAtProviderConsumerAcceptLists>>,
    /// An array of projects that are not allowed to connect to this service
    /// attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consumerRejectLists")]
    pub consumer_reject_lists: Option<Vec<String>>,
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If specified, the domain name will be used during the integration between
    /// the PSC connected endpoints and the Cloud DNS. For example, this is a
    /// valid domain name: "p.mycompany.com.". Current max number of domain names
    /// supported is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainNames")]
    pub domain_names: Option<Vec<String>>,
    /// If true, enable the proxy protocol which is for supplying client TCP/IP
    /// address data in TCP connections that traverse proxies on their way to
    /// destination servers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableProxyProtocol")]
    pub enable_proxy_protocol: Option<bool>,
    /// Fingerprint of this resource. This field is used internally during
    /// updates of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fingerprint: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/regions/{{region}}/serviceAttachments/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// An array of subnets that is provided for NAT in this service attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "natSubnets")]
    pub nat_subnets: Option<Vec<String>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// This flag determines whether a consumer accept/reject list change can reconcile the statuses of existing ACCEPTED or REJECTED PSC endpoints.
    /// If false, connection policy update will only affect existing PENDING PSC endpoints. Existing ACCEPTED/REJECTED endpoints will remain untouched regardless how the connection policy is modified .
    /// If true, update will affect both PENDING and ACCEPTED/REJECTED PSC endpoints. For example, an ACCEPTED PSC endpoint will be moved to REJECTED if its project is added to the reject list.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "reconcileConnections")]
    pub reconcile_connections: Option<bool>,
    /// URL of the region where the resource resides.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The URI of the created resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    pub self_link: Option<String>,
    /// The URL of a service serving the endpoint identified by this service attachment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetService")]
    pub target_service: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentStatusAtProviderConnectedEndpoints {
    /// (Output)
    /// The URL of the consumer forwarding rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// (Output)
    /// The status of the connection from the consumer forwarding rule to
    /// this service attachment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ServiceAttachmentStatusAtProviderConsumerAcceptLists {
    /// The number of consumer forwarding rules the consumer project can
    /// create.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "connectionLimit")]
    pub connection_limit: Option<f64>,
    /// The network that is allowed to connect to this service attachment.
    /// Only one of project_id_or_num and network_url may be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "networkUrl")]
    pub network_url: Option<String>,
    /// A project that is allowed to connect to this service attachment.
    /// Only one of project_id_or_num and network_url may be set.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectIdOrNum")]
    pub project_id_or_num: Option<String>,
}


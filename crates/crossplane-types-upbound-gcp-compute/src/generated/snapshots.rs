// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// SnapshotSpec defines the desired state of Snapshot
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta2", kind = "Snapshot", plural = "snapshots")]
#[kube(status = "SnapshotStatus")]
pub struct SnapshotSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<SnapshotDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: SnapshotForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<SnapshotInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<SnapshotProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<SnapshotPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<SnapshotWriteConnectionSecretToRef>,
}

/// SnapshotSpec defines the desired state of Snapshot
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SnapshotDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotForProvider {
    /// Creates the new snapshot in the snapshot chain labeled with the
    /// specified name. The chain name must be 1-63 characters long and
    /// comply with RFC1035. This is an uncommon option only for advanced
    /// service owners who needs to create separate snapshot chains, for
    /// example, for chargeback tracking.  When you describe your snapshot
    /// resource, this field is visible only if it has a non-empty value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chainName")]
    pub chain_name: Option<String>,
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Labels to apply to this Snapshot.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Encrypts the snapshot using a customer-supplied encryption key.
    /// After you encrypt a snapshot using a customer-supplied key, you must
    /// provide the same key if you use the snapshot later. For example, you
    /// must provide the encryption key when you create a disk from the
    /// encrypted snapshot in a future request.
    /// Customer-supplied encryption keys do not protect access to metadata of
    /// the snapshot.
    /// If you do not provide an encryption key when creating the snapshot,
    /// then the snapshot will be encrypted using an automatically generated
    /// key and you do not need to provide a key to use the snapshot later.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotEncryptionKey")]
    pub snapshot_encryption_key: Option<SnapshotForProviderSnapshotEncryptionKey>,
    /// A reference to the disk used to create this snapshot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDisk")]
    pub source_disk: Option<String>,
    /// The customer-supplied encryption key of the source snapshot. Required
    /// if the source snapshot is protected by a customer-supplied encryption
    /// key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDiskEncryptionKey")]
    pub source_disk_encryption_key: Option<SnapshotForProviderSourceDiskEncryptionKey>,
    /// Reference to a Disk in compute to populate sourceDisk.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDiskRef")]
    pub source_disk_ref: Option<SnapshotForProviderSourceDiskRef>,
    /// Selector for a Disk in compute to populate sourceDisk.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDiskSelector")]
    pub source_disk_selector: Option<SnapshotForProviderSourceDiskSelector>,
    /// Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageLocations")]
    pub storage_locations: Option<Vec<String>>,
    /// A reference to the zone where the disk is hosted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// Encrypts the snapshot using a customer-supplied encryption key.
/// After you encrypt a snapshot using a customer-supplied key, you must
/// provide the same key if you use the snapshot later. For example, you
/// must provide the encryption key when you create a disk from the
/// encrypted snapshot in a future request.
/// Customer-supplied encryption keys do not protect access to metadata of
/// the snapshot.
/// If you do not provide an encryption key when creating the snapshot,
/// then the snapshot will be encrypted using an automatically generated
/// key and you do not need to provide a key to use the snapshot later.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotForProviderSnapshotEncryptionKey {
    /// The name of the encryption key that is stored in Google Cloud KMS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeySelfLink")]
    pub kms_key_self_link: Option<String>,
    /// The service account used for the encryption request for the given KMS key.
    /// If absent, the Compute Engine Service Agent service account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyServiceAccount")]
    pub kms_key_service_account: Option<String>,
    /// Specifies a 256-bit customer-supplied encryption key, encoded in
    /// RFC 4648 base64 to either encrypt or decrypt this resource.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawKeySecretRef")]
    pub raw_key_secret_ref: Option<SnapshotForProviderSnapshotEncryptionKeyRawKeySecretRef>,
}

/// Specifies a 256-bit customer-supplied encryption key, encoded in
/// RFC 4648 base64 to either encrypt or decrypt this resource.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotForProviderSnapshotEncryptionKeyRawKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// The customer-supplied encryption key of the source snapshot. Required
/// if the source snapshot is protected by a customer-supplied encryption
/// key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotForProviderSourceDiskEncryptionKey {
    /// The service account used for the encryption request for the given KMS key.
    /// If absent, the Compute Engine Service Agent service account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyServiceAccount")]
    pub kms_key_service_account: Option<String>,
    /// Specifies a 256-bit customer-supplied encryption key, encoded in
    /// RFC 4648 base64 to either encrypt or decrypt this resource.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawKeySecretRef")]
    pub raw_key_secret_ref: Option<SnapshotForProviderSourceDiskEncryptionKeyRawKeySecretRef>,
}

/// Specifies a 256-bit customer-supplied encryption key, encoded in
/// RFC 4648 base64 to either encrypt or decrypt this resource.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotForProviderSourceDiskEncryptionKeyRawKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a Disk in compute to populate sourceDisk.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotForProviderSourceDiskRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SnapshotForProviderSourceDiskRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotForProviderSourceDiskRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SnapshotForProviderSourceDiskRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SnapshotForProviderSourceDiskRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SnapshotForProviderSourceDiskRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SnapshotForProviderSourceDiskRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Disk in compute to populate sourceDisk.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotForProviderSourceDiskSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SnapshotForProviderSourceDiskSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotForProviderSourceDiskSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SnapshotForProviderSourceDiskSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SnapshotForProviderSourceDiskSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SnapshotForProviderSourceDiskSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SnapshotForProviderSourceDiskSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotInitProvider {
    /// Creates the new snapshot in the snapshot chain labeled with the
    /// specified name. The chain name must be 1-63 characters long and
    /// comply with RFC1035. This is an uncommon option only for advanced
    /// service owners who needs to create separate snapshot chains, for
    /// example, for chargeback tracking.  When you describe your snapshot
    /// resource, this field is visible only if it has a non-empty value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chainName")]
    pub chain_name: Option<String>,
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Labels to apply to this Snapshot.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Encrypts the snapshot using a customer-supplied encryption key.
    /// After you encrypt a snapshot using a customer-supplied key, you must
    /// provide the same key if you use the snapshot later. For example, you
    /// must provide the encryption key when you create a disk from the
    /// encrypted snapshot in a future request.
    /// Customer-supplied encryption keys do not protect access to metadata of
    /// the snapshot.
    /// If you do not provide an encryption key when creating the snapshot,
    /// then the snapshot will be encrypted using an automatically generated
    /// key and you do not need to provide a key to use the snapshot later.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotEncryptionKey")]
    pub snapshot_encryption_key: Option<SnapshotInitProviderSnapshotEncryptionKey>,
    /// A reference to the disk used to create this snapshot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDisk")]
    pub source_disk: Option<String>,
    /// The customer-supplied encryption key of the source snapshot. Required
    /// if the source snapshot is protected by a customer-supplied encryption
    /// key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDiskEncryptionKey")]
    pub source_disk_encryption_key: Option<SnapshotInitProviderSourceDiskEncryptionKey>,
    /// Reference to a Disk in compute to populate sourceDisk.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDiskRef")]
    pub source_disk_ref: Option<SnapshotInitProviderSourceDiskRef>,
    /// Selector for a Disk in compute to populate sourceDisk.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDiskSelector")]
    pub source_disk_selector: Option<SnapshotInitProviderSourceDiskSelector>,
    /// Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageLocations")]
    pub storage_locations: Option<Vec<String>>,
    /// A reference to the zone where the disk is hosted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// Encrypts the snapshot using a customer-supplied encryption key.
/// After you encrypt a snapshot using a customer-supplied key, you must
/// provide the same key if you use the snapshot later. For example, you
/// must provide the encryption key when you create a disk from the
/// encrypted snapshot in a future request.
/// Customer-supplied encryption keys do not protect access to metadata of
/// the snapshot.
/// If you do not provide an encryption key when creating the snapshot,
/// then the snapshot will be encrypted using an automatically generated
/// key and you do not need to provide a key to use the snapshot later.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotInitProviderSnapshotEncryptionKey {
    /// The name of the encryption key that is stored in Google Cloud KMS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeySelfLink")]
    pub kms_key_self_link: Option<String>,
    /// The service account used for the encryption request for the given KMS key.
    /// If absent, the Compute Engine Service Agent service account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyServiceAccount")]
    pub kms_key_service_account: Option<String>,
    /// Specifies a 256-bit customer-supplied encryption key, encoded in
    /// RFC 4648 base64 to either encrypt or decrypt this resource.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawKeySecretRef")]
    pub raw_key_secret_ref: Option<SnapshotInitProviderSnapshotEncryptionKeyRawKeySecretRef>,
}

/// Specifies a 256-bit customer-supplied encryption key, encoded in
/// RFC 4648 base64 to either encrypt or decrypt this resource.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotInitProviderSnapshotEncryptionKeyRawKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// The customer-supplied encryption key of the source snapshot. Required
/// if the source snapshot is protected by a customer-supplied encryption
/// key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotInitProviderSourceDiskEncryptionKey {
    /// The service account used for the encryption request for the given KMS key.
    /// If absent, the Compute Engine Service Agent service account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyServiceAccount")]
    pub kms_key_service_account: Option<String>,
    /// Specifies a 256-bit customer-supplied encryption key, encoded in
    /// RFC 4648 base64 to either encrypt or decrypt this resource.
    /// Note: This property is sensitive and will not be displayed in the plan.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rawKeySecretRef")]
    pub raw_key_secret_ref: Option<SnapshotInitProviderSourceDiskEncryptionKeyRawKeySecretRef>,
}

/// Specifies a 256-bit customer-supplied encryption key, encoded in
/// RFC 4648 base64 to either encrypt or decrypt this resource.
/// Note: This property is sensitive and will not be displayed in the plan.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotInitProviderSourceDiskEncryptionKeyRawKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Reference to a Disk in compute to populate sourceDisk.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotInitProviderSourceDiskRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SnapshotInitProviderSourceDiskRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotInitProviderSourceDiskRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SnapshotInitProviderSourceDiskRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SnapshotInitProviderSourceDiskRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SnapshotInitProviderSourceDiskRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SnapshotInitProviderSourceDiskRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Disk in compute to populate sourceDisk.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotInitProviderSourceDiskSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SnapshotInitProviderSourceDiskSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotInitProviderSourceDiskSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SnapshotInitProviderSourceDiskSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SnapshotInitProviderSourceDiskSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SnapshotInitProviderSourceDiskSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SnapshotInitProviderSourceDiskSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SnapshotProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SnapshotProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SnapshotProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SnapshotProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SnapshotProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<SnapshotPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<SnapshotPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<SnapshotPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<SnapshotPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<SnapshotPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SnapshotPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum SnapshotPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// SnapshotStatus defines the observed state of Snapshot.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<SnapshotStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotStatusAtProvider {
    /// Creates the new snapshot in the snapshot chain labeled with the
    /// specified name. The chain name must be 1-63 characters long and
    /// comply with RFC1035. This is an uncommon option only for advanced
    /// service owners who needs to create separate snapshot chains, for
    /// example, for chargeback tracking.  When you describe your snapshot
    /// resource, this field is visible only if it has a non-empty value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chainName")]
    pub chain_name: Option<String>,
    /// Creation timestamp in RFC3339 text format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTimestamp")]
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Size of the snapshot, specified in GB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSizeGb")]
    pub disk_size_gb: Option<f64>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// an identifier for the resource with format projects/{{project}}/global/snapshots/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The fingerprint used for optimistic locking of this resource. Used
    /// internally during updates.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelFingerprint")]
    pub label_fingerprint: Option<String>,
    /// Labels to apply to this Snapshot.
    /// Note: This field is non-authoritative, and will only manage the labels present in your configuration.
    /// Please refer to the field effective_labels for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// A list of public visible licenses that apply to this snapshot. This
    /// can be because the original image had licenses attached (such as a
    /// Windows image).  snapshotEncryptionKey nested object Encrypts the
    /// snapshot using a customer-supplied encryption key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub licenses: Option<Vec<String>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The URI of the created resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    pub self_link: Option<String>,
    /// Encrypts the snapshot using a customer-supplied encryption key.
    /// After you encrypt a snapshot using a customer-supplied key, you must
    /// provide the same key if you use the snapshot later. For example, you
    /// must provide the encryption key when you create a disk from the
    /// encrypted snapshot in a future request.
    /// Customer-supplied encryption keys do not protect access to metadata of
    /// the snapshot.
    /// If you do not provide an encryption key when creating the snapshot,
    /// then the snapshot will be encrypted using an automatically generated
    /// key and you do not need to provide a key to use the snapshot later.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotEncryptionKey")]
    pub snapshot_encryption_key: Option<SnapshotStatusAtProviderSnapshotEncryptionKey>,
    /// The unique identifier for the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotId")]
    pub snapshot_id: Option<f64>,
    /// A reference to the disk used to create this snapshot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDisk")]
    pub source_disk: Option<String>,
    /// The customer-supplied encryption key of the source snapshot. Required
    /// if the source snapshot is protected by a customer-supplied encryption
    /// key.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDiskEncryptionKey")]
    pub source_disk_encryption_key: Option<SnapshotStatusAtProviderSourceDiskEncryptionKey>,
    /// A size of the storage used by the snapshot. As snapshots share
    /// storage, this number is expected to change with snapshot
    /// creation/deletion.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageBytes")]
    pub storage_bytes: Option<f64>,
    /// Cloud Storage bucket storage location of the snapshot (regional or multi-regional).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageLocations")]
    pub storage_locations: Option<Vec<String>>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// A reference to the zone where the disk is hosted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// Encrypts the snapshot using a customer-supplied encryption key.
/// After you encrypt a snapshot using a customer-supplied key, you must
/// provide the same key if you use the snapshot later. For example, you
/// must provide the encryption key when you create a disk from the
/// encrypted snapshot in a future request.
/// Customer-supplied encryption keys do not protect access to metadata of
/// the snapshot.
/// If you do not provide an encryption key when creating the snapshot,
/// then the snapshot will be encrypted using an automatically generated
/// key and you do not need to provide a key to use the snapshot later.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotStatusAtProviderSnapshotEncryptionKey {
    /// The name of the encryption key that is stored in Google Cloud KMS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeySelfLink")]
    pub kms_key_self_link: Option<String>,
    /// The service account used for the encryption request for the given KMS key.
    /// If absent, the Compute Engine Service Agent service account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyServiceAccount")]
    pub kms_key_service_account: Option<String>,
    /// (Output)
    /// The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied
    /// encryption key that protects this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub sha256: Option<String>,
}

/// The customer-supplied encryption key of the source snapshot. Required
/// if the source snapshot is protected by a customer-supplied encryption
/// key.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct SnapshotStatusAtProviderSourceDiskEncryptionKey {
    /// The service account used for the encryption request for the given KMS key.
    /// If absent, the Compute Engine Service Agent service account is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyServiceAccount")]
    pub kms_key_service_account: Option<String>,
}


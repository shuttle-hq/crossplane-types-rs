// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// AutoscalerSpec defines the desired state of Autoscaler
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta2", kind = "Autoscaler", plural = "autoscalers")]
#[kube(status = "AutoscalerStatus")]
pub struct AutoscalerSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<AutoscalerDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: AutoscalerForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<AutoscalerInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<AutoscalerProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<AutoscalerPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<AutoscalerWriteConnectionSecretToRef>,
}

/// AutoscalerSpec defines the desired state of Autoscaler
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalerDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerForProvider {
    /// The configuration parameters for the autoscaling algorithm. You can
    /// define one or more of the policies for an autoscaler: cpuUtilization,
    /// customMetricUtilizations, and loadBalancingUtilization.
    /// If none of these are specified, the default will be to autoscale based
    /// on cpuUtilization to 0.6 or 60%.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingPolicy")]
    pub autoscaling_policy: Option<AutoscalerForProviderAutoscalingPolicy>,
    /// A description of a scaling schedule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// URL of the managed instance group that this autoscaler will scale.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    /// Reference to a InstanceGroupManager in compute to populate target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRef")]
    pub target_ref: Option<AutoscalerForProviderTargetRef>,
    /// Selector for a InstanceGroupManager in compute to populate target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetSelector")]
    pub target_selector: Option<AutoscalerForProviderTargetSelector>,
    /// URL of the zone where the instance group resides.
    pub zone: String,
}

/// The configuration parameters for the autoscaling algorithm. You can
/// define one or more of the policies for an autoscaler: cpuUtilization,
/// customMetricUtilizations, and loadBalancingUtilization.
/// If none of these are specified, the default will be to autoscale based
/// on cpuUtilization to 0.6 or 60%.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerForProviderAutoscalingPolicy {
    /// The number of seconds that the autoscaler should wait before it
    /// starts collecting information from a new instance. This prevents
    /// the autoscaler from collecting information when the instance is
    /// initializing, during which the collected usage would not be
    /// reliable. The default time autoscaler waits is 60 seconds.
    /// Virtual machine initialization times might vary because of
    /// numerous factors. We recommend that you test how long an
    /// instance may take to initialize. To do this, create an instance
    /// and time the startup process.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cooldownPeriod")]
    pub cooldown_period: Option<f64>,
    /// Defines the CPU utilization policy that allows the autoscaler to
    /// scale based on the average CPU utilization of a managed instance
    /// group.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuUtilization")]
    pub cpu_utilization: Option<AutoscalerForProviderAutoscalingPolicyCpuUtilization>,
    /// Configuration parameters of autoscaling based on a load balancer.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancingUtilization")]
    pub load_balancing_utilization: Option<AutoscalerForProviderAutoscalingPolicyLoadBalancingUtilization>,
    /// The maximum number of instances that the autoscaler can scale up
    /// to. This is required when creating or updating an autoscaler. The
    /// maximum number of replicas should not be lower than minimal number
    /// of replicas.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxReplicas")]
    pub max_replicas: Option<f64>,
    /// Configuration parameters of autoscaling based on a custom metric.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metric: Option<Vec<AutoscalerForProviderAutoscalingPolicyMetric>>,
    /// The minimum number of replicas that the autoscaler can scale down
    /// to. This cannot be less than 0. If not provided, autoscaler will
    /// choose a default value depending on maximum number of instances
    /// allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minReplicas")]
    pub min_replicas: Option<f64>,
    /// Defines operating mode for this policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// Defines scale in controls to reduce the risk of response latency
    /// and outages due to abrupt scale-in events
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scaleInControl")]
    pub scale_in_control: Option<AutoscalerForProviderAutoscalingPolicyScaleInControl>,
    /// Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler and they can overlap.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingSchedules")]
    pub scaling_schedules: Option<Vec<AutoscalerForProviderAutoscalingPolicyScalingSchedules>>,
}

/// Defines the CPU utilization policy that allows the autoscaler to
/// scale based on the average CPU utilization of a managed instance
/// group.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerForProviderAutoscalingPolicyCpuUtilization {
    /// Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predictiveMethod")]
    pub predictive_method: Option<String>,
    /// URL of the managed instance group that this autoscaler will scale.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<f64>,
}

/// Configuration parameters of autoscaling based on a load balancer.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerForProviderAutoscalingPolicyLoadBalancingUtilization {
    /// URL of the managed instance group that this autoscaler will scale.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerForProviderAutoscalingPolicyMetric {
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// URL of the managed instance group that this autoscaler will scale.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<f64>,
    /// Defines how target utilization value is expressed for a
    /// Stackdriver Monitoring metric.
    /// Possible values are: GAUGE, DELTA_PER_SECOND, DELTA_PER_MINUTE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Defines scale in controls to reduce the risk of response latency
/// and outages due to abrupt scale-in events
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerForProviderAutoscalingPolicyScaleInControl {
    /// A nested object resource
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxScaledInReplicas")]
    pub max_scaled_in_replicas: Option<AutoscalerForProviderAutoscalingPolicyScaleInControlMaxScaledInReplicas>,
    /// How long back autoscaling should look when computing recommendations
    /// to include directives regarding slower scale down, as described above.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeWindowSec")]
    pub time_window_sec: Option<f64>,
}

/// A nested object resource
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerForProviderAutoscalingPolicyScaleInControlMaxScaledInReplicas {
    /// Specifies a fixed number of VM instances. This must be a positive
    /// integer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fixed: Option<f64>,
    /// Specifies a percentage of instances between 0 to 100%, inclusive.
    /// For example, specify 80 for 80%.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerForProviderAutoscalingPolicyScalingSchedules {
    /// A description of a scaling schedule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// A boolean value that specifies if a scaling schedule can influence autoscaler recommendations. If set to true, then a scaling schedule has no effect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// The duration of time intervals (in seconds) for which this scaling schedule will be running. The minimum allowed value is 300.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "durationSec")]
    pub duration_sec: Option<f64>,
    /// Minimum number of VM instances that autoscaler will recommend in time intervals starting according to schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minRequiredReplicas")]
    pub min_required_replicas: Option<f64>,
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The start timestamps of time intervals when this scaling schedule should provide a scaling signal. This field uses the extended cron format (with an optional year field).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
    /// The time zone to be used when interpreting the schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    pub time_zone: Option<String>,
}

/// Reference to a InstanceGroupManager in compute to populate target.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerForProviderTargetRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AutoscalerForProviderTargetRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerForProviderTargetRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AutoscalerForProviderTargetRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AutoscalerForProviderTargetRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalerForProviderTargetRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalerForProviderTargetRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a InstanceGroupManager in compute to populate target.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerForProviderTargetSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AutoscalerForProviderTargetSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerForProviderTargetSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AutoscalerForProviderTargetSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AutoscalerForProviderTargetSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalerForProviderTargetSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalerForProviderTargetSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerInitProvider {
    /// The configuration parameters for the autoscaling algorithm. You can
    /// define one or more of the policies for an autoscaler: cpuUtilization,
    /// customMetricUtilizations, and loadBalancingUtilization.
    /// If none of these are specified, the default will be to autoscale based
    /// on cpuUtilization to 0.6 or 60%.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingPolicy")]
    pub autoscaling_policy: Option<AutoscalerInitProviderAutoscalingPolicy>,
    /// A description of a scaling schedule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// URL of the managed instance group that this autoscaler will scale.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    /// Reference to a InstanceGroupManager in compute to populate target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetRef")]
    pub target_ref: Option<AutoscalerInitProviderTargetRef>,
    /// Selector for a InstanceGroupManager in compute to populate target.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetSelector")]
    pub target_selector: Option<AutoscalerInitProviderTargetSelector>,
}

/// The configuration parameters for the autoscaling algorithm. You can
/// define one or more of the policies for an autoscaler: cpuUtilization,
/// customMetricUtilizations, and loadBalancingUtilization.
/// If none of these are specified, the default will be to autoscale based
/// on cpuUtilization to 0.6 or 60%.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerInitProviderAutoscalingPolicy {
    /// The number of seconds that the autoscaler should wait before it
    /// starts collecting information from a new instance. This prevents
    /// the autoscaler from collecting information when the instance is
    /// initializing, during which the collected usage would not be
    /// reliable. The default time autoscaler waits is 60 seconds.
    /// Virtual machine initialization times might vary because of
    /// numerous factors. We recommend that you test how long an
    /// instance may take to initialize. To do this, create an instance
    /// and time the startup process.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cooldownPeriod")]
    pub cooldown_period: Option<f64>,
    /// Defines the CPU utilization policy that allows the autoscaler to
    /// scale based on the average CPU utilization of a managed instance
    /// group.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuUtilization")]
    pub cpu_utilization: Option<AutoscalerInitProviderAutoscalingPolicyCpuUtilization>,
    /// Configuration parameters of autoscaling based on a load balancer.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancingUtilization")]
    pub load_balancing_utilization: Option<AutoscalerInitProviderAutoscalingPolicyLoadBalancingUtilization>,
    /// The maximum number of instances that the autoscaler can scale up
    /// to. This is required when creating or updating an autoscaler. The
    /// maximum number of replicas should not be lower than minimal number
    /// of replicas.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxReplicas")]
    pub max_replicas: Option<f64>,
    /// Configuration parameters of autoscaling based on a custom metric.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metric: Option<Vec<AutoscalerInitProviderAutoscalingPolicyMetric>>,
    /// The minimum number of replicas that the autoscaler can scale down
    /// to. This cannot be less than 0. If not provided, autoscaler will
    /// choose a default value depending on maximum number of instances
    /// allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minReplicas")]
    pub min_replicas: Option<f64>,
    /// Defines operating mode for this policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// Defines scale in controls to reduce the risk of response latency
    /// and outages due to abrupt scale-in events
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scaleInControl")]
    pub scale_in_control: Option<AutoscalerInitProviderAutoscalingPolicyScaleInControl>,
    /// Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler and they can overlap.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingSchedules")]
    pub scaling_schedules: Option<Vec<AutoscalerInitProviderAutoscalingPolicyScalingSchedules>>,
}

/// Defines the CPU utilization policy that allows the autoscaler to
/// scale based on the average CPU utilization of a managed instance
/// group.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerInitProviderAutoscalingPolicyCpuUtilization {
    /// Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predictiveMethod")]
    pub predictive_method: Option<String>,
    /// URL of the managed instance group that this autoscaler will scale.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<f64>,
}

/// Configuration parameters of autoscaling based on a load balancer.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerInitProviderAutoscalingPolicyLoadBalancingUtilization {
    /// URL of the managed instance group that this autoscaler will scale.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerInitProviderAutoscalingPolicyMetric {
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// URL of the managed instance group that this autoscaler will scale.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<f64>,
    /// Defines how target utilization value is expressed for a
    /// Stackdriver Monitoring metric.
    /// Possible values are: GAUGE, DELTA_PER_SECOND, DELTA_PER_MINUTE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Defines scale in controls to reduce the risk of response latency
/// and outages due to abrupt scale-in events
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerInitProviderAutoscalingPolicyScaleInControl {
    /// A nested object resource
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxScaledInReplicas")]
    pub max_scaled_in_replicas: Option<AutoscalerInitProviderAutoscalingPolicyScaleInControlMaxScaledInReplicas>,
    /// How long back autoscaling should look when computing recommendations
    /// to include directives regarding slower scale down, as described above.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeWindowSec")]
    pub time_window_sec: Option<f64>,
}

/// A nested object resource
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerInitProviderAutoscalingPolicyScaleInControlMaxScaledInReplicas {
    /// Specifies a fixed number of VM instances. This must be a positive
    /// integer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fixed: Option<f64>,
    /// Specifies a percentage of instances between 0 to 100%, inclusive.
    /// For example, specify 80 for 80%.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerInitProviderAutoscalingPolicyScalingSchedules {
    /// A description of a scaling schedule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// A boolean value that specifies if a scaling schedule can influence autoscaler recommendations. If set to true, then a scaling schedule has no effect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// The duration of time intervals (in seconds) for which this scaling schedule will be running. The minimum allowed value is 300.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "durationSec")]
    pub duration_sec: Option<f64>,
    /// Minimum number of VM instances that autoscaler will recommend in time intervals starting according to schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minRequiredReplicas")]
    pub min_required_replicas: Option<f64>,
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The start timestamps of time intervals when this scaling schedule should provide a scaling signal. This field uses the extended cron format (with an optional year field).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
    /// The time zone to be used when interpreting the schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    pub time_zone: Option<String>,
}

/// Reference to a InstanceGroupManager in compute to populate target.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerInitProviderTargetRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AutoscalerInitProviderTargetRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerInitProviderTargetRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AutoscalerInitProviderTargetRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AutoscalerInitProviderTargetRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalerInitProviderTargetRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalerInitProviderTargetRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a InstanceGroupManager in compute to populate target.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerInitProviderTargetSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AutoscalerInitProviderTargetSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerInitProviderTargetSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AutoscalerInitProviderTargetSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AutoscalerInitProviderTargetSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalerInitProviderTargetSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalerInitProviderTargetSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AutoscalerProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AutoscalerProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AutoscalerProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalerProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalerProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<AutoscalerPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<AutoscalerPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<AutoscalerPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<AutoscalerPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<AutoscalerPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalerPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum AutoscalerPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// AutoscalerStatus defines the observed state of Autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<AutoscalerStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerStatusAtProvider {
    /// The configuration parameters for the autoscaling algorithm. You can
    /// define one or more of the policies for an autoscaler: cpuUtilization,
    /// customMetricUtilizations, and loadBalancingUtilization.
    /// If none of these are specified, the default will be to autoscale based
    /// on cpuUtilization to 0.6 or 60%.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingPolicy")]
    pub autoscaling_policy: Option<AutoscalerStatusAtProviderAutoscalingPolicy>,
    /// Creation timestamp in RFC3339 text format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTimestamp")]
    pub creation_timestamp: Option<String>,
    /// A description of a scaling schedule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/zones/{{zone}}/autoscalers/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The URI of the created resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    pub self_link: Option<String>,
    /// URL of the managed instance group that this autoscaler will scale.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    /// URL of the zone where the instance group resides.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// The configuration parameters for the autoscaling algorithm. You can
/// define one or more of the policies for an autoscaler: cpuUtilization,
/// customMetricUtilizations, and loadBalancingUtilization.
/// If none of these are specified, the default will be to autoscale based
/// on cpuUtilization to 0.6 or 60%.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerStatusAtProviderAutoscalingPolicy {
    /// The number of seconds that the autoscaler should wait before it
    /// starts collecting information from a new instance. This prevents
    /// the autoscaler from collecting information when the instance is
    /// initializing, during which the collected usage would not be
    /// reliable. The default time autoscaler waits is 60 seconds.
    /// Virtual machine initialization times might vary because of
    /// numerous factors. We recommend that you test how long an
    /// instance may take to initialize. To do this, create an instance
    /// and time the startup process.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cooldownPeriod")]
    pub cooldown_period: Option<f64>,
    /// Defines the CPU utilization policy that allows the autoscaler to
    /// scale based on the average CPU utilization of a managed instance
    /// group.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cpuUtilization")]
    pub cpu_utilization: Option<AutoscalerStatusAtProviderAutoscalingPolicyCpuUtilization>,
    /// Configuration parameters of autoscaling based on a load balancer.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancingUtilization")]
    pub load_balancing_utilization: Option<AutoscalerStatusAtProviderAutoscalingPolicyLoadBalancingUtilization>,
    /// The maximum number of instances that the autoscaler can scale up
    /// to. This is required when creating or updating an autoscaler. The
    /// maximum number of replicas should not be lower than minimal number
    /// of replicas.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxReplicas")]
    pub max_replicas: Option<f64>,
    /// Configuration parameters of autoscaling based on a custom metric.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metric: Option<Vec<AutoscalerStatusAtProviderAutoscalingPolicyMetric>>,
    /// The minimum number of replicas that the autoscaler can scale down
    /// to. This cannot be less than 0. If not provided, autoscaler will
    /// choose a default value depending on maximum number of instances
    /// allowed.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minReplicas")]
    pub min_replicas: Option<f64>,
    /// Defines operating mode for this policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// Defines scale in controls to reduce the risk of response latency
    /// and outages due to abrupt scale-in events
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scaleInControl")]
    pub scale_in_control: Option<AutoscalerStatusAtProviderAutoscalingPolicyScaleInControl>,
    /// Scaling schedules defined for an autoscaler. Multiple schedules can be set on an autoscaler and they can overlap.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scalingSchedules")]
    pub scaling_schedules: Option<Vec<AutoscalerStatusAtProviderAutoscalingPolicyScalingSchedules>>,
}

/// Defines the CPU utilization policy that allows the autoscaler to
/// scale based on the average CPU utilization of a managed instance
/// group.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerStatusAtProviderAutoscalingPolicyCpuUtilization {
    /// Indicates whether predictive autoscaling based on CPU metric is enabled. Valid values are:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "predictiveMethod")]
    pub predictive_method: Option<String>,
    /// URL of the managed instance group that this autoscaler will scale.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<f64>,
}

/// Configuration parameters of autoscaling based on a load balancer.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerStatusAtProviderAutoscalingPolicyLoadBalancingUtilization {
    /// URL of the managed instance group that this autoscaler will scale.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerStatusAtProviderAutoscalingPolicyMetric {
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// URL of the managed instance group that this autoscaler will scale.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<f64>,
    /// Defines how target utilization value is expressed for a
    /// Stackdriver Monitoring metric.
    /// Possible values are: GAUGE, DELTA_PER_SECOND, DELTA_PER_MINUTE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Defines scale in controls to reduce the risk of response latency
/// and outages due to abrupt scale-in events
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerStatusAtProviderAutoscalingPolicyScaleInControl {
    /// A nested object resource
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxScaledInReplicas")]
    pub max_scaled_in_replicas: Option<AutoscalerStatusAtProviderAutoscalingPolicyScaleInControlMaxScaledInReplicas>,
    /// How long back autoscaling should look when computing recommendations
    /// to include directives regarding slower scale down, as described above.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeWindowSec")]
    pub time_window_sec: Option<f64>,
}

/// A nested object resource
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerStatusAtProviderAutoscalingPolicyScaleInControlMaxScaledInReplicas {
    /// Specifies a fixed number of VM instances. This must be a positive
    /// integer.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fixed: Option<f64>,
    /// Specifies a percentage of instances between 0 to 100%, inclusive.
    /// For example, specify 80 for 80%.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct AutoscalerStatusAtProviderAutoscalingPolicyScalingSchedules {
    /// A description of a scaling schedule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// A boolean value that specifies if a scaling schedule can influence autoscaler recommendations. If set to true, then a scaling schedule has no effect.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// The duration of time intervals (in seconds) for which this scaling schedule will be running. The minimum allowed value is 300.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "durationSec")]
    pub duration_sec: Option<f64>,
    /// Minimum number of VM instances that autoscaler will recommend in time intervals starting according to schedule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minRequiredReplicas")]
    pub min_required_replicas: Option<f64>,
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The start timestamps of time intervals when this scaling schedule should provide a scaling signal. This field uses the extended cron format (with an optional year field).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
    /// The time zone to be used when interpreting the schedule. The value of this field must be a time zone name from the tz database: http://en.wikipedia.org/wiki/Tz_database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    pub time_zone: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// BackendBucketSpec defines the desired state of BackendBucket
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta2", kind = "BackendBucket", plural = "backendbuckets")]
#[kube(status = "BackendBucketStatus")]
pub struct BackendBucketSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<BackendBucketDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: BackendBucketForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<BackendBucketInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<BackendBucketProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<BackendBucketPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<BackendBucketWriteConnectionSecretToRef>,
}

/// BackendBucketSpec defines the desired state of BackendBucket
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketForProvider {
    /// Cloud Storage bucket name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    pub bucket_name: Option<String>,
    /// Reference to a Bucket in storage to populate bucketName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketNameRef")]
    pub bucket_name_ref: Option<BackendBucketForProviderBucketNameRef>,
    /// Selector for a Bucket in storage to populate bucketName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketNameSelector")]
    pub bucket_name_selector: Option<BackendBucketForProviderBucketNameSelector>,
    /// Cloud CDN configuration for this Backend Bucket.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdnPolicy")]
    pub cdn_policy: Option<BackendBucketForProviderCdnPolicy>,
    /// Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
    /// Possible values are: AUTOMATIC, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionMode")]
    pub compression_mode: Option<String>,
    /// Headers that the HTTP/S load balancer should add to proxied responses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customResponseHeaders")]
    pub custom_response_headers: Option<Vec<String>>,
    /// An optional textual description of the resource; provided by the
    /// client when the resource is created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The security policy associated with this backend bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "edgeSecurityPolicy")]
    pub edge_security_policy: Option<String>,
    /// Reference to a SecurityPolicy in compute to populate edgeSecurityPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "edgeSecurityPolicyRef")]
    pub edge_security_policy_ref: Option<BackendBucketForProviderEdgeSecurityPolicyRef>,
    /// Selector for a SecurityPolicy in compute to populate edgeSecurityPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "edgeSecurityPolicySelector")]
    pub edge_security_policy_selector: Option<BackendBucketForProviderEdgeSecurityPolicySelector>,
    /// If true, enable Cloud CDN for this BackendBucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCdn")]
    pub enable_cdn: Option<bool>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

/// Reference to a Bucket in storage to populate bucketName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketForProviderBucketNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendBucketForProviderBucketNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketForProviderBucketNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendBucketForProviderBucketNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendBucketForProviderBucketNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketForProviderBucketNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketForProviderBucketNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in storage to populate bucketName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketForProviderBucketNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendBucketForProviderBucketNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketForProviderBucketNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendBucketForProviderBucketNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendBucketForProviderBucketNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketForProviderBucketNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketForProviderBucketNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Cloud CDN configuration for this Backend Bucket.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketForProviderCdnPolicy {
    /// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bypassCacheOnRequestHeaders")]
    pub bypass_cache_on_request_headers: Option<Vec<BackendBucketForProviderCdnPolicyBypassCacheOnRequestHeaders>>,
    /// The CacheKeyPolicy for this CdnPolicy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheKeyPolicy")]
    pub cache_key_policy: Option<BackendBucketForProviderCdnPolicyCacheKeyPolicy>,
    /// Specifies the cache setting for all responses from this backend.
    /// The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC
    /// Possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL, CACHE_ALL_STATIC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheMode")]
    pub cache_mode: Option<String>,
    /// Specifies the maximum allowed TTL for cached content served by this origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTtl")]
    pub client_ttl: Option<f64>,
    /// Specifies the default TTL for cached content served by this origin for responses
    /// that do not have an existing valid TTL (max-age or s-max-age).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTtl")]
    pub default_ttl: Option<f64>,
    /// Specifies the maximum allowed TTL for cached content served by this origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTtl")]
    pub max_ttl: Option<f64>,
    /// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCaching")]
    pub negative_caching: Option<bool>,
    /// Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
    /// Omitting the policy and leaving negativeCaching enabled will use Cloud CDN's default cache TTLs.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCachingPolicy")]
    pub negative_caching_policy: Option<Vec<BackendBucketForProviderCdnPolicyNegativeCachingPolicy>>,
    /// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCoalescing")]
    pub request_coalescing: Option<bool>,
    /// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serveWhileStale")]
    pub serve_while_stale: Option<f64>,
    /// Maximum number of seconds the response to a signed URL request will
    /// be considered fresh. After this time period,
    /// the response will be revalidated before being served.
    /// When serving responses to signed URL requests,
    /// Cloud CDN will internally behave as though
    /// all responses from this backend had a "Cache-Control: public,
    /// max-age=[TTL]" header, regardless of any existing Cache-Control
    /// header. The actual headers served in responses will not be altered.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signedUrlCacheMaxAgeSec")]
    pub signed_url_cache_max_age_sec: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketForProviderCdnPolicyBypassCacheOnRequestHeaders {
    /// The header field name to match on when bypassing cache. Values are case-insensitive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

/// The CacheKeyPolicy for this CdnPolicy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketForProviderCdnPolicyCacheKeyPolicy {
    /// Allows HTTP request headers (by name) to be used in the
    /// cache key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeHttpHeaders")]
    pub include_http_headers: Option<Vec<String>>,
    /// Names of query string parameters to include in cache keys.
    /// Default parameters are always included. '&' and '=' will
    /// be percent encoded and not treated as delimiters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringWhitelist")]
    pub query_string_whitelist: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketForProviderCdnPolicyNegativeCachingPolicy {
    /// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501
    /// can be specified as values, and you cannot specify a status code more than once.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<f64>,
    /// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
    /// (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<f64>,
}

/// Reference to a SecurityPolicy in compute to populate edgeSecurityPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketForProviderEdgeSecurityPolicyRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendBucketForProviderEdgeSecurityPolicyRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketForProviderEdgeSecurityPolicyRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendBucketForProviderEdgeSecurityPolicyRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendBucketForProviderEdgeSecurityPolicyRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketForProviderEdgeSecurityPolicyRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketForProviderEdgeSecurityPolicyRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a SecurityPolicy in compute to populate edgeSecurityPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketForProviderEdgeSecurityPolicySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendBucketForProviderEdgeSecurityPolicySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketForProviderEdgeSecurityPolicySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendBucketForProviderEdgeSecurityPolicySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendBucketForProviderEdgeSecurityPolicySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketForProviderEdgeSecurityPolicySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketForProviderEdgeSecurityPolicySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketInitProvider {
    /// Cloud Storage bucket name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    pub bucket_name: Option<String>,
    /// Reference to a Bucket in storage to populate bucketName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketNameRef")]
    pub bucket_name_ref: Option<BackendBucketInitProviderBucketNameRef>,
    /// Selector for a Bucket in storage to populate bucketName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketNameSelector")]
    pub bucket_name_selector: Option<BackendBucketInitProviderBucketNameSelector>,
    /// Cloud CDN configuration for this Backend Bucket.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdnPolicy")]
    pub cdn_policy: Option<BackendBucketInitProviderCdnPolicy>,
    /// Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
    /// Possible values are: AUTOMATIC, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionMode")]
    pub compression_mode: Option<String>,
    /// Headers that the HTTP/S load balancer should add to proxied responses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customResponseHeaders")]
    pub custom_response_headers: Option<Vec<String>>,
    /// An optional textual description of the resource; provided by the
    /// client when the resource is created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The security policy associated with this backend bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "edgeSecurityPolicy")]
    pub edge_security_policy: Option<String>,
    /// Reference to a SecurityPolicy in compute to populate edgeSecurityPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "edgeSecurityPolicyRef")]
    pub edge_security_policy_ref: Option<BackendBucketInitProviderEdgeSecurityPolicyRef>,
    /// Selector for a SecurityPolicy in compute to populate edgeSecurityPolicy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "edgeSecurityPolicySelector")]
    pub edge_security_policy_selector: Option<BackendBucketInitProviderEdgeSecurityPolicySelector>,
    /// If true, enable Cloud CDN for this BackendBucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCdn")]
    pub enable_cdn: Option<bool>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

/// Reference to a Bucket in storage to populate bucketName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketInitProviderBucketNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendBucketInitProviderBucketNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketInitProviderBucketNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendBucketInitProviderBucketNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendBucketInitProviderBucketNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketInitProviderBucketNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketInitProviderBucketNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in storage to populate bucketName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketInitProviderBucketNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendBucketInitProviderBucketNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketInitProviderBucketNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendBucketInitProviderBucketNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendBucketInitProviderBucketNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketInitProviderBucketNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketInitProviderBucketNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Cloud CDN configuration for this Backend Bucket.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketInitProviderCdnPolicy {
    /// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bypassCacheOnRequestHeaders")]
    pub bypass_cache_on_request_headers: Option<Vec<BackendBucketInitProviderCdnPolicyBypassCacheOnRequestHeaders>>,
    /// The CacheKeyPolicy for this CdnPolicy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheKeyPolicy")]
    pub cache_key_policy: Option<BackendBucketInitProviderCdnPolicyCacheKeyPolicy>,
    /// Specifies the cache setting for all responses from this backend.
    /// The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC
    /// Possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL, CACHE_ALL_STATIC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheMode")]
    pub cache_mode: Option<String>,
    /// Specifies the maximum allowed TTL for cached content served by this origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTtl")]
    pub client_ttl: Option<f64>,
    /// Specifies the default TTL for cached content served by this origin for responses
    /// that do not have an existing valid TTL (max-age or s-max-age).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTtl")]
    pub default_ttl: Option<f64>,
    /// Specifies the maximum allowed TTL for cached content served by this origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTtl")]
    pub max_ttl: Option<f64>,
    /// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCaching")]
    pub negative_caching: Option<bool>,
    /// Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
    /// Omitting the policy and leaving negativeCaching enabled will use Cloud CDN's default cache TTLs.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCachingPolicy")]
    pub negative_caching_policy: Option<Vec<BackendBucketInitProviderCdnPolicyNegativeCachingPolicy>>,
    /// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCoalescing")]
    pub request_coalescing: Option<bool>,
    /// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serveWhileStale")]
    pub serve_while_stale: Option<f64>,
    /// Maximum number of seconds the response to a signed URL request will
    /// be considered fresh. After this time period,
    /// the response will be revalidated before being served.
    /// When serving responses to signed URL requests,
    /// Cloud CDN will internally behave as though
    /// all responses from this backend had a "Cache-Control: public,
    /// max-age=[TTL]" header, regardless of any existing Cache-Control
    /// header. The actual headers served in responses will not be altered.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signedUrlCacheMaxAgeSec")]
    pub signed_url_cache_max_age_sec: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketInitProviderCdnPolicyBypassCacheOnRequestHeaders {
    /// The header field name to match on when bypassing cache. Values are case-insensitive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

/// The CacheKeyPolicy for this CdnPolicy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketInitProviderCdnPolicyCacheKeyPolicy {
    /// Allows HTTP request headers (by name) to be used in the
    /// cache key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeHttpHeaders")]
    pub include_http_headers: Option<Vec<String>>,
    /// Names of query string parameters to include in cache keys.
    /// Default parameters are always included. '&' and '=' will
    /// be percent encoded and not treated as delimiters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringWhitelist")]
    pub query_string_whitelist: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketInitProviderCdnPolicyNegativeCachingPolicy {
    /// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501
    /// can be specified as values, and you cannot specify a status code more than once.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<f64>,
    /// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
    /// (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<f64>,
}

/// Reference to a SecurityPolicy in compute to populate edgeSecurityPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketInitProviderEdgeSecurityPolicyRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendBucketInitProviderEdgeSecurityPolicyRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketInitProviderEdgeSecurityPolicyRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendBucketInitProviderEdgeSecurityPolicyRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendBucketInitProviderEdgeSecurityPolicyRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketInitProviderEdgeSecurityPolicyRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketInitProviderEdgeSecurityPolicyRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a SecurityPolicy in compute to populate edgeSecurityPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketInitProviderEdgeSecurityPolicySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendBucketInitProviderEdgeSecurityPolicySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketInitProviderEdgeSecurityPolicySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendBucketInitProviderEdgeSecurityPolicySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendBucketInitProviderEdgeSecurityPolicySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketInitProviderEdgeSecurityPolicySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketInitProviderEdgeSecurityPolicySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendBucketProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendBucketProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendBucketProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<BackendBucketPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BackendBucketPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BackendBucketPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BackendBucketPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BackendBucketPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BackendBucketPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// BackendBucketStatus defines the observed state of BackendBucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<BackendBucketStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketStatusAtProvider {
    /// Cloud Storage bucket name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    pub bucket_name: Option<String>,
    /// Cloud CDN configuration for this Backend Bucket.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cdnPolicy")]
    pub cdn_policy: Option<BackendBucketStatusAtProviderCdnPolicy>,
    /// Compress text responses using Brotli or gzip compression, based on the client's Accept-Encoding header.
    /// Possible values are: AUTOMATIC, DISABLED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionMode")]
    pub compression_mode: Option<String>,
    /// Creation timestamp in RFC3339 text format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTimestamp")]
    pub creation_timestamp: Option<String>,
    /// Headers that the HTTP/S load balancer should add to proxied responses.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customResponseHeaders")]
    pub custom_response_headers: Option<Vec<String>>,
    /// An optional textual description of the resource; provided by the
    /// client when the resource is created.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The security policy associated with this backend bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "edgeSecurityPolicy")]
    pub edge_security_policy: Option<String>,
    /// If true, enable Cloud CDN for this BackendBucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableCdn")]
    pub enable_cdn: Option<bool>,
    /// an identifier for the resource with format projects/{{project}}/global/backendBuckets/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The URI of the created resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    pub self_link: Option<String>,
}

/// Cloud CDN configuration for this Backend Bucket.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketStatusAtProviderCdnPolicy {
    /// Bypass the cache when the specified request headers are matched - e.g. Pragma or Authorization headers. Up to 5 headers can be specified. The cache is bypassed for all cdnPolicy.cacheMode settings.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bypassCacheOnRequestHeaders")]
    pub bypass_cache_on_request_headers: Option<Vec<BackendBucketStatusAtProviderCdnPolicyBypassCacheOnRequestHeaders>>,
    /// The CacheKeyPolicy for this CdnPolicy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheKeyPolicy")]
    pub cache_key_policy: Option<BackendBucketStatusAtProviderCdnPolicyCacheKeyPolicy>,
    /// Specifies the cache setting for all responses from this backend.
    /// The possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL and CACHE_ALL_STATIC
    /// Possible values are: USE_ORIGIN_HEADERS, FORCE_CACHE_ALL, CACHE_ALL_STATIC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cacheMode")]
    pub cache_mode: Option<String>,
    /// Specifies the maximum allowed TTL for cached content served by this origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientTtl")]
    pub client_ttl: Option<f64>,
    /// Specifies the default TTL for cached content served by this origin for responses
    /// that do not have an existing valid TTL (max-age or s-max-age).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultTtl")]
    pub default_ttl: Option<f64>,
    /// Specifies the maximum allowed TTL for cached content served by this origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxTtl")]
    pub max_ttl: Option<f64>,
    /// Negative caching allows per-status code TTLs to be set, in order to apply fine-grained caching for common errors or redirects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCaching")]
    pub negative_caching: Option<bool>,
    /// Sets a cache TTL for the specified HTTP status code. negativeCaching must be enabled to configure negativeCachingPolicy.
    /// Omitting the policy and leaving negativeCaching enabled will use Cloud CDN's default cache TTLs.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "negativeCachingPolicy")]
    pub negative_caching_policy: Option<Vec<BackendBucketStatusAtProviderCdnPolicyNegativeCachingPolicy>>,
    /// If true then Cloud CDN will combine multiple concurrent cache fill requests into a small number of requests to the origin.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestCoalescing")]
    pub request_coalescing: Option<bool>,
    /// Serve existing content from the cache (if available) when revalidating content with the origin, or when an error is encountered when refreshing the cache.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serveWhileStale")]
    pub serve_while_stale: Option<f64>,
    /// Maximum number of seconds the response to a signed URL request will
    /// be considered fresh. After this time period,
    /// the response will be revalidated before being served.
    /// When serving responses to signed URL requests,
    /// Cloud CDN will internally behave as though
    /// all responses from this backend had a "Cache-Control: public,
    /// max-age=[TTL]" header, regardless of any existing Cache-Control
    /// header. The actual headers served in responses will not be altered.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signedUrlCacheMaxAgeSec")]
    pub signed_url_cache_max_age_sec: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketStatusAtProviderCdnPolicyBypassCacheOnRequestHeaders {
    /// The header field name to match on when bypassing cache. Values are case-insensitive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "headerName")]
    pub header_name: Option<String>,
}

/// The CacheKeyPolicy for this CdnPolicy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketStatusAtProviderCdnPolicyCacheKeyPolicy {
    /// Allows HTTP request headers (by name) to be used in the
    /// cache key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeHttpHeaders")]
    pub include_http_headers: Option<Vec<String>>,
    /// Names of query string parameters to include in cache keys.
    /// Default parameters are always included. '&' and '=' will
    /// be percent encoded and not treated as delimiters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryStringWhitelist")]
    pub query_string_whitelist: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BackendBucketStatusAtProviderCdnPolicyNegativeCachingPolicy {
    /// The HTTP status code to define a TTL against. Only HTTP status codes 300, 301, 308, 404, 405, 410, 421, 451 and 501
    /// can be specified as values, and you cannot specify a status code more than once.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub code: Option<f64>,
    /// The TTL (in seconds) for which to cache responses with the corresponding status code. The maximum allowed value is 1800s
    /// (30 minutes), noting that infrequently accessed objects may be evicted from the cache before the defined TTL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub ttl: Option<f64>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// NodeGroupSpec defines the desired state of NodeGroup
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta2", kind = "NodeGroup", plural = "nodegroups")]
#[kube(status = "NodeGroupStatus")]
pub struct NodeGroupSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<NodeGroupDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: NodeGroupForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<NodeGroupInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<NodeGroupProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<NodeGroupPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<NodeGroupWriteConnectionSecretToRef>,
}

/// NodeGroupSpec defines the desired state of NodeGroup
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProvider {
    /// If you use sole-tenant nodes for your workloads, you can use the node
    /// group autoscaler to automatically manage the sizes of your node groups.
    /// One of initial_size or autoscaling_policy must be configured on resource creation.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingPolicy")]
    pub autoscaling_policy: Option<NodeGroupForProviderAutoscalingPolicy>,
    /// An optional textual description of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The initial number of nodes in the node group. One of initial_size or autoscaling_policy must be configured on resource creation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialSize")]
    pub initial_size: Option<f64>,
    /// Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenancePolicy")]
    pub maintenance_policy: Option<String>,
    /// contains properties for the timeframe of maintenance
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceWindow")]
    pub maintenance_window: Option<NodeGroupForProviderMaintenanceWindow>,
    /// The URL of the node template to which this node group belongs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeTemplate")]
    pub node_template: Option<String>,
    /// Reference to a NodeTemplate in compute to populate nodeTemplate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeTemplateRef")]
    pub node_template_ref: Option<NodeGroupForProviderNodeTemplateRef>,
    /// Selector for a NodeTemplate in compute to populate nodeTemplate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeTemplateSelector")]
    pub node_template_selector: Option<NodeGroupForProviderNodeTemplateSelector>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Share settings for the node group.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareSettings")]
    pub share_settings: Option<NodeGroupForProviderShareSettings>,
    /// Zone where this node group is located
    pub zone: String,
}

/// If you use sole-tenant nodes for your workloads, you can use the node
/// group autoscaler to automatically manage the sizes of your node groups.
/// One of initial_size or autoscaling_policy must be configured on resource creation.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderAutoscalingPolicy {
    /// Maximum size of the node group. Set to a value less than or equal
    /// to 100 and greater than or equal to min-nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNodes")]
    pub max_nodes: Option<f64>,
    /// Minimum size of the node group. Must be less
    /// than or equal to max-nodes. The default value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minNodes")]
    pub min_nodes: Option<f64>,
    /// The autoscaling mode. Set to one of the following:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
}

/// contains properties for the timeframe of maintenance
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderMaintenanceWindow {
    /// instances.start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
}

/// Reference to a NodeTemplate in compute to populate nodeTemplate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderNodeTemplateRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupForProviderNodeTemplateRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderNodeTemplateRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupForProviderNodeTemplateRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupForProviderNodeTemplateRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderNodeTemplateRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderNodeTemplateRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a NodeTemplate in compute to populate nodeTemplate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderNodeTemplateSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupForProviderNodeTemplateSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderNodeTemplateSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupForProviderNodeTemplateSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupForProviderNodeTemplateSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderNodeTemplateSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderNodeTemplateSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Share settings for the node group.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderShareSettings {
    /// A map of project id and project config. This is only valid when shareType's value is SPECIFIC_PROJECTS.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectMap")]
    pub project_map: Option<Vec<NodeGroupForProviderShareSettingsProjectMap>>,
    /// Node group sharing type.
    /// Possible values are: ORGANIZATION, SPECIFIC_PROJECTS, LOCAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareType")]
    pub share_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderShareSettingsProjectMap {
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Reference to a Project in cloudplatform to populate id.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idRef")]
    pub id_ref: Option<NodeGroupForProviderShareSettingsProjectMapIdRef>,
    /// Selector for a Project in cloudplatform to populate id.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idSelector")]
    pub id_selector: Option<NodeGroupForProviderShareSettingsProjectMapIdSelector>,
    /// The project id/number should be the same as the key of this project config in the project map.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    /// Reference to a Project in cloudplatform to populate projectId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectIdRef")]
    pub project_id_ref: Option<NodeGroupForProviderShareSettingsProjectMapProjectIdRef>,
    /// Selector for a Project in cloudplatform to populate projectId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectIdSelector")]
    pub project_id_selector: Option<NodeGroupForProviderShareSettingsProjectMapProjectIdSelector>,
}

/// Reference to a Project in cloudplatform to populate id.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderShareSettingsProjectMapIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupForProviderShareSettingsProjectMapIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderShareSettingsProjectMapIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupForProviderShareSettingsProjectMapIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupForProviderShareSettingsProjectMapIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderShareSettingsProjectMapIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderShareSettingsProjectMapIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Project in cloudplatform to populate id.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderShareSettingsProjectMapIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupForProviderShareSettingsProjectMapIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderShareSettingsProjectMapIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupForProviderShareSettingsProjectMapIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupForProviderShareSettingsProjectMapIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderShareSettingsProjectMapIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderShareSettingsProjectMapIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Project in cloudplatform to populate projectId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderShareSettingsProjectMapProjectIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupForProviderShareSettingsProjectMapProjectIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderShareSettingsProjectMapProjectIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupForProviderShareSettingsProjectMapProjectIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupForProviderShareSettingsProjectMapProjectIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderShareSettingsProjectMapProjectIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderShareSettingsProjectMapProjectIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Project in cloudplatform to populate projectId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderShareSettingsProjectMapProjectIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupForProviderShareSettingsProjectMapProjectIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupForProviderShareSettingsProjectMapProjectIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupForProviderShareSettingsProjectMapProjectIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupForProviderShareSettingsProjectMapProjectIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderShareSettingsProjectMapProjectIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupForProviderShareSettingsProjectMapProjectIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProvider {
    /// If you use sole-tenant nodes for your workloads, you can use the node
    /// group autoscaler to automatically manage the sizes of your node groups.
    /// One of initial_size or autoscaling_policy must be configured on resource creation.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingPolicy")]
    pub autoscaling_policy: Option<NodeGroupInitProviderAutoscalingPolicy>,
    /// An optional textual description of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The initial number of nodes in the node group. One of initial_size or autoscaling_policy must be configured on resource creation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialSize")]
    pub initial_size: Option<f64>,
    /// Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenancePolicy")]
    pub maintenance_policy: Option<String>,
    /// contains properties for the timeframe of maintenance
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceWindow")]
    pub maintenance_window: Option<NodeGroupInitProviderMaintenanceWindow>,
    /// The URL of the node template to which this node group belongs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeTemplate")]
    pub node_template: Option<String>,
    /// Reference to a NodeTemplate in compute to populate nodeTemplate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeTemplateRef")]
    pub node_template_ref: Option<NodeGroupInitProviderNodeTemplateRef>,
    /// Selector for a NodeTemplate in compute to populate nodeTemplate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeTemplateSelector")]
    pub node_template_selector: Option<NodeGroupInitProviderNodeTemplateSelector>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Share settings for the node group.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareSettings")]
    pub share_settings: Option<NodeGroupInitProviderShareSettings>,
}

/// If you use sole-tenant nodes for your workloads, you can use the node
/// group autoscaler to automatically manage the sizes of your node groups.
/// One of initial_size or autoscaling_policy must be configured on resource creation.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderAutoscalingPolicy {
    /// Maximum size of the node group. Set to a value less than or equal
    /// to 100 and greater than or equal to min-nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNodes")]
    pub max_nodes: Option<f64>,
    /// Minimum size of the node group. Must be less
    /// than or equal to max-nodes. The default value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minNodes")]
    pub min_nodes: Option<f64>,
    /// The autoscaling mode. Set to one of the following:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
}

/// contains properties for the timeframe of maintenance
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderMaintenanceWindow {
    /// instances.start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
}

/// Reference to a NodeTemplate in compute to populate nodeTemplate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderNodeTemplateRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupInitProviderNodeTemplateRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderNodeTemplateRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupInitProviderNodeTemplateRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupInitProviderNodeTemplateRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderNodeTemplateRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderNodeTemplateRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a NodeTemplate in compute to populate nodeTemplate.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderNodeTemplateSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupInitProviderNodeTemplateSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderNodeTemplateSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupInitProviderNodeTemplateSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupInitProviderNodeTemplateSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderNodeTemplateSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderNodeTemplateSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Share settings for the node group.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderShareSettings {
    /// A map of project id and project config. This is only valid when shareType's value is SPECIFIC_PROJECTS.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectMap")]
    pub project_map: Option<Vec<NodeGroupInitProviderShareSettingsProjectMap>>,
    /// Node group sharing type.
    /// Possible values are: ORGANIZATION, SPECIFIC_PROJECTS, LOCAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareType")]
    pub share_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderShareSettingsProjectMap {
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Reference to a Project in cloudplatform to populate id.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idRef")]
    pub id_ref: Option<NodeGroupInitProviderShareSettingsProjectMapIdRef>,
    /// Selector for a Project in cloudplatform to populate id.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "idSelector")]
    pub id_selector: Option<NodeGroupInitProviderShareSettingsProjectMapIdSelector>,
    /// The project id/number should be the same as the key of this project config in the project map.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    /// Reference to a Project in cloudplatform to populate projectId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectIdRef")]
    pub project_id_ref: Option<NodeGroupInitProviderShareSettingsProjectMapProjectIdRef>,
    /// Selector for a Project in cloudplatform to populate projectId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectIdSelector")]
    pub project_id_selector: Option<NodeGroupInitProviderShareSettingsProjectMapProjectIdSelector>,
}

/// Reference to a Project in cloudplatform to populate id.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderShareSettingsProjectMapIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupInitProviderShareSettingsProjectMapIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderShareSettingsProjectMapIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupInitProviderShareSettingsProjectMapIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupInitProviderShareSettingsProjectMapIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderShareSettingsProjectMapIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderShareSettingsProjectMapIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Project in cloudplatform to populate id.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderShareSettingsProjectMapIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupInitProviderShareSettingsProjectMapIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderShareSettingsProjectMapIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupInitProviderShareSettingsProjectMapIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupInitProviderShareSettingsProjectMapIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderShareSettingsProjectMapIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderShareSettingsProjectMapIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Project in cloudplatform to populate projectId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderShareSettingsProjectMapProjectIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupInitProviderShareSettingsProjectMapProjectIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderShareSettingsProjectMapProjectIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupInitProviderShareSettingsProjectMapProjectIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupInitProviderShareSettingsProjectMapProjectIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderShareSettingsProjectMapProjectIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderShareSettingsProjectMapProjectIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Project in cloudplatform to populate projectId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderShareSettingsProjectMapProjectIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupInitProviderShareSettingsProjectMapProjectIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupInitProviderShareSettingsProjectMapProjectIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupInitProviderShareSettingsProjectMapProjectIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupInitProviderShareSettingsProjectMapProjectIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderShareSettingsProjectMapProjectIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupInitProviderShareSettingsProjectMapProjectIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<NodeGroupPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<NodeGroupPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<NodeGroupPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<NodeGroupPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<NodeGroupPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum NodeGroupPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// NodeGroupStatus defines the observed state of NodeGroup.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<NodeGroupStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupStatusAtProvider {
    /// If you use sole-tenant nodes for your workloads, you can use the node
    /// group autoscaler to automatically manage the sizes of your node groups.
    /// One of initial_size or autoscaling_policy must be configured on resource creation.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingPolicy")]
    pub autoscaling_policy: Option<NodeGroupStatusAtProviderAutoscalingPolicy>,
    /// Creation timestamp in RFC3339 text format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTimestamp")]
    pub creation_timestamp: Option<String>,
    /// An optional textual description of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/zones/{{zone}}/nodeGroups/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The initial number of nodes in the node group. One of initial_size or autoscaling_policy must be configured on resource creation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initialSize")]
    pub initial_size: Option<f64>,
    /// Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenancePolicy")]
    pub maintenance_policy: Option<String>,
    /// contains properties for the timeframe of maintenance
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceWindow")]
    pub maintenance_window: Option<NodeGroupStatusAtProviderMaintenanceWindow>,
    /// The URL of the node template to which this node group belongs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeTemplate")]
    pub node_template: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The URI of the created resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    pub self_link: Option<String>,
    /// Share settings for the node group.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareSettings")]
    pub share_settings: Option<NodeGroupStatusAtProviderShareSettings>,
    /// The total number of nodes in the node group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub size: Option<f64>,
    /// Zone where this node group is located
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// If you use sole-tenant nodes for your workloads, you can use the node
/// group autoscaler to automatically manage the sizes of your node groups.
/// One of initial_size or autoscaling_policy must be configured on resource creation.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupStatusAtProviderAutoscalingPolicy {
    /// Maximum size of the node group. Set to a value less than or equal
    /// to 100 and greater than or equal to min-nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNodes")]
    pub max_nodes: Option<f64>,
    /// Minimum size of the node group. Must be less
    /// than or equal to max-nodes. The default value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minNodes")]
    pub min_nodes: Option<f64>,
    /// The autoscaling mode. Set to one of the following:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
}

/// contains properties for the timeframe of maintenance
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupStatusAtProviderMaintenanceWindow {
    /// instances.start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
}

/// Share settings for the node group.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupStatusAtProviderShareSettings {
    /// A map of project id and project config. This is only valid when shareType's value is SPECIFIC_PROJECTS.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectMap")]
    pub project_map: Option<Vec<NodeGroupStatusAtProviderShareSettingsProjectMap>>,
    /// Node group sharing type.
    /// Possible values are: ORGANIZATION, SPECIFIC_PROJECTS, LOCAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareType")]
    pub share_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct NodeGroupStatusAtProviderShareSettingsProjectMap {
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The project id/number should be the same as the key of this project config in the project map.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
}


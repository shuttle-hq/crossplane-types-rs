// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// PacketMirroringSpec defines the desired state of PacketMirroring
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta2", kind = "PacketMirroring", plural = "packetmirrorings")]
#[kube(status = "PacketMirroringStatus")]
pub struct PacketMirroringSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<PacketMirroringDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: PacketMirroringForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<PacketMirroringInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<PacketMirroringProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<PacketMirroringPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<PacketMirroringWriteConnectionSecretToRef>,
}

/// PacketMirroringSpec defines the desired state of PacketMirroring
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProvider {
    /// The Forwarding Rule resource (of type load_balancing_scheme=INTERNAL)
    /// that will be used as collector for mirrored traffic. The
    /// specified forwarding rule must have is_mirroring_collector
    /// set to true.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorIlb")]
    pub collector_ilb: Option<PacketMirroringForProviderCollectorIlb>,
    /// A human-readable description of the rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// A filter for mirrored traffic.  If unset, all traffic is mirrored.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<PacketMirroringForProviderFilter>,
    /// A means of specifying which resources to mirror.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mirroredResources")]
    pub mirrored_resources: Option<PacketMirroringForProviderMirroredResources>,
    /// Specifies the mirrored VPC network. Only packets in this network
    /// will be mirrored. All mirrored VMs should have a NIC in the given
    /// network. All mirrored subnetworks should belong to the given network.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<PacketMirroringForProviderNetwork>,
    /// Since only one rule can be active at a time, priority is
    /// used to break ties in the case of two rules that apply to
    /// the same instances.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The Region in which the created address should reside.
    /// If it is not provided, the provider region is used.
    pub region: String,
}

/// The Forwarding Rule resource (of type load_balancing_scheme=INTERNAL)
/// that will be used as collector for mirrored traffic. The
/// specified forwarding rule must have is_mirroring_collector
/// set to true.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProviderCollectorIlb {
    /// The URL of the forwarding rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Reference to a ForwardingRule in compute to populate url.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlRef")]
    pub url_ref: Option<PacketMirroringForProviderCollectorIlbUrlRef>,
    /// Selector for a ForwardingRule in compute to populate url.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlSelector")]
    pub url_selector: Option<PacketMirroringForProviderCollectorIlbUrlSelector>,
}

/// Reference to a ForwardingRule in compute to populate url.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProviderCollectorIlbUrlRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PacketMirroringForProviderCollectorIlbUrlRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProviderCollectorIlbUrlRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PacketMirroringForProviderCollectorIlbUrlRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PacketMirroringForProviderCollectorIlbUrlRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringForProviderCollectorIlbUrlRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringForProviderCollectorIlbUrlRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ForwardingRule in compute to populate url.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProviderCollectorIlbUrlSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PacketMirroringForProviderCollectorIlbUrlSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProviderCollectorIlbUrlSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PacketMirroringForProviderCollectorIlbUrlSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PacketMirroringForProviderCollectorIlbUrlSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringForProviderCollectorIlbUrlSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringForProviderCollectorIlbUrlSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A filter for mirrored traffic.  If unset, all traffic is mirrored.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProviderFilter {
    /// IP CIDR ranges that apply as a filter on the source (ingress) or
    /// destination (egress) IP in the IP header. Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrRanges")]
    pub cidr_ranges: Option<Vec<String>>,
    /// Direction of traffic to mirror.
    /// Default value is BOTH.
    /// Possible values are: INGRESS, EGRESS, BOTH.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub direction: Option<String>,
    /// Possible IP protocols including tcp, udp, icmp and esp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipProtocols")]
    pub ip_protocols: Option<Vec<String>>,
}

/// A means of specifying which resources to mirror.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProviderMirroredResources {
    /// All the listed instances will be mirrored.  Specify at most 50.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instances: Option<Vec<PacketMirroringForProviderMirroredResourcesInstances>>,
    /// All instances in one of these subnetworks will be mirrored.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnetworks: Option<Vec<PacketMirroringForProviderMirroredResourcesSubnetworks>>,
    /// All instances with these tags will be mirrored.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProviderMirroredResourcesInstances {
    /// The URL of the subnetwork where this rule should be active.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Reference to a Instance in compute to populate url.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlRef")]
    pub url_ref: Option<PacketMirroringForProviderMirroredResourcesInstancesUrlRef>,
    /// Selector for a Instance in compute to populate url.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlSelector")]
    pub url_selector: Option<PacketMirroringForProviderMirroredResourcesInstancesUrlSelector>,
}

/// Reference to a Instance in compute to populate url.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProviderMirroredResourcesInstancesUrlRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PacketMirroringForProviderMirroredResourcesInstancesUrlRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProviderMirroredResourcesInstancesUrlRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PacketMirroringForProviderMirroredResourcesInstancesUrlRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PacketMirroringForProviderMirroredResourcesInstancesUrlRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringForProviderMirroredResourcesInstancesUrlRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringForProviderMirroredResourcesInstancesUrlRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Instance in compute to populate url.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProviderMirroredResourcesInstancesUrlSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PacketMirroringForProviderMirroredResourcesInstancesUrlSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProviderMirroredResourcesInstancesUrlSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PacketMirroringForProviderMirroredResourcesInstancesUrlSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PacketMirroringForProviderMirroredResourcesInstancesUrlSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringForProviderMirroredResourcesInstancesUrlSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringForProviderMirroredResourcesInstancesUrlSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProviderMirroredResourcesSubnetworks {
    /// The URL of the subnetwork where this rule should be active.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// Specifies the mirrored VPC network. Only packets in this network
/// will be mirrored. All mirrored VMs should have a NIC in the given
/// network. All mirrored subnetworks should belong to the given network.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProviderNetwork {
    /// The full self_link URL of the network where this rule is active.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Reference to a Network in compute to populate url.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlRef")]
    pub url_ref: Option<PacketMirroringForProviderNetworkUrlRef>,
    /// Selector for a Network in compute to populate url.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlSelector")]
    pub url_selector: Option<PacketMirroringForProviderNetworkUrlSelector>,
}

/// Reference to a Network in compute to populate url.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProviderNetworkUrlRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PacketMirroringForProviderNetworkUrlRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProviderNetworkUrlRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PacketMirroringForProviderNetworkUrlRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PacketMirroringForProviderNetworkUrlRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringForProviderNetworkUrlRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringForProviderNetworkUrlRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate url.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProviderNetworkUrlSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PacketMirroringForProviderNetworkUrlSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringForProviderNetworkUrlSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PacketMirroringForProviderNetworkUrlSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PacketMirroringForProviderNetworkUrlSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringForProviderNetworkUrlSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringForProviderNetworkUrlSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProvider {
    /// The Forwarding Rule resource (of type load_balancing_scheme=INTERNAL)
    /// that will be used as collector for mirrored traffic. The
    /// specified forwarding rule must have is_mirroring_collector
    /// set to true.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorIlb")]
    pub collector_ilb: Option<PacketMirroringInitProviderCollectorIlb>,
    /// A human-readable description of the rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// A filter for mirrored traffic.  If unset, all traffic is mirrored.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<PacketMirroringInitProviderFilter>,
    /// A means of specifying which resources to mirror.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mirroredResources")]
    pub mirrored_resources: Option<PacketMirroringInitProviderMirroredResources>,
    /// Specifies the mirrored VPC network. Only packets in this network
    /// will be mirrored. All mirrored VMs should have a NIC in the given
    /// network. All mirrored subnetworks should belong to the given network.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<PacketMirroringInitProviderNetwork>,
    /// Since only one rule can be active at a time, priority is
    /// used to break ties in the case of two rules that apply to
    /// the same instances.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

/// The Forwarding Rule resource (of type load_balancing_scheme=INTERNAL)
/// that will be used as collector for mirrored traffic. The
/// specified forwarding rule must have is_mirroring_collector
/// set to true.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProviderCollectorIlb {
    /// The URL of the forwarding rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Reference to a ForwardingRule in compute to populate url.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlRef")]
    pub url_ref: Option<PacketMirroringInitProviderCollectorIlbUrlRef>,
    /// Selector for a ForwardingRule in compute to populate url.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlSelector")]
    pub url_selector: Option<PacketMirroringInitProviderCollectorIlbUrlSelector>,
}

/// Reference to a ForwardingRule in compute to populate url.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProviderCollectorIlbUrlRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PacketMirroringInitProviderCollectorIlbUrlRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProviderCollectorIlbUrlRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PacketMirroringInitProviderCollectorIlbUrlRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PacketMirroringInitProviderCollectorIlbUrlRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringInitProviderCollectorIlbUrlRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringInitProviderCollectorIlbUrlRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ForwardingRule in compute to populate url.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProviderCollectorIlbUrlSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PacketMirroringInitProviderCollectorIlbUrlSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProviderCollectorIlbUrlSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PacketMirroringInitProviderCollectorIlbUrlSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PacketMirroringInitProviderCollectorIlbUrlSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringInitProviderCollectorIlbUrlSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringInitProviderCollectorIlbUrlSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A filter for mirrored traffic.  If unset, all traffic is mirrored.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProviderFilter {
    /// IP CIDR ranges that apply as a filter on the source (ingress) or
    /// destination (egress) IP in the IP header. Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrRanges")]
    pub cidr_ranges: Option<Vec<String>>,
    /// Direction of traffic to mirror.
    /// Default value is BOTH.
    /// Possible values are: INGRESS, EGRESS, BOTH.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub direction: Option<String>,
    /// Possible IP protocols including tcp, udp, icmp and esp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipProtocols")]
    pub ip_protocols: Option<Vec<String>>,
}

/// A means of specifying which resources to mirror.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProviderMirroredResources {
    /// All the listed instances will be mirrored.  Specify at most 50.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instances: Option<Vec<PacketMirroringInitProviderMirroredResourcesInstances>>,
    /// All instances in one of these subnetworks will be mirrored.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnetworks: Option<Vec<PacketMirroringInitProviderMirroredResourcesSubnetworks>>,
    /// All instances with these tags will be mirrored.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProviderMirroredResourcesInstances {
    /// The URL of the subnetwork where this rule should be active.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Reference to a Instance in compute to populate url.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlRef")]
    pub url_ref: Option<PacketMirroringInitProviderMirroredResourcesInstancesUrlRef>,
    /// Selector for a Instance in compute to populate url.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlSelector")]
    pub url_selector: Option<PacketMirroringInitProviderMirroredResourcesInstancesUrlSelector>,
}

/// Reference to a Instance in compute to populate url.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProviderMirroredResourcesInstancesUrlRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PacketMirroringInitProviderMirroredResourcesInstancesUrlRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProviderMirroredResourcesInstancesUrlRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PacketMirroringInitProviderMirroredResourcesInstancesUrlRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PacketMirroringInitProviderMirroredResourcesInstancesUrlRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringInitProviderMirroredResourcesInstancesUrlRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringInitProviderMirroredResourcesInstancesUrlRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Instance in compute to populate url.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProviderMirroredResourcesInstancesUrlSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PacketMirroringInitProviderMirroredResourcesInstancesUrlSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProviderMirroredResourcesInstancesUrlSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PacketMirroringInitProviderMirroredResourcesInstancesUrlSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PacketMirroringInitProviderMirroredResourcesInstancesUrlSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringInitProviderMirroredResourcesInstancesUrlSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringInitProviderMirroredResourcesInstancesUrlSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProviderMirroredResourcesSubnetworks {
    /// The URL of the subnetwork where this rule should be active.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// Specifies the mirrored VPC network. Only packets in this network
/// will be mirrored. All mirrored VMs should have a NIC in the given
/// network. All mirrored subnetworks should belong to the given network.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProviderNetwork {
    /// The full self_link URL of the network where this rule is active.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// Reference to a Network in compute to populate url.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlRef")]
    pub url_ref: Option<PacketMirroringInitProviderNetworkUrlRef>,
    /// Selector for a Network in compute to populate url.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "urlSelector")]
    pub url_selector: Option<PacketMirroringInitProviderNetworkUrlSelector>,
}

/// Reference to a Network in compute to populate url.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProviderNetworkUrlRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PacketMirroringInitProviderNetworkUrlRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProviderNetworkUrlRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PacketMirroringInitProviderNetworkUrlRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PacketMirroringInitProviderNetworkUrlRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringInitProviderNetworkUrlRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringInitProviderNetworkUrlRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate url.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProviderNetworkUrlSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PacketMirroringInitProviderNetworkUrlSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringInitProviderNetworkUrlSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PacketMirroringInitProviderNetworkUrlSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PacketMirroringInitProviderNetworkUrlSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringInitProviderNetworkUrlSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringInitProviderNetworkUrlSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PacketMirroringProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PacketMirroringProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PacketMirroringProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<PacketMirroringPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<PacketMirroringPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PacketMirroringPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PacketMirroringPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PacketMirroringPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PacketMirroringPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// PacketMirroringStatus defines the observed state of PacketMirroring.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<PacketMirroringStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringStatusAtProvider {
    /// The Forwarding Rule resource (of type load_balancing_scheme=INTERNAL)
    /// that will be used as collector for mirrored traffic. The
    /// specified forwarding rule must have is_mirroring_collector
    /// set to true.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectorIlb")]
    pub collector_ilb: Option<PacketMirroringStatusAtProviderCollectorIlb>,
    /// A human-readable description of the rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// A filter for mirrored traffic.  If unset, all traffic is mirrored.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<PacketMirroringStatusAtProviderFilter>,
    /// an identifier for the resource with format projects/{{project}}/regions/{{region}}/packetMirrorings/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// A means of specifying which resources to mirror.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mirroredResources")]
    pub mirrored_resources: Option<PacketMirroringStatusAtProviderMirroredResources>,
    /// Specifies the mirrored VPC network. Only packets in this network
    /// will be mirrored. All mirrored VMs should have a NIC in the given
    /// network. All mirrored subnetworks should belong to the given network.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub network: Option<PacketMirroringStatusAtProviderNetwork>,
    /// Since only one rule can be active at a time, priority is
    /// used to break ties in the case of two rules that apply to
    /// the same instances.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The Region in which the created address should reside.
    /// If it is not provided, the provider region is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

/// The Forwarding Rule resource (of type load_balancing_scheme=INTERNAL)
/// that will be used as collector for mirrored traffic. The
/// specified forwarding rule must have is_mirroring_collector
/// set to true.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringStatusAtProviderCollectorIlb {
    /// The URL of the forwarding rule.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// A filter for mirrored traffic.  If unset, all traffic is mirrored.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringStatusAtProviderFilter {
    /// IP CIDR ranges that apply as a filter on the source (ingress) or
    /// destination (egress) IP in the IP header. Only IPv4 is supported.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cidrRanges")]
    pub cidr_ranges: Option<Vec<String>>,
    /// Direction of traffic to mirror.
    /// Default value is BOTH.
    /// Possible values are: INGRESS, EGRESS, BOTH.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub direction: Option<String>,
    /// Possible IP protocols including tcp, udp, icmp and esp
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipProtocols")]
    pub ip_protocols: Option<Vec<String>>,
}

/// A means of specifying which resources to mirror.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringStatusAtProviderMirroredResources {
    /// All the listed instances will be mirrored.  Specify at most 50.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instances: Option<Vec<PacketMirroringStatusAtProviderMirroredResourcesInstances>>,
    /// All instances in one of these subnetworks will be mirrored.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subnetworks: Option<Vec<PacketMirroringStatusAtProviderMirroredResourcesSubnetworks>>,
    /// All instances with these tags will be mirrored.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringStatusAtProviderMirroredResourcesInstances {
    /// The URL of the subnetwork where this rule should be active.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringStatusAtProviderMirroredResourcesSubnetworks {
    /// The URL of the subnetwork where this rule should be active.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// Specifies the mirrored VPC network. Only packets in this network
/// will be mirrored. All mirrored VMs should have a NIC in the given
/// network. All mirrored subnetworks should belong to the given network.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PacketMirroringStatusAtProviderNetwork {
    /// The full self_link URL of the network where this rule is active.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}


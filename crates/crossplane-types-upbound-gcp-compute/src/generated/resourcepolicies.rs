// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ResourcePolicySpec defines the desired state of ResourcePolicy
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta2", kind = "ResourcePolicy", plural = "resourcepolicies")]
#[kube(status = "ResourcePolicyStatus")]
pub struct ResourcePolicySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<ResourcePolicyDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ResourcePolicyForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<ResourcePolicyInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<ResourcePolicyProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<ResourcePolicyPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<ResourcePolicyWriteConnectionSecretToRef>,
}

/// ResourcePolicySpec defines the desired state of ResourcePolicy
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResourcePolicyDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyForProvider {
    /// An optional description of this resource. Provide this property when you create the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Replication consistency group for asynchronous disk replication.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskConsistencyGroupPolicy")]
    pub disk_consistency_group_policy: Option<ResourcePolicyForProviderDiskConsistencyGroupPolicy>,
    /// Resource policy for instances used for placement configuration.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupPlacementPolicy")]
    pub group_placement_policy: Option<ResourcePolicyForProviderGroupPlacementPolicy>,
    /// Resource policy for scheduling instance operations.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceSchedulePolicy")]
    pub instance_schedule_policy: Option<ResourcePolicyForProviderInstanceSchedulePolicy>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Region where resource policy resides.
    pub region: String,
    /// Policy for creating snapshots of persistent disks.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotSchedulePolicy")]
    pub snapshot_schedule_policy: Option<ResourcePolicyForProviderSnapshotSchedulePolicy>,
}

/// Replication consistency group for asynchronous disk replication.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyForProviderDiskConsistencyGroupPolicy {
    /// Enable disk consistency on the resource policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Resource policy for instances used for placement configuration.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyForProviderGroupPlacementPolicy {
    /// The number of availability domains instances will be spread across. If two instances are in different
    /// availability domain, they will not be put in the same low latency network
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityDomainCount")]
    pub availability_domain_count: Option<f64>,
    /// Collocation specifies whether to place VMs inside the same availability domain on the same low-latency network.
    /// Specify COLLOCATED to enable collocation. Can only be specified with vm_count. If compute instances are created
    /// with a COLLOCATED policy, then exactly vm_count instances must be created at the same time with the resource policy
    /// attached.
    /// Possible values are: COLLOCATED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collocation: Option<String>,
    /// Number of VMs in this placement group. Google does not recommend that you use this field
    /// unless you use a compact policy and you want your policy to work only if it contains this
    /// exact number of VMs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmCount")]
    pub vm_count: Option<f64>,
}

/// Resource policy for scheduling instance operations.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyForProviderInstanceSchedulePolicy {
    /// The expiration time of the schedule. The timestamp is an RFC3339 string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expirationTime")]
    pub expiration_time: Option<String>,
    /// The start time of the schedule. The timestamp is an RFC3339 string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
    /// Specifies the time zone to be used in interpreting the schedule. The value of this field must be a time zone name
    /// from the tz database: http://en.wikipedia.org/wiki/Tz_database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    pub time_zone: Option<String>,
    /// Specifies the schedule for starting instances.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmStartSchedule")]
    pub vm_start_schedule: Option<ResourcePolicyForProviderInstanceSchedulePolicyVmStartSchedule>,
    /// Specifies the schedule for stopping instances.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmStopSchedule")]
    pub vm_stop_schedule: Option<ResourcePolicyForProviderInstanceSchedulePolicyVmStopSchedule>,
}

/// Specifies the schedule for starting instances.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyForProviderInstanceSchedulePolicyVmStartSchedule {
    /// Specifies the frequency for the operation, using the unix-cron format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
}

/// Specifies the schedule for stopping instances.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyForProviderInstanceSchedulePolicyVmStopSchedule {
    /// Specifies the frequency for the operation, using the unix-cron format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
}

/// Policy for creating snapshots of persistent disks.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyForProviderSnapshotSchedulePolicy {
    /// Retention policy applied to snapshots created by this resource policy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retentionPolicy")]
    pub retention_policy: Option<ResourcePolicyForProviderSnapshotSchedulePolicyRetentionPolicy>,
    /// Contains one of an hourlySchedule, dailySchedule, or weeklySchedule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<ResourcePolicyForProviderSnapshotSchedulePolicySchedule>,
    /// Properties with which the snapshots are created, such as labels.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotProperties")]
    pub snapshot_properties: Option<ResourcePolicyForProviderSnapshotSchedulePolicySnapshotProperties>,
}

/// Retention policy applied to snapshots created by this resource policy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyForProviderSnapshotSchedulePolicyRetentionPolicy {
    /// Maximum age of the snapshot that is allowed to be kept.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetentionDays")]
    pub max_retention_days: Option<f64>,
    /// Specifies the behavior to apply to scheduled snapshots when
    /// the source disk is deleted.
    /// Default value is KEEP_AUTO_SNAPSHOTS.
    /// Possible values are: KEEP_AUTO_SNAPSHOTS, APPLY_RETENTION_POLICY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onSourceDiskDelete")]
    pub on_source_disk_delete: Option<String>,
}

/// Contains one of an hourlySchedule, dailySchedule, or weeklySchedule.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyForProviderSnapshotSchedulePolicySchedule {
    /// The policy will execute every nth day at the specified time.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dailySchedule")]
    pub daily_schedule: Option<ResourcePolicyForProviderSnapshotSchedulePolicyScheduleDailySchedule>,
    /// The policy will execute every nth hour starting at the specified time.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hourlySchedule")]
    pub hourly_schedule: Option<ResourcePolicyForProviderSnapshotSchedulePolicyScheduleHourlySchedule>,
    /// Allows specifying a snapshot time for each day of the week.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weeklySchedule")]
    pub weekly_schedule: Option<ResourcePolicyForProviderSnapshotSchedulePolicyScheduleWeeklySchedule>,
}

/// The policy will execute every nth day at the specified time.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyForProviderSnapshotSchedulePolicyScheduleDailySchedule {
    /// Defines a schedule with units measured in days. The value determines how many days pass between the start of each cycle. Days in cycle for snapshot schedule policy must be 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "daysInCycle")]
    pub days_in_cycle: Option<f64>,
    /// Time within the window to start the operations.
    /// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
}

/// The policy will execute every nth hour starting at the specified time.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyForProviderSnapshotSchedulePolicyScheduleHourlySchedule {
    /// The number of hours between snapshots.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hoursInCycle")]
    pub hours_in_cycle: Option<f64>,
    /// Time within the window to start the operations.
    /// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
}

/// Allows specifying a snapshot time for each day of the week.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyForProviderSnapshotSchedulePolicyScheduleWeeklySchedule {
    /// May contain up to seven (one for each day of the week) snapshot times.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dayOfWeeks")]
    pub day_of_weeks: Option<Vec<ResourcePolicyForProviderSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeks>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyForProviderSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeks {
    /// The day of the week to create the snapshot. e.g. MONDAY
    /// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub day: Option<String>,
    /// Time within the window to start the operations.
    /// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
}

/// Properties with which the snapshots are created, such as labels.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyForProviderSnapshotSchedulePolicySnapshotProperties {
    /// Creates the new snapshot in the snapshot chain labeled with the
    /// specified name. The chain name must be 1-63 characters long and comply
    /// with RFC1035.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chainName")]
    pub chain_name: Option<String>,
    /// Whether to perform a 'guest aware' snapshot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestFlush")]
    pub guest_flush: Option<bool>,
    /// A set of key-value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Cloud Storage bucket location to store the auto snapshot
    /// (regional or multi-regional)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageLocations")]
    pub storage_locations: Option<Vec<String>>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyInitProvider {
    /// An optional description of this resource. Provide this property when you create the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Replication consistency group for asynchronous disk replication.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskConsistencyGroupPolicy")]
    pub disk_consistency_group_policy: Option<ResourcePolicyInitProviderDiskConsistencyGroupPolicy>,
    /// Resource policy for instances used for placement configuration.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupPlacementPolicy")]
    pub group_placement_policy: Option<ResourcePolicyInitProviderGroupPlacementPolicy>,
    /// Resource policy for scheduling instance operations.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceSchedulePolicy")]
    pub instance_schedule_policy: Option<ResourcePolicyInitProviderInstanceSchedulePolicy>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Policy for creating snapshots of persistent disks.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotSchedulePolicy")]
    pub snapshot_schedule_policy: Option<ResourcePolicyInitProviderSnapshotSchedulePolicy>,
}

/// Replication consistency group for asynchronous disk replication.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyInitProviderDiskConsistencyGroupPolicy {
    /// Enable disk consistency on the resource policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Resource policy for instances used for placement configuration.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyInitProviderGroupPlacementPolicy {
    /// The number of availability domains instances will be spread across. If two instances are in different
    /// availability domain, they will not be put in the same low latency network
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityDomainCount")]
    pub availability_domain_count: Option<f64>,
    /// Collocation specifies whether to place VMs inside the same availability domain on the same low-latency network.
    /// Specify COLLOCATED to enable collocation. Can only be specified with vm_count. If compute instances are created
    /// with a COLLOCATED policy, then exactly vm_count instances must be created at the same time with the resource policy
    /// attached.
    /// Possible values are: COLLOCATED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collocation: Option<String>,
    /// Number of VMs in this placement group. Google does not recommend that you use this field
    /// unless you use a compact policy and you want your policy to work only if it contains this
    /// exact number of VMs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmCount")]
    pub vm_count: Option<f64>,
}

/// Resource policy for scheduling instance operations.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyInitProviderInstanceSchedulePolicy {
    /// The expiration time of the schedule. The timestamp is an RFC3339 string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expirationTime")]
    pub expiration_time: Option<String>,
    /// The start time of the schedule. The timestamp is an RFC3339 string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
    /// Specifies the time zone to be used in interpreting the schedule. The value of this field must be a time zone name
    /// from the tz database: http://en.wikipedia.org/wiki/Tz_database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    pub time_zone: Option<String>,
    /// Specifies the schedule for starting instances.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmStartSchedule")]
    pub vm_start_schedule: Option<ResourcePolicyInitProviderInstanceSchedulePolicyVmStartSchedule>,
    /// Specifies the schedule for stopping instances.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmStopSchedule")]
    pub vm_stop_schedule: Option<ResourcePolicyInitProviderInstanceSchedulePolicyVmStopSchedule>,
}

/// Specifies the schedule for starting instances.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyInitProviderInstanceSchedulePolicyVmStartSchedule {
    /// Specifies the frequency for the operation, using the unix-cron format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
}

/// Specifies the schedule for stopping instances.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyInitProviderInstanceSchedulePolicyVmStopSchedule {
    /// Specifies the frequency for the operation, using the unix-cron format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
}

/// Policy for creating snapshots of persistent disks.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyInitProviderSnapshotSchedulePolicy {
    /// Retention policy applied to snapshots created by this resource policy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retentionPolicy")]
    pub retention_policy: Option<ResourcePolicyInitProviderSnapshotSchedulePolicyRetentionPolicy>,
    /// Contains one of an hourlySchedule, dailySchedule, or weeklySchedule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<ResourcePolicyInitProviderSnapshotSchedulePolicySchedule>,
    /// Properties with which the snapshots are created, such as labels.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotProperties")]
    pub snapshot_properties: Option<ResourcePolicyInitProviderSnapshotSchedulePolicySnapshotProperties>,
}

/// Retention policy applied to snapshots created by this resource policy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyInitProviderSnapshotSchedulePolicyRetentionPolicy {
    /// Maximum age of the snapshot that is allowed to be kept.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetentionDays")]
    pub max_retention_days: Option<f64>,
    /// Specifies the behavior to apply to scheduled snapshots when
    /// the source disk is deleted.
    /// Default value is KEEP_AUTO_SNAPSHOTS.
    /// Possible values are: KEEP_AUTO_SNAPSHOTS, APPLY_RETENTION_POLICY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onSourceDiskDelete")]
    pub on_source_disk_delete: Option<String>,
}

/// Contains one of an hourlySchedule, dailySchedule, or weeklySchedule.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyInitProviderSnapshotSchedulePolicySchedule {
    /// The policy will execute every nth day at the specified time.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dailySchedule")]
    pub daily_schedule: Option<ResourcePolicyInitProviderSnapshotSchedulePolicyScheduleDailySchedule>,
    /// The policy will execute every nth hour starting at the specified time.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hourlySchedule")]
    pub hourly_schedule: Option<ResourcePolicyInitProviderSnapshotSchedulePolicyScheduleHourlySchedule>,
    /// Allows specifying a snapshot time for each day of the week.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weeklySchedule")]
    pub weekly_schedule: Option<ResourcePolicyInitProviderSnapshotSchedulePolicyScheduleWeeklySchedule>,
}

/// The policy will execute every nth day at the specified time.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyInitProviderSnapshotSchedulePolicyScheduleDailySchedule {
    /// Defines a schedule with units measured in days. The value determines how many days pass between the start of each cycle. Days in cycle for snapshot schedule policy must be 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "daysInCycle")]
    pub days_in_cycle: Option<f64>,
    /// Time within the window to start the operations.
    /// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
}

/// The policy will execute every nth hour starting at the specified time.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyInitProviderSnapshotSchedulePolicyScheduleHourlySchedule {
    /// The number of hours between snapshots.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hoursInCycle")]
    pub hours_in_cycle: Option<f64>,
    /// Time within the window to start the operations.
    /// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
}

/// Allows specifying a snapshot time for each day of the week.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyInitProviderSnapshotSchedulePolicyScheduleWeeklySchedule {
    /// May contain up to seven (one for each day of the week) snapshot times.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dayOfWeeks")]
    pub day_of_weeks: Option<Vec<ResourcePolicyInitProviderSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeks>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyInitProviderSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeks {
    /// The day of the week to create the snapshot. e.g. MONDAY
    /// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub day: Option<String>,
    /// Time within the window to start the operations.
    /// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
}

/// Properties with which the snapshots are created, such as labels.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyInitProviderSnapshotSchedulePolicySnapshotProperties {
    /// Creates the new snapshot in the snapshot chain labeled with the
    /// specified name. The chain name must be 1-63 characters long and comply
    /// with RFC1035.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chainName")]
    pub chain_name: Option<String>,
    /// Whether to perform a 'guest aware' snapshot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestFlush")]
    pub guest_flush: Option<bool>,
    /// A set of key-value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Cloud Storage bucket location to store the auto snapshot
    /// (regional or multi-regional)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageLocations")]
    pub storage_locations: Option<Vec<String>>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ResourcePolicyProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ResourcePolicyProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ResourcePolicyProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResourcePolicyProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResourcePolicyProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ResourcePolicyPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ResourcePolicyPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ResourcePolicyPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ResourcePolicyPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ResourcePolicyPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResourcePolicyPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ResourcePolicyPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ResourcePolicyStatus defines the observed state of ResourcePolicy.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<ResourcePolicyStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyStatusAtProvider {
    /// An optional description of this resource. Provide this property when you create the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Replication consistency group for asynchronous disk replication.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskConsistencyGroupPolicy")]
    pub disk_consistency_group_policy: Option<ResourcePolicyStatusAtProviderDiskConsistencyGroupPolicy>,
    /// Resource policy for instances used for placement configuration.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "groupPlacementPolicy")]
    pub group_placement_policy: Option<ResourcePolicyStatusAtProviderGroupPlacementPolicy>,
    /// an identifier for the resource with format projects/{{project}}/regions/{{region}}/resourcePolicies/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Resource policy for scheduling instance operations.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceSchedulePolicy")]
    pub instance_schedule_policy: Option<ResourcePolicyStatusAtProviderInstanceSchedulePolicy>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Region where resource policy resides.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The URI of the created resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    pub self_link: Option<String>,
    /// Policy for creating snapshots of persistent disks.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotSchedulePolicy")]
    pub snapshot_schedule_policy: Option<ResourcePolicyStatusAtProviderSnapshotSchedulePolicy>,
}

/// Replication consistency group for asynchronous disk replication.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyStatusAtProviderDiskConsistencyGroupPolicy {
    /// Enable disk consistency on the resource policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// Resource policy for instances used for placement configuration.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyStatusAtProviderGroupPlacementPolicy {
    /// The number of availability domains instances will be spread across. If two instances are in different
    /// availability domain, they will not be put in the same low latency network
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityDomainCount")]
    pub availability_domain_count: Option<f64>,
    /// Collocation specifies whether to place VMs inside the same availability domain on the same low-latency network.
    /// Specify COLLOCATED to enable collocation. Can only be specified with vm_count. If compute instances are created
    /// with a COLLOCATED policy, then exactly vm_count instances must be created at the same time with the resource policy
    /// attached.
    /// Possible values are: COLLOCATED.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub collocation: Option<String>,
    /// Number of VMs in this placement group. Google does not recommend that you use this field
    /// unless you use a compact policy and you want your policy to work only if it contains this
    /// exact number of VMs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmCount")]
    pub vm_count: Option<f64>,
}

/// Resource policy for scheduling instance operations.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyStatusAtProviderInstanceSchedulePolicy {
    /// The expiration time of the schedule. The timestamp is an RFC3339 string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "expirationTime")]
    pub expiration_time: Option<String>,
    /// The start time of the schedule. The timestamp is an RFC3339 string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
    /// Specifies the time zone to be used in interpreting the schedule. The value of this field must be a time zone name
    /// from the tz database: http://en.wikipedia.org/wiki/Tz_database.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeZone")]
    pub time_zone: Option<String>,
    /// Specifies the schedule for starting instances.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmStartSchedule")]
    pub vm_start_schedule: Option<ResourcePolicyStatusAtProviderInstanceSchedulePolicyVmStartSchedule>,
    /// Specifies the schedule for stopping instances.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vmStopSchedule")]
    pub vm_stop_schedule: Option<ResourcePolicyStatusAtProviderInstanceSchedulePolicyVmStopSchedule>,
}

/// Specifies the schedule for starting instances.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyStatusAtProviderInstanceSchedulePolicyVmStartSchedule {
    /// Specifies the frequency for the operation, using the unix-cron format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
}

/// Specifies the schedule for stopping instances.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyStatusAtProviderInstanceSchedulePolicyVmStopSchedule {
    /// Specifies the frequency for the operation, using the unix-cron format.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
}

/// Policy for creating snapshots of persistent disks.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyStatusAtProviderSnapshotSchedulePolicy {
    /// Retention policy applied to snapshots created by this resource policy.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retentionPolicy")]
    pub retention_policy: Option<ResourcePolicyStatusAtProviderSnapshotSchedulePolicyRetentionPolicy>,
    /// Contains one of an hourlySchedule, dailySchedule, or weeklySchedule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schedule: Option<ResourcePolicyStatusAtProviderSnapshotSchedulePolicySchedule>,
    /// Properties with which the snapshots are created, such as labels.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotProperties")]
    pub snapshot_properties: Option<ResourcePolicyStatusAtProviderSnapshotSchedulePolicySnapshotProperties>,
}

/// Retention policy applied to snapshots created by this resource policy.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyStatusAtProviderSnapshotSchedulePolicyRetentionPolicy {
    /// Maximum age of the snapshot that is allowed to be kept.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetentionDays")]
    pub max_retention_days: Option<f64>,
    /// Specifies the behavior to apply to scheduled snapshots when
    /// the source disk is deleted.
    /// Default value is KEEP_AUTO_SNAPSHOTS.
    /// Possible values are: KEEP_AUTO_SNAPSHOTS, APPLY_RETENTION_POLICY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onSourceDiskDelete")]
    pub on_source_disk_delete: Option<String>,
}

/// Contains one of an hourlySchedule, dailySchedule, or weeklySchedule.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyStatusAtProviderSnapshotSchedulePolicySchedule {
    /// The policy will execute every nth day at the specified time.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dailySchedule")]
    pub daily_schedule: Option<ResourcePolicyStatusAtProviderSnapshotSchedulePolicyScheduleDailySchedule>,
    /// The policy will execute every nth hour starting at the specified time.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hourlySchedule")]
    pub hourly_schedule: Option<ResourcePolicyStatusAtProviderSnapshotSchedulePolicyScheduleHourlySchedule>,
    /// Allows specifying a snapshot time for each day of the week.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "weeklySchedule")]
    pub weekly_schedule: Option<ResourcePolicyStatusAtProviderSnapshotSchedulePolicyScheduleWeeklySchedule>,
}

/// The policy will execute every nth day at the specified time.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyStatusAtProviderSnapshotSchedulePolicyScheduleDailySchedule {
    /// Defines a schedule with units measured in days. The value determines how many days pass between the start of each cycle. Days in cycle for snapshot schedule policy must be 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "daysInCycle")]
    pub days_in_cycle: Option<f64>,
    /// Time within the window to start the operations.
    /// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
}

/// The policy will execute every nth hour starting at the specified time.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyStatusAtProviderSnapshotSchedulePolicyScheduleHourlySchedule {
    /// The number of hours between snapshots.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hoursInCycle")]
    pub hours_in_cycle: Option<f64>,
    /// Time within the window to start the operations.
    /// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
}

/// Allows specifying a snapshot time for each day of the week.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyStatusAtProviderSnapshotSchedulePolicyScheduleWeeklySchedule {
    /// May contain up to seven (one for each day of the week) snapshot times.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dayOfWeeks")]
    pub day_of_weeks: Option<Vec<ResourcePolicyStatusAtProviderSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeks>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyStatusAtProviderSnapshotSchedulePolicyScheduleWeeklyScheduleDayOfWeeks {
    /// The day of the week to create the snapshot. e.g. MONDAY
    /// Possible values are: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub day: Option<String>,
    /// Time within the window to start the operations.
    /// It must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
}

/// Properties with which the snapshots are created, such as labels.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ResourcePolicyStatusAtProviderSnapshotSchedulePolicySnapshotProperties {
    /// Creates the new snapshot in the snapshot chain labeled with the
    /// specified name. The chain name must be 1-63 characters long and comply
    /// with RFC1035.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "chainName")]
    pub chain_name: Option<String>,
    /// Whether to perform a 'guest aware' snapshot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestFlush")]
    pub guest_flush: Option<bool>,
    /// A set of key-value pairs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Cloud Storage bucket location to store the auto snapshot
    /// (regional or multi-regional)
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageLocations")]
    pub storage_locations: Option<Vec<String>>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ReservationSpec defines the desired state of Reservation
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "compute.gcp.upbound.io", version = "v1beta2", kind = "Reservation", plural = "reservations")]
#[kube(status = "ReservationStatus")]
pub struct ReservationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<ReservationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ReservationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<ReservationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<ReservationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<ReservationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<ReservationWriteConnectionSecretToRef>,
}

/// ReservationSpec defines the desired state of Reservation
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReservationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationForProvider {
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The share setting for reservations.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareSettings")]
    pub share_settings: Option<ReservationForProviderShareSettings>,
    /// Reservation for instances with specific machine shapes.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "specificReservation")]
    pub specific_reservation: Option<ReservationForProviderSpecificReservation>,
    /// When set to true, only VMs that target this reservation by name can
    /// consume this reservation. Otherwise, it can be consumed by VMs with
    /// affinity for any reservation. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "specificReservationRequired")]
    pub specific_reservation_required: Option<bool>,
    /// The zone where the reservation is made.
    pub zone: String,
}

/// The share setting for reservations.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationForProviderShareSettings {
    /// A map of project number and project config. This is only valid when shareType's value is SPECIFIC_PROJECTS.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectMap")]
    pub project_map: Option<Vec<ReservationForProviderShareSettingsProjectMap>>,
    /// Type of sharing for this shared-reservation
    /// Possible values are: LOCAL, SPECIFIC_PROJECTS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareType")]
    pub share_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationForProviderShareSettingsProjectMap {
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The project id/number, should be same as the key of this project config in the project map.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
}

/// Reservation for instances with specific machine shapes.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationForProviderSpecificReservation {
    /// The number of resources that are allocated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<f64>,
    /// The instance properties for the reservation.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceProperties")]
    pub instance_properties: Option<ReservationForProviderSpecificReservationInstanceProperties>,
}

/// The instance properties for the reservation.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationForProviderSpecificReservationInstanceProperties {
    /// Guest accelerator type and count.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestAccelerators")]
    pub guest_accelerators: Option<Vec<ReservationForProviderSpecificReservationInstancePropertiesGuestAccelerators>>,
    /// The amount of local ssd to reserve with each instance. This
    /// reserves disks of type local-ssd.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localSsds")]
    pub local_ssds: Option<Vec<ReservationForProviderSpecificReservationInstancePropertiesLocalSsds>>,
    /// The name of the machine type to reserve.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineType")]
    pub machine_type: Option<String>,
    /// The minimum CPU platform for the reservation. For example,
    /// "Intel Skylake". See
    /// the CPU platform availability reference](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform#availablezones)
    /// for information on available CPU platforms.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minCpuPlatform")]
    pub min_cpu_platform: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationForProviderSpecificReservationInstancePropertiesGuestAccelerators {
    /// The number of the guest accelerator cards exposed to
    /// this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorCount")]
    pub accelerator_count: Option<f64>,
    /// The full or partial URL of the accelerator type to
    /// attach to this instance. For example:
    /// projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100
    /// If you are creating an instance template, specify only the accelerator name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorType")]
    pub accelerator_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationForProviderSpecificReservationInstancePropertiesLocalSsds {
    /// The size of the disk in base-2 GB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSizeGb")]
    pub disk_size_gb: Option<f64>,
    /// The disk interface to use for attaching this disk.
    /// Default value is SCSI.
    /// Possible values are: SCSI, NVME.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interface: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationInitProvider {
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The share setting for reservations.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareSettings")]
    pub share_settings: Option<ReservationInitProviderShareSettings>,
    /// Reservation for instances with specific machine shapes.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "specificReservation")]
    pub specific_reservation: Option<ReservationInitProviderSpecificReservation>,
    /// When set to true, only VMs that target this reservation by name can
    /// consume this reservation. Otherwise, it can be consumed by VMs with
    /// affinity for any reservation. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "specificReservationRequired")]
    pub specific_reservation_required: Option<bool>,
}

/// The share setting for reservations.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationInitProviderShareSettings {
    /// A map of project number and project config. This is only valid when shareType's value is SPECIFIC_PROJECTS.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectMap")]
    pub project_map: Option<Vec<ReservationInitProviderShareSettingsProjectMap>>,
    /// Type of sharing for this shared-reservation
    /// Possible values are: LOCAL, SPECIFIC_PROJECTS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareType")]
    pub share_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationInitProviderShareSettingsProjectMap {
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The project id/number, should be same as the key of this project config in the project map.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
}

/// Reservation for instances with specific machine shapes.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationInitProviderSpecificReservation {
    /// The number of resources that are allocated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<f64>,
    /// The instance properties for the reservation.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceProperties")]
    pub instance_properties: Option<ReservationInitProviderSpecificReservationInstanceProperties>,
}

/// The instance properties for the reservation.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationInitProviderSpecificReservationInstanceProperties {
    /// Guest accelerator type and count.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestAccelerators")]
    pub guest_accelerators: Option<Vec<ReservationInitProviderSpecificReservationInstancePropertiesGuestAccelerators>>,
    /// The amount of local ssd to reserve with each instance. This
    /// reserves disks of type local-ssd.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localSsds")]
    pub local_ssds: Option<Vec<ReservationInitProviderSpecificReservationInstancePropertiesLocalSsds>>,
    /// The name of the machine type to reserve.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineType")]
    pub machine_type: Option<String>,
    /// The minimum CPU platform for the reservation. For example,
    /// "Intel Skylake". See
    /// the CPU platform availability reference](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform#availablezones)
    /// for information on available CPU platforms.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minCpuPlatform")]
    pub min_cpu_platform: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationInitProviderSpecificReservationInstancePropertiesGuestAccelerators {
    /// The number of the guest accelerator cards exposed to
    /// this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorCount")]
    pub accelerator_count: Option<f64>,
    /// The full or partial URL of the accelerator type to
    /// attach to this instance. For example:
    /// projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100
    /// If you are creating an instance template, specify only the accelerator name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorType")]
    pub accelerator_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationInitProviderSpecificReservationInstancePropertiesLocalSsds {
    /// The size of the disk in base-2 GB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSizeGb")]
    pub disk_size_gb: Option<f64>,
    /// The disk interface to use for attaching this disk.
    /// Default value is SCSI.
    /// Possible values are: SCSI, NVME.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interface: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ReservationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ReservationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ReservationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReservationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReservationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ReservationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ReservationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ReservationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ReservationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ReservationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReservationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ReservationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ReservationStatus defines the observed state of Reservation.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<ReservationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationStatusAtProvider {
    /// Full or partial URL to a parent commitment. This field displays for
    /// reservations that are tied to a commitment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub commitment: Option<String>,
    /// Creation timestamp in RFC3339 text format.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "creationTimestamp")]
    pub creation_timestamp: Option<String>,
    /// An optional description of this resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// an identifier for the resource with format projects/{{project}}/zones/{{zone}}/reservations/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The URI of the created resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "selfLink")]
    pub self_link: Option<String>,
    /// The share setting for reservations.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareSettings")]
    pub share_settings: Option<ReservationStatusAtProviderShareSettings>,
    /// Reservation for instances with specific machine shapes.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "specificReservation")]
    pub specific_reservation: Option<ReservationStatusAtProviderSpecificReservation>,
    /// When set to true, only VMs that target this reservation by name can
    /// consume this reservation. Otherwise, it can be consumed by VMs with
    /// affinity for any reservation. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "specificReservationRequired")]
    pub specific_reservation_required: Option<bool>,
    /// The status of the reservation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// The zone where the reservation is made.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zone: Option<String>,
}

/// The share setting for reservations.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationStatusAtProviderShareSettings {
    /// A map of project number and project config. This is only valid when shareType's value is SPECIFIC_PROJECTS.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectMap")]
    pub project_map: Option<Vec<ReservationStatusAtProviderShareSettingsProjectMap>>,
    /// Type of sharing for this shared-reservation
    /// Possible values are: LOCAL, SPECIFIC_PROJECTS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "shareType")]
    pub share_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationStatusAtProviderShareSettingsProjectMap {
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The project id/number, should be same as the key of this project config in the project map.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
}

/// Reservation for instances with specific machine shapes.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationStatusAtProviderSpecificReservation {
    /// The number of resources that are allocated.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub count: Option<f64>,
    /// (Output)
    /// How many instances are in use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inUseCount")]
    pub in_use_count: Option<f64>,
    /// The instance properties for the reservation.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceProperties")]
    pub instance_properties: Option<ReservationStatusAtProviderSpecificReservationInstanceProperties>,
}

/// The instance properties for the reservation.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationStatusAtProviderSpecificReservationInstanceProperties {
    /// Guest accelerator type and count.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "guestAccelerators")]
    pub guest_accelerators: Option<Vec<ReservationStatusAtProviderSpecificReservationInstancePropertiesGuestAccelerators>>,
    /// The amount of local ssd to reserve with each instance. This
    /// reserves disks of type local-ssd.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localSsds")]
    pub local_ssds: Option<Vec<ReservationStatusAtProviderSpecificReservationInstancePropertiesLocalSsds>>,
    /// The name of the machine type to reserve.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "machineType")]
    pub machine_type: Option<String>,
    /// The minimum CPU platform for the reservation. For example,
    /// "Intel Skylake". See
    /// the CPU platform availability reference](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform#availablezones)
    /// for information on available CPU platforms.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minCpuPlatform")]
    pub min_cpu_platform: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationStatusAtProviderSpecificReservationInstancePropertiesGuestAccelerators {
    /// The number of the guest accelerator cards exposed to
    /// this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorCount")]
    pub accelerator_count: Option<f64>,
    /// The full or partial URL of the accelerator type to
    /// attach to this instance. For example:
    /// projects/my-project/zones/us-central1-c/acceleratorTypes/nvidia-tesla-p100
    /// If you are creating an instance template, specify only the accelerator name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "acceleratorType")]
    pub accelerator_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ReservationStatusAtProviderSpecificReservationInstancePropertiesLocalSsds {
    /// The size of the disk in base-2 GB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "diskSizeGb")]
    pub disk_size_gb: Option<f64>,
    /// The disk interface to use for attaching this disk.
    /// Default value is SCSI.
    /// Possible values are: SCSI, NVME.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interface: Option<String>,
}


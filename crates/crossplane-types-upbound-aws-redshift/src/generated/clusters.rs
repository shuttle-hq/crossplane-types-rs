// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ClusterSpec defines the desired state of Cluster
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "redshift.aws.upbound.io", version = "v1beta2", kind = "Cluster", plural = "clusters")]
#[kube(status = "ClusterStatus")]
pub struct ClusterSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<ClusterDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ClusterForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<ClusterInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<ClusterProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<ClusterPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<ClusterWriteConnectionSecretToRef>,
}

/// ClusterSpec defines the desired state of Cluster
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProvider {
    /// If true , major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowVersionUpgrade")]
    pub allow_version_upgrade: Option<bool>,
    /// Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applyImmediately")]
    pub apply_immediately: Option<bool>,
    /// The value represents how the cluster is configured to use AQUA (Advanced Query Accelerator) after the cluster is restored.
    /// No longer supported by the AWS API.
    /// Always returns auto.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aquaConfigurationStatus")]
    pub aqua_configuration_status: Option<String>,
    /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with create-cluster-snapshot. Default is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automatedSnapshotRetentionPeriod")]
    pub automated_snapshot_retention_period: Option<f64>,
    /// The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency. Can only be changed if availability_zone_relocation_enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    pub availability_zone: Option<String>,
    /// If true, the cluster can be relocated to another availabity zone, either automatically by AWS or when requested. Default is false. Available for use on clusters from the RA3 instance family.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZoneRelocationEnabled")]
    pub availability_zone_relocation_enabled: Option<bool>,
    /// The name of the parameter group to be associated with this cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterParameterGroupName")]
    pub cluster_parameter_group_name: Option<String>,
    /// The public key for the cluster
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterPublicKey")]
    pub cluster_public_key: Option<String>,
    /// The specific revision number of the database in the cluster
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterRevisionNumber")]
    pub cluster_revision_number: Option<String>,
    /// The name of a cluster subnet group to be associated with this cluster. If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterSubnetGroupName")]
    pub cluster_subnet_group_name: Option<String>,
    /// The cluster type to use. Either single-node or multi-node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterType")]
    pub cluster_type: Option<String>,
    /// The version of the Amazon Redshift engine software that you want to deploy on the cluster.
    /// The version selected runs on all the nodes in the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterVersion")]
    pub cluster_version: Option<String>,
    /// The name of the first database to be created when the cluster is created.
    /// If you do not provide a name, Amazon Redshift will create a default database called dev.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseName")]
    pub database_name: Option<String>,
    /// The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultIamRoleArn")]
    pub default_iam_role_arn: Option<String>,
    /// Reference to a Role in iam to populate defaultIamRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultIamRoleArnRef")]
    pub default_iam_role_arn_ref: Option<ClusterForProviderDefaultIamRoleArnRef>,
    /// Selector for a Role in iam to populate defaultIamRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultIamRoleArnSelector")]
    pub default_iam_role_arn_selector: Option<ClusterForProviderDefaultIamRoleArnSelector>,
    /// The Elastic IP (EIP) address for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticIp")]
    pub elastic_ip: Option<String>,
    /// If true , the data in the cluster is encrypted at rest.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encrypted: Option<bool>,
    /// The connection endpoint
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// If true , enhanced VPC routing is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enhancedVpcRouting")]
    pub enhanced_vpc_routing: Option<bool>,
    /// The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, skip_final_snapshot must be false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "finalSnapshotIdentifier")]
    pub final_snapshot_identifier: Option<String>,
    /// References to Role in iam to populate iamRoles.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleRefs")]
    pub iam_role_refs: Option<Vec<ClusterForProviderIamRoleRefs>>,
    /// Selector for a list of Role in iam to populate iamRoles.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleSelector")]
    pub iam_role_selector: Option<ClusterForProviderIamRoleSelector>,
    /// A list of IAM Role ARNs to associate with the cluster. A Maximum of 10 can be associated to the cluster at any time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoles")]
    pub iam_roles: Option<Vec<String>>,
    /// The ARN for the KMS encryption key. When specifying kms_key_id, encrypted needs to be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    pub kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyIdRef")]
    pub kms_key_id_ref: Option<ClusterForProviderKmsKeyIdRef>,
    /// Selector for a Key in kms to populate kmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyIdSelector")]
    pub kms_key_id_selector: Option<ClusterForProviderKmsKeyIdSelector>,
    /// Logging, documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging: Option<ClusterForProviderLogging>,
    /// The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the MaintenanceTrack value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of  a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks. Default value is current.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceTrackName")]
    pub maintenance_track_name: Option<String>,
    /// Whether to use AWS SecretsManager to manage the cluster admin credentials.
    /// Conflicts with master_password.
    /// One of master_password or manage_master_password is required unless snapshot_identifier is provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manageMasterPassword")]
    pub manage_master_password: Option<bool>,
    /// The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots. Valid values are between -1 and 3653. Default value is -1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manualSnapshotRetentionPeriod")]
    pub manual_snapshot_retention_period: Option<f64>,
    /// ID of the KMS key used to encrypt the cluster admin credentials secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterPasswordSecretKmsKeyId")]
    pub master_password_secret_kms_key_id: Option<String>,
    /// Password for the master DB user.
    /// Conflicts with manage_master_password.
    /// One of master_password or manage_master_password is required unless snapshot_identifier is provided.
    /// Note that this may show up in logs, and it will be stored in the state file.
    /// Password must contain at least 8 characters and contain at least one uppercase letter, one lowercase letter, and one number.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterPasswordSecretRef")]
    pub master_password_secret_ref: Option<ClusterForProviderMasterPasswordSecretRef>,
    /// Username for the master DB user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUsername")]
    pub master_username: Option<String>,
    /// Specifies if the Redshift cluster is multi-AZ.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiAz")]
    pub multi_az: Option<bool>,
    /// The node type to be provisioned for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeType")]
    pub node_type: Option<String>,
    /// The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node. Default is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numberOfNodes")]
    pub number_of_nodes: Option<f64>,
    /// The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerAccount")]
    pub owner_account: Option<String>,
    /// The port number on which the cluster accepts incoming connections. Valid values are between 1115 and 65535.
    /// The cluster is accessible only via the JDBC and ODBC connection strings.
    /// Part of the connection string requires the port on which the cluster will listen for incoming connections.
    /// Default port is 5439.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// The weekly time range (in UTC) during which automated cluster maintenance can occur.
    /// Format: ddd:hh24:mi-ddd:hh24:mi
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredMaintenanceWindow")]
    pub preferred_maintenance_window: Option<String>,
    /// If true, the cluster can be accessed from a public network. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publiclyAccessible")]
    pub publicly_accessible: Option<bool>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If true , a final cluster snapshot is not created. If false , a final cluster snapshot is created before the cluster is deleted. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipFinalSnapshot")]
    pub skip_final_snapshot: Option<bool>,
    /// The ARN of the snapshot from which to create the new cluster. Conflicts with snapshot_identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotArn")]
    pub snapshot_arn: Option<String>,
    /// The name of the cluster the source snapshot was created from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotClusterIdentifier")]
    pub snapshot_cluster_identifier: Option<String>,
    /// Configuration of automatic copy of snapshots from one region to another. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotCopy")]
    pub snapshot_copy: Option<ClusterForProviderSnapshotCopy>,
    /// The name of the snapshot from which to create the new cluster.  Conflicts with snapshot_arn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotIdentifier")]
    pub snapshot_identifier: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// References to SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIdRefs")]
    pub vpc_security_group_id_refs: Option<Vec<ClusterForProviderVpcSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIdSelector")]
    pub vpc_security_group_id_selector: Option<ClusterForProviderVpcSecurityGroupIdSelector>,
    /// A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIds")]
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Reference to a Role in iam to populate defaultIamRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderDefaultIamRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClusterForProviderDefaultIamRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderDefaultIamRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ClusterForProviderDefaultIamRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ClusterForProviderDefaultIamRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderDefaultIamRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderDefaultIamRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate defaultIamRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderDefaultIamRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClusterForProviderDefaultIamRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderDefaultIamRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ClusterForProviderDefaultIamRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ClusterForProviderDefaultIamRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderDefaultIamRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderDefaultIamRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderIamRoleRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClusterForProviderIamRoleRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderIamRoleRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ClusterForProviderIamRoleRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ClusterForProviderIamRoleRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderIamRoleRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderIamRoleRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Role in iam to populate iamRoles.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderIamRoleSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClusterForProviderIamRoleSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderIamRoleSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ClusterForProviderIamRoleSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ClusterForProviderIamRoleSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderIamRoleSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderIamRoleSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClusterForProviderKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ClusterForProviderKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ClusterForProviderKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClusterForProviderKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ClusterForProviderKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ClusterForProviderKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Logging, documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderLogging {
    /// The name of an existing S3 bucket where the log files are to be stored. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions.
    /// For more information on the permissions required for the bucket, please read the AWS documentation
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    pub bucket_name: Option<String>,
    /// Enables logging information such as queries and connection attempts, for the specified Amazon Redshift cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// The log destination type. An enum with possible values of s3 and cloudwatch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logDestinationType")]
    pub log_destination_type: Option<String>,
    /// The collection of exported log types. Log types include the connection log, user log and user activity log. Required when log_destination_type is cloudwatch. Valid log types are connectionlog, userlog, and useractivitylog.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logExports")]
    pub log_exports: Option<Vec<String>>,
    /// The prefix applied to the log file names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3KeyPrefix")]
    pub s3_key_prefix: Option<String>,
}

/// Password for the master DB user.
/// Conflicts with manage_master_password.
/// One of master_password or manage_master_password is required unless snapshot_identifier is provided.
/// Note that this may show up in logs, and it will be stored in the state file.
/// Password must contain at least 8 characters and contain at least one uppercase letter, one lowercase letter, and one number.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderMasterPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Configuration of automatic copy of snapshots from one region to another. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderSnapshotCopy {
    /// The destination region that you want to copy snapshots to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationRegion")]
    pub destination_region: Option<String>,
    /// The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grantName")]
    pub grant_name: Option<String>,
    /// The number of days to retain automated snapshots in the destination region after they are copied from the source region. Defaults to 7.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retentionPeriod")]
    pub retention_period: Option<f64>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderVpcSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClusterForProviderVpcSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderVpcSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ClusterForProviderVpcSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ClusterForProviderVpcSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderVpcSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderVpcSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderVpcSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClusterForProviderVpcSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterForProviderVpcSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ClusterForProviderVpcSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ClusterForProviderVpcSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderVpcSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterForProviderVpcSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProvider {
    /// If true , major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowVersionUpgrade")]
    pub allow_version_upgrade: Option<bool>,
    /// Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applyImmediately")]
    pub apply_immediately: Option<bool>,
    /// The value represents how the cluster is configured to use AQUA (Advanced Query Accelerator) after the cluster is restored.
    /// No longer supported by the AWS API.
    /// Always returns auto.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aquaConfigurationStatus")]
    pub aqua_configuration_status: Option<String>,
    /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with create-cluster-snapshot. Default is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automatedSnapshotRetentionPeriod")]
    pub automated_snapshot_retention_period: Option<f64>,
    /// The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency. Can only be changed if availability_zone_relocation_enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    pub availability_zone: Option<String>,
    /// If true, the cluster can be relocated to another availabity zone, either automatically by AWS or when requested. Default is false. Available for use on clusters from the RA3 instance family.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZoneRelocationEnabled")]
    pub availability_zone_relocation_enabled: Option<bool>,
    /// The name of the parameter group to be associated with this cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterParameterGroupName")]
    pub cluster_parameter_group_name: Option<String>,
    /// The public key for the cluster
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterPublicKey")]
    pub cluster_public_key: Option<String>,
    /// The specific revision number of the database in the cluster
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterRevisionNumber")]
    pub cluster_revision_number: Option<String>,
    /// The name of a cluster subnet group to be associated with this cluster. If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterSubnetGroupName")]
    pub cluster_subnet_group_name: Option<String>,
    /// The cluster type to use. Either single-node or multi-node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterType")]
    pub cluster_type: Option<String>,
    /// The version of the Amazon Redshift engine software that you want to deploy on the cluster.
    /// The version selected runs on all the nodes in the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterVersion")]
    pub cluster_version: Option<String>,
    /// The name of the first database to be created when the cluster is created.
    /// If you do not provide a name, Amazon Redshift will create a default database called dev.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseName")]
    pub database_name: Option<String>,
    /// The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultIamRoleArn")]
    pub default_iam_role_arn: Option<String>,
    /// Reference to a Role in iam to populate defaultIamRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultIamRoleArnRef")]
    pub default_iam_role_arn_ref: Option<ClusterInitProviderDefaultIamRoleArnRef>,
    /// Selector for a Role in iam to populate defaultIamRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultIamRoleArnSelector")]
    pub default_iam_role_arn_selector: Option<ClusterInitProviderDefaultIamRoleArnSelector>,
    /// The Elastic IP (EIP) address for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticIp")]
    pub elastic_ip: Option<String>,
    /// If true , the data in the cluster is encrypted at rest.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encrypted: Option<bool>,
    /// The connection endpoint
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// If true , enhanced VPC routing is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enhancedVpcRouting")]
    pub enhanced_vpc_routing: Option<bool>,
    /// The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, skip_final_snapshot must be false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "finalSnapshotIdentifier")]
    pub final_snapshot_identifier: Option<String>,
    /// References to Role in iam to populate iamRoles.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleRefs")]
    pub iam_role_refs: Option<Vec<ClusterInitProviderIamRoleRefs>>,
    /// Selector for a list of Role in iam to populate iamRoles.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoleSelector")]
    pub iam_role_selector: Option<ClusterInitProviderIamRoleSelector>,
    /// A list of IAM Role ARNs to associate with the cluster. A Maximum of 10 can be associated to the cluster at any time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoles")]
    pub iam_roles: Option<Vec<String>>,
    /// The ARN for the KMS encryption key. When specifying kms_key_id, encrypted needs to be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    pub kms_key_id: Option<String>,
    /// Reference to a Key in kms to populate kmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyIdRef")]
    pub kms_key_id_ref: Option<ClusterInitProviderKmsKeyIdRef>,
    /// Selector for a Key in kms to populate kmsKeyId.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyIdSelector")]
    pub kms_key_id_selector: Option<ClusterInitProviderKmsKeyIdSelector>,
    /// Logging, documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging: Option<ClusterInitProviderLogging>,
    /// The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the MaintenanceTrack value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of  a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks. Default value is current.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceTrackName")]
    pub maintenance_track_name: Option<String>,
    /// Whether to use AWS SecretsManager to manage the cluster admin credentials.
    /// Conflicts with master_password.
    /// One of master_password or manage_master_password is required unless snapshot_identifier is provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manageMasterPassword")]
    pub manage_master_password: Option<bool>,
    /// The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots. Valid values are between -1 and 3653. Default value is -1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manualSnapshotRetentionPeriod")]
    pub manual_snapshot_retention_period: Option<f64>,
    /// ID of the KMS key used to encrypt the cluster admin credentials secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterPasswordSecretKmsKeyId")]
    pub master_password_secret_kms_key_id: Option<String>,
    /// Password for the master DB user.
    /// Conflicts with manage_master_password.
    /// One of master_password or manage_master_password is required unless snapshot_identifier is provided.
    /// Note that this may show up in logs, and it will be stored in the state file.
    /// Password must contain at least 8 characters and contain at least one uppercase letter, one lowercase letter, and one number.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterPasswordSecretRef")]
    pub master_password_secret_ref: Option<ClusterInitProviderMasterPasswordSecretRef>,
    /// Username for the master DB user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUsername")]
    pub master_username: Option<String>,
    /// Specifies if the Redshift cluster is multi-AZ.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiAz")]
    pub multi_az: Option<bool>,
    /// The node type to be provisioned for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeType")]
    pub node_type: Option<String>,
    /// The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node. Default is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numberOfNodes")]
    pub number_of_nodes: Option<f64>,
    /// The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerAccount")]
    pub owner_account: Option<String>,
    /// The port number on which the cluster accepts incoming connections. Valid values are between 1115 and 65535.
    /// The cluster is accessible only via the JDBC and ODBC connection strings.
    /// Part of the connection string requires the port on which the cluster will listen for incoming connections.
    /// Default port is 5439.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// The weekly time range (in UTC) during which automated cluster maintenance can occur.
    /// Format: ddd:hh24:mi-ddd:hh24:mi
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredMaintenanceWindow")]
    pub preferred_maintenance_window: Option<String>,
    /// If true, the cluster can be accessed from a public network. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publiclyAccessible")]
    pub publicly_accessible: Option<bool>,
    /// Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If true , a final cluster snapshot is not created. If false , a final cluster snapshot is created before the cluster is deleted. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipFinalSnapshot")]
    pub skip_final_snapshot: Option<bool>,
    /// The ARN of the snapshot from which to create the new cluster. Conflicts with snapshot_identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotArn")]
    pub snapshot_arn: Option<String>,
    /// The name of the cluster the source snapshot was created from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotClusterIdentifier")]
    pub snapshot_cluster_identifier: Option<String>,
    /// Configuration of automatic copy of snapshots from one region to another. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotCopy")]
    pub snapshot_copy: Option<ClusterInitProviderSnapshotCopy>,
    /// The name of the snapshot from which to create the new cluster.  Conflicts with snapshot_arn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotIdentifier")]
    pub snapshot_identifier: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// References to SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIdRefs")]
    pub vpc_security_group_id_refs: Option<Vec<ClusterInitProviderVpcSecurityGroupIdRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIdSelector")]
    pub vpc_security_group_id_selector: Option<ClusterInitProviderVpcSecurityGroupIdSelector>,
    /// A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIds")]
    pub vpc_security_group_ids: Option<Vec<String>>,
}

/// Reference to a Role in iam to populate defaultIamRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderDefaultIamRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClusterInitProviderDefaultIamRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderDefaultIamRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ClusterInitProviderDefaultIamRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ClusterInitProviderDefaultIamRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderDefaultIamRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderDefaultIamRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate defaultIamRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderDefaultIamRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClusterInitProviderDefaultIamRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderDefaultIamRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ClusterInitProviderDefaultIamRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ClusterInitProviderDefaultIamRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderDefaultIamRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderDefaultIamRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderIamRoleRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClusterInitProviderIamRoleRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderIamRoleRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ClusterInitProviderIamRoleRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ClusterInitProviderIamRoleRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderIamRoleRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderIamRoleRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Role in iam to populate iamRoles.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderIamRoleSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClusterInitProviderIamRoleSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderIamRoleSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ClusterInitProviderIamRoleSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ClusterInitProviderIamRoleSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderIamRoleSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderIamRoleSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderKmsKeyIdRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClusterInitProviderKmsKeyIdRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderKmsKeyIdRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ClusterInitProviderKmsKeyIdRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ClusterInitProviderKmsKeyIdRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderKmsKeyIdRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderKmsKeyIdRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Key in kms to populate kmsKeyId.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderKmsKeyIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClusterInitProviderKmsKeyIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderKmsKeyIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ClusterInitProviderKmsKeyIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ClusterInitProviderKmsKeyIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderKmsKeyIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderKmsKeyIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Logging, documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderLogging {
    /// The name of an existing S3 bucket where the log files are to be stored. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions.
    /// For more information on the permissions required for the bucket, please read the AWS documentation
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    pub bucket_name: Option<String>,
    /// Enables logging information such as queries and connection attempts, for the specified Amazon Redshift cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// The log destination type. An enum with possible values of s3 and cloudwatch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logDestinationType")]
    pub log_destination_type: Option<String>,
    /// The collection of exported log types. Log types include the connection log, user log and user activity log. Required when log_destination_type is cloudwatch. Valid log types are connectionlog, userlog, and useractivitylog.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logExports")]
    pub log_exports: Option<Vec<String>>,
    /// The prefix applied to the log file names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3KeyPrefix")]
    pub s3_key_prefix: Option<String>,
}

/// Password for the master DB user.
/// Conflicts with manage_master_password.
/// One of master_password or manage_master_password is required unless snapshot_identifier is provided.
/// Note that this may show up in logs, and it will be stored in the state file.
/// Password must contain at least 8 characters and contain at least one uppercase letter, one lowercase letter, and one number.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderMasterPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Configuration of automatic copy of snapshots from one region to another. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderSnapshotCopy {
    /// The destination region that you want to copy snapshots to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationRegion")]
    pub destination_region: Option<String>,
    /// The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grantName")]
    pub grant_name: Option<String>,
    /// The number of days to retain automated snapshots in the destination region after they are copied from the source region. Defaults to 7.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retentionPeriod")]
    pub retention_period: Option<f64>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderVpcSecurityGroupIdRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClusterInitProviderVpcSecurityGroupIdRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderVpcSecurityGroupIdRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ClusterInitProviderVpcSecurityGroupIdRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ClusterInitProviderVpcSecurityGroupIdRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderVpcSecurityGroupIdRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderVpcSecurityGroupIdRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate vpcSecurityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderVpcSecurityGroupIdSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClusterInitProviderVpcSecurityGroupIdSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterInitProviderVpcSecurityGroupIdSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ClusterInitProviderVpcSecurityGroupIdSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ClusterInitProviderVpcSecurityGroupIdSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderVpcSecurityGroupIdSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterInitProviderVpcSecurityGroupIdSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClusterProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ClusterProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ClusterProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ClusterPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ClusterPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ClusterPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ClusterPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ClusterPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ClusterPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ClusterStatus defines the observed state of Cluster.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<ClusterStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterStatusAtProvider {
    /// If true , major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowVersionUpgrade")]
    pub allow_version_upgrade: Option<bool>,
    /// Specifies whether any cluster modifications are applied immediately, or during the next maintenance window. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "applyImmediately")]
    pub apply_immediately: Option<bool>,
    /// The value represents how the cluster is configured to use AQUA (Advanced Query Accelerator) after the cluster is restored.
    /// No longer supported by the AWS API.
    /// Always returns auto.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "aquaConfigurationStatus")]
    pub aqua_configuration_status: Option<String>,
    /// Amazon Resource Name (ARN) of cluster
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with create-cluster-snapshot. Default is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "automatedSnapshotRetentionPeriod")]
    pub automated_snapshot_retention_period: Option<f64>,
    /// The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency. Can only be changed if availability_zone_relocation_enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZone")]
    pub availability_zone: Option<String>,
    /// If true, the cluster can be relocated to another availabity zone, either automatically by AWS or when requested. Default is false. Available for use on clusters from the RA3 instance family.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availabilityZoneRelocationEnabled")]
    pub availability_zone_relocation_enabled: Option<bool>,
    /// The namespace Amazon Resource Name (ARN) of the cluster
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterNamespaceArn")]
    pub cluster_namespace_arn: Option<String>,
    /// The nodes in the cluster. Cluster node blocks are documented below
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterNodes")]
    pub cluster_nodes: Option<Vec<ClusterStatusAtProviderClusterNodes>>,
    /// The name of the parameter group to be associated with this cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterParameterGroupName")]
    pub cluster_parameter_group_name: Option<String>,
    /// The public key for the cluster
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterPublicKey")]
    pub cluster_public_key: Option<String>,
    /// The specific revision number of the database in the cluster
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterRevisionNumber")]
    pub cluster_revision_number: Option<String>,
    /// The name of a cluster subnet group to be associated with this cluster. If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterSubnetGroupName")]
    pub cluster_subnet_group_name: Option<String>,
    /// The cluster type to use. Either single-node or multi-node.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterType")]
    pub cluster_type: Option<String>,
    /// The version of the Amazon Redshift engine software that you want to deploy on the cluster.
    /// The version selected runs on all the nodes in the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterVersion")]
    pub cluster_version: Option<String>,
    /// The name of the first database to be created when the cluster is created.
    /// If you do not provide a name, Amazon Redshift will create a default database called dev.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseName")]
    pub database_name: Option<String>,
    /// The Amazon Resource Name (ARN) for the IAM role that was set as default for the cluster when the cluster was created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultIamRoleArn")]
    pub default_iam_role_arn: Option<String>,
    /// The DNS name of the cluster
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dnsName")]
    pub dns_name: Option<String>,
    /// The Elastic IP (EIP) address for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticIp")]
    pub elastic_ip: Option<String>,
    /// If true , the data in the cluster is encrypted at rest.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encrypted: Option<bool>,
    /// The connection endpoint
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<String>,
    /// If true , enhanced VPC routing is enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enhancedVpcRouting")]
    pub enhanced_vpc_routing: Option<bool>,
    /// The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, skip_final_snapshot must be false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "finalSnapshotIdentifier")]
    pub final_snapshot_identifier: Option<String>,
    /// A list of IAM Role ARNs to associate with the cluster. A Maximum of 10 can be associated to the cluster at any time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamRoles")]
    pub iam_roles: Option<Vec<String>>,
    /// The Redshift Cluster ID.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The ARN for the KMS encryption key. When specifying kms_key_id, encrypted needs to be set to true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyId")]
    pub kms_key_id: Option<String>,
    /// Logging, documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub logging: Option<ClusterStatusAtProviderLogging>,
    /// The name of the maintenance track for the restored cluster. When you take a snapshot, the snapshot inherits the MaintenanceTrack value from the cluster. The snapshot might be on a different track than the cluster that was the source for the snapshot. For example, suppose that you take a snapshot of  a cluster that is on the current track and then change the cluster to be on the trailing track. In this case, the snapshot and the source cluster are on different tracks. Default value is current.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maintenanceTrackName")]
    pub maintenance_track_name: Option<String>,
    /// Whether to use AWS SecretsManager to manage the cluster admin credentials.
    /// Conflicts with master_password.
    /// One of master_password or manage_master_password is required unless snapshot_identifier is provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manageMasterPassword")]
    pub manage_master_password: Option<bool>,
    /// The default number of days to retain a manual snapshot. If the value is -1, the snapshot is retained indefinitely. This setting doesn't change the retention period of existing snapshots. Valid values are between -1 and 3653. Default value is -1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "manualSnapshotRetentionPeriod")]
    pub manual_snapshot_retention_period: Option<f64>,
    /// ARN of the cluster admin credentials secret
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterPasswordSecretArn")]
    pub master_password_secret_arn: Option<String>,
    /// ID of the KMS key used to encrypt the cluster admin credentials secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterPasswordSecretKmsKeyId")]
    pub master_password_secret_kms_key_id: Option<String>,
    /// Username for the master DB user.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "masterUsername")]
    pub master_username: Option<String>,
    /// Specifies if the Redshift cluster is multi-AZ.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "multiAz")]
    pub multi_az: Option<bool>,
    /// The node type to be provisioned for the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeType")]
    pub node_type: Option<String>,
    /// The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node. Default is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numberOfNodes")]
    pub number_of_nodes: Option<f64>,
    /// The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ownerAccount")]
    pub owner_account: Option<String>,
    /// The port number on which the cluster accepts incoming connections. Valid values are between 1115 and 65535.
    /// The cluster is accessible only via the JDBC and ODBC connection strings.
    /// Part of the connection string requires the port on which the cluster will listen for incoming connections.
    /// Default port is 5439.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// The weekly time range (in UTC) during which automated cluster maintenance can occur.
    /// Format: ddd:hh24:mi-ddd:hh24:mi
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "preferredMaintenanceWindow")]
    pub preferred_maintenance_window: Option<String>,
    /// If true, the cluster can be accessed from a public network. Default is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publiclyAccessible")]
    pub publicly_accessible: Option<bool>,
    /// Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If true , a final cluster snapshot is not created. If false , a final cluster snapshot is created before the cluster is deleted. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipFinalSnapshot")]
    pub skip_final_snapshot: Option<bool>,
    /// The ARN of the snapshot from which to create the new cluster. Conflicts with snapshot_identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotArn")]
    pub snapshot_arn: Option<String>,
    /// The name of the cluster the source snapshot was created from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotClusterIdentifier")]
    pub snapshot_cluster_identifier: Option<String>,
    /// Configuration of automatic copy of snapshots from one region to another. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotCopy")]
    pub snapshot_copy: Option<ClusterStatusAtProviderSnapshotCopy>,
    /// The name of the snapshot from which to create the new cluster.  Conflicts with snapshot_arn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotIdentifier")]
    pub snapshot_identifier: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcSecurityGroupIds")]
    pub vpc_security_group_ids: Option<Vec<String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterStatusAtProviderClusterNodes {
    /// Whether the node is a leader node or a compute node
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "nodeRole")]
    pub node_role: Option<String>,
    /// The private IP address of a node within a cluster
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateIpAddress")]
    pub private_ip_address: Option<String>,
    /// The public IP address of a node within a cluster
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publicIpAddress")]
    pub public_ip_address: Option<String>,
}

/// Logging, documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterStatusAtProviderLogging {
    /// The name of an existing S3 bucket where the log files are to be stored. Must be in the same region as the cluster and the cluster must have read bucket and put object permissions.
    /// For more information on the permissions required for the bucket, please read the AWS documentation
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    pub bucket_name: Option<String>,
    /// Enables logging information such as queries and connection attempts, for the specified Amazon Redshift cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enable: Option<bool>,
    /// The log destination type. An enum with possible values of s3 and cloudwatch.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logDestinationType")]
    pub log_destination_type: Option<String>,
    /// The collection of exported log types. Log types include the connection log, user log and user activity log. Required when log_destination_type is cloudwatch. Valid log types are connectionlog, userlog, and useractivitylog.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logExports")]
    pub log_exports: Option<Vec<String>>,
    /// The prefix applied to the log file names.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3KeyPrefix")]
    pub s3_key_prefix: Option<String>,
}

/// Configuration of automatic copy of snapshots from one region to another. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ClusterStatusAtProviderSnapshotCopy {
    /// The destination region that you want to copy snapshots to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationRegion")]
    pub destination_region: Option<String>,
    /// The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "grantName")]
    pub grant_name: Option<String>,
    /// The number of days to retain automated snapshots in the destination region after they are copied from the source region. Defaults to 7.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retentionPeriod")]
    pub retention_period: Option<f64>,
}


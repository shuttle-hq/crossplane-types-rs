// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use std::collections::HashMap;

    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Deserialize, Serialize};
}
use self::prelude::*;

/// ApplicationSpec defines the desired state of Application
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(
    group = "emrserverless.aws.upbound.io",
    version = "v1beta2",
    kind = "Application",
    plural = "applications"
)]
#[kube(status = "ApplicationStatus")]
pub struct ApplicationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "deletionPolicy"
    )]
    pub deletion_policy: Option<ApplicationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ApplicationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initProvider"
    )]
    pub init_provider: Option<ApplicationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "managementPolicies"
    )]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "providerConfigRef"
    )]
    pub provider_config_ref: Option<ApplicationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "publishConnectionDetailsTo"
    )]
    pub publish_connection_details_to: Option<ApplicationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "writeConnectionSecretToRef"
    )]
    pub write_connection_secret_to_ref: Option<ApplicationWriteConnectionSecretToRef>,
}

/// ApplicationSpec defines the desired state of Application
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProvider {
    /// –  The CPU architecture of an application. Valid values are ARM64 or X86_64. Default value is X86_64.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub architecture: Option<String>,
    /// –  The configuration for an application to automatically start on job submission.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoStartConfiguration"
    )]
    pub auto_start_configuration: Option<ApplicationForProviderAutoStartConfiguration>,
    /// –  The configuration for an application to automatically stop after a certain amount of time being idle.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoStopConfiguration"
    )]
    pub auto_stop_configuration: Option<ApplicationForProviderAutoStopConfiguration>,
    /// –  The image configuration applied to all worker types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageConfiguration"
    )]
    pub image_configuration: Option<ApplicationForProviderImageConfiguration>,
    /// –  The capacity to initialize when the application is created.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialCapacity"
    )]
    pub initial_capacity: Option<Vec<ApplicationForProviderInitialCapacity>>,
    /// –  Enables the interactive use cases to use when running an application.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "interactiveConfiguration"
    )]
    pub interactive_configuration: Option<ApplicationForProviderInteractiveConfiguration>,
    /// –  The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumCapacity"
    )]
    pub maximum_capacity: Option<ApplicationForProviderMaximumCapacity>,
    /// –  The name of the application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// –  The network configuration for customer VPC connectivity.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkConfiguration"
    )]
    pub network_configuration: Option<ApplicationForProviderNetworkConfiguration>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// –  The EMR release version associated with the application.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "releaseLabel"
    )]
    pub release_label: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// –  The type of application you want to start, such as spark or hive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// –  The configuration for an application to automatically start on job submission.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderAutoStartConfiguration {
    /// Enables the application to automatically start on job submission. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// –  The configuration for an application to automatically stop after a certain amount of time being idle.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderAutoStopConfiguration {
    /// Enables the application to automatically start on job submission. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The amount of idle time in minutes after which your application will automatically stop. Defaults to 15 minutes.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleTimeoutMinutes"
    )]
    pub idle_timeout_minutes: Option<f64>,
}

/// –  The image configuration applied to all worker types.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderImageConfiguration {
    /// The image URI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageUri")]
    pub image_uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInitialCapacity {
    /// The initial capacity configuration per worker.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialCapacityConfig"
    )]
    pub initial_capacity_config: Option<ApplicationForProviderInitialCapacityInitialCapacityConfig>,
    /// The worker type for an analytics framework. For Spark applications, the key can either be set to Driver or Executor. For Hive applications, it can be set to HiveDriver or TezTask.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialCapacityType"
    )]
    pub initial_capacity_type: Option<String>,
}

/// The initial capacity configuration per worker.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInitialCapacityInitialCapacityConfig {
    /// The resource configuration of the initial capacity configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workerConfiguration"
    )]
    pub worker_configuration:
        Option<ApplicationForProviderInitialCapacityInitialCapacityConfigWorkerConfiguration>,
    /// The number of workers in the initial capacity configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workerCount"
    )]
    pub worker_count: Option<f64>,
}

/// The resource configuration of the initial capacity configuration.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInitialCapacityInitialCapacityConfigWorkerConfiguration {
    /// The maximum allowed CPU for an application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<String>,
    /// The maximum allowed disk for an application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk: Option<String>,
    /// The maximum allowed resources for an application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub memory: Option<String>,
}

/// –  Enables the interactive use cases to use when running an application.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderInteractiveConfiguration {
    /// Enables an Apache Livy endpoint that you can connect to and run interactive jobs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "livyEndpointEnabled"
    )]
    pub livy_endpoint_enabled: Option<bool>,
    /// Enables you to connect an application to Amazon EMR Studio to run interactive workloads in a notebook.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "studioEnabled"
    )]
    pub studio_enabled: Option<bool>,
}

/// –  The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderMaximumCapacity {
    /// The maximum allowed CPU for an application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<String>,
    /// The maximum allowed disk for an application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk: Option<String>,
    /// The maximum allowed resources for an application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub memory: Option<String>,
}

/// –  The network configuration for customer VPC connectivity.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationForProviderNetworkConfiguration {
    /// The array of security group Ids for customer VPC connectivity.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    pub security_group_ids: Option<Vec<String>>,
    /// The array of subnet Ids for customer VPC connectivity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProvider {
    /// –  The CPU architecture of an application. Valid values are ARM64 or X86_64. Default value is X86_64.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub architecture: Option<String>,
    /// –  The configuration for an application to automatically start on job submission.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoStartConfiguration"
    )]
    pub auto_start_configuration: Option<ApplicationInitProviderAutoStartConfiguration>,
    /// –  The configuration for an application to automatically stop after a certain amount of time being idle.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoStopConfiguration"
    )]
    pub auto_stop_configuration: Option<ApplicationInitProviderAutoStopConfiguration>,
    /// –  The image configuration applied to all worker types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageConfiguration"
    )]
    pub image_configuration: Option<ApplicationInitProviderImageConfiguration>,
    /// –  The capacity to initialize when the application is created.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialCapacity"
    )]
    pub initial_capacity: Option<Vec<ApplicationInitProviderInitialCapacity>>,
    /// –  Enables the interactive use cases to use when running an application.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "interactiveConfiguration"
    )]
    pub interactive_configuration: Option<ApplicationInitProviderInteractiveConfiguration>,
    /// –  The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumCapacity"
    )]
    pub maximum_capacity: Option<ApplicationInitProviderMaximumCapacity>,
    /// –  The name of the application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// –  The network configuration for customer VPC connectivity.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkConfiguration"
    )]
    pub network_configuration: Option<ApplicationInitProviderNetworkConfiguration>,
    /// –  The EMR release version associated with the application.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "releaseLabel"
    )]
    pub release_label: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// –  The type of application you want to start, such as spark or hive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// –  The configuration for an application to automatically start on job submission.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderAutoStartConfiguration {
    /// Enables the application to automatically start on job submission. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// –  The configuration for an application to automatically stop after a certain amount of time being idle.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderAutoStopConfiguration {
    /// Enables the application to automatically start on job submission. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The amount of idle time in minutes after which your application will automatically stop. Defaults to 15 minutes.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleTimeoutMinutes"
    )]
    pub idle_timeout_minutes: Option<f64>,
}

/// –  The image configuration applied to all worker types.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderImageConfiguration {
    /// The image URI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageUri")]
    pub image_uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInitialCapacity {
    /// The initial capacity configuration per worker.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialCapacityConfig"
    )]
    pub initial_capacity_config:
        Option<ApplicationInitProviderInitialCapacityInitialCapacityConfig>,
    /// The worker type for an analytics framework. For Spark applications, the key can either be set to Driver or Executor. For Hive applications, it can be set to HiveDriver or TezTask.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialCapacityType"
    )]
    pub initial_capacity_type: Option<String>,
}

/// The initial capacity configuration per worker.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInitialCapacityInitialCapacityConfig {
    /// The resource configuration of the initial capacity configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workerConfiguration"
    )]
    pub worker_configuration:
        Option<ApplicationInitProviderInitialCapacityInitialCapacityConfigWorkerConfiguration>,
    /// The number of workers in the initial capacity configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workerCount"
    )]
    pub worker_count: Option<f64>,
}

/// The resource configuration of the initial capacity configuration.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInitialCapacityInitialCapacityConfigWorkerConfiguration {
    /// The maximum allowed CPU for an application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<String>,
    /// The maximum allowed disk for an application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk: Option<String>,
    /// The maximum allowed resources for an application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub memory: Option<String>,
}

/// –  Enables the interactive use cases to use when running an application.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderInteractiveConfiguration {
    /// Enables an Apache Livy endpoint that you can connect to and run interactive jobs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "livyEndpointEnabled"
    )]
    pub livy_endpoint_enabled: Option<bool>,
    /// Enables you to connect an application to Amazon EMR Studio to run interactive workloads in a notebook.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "studioEnabled"
    )]
    pub studio_enabled: Option<bool>,
}

/// –  The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderMaximumCapacity {
    /// The maximum allowed CPU for an application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<String>,
    /// The maximum allowed disk for an application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk: Option<String>,
    /// The maximum allowed resources for an application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub memory: Option<String>,
}

/// –  The network configuration for customer VPC connectivity.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationInitProviderNetworkConfiguration {
    /// The array of security group Ids for customer VPC connectivity.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    pub security_group_ids: Option<Vec<String>>,
    /// The array of subnet Ids for customer VPC connectivity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ApplicationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ApplicationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ApplicationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ApplicationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ApplicationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ApplicationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ApplicationStatus defines the observed state of Application.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatus {
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "atProvider"
    )]
    pub at_provider: Option<ApplicationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "observedGeneration"
    )]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProvider {
    /// –  The CPU architecture of an application. Valid values are ARM64 or X86_64. Default value is X86_64.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub architecture: Option<String>,
    /// ARN of the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// –  The configuration for an application to automatically start on job submission.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoStartConfiguration"
    )]
    pub auto_start_configuration: Option<ApplicationStatusAtProviderAutoStartConfiguration>,
    /// –  The configuration for an application to automatically stop after a certain amount of time being idle.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "autoStopConfiguration"
    )]
    pub auto_stop_configuration: Option<ApplicationStatusAtProviderAutoStopConfiguration>,
    /// The ID of the cluster.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// –  The image configuration applied to all worker types.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "imageConfiguration"
    )]
    pub image_configuration: Option<ApplicationStatusAtProviderImageConfiguration>,
    /// –  The capacity to initialize when the application is created.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialCapacity"
    )]
    pub initial_capacity: Option<Vec<ApplicationStatusAtProviderInitialCapacity>>,
    /// –  Enables the interactive use cases to use when running an application.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "interactiveConfiguration"
    )]
    pub interactive_configuration: Option<ApplicationStatusAtProviderInteractiveConfiguration>,
    /// –  The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "maximumCapacity"
    )]
    pub maximum_capacity: Option<ApplicationStatusAtProviderMaximumCapacity>,
    /// –  The name of the application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// –  The network configuration for customer VPC connectivity.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "networkConfiguration"
    )]
    pub network_configuration: Option<ApplicationStatusAtProviderNetworkConfiguration>,
    /// –  The EMR release version associated with the application.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "releaseLabel"
    )]
    pub release_label: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// –  The type of application you want to start, such as spark or hive.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// –  The configuration for an application to automatically start on job submission.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderAutoStartConfiguration {
    /// Enables the application to automatically start on job submission. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

/// –  The configuration for an application to automatically stop after a certain amount of time being idle.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderAutoStopConfiguration {
    /// Enables the application to automatically start on job submission. Defaults to true.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The amount of idle time in minutes after which your application will automatically stop. Defaults to 15 minutes.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "idleTimeoutMinutes"
    )]
    pub idle_timeout_minutes: Option<f64>,
}

/// –  The image configuration applied to all worker types.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderImageConfiguration {
    /// The image URI.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "imageUri")]
    pub image_uri: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderInitialCapacity {
    /// The initial capacity configuration per worker.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialCapacityConfig"
    )]
    pub initial_capacity_config:
        Option<ApplicationStatusAtProviderInitialCapacityInitialCapacityConfig>,
    /// The worker type for an analytics framework. For Spark applications, the key can either be set to Driver or Executor. For Hive applications, it can be set to HiveDriver or TezTask.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "initialCapacityType"
    )]
    pub initial_capacity_type: Option<String>,
}

/// The initial capacity configuration per worker.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderInitialCapacityInitialCapacityConfig {
    /// The resource configuration of the initial capacity configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workerConfiguration"
    )]
    pub worker_configuration:
        Option<ApplicationStatusAtProviderInitialCapacityInitialCapacityConfigWorkerConfiguration>,
    /// The number of workers in the initial capacity configuration.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "workerCount"
    )]
    pub worker_count: Option<f64>,
}

/// The resource configuration of the initial capacity configuration.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderInitialCapacityInitialCapacityConfigWorkerConfiguration {
    /// The maximum allowed CPU for an application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<String>,
    /// The maximum allowed disk for an application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk: Option<String>,
    /// The maximum allowed resources for an application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub memory: Option<String>,
}

/// –  Enables the interactive use cases to use when running an application.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderInteractiveConfiguration {
    /// Enables an Apache Livy endpoint that you can connect to and run interactive jobs.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "livyEndpointEnabled"
    )]
    pub livy_endpoint_enabled: Option<bool>,
    /// Enables you to connect an application to Amazon EMR Studio to run interactive workloads in a notebook.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "studioEnabled"
    )]
    pub studio_enabled: Option<bool>,
}

/// –  The maximum capacity to allocate when the application is created. This is cumulative across all workers at any given point in time, not just when an application is created. No new resources will be created once any one of the defined limits is hit.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderMaximumCapacity {
    /// The maximum allowed CPU for an application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cpu: Option<String>,
    /// The maximum allowed disk for an application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disk: Option<String>,
    /// The maximum allowed resources for an application.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub memory: Option<String>,
}

/// –  The network configuration for customer VPC connectivity.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ApplicationStatusAtProviderNetworkConfiguration {
    /// The array of security group Ids for customer VPC connectivity.
    #[serde(
        default,
        skip_serializing_if = "Option::is_none",
        rename = "securityGroupIds"
    )]
    pub security_group_ids: Option<Vec<String>>,
    /// The array of subnet Ids for customer VPC connectivity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
}

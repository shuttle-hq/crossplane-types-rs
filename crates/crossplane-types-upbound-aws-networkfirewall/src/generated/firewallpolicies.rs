// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// FirewallPolicySpec defines the desired state of FirewallPolicy
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "networkfirewall.aws.upbound.io", version = "v1beta2", kind = "FirewallPolicy", plural = "firewallpolicies")]
#[kube(status = "FirewallPolicyStatus")]
pub struct FirewallPolicySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<FirewallPolicyDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: FirewallPolicyForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<FirewallPolicyInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<FirewallPolicyProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<FirewallPolicyPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<FirewallPolicyWriteConnectionSecretToRef>,
}

/// FirewallPolicySpec defines the desired state of FirewallPolicy
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProvider {
    /// A friendly description of the firewall policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// KMS encryption configuration settings. See Encryption Configuration below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfiguration")]
    pub encryption_configuration: Option<FirewallPolicyForProviderEncryptionConfiguration>,
    /// A configuration block describing the rule groups and policy actions to use in the firewall policy. See Firewall Policy below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firewallPolicy")]
    pub firewall_policy: Option<FirewallPolicyForProviderFirewallPolicy>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// KMS encryption configuration settings. See Encryption Configuration below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderEncryptionConfiguration {
    /// The ID of the customer managed key. You can use any of the key identifiers that KMS supports, unless you're using a key that's managed by another account. If you're using a key managed by another account, then specify the key ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    pub key_id: Option<String>,
    /// The type of AWS KMS key to use for encryption of your Network Firewall resources. Valid values are CUSTOMER_KMS and AWS_OWNED_KMS_KEY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// A configuration block describing the rule groups and policy actions to use in the firewall policy. See Firewall Policy below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicy {
    /// . Contains variables that you can use to override default Suricata settings in your firewall policy. See Rule Variables for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyVariables")]
    pub policy_variables: Option<FirewallPolicyForProviderFirewallPolicyPolicyVariables>,
    /// Set of actions to take on a packet if it does not match any stateful rules in the policy. This can only be specified if the policy has a stateful_engine_options block with a rule_order value of STRICT_ORDER. You can specify one of either or neither values of aws:drop_strict or aws:drop_established, as well as any combination of aws:alert_strict and aws:alert_established.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulDefaultActions")]
    pub stateful_default_actions: Option<Vec<String>>,
    /// A configuration block that defines options on how the policy handles stateful rules. See Stateful Engine Options below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulEngineOptions")]
    pub stateful_engine_options: Option<FirewallPolicyForProviderFirewallPolicyStatefulEngineOptions>,
    /// Set of configuration blocks containing references to the stateful rule groups that are used in the policy. See Stateful Rule Group Reference below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulRuleGroupReference")]
    pub stateful_rule_group_reference: Option<Vec<FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReference>>,
    /// Set of configuration blocks describing the custom action definitions that are available for use in the firewall policy's stateless_default_actions. See Stateless Custom Action below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statelessCustomAction")]
    pub stateless_custom_action: Option<Vec<FirewallPolicyForProviderFirewallPolicyStatelessCustomAction>>,
    /// Set of actions to take on a packet if it does not match any of the stateless rules in the policy. You must specify one of the standard actions including: aws:drop, aws:pass, or aws:forward_to_sfe.
    /// In addition, you can specify custom actions that are compatible with your standard action choice. If you want non-matching packets to be forwarded for stateful inspection, specify aws:forward_to_sfe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statelessDefaultActions")]
    pub stateless_default_actions: Option<Vec<String>>,
    /// Set of actions to take on a fragmented packet if it does not match any of the stateless rules in the policy. You must specify one of the standard actions including: aws:drop, aws:pass, or aws:forward_to_sfe.
    /// In addition, you can specify custom actions that are compatible with your standard action choice. If you want non-matching packets to be forwarded for stateful inspection, specify aws:forward_to_sfe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statelessFragmentDefaultActions")]
    pub stateless_fragment_default_actions: Option<Vec<String>>,
    /// Set of configuration blocks containing references to the stateless rule groups that are used in the policy. See Stateless Rule Group Reference below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statelessRuleGroupReference")]
    pub stateless_rule_group_reference: Option<Vec<FirewallPolicyForProviderFirewallPolicyStatelessRuleGroupReference>>,
    /// The (ARN) of the TLS Inspection policy to attach to the FW Policy.  This must be added at creation of the resource per AWS documentation. "You can only add a TLS inspection configuration to a new policy, not to an existing policy."  This cannot be removed from a FW Policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsInspectionConfigurationArn")]
    pub tls_inspection_configuration_arn: Option<String>,
}

/// . Contains variables that you can use to override default Suricata settings in your firewall policy. See Rule Variables for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyPolicyVariables {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleVariables")]
    pub rule_variables: Option<Vec<FirewallPolicyForProviderFirewallPolicyPolicyVariablesRuleVariables>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyPolicyVariablesRuleVariables {
    /// A configuration block that defines a set of IP addresses. See IP Set below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipSet")]
    pub ip_set: Option<FirewallPolicyForProviderFirewallPolicyPolicyVariablesRuleVariablesIpSet>,
    /// An alphanumeric string to identify the ip_set. Valid values: HOME_NET
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

/// A configuration block that defines a set of IP addresses. See IP Set below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyPolicyVariablesRuleVariablesIpSet {
    /// Set of IPv4 or IPv6 addresses in CIDR notation to use for the Suricata HOME_NET variable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definition: Option<Vec<String>>,
}

/// A configuration block that defines options on how the policy handles stateful rules. See Stateful Engine Options below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyStatefulEngineOptions {
    /// Amount of time that can pass without any traffic sent through the firewall before the firewall determines that the connection is idle.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flowTimeouts")]
    pub flow_timeouts: Option<FirewallPolicyForProviderFirewallPolicyStatefulEngineOptionsFlowTimeouts>,
    /// Indicates how to manage the order of stateful rule evaluation for the policy. Default value: DEFAULT_ACTION_ORDER. Valid values: DEFAULT_ACTION_ORDER, STRICT_ORDER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleOrder")]
    pub rule_order: Option<String>,
    /// Describes how to treat traffic which has broken midstream. Default value: DROP. Valid values: DROP, CONTINUE, REJECT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamExceptionPolicy")]
    pub stream_exception_policy: Option<String>,
}

/// Amount of time that can pass without any traffic sent through the firewall before the firewall determines that the connection is idle.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyStatefulEngineOptionsFlowTimeouts {
    /// Number of seconds that can pass without any TCP traffic sent through the firewall before the firewall determines that the connection is idle. After the idle timeout passes, data packets are dropped, however, the next TCP SYN packet is considered a new flow and is processed by the firewall. Clients or targets can use TCP keepalive packets to reset the idle timeout. Default value: 350.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpIdleTimeoutSeconds")]
    pub tcp_idle_timeout_seconds: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReference {
    /// Configuration block for override values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    pub r#override: Option<FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReferenceOverride>,
    /// An integer setting that indicates the order in which to run the stateless rule groups in a single policy. AWS Network Firewall applies each stateless rule group to a packet starting with the group that has the lowest priority setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// The Amazon Resource Name (ARN) of the stateless rule group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArn")]
    pub resource_arn: Option<String>,
    /// Reference to a RuleGroup in networkfirewall to populate resourceArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArnRef")]
    pub resource_arn_ref: Option<FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnRef>,
    /// Selector for a RuleGroup in networkfirewall to populate resourceArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArnSelector")]
    pub resource_arn_selector: Option<FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnSelector>,
}

/// Configuration block for override values
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReferenceOverride {
    /// The action that changes the rule group from DROP to ALERT . This only applies to managed rule groups.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
}

/// Reference to a RuleGroup in networkfirewall to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a RuleGroup in networkfirewall to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyForProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyStatelessCustomAction {
    /// A configuration block describing the custom action associated with the action_name. See Action Definition below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionDefinition")]
    pub action_definition: Option<FirewallPolicyForProviderFirewallPolicyStatelessCustomActionActionDefinition>,
    /// A friendly name of the custom action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionName")]
    pub action_name: Option<String>,
}

/// A configuration block describing the custom action associated with the action_name. See Action Definition below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyStatelessCustomActionActionDefinition {
    /// A configuration block describing the stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. You can pair this custom action with any of the standard stateless rule actions. See Publish Metric Action below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishMetricAction")]
    pub publish_metric_action: Option<FirewallPolicyForProviderFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricAction>,
}

/// A configuration block describing the stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. You can pair this custom action with any of the standard stateless rule actions. See Publish Metric Action below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricAction {
    /// Set of configuration blocks describing dimension settings to use for Amazon CloudWatch custom metrics. See Dimension below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dimension: Option<Vec<FirewallPolicyForProviderFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricActionDimension>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricActionDimension {
    /// The string value to use in the custom metric dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyStatelessRuleGroupReference {
    /// An integer setting that indicates the order in which to run the stateless rule groups in a single policy. AWS Network Firewall applies each stateless rule group to a packet starting with the group that has the lowest priority setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// The Amazon Resource Name (ARN) of the stateless rule group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArn")]
    pub resource_arn: Option<String>,
    /// Reference to a RuleGroup in networkfirewall to populate resourceArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArnRef")]
    pub resource_arn_ref: Option<FirewallPolicyForProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnRef>,
    /// Selector for a RuleGroup in networkfirewall to populate resourceArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArnSelector")]
    pub resource_arn_selector: Option<FirewallPolicyForProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnSelector>,
}

/// Reference to a RuleGroup in networkfirewall to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FirewallPolicyForProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FirewallPolicyForProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FirewallPolicyForProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyForProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyForProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a RuleGroup in networkfirewall to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FirewallPolicyForProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyForProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FirewallPolicyForProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FirewallPolicyForProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyForProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyForProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProvider {
    /// A friendly description of the firewall policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// KMS encryption configuration settings. See Encryption Configuration below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfiguration")]
    pub encryption_configuration: Option<FirewallPolicyInitProviderEncryptionConfiguration>,
    /// A configuration block describing the rule groups and policy actions to use in the firewall policy. See Firewall Policy below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firewallPolicy")]
    pub firewall_policy: Option<FirewallPolicyInitProviderFirewallPolicy>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// KMS encryption configuration settings. See Encryption Configuration below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderEncryptionConfiguration {
    /// The ID of the customer managed key. You can use any of the key identifiers that KMS supports, unless you're using a key that's managed by another account. If you're using a key managed by another account, then specify the key ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    pub key_id: Option<String>,
    /// The type of AWS KMS key to use for encryption of your Network Firewall resources. Valid values are CUSTOMER_KMS and AWS_OWNED_KMS_KEY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// A configuration block describing the rule groups and policy actions to use in the firewall policy. See Firewall Policy below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicy {
    /// . Contains variables that you can use to override default Suricata settings in your firewall policy. See Rule Variables for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyVariables")]
    pub policy_variables: Option<FirewallPolicyInitProviderFirewallPolicyPolicyVariables>,
    /// Set of actions to take on a packet if it does not match any stateful rules in the policy. This can only be specified if the policy has a stateful_engine_options block with a rule_order value of STRICT_ORDER. You can specify one of either or neither values of aws:drop_strict or aws:drop_established, as well as any combination of aws:alert_strict and aws:alert_established.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulDefaultActions")]
    pub stateful_default_actions: Option<Vec<String>>,
    /// A configuration block that defines options on how the policy handles stateful rules. See Stateful Engine Options below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulEngineOptions")]
    pub stateful_engine_options: Option<FirewallPolicyInitProviderFirewallPolicyStatefulEngineOptions>,
    /// Set of configuration blocks containing references to the stateful rule groups that are used in the policy. See Stateful Rule Group Reference below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulRuleGroupReference")]
    pub stateful_rule_group_reference: Option<Vec<FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReference>>,
    /// Set of configuration blocks describing the custom action definitions that are available for use in the firewall policy's stateless_default_actions. See Stateless Custom Action below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statelessCustomAction")]
    pub stateless_custom_action: Option<Vec<FirewallPolicyInitProviderFirewallPolicyStatelessCustomAction>>,
    /// Set of actions to take on a packet if it does not match any of the stateless rules in the policy. You must specify one of the standard actions including: aws:drop, aws:pass, or aws:forward_to_sfe.
    /// In addition, you can specify custom actions that are compatible with your standard action choice. If you want non-matching packets to be forwarded for stateful inspection, specify aws:forward_to_sfe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statelessDefaultActions")]
    pub stateless_default_actions: Option<Vec<String>>,
    /// Set of actions to take on a fragmented packet if it does not match any of the stateless rules in the policy. You must specify one of the standard actions including: aws:drop, aws:pass, or aws:forward_to_sfe.
    /// In addition, you can specify custom actions that are compatible with your standard action choice. If you want non-matching packets to be forwarded for stateful inspection, specify aws:forward_to_sfe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statelessFragmentDefaultActions")]
    pub stateless_fragment_default_actions: Option<Vec<String>>,
    /// Set of configuration blocks containing references to the stateless rule groups that are used in the policy. See Stateless Rule Group Reference below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statelessRuleGroupReference")]
    pub stateless_rule_group_reference: Option<Vec<FirewallPolicyInitProviderFirewallPolicyStatelessRuleGroupReference>>,
    /// The (ARN) of the TLS Inspection policy to attach to the FW Policy.  This must be added at creation of the resource per AWS documentation. "You can only add a TLS inspection configuration to a new policy, not to an existing policy."  This cannot be removed from a FW Policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsInspectionConfigurationArn")]
    pub tls_inspection_configuration_arn: Option<String>,
}

/// . Contains variables that you can use to override default Suricata settings in your firewall policy. See Rule Variables for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyPolicyVariables {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleVariables")]
    pub rule_variables: Option<Vec<FirewallPolicyInitProviderFirewallPolicyPolicyVariablesRuleVariables>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyPolicyVariablesRuleVariables {
    /// A configuration block that defines a set of IP addresses. See IP Set below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipSet")]
    pub ip_set: Option<FirewallPolicyInitProviderFirewallPolicyPolicyVariablesRuleVariablesIpSet>,
    /// An alphanumeric string to identify the ip_set. Valid values: HOME_NET
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

/// A configuration block that defines a set of IP addresses. See IP Set below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyPolicyVariablesRuleVariablesIpSet {
    /// Set of IPv4 or IPv6 addresses in CIDR notation to use for the Suricata HOME_NET variable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definition: Option<Vec<String>>,
}

/// A configuration block that defines options on how the policy handles stateful rules. See Stateful Engine Options below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyStatefulEngineOptions {
    /// Amount of time that can pass without any traffic sent through the firewall before the firewall determines that the connection is idle.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flowTimeouts")]
    pub flow_timeouts: Option<FirewallPolicyInitProviderFirewallPolicyStatefulEngineOptionsFlowTimeouts>,
    /// Indicates how to manage the order of stateful rule evaluation for the policy. Default value: DEFAULT_ACTION_ORDER. Valid values: DEFAULT_ACTION_ORDER, STRICT_ORDER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleOrder")]
    pub rule_order: Option<String>,
    /// Describes how to treat traffic which has broken midstream. Default value: DROP. Valid values: DROP, CONTINUE, REJECT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamExceptionPolicy")]
    pub stream_exception_policy: Option<String>,
}

/// Amount of time that can pass without any traffic sent through the firewall before the firewall determines that the connection is idle.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyStatefulEngineOptionsFlowTimeouts {
    /// Number of seconds that can pass without any TCP traffic sent through the firewall before the firewall determines that the connection is idle. After the idle timeout passes, data packets are dropped, however, the next TCP SYN packet is considered a new flow and is processed by the firewall. Clients or targets can use TCP keepalive packets to reset the idle timeout. Default value: 350.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpIdleTimeoutSeconds")]
    pub tcp_idle_timeout_seconds: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReference {
    /// Configuration block for override values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    pub r#override: Option<FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReferenceOverride>,
    /// An integer setting that indicates the order in which to run the stateless rule groups in a single policy. AWS Network Firewall applies each stateless rule group to a packet starting with the group that has the lowest priority setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// The Amazon Resource Name (ARN) of the stateless rule group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArn")]
    pub resource_arn: Option<String>,
    /// Reference to a RuleGroup in networkfirewall to populate resourceArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArnRef")]
    pub resource_arn_ref: Option<FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnRef>,
    /// Selector for a RuleGroup in networkfirewall to populate resourceArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArnSelector")]
    pub resource_arn_selector: Option<FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnSelector>,
}

/// Configuration block for override values
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReferenceOverride {
    /// The action that changes the rule group from DROP to ALERT . This only applies to managed rule groups.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
}

/// Reference to a RuleGroup in networkfirewall to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a RuleGroup in networkfirewall to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyInitProviderFirewallPolicyStatefulRuleGroupReferenceResourceArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyStatelessCustomAction {
    /// A configuration block describing the custom action associated with the action_name. See Action Definition below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionDefinition")]
    pub action_definition: Option<FirewallPolicyInitProviderFirewallPolicyStatelessCustomActionActionDefinition>,
    /// A friendly name of the custom action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionName")]
    pub action_name: Option<String>,
}

/// A configuration block describing the custom action associated with the action_name. See Action Definition below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyStatelessCustomActionActionDefinition {
    /// A configuration block describing the stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. You can pair this custom action with any of the standard stateless rule actions. See Publish Metric Action below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishMetricAction")]
    pub publish_metric_action: Option<FirewallPolicyInitProviderFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricAction>,
}

/// A configuration block describing the stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. You can pair this custom action with any of the standard stateless rule actions. See Publish Metric Action below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricAction {
    /// Set of configuration blocks describing dimension settings to use for Amazon CloudWatch custom metrics. See Dimension below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dimension: Option<Vec<FirewallPolicyInitProviderFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricActionDimension>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricActionDimension {
    /// The string value to use in the custom metric dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyStatelessRuleGroupReference {
    /// An integer setting that indicates the order in which to run the stateless rule groups in a single policy. AWS Network Firewall applies each stateless rule group to a packet starting with the group that has the lowest priority setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// The Amazon Resource Name (ARN) of the stateless rule group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArn")]
    pub resource_arn: Option<String>,
    /// Reference to a RuleGroup in networkfirewall to populate resourceArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArnRef")]
    pub resource_arn_ref: Option<FirewallPolicyInitProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnRef>,
    /// Selector for a RuleGroup in networkfirewall to populate resourceArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArnSelector")]
    pub resource_arn_selector: Option<FirewallPolicyInitProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnSelector>,
}

/// Reference to a RuleGroup in networkfirewall to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FirewallPolicyInitProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FirewallPolicyInitProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FirewallPolicyInitProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyInitProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyInitProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a RuleGroup in networkfirewall to populate resourceArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FirewallPolicyInitProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyInitProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FirewallPolicyInitProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FirewallPolicyInitProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyInitProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyInitProviderFirewallPolicyStatelessRuleGroupReferenceResourceArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FirewallPolicyProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FirewallPolicyProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FirewallPolicyProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<FirewallPolicyPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<FirewallPolicyPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FirewallPolicyPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FirewallPolicyPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FirewallPolicyPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FirewallPolicyPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// FirewallPolicyStatus defines the observed state of FirewallPolicy.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<FirewallPolicyStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyStatusAtProvider {
    /// The Amazon Resource Name (ARN) that identifies the firewall policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// A friendly description of the firewall policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// KMS encryption configuration settings. See Encryption Configuration below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionConfiguration")]
    pub encryption_configuration: Option<FirewallPolicyStatusAtProviderEncryptionConfiguration>,
    /// A configuration block describing the rule groups and policy actions to use in the firewall policy. See Firewall Policy below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "firewallPolicy")]
    pub firewall_policy: Option<FirewallPolicyStatusAtProviderFirewallPolicy>,
    /// The Amazon Resource Name (ARN) that identifies the firewall policy.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// A string token used when updating a firewall policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateToken")]
    pub update_token: Option<String>,
}

/// KMS encryption configuration settings. See Encryption Configuration below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyStatusAtProviderEncryptionConfiguration {
    /// The ID of the customer managed key. You can use any of the key identifiers that KMS supports, unless you're using a key that's managed by another account. If you're using a key managed by another account, then specify the key ARN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyId")]
    pub key_id: Option<String>,
    /// The type of AWS KMS key to use for encryption of your Network Firewall resources. Valid values are CUSTOMER_KMS and AWS_OWNED_KMS_KEY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// A configuration block describing the rule groups and policy actions to use in the firewall policy. See Firewall Policy below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyStatusAtProviderFirewallPolicy {
    /// . Contains variables that you can use to override default Suricata settings in your firewall policy. See Rule Variables for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyVariables")]
    pub policy_variables: Option<FirewallPolicyStatusAtProviderFirewallPolicyPolicyVariables>,
    /// Set of actions to take on a packet if it does not match any stateful rules in the policy. This can only be specified if the policy has a stateful_engine_options block with a rule_order value of STRICT_ORDER. You can specify one of either or neither values of aws:drop_strict or aws:drop_established, as well as any combination of aws:alert_strict and aws:alert_established.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulDefaultActions")]
    pub stateful_default_actions: Option<Vec<String>>,
    /// A configuration block that defines options on how the policy handles stateful rules. See Stateful Engine Options below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulEngineOptions")]
    pub stateful_engine_options: Option<FirewallPolicyStatusAtProviderFirewallPolicyStatefulEngineOptions>,
    /// Set of configuration blocks containing references to the stateful rule groups that are used in the policy. See Stateful Rule Group Reference below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statefulRuleGroupReference")]
    pub stateful_rule_group_reference: Option<Vec<FirewallPolicyStatusAtProviderFirewallPolicyStatefulRuleGroupReference>>,
    /// Set of configuration blocks describing the custom action definitions that are available for use in the firewall policy's stateless_default_actions. See Stateless Custom Action below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statelessCustomAction")]
    pub stateless_custom_action: Option<Vec<FirewallPolicyStatusAtProviderFirewallPolicyStatelessCustomAction>>,
    /// Set of actions to take on a packet if it does not match any of the stateless rules in the policy. You must specify one of the standard actions including: aws:drop, aws:pass, or aws:forward_to_sfe.
    /// In addition, you can specify custom actions that are compatible with your standard action choice. If you want non-matching packets to be forwarded for stateful inspection, specify aws:forward_to_sfe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statelessDefaultActions")]
    pub stateless_default_actions: Option<Vec<String>>,
    /// Set of actions to take on a fragmented packet if it does not match any of the stateless rules in the policy. You must specify one of the standard actions including: aws:drop, aws:pass, or aws:forward_to_sfe.
    /// In addition, you can specify custom actions that are compatible with your standard action choice. If you want non-matching packets to be forwarded for stateful inspection, specify aws:forward_to_sfe.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statelessFragmentDefaultActions")]
    pub stateless_fragment_default_actions: Option<Vec<String>>,
    /// Set of configuration blocks containing references to the stateless rule groups that are used in the policy. See Stateless Rule Group Reference below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statelessRuleGroupReference")]
    pub stateless_rule_group_reference: Option<Vec<FirewallPolicyStatusAtProviderFirewallPolicyStatelessRuleGroupReference>>,
    /// The (ARN) of the TLS Inspection policy to attach to the FW Policy.  This must be added at creation of the resource per AWS documentation. "You can only add a TLS inspection configuration to a new policy, not to an existing policy."  This cannot be removed from a FW Policy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tlsInspectionConfigurationArn")]
    pub tls_inspection_configuration_arn: Option<String>,
}

/// . Contains variables that you can use to override default Suricata settings in your firewall policy. See Rule Variables for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyStatusAtProviderFirewallPolicyPolicyVariables {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleVariables")]
    pub rule_variables: Option<Vec<FirewallPolicyStatusAtProviderFirewallPolicyPolicyVariablesRuleVariables>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyStatusAtProviderFirewallPolicyPolicyVariablesRuleVariables {
    /// A configuration block that defines a set of IP addresses. See IP Set below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ipSet")]
    pub ip_set: Option<FirewallPolicyStatusAtProviderFirewallPolicyPolicyVariablesRuleVariablesIpSet>,
    /// An alphanumeric string to identify the ip_set. Valid values: HOME_NET
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

/// A configuration block that defines a set of IP addresses. See IP Set below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyStatusAtProviderFirewallPolicyPolicyVariablesRuleVariablesIpSet {
    /// Set of IPv4 or IPv6 addresses in CIDR notation to use for the Suricata HOME_NET variable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definition: Option<Vec<String>>,
}

/// A configuration block that defines options on how the policy handles stateful rules. See Stateful Engine Options below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyStatusAtProviderFirewallPolicyStatefulEngineOptions {
    /// Amount of time that can pass without any traffic sent through the firewall before the firewall determines that the connection is idle.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "flowTimeouts")]
    pub flow_timeouts: Option<FirewallPolicyStatusAtProviderFirewallPolicyStatefulEngineOptionsFlowTimeouts>,
    /// Indicates how to manage the order of stateful rule evaluation for the policy. Default value: DEFAULT_ACTION_ORDER. Valid values: DEFAULT_ACTION_ORDER, STRICT_ORDER.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleOrder")]
    pub rule_order: Option<String>,
    /// Describes how to treat traffic which has broken midstream. Default value: DROP. Valid values: DROP, CONTINUE, REJECT.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamExceptionPolicy")]
    pub stream_exception_policy: Option<String>,
}

/// Amount of time that can pass without any traffic sent through the firewall before the firewall determines that the connection is idle.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyStatusAtProviderFirewallPolicyStatefulEngineOptionsFlowTimeouts {
    /// Number of seconds that can pass without any TCP traffic sent through the firewall before the firewall determines that the connection is idle. After the idle timeout passes, data packets are dropped, however, the next TCP SYN packet is considered a new flow and is processed by the firewall. Clients or targets can use TCP keepalive packets to reset the idle timeout. Default value: 350.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpIdleTimeoutSeconds")]
    pub tcp_idle_timeout_seconds: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyStatusAtProviderFirewallPolicyStatefulRuleGroupReference {
    /// Configuration block for override values
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "override")]
    pub r#override: Option<FirewallPolicyStatusAtProviderFirewallPolicyStatefulRuleGroupReferenceOverride>,
    /// An integer setting that indicates the order in which to run the stateless rule groups in a single policy. AWS Network Firewall applies each stateless rule group to a packet starting with the group that has the lowest priority setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// The Amazon Resource Name (ARN) of the stateless rule group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArn")]
    pub resource_arn: Option<String>,
}

/// Configuration block for override values
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyStatusAtProviderFirewallPolicyStatefulRuleGroupReferenceOverride {
    /// The action that changes the rule group from DROP to ALERT . This only applies to managed rule groups.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub action: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyStatusAtProviderFirewallPolicyStatelessCustomAction {
    /// A configuration block describing the custom action associated with the action_name. See Action Definition below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionDefinition")]
    pub action_definition: Option<FirewallPolicyStatusAtProviderFirewallPolicyStatelessCustomActionActionDefinition>,
    /// A friendly name of the custom action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionName")]
    pub action_name: Option<String>,
}

/// A configuration block describing the custom action associated with the action_name. See Action Definition below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyStatusAtProviderFirewallPolicyStatelessCustomActionActionDefinition {
    /// A configuration block describing the stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. You can pair this custom action with any of the standard stateless rule actions. See Publish Metric Action below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishMetricAction")]
    pub publish_metric_action: Option<FirewallPolicyStatusAtProviderFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricAction>,
}

/// A configuration block describing the stateless inspection criteria that publishes the specified metrics to Amazon CloudWatch for the matching packet. You can pair this custom action with any of the standard stateless rule actions. See Publish Metric Action below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyStatusAtProviderFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricAction {
    /// Set of configuration blocks describing dimension settings to use for Amazon CloudWatch custom metrics. See Dimension below for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dimension: Option<Vec<FirewallPolicyStatusAtProviderFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricActionDimension>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyStatusAtProviderFirewallPolicyStatelessCustomActionActionDefinitionPublishMetricActionDimension {
    /// The string value to use in the custom metric dimension.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FirewallPolicyStatusAtProviderFirewallPolicyStatelessRuleGroupReference {
    /// An integer setting that indicates the order in which to run the stateless rule groups in a single policy. AWS Network Firewall applies each stateless rule group to a packet starting with the group that has the lowest priority setting.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub priority: Option<f64>,
    /// The Amazon Resource Name (ARN) of the stateless rule group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceArn")]
    pub resource_arn: Option<String>,
}


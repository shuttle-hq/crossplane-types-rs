// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// BudgetActionSpec defines the desired state of BudgetAction
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "budgets.aws.upbound.io", version = "v1beta2", kind = "BudgetAction", plural = "budgetactions")]
#[kube(status = "BudgetActionStatus")]
pub struct BudgetActionSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<BudgetActionDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: BudgetActionForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<BudgetActionInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<BudgetActionProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<BudgetActionPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<BudgetActionWriteConnectionSecretToRef>,
}

/// BudgetActionSpec defines the desired state of BudgetAction
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProvider {
    /// The ID of the target account for budget. Will use current user's account_id by default if omitted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    pub account_id: Option<String>,
    /// The trigger threshold of the action. See Action Threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionThreshold")]
    pub action_threshold: Option<BudgetActionForProviderActionThreshold>,
    /// The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. Valid values are APPLY_IAM_POLICY, APPLY_SCP_POLICY, and RUN_SSM_DOCUMENTS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionType")]
    pub action_type: Option<String>,
    /// This specifies if the action needs manual or automatic approval. Valid values are AUTOMATIC and MANUAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "approvalModel")]
    pub approval_model: Option<String>,
    /// The name of a budget.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "budgetName")]
    pub budget_name: Option<String>,
    /// Reference to a Budget in budgets to populate budgetName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "budgetNameRef")]
    pub budget_name_ref: Option<BudgetActionForProviderBudgetNameRef>,
    /// Selector for a Budget in budgets to populate budgetName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "budgetNameSelector")]
    pub budget_name_selector: Option<BudgetActionForProviderBudgetNameSelector>,
    /// Specifies all of the type-specific parameters. See Definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definition: Option<BudgetActionForProviderDefinition>,
    /// The role passed for action execution and reversion. Roles and actions must be in the same account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArn")]
    pub execution_role_arn: Option<String>,
    /// Reference to a Role in iam to populate executionRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArnRef")]
    pub execution_role_arn_ref: Option<BudgetActionForProviderExecutionRoleArnRef>,
    /// Selector for a Role in iam to populate executionRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArnSelector")]
    pub execution_role_arn_selector: Option<BudgetActionForProviderExecutionRoleArnSelector>,
    /// The type of a notification. Valid values are ACTUAL or FORECASTED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationType")]
    pub notification_type: Option<String>,
    /// The Region to run the SSM document.
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// A list of subscribers. See Subscriber.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscriber: Option<Vec<BudgetActionForProviderSubscriber>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// The trigger threshold of the action. See Action Threshold.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderActionThreshold {
    /// The type of threshold for a notification. Valid values are PERCENTAGE or ABSOLUTE_VALUE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionThresholdType")]
    pub action_threshold_type: Option<String>,
    /// The threshold of a notification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionThresholdValue")]
    pub action_threshold_value: Option<f64>,
}

/// Reference to a Budget in budgets to populate budgetName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderBudgetNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetActionForProviderBudgetNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderBudgetNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetActionForProviderBudgetNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetActionForProviderBudgetNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionForProviderBudgetNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionForProviderBudgetNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Budget in budgets to populate budgetName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderBudgetNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetActionForProviderBudgetNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderBudgetNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetActionForProviderBudgetNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetActionForProviderBudgetNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionForProviderBudgetNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionForProviderBudgetNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Specifies all of the type-specific parameters. See Definition.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderDefinition {
    /// The AWS Identity and Access Management (IAM) action definition details. See IAM Action Definition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamActionDefinition")]
    pub iam_action_definition: Option<BudgetActionForProviderDefinitionIamActionDefinition>,
    /// The service control policies (SCPs) action definition details. See SCP Action Definition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scpActionDefinition")]
    pub scp_action_definition: Option<BudgetActionForProviderDefinitionScpActionDefinition>,
    /// The AWS Systems Manager (SSM) action definition details. See SSM Action Definition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ssmActionDefinition")]
    pub ssm_action_definition: Option<BudgetActionForProviderDefinitionSsmActionDefinition>,
}

/// The AWS Identity and Access Management (IAM) action definition details. See IAM Action Definition.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderDefinitionIamActionDefinition {
    /// A list of groups to be attached. There must be at least one group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<String>>,
    /// The Amazon Resource Name (ARN) of the policy to be attached.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyArn")]
    pub policy_arn: Option<String>,
    /// Reference to a Policy in iam to populate policyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyArnRef")]
    pub policy_arn_ref: Option<BudgetActionForProviderDefinitionIamActionDefinitionPolicyArnRef>,
    /// Selector for a Policy in iam to populate policyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyArnSelector")]
    pub policy_arn_selector: Option<BudgetActionForProviderDefinitionIamActionDefinitionPolicyArnSelector>,
    /// A list of roles to be attached. There must be at least one role.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    /// References to Role in iam to populate roles.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rolesRefs")]
    pub roles_refs: Option<Vec<BudgetActionForProviderDefinitionIamActionDefinitionRolesRefs>>,
    /// Selector for a list of Role in iam to populate roles.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rolesSelector")]
    pub roles_selector: Option<BudgetActionForProviderDefinitionIamActionDefinitionRolesSelector>,
    /// A list of users to be attached. There must be at least one user.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<String>>,
}

/// Reference to a Policy in iam to populate policyArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderDefinitionIamActionDefinitionPolicyArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetActionForProviderDefinitionIamActionDefinitionPolicyArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderDefinitionIamActionDefinitionPolicyArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetActionForProviderDefinitionIamActionDefinitionPolicyArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetActionForProviderDefinitionIamActionDefinitionPolicyArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionForProviderDefinitionIamActionDefinitionPolicyArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionForProviderDefinitionIamActionDefinitionPolicyArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Policy in iam to populate policyArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderDefinitionIamActionDefinitionPolicyArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetActionForProviderDefinitionIamActionDefinitionPolicyArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderDefinitionIamActionDefinitionPolicyArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetActionForProviderDefinitionIamActionDefinitionPolicyArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetActionForProviderDefinitionIamActionDefinitionPolicyArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionForProviderDefinitionIamActionDefinitionPolicyArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionForProviderDefinitionIamActionDefinitionPolicyArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderDefinitionIamActionDefinitionRolesRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetActionForProviderDefinitionIamActionDefinitionRolesRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderDefinitionIamActionDefinitionRolesRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetActionForProviderDefinitionIamActionDefinitionRolesRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetActionForProviderDefinitionIamActionDefinitionRolesRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionForProviderDefinitionIamActionDefinitionRolesRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionForProviderDefinitionIamActionDefinitionRolesRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Role in iam to populate roles.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderDefinitionIamActionDefinitionRolesSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetActionForProviderDefinitionIamActionDefinitionRolesSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderDefinitionIamActionDefinitionRolesSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetActionForProviderDefinitionIamActionDefinitionRolesSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetActionForProviderDefinitionIamActionDefinitionRolesSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionForProviderDefinitionIamActionDefinitionRolesSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionForProviderDefinitionIamActionDefinitionRolesSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The service control policies (SCPs) action definition details. See SCP Action Definition.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderDefinitionScpActionDefinition {
    /// The policy ID attached.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyId")]
    pub policy_id: Option<String>,
    /// A list of target IDs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetIds")]
    pub target_ids: Option<Vec<String>>,
}

/// The AWS Systems Manager (SSM) action definition details. See SSM Action Definition.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderDefinitionSsmActionDefinition {
    /// The action subType. Valid values are STOP_EC2_INSTANCES or STOP_RDS_INSTANCES.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionSubType")]
    pub action_sub_type: Option<String>,
    /// The EC2 and RDS instance IDs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceIds")]
    pub instance_ids: Option<Vec<String>>,
    /// The Region to run the SSM document.
    pub region: String,
}

/// Reference to a Role in iam to populate executionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderExecutionRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetActionForProviderExecutionRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderExecutionRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetActionForProviderExecutionRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetActionForProviderExecutionRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionForProviderExecutionRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionForProviderExecutionRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate executionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderExecutionRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetActionForProviderExecutionRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderExecutionRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetActionForProviderExecutionRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetActionForProviderExecutionRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionForProviderExecutionRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionForProviderExecutionRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionForProviderSubscriber {
    /// The address that AWS sends budget notifications to, either an SNS topic or an email.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// The type of notification that AWS sends to a subscriber. Valid values are SNS or EMAIL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subscriptionType")]
    pub subscription_type: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProvider {
    /// The ID of the target account for budget. Will use current user's account_id by default if omitted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    pub account_id: Option<String>,
    /// The trigger threshold of the action. See Action Threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionThreshold")]
    pub action_threshold: Option<BudgetActionInitProviderActionThreshold>,
    /// The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. Valid values are APPLY_IAM_POLICY, APPLY_SCP_POLICY, and RUN_SSM_DOCUMENTS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionType")]
    pub action_type: Option<String>,
    /// This specifies if the action needs manual or automatic approval. Valid values are AUTOMATIC and MANUAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "approvalModel")]
    pub approval_model: Option<String>,
    /// The name of a budget.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "budgetName")]
    pub budget_name: Option<String>,
    /// Reference to a Budget in budgets to populate budgetName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "budgetNameRef")]
    pub budget_name_ref: Option<BudgetActionInitProviderBudgetNameRef>,
    /// Selector for a Budget in budgets to populate budgetName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "budgetNameSelector")]
    pub budget_name_selector: Option<BudgetActionInitProviderBudgetNameSelector>,
    /// Specifies all of the type-specific parameters. See Definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definition: Option<BudgetActionInitProviderDefinition>,
    /// The role passed for action execution and reversion. Roles and actions must be in the same account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArn")]
    pub execution_role_arn: Option<String>,
    /// Reference to a Role in iam to populate executionRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArnRef")]
    pub execution_role_arn_ref: Option<BudgetActionInitProviderExecutionRoleArnRef>,
    /// Selector for a Role in iam to populate executionRoleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArnSelector")]
    pub execution_role_arn_selector: Option<BudgetActionInitProviderExecutionRoleArnSelector>,
    /// The type of a notification. Valid values are ACTUAL or FORECASTED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationType")]
    pub notification_type: Option<String>,
    /// A list of subscribers. See Subscriber.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscriber: Option<Vec<BudgetActionInitProviderSubscriber>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

/// The trigger threshold of the action. See Action Threshold.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderActionThreshold {
    /// The type of threshold for a notification. Valid values are PERCENTAGE or ABSOLUTE_VALUE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionThresholdType")]
    pub action_threshold_type: Option<String>,
    /// The threshold of a notification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionThresholdValue")]
    pub action_threshold_value: Option<f64>,
}

/// Reference to a Budget in budgets to populate budgetName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderBudgetNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetActionInitProviderBudgetNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderBudgetNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetActionInitProviderBudgetNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetActionInitProviderBudgetNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionInitProviderBudgetNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionInitProviderBudgetNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Budget in budgets to populate budgetName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderBudgetNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetActionInitProviderBudgetNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderBudgetNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetActionInitProviderBudgetNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetActionInitProviderBudgetNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionInitProviderBudgetNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionInitProviderBudgetNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Specifies all of the type-specific parameters. See Definition.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderDefinition {
    /// The AWS Identity and Access Management (IAM) action definition details. See IAM Action Definition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamActionDefinition")]
    pub iam_action_definition: Option<BudgetActionInitProviderDefinitionIamActionDefinition>,
    /// The service control policies (SCPs) action definition details. See SCP Action Definition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scpActionDefinition")]
    pub scp_action_definition: Option<BudgetActionInitProviderDefinitionScpActionDefinition>,
    /// The AWS Systems Manager (SSM) action definition details. See SSM Action Definition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ssmActionDefinition")]
    pub ssm_action_definition: Option<BudgetActionInitProviderDefinitionSsmActionDefinition>,
}

/// The AWS Identity and Access Management (IAM) action definition details. See IAM Action Definition.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderDefinitionIamActionDefinition {
    /// A list of groups to be attached. There must be at least one group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<String>>,
    /// The Amazon Resource Name (ARN) of the policy to be attached.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyArn")]
    pub policy_arn: Option<String>,
    /// Reference to a Policy in iam to populate policyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyArnRef")]
    pub policy_arn_ref: Option<BudgetActionInitProviderDefinitionIamActionDefinitionPolicyArnRef>,
    /// Selector for a Policy in iam to populate policyArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyArnSelector")]
    pub policy_arn_selector: Option<BudgetActionInitProviderDefinitionIamActionDefinitionPolicyArnSelector>,
    /// A list of roles to be attached. There must be at least one role.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    /// References to Role in iam to populate roles.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rolesRefs")]
    pub roles_refs: Option<Vec<BudgetActionInitProviderDefinitionIamActionDefinitionRolesRefs>>,
    /// Selector for a list of Role in iam to populate roles.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rolesSelector")]
    pub roles_selector: Option<BudgetActionInitProviderDefinitionIamActionDefinitionRolesSelector>,
    /// A list of users to be attached. There must be at least one user.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<String>>,
}

/// Reference to a Policy in iam to populate policyArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderDefinitionIamActionDefinitionPolicyArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetActionInitProviderDefinitionIamActionDefinitionPolicyArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderDefinitionIamActionDefinitionPolicyArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetActionInitProviderDefinitionIamActionDefinitionPolicyArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetActionInitProviderDefinitionIamActionDefinitionPolicyArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionInitProviderDefinitionIamActionDefinitionPolicyArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionInitProviderDefinitionIamActionDefinitionPolicyArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Policy in iam to populate policyArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderDefinitionIamActionDefinitionPolicyArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetActionInitProviderDefinitionIamActionDefinitionPolicyArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderDefinitionIamActionDefinitionPolicyArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetActionInitProviderDefinitionIamActionDefinitionPolicyArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetActionInitProviderDefinitionIamActionDefinitionPolicyArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionInitProviderDefinitionIamActionDefinitionPolicyArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionInitProviderDefinitionIamActionDefinitionPolicyArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderDefinitionIamActionDefinitionRolesRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetActionInitProviderDefinitionIamActionDefinitionRolesRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderDefinitionIamActionDefinitionRolesRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetActionInitProviderDefinitionIamActionDefinitionRolesRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetActionInitProviderDefinitionIamActionDefinitionRolesRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionInitProviderDefinitionIamActionDefinitionRolesRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionInitProviderDefinitionIamActionDefinitionRolesRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Role in iam to populate roles.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderDefinitionIamActionDefinitionRolesSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetActionInitProviderDefinitionIamActionDefinitionRolesSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderDefinitionIamActionDefinitionRolesSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetActionInitProviderDefinitionIamActionDefinitionRolesSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetActionInitProviderDefinitionIamActionDefinitionRolesSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionInitProviderDefinitionIamActionDefinitionRolesSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionInitProviderDefinitionIamActionDefinitionRolesSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The service control policies (SCPs) action definition details. See SCP Action Definition.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderDefinitionScpActionDefinition {
    /// The policy ID attached.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyId")]
    pub policy_id: Option<String>,
    /// A list of target IDs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetIds")]
    pub target_ids: Option<Vec<String>>,
}

/// The AWS Systems Manager (SSM) action definition details. See SSM Action Definition.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderDefinitionSsmActionDefinition {
    /// The action subType. Valid values are STOP_EC2_INSTANCES or STOP_RDS_INSTANCES.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionSubType")]
    pub action_sub_type: Option<String>,
    /// The EC2 and RDS instance IDs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceIds")]
    pub instance_ids: Option<Vec<String>>,
}

/// Reference to a Role in iam to populate executionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderExecutionRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetActionInitProviderExecutionRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderExecutionRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetActionInitProviderExecutionRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetActionInitProviderExecutionRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionInitProviderExecutionRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionInitProviderExecutionRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate executionRoleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderExecutionRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetActionInitProviderExecutionRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderExecutionRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetActionInitProviderExecutionRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetActionInitProviderExecutionRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionInitProviderExecutionRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionInitProviderExecutionRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionInitProviderSubscriber {
    /// The address that AWS sends budget notifications to, either an SNS topic or an email.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// The type of notification that AWS sends to a subscriber. Valid values are SNS or EMAIL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subscriptionType")]
    pub subscription_type: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetActionProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetActionProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetActionProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<BudgetActionPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BudgetActionPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetActionPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetActionPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetActionPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetActionPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// BudgetActionStatus defines the observed state of BudgetAction.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<BudgetActionStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionStatusAtProvider {
    /// The ID of the target account for budget. Will use current user's account_id by default if omitted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    pub account_id: Option<String>,
    /// The id of the budget action.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionId")]
    pub action_id: Option<String>,
    /// The trigger threshold of the action. See Action Threshold.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionThreshold")]
    pub action_threshold: Option<BudgetActionStatusAtProviderActionThreshold>,
    /// The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. Valid values are APPLY_IAM_POLICY, APPLY_SCP_POLICY, and RUN_SSM_DOCUMENTS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionType")]
    pub action_type: Option<String>,
    /// This specifies if the action needs manual or automatic approval. Valid values are AUTOMATIC and MANUAL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "approvalModel")]
    pub approval_model: Option<String>,
    /// The ARN of the budget action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// The name of a budget.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "budgetName")]
    pub budget_name: Option<String>,
    /// Specifies all of the type-specific parameters. See Definition.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub definition: Option<BudgetActionStatusAtProviderDefinition>,
    /// The role passed for action execution and reversion. Roles and actions must be in the same account.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "executionRoleArn")]
    pub execution_role_arn: Option<String>,
    /// ID of resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The type of a notification. Valid values are ACTUAL or FORECASTED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationType")]
    pub notification_type: Option<String>,
    /// The status of the budget action.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// A list of subscribers. See Subscriber.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subscriber: Option<Vec<BudgetActionStatusAtProviderSubscriber>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
}

/// The trigger threshold of the action. See Action Threshold.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionStatusAtProviderActionThreshold {
    /// The type of threshold for a notification. Valid values are PERCENTAGE or ABSOLUTE_VALUE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionThresholdType")]
    pub action_threshold_type: Option<String>,
    /// The threshold of a notification.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionThresholdValue")]
    pub action_threshold_value: Option<f64>,
}

/// Specifies all of the type-specific parameters. See Definition.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionStatusAtProviderDefinition {
    /// The AWS Identity and Access Management (IAM) action definition details. See IAM Action Definition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "iamActionDefinition")]
    pub iam_action_definition: Option<BudgetActionStatusAtProviderDefinitionIamActionDefinition>,
    /// The service control policies (SCPs) action definition details. See SCP Action Definition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "scpActionDefinition")]
    pub scp_action_definition: Option<BudgetActionStatusAtProviderDefinitionScpActionDefinition>,
    /// The AWS Systems Manager (SSM) action definition details. See SSM Action Definition.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ssmActionDefinition")]
    pub ssm_action_definition: Option<BudgetActionStatusAtProviderDefinitionSsmActionDefinition>,
}

/// The AWS Identity and Access Management (IAM) action definition details. See IAM Action Definition.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionStatusAtProviderDefinitionIamActionDefinition {
    /// A list of groups to be attached. There must be at least one group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<String>>,
    /// The Amazon Resource Name (ARN) of the policy to be attached.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyArn")]
    pub policy_arn: Option<String>,
    /// A list of roles to be attached. There must be at least one role.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<String>>,
    /// A list of users to be attached. There must be at least one user.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<String>>,
}

/// The service control policies (SCPs) action definition details. See SCP Action Definition.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionStatusAtProviderDefinitionScpActionDefinition {
    /// The policy ID attached.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyId")]
    pub policy_id: Option<String>,
    /// A list of target IDs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetIds")]
    pub target_ids: Option<Vec<String>>,
}

/// The AWS Systems Manager (SSM) action definition details. See SSM Action Definition.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionStatusAtProviderDefinitionSsmActionDefinition {
    /// The action subType. Valid values are STOP_EC2_INSTANCES or STOP_RDS_INSTANCES.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "actionSubType")]
    pub action_sub_type: Option<String>,
    /// The EC2 and RDS instance IDs.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceIds")]
    pub instance_ids: Option<Vec<String>>,
    /// The Region to run the SSM document.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetActionStatusAtProviderSubscriber {
    /// The address that AWS sends budget notifications to, either an SNS topic or an email.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// The type of notification that AWS sends to a subscriber. Valid values are SNS or EMAIL.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subscriptionType")]
    pub subscription_type: Option<String>,
}


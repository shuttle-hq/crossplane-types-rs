// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// BudgetSpec defines the desired state of Budget
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "budgets.aws.upbound.io", version = "v1beta2", kind = "Budget", plural = "budgets")]
#[kube(status = "BudgetStatus")]
pub struct BudgetSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<BudgetDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: BudgetForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<BudgetInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<BudgetProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<BudgetPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<BudgetWriteConnectionSecretToRef>,
}

/// BudgetSpec defines the desired state of Budget
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetForProvider {
    /// The ID of the target account for budget. Will use current user's account_id by default if omitted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    pub account_id: Option<String>,
    /// Object containing AutoAdjustData which determines the budget amount for an auto-adjusting budget.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAdjustData")]
    pub auto_adjust_data: Option<BudgetForProviderAutoAdjustData>,
    /// Whether this budget tracks monetary cost or usage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "budgetType")]
    pub budget_type: Option<String>,
    /// A list of CostFilter name/values pair to apply to budget.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "costFilter")]
    pub cost_filter: Option<Vec<BudgetForProviderCostFilter>>,
    /// Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "costTypes")]
    pub cost_types: Option<BudgetForProviderCostTypes>,
    /// The amount of cost or usage being measured for a budget.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitAmount")]
    pub limit_amount: Option<String>,
    /// The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See Spend documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitUnit")]
    pub limit_unit: Option<String>,
    /// Object containing Budget Notifications. Can be used multiple times to define more than one budget notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notification: Option<Vec<BudgetForProviderNotification>>,
    /// Object containing Planned Budget Limits. Can be used multiple times to plan more than one budget limit. See PlannedBudgetLimits documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "plannedLimit")]
    pub planned_limit: Option<Vec<BudgetForProviderPlannedLimit>>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The end of the time period covered by the budget. There are no restrictions on the end date. Format: 2017-01-01_12:00.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timePeriodEnd")]
    pub time_period_end: Option<String>,
    /// The start of the time period covered by the budget. If you don't specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: 2017-01-01_12:00.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timePeriodStart")]
    pub time_period_start: Option<String>,
    /// The length of time until a budget resets the actual and forecasted spend. Valid values: MONTHLY, QUARTERLY, ANNUALLY, and DAILY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeUnit")]
    pub time_unit: Option<String>,
}

/// Object containing AutoAdjustData which determines the budget amount for an auto-adjusting budget.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetForProviderAutoAdjustData {
    /// The string that defines whether your budget auto-adjusts based on historical or forecasted data. Valid values: FORECAST,HISTORICAL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAdjustType")]
    pub auto_adjust_type: Option<String>,
    /// Configuration block of Historical Options. Required for auto_adjust_type of HISTORICAL Configuration block that defines the historical data that your auto-adjusting budget is based on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "historicalOptions")]
    pub historical_options: Option<BudgetForProviderAutoAdjustDataHistoricalOptions>,
}

/// Configuration block of Historical Options. Required for auto_adjust_type of HISTORICAL Configuration block that defines the historical data that your auto-adjusting budget is based on.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetForProviderAutoAdjustDataHistoricalOptions {
    /// The number of budget periods included in the moving-average calculation that determines your auto-adjusted budget amount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "budgetAdjustmentPeriod")]
    pub budget_adjustment_period: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetForProviderCostFilter {
    /// The name of a budget. Unique within accounts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetForProviderCostTypes {
    /// A boolean value whether to include credits in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeCredit")]
    pub include_credit: Option<bool>,
    /// Whether a budget includes discounts. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeDiscount")]
    pub include_discount: Option<bool>,
    /// A boolean value whether to include other subscription costs in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeOtherSubscription")]
    pub include_other_subscription: Option<bool>,
    /// A boolean value whether to include recurring costs in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeRecurring")]
    pub include_recurring: Option<bool>,
    /// A boolean value whether to include refunds in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeRefund")]
    pub include_refund: Option<bool>,
    /// A boolean value whether to include subscriptions in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeSubscription")]
    pub include_subscription: Option<bool>,
    /// A boolean value whether to include support costs in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeSupport")]
    pub include_support: Option<bool>,
    /// A boolean value whether to include tax in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeTax")]
    pub include_tax: Option<bool>,
    /// A boolean value whether to include upfront costs in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeUpfront")]
    pub include_upfront: Option<bool>,
    /// Whether a budget uses the amortized rate. Defaults to false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useAmortized")]
    pub use_amortized: Option<bool>,
    /// A boolean value whether to use blended costs in the cost budget. Defaults to false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useBlended")]
    pub use_blended: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetForProviderNotification {
    /// Comparison operator to use to evaluate the condition. Can be LESS_THAN, EQUAL_TO or GREATER_THAN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "comparisonOperator")]
    pub comparison_operator: Option<String>,
    /// What kind of budget value to notify on. Can be ACTUAL or FORECASTED
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationType")]
    pub notification_type: Option<String>,
    /// E-Mail addresses to notify. Either this or subscriber_sns_topic_arns is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subscriberEmailAddresses")]
    pub subscriber_email_addresses: Option<Vec<String>>,
    /// SNS topics to notify. Either this or subscriber_email_addresses is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subscriberSnsTopicArns")]
    pub subscriber_sns_topic_arns: Option<Vec<String>>,
    /// Threshold when the notification should be sent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threshold: Option<f64>,
    /// What kind of threshold is defined. Can be PERCENTAGE OR ABSOLUTE_VALUE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdType")]
    pub threshold_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetForProviderPlannedLimit {
    /// The amount of cost or usage being measured for a budget.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub amount: Option<String>,
    /// The start time of the budget limit. Format: 2017-01-01_12:00. See PlannedBudgetLimits documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
    /// The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See Spend documentation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetInitProvider {
    /// The ID of the target account for budget. Will use current user's account_id by default if omitted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    pub account_id: Option<String>,
    /// Object containing AutoAdjustData which determines the budget amount for an auto-adjusting budget.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAdjustData")]
    pub auto_adjust_data: Option<BudgetInitProviderAutoAdjustData>,
    /// Whether this budget tracks monetary cost or usage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "budgetType")]
    pub budget_type: Option<String>,
    /// A list of CostFilter name/values pair to apply to budget.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "costFilter")]
    pub cost_filter: Option<Vec<BudgetInitProviderCostFilter>>,
    /// Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "costTypes")]
    pub cost_types: Option<BudgetInitProviderCostTypes>,
    /// The amount of cost or usage being measured for a budget.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitAmount")]
    pub limit_amount: Option<String>,
    /// The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See Spend documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitUnit")]
    pub limit_unit: Option<String>,
    /// Object containing Budget Notifications. Can be used multiple times to define more than one budget notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notification: Option<Vec<BudgetInitProviderNotification>>,
    /// Object containing Planned Budget Limits. Can be used multiple times to plan more than one budget limit. See PlannedBudgetLimits documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "plannedLimit")]
    pub planned_limit: Option<Vec<BudgetInitProviderPlannedLimit>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// The end of the time period covered by the budget. There are no restrictions on the end date. Format: 2017-01-01_12:00.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timePeriodEnd")]
    pub time_period_end: Option<String>,
    /// The start of the time period covered by the budget. If you don't specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: 2017-01-01_12:00.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timePeriodStart")]
    pub time_period_start: Option<String>,
    /// The length of time until a budget resets the actual and forecasted spend. Valid values: MONTHLY, QUARTERLY, ANNUALLY, and DAILY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeUnit")]
    pub time_unit: Option<String>,
}

/// Object containing AutoAdjustData which determines the budget amount for an auto-adjusting budget.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetInitProviderAutoAdjustData {
    /// The string that defines whether your budget auto-adjusts based on historical or forecasted data. Valid values: FORECAST,HISTORICAL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAdjustType")]
    pub auto_adjust_type: Option<String>,
    /// Configuration block of Historical Options. Required for auto_adjust_type of HISTORICAL Configuration block that defines the historical data that your auto-adjusting budget is based on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "historicalOptions")]
    pub historical_options: Option<BudgetInitProviderAutoAdjustDataHistoricalOptions>,
}

/// Configuration block of Historical Options. Required for auto_adjust_type of HISTORICAL Configuration block that defines the historical data that your auto-adjusting budget is based on.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetInitProviderAutoAdjustDataHistoricalOptions {
    /// The number of budget periods included in the moving-average calculation that determines your auto-adjusted budget amount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "budgetAdjustmentPeriod")]
    pub budget_adjustment_period: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetInitProviderCostFilter {
    /// The name of a budget. Unique within accounts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetInitProviderCostTypes {
    /// A boolean value whether to include credits in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeCredit")]
    pub include_credit: Option<bool>,
    /// Whether a budget includes discounts. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeDiscount")]
    pub include_discount: Option<bool>,
    /// A boolean value whether to include other subscription costs in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeOtherSubscription")]
    pub include_other_subscription: Option<bool>,
    /// A boolean value whether to include recurring costs in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeRecurring")]
    pub include_recurring: Option<bool>,
    /// A boolean value whether to include refunds in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeRefund")]
    pub include_refund: Option<bool>,
    /// A boolean value whether to include subscriptions in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeSubscription")]
    pub include_subscription: Option<bool>,
    /// A boolean value whether to include support costs in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeSupport")]
    pub include_support: Option<bool>,
    /// A boolean value whether to include tax in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeTax")]
    pub include_tax: Option<bool>,
    /// A boolean value whether to include upfront costs in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeUpfront")]
    pub include_upfront: Option<bool>,
    /// Whether a budget uses the amortized rate. Defaults to false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useAmortized")]
    pub use_amortized: Option<bool>,
    /// A boolean value whether to use blended costs in the cost budget. Defaults to false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useBlended")]
    pub use_blended: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetInitProviderNotification {
    /// Comparison operator to use to evaluate the condition. Can be LESS_THAN, EQUAL_TO or GREATER_THAN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "comparisonOperator")]
    pub comparison_operator: Option<String>,
    /// What kind of budget value to notify on. Can be ACTUAL or FORECASTED
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationType")]
    pub notification_type: Option<String>,
    /// E-Mail addresses to notify. Either this or subscriber_sns_topic_arns is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subscriberEmailAddresses")]
    pub subscriber_email_addresses: Option<Vec<String>>,
    /// SNS topics to notify. Either this or subscriber_email_addresses is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subscriberSnsTopicArns")]
    pub subscriber_sns_topic_arns: Option<Vec<String>>,
    /// Threshold when the notification should be sent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threshold: Option<f64>,
    /// What kind of threshold is defined. Can be PERCENTAGE OR ABSOLUTE_VALUE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdType")]
    pub threshold_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetInitProviderPlannedLimit {
    /// The amount of cost or usage being measured for a budget.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub amount: Option<String>,
    /// The start time of the budget limit. Format: 2017-01-01_12:00. See PlannedBudgetLimits documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
    /// The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See Spend documentation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<BudgetPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<BudgetPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<BudgetPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<BudgetPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<BudgetPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum BudgetPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// BudgetStatus defines the observed state of Budget.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<BudgetStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetStatusAtProvider {
    /// The ID of the target account for budget. Will use current user's account_id by default if omitted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountId")]
    pub account_id: Option<String>,
    /// The ARN of the budget.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Object containing AutoAdjustData which determines the budget amount for an auto-adjusting budget.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAdjustData")]
    pub auto_adjust_data: Option<BudgetStatusAtProviderAutoAdjustData>,
    /// Whether this budget tracks monetary cost or usage.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "budgetType")]
    pub budget_type: Option<String>,
    /// A list of CostFilter name/values pair to apply to budget.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "costFilter")]
    pub cost_filter: Option<Vec<BudgetStatusAtProviderCostFilter>>,
    /// Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "costTypes")]
    pub cost_types: Option<BudgetStatusAtProviderCostTypes>,
    /// id of resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The amount of cost or usage being measured for a budget.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitAmount")]
    pub limit_amount: Option<String>,
    /// The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See Spend documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "limitUnit")]
    pub limit_unit: Option<String>,
    /// Object containing Budget Notifications. Can be used multiple times to define more than one budget notification.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub notification: Option<Vec<BudgetStatusAtProviderNotification>>,
    /// Object containing Planned Budget Limits. Can be used multiple times to plan more than one budget limit. See PlannedBudgetLimits documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "plannedLimit")]
    pub planned_limit: Option<Vec<BudgetStatusAtProviderPlannedLimit>>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// The end of the time period covered by the budget. There are no restrictions on the end date. Format: 2017-01-01_12:00.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timePeriodEnd")]
    pub time_period_end: Option<String>,
    /// The start of the time period covered by the budget. If you don't specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: 2017-01-01_12:00.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timePeriodStart")]
    pub time_period_start: Option<String>,
    /// The length of time until a budget resets the actual and forecasted spend. Valid values: MONTHLY, QUARTERLY, ANNUALLY, and DAILY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timeUnit")]
    pub time_unit: Option<String>,
}

/// Object containing AutoAdjustData which determines the budget amount for an auto-adjusting budget.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetStatusAtProviderAutoAdjustData {
    /// The string that defines whether your budget auto-adjusts based on historical or forecasted data. Valid values: FORECAST,HISTORICAL
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoAdjustType")]
    pub auto_adjust_type: Option<String>,
    /// Configuration block of Historical Options. Required for auto_adjust_type of HISTORICAL Configuration block that defines the historical data that your auto-adjusting budget is based on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "historicalOptions")]
    pub historical_options: Option<BudgetStatusAtProviderAutoAdjustDataHistoricalOptions>,
    /// The last time that your budget was auto-adjusted.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastAutoAdjustTime")]
    pub last_auto_adjust_time: Option<String>,
}

/// Configuration block of Historical Options. Required for auto_adjust_type of HISTORICAL Configuration block that defines the historical data that your auto-adjusting budget is based on.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetStatusAtProviderAutoAdjustDataHistoricalOptions {
    /// The number of budget periods included in the moving-average calculation that determines your auto-adjusted budget amount.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "budgetAdjustmentPeriod")]
    pub budget_adjustment_period: Option<f64>,
    /// The integer that describes how many budget periods in your BudgetAdjustmentPeriod are included in the calculation of your current budget limit. If the first budget period in your BudgetAdjustmentPeriod has no cost data, then that budget period isn’t included in the average that determines your budget limit. You can’t set your own LookBackAvailablePeriods. The value is automatically calculated from the budget_adjustment_period and your historical cost data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lookbackAvailablePeriods")]
    pub lookback_available_periods: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetStatusAtProviderCostFilter {
    /// The name of a budget. Unique within accounts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub values: Option<Vec<String>>,
}

/// Object containing CostTypes The types of cost included in a budget, such as tax and subscriptions.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetStatusAtProviderCostTypes {
    /// A boolean value whether to include credits in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeCredit")]
    pub include_credit: Option<bool>,
    /// Whether a budget includes discounts. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeDiscount")]
    pub include_discount: Option<bool>,
    /// A boolean value whether to include other subscription costs in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeOtherSubscription")]
    pub include_other_subscription: Option<bool>,
    /// A boolean value whether to include recurring costs in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeRecurring")]
    pub include_recurring: Option<bool>,
    /// A boolean value whether to include refunds in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeRefund")]
    pub include_refund: Option<bool>,
    /// A boolean value whether to include subscriptions in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeSubscription")]
    pub include_subscription: Option<bool>,
    /// A boolean value whether to include support costs in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeSupport")]
    pub include_support: Option<bool>,
    /// A boolean value whether to include tax in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeTax")]
    pub include_tax: Option<bool>,
    /// A boolean value whether to include upfront costs in the cost budget. Defaults to true
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeUpfront")]
    pub include_upfront: Option<bool>,
    /// Whether a budget uses the amortized rate. Defaults to false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useAmortized")]
    pub use_amortized: Option<bool>,
    /// A boolean value whether to use blended costs in the cost budget. Defaults to false
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "useBlended")]
    pub use_blended: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetStatusAtProviderNotification {
    /// Comparison operator to use to evaluate the condition. Can be LESS_THAN, EQUAL_TO or GREATER_THAN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "comparisonOperator")]
    pub comparison_operator: Option<String>,
    /// What kind of budget value to notify on. Can be ACTUAL or FORECASTED
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "notificationType")]
    pub notification_type: Option<String>,
    /// E-Mail addresses to notify. Either this or subscriber_sns_topic_arns is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subscriberEmailAddresses")]
    pub subscriber_email_addresses: Option<Vec<String>>,
    /// SNS topics to notify. Either this or subscriber_email_addresses is required.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subscriberSnsTopicArns")]
    pub subscriber_sns_topic_arns: Option<Vec<String>>,
    /// Threshold when the notification should be sent.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub threshold: Option<f64>,
    /// What kind of threshold is defined. Can be PERCENTAGE OR ABSOLUTE_VALUE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdType")]
    pub threshold_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct BudgetStatusAtProviderPlannedLimit {
    /// The amount of cost or usage being measured for a budget.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub amount: Option<String>,
    /// The start time of the budget limit. Format: 2017-01-01_12:00. See PlannedBudgetLimits documentation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "startTime")]
    pub start_time: Option<String>,
    /// The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See Spend documentation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
}


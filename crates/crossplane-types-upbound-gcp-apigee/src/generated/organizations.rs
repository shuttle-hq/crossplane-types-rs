// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// OrganizationSpec defines the desired state of Organization
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "apigee.gcp.upbound.io", version = "v1beta2", kind = "Organization", plural = "organizations")]
#[kube(status = "OrganizationStatus")]
pub struct OrganizationSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<OrganizationDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: OrganizationForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<OrganizationInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<OrganizationProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<OrganizationPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<OrganizationWriteConnectionSecretToRef>,
}

/// OrganizationSpec defines the desired state of Organization
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationForProvider {
    /// Primary GCP region for analytics data storage. For valid values, see Create an Apigee organization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "analyticsRegion")]
    pub analytics_region: Option<String>,
    /// Cloud KMS key name used for encrypting API consumer data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiConsumerDataEncryptionKeyName")]
    pub api_consumer_data_encryption_key_name: Option<String>,
    /// This field is needed only for customers using non-default data residency regions.
    /// Apigee stores some control plane data only in single region.
    /// This field determines which single region Apigee should use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiConsumerDataLocation")]
    pub api_consumer_data_location: Option<String>,
    /// Compute Engine network used for Service Networking to be peered with Apigee runtime instances.
    /// See Getting started with the Service Networking API.
    /// Valid only when RuntimeType is set to CLOUD. The value can be updated only when there are no runtime instances. For example: "default".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetwork")]
    pub authorized_network: Option<String>,
    /// Reference to a Network in compute to populate authorizedNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetworkRef")]
    pub authorized_network_ref: Option<OrganizationForProviderAuthorizedNetworkRef>,
    /// Selector for a Network in compute to populate authorizedNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetworkSelector")]
    pub authorized_network_selector: Option<OrganizationForProviderAuthorizedNetworkSelector>,
    /// Billing type of the Apigee organization. See Apigee pricing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "billingType")]
    pub billing_type: Option<String>,
    /// Cloud KMS key name used for encrypting control plane data that is stored in a multi region.
    /// Only used for the data residency region "US" or "EU".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlPlaneEncryptionKeyName")]
    pub control_plane_encryption_key_name: Option<String>,
    /// Description of the Apigee organization.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Flag that specifies whether the VPC Peering through Private Google Access should be
    /// disabled between the consumer network and Apigee. Required if an authorizedNetwork
    /// on the consumer project is not provided, in which case the flag should be set to true.
    /// Valid only when RuntimeType is set to CLOUD. The value must be set before the creation
    /// of any Apigee runtime instance and can be updated only when there are no runtime instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableVpcPeering")]
    pub disable_vpc_peering: Option<bool>,
    /// The display name of the Apigee organization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The project ID associated with the Apigee organization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    /// Properties defined in the Apigee organization profile.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<OrganizationForProviderProperties>,
    /// Optional. This setting is applicable only for organizations that are soft-deleted (i.e., BillingType
    /// is not EVALUATION). It controls how long Organization data will be retained after the initial delete
    /// operation completes. During this period, the Organization may be restored to its last known state.
    /// After this period, the Organization will no longer be able to be restored.
    /// Default value is DELETION_RETENTION_UNSPECIFIED.
    /// Possible values are: DELETION_RETENTION_UNSPECIFIED, MINIMUM.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retention: Option<String>,
    /// Cloud KMS key name used for encrypting the data that is stored and replicated across runtime instances.
    /// Update is not allowed after the organization is created.
    /// If not specified, a Google-Managed encryption key will be used.
    /// Valid only when RuntimeType is CLOUD. For example: projects/foo/locations/us/keyRings/bar/cryptoKeys/baz.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeDatabaseEncryptionKeyName")]
    pub runtime_database_encryption_key_name: Option<String>,
    /// Reference to a CryptoKey in kms to populate runtimeDatabaseEncryptionKeyName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeDatabaseEncryptionKeyNameRef")]
    pub runtime_database_encryption_key_name_ref: Option<OrganizationForProviderRuntimeDatabaseEncryptionKeyNameRef>,
    /// Selector for a CryptoKey in kms to populate runtimeDatabaseEncryptionKeyName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeDatabaseEncryptionKeyNameSelector")]
    pub runtime_database_encryption_key_name_selector: Option<OrganizationForProviderRuntimeDatabaseEncryptionKeyNameSelector>,
    /// Runtime type of the Apigee organization based on the Apigee subscription purchased.
    /// Default value is CLOUD.
    /// Possible values are: CLOUD, HYBRID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeType")]
    pub runtime_type: Option<String>,
}

/// Reference to a Network in compute to populate authorizedNetwork.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationForProviderAuthorizedNetworkRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<OrganizationForProviderAuthorizedNetworkRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationForProviderAuthorizedNetworkRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<OrganizationForProviderAuthorizedNetworkRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<OrganizationForProviderAuthorizedNetworkRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationForProviderAuthorizedNetworkRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationForProviderAuthorizedNetworkRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate authorizedNetwork.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationForProviderAuthorizedNetworkSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<OrganizationForProviderAuthorizedNetworkSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationForProviderAuthorizedNetworkSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<OrganizationForProviderAuthorizedNetworkSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<OrganizationForProviderAuthorizedNetworkSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationForProviderAuthorizedNetworkSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationForProviderAuthorizedNetworkSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Properties defined in the Apigee organization profile.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationForProviderProperties {
    /// List of all properties in the object.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<OrganizationForProviderPropertiesProperty>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationForProviderPropertiesProperty {
    /// Name of the property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value of the property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Reference to a CryptoKey in kms to populate runtimeDatabaseEncryptionKeyName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationForProviderRuntimeDatabaseEncryptionKeyNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<OrganizationForProviderRuntimeDatabaseEncryptionKeyNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationForProviderRuntimeDatabaseEncryptionKeyNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<OrganizationForProviderRuntimeDatabaseEncryptionKeyNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<OrganizationForProviderRuntimeDatabaseEncryptionKeyNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationForProviderRuntimeDatabaseEncryptionKeyNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationForProviderRuntimeDatabaseEncryptionKeyNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CryptoKey in kms to populate runtimeDatabaseEncryptionKeyName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationForProviderRuntimeDatabaseEncryptionKeyNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<OrganizationForProviderRuntimeDatabaseEncryptionKeyNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationForProviderRuntimeDatabaseEncryptionKeyNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<OrganizationForProviderRuntimeDatabaseEncryptionKeyNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<OrganizationForProviderRuntimeDatabaseEncryptionKeyNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationForProviderRuntimeDatabaseEncryptionKeyNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationForProviderRuntimeDatabaseEncryptionKeyNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationInitProvider {
    /// Primary GCP region for analytics data storage. For valid values, see Create an Apigee organization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "analyticsRegion")]
    pub analytics_region: Option<String>,
    /// Cloud KMS key name used for encrypting API consumer data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiConsumerDataEncryptionKeyName")]
    pub api_consumer_data_encryption_key_name: Option<String>,
    /// This field is needed only for customers using non-default data residency regions.
    /// Apigee stores some control plane data only in single region.
    /// This field determines which single region Apigee should use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiConsumerDataLocation")]
    pub api_consumer_data_location: Option<String>,
    /// Compute Engine network used for Service Networking to be peered with Apigee runtime instances.
    /// See Getting started with the Service Networking API.
    /// Valid only when RuntimeType is set to CLOUD. The value can be updated only when there are no runtime instances. For example: "default".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetwork")]
    pub authorized_network: Option<String>,
    /// Reference to a Network in compute to populate authorizedNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetworkRef")]
    pub authorized_network_ref: Option<OrganizationInitProviderAuthorizedNetworkRef>,
    /// Selector for a Network in compute to populate authorizedNetwork.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetworkSelector")]
    pub authorized_network_selector: Option<OrganizationInitProviderAuthorizedNetworkSelector>,
    /// Billing type of the Apigee organization. See Apigee pricing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "billingType")]
    pub billing_type: Option<String>,
    /// Cloud KMS key name used for encrypting control plane data that is stored in a multi region.
    /// Only used for the data residency region "US" or "EU".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlPlaneEncryptionKeyName")]
    pub control_plane_encryption_key_name: Option<String>,
    /// Description of the Apigee organization.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Flag that specifies whether the VPC Peering through Private Google Access should be
    /// disabled between the consumer network and Apigee. Required if an authorizedNetwork
    /// on the consumer project is not provided, in which case the flag should be set to true.
    /// Valid only when RuntimeType is set to CLOUD. The value must be set before the creation
    /// of any Apigee runtime instance and can be updated only when there are no runtime instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableVpcPeering")]
    pub disable_vpc_peering: Option<bool>,
    /// The display name of the Apigee organization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The project ID associated with the Apigee organization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    /// Properties defined in the Apigee organization profile.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<OrganizationInitProviderProperties>,
    /// Optional. This setting is applicable only for organizations that are soft-deleted (i.e., BillingType
    /// is not EVALUATION). It controls how long Organization data will be retained after the initial delete
    /// operation completes. During this period, the Organization may be restored to its last known state.
    /// After this period, the Organization will no longer be able to be restored.
    /// Default value is DELETION_RETENTION_UNSPECIFIED.
    /// Possible values are: DELETION_RETENTION_UNSPECIFIED, MINIMUM.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retention: Option<String>,
    /// Cloud KMS key name used for encrypting the data that is stored and replicated across runtime instances.
    /// Update is not allowed after the organization is created.
    /// If not specified, a Google-Managed encryption key will be used.
    /// Valid only when RuntimeType is CLOUD. For example: projects/foo/locations/us/keyRings/bar/cryptoKeys/baz.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeDatabaseEncryptionKeyName")]
    pub runtime_database_encryption_key_name: Option<String>,
    /// Reference to a CryptoKey in kms to populate runtimeDatabaseEncryptionKeyName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeDatabaseEncryptionKeyNameRef")]
    pub runtime_database_encryption_key_name_ref: Option<OrganizationInitProviderRuntimeDatabaseEncryptionKeyNameRef>,
    /// Selector for a CryptoKey in kms to populate runtimeDatabaseEncryptionKeyName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeDatabaseEncryptionKeyNameSelector")]
    pub runtime_database_encryption_key_name_selector: Option<OrganizationInitProviderRuntimeDatabaseEncryptionKeyNameSelector>,
    /// Runtime type of the Apigee organization based on the Apigee subscription purchased.
    /// Default value is CLOUD.
    /// Possible values are: CLOUD, HYBRID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeType")]
    pub runtime_type: Option<String>,
}

/// Reference to a Network in compute to populate authorizedNetwork.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationInitProviderAuthorizedNetworkRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<OrganizationInitProviderAuthorizedNetworkRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationInitProviderAuthorizedNetworkRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<OrganizationInitProviderAuthorizedNetworkRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<OrganizationInitProviderAuthorizedNetworkRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationInitProviderAuthorizedNetworkRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationInitProviderAuthorizedNetworkRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Network in compute to populate authorizedNetwork.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationInitProviderAuthorizedNetworkSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<OrganizationInitProviderAuthorizedNetworkSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationInitProviderAuthorizedNetworkSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<OrganizationInitProviderAuthorizedNetworkSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<OrganizationInitProviderAuthorizedNetworkSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationInitProviderAuthorizedNetworkSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationInitProviderAuthorizedNetworkSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Properties defined in the Apigee organization profile.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationInitProviderProperties {
    /// List of all properties in the object.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<OrganizationInitProviderPropertiesProperty>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationInitProviderPropertiesProperty {
    /// Name of the property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value of the property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Reference to a CryptoKey in kms to populate runtimeDatabaseEncryptionKeyName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationInitProviderRuntimeDatabaseEncryptionKeyNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<OrganizationInitProviderRuntimeDatabaseEncryptionKeyNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationInitProviderRuntimeDatabaseEncryptionKeyNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<OrganizationInitProviderRuntimeDatabaseEncryptionKeyNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<OrganizationInitProviderRuntimeDatabaseEncryptionKeyNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationInitProviderRuntimeDatabaseEncryptionKeyNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationInitProviderRuntimeDatabaseEncryptionKeyNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CryptoKey in kms to populate runtimeDatabaseEncryptionKeyName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationInitProviderRuntimeDatabaseEncryptionKeyNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<OrganizationInitProviderRuntimeDatabaseEncryptionKeyNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationInitProviderRuntimeDatabaseEncryptionKeyNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<OrganizationInitProviderRuntimeDatabaseEncryptionKeyNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<OrganizationInitProviderRuntimeDatabaseEncryptionKeyNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationInitProviderRuntimeDatabaseEncryptionKeyNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationInitProviderRuntimeDatabaseEncryptionKeyNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<OrganizationProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<OrganizationProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<OrganizationProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<OrganizationPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<OrganizationPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<OrganizationPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<OrganizationPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<OrganizationPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OrganizationPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// OrganizationStatus defines the observed state of Organization.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<OrganizationStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationStatusAtProvider {
    /// Primary GCP region for analytics data storage. For valid values, see Create an Apigee organization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "analyticsRegion")]
    pub analytics_region: Option<String>,
    /// Cloud KMS key name used for encrypting API consumer data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiConsumerDataEncryptionKeyName")]
    pub api_consumer_data_encryption_key_name: Option<String>,
    /// This field is needed only for customers using non-default data residency regions.
    /// Apigee stores some control plane data only in single region.
    /// This field determines which single region Apigee should use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiConsumerDataLocation")]
    pub api_consumer_data_location: Option<String>,
    /// Output only. Project ID of the Apigee Tenant Project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apigeeProjectId")]
    pub apigee_project_id: Option<String>,
    /// Compute Engine network used for Service Networking to be peered with Apigee runtime instances.
    /// See Getting started with the Service Networking API.
    /// Valid only when RuntimeType is set to CLOUD. The value can be updated only when there are no runtime instances. For example: "default".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizedNetwork")]
    pub authorized_network: Option<String>,
    /// Billing type of the Apigee organization. See Apigee pricing.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "billingType")]
    pub billing_type: Option<String>,
    /// Output only. Base64-encoded public certificate for the root CA of the Apigee organization.
    /// Valid only when RuntimeType is CLOUD. A base64-encoded string.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caCertificate")]
    pub ca_certificate: Option<String>,
    /// Cloud KMS key name used for encrypting control plane data that is stored in a multi region.
    /// Only used for the data residency region "US" or "EU".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "controlPlaneEncryptionKeyName")]
    pub control_plane_encryption_key_name: Option<String>,
    /// Description of the Apigee organization.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Flag that specifies whether the VPC Peering through Private Google Access should be
    /// disabled between the consumer network and Apigee. Required if an authorizedNetwork
    /// on the consumer project is not provided, in which case the flag should be set to true.
    /// Valid only when RuntimeType is set to CLOUD. The value must be set before the creation
    /// of any Apigee runtime instance and can be updated only when there are no runtime instances.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disableVpcPeering")]
    pub disable_vpc_peering: Option<bool>,
    /// The display name of the Apigee organization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// an identifier for the resource with format organizations/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Output only. Name of the Apigee organization.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The project ID associated with the Apigee organization.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    /// Properties defined in the Apigee organization profile.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<OrganizationStatusAtProviderProperties>,
    /// Optional. This setting is applicable only for organizations that are soft-deleted (i.e., BillingType
    /// is not EVALUATION). It controls how long Organization data will be retained after the initial delete
    /// operation completes. During this period, the Organization may be restored to its last known state.
    /// After this period, the Organization will no longer be able to be restored.
    /// Default value is DELETION_RETENTION_UNSPECIFIED.
    /// Possible values are: DELETION_RETENTION_UNSPECIFIED, MINIMUM.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retention: Option<String>,
    /// Cloud KMS key name used for encrypting the data that is stored and replicated across runtime instances.
    /// Update is not allowed after the organization is created.
    /// If not specified, a Google-Managed encryption key will be used.
    /// Valid only when RuntimeType is CLOUD. For example: projects/foo/locations/us/keyRings/bar/cryptoKeys/baz.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeDatabaseEncryptionKeyName")]
    pub runtime_database_encryption_key_name: Option<String>,
    /// Runtime type of the Apigee organization based on the Apigee subscription purchased.
    /// Default value is CLOUD.
    /// Possible values are: CLOUD, HYBRID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "runtimeType")]
    pub runtime_type: Option<String>,
    /// Output only. Subscription type of the Apigee organization.
    /// Valid values include trial (free, limited, and for evaluation purposes only) or paid (full subscription has been purchased).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subscriptionType")]
    pub subscription_type: Option<String>,
}

/// Properties defined in the Apigee organization profile.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationStatusAtProviderProperties {
    /// List of all properties in the object.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub property: Option<Vec<OrganizationStatusAtProviderPropertiesProperty>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OrganizationStatusAtProviderPropertiesProperty {
    /// Name of the property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Value of the property.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ConnectionSpec defines the desired state of Connection
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "cloudwatchevents.aws.upbound.io", version = "v1beta2", kind = "Connection", plural = "connections")]
#[kube(status = "ConnectionStatus")]
pub struct ConnectionSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<ConnectionDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ConnectionForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<ConnectionInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<ConnectionProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<ConnectionPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<ConnectionWriteConnectionSecretToRef>,
}

/// ConnectionSpec defines the desired state of Connection
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProvider {
    /// Parameters used for authorization. A maximum of 1 are allowed. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authParameters")]
    pub auth_parameters: Option<ConnectionForProviderAuthParameters>,
    /// Choose the type of authorization to use for the connection. One of API_KEY,BASIC,OAUTH_CLIENT_CREDENTIALS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationType")]
    pub authorization_type: Option<String>,
    /// Enter a description for the connection. Maximum of 512 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
}

/// Parameters used for authorization. A maximum of 1 are allowed. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParameters {
    /// Parameters used for API_KEY authorization. An API key to include in the header for each authentication request. A maximum of 1 are allowed. Conflicts with basic and oauth. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiKey")]
    pub api_key: Option<ConnectionForProviderAuthParametersApiKey>,
    /// Parameters used for BASIC authorization. A maximum of 1 are allowed. Conflicts with api_key and oauth. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub basic: Option<ConnectionForProviderAuthParametersBasic>,
    /// Invocation Http Parameters are additional credentials used to sign each Invocation of the ApiDestination created from this Connection. If the ApiDestination Rule Target has additional HttpParameters, the values will be merged together, with the Connection Invocation Http Parameters taking precedence. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invocationHttpParameters")]
    pub invocation_http_parameters: Option<ConnectionForProviderAuthParametersInvocationHttpParameters>,
    /// Parameters used for OAUTH_CLIENT_CREDENTIALS authorization. A maximum of 1 are allowed. Conflicts with basic and api_key. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth: Option<ConnectionForProviderAuthParametersOauth>,
}

/// Parameters used for API_KEY authorization. An API key to include in the header for each authentication request. A maximum of 1 are allowed. Conflicts with basic and oauth. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersApiKey {
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Header Value. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueSecretRef")]
    pub value_secret_ref: Option<ConnectionForProviderAuthParametersApiKeyValueSecretRef>,
}

/// Header Value. Created and stored in AWS Secrets Manager.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersApiKeyValueSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Parameters used for BASIC authorization. A maximum of 1 are allowed. Conflicts with api_key and oauth. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersBasic {
    /// A password for the authorization. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretRef")]
    pub password_secret_ref: Option<ConnectionForProviderAuthParametersBasicPasswordSecretRef>,
    /// A username for the authorization.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// A password for the authorization. Created and stored in AWS Secrets Manager.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersBasicPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Invocation Http Parameters are additional credentials used to sign each Invocation of the ApiDestination created from this Connection. If the ApiDestination Rule Target has additional HttpParameters, the values will be merged together, with the Connection Invocation Http Parameters taking precedence. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersInvocationHttpParameters {
    /// Contains additional body string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<Vec<ConnectionForProviderAuthParametersInvocationHttpParametersBody>>,
    /// Contains additional header parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<Vec<ConnectionForProviderAuthParametersInvocationHttpParametersHeader>>,
    /// Contains additional query string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryString")]
    pub query_string: Option<Vec<ConnectionForProviderAuthParametersInvocationHttpParametersQueryString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersInvocationHttpParametersBody {
    /// Specified whether the value is secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isValueSecret")]
    pub is_value_secret: Option<bool>,
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Header Value. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueSecretRef")]
    pub value_secret_ref: Option<ConnectionForProviderAuthParametersInvocationHttpParametersBodyValueSecretRef>,
}

/// Header Value. Created and stored in AWS Secrets Manager.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersInvocationHttpParametersBodyValueSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersInvocationHttpParametersHeader {
    /// Specified whether the value is secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isValueSecret")]
    pub is_value_secret: Option<bool>,
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Header Value. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueSecretRef")]
    pub value_secret_ref: Option<ConnectionForProviderAuthParametersInvocationHttpParametersHeaderValueSecretRef>,
}

/// Header Value. Created and stored in AWS Secrets Manager.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersInvocationHttpParametersHeaderValueSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersInvocationHttpParametersQueryString {
    /// Specified whether the value is secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isValueSecret")]
    pub is_value_secret: Option<bool>,
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Header Value. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueSecretRef")]
    pub value_secret_ref: Option<ConnectionForProviderAuthParametersInvocationHttpParametersQueryStringValueSecretRef>,
}

/// Header Value. Created and stored in AWS Secrets Manager.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersInvocationHttpParametersQueryStringValueSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Parameters used for OAUTH_CLIENT_CREDENTIALS authorization. A maximum of 1 are allowed. Conflicts with basic and api_key. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersOauth {
    /// The URL to the authorization endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationEndpoint")]
    pub authorization_endpoint: Option<String>,
    /// Contains the client parameters for OAuth authorization. Contains the following two parameters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientParameters")]
    pub client_parameters: Option<ConnectionForProviderAuthParametersOauthClientParameters>,
    /// A password for the authorization. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpMethod")]
    pub http_method: Option<String>,
    /// OAuth Http Parameters are additional credentials used to sign the request to the authorization endpoint to exchange the OAuth Client information for an access token. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauthHttpParameters")]
    pub oauth_http_parameters: Option<ConnectionForProviderAuthParametersOauthOauthHttpParameters>,
}

/// Contains the client parameters for OAuth authorization. Contains the following two parameters.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersOauthClientParameters {
    /// The client ID for the credentials to use for authorization. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// The client secret for the credentials to use for authorization. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSecretSecretRef")]
    pub client_secret_secret_ref: Option<ConnectionForProviderAuthParametersOauthClientParametersClientSecretSecretRef>,
}

/// The client secret for the credentials to use for authorization. Created and stored in AWS Secrets Manager.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersOauthClientParametersClientSecretSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// OAuth Http Parameters are additional credentials used to sign the request to the authorization endpoint to exchange the OAuth Client information for an access token. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersOauthOauthHttpParameters {
    /// Contains additional body string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<Vec<ConnectionForProviderAuthParametersOauthOauthHttpParametersBody>>,
    /// Contains additional header parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<Vec<ConnectionForProviderAuthParametersOauthOauthHttpParametersHeader>>,
    /// Contains additional query string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryString")]
    pub query_string: Option<Vec<ConnectionForProviderAuthParametersOauthOauthHttpParametersQueryString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersOauthOauthHttpParametersBody {
    /// Specified whether the value is secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isValueSecret")]
    pub is_value_secret: Option<bool>,
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Header Value. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueSecretRef")]
    pub value_secret_ref: Option<ConnectionForProviderAuthParametersOauthOauthHttpParametersBodyValueSecretRef>,
}

/// Header Value. Created and stored in AWS Secrets Manager.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersOauthOauthHttpParametersBodyValueSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersOauthOauthHttpParametersHeader {
    /// Specified whether the value is secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isValueSecret")]
    pub is_value_secret: Option<bool>,
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Header Value. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueSecretRef")]
    pub value_secret_ref: Option<ConnectionForProviderAuthParametersOauthOauthHttpParametersHeaderValueSecretRef>,
}

/// Header Value. Created and stored in AWS Secrets Manager.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersOauthOauthHttpParametersHeaderValueSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersOauthOauthHttpParametersQueryString {
    /// Specified whether the value is secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isValueSecret")]
    pub is_value_secret: Option<bool>,
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Header Value. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueSecretRef")]
    pub value_secret_ref: Option<ConnectionForProviderAuthParametersOauthOauthHttpParametersQueryStringValueSecretRef>,
}

/// Header Value. Created and stored in AWS Secrets Manager.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionForProviderAuthParametersOauthOauthHttpParametersQueryStringValueSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProvider {
    /// Parameters used for authorization. A maximum of 1 are allowed. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authParameters")]
    pub auth_parameters: Option<ConnectionInitProviderAuthParameters>,
    /// Choose the type of authorization to use for the connection. One of API_KEY,BASIC,OAUTH_CLIENT_CREDENTIALS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationType")]
    pub authorization_type: Option<String>,
    /// Enter a description for the connection. Maximum of 512 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

/// Parameters used for authorization. A maximum of 1 are allowed. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParameters {
    /// Parameters used for API_KEY authorization. An API key to include in the header for each authentication request. A maximum of 1 are allowed. Conflicts with basic and oauth. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiKey")]
    pub api_key: Option<ConnectionInitProviderAuthParametersApiKey>,
    /// Parameters used for BASIC authorization. A maximum of 1 are allowed. Conflicts with api_key and oauth. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub basic: Option<ConnectionInitProviderAuthParametersBasic>,
    /// Invocation Http Parameters are additional credentials used to sign each Invocation of the ApiDestination created from this Connection. If the ApiDestination Rule Target has additional HttpParameters, the values will be merged together, with the Connection Invocation Http Parameters taking precedence. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invocationHttpParameters")]
    pub invocation_http_parameters: Option<ConnectionInitProviderAuthParametersInvocationHttpParameters>,
    /// Parameters used for OAUTH_CLIENT_CREDENTIALS authorization. A maximum of 1 are allowed. Conflicts with basic and api_key. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth: Option<ConnectionInitProviderAuthParametersOauth>,
}

/// Parameters used for API_KEY authorization. An API key to include in the header for each authentication request. A maximum of 1 are allowed. Conflicts with basic and oauth. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersApiKey {
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Header Value. Created and stored in AWS Secrets Manager.
    #[serde(rename = "valueSecretRef")]
    pub value_secret_ref: ConnectionInitProviderAuthParametersApiKeyValueSecretRef,
}

/// Header Value. Created and stored in AWS Secrets Manager.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersApiKeyValueSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Parameters used for BASIC authorization. A maximum of 1 are allowed. Conflicts with api_key and oauth. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersBasic {
    /// A password for the authorization. Created and stored in AWS Secrets Manager.
    #[serde(rename = "passwordSecretRef")]
    pub password_secret_ref: ConnectionInitProviderAuthParametersBasicPasswordSecretRef,
    /// A username for the authorization.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// A password for the authorization. Created and stored in AWS Secrets Manager.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersBasicPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Invocation Http Parameters are additional credentials used to sign each Invocation of the ApiDestination created from this Connection. If the ApiDestination Rule Target has additional HttpParameters, the values will be merged together, with the Connection Invocation Http Parameters taking precedence. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersInvocationHttpParameters {
    /// Contains additional body string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<Vec<ConnectionInitProviderAuthParametersInvocationHttpParametersBody>>,
    /// Contains additional header parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<Vec<ConnectionInitProviderAuthParametersInvocationHttpParametersHeader>>,
    /// Contains additional query string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryString")]
    pub query_string: Option<Vec<ConnectionInitProviderAuthParametersInvocationHttpParametersQueryString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersInvocationHttpParametersBody {
    /// Specified whether the value is secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isValueSecret")]
    pub is_value_secret: Option<bool>,
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Header Value. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueSecretRef")]
    pub value_secret_ref: Option<ConnectionInitProviderAuthParametersInvocationHttpParametersBodyValueSecretRef>,
}

/// Header Value. Created and stored in AWS Secrets Manager.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersInvocationHttpParametersBodyValueSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersInvocationHttpParametersHeader {
    /// Specified whether the value is secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isValueSecret")]
    pub is_value_secret: Option<bool>,
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Header Value. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueSecretRef")]
    pub value_secret_ref: Option<ConnectionInitProviderAuthParametersInvocationHttpParametersHeaderValueSecretRef>,
}

/// Header Value. Created and stored in AWS Secrets Manager.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersInvocationHttpParametersHeaderValueSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersInvocationHttpParametersQueryString {
    /// Specified whether the value is secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isValueSecret")]
    pub is_value_secret: Option<bool>,
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Header Value. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueSecretRef")]
    pub value_secret_ref: Option<ConnectionInitProviderAuthParametersInvocationHttpParametersQueryStringValueSecretRef>,
}

/// Header Value. Created and stored in AWS Secrets Manager.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersInvocationHttpParametersQueryStringValueSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Parameters used for OAUTH_CLIENT_CREDENTIALS authorization. A maximum of 1 are allowed. Conflicts with basic and api_key. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersOauth {
    /// The URL to the authorization endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationEndpoint")]
    pub authorization_endpoint: Option<String>,
    /// Contains the client parameters for OAuth authorization. Contains the following two parameters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientParameters")]
    pub client_parameters: Option<ConnectionInitProviderAuthParametersOauthClientParameters>,
    /// A password for the authorization. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpMethod")]
    pub http_method: Option<String>,
    /// OAuth Http Parameters are additional credentials used to sign the request to the authorization endpoint to exchange the OAuth Client information for an access token. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauthHttpParameters")]
    pub oauth_http_parameters: Option<ConnectionInitProviderAuthParametersOauthOauthHttpParameters>,
}

/// Contains the client parameters for OAuth authorization. Contains the following two parameters.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersOauthClientParameters {
    /// The client ID for the credentials to use for authorization. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// The client secret for the credentials to use for authorization. Created and stored in AWS Secrets Manager.
    #[serde(rename = "clientSecretSecretRef")]
    pub client_secret_secret_ref: ConnectionInitProviderAuthParametersOauthClientParametersClientSecretSecretRef,
}

/// The client secret for the credentials to use for authorization. Created and stored in AWS Secrets Manager.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersOauthClientParametersClientSecretSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// OAuth Http Parameters are additional credentials used to sign the request to the authorization endpoint to exchange the OAuth Client information for an access token. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersOauthOauthHttpParameters {
    /// Contains additional body string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<Vec<ConnectionInitProviderAuthParametersOauthOauthHttpParametersBody>>,
    /// Contains additional header parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<Vec<ConnectionInitProviderAuthParametersOauthOauthHttpParametersHeader>>,
    /// Contains additional query string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryString")]
    pub query_string: Option<Vec<ConnectionInitProviderAuthParametersOauthOauthHttpParametersQueryString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersOauthOauthHttpParametersBody {
    /// Specified whether the value is secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isValueSecret")]
    pub is_value_secret: Option<bool>,
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Header Value. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueSecretRef")]
    pub value_secret_ref: Option<ConnectionInitProviderAuthParametersOauthOauthHttpParametersBodyValueSecretRef>,
}

/// Header Value. Created and stored in AWS Secrets Manager.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersOauthOauthHttpParametersBodyValueSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersOauthOauthHttpParametersHeader {
    /// Specified whether the value is secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isValueSecret")]
    pub is_value_secret: Option<bool>,
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Header Value. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueSecretRef")]
    pub value_secret_ref: Option<ConnectionInitProviderAuthParametersOauthOauthHttpParametersHeaderValueSecretRef>,
}

/// Header Value. Created and stored in AWS Secrets Manager.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersOauthOauthHttpParametersHeaderValueSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersOauthOauthHttpParametersQueryString {
    /// Specified whether the value is secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isValueSecret")]
    pub is_value_secret: Option<bool>,
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Header Value. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueSecretRef")]
    pub value_secret_ref: Option<ConnectionInitProviderAuthParametersOauthOauthHttpParametersQueryStringValueSecretRef>,
}

/// Header Value. Created and stored in AWS Secrets Manager.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionInitProviderAuthParametersOauthOauthHttpParametersQueryStringValueSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ConnectionPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ConnectionPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConnectionPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConnectionPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConnectionPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConnectionPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ConnectionStatus defines the observed state of Connection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<ConnectionStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProvider {
    /// The Amazon Resource Name (ARN) of the connection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Parameters used for authorization. A maximum of 1 are allowed. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authParameters")]
    pub auth_parameters: Option<ConnectionStatusAtProviderAuthParameters>,
    /// Choose the type of authorization to use for the connection. One of API_KEY,BASIC,OAUTH_CLIENT_CREDENTIALS.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationType")]
    pub authorization_type: Option<String>,
    /// Enter a description for the connection. Maximum of 512 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The Amazon Resource Name (ARN) of the secret created from the authorization parameters specified for the connection.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    pub secret_arn: Option<String>,
}

/// Parameters used for authorization. A maximum of 1 are allowed. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderAuthParameters {
    /// Parameters used for API_KEY authorization. An API key to include in the header for each authentication request. A maximum of 1 are allowed. Conflicts with basic and oauth. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "apiKey")]
    pub api_key: Option<ConnectionStatusAtProviderAuthParametersApiKey>,
    /// Parameters used for BASIC authorization. A maximum of 1 are allowed. Conflicts with api_key and oauth. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub basic: Option<ConnectionStatusAtProviderAuthParametersBasic>,
    /// Invocation Http Parameters are additional credentials used to sign each Invocation of the ApiDestination created from this Connection. If the ApiDestination Rule Target has additional HttpParameters, the values will be merged together, with the Connection Invocation Http Parameters taking precedence. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "invocationHttpParameters")]
    pub invocation_http_parameters: Option<ConnectionStatusAtProviderAuthParametersInvocationHttpParameters>,
    /// Parameters used for OAUTH_CLIENT_CREDENTIALS authorization. A maximum of 1 are allowed. Conflicts with basic and api_key. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub oauth: Option<ConnectionStatusAtProviderAuthParametersOauth>,
}

/// Parameters used for API_KEY authorization. An API key to include in the header for each authentication request. A maximum of 1 are allowed. Conflicts with basic and oauth. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderAuthParametersApiKey {
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

/// Parameters used for BASIC authorization. A maximum of 1 are allowed. Conflicts with api_key and oauth. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderAuthParametersBasic {
    /// A username for the authorization.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// Invocation Http Parameters are additional credentials used to sign each Invocation of the ApiDestination created from this Connection. If the ApiDestination Rule Target has additional HttpParameters, the values will be merged together, with the Connection Invocation Http Parameters taking precedence. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderAuthParametersInvocationHttpParameters {
    /// Contains additional body string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<Vec<ConnectionStatusAtProviderAuthParametersInvocationHttpParametersBody>>,
    /// Contains additional header parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<Vec<ConnectionStatusAtProviderAuthParametersInvocationHttpParametersHeader>>,
    /// Contains additional query string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryString")]
    pub query_string: Option<Vec<ConnectionStatusAtProviderAuthParametersInvocationHttpParametersQueryString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderAuthParametersInvocationHttpParametersBody {
    /// Specified whether the value is secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isValueSecret")]
    pub is_value_secret: Option<bool>,
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderAuthParametersInvocationHttpParametersHeader {
    /// Specified whether the value is secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isValueSecret")]
    pub is_value_secret: Option<bool>,
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderAuthParametersInvocationHttpParametersQueryString {
    /// Specified whether the value is secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isValueSecret")]
    pub is_value_secret: Option<bool>,
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

/// Parameters used for OAUTH_CLIENT_CREDENTIALS authorization. A maximum of 1 are allowed. Conflicts with basic and api_key. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderAuthParametersOauth {
    /// The URL to the authorization endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationEndpoint")]
    pub authorization_endpoint: Option<String>,
    /// Contains the client parameters for OAuth authorization. Contains the following two parameters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientParameters")]
    pub client_parameters: Option<ConnectionStatusAtProviderAuthParametersOauthClientParameters>,
    /// A password for the authorization. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpMethod")]
    pub http_method: Option<String>,
    /// OAuth Http Parameters are additional credentials used to sign the request to the authorization endpoint to exchange the OAuth Client information for an access token. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "oauthHttpParameters")]
    pub oauth_http_parameters: Option<ConnectionStatusAtProviderAuthParametersOauthOauthHttpParameters>,
}

/// Contains the client parameters for OAuth authorization. Contains the following two parameters.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderAuthParametersOauthClientParameters {
    /// The client ID for the credentials to use for authorization. Created and stored in AWS Secrets Manager.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
}

/// OAuth Http Parameters are additional credentials used to sign the request to the authorization endpoint to exchange the OAuth Client information for an access token. Secret values are stored and managed by AWS Secrets Manager. A maximum of 1 are allowed. Documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderAuthParametersOauthOauthHttpParameters {
    /// Contains additional body string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub body: Option<Vec<ConnectionStatusAtProviderAuthParametersOauthOauthHttpParametersBody>>,
    /// Contains additional header parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub header: Option<Vec<ConnectionStatusAtProviderAuthParametersOauthOauthHttpParametersHeader>>,
    /// Contains additional query string parameters for the connection. You can include up to 100 additional body string parameters per request. Each additional parameter counts towards the event payload size, which cannot exceed 64 KB. Each parameter can contain the following:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "queryString")]
    pub query_string: Option<Vec<ConnectionStatusAtProviderAuthParametersOauthOauthHttpParametersQueryString>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderAuthParametersOauthOauthHttpParametersBody {
    /// Specified whether the value is secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isValueSecret")]
    pub is_value_secret: Option<bool>,
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderAuthParametersOauthOauthHttpParametersHeader {
    /// Specified whether the value is secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isValueSecret")]
    pub is_value_secret: Option<bool>,
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConnectionStatusAtProviderAuthParametersOauthOauthHttpParametersQueryString {
    /// Specified whether the value is secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isValueSecret")]
    pub is_value_secret: Option<bool>,
    /// Header Name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
}


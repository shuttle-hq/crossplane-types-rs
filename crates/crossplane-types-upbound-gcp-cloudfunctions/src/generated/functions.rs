// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// FunctionSpec defines the desired state of Function
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "cloudfunctions.gcp.upbound.io", version = "v1beta2", kind = "Function", plural = "functions")]
#[kube(status = "FunctionStatus")]
pub struct FunctionSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<FunctionDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: FunctionForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<FunctionInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<FunctionProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<FunctionPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<FunctionWriteConnectionSecretToRef>,
}

/// FunctionSpec defines the desired state of Function
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionForProvider {
    /// Memory (in MB), available to the function. Default value is 256. Possible values include 128, 256, 512, 1024, etc.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availableMemoryMb")]
    pub available_memory_mb: Option<f64>,
    /// A set of key/value environment variable pairs available during build time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildEnvironmentVariables")]
    pub build_environment_variables: Option<HashMap<String, String>>,
    /// If provided, the self-provided service account to use to build the function. The format of this field is projects/{project}/serviceAccounts/{serviceAccountEmail}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildServiceAccount")]
    pub build_service_account: Option<String>,
    /// Name of the Cloud Build Custom Worker Pool that should be used to build the function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildWorkerPool")]
    pub build_worker_pool: Option<String>,
    /// Description of the function.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Docker Registry to use for storing the function's Docker images. Allowed values are ARTIFACT_REGISTRY (default) and CONTAINER_REGISTRY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dockerRegistry")]
    pub docker_registry: Option<String>,
    /// User-managed repository created in Artifact Registry to which the function's Docker image will be pushed after it is built by Cloud Build. May optionally be encrypted with a customer-managed encryption key (CMEK). If unspecified and docker_registry is not explicitly set to CONTAINER_REGISTRY, GCF will create and use a default Artifact Registry repository named 'gcf-artifacts' in the region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dockerRepository")]
    pub docker_repository: Option<String>,
    /// Name of the function that will be executed when the Google Cloud Function is triggered.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entryPoint")]
    pub entry_point: Option<String>,
    /// A set of key/value environment variable pairs to assign to the function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentVariables")]
    pub environment_variables: Option<HashMap<String, String>>,
    /// A source that fires events in response to a condition in another service. Structure is documented below. Cannot be used with trigger_http.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventTrigger")]
    pub event_trigger: Option<FunctionForProviderEventTrigger>,
    /// The security level for the function. The following options are available:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpsTriggerSecurityLevel")]
    pub https_trigger_security_level: Option<String>,
    /// URL which triggers function execution. Returned only if trigger_http is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpsTriggerUrl")]
    pub https_trigger_url: Option<String>,
    /// String value that controls what traffic can reach the function. Allowed values are ALLOW_ALL, ALLOW_INTERNAL_AND_GCLB and ALLOW_INTERNAL_ONLY. Check ingress documentation to see the impact of each settings value. Changes to this field will recreate the cloud function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressSettings")]
    pub ingress_settings: Option<String>,
    /// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
    /// If specified, you must also provide an artifact registry repository using the docker_repository field that was created with the same KMS crypto key. Before deploying, please complete all pre-requisites described in https://cloud.google.com/functions/docs/securing/cmek#granting_service_accounts_access_to_the_key
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    pub kms_key_name: Option<String>,
    /// A set of key/value label pairs to assign to the function. Label keys must follow the requirements at https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The limit on the maximum number of function instances that may coexist at a given time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInstances")]
    pub max_instances: Option<f64>,
    /// The limit on the minimum number of function instances that may coexist at a given time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minInstances")]
    pub min_instances: Option<f64>,
    /// Project of the function. If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Region of function. If it is not provided, the provider region is used.
    pub region: String,
    /// The runtime in which the function is going to run.
    /// Eg. "nodejs16", "python39", "dotnet3", "go116", "java11", "ruby30", "php74", etc. Check the official doc for the up-to-date list.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub runtime: Option<String>,
    /// Secret environment variables configuration. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretEnvironmentVariables")]
    pub secret_environment_variables: Option<Vec<FunctionForProviderSecretEnvironmentVariables>>,
    /// Secret volumes configuration. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretVolumes")]
    pub secret_volumes: Option<Vec<FunctionForProviderSecretVolumes>>,
    /// If provided, the self-provided service account to run the function with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountEmail")]
    pub service_account_email: Option<String>,
    /// The GCS bucket containing the zip archive which contains the function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceArchiveBucket")]
    pub source_archive_bucket: Option<String>,
    /// Reference to a Bucket in storage to populate sourceArchiveBucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceArchiveBucketRef")]
    pub source_archive_bucket_ref: Option<FunctionForProviderSourceArchiveBucketRef>,
    /// Selector for a Bucket in storage to populate sourceArchiveBucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceArchiveBucketSelector")]
    pub source_archive_bucket_selector: Option<FunctionForProviderSourceArchiveBucketSelector>,
    /// The source archive object (file) in archive bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceArchiveObject")]
    pub source_archive_object: Option<String>,
    /// Reference to a BucketObject in storage to populate sourceArchiveObject.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceArchiveObjectRef")]
    pub source_archive_object_ref: Option<FunctionForProviderSourceArchiveObjectRef>,
    /// Selector for a BucketObject in storage to populate sourceArchiveObject.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceArchiveObjectSelector")]
    pub source_archive_object_selector: Option<FunctionForProviderSourceArchiveObjectSelector>,
    /// Represents parameters related to source repository where a function is hosted.
    /// Cannot be set alongside source_archive_bucket or source_archive_object. Structure is documented below. It must match the pattern projects/{project}/locations/{location}/repositories/{repository}.*
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceRepository")]
    pub source_repository: Option<FunctionForProviderSourceRepository>,
    /// Timeout (in seconds) for the function. Default value is 60 seconds. Cannot be more than 540 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<f64>,
    /// Boolean variable. Any HTTP request (of a supported type) to the endpoint will trigger function execution. Supported HTTP request types are: POST, PUT, GET, DELETE, and OPTIONS. Endpoint is returned as https_trigger_url. Cannot be used with event_trigger.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "triggerHttp")]
    pub trigger_http: Option<bool>,
    /// The VPC Network Connector that this cloud function can connect to. It should be set up as fully-qualified URI. The format of this field is projects/*/locations/*/connectors/*.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConnector")]
    pub vpc_connector: Option<String>,
    /// The egress settings for the connector, controlling what traffic is diverted through it. Allowed values are ALL_TRAFFIC and PRIVATE_RANGES_ONLY. Defaults to PRIVATE_RANGES_ONLY. If unset, this field preserves the previously set value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConnectorEgressSettings")]
    pub vpc_connector_egress_settings: Option<String>,
}

/// A source that fires events in response to a condition in another service. Structure is documented below. Cannot be used with trigger_http.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionForProviderEventTrigger {
    /// The type of event to observe. For example: "google.storage.object.finalize".
    /// See the documentation on calling Cloud Functions for a
    /// full reference of accepted triggers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventType")]
    pub event_type: Option<String>,
    /// Specifies policy for failed executions. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failurePolicy")]
    pub failure_policy: Option<FunctionForProviderEventTriggerFailurePolicy>,
    /// Required. The name or partial URI of the resource from
    /// which to observe events. For example, "myBucket" or "projects/my-project/topics/my-topic"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

/// Specifies policy for failed executions. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionForProviderEventTriggerFailurePolicy {
    /// Whether the function should be retried on failure. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionForProviderSecretEnvironmentVariables {
    /// Name of the environment variable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function's project, assuming that the secret exists in the same project as of the function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    /// ID of the secret in secret manager (not the full resource name).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// Version of the secret (version number or the string "latest"). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new clones start.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionForProviderSecretVolumes {
    /// The path within the container to mount the secret volume. For example, setting the mount_path as "/etc/secrets" would mount the secret value files under the "/etc/secrets" directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: "/etc/secrets" Restricted mount paths: "/cloudsql", "/dev/log", "/pod", "/proc", "/var/log".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    pub mount_path: Option<String>,
    /// Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function's project, assuming that the secret exists in the same project as of the function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    /// ID of the secret in secret manager (not the full resource name).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// List of secret versions to mount for this secret. If empty, the "latest" version of the secret will be made available in a file named after the secret under the mount point. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub versions: Option<Vec<FunctionForProviderSecretVolumesVersions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionForProviderSecretVolumesVersions {
    /// Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as "/etc/secrets" and path as "/secret_foo" would mount the secret value file at "/etc/secrets/secret_foo".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Version of the secret (version number or the string "latest"). It is preferable to use "latest" version with secret volumes as secret value changes are reflected immediately.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Reference to a Bucket in storage to populate sourceArchiveBucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionForProviderSourceArchiveBucketRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FunctionForProviderSourceArchiveBucketRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionForProviderSourceArchiveBucketRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FunctionForProviderSourceArchiveBucketRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FunctionForProviderSourceArchiveBucketRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionForProviderSourceArchiveBucketRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionForProviderSourceArchiveBucketRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in storage to populate sourceArchiveBucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionForProviderSourceArchiveBucketSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FunctionForProviderSourceArchiveBucketSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionForProviderSourceArchiveBucketSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FunctionForProviderSourceArchiveBucketSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FunctionForProviderSourceArchiveBucketSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionForProviderSourceArchiveBucketSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionForProviderSourceArchiveBucketSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a BucketObject in storage to populate sourceArchiveObject.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionForProviderSourceArchiveObjectRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FunctionForProviderSourceArchiveObjectRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionForProviderSourceArchiveObjectRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FunctionForProviderSourceArchiveObjectRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FunctionForProviderSourceArchiveObjectRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionForProviderSourceArchiveObjectRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionForProviderSourceArchiveObjectRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a BucketObject in storage to populate sourceArchiveObject.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionForProviderSourceArchiveObjectSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FunctionForProviderSourceArchiveObjectSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionForProviderSourceArchiveObjectSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FunctionForProviderSourceArchiveObjectSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FunctionForProviderSourceArchiveObjectSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionForProviderSourceArchiveObjectSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionForProviderSourceArchiveObjectSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Represents parameters related to source repository where a function is hosted.
/// Cannot be set alongside source_archive_bucket or source_archive_object. Structure is documented below. It must match the pattern projects/{project}/locations/{location}/repositories/{repository}.*
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionForProviderSourceRepository {
    /// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionInitProvider {
    /// Memory (in MB), available to the function. Default value is 256. Possible values include 128, 256, 512, 1024, etc.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availableMemoryMb")]
    pub available_memory_mb: Option<f64>,
    /// A set of key/value environment variable pairs available during build time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildEnvironmentVariables")]
    pub build_environment_variables: Option<HashMap<String, String>>,
    /// If provided, the self-provided service account to use to build the function. The format of this field is projects/{project}/serviceAccounts/{serviceAccountEmail}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildServiceAccount")]
    pub build_service_account: Option<String>,
    /// Name of the Cloud Build Custom Worker Pool that should be used to build the function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildWorkerPool")]
    pub build_worker_pool: Option<String>,
    /// Description of the function.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Docker Registry to use for storing the function's Docker images. Allowed values are ARTIFACT_REGISTRY (default) and CONTAINER_REGISTRY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dockerRegistry")]
    pub docker_registry: Option<String>,
    /// User-managed repository created in Artifact Registry to which the function's Docker image will be pushed after it is built by Cloud Build. May optionally be encrypted with a customer-managed encryption key (CMEK). If unspecified and docker_registry is not explicitly set to CONTAINER_REGISTRY, GCF will create and use a default Artifact Registry repository named 'gcf-artifacts' in the region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dockerRepository")]
    pub docker_repository: Option<String>,
    /// Name of the function that will be executed when the Google Cloud Function is triggered.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entryPoint")]
    pub entry_point: Option<String>,
    /// A set of key/value environment variable pairs to assign to the function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentVariables")]
    pub environment_variables: Option<HashMap<String, String>>,
    /// A source that fires events in response to a condition in another service. Structure is documented below. Cannot be used with trigger_http.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventTrigger")]
    pub event_trigger: Option<FunctionInitProviderEventTrigger>,
    /// The security level for the function. The following options are available:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpsTriggerSecurityLevel")]
    pub https_trigger_security_level: Option<String>,
    /// URL which triggers function execution. Returned only if trigger_http is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpsTriggerUrl")]
    pub https_trigger_url: Option<String>,
    /// String value that controls what traffic can reach the function. Allowed values are ALLOW_ALL, ALLOW_INTERNAL_AND_GCLB and ALLOW_INTERNAL_ONLY. Check ingress documentation to see the impact of each settings value. Changes to this field will recreate the cloud function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressSettings")]
    pub ingress_settings: Option<String>,
    /// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
    /// If specified, you must also provide an artifact registry repository using the docker_repository field that was created with the same KMS crypto key. Before deploying, please complete all pre-requisites described in https://cloud.google.com/functions/docs/securing/cmek#granting_service_accounts_access_to_the_key
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    pub kms_key_name: Option<String>,
    /// A set of key/value label pairs to assign to the function. Label keys must follow the requirements at https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The limit on the maximum number of function instances that may coexist at a given time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInstances")]
    pub max_instances: Option<f64>,
    /// The limit on the minimum number of function instances that may coexist at a given time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minInstances")]
    pub min_instances: Option<f64>,
    /// Project of the function. If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The runtime in which the function is going to run.
    /// Eg. "nodejs16", "python39", "dotnet3", "go116", "java11", "ruby30", "php74", etc. Check the official doc for the up-to-date list.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub runtime: Option<String>,
    /// Secret environment variables configuration. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretEnvironmentVariables")]
    pub secret_environment_variables: Option<Vec<FunctionInitProviderSecretEnvironmentVariables>>,
    /// Secret volumes configuration. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretVolumes")]
    pub secret_volumes: Option<Vec<FunctionInitProviderSecretVolumes>>,
    /// If provided, the self-provided service account to run the function with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountEmail")]
    pub service_account_email: Option<String>,
    /// The GCS bucket containing the zip archive which contains the function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceArchiveBucket")]
    pub source_archive_bucket: Option<String>,
    /// Reference to a Bucket in storage to populate sourceArchiveBucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceArchiveBucketRef")]
    pub source_archive_bucket_ref: Option<FunctionInitProviderSourceArchiveBucketRef>,
    /// Selector for a Bucket in storage to populate sourceArchiveBucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceArchiveBucketSelector")]
    pub source_archive_bucket_selector: Option<FunctionInitProviderSourceArchiveBucketSelector>,
    /// The source archive object (file) in archive bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceArchiveObject")]
    pub source_archive_object: Option<String>,
    /// Reference to a BucketObject in storage to populate sourceArchiveObject.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceArchiveObjectRef")]
    pub source_archive_object_ref: Option<FunctionInitProviderSourceArchiveObjectRef>,
    /// Selector for a BucketObject in storage to populate sourceArchiveObject.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceArchiveObjectSelector")]
    pub source_archive_object_selector: Option<FunctionInitProviderSourceArchiveObjectSelector>,
    /// Represents parameters related to source repository where a function is hosted.
    /// Cannot be set alongside source_archive_bucket or source_archive_object. Structure is documented below. It must match the pattern projects/{project}/locations/{location}/repositories/{repository}.*
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceRepository")]
    pub source_repository: Option<FunctionInitProviderSourceRepository>,
    /// Timeout (in seconds) for the function. Default value is 60 seconds. Cannot be more than 540 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<f64>,
    /// Boolean variable. Any HTTP request (of a supported type) to the endpoint will trigger function execution. Supported HTTP request types are: POST, PUT, GET, DELETE, and OPTIONS. Endpoint is returned as https_trigger_url. Cannot be used with event_trigger.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "triggerHttp")]
    pub trigger_http: Option<bool>,
    /// The VPC Network Connector that this cloud function can connect to. It should be set up as fully-qualified URI. The format of this field is projects/*/locations/*/connectors/*.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConnector")]
    pub vpc_connector: Option<String>,
    /// The egress settings for the connector, controlling what traffic is diverted through it. Allowed values are ALL_TRAFFIC and PRIVATE_RANGES_ONLY. Defaults to PRIVATE_RANGES_ONLY. If unset, this field preserves the previously set value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConnectorEgressSettings")]
    pub vpc_connector_egress_settings: Option<String>,
}

/// A source that fires events in response to a condition in another service. Structure is documented below. Cannot be used with trigger_http.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionInitProviderEventTrigger {
    /// The type of event to observe. For example: "google.storage.object.finalize".
    /// See the documentation on calling Cloud Functions for a
    /// full reference of accepted triggers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventType")]
    pub event_type: Option<String>,
    /// Specifies policy for failed executions. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failurePolicy")]
    pub failure_policy: Option<FunctionInitProviderEventTriggerFailurePolicy>,
    /// Required. The name or partial URI of the resource from
    /// which to observe events. For example, "myBucket" or "projects/my-project/topics/my-topic"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

/// Specifies policy for failed executions. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionInitProviderEventTriggerFailurePolicy {
    /// Whether the function should be retried on failure. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionInitProviderSecretEnvironmentVariables {
    /// Name of the environment variable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function's project, assuming that the secret exists in the same project as of the function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    /// ID of the secret in secret manager (not the full resource name).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// Version of the secret (version number or the string "latest"). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new clones start.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionInitProviderSecretVolumes {
    /// The path within the container to mount the secret volume. For example, setting the mount_path as "/etc/secrets" would mount the secret value files under the "/etc/secrets" directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: "/etc/secrets" Restricted mount paths: "/cloudsql", "/dev/log", "/pod", "/proc", "/var/log".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    pub mount_path: Option<String>,
    /// Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function's project, assuming that the secret exists in the same project as of the function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    /// ID of the secret in secret manager (not the full resource name).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// List of secret versions to mount for this secret. If empty, the "latest" version of the secret will be made available in a file named after the secret under the mount point. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub versions: Option<Vec<FunctionInitProviderSecretVolumesVersions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionInitProviderSecretVolumesVersions {
    /// Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as "/etc/secrets" and path as "/secret_foo" would mount the secret value file at "/etc/secrets/secret_foo".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Version of the secret (version number or the string "latest"). It is preferable to use "latest" version with secret volumes as secret value changes are reflected immediately.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Reference to a Bucket in storage to populate sourceArchiveBucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionInitProviderSourceArchiveBucketRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FunctionInitProviderSourceArchiveBucketRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionInitProviderSourceArchiveBucketRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FunctionInitProviderSourceArchiveBucketRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FunctionInitProviderSourceArchiveBucketRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionInitProviderSourceArchiveBucketRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionInitProviderSourceArchiveBucketRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in storage to populate sourceArchiveBucket.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionInitProviderSourceArchiveBucketSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FunctionInitProviderSourceArchiveBucketSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionInitProviderSourceArchiveBucketSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FunctionInitProviderSourceArchiveBucketSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FunctionInitProviderSourceArchiveBucketSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionInitProviderSourceArchiveBucketSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionInitProviderSourceArchiveBucketSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a BucketObject in storage to populate sourceArchiveObject.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionInitProviderSourceArchiveObjectRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FunctionInitProviderSourceArchiveObjectRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionInitProviderSourceArchiveObjectRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FunctionInitProviderSourceArchiveObjectRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FunctionInitProviderSourceArchiveObjectRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionInitProviderSourceArchiveObjectRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionInitProviderSourceArchiveObjectRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a BucketObject in storage to populate sourceArchiveObject.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionInitProviderSourceArchiveObjectSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FunctionInitProviderSourceArchiveObjectSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionInitProviderSourceArchiveObjectSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FunctionInitProviderSourceArchiveObjectSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FunctionInitProviderSourceArchiveObjectSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionInitProviderSourceArchiveObjectSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionInitProviderSourceArchiveObjectSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Represents parameters related to source repository where a function is hosted.
/// Cannot be set alongside source_archive_bucket or source_archive_object. Structure is documented below. It must match the pattern projects/{project}/locations/{location}/repositories/{repository}.*
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionInitProviderSourceRepository {
    /// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FunctionProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FunctionProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FunctionProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<FunctionPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<FunctionPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FunctionPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FunctionPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FunctionPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FunctionPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// FunctionStatus defines the observed state of Function.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<FunctionStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionStatusAtProvider {
    /// Memory (in MB), available to the function. Default value is 256. Possible values include 128, 256, 512, 1024, etc.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "availableMemoryMb")]
    pub available_memory_mb: Option<f64>,
    /// A set of key/value environment variable pairs available during build time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildEnvironmentVariables")]
    pub build_environment_variables: Option<HashMap<String, String>>,
    /// If provided, the self-provided service account to use to build the function. The format of this field is projects/{project}/serviceAccounts/{serviceAccountEmail}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildServiceAccount")]
    pub build_service_account: Option<String>,
    /// Name of the Cloud Build Custom Worker Pool that should be used to build the function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "buildWorkerPool")]
    pub build_worker_pool: Option<String>,
    /// Description of the function.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Docker Registry to use for storing the function's Docker images. Allowed values are ARTIFACT_REGISTRY (default) and CONTAINER_REGISTRY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dockerRegistry")]
    pub docker_registry: Option<String>,
    /// User-managed repository created in Artifact Registry to which the function's Docker image will be pushed after it is built by Cloud Build. May optionally be encrypted with a customer-managed encryption key (CMEK). If unspecified and docker_registry is not explicitly set to CONTAINER_REGISTRY, GCF will create and use a default Artifact Registry repository named 'gcf-artifacts' in the region.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dockerRepository")]
    pub docker_repository: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// Name of the function that will be executed when the Google Cloud Function is triggered.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entryPoint")]
    pub entry_point: Option<String>,
    /// A set of key/value environment variable pairs to assign to the function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "environmentVariables")]
    pub environment_variables: Option<HashMap<String, String>>,
    /// A source that fires events in response to a condition in another service. Structure is documented below. Cannot be used with trigger_http.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventTrigger")]
    pub event_trigger: Option<FunctionStatusAtProviderEventTrigger>,
    /// The security level for the function. The following options are available:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpsTriggerSecurityLevel")]
    pub https_trigger_security_level: Option<String>,
    /// URL which triggers function execution. Returned only if trigger_http is used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpsTriggerUrl")]
    pub https_trigger_url: Option<String>,
    /// an identifier for the resource with format {{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// String value that controls what traffic can reach the function. Allowed values are ALLOW_ALL, ALLOW_INTERNAL_AND_GCLB and ALLOW_INTERNAL_ONLY. Check ingress documentation to see the impact of each settings value. Changes to this field will recreate the cloud function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingressSettings")]
    pub ingress_settings: Option<String>,
    /// Resource name of a KMS crypto key (managed by the user) used to encrypt/decrypt function resources. It must match the pattern projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{crypto_key}.
    /// If specified, you must also provide an artifact registry repository using the docker_repository field that was created with the same KMS crypto key. Before deploying, please complete all pre-requisites described in https://cloud.google.com/functions/docs/securing/cmek#granting_service_accounts_access_to_the_key
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    pub kms_key_name: Option<String>,
    /// A set of key/value label pairs to assign to the function. Label keys must follow the requirements at https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The limit on the maximum number of function instances that may coexist at a given time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxInstances")]
    pub max_instances: Option<f64>,
    /// The limit on the minimum number of function instances that may coexist at a given time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minInstances")]
    pub min_instances: Option<f64>,
    /// Project of the function. If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Region of function. If it is not provided, the provider region is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The runtime in which the function is going to run.
    /// Eg. "nodejs16", "python39", "dotnet3", "go116", "java11", "ruby30", "php74", etc. Check the official doc for the up-to-date list.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub runtime: Option<String>,
    /// Secret environment variables configuration. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretEnvironmentVariables")]
    pub secret_environment_variables: Option<Vec<FunctionStatusAtProviderSecretEnvironmentVariables>>,
    /// Secret volumes configuration. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretVolumes")]
    pub secret_volumes: Option<Vec<FunctionStatusAtProviderSecretVolumes>>,
    /// If provided, the self-provided service account to run the function with.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serviceAccountEmail")]
    pub service_account_email: Option<String>,
    /// The GCS bucket containing the zip archive which contains the function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceArchiveBucket")]
    pub source_archive_bucket: Option<String>,
    /// The source archive object (file) in archive bucket.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceArchiveObject")]
    pub source_archive_object: Option<String>,
    /// Represents parameters related to source repository where a function is hosted.
    /// Cannot be set alongside source_archive_bucket or source_archive_object. Structure is documented below. It must match the pattern projects/{project}/locations/{location}/repositories/{repository}.*
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceRepository")]
    pub source_repository: Option<FunctionStatusAtProviderSourceRepository>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// The combination of labels configured directly on the resource and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// Timeout (in seconds) for the function. Default value is 60 seconds. Cannot be more than 540 seconds.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub timeout: Option<f64>,
    /// Boolean variable. Any HTTP request (of a supported type) to the endpoint will trigger function execution. Supported HTTP request types are: POST, PUT, GET, DELETE, and OPTIONS. Endpoint is returned as https_trigger_url. Cannot be used with event_trigger.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "triggerHttp")]
    pub trigger_http: Option<bool>,
    /// an identifier for the resource with format {{name}}
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionId")]
    pub version_id: Option<String>,
    /// The VPC Network Connector that this cloud function can connect to. It should be set up as fully-qualified URI. The format of this field is projects/*/locations/*/connectors/*.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConnector")]
    pub vpc_connector: Option<String>,
    /// The egress settings for the connector, controlling what traffic is diverted through it. Allowed values are ALL_TRAFFIC and PRIVATE_RANGES_ONLY. Defaults to PRIVATE_RANGES_ONLY. If unset, this field preserves the previously set value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConnectorEgressSettings")]
    pub vpc_connector_egress_settings: Option<String>,
}

/// A source that fires events in response to a condition in another service. Structure is documented below. Cannot be used with trigger_http.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionStatusAtProviderEventTrigger {
    /// The type of event to observe. For example: "google.storage.object.finalize".
    /// See the documentation on calling Cloud Functions for a
    /// full reference of accepted triggers.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventType")]
    pub event_type: Option<String>,
    /// Specifies policy for failed executions. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "failurePolicy")]
    pub failure_policy: Option<FunctionStatusAtProviderEventTriggerFailurePolicy>,
    /// Required. The name or partial URI of the resource from
    /// which to observe events. For example, "myBucket" or "projects/my-project/topics/my-topic"
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resource: Option<String>,
}

/// Specifies policy for failed executions. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionStatusAtProviderEventTriggerFailurePolicy {
    /// Whether the function should be retried on failure. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub retry: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionStatusAtProviderSecretEnvironmentVariables {
    /// Name of the environment variable.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function's project, assuming that the secret exists in the same project as of the function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    /// ID of the secret in secret manager (not the full resource name).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// Version of the secret (version number or the string "latest"). It is recommended to use a numeric version for secret environment variables as any updates to the secret value is not reflected until new clones start.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionStatusAtProviderSecretVolumes {
    /// The path within the container to mount the secret volume. For example, setting the mount_path as "/etc/secrets" would mount the secret value files under the "/etc/secrets" directory. This directory will also be completely shadowed and unavailable to mount any other secrets. Recommended mount paths: "/etc/secrets" Restricted mount paths: "/cloudsql", "/dev/log", "/pod", "/proc", "/var/log".
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mountPath")]
    pub mount_path: Option<String>,
    /// Project identifier (due to a known limitation, only project number is supported by this field) of the project that contains the secret. If not set, it will be populated with the function's project, assuming that the secret exists in the same project as of the function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectId")]
    pub project_id: Option<String>,
    /// ID of the secret in secret manager (not the full resource name).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub secret: Option<String>,
    /// List of secret versions to mount for this secret. If empty, the "latest" version of the secret will be made available in a file named after the secret under the mount point. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub versions: Option<Vec<FunctionStatusAtProviderSecretVolumesVersions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionStatusAtProviderSecretVolumesVersions {
    /// Relative path of the file under the mount path where the secret value for this version will be fetched and made available. For example, setting the mount_path as "/etc/secrets" and path as "/secret_foo" would mount the secret value file at "/etc/secrets/secret_foo".
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Version of the secret (version number or the string "latest"). It is preferable to use "latest" version with secret volumes as secret value changes are reflected immediately.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Represents parameters related to source repository where a function is hosted.
/// Cannot be set alongside source_archive_bucket or source_archive_object. Structure is documented below. It must match the pattern projects/{project}/locations/{location}/repositories/{repository}.*
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FunctionStatusAtProviderSourceRepository {
    /// The URL pointing to the hosted repository where the function was defined at the time of deployment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deployedUrl")]
    pub deployed_url: Option<String>,
    /// The URL pointing to the hosted repository where the function is defined. There are supported Cloud Source Repository URLs in the following formats:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}


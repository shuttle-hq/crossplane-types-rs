// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// A ProviderConfigSpec defines the desired state of a ProviderConfig.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "gcp.upbound.io", version = "v1beta1", kind = "ProviderConfig", plural = "providerconfigs")]
#[kube(status = "ProviderConfigStatus")]
pub struct ProviderConfigSpec {
    /// Credentials required to authenticate to this provider.
    pub credentials: ProviderConfigCredentials,
    /// ProjectID is the project name (not numerical ID) of this GCP ProviderConfig.
    #[serde(rename = "projectID")]
    pub project_id: String,
}

/// Credentials required to authenticate to this provider.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentials {
    /// Env is a reference to an environment variable that contains credentials
    /// that must be used to connect to the provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<ProviderConfigCredentialsEnv>,
    /// Fs is a reference to a filesystem location that contains credentials that
    /// must be used to connect to the provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fs: Option<ProviderConfigCredentialsFs>,
    /// Use GCP service account impersonation for authentication.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "impersonateServiceAccount")]
    pub impersonate_service_account: Option<ProviderConfigCredentialsImpersonateServiceAccount>,
    /// A SecretRef is a reference to a secret key that contains the credentials
    /// that must be used to connect to the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ProviderConfigCredentialsSecretRef>,
    /// Source of the provider credentials.
    pub source: ProviderConfigCredentialsSource,
    /// Upbound defines the options for authenticating using Upbound as an
    /// identity provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upbound: Option<ProviderConfigCredentialsUpbound>,
}

/// Env is a reference to an environment variable that contains credentials
/// that must be used to connect to the provider.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentialsEnv {
    /// Name is the name of an environment variable.
    pub name: String,
}

/// Fs is a reference to a filesystem location that contains credentials that
/// must be used to connect to the provider.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentialsFs {
    /// Path is a filesystem path.
    pub path: String,
}

/// Use GCP service account impersonation for authentication.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentialsImpersonateServiceAccount {
    /// GCP service account email address
    pub name: String,
}

/// A SecretRef is a reference to a secret key that contains the credentials
/// that must be used to connect to the provider.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentialsSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Credentials required to authenticate to this provider.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProviderConfigCredentialsSource {
    None,
    Secret,
    AccessToken,
    ImpersonateServiceAccount,
    InjectedIdentity,
    Environment,
    Filesystem,
    Upbound,
}

/// Upbound defines the options for authenticating using Upbound as an
/// identity provider.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentialsUpbound {
    /// Federation is the configuration for federated identity.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub federation: Option<ProviderConfigCredentialsUpboundFederation>,
}

/// Federation is the configuration for federated identity.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentialsUpboundFederation {
    /// ProviderID is the fully-qualified identifier for the identity provider on
    /// GCP. The format is
    /// `projects/<project-id>/locations/global/workloadIdentityPools/<identity-pool>/providers/<identity-provider>`.
    #[serde(rename = "providerID")]
    pub provider_id: String,
    /// ServiceAccount is the email address for the attached service account.
    #[serde(rename = "serviceAccount")]
    pub service_account: String,
}

/// A ProviderConfigStatus reflects the observed state of a ProviderConfig.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigStatus {
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// Users of this provider configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub users: Option<i64>,
}


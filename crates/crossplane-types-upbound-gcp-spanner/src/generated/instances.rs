// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// InstanceSpec defines the desired state of Instance
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "spanner.gcp.upbound.io", version = "v1beta2", kind = "Instance", plural = "instances")]
#[kube(status = "InstanceStatus")]
pub struct InstanceSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<InstanceDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: InstanceForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<InstanceInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<InstanceProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<InstancePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<InstanceWriteConnectionSecretToRef>,
}

/// InstanceSpec defines the desired state of Instance
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProvider {
    /// The autoscaling configuration. Autoscaling is enabled if this field is set.
    /// When autoscaling is enabled, num_nodes and processing_units are treated as,
    /// OUTPUT_ONLY fields and reflect the current compute capacity allocated to
    /// the instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingConfig")]
    pub autoscaling_config: Option<InstanceForProviderAutoscalingConfig>,
    /// The name of the instance's configuration (similar but not
    /// quite the same as a region) which defines the geographic placement and
    /// replication of your databases in this instance. It determines where your data
    /// is stored. Values are typically of the form regional-europe-west1 , us-central etc.
    /// In order to obtain a valid list please consult the
    /// Configuration section of the docs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<String>,
    /// Controls the default backup behavior for new databases within the instance.
    /// Note that AUTOMATIC is not permitted for free instances, as backups and backup schedules are not allowed for free instances.
    /// if unset or NONE, no default backup schedule will be created for new databases within the instance.
    /// Possible values are: NONE, AUTOMATIC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultBackupScheduleType")]
    pub default_backup_schedule_type: Option<String>,
    /// The descriptive name for this instance as it appears in UIs. Must be
    /// unique per project and between 4 and 30 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// When deleting a spanner instance, this boolean option will delete all backups of this instance.
    /// This must be set to true if you created a backup manually in the console.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDestroy")]
    pub force_destroy: Option<bool>,
    /// An object containing a list of "key": value pairs.
    /// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The number of nodes allocated to this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numNodes")]
    pub num_nodes: Option<f64>,
    /// The number of processing units allocated to this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingUnits")]
    pub processing_units: Option<f64>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

/// The autoscaling configuration. Autoscaling is enabled if this field is set.
/// When autoscaling is enabled, num_nodes and processing_units are treated as,
/// OUTPUT_ONLY fields and reflect the current compute capacity allocated to
/// the instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderAutoscalingConfig {
    /// Defines scale in controls to reduce the risk of response latency
    /// and outages due to abrupt scale-in events. Users can define the minimum and
    /// maximum compute capacity allocated to the instance, and the autoscaler will
    /// only scale within that range. Users can either use nodes or processing
    /// units to specify the limits, but should use the same unit to set both the
    /// min_limit and max_limit.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingLimits")]
    pub autoscaling_limits: Option<InstanceForProviderAutoscalingConfigAutoscalingLimits>,
    /// Defines scale in controls to reduce the risk of response latency
    /// and outages due to abrupt scale-in events
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingTargets")]
    pub autoscaling_targets: Option<InstanceForProviderAutoscalingConfigAutoscalingTargets>,
}

/// Defines scale in controls to reduce the risk of response latency
/// and outages due to abrupt scale-in events. Users can define the minimum and
/// maximum compute capacity allocated to the instance, and the autoscaler will
/// only scale within that range. Users can either use nodes or processing
/// units to specify the limits, but should use the same unit to set both the
/// min_limit and max_limit.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderAutoscalingConfigAutoscalingLimits {
    /// Specifies maximum number of nodes allocated to the instance. If set, this number
    /// should be greater than or equal to min_nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNodes")]
    pub max_nodes: Option<f64>,
    /// Specifies maximum number of processing units allocated to the instance.
    /// If set, this number should be multiples of 1000 and be greater than or equal to
    /// min_processing_units.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProcessingUnits")]
    pub max_processing_units: Option<f64>,
    /// Specifies number of nodes allocated to the instance. If set, this number
    /// should be greater than or equal to 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minNodes")]
    pub min_nodes: Option<f64>,
    /// Specifies minimum number of processing units allocated to the instance.
    /// If set, this number should be multiples of 1000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minProcessingUnits")]
    pub min_processing_units: Option<f64>,
}

/// Defines scale in controls to reduce the risk of response latency
/// and outages due to abrupt scale-in events
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceForProviderAutoscalingConfigAutoscalingTargets {
    /// Specifies the target high priority cpu utilization percentage that the autoscaler
    /// should be trying to achieve for the instance.
    /// This number is on a scale from 0 (no utilization) to 100 (full utilization)..
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "highPriorityCpuUtilizationPercent")]
    pub high_priority_cpu_utilization_percent: Option<f64>,
    /// Specifies the target storage utilization percentage that the autoscaler
    /// should be trying to achieve for the instance.
    /// This number is on a scale from 0 (no utilization) to 100 (full utilization).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageUtilizationPercent")]
    pub storage_utilization_percent: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProvider {
    /// The autoscaling configuration. Autoscaling is enabled if this field is set.
    /// When autoscaling is enabled, num_nodes and processing_units are treated as,
    /// OUTPUT_ONLY fields and reflect the current compute capacity allocated to
    /// the instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingConfig")]
    pub autoscaling_config: Option<InstanceInitProviderAutoscalingConfig>,
    /// The name of the instance's configuration (similar but not
    /// quite the same as a region) which defines the geographic placement and
    /// replication of your databases in this instance. It determines where your data
    /// is stored. Values are typically of the form regional-europe-west1 , us-central etc.
    /// In order to obtain a valid list please consult the
    /// Configuration section of the docs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<String>,
    /// Controls the default backup behavior for new databases within the instance.
    /// Note that AUTOMATIC is not permitted for free instances, as backups and backup schedules are not allowed for free instances.
    /// if unset or NONE, no default backup schedule will be created for new databases within the instance.
    /// Possible values are: NONE, AUTOMATIC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultBackupScheduleType")]
    pub default_backup_schedule_type: Option<String>,
    /// The descriptive name for this instance as it appears in UIs. Must be
    /// unique per project and between 4 and 30 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// When deleting a spanner instance, this boolean option will delete all backups of this instance.
    /// This must be set to true if you created a backup manually in the console.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDestroy")]
    pub force_destroy: Option<bool>,
    /// An object containing a list of "key": value pairs.
    /// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The number of nodes allocated to this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numNodes")]
    pub num_nodes: Option<f64>,
    /// The number of processing units allocated to this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingUnits")]
    pub processing_units: Option<f64>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

/// The autoscaling configuration. Autoscaling is enabled if this field is set.
/// When autoscaling is enabled, num_nodes and processing_units are treated as,
/// OUTPUT_ONLY fields and reflect the current compute capacity allocated to
/// the instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderAutoscalingConfig {
    /// Defines scale in controls to reduce the risk of response latency
    /// and outages due to abrupt scale-in events. Users can define the minimum and
    /// maximum compute capacity allocated to the instance, and the autoscaler will
    /// only scale within that range. Users can either use nodes or processing
    /// units to specify the limits, but should use the same unit to set both the
    /// min_limit and max_limit.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingLimits")]
    pub autoscaling_limits: Option<InstanceInitProviderAutoscalingConfigAutoscalingLimits>,
    /// Defines scale in controls to reduce the risk of response latency
    /// and outages due to abrupt scale-in events
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingTargets")]
    pub autoscaling_targets: Option<InstanceInitProviderAutoscalingConfigAutoscalingTargets>,
}

/// Defines scale in controls to reduce the risk of response latency
/// and outages due to abrupt scale-in events. Users can define the minimum and
/// maximum compute capacity allocated to the instance, and the autoscaler will
/// only scale within that range. Users can either use nodes or processing
/// units to specify the limits, but should use the same unit to set both the
/// min_limit and max_limit.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderAutoscalingConfigAutoscalingLimits {
    /// Specifies maximum number of nodes allocated to the instance. If set, this number
    /// should be greater than or equal to min_nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNodes")]
    pub max_nodes: Option<f64>,
    /// Specifies maximum number of processing units allocated to the instance.
    /// If set, this number should be multiples of 1000 and be greater than or equal to
    /// min_processing_units.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProcessingUnits")]
    pub max_processing_units: Option<f64>,
    /// Specifies number of nodes allocated to the instance. If set, this number
    /// should be greater than or equal to 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minNodes")]
    pub min_nodes: Option<f64>,
    /// Specifies minimum number of processing units allocated to the instance.
    /// If set, this number should be multiples of 1000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minProcessingUnits")]
    pub min_processing_units: Option<f64>,
}

/// Defines scale in controls to reduce the risk of response latency
/// and outages due to abrupt scale-in events
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceInitProviderAutoscalingConfigAutoscalingTargets {
    /// Specifies the target high priority cpu utilization percentage that the autoscaler
    /// should be trying to achieve for the instance.
    /// This number is on a scale from 0 (no utilization) to 100 (full utilization)..
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "highPriorityCpuUtilizationPercent")]
    pub high_priority_cpu_utilization_percent: Option<f64>,
    /// Specifies the target storage utilization percentage that the autoscaler
    /// should be trying to achieve for the instance.
    /// This number is on a scale from 0 (no utilization) to 100 (full utilization).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageUtilizationPercent")]
    pub storage_utilization_percent: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstanceProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstanceProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstanceProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstanceProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<InstancePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<InstancePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<InstancePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<InstancePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum InstancePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstancePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// InstanceStatus defines the observed state of Instance.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<InstanceStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProvider {
    /// The autoscaling configuration. Autoscaling is enabled if this field is set.
    /// When autoscaling is enabled, num_nodes and processing_units are treated as,
    /// OUTPUT_ONLY fields and reflect the current compute capacity allocated to
    /// the instance.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingConfig")]
    pub autoscaling_config: Option<InstanceStatusAtProviderAutoscalingConfig>,
    /// The name of the instance's configuration (similar but not
    /// quite the same as a region) which defines the geographic placement and
    /// replication of your databases in this instance. It determines where your data
    /// is stored. Values are typically of the form regional-europe-west1 , us-central etc.
    /// In order to obtain a valid list please consult the
    /// Configuration section of the docs.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub config: Option<String>,
    /// Controls the default backup behavior for new databases within the instance.
    /// Note that AUTOMATIC is not permitted for free instances, as backups and backup schedules are not allowed for free instances.
    /// if unset or NONE, no default backup schedule will be created for new databases within the instance.
    /// Possible values are: NONE, AUTOMATIC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultBackupScheduleType")]
    pub default_backup_schedule_type: Option<String>,
    /// The descriptive name for this instance as it appears in UIs. Must be
    /// unique per project and between 4 and 30 characters in length.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// When deleting a spanner instance, this boolean option will delete all backups of this instance.
    /// This must be set to true if you created a backup manually in the console.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "forceDestroy")]
    pub force_destroy: Option<bool>,
    /// an identifier for the resource with format {{project}}/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// An object containing a list of "key": value pairs.
    /// Example: { "name": "wrench", "mass": "1.3kg", "count": "3" }.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The number of nodes allocated to this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numNodes")]
    pub num_nodes: Option<f64>,
    /// The number of processing units allocated to this instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingUnits")]
    pub processing_units: Option<f64>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Instance status: CREATING or READY.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
}

/// The autoscaling configuration. Autoscaling is enabled if this field is set.
/// When autoscaling is enabled, num_nodes and processing_units are treated as,
/// OUTPUT_ONLY fields and reflect the current compute capacity allocated to
/// the instance.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderAutoscalingConfig {
    /// Defines scale in controls to reduce the risk of response latency
    /// and outages due to abrupt scale-in events. Users can define the minimum and
    /// maximum compute capacity allocated to the instance, and the autoscaler will
    /// only scale within that range. Users can either use nodes or processing
    /// units to specify the limits, but should use the same unit to set both the
    /// min_limit and max_limit.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingLimits")]
    pub autoscaling_limits: Option<InstanceStatusAtProviderAutoscalingConfigAutoscalingLimits>,
    /// Defines scale in controls to reduce the risk of response latency
    /// and outages due to abrupt scale-in events
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "autoscalingTargets")]
    pub autoscaling_targets: Option<InstanceStatusAtProviderAutoscalingConfigAutoscalingTargets>,
}

/// Defines scale in controls to reduce the risk of response latency
/// and outages due to abrupt scale-in events. Users can define the minimum and
/// maximum compute capacity allocated to the instance, and the autoscaler will
/// only scale within that range. Users can either use nodes or processing
/// units to specify the limits, but should use the same unit to set both the
/// min_limit and max_limit.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderAutoscalingConfigAutoscalingLimits {
    /// Specifies maximum number of nodes allocated to the instance. If set, this number
    /// should be greater than or equal to min_nodes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxNodes")]
    pub max_nodes: Option<f64>,
    /// Specifies maximum number of processing units allocated to the instance.
    /// If set, this number should be multiples of 1000 and be greater than or equal to
    /// min_processing_units.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxProcessingUnits")]
    pub max_processing_units: Option<f64>,
    /// Specifies number of nodes allocated to the instance. If set, this number
    /// should be greater than or equal to 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minNodes")]
    pub min_nodes: Option<f64>,
    /// Specifies minimum number of processing units allocated to the instance.
    /// If set, this number should be multiples of 1000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minProcessingUnits")]
    pub min_processing_units: Option<f64>,
}

/// Defines scale in controls to reduce the risk of response latency
/// and outages due to abrupt scale-in events
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct InstanceStatusAtProviderAutoscalingConfigAutoscalingTargets {
    /// Specifies the target high priority cpu utilization percentage that the autoscaler
    /// should be trying to achieve for the instance.
    /// This number is on a scale from 0 (no utilization) to 100 (full utilization)..
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "highPriorityCpuUtilizationPercent")]
    pub high_priority_cpu_utilization_percent: Option<f64>,
    /// Specifies the target storage utilization percentage that the autoscaler
    /// should be trying to achieve for the instance.
    /// This number is on a scale from 0 (no utilization) to 100 (full utilization).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "storageUtilizationPercent")]
    pub storage_utilization_percent: Option<f64>,
}


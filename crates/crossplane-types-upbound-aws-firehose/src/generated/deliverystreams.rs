// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// DeliveryStreamSpec defines the desired state of DeliveryStream
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "firehose.aws.upbound.io", version = "v1beta2", kind = "DeliveryStream", plural = "deliverystreams")]
#[kube(status = "DeliveryStreamStatus")]
pub struct DeliveryStreamSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<DeliveryStreamDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: DeliveryStreamForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<DeliveryStreamInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<DeliveryStreamProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<DeliveryStreamPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<DeliveryStreamWriteConnectionSecretToRef>,
}

/// DeliveryStreamSpec defines the desired state of DeliveryStream
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProvider {
    /// â€“  This is the destination to where the data is delivered. The only options are s3 (Deprecated, use extended_s3 instead), extended_s3, redshift, elasticsearch, splunk, http_endpoint, opensearch, opensearchserverless and snowflake.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationId")]
    pub destination_id: Option<String>,
    /// Configuration options when destination is elasticsearch. See elasticsearch_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticsearchConfiguration")]
    pub elasticsearch_configuration: Option<DeliveryStreamForProviderElasticsearchConfiguration>,
    /// Enhanced configuration options for the s3 destination. See extended_s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extendedS3Configuration")]
    pub extended_s3_configuration: Option<DeliveryStreamForProviderExtendedS3Configuration>,
    /// Configuration options when destination is http_endpoint. Requires the user to also specify an s3_configuration block.  See http_endpoint_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpEndpointConfiguration")]
    pub http_endpoint_configuration: Option<DeliveryStreamForProviderHttpEndpointConfiguration>,
    /// Configuration options when destination is iceberg. See iceberg_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icebergConfiguration")]
    pub iceberg_configuration: Option<DeliveryStreamForProviderIcebergConfiguration>,
    /// The stream and role Amazon Resource Names (ARNs) for a Kinesis data stream used as the source for a delivery stream. See kinesis_source_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kinesisSourceConfiguration")]
    pub kinesis_source_configuration: Option<DeliveryStreamForProviderKinesisSourceConfiguration>,
    /// The configuration for the Amazon MSK cluster to be used as the source for a delivery stream. See msk_source_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mskSourceConfiguration")]
    pub msk_source_configuration: Option<DeliveryStreamForProviderMskSourceConfiguration>,
    /// A name to identify the stream. This is unique to the AWS account and region the Stream is created in. When using for WAF logging, name must be prefixed with aws-waf-logs-. See AWS Documentation for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Configuration options when destination is opensearch. See opensearch_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "opensearchConfiguration")]
    pub opensearch_configuration: Option<DeliveryStreamForProviderOpensearchConfiguration>,
    /// Configuration options when destination is opensearchserverless. See opensearchserverless_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "opensearchserverlessConfiguration")]
    pub opensearchserverless_configuration: Option<DeliveryStreamForProviderOpensearchserverlessConfiguration>,
    /// Configuration options when destination is redshift. Requires the user to also specify an s3_configuration block. See redshift_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redshiftConfiguration")]
    pub redshift_configuration: Option<DeliveryStreamForProviderRedshiftConfiguration>,
    /// If you don't specify an AWS Region, the default is the current region.
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Encrypt at rest options. See server_side_encryption block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideEncryption")]
    pub server_side_encryption: Option<DeliveryStreamForProviderServerSideEncryption>,
    /// Configuration options when destination is snowflake. See snowflake_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snowflakeConfiguration")]
    pub snowflake_configuration: Option<DeliveryStreamForProviderSnowflakeConfiguration>,
    /// Configuration options when destination is splunk. See splunk_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "splunkConfiguration")]
    pub splunk_configuration: Option<DeliveryStreamForProviderSplunkConfiguration>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Specifies the table version for the output data schema. Defaults to LATEST.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionId")]
    pub version_id: Option<String>,
}

/// Configuration options when destination is elasticsearch. See elasticsearch_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfiguration {
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 300s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderElasticsearchConfigurationCloudwatchLoggingOptions>,
    /// The endpoint to use when communicating with the cluster. Conflicts with domain_arn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterEndpoint")]
    pub cluster_endpoint: Option<String>,
    /// The ARN of the Amazon ES domain.  The pattern needs to be arn:.*.  Conflicts with cluster_endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainArn")]
    pub domain_arn: Option<String>,
    /// Reference to a Domain in elasticsearch to populate domainArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainArnRef")]
    pub domain_arn_ref: Option<DeliveryStreamForProviderElasticsearchConfigurationDomainArnRef>,
    /// Selector for a Domain in elasticsearch to populate domainArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainArnSelector")]
    pub domain_arn_selector: Option<DeliveryStreamForProviderElasticsearchConfigurationDomainArnSelector>,
    /// The Elasticsearch index name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexName")]
    pub index_name: Option<String>,
    /// The Elasticsearch index rotation period.  Index rotation appends a timestamp to the IndexName to facilitate expiration of old data.  Valid values are NoRotation, OneHour, OneDay, OneWeek, and OneMonth.  The default value is OneDay.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexRotationPeriod")]
    pub index_rotation_period: Option<String>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamForProviderElasticsearchConfigurationProcessingConfiguration>,
    /// After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents.  The IAM role must have permission for DescribeElasticsearchDomain, DescribeElasticsearchDomains, and DescribeElasticsearchDomainConfig.  The pattern needs to be arn:.*.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderElasticsearchConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderElasticsearchConfigurationRoleArnSelector>,
    /// Defines how documents should be delivered to Amazon S3.  Valid values are FailedDocumentsOnly and AllDocuments.  Default value is FailedDocumentsOnly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamForProviderElasticsearchConfigurationS3Configuration>,
    /// The Elasticsearch type name with maximum length of 100 characters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typeName")]
    pub type_name: Option<String>,
    /// The VPC configuration for the delivery stream to connect to Elastic Search associated with the VPC. See vpc_config block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConfig")]
    pub vpc_config: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfig>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Domain in elasticsearch to populate domainArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationDomainArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderElasticsearchConfigurationDomainArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationDomainArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderElasticsearchConfigurationDomainArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderElasticsearchConfigurationDomainArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationDomainArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationDomainArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Domain in elasticsearch to populate domainArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationDomainArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderElasticsearchConfigurationDomainArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationDomainArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderElasticsearchConfigurationDomainArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderElasticsearchConfigurationDomainArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationDomainArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationDomainArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamForProviderElasticsearchConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamForProviderElasticsearchConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderElasticsearchConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderElasticsearchConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderElasticsearchConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderElasticsearchConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderElasticsearchConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderElasticsearchConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The S3 Configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationRoleArnSelector>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationS3ConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The VPC configuration for the delivery stream to connect to Elastic Search associated with the VPC. See vpc_config block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationVpcConfig {
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigRoleArnSelector>,
    /// A list of security group IDs to associate with Kinesis Firehose.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// References to SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIdsRefs")]
    pub security_group_ids_refs: Option<Vec<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIdsSelector")]
    pub security_group_ids_selector: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsSelector>,
    /// A list of subnet IDs to associate with Kinesis Firehose.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdsRefs")]
    pub subnet_ids_refs: Option<Vec<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSubnetIdsRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdsSelector")]
    pub subnet_ids_selector: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSubnetIdsSelector>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationVpcConfigRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationVpcConfigRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationVpcConfigRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationVpcConfigRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationVpcConfigRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationVpcConfigRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationVpcConfigRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationVpcConfigRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSubnetIdsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSubnetIdsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSubnetIdsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSubnetIdsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSubnetIdsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSubnetIdsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSubnetIdsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSubnetIdsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSubnetIdsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSubnetIdsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSubnetIdsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSubnetIdsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSubnetIdsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderElasticsearchConfigurationVpcConfigSubnetIdsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Enhanced configuration options for the s3 destination. See extended_s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamForProviderExtendedS3ConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamForProviderExtendedS3ConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderExtendedS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// The time zone you prefer. Valid values are UTC or a non-3-letter IANA time zones (for example, America/Los_Angeles). Default value is UTC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customTimeZone")]
    pub custom_time_zone: Option<String>,
    /// Nested argument for the serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. See data_format_conversion_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataFormatConversionConfiguration")]
    pub data_format_conversion_configuration: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfiguration>,
    /// The configuration for dynamic partitioning. Required when using dynamic partitioning. See dynamic_partitioning_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicPartitioningConfiguration")]
    pub dynamic_partitioning_configuration: Option<DeliveryStreamForProviderExtendedS3ConfigurationDynamicPartitioningConfiguration>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// The file extension to override the default file extension (for example, .json).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileExtension")]
    pub file_extension: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamForProviderExtendedS3ConfigurationProcessingConfiguration>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderExtendedS3ConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderExtendedS3ConfigurationRoleArnSelector>,
    /// The configuration for backup in Amazon S3. Required if s3_backup_mode is Enabled. Supports the same fields as s3_configuration object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupConfiguration")]
    pub s3_backup_configuration: Option<DeliveryStreamForProviderExtendedS3ConfigurationS3BackupConfiguration>,
    /// The Amazon S3 backup mode.  Valid values are Disabled and Enabled.  Default value is Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderExtendedS3ConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderExtendedS3ConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderExtendedS3ConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderExtendedS3ConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderExtendedS3ConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderExtendedS3ConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderExtendedS3ConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderExtendedS3ConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderExtendedS3ConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderExtendedS3ConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Nested argument for the serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. See data_format_conversion_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the deserializer that you want Kinesis Data Firehose to use to convert the format of your data from JSON. See input_format_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputFormatConfiguration")]
    pub input_format_configuration: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration>,
    /// Specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data to the Parquet or ORC format. See output_format_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputFormatConfiguration")]
    pub output_format_configuration: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration>,
    /// Specifies the AWS Glue Data Catalog table that contains the column information. See schema_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schemaConfiguration")]
    pub schema_configuration: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration>,
}

/// Specifies the deserializer that you want Kinesis Data Firehose to use to convert the format of your data from JSON. See input_format_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration {
    /// Specifies which deserializer to use. You can choose either the Apache Hive JSON SerDe or the OpenX JSON SerDe. See deserializer block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deserializer: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer>,
}

/// Specifies which deserializer to use. You can choose either the Apache Hive JSON SerDe or the OpenX JSON SerDe. See deserializer block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer {
    /// Specifies the native Hive / HCatalog JsonSerDe. More details below. See hive_json_ser_de block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hiveJsonSerDe")]
    pub hive_json_ser_de: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe>,
    /// Specifies the OpenX SerDe. See open_x_json_ser_de block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openXJsonSerDe")]
    pub open_x_json_ser_de: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe>,
}

/// Specifies the native Hive / HCatalog JsonSerDe. More details below. See hive_json_ser_de block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe {
    /// A list of how you want Kinesis Data Firehose to parse the date and time stamps that may be present in your input data JSON. To specify these format strings, follow the pattern syntax of JodaTime's DateTimeFormat format strings. For more information, see Class DateTimeFormat. You can also use the special value millis to parse time stamps in epoch milliseconds. If you don't specify a format, Kinesis Data Firehose uses java.sql.Timestamp::valueOf by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timestampFormats")]
    pub timestamp_formats: Option<Vec<String>>,
}

/// Specifies the OpenX SerDe. See open_x_json_ser_de block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe {
    /// When set to true, which is the default, Kinesis Data Firehose converts JSON keys to lowercase before deserializing them.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseInsensitive")]
    pub case_insensitive: Option<bool>,
    /// A map of column names to JSON keys that aren't identical to the column names. This is useful when the JSON contains keys that are Hive keywords. For example, timestamp is a Hive keyword. If you have a JSON key named timestamp, set this parameter to { ts = "timestamp" } to map this key to a column named ts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "columnToJsonKeyMappings")]
    pub column_to_json_key_mappings: Option<HashMap<String, String>>,
    /// When set to true, specifies that the names of the keys include dots and that you want Kinesis Data Firehose to replace them with underscores. This is useful because Apache Hive does not allow dots in column names. For example, if the JSON contains a key whose name is "a.b", you can define the column name to be "a_b" when using this option. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "convertDotsInJsonKeysToUnderscores")]
    pub convert_dots_in_json_keys_to_underscores: Option<bool>,
}

/// Specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data to the Parquet or ORC format. See output_format_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration {
    /// Specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. See serializer block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub serializer: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer>,
}

/// Specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. See serializer block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer {
    /// Specifies converting data to the ORC format before storing it in Amazon S3. For more information, see Apache ORC. See orc_ser_de block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orcSerDe")]
    pub orc_ser_de: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe>,
    /// Specifies converting data to the Parquet format before storing it in Amazon S3. For more information, see Apache Parquet. More details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parquetSerDe")]
    pub parquet_ser_de: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe>,
}

/// Specifies converting data to the ORC format before storing it in Amazon S3. For more information, see Apache ORC. See orc_ser_de block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe {
    /// The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockSizeBytes")]
    pub block_size_bytes: Option<f64>,
    /// A list of column names for which you want Kinesis Data Firehose to create bloom filters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bloomFilterColumns")]
    pub bloom_filter_columns: Option<Vec<String>>,
    /// The Bloom filter false positive probability (FPP). The lower the FPP, the bigger the Bloom filter. The default value is 0.05, the minimum is 0, and the maximum is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bloomFilterFalsePositiveProbability")]
    pub bloom_filter_false_positive_probability: Option<f64>,
    /// The compression code to use over data blocks. The possible values are UNCOMPRESSED, SNAPPY, and GZIP, with the default being SNAPPY. Use SNAPPY for higher decompression speed. Use GZIP if the compression ratio is more important than speed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression: Option<String>,
    /// A float that represents the fraction of the total number of non-null rows. To turn off dictionary encoding, set this fraction to a number that is less than the number of distinct keys in a dictionary. To always use dictionary encoding, set this threshold to 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dictionaryKeyThreshold")]
    pub dictionary_key_threshold: Option<f64>,
    /// Set this to true to indicate that you want stripes to be padded to the HDFS block boundaries. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePadding")]
    pub enable_padding: Option<bool>,
    /// The version of the file to write. The possible values are V0_11 and V0_12. The default is V0_12.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "formatVersion")]
    pub format_version: Option<String>,
    /// A float between 0 and 1 that defines the tolerance for block padding as a decimal fraction of stripe size. The default value is 0.05, which means 5 percent of stripe size. For the default values of 64 MiB ORC stripes and 256 MiB HDFS blocks, the default block padding tolerance of 5 percent reserves a maximum of 3.2 MiB for padding within the 256 MiB block. In such a case, if the available size within the block is more than 3.2 MiB, a new, smaller stripe is inserted to fit within that space. This ensures that no stripe crosses block boundaries and causes remote reads within a node-local task. Kinesis Data Firehose ignores this parameter when enable_padding is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "paddingTolerance")]
    pub padding_tolerance: Option<f64>,
    /// The number of rows between index entries. The default is 10000 and the minimum is 1000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rowIndexStride")]
    pub row_index_stride: Option<f64>,
    /// The number of bytes in each stripe. The default is 64 MiB and the minimum is 8 MiB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stripeSizeBytes")]
    pub stripe_size_bytes: Option<f64>,
}

/// Specifies converting data to the Parquet format before storing it in Amazon S3. For more information, see Apache Parquet. More details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe {
    /// The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockSizeBytes")]
    pub block_size_bytes: Option<f64>,
    /// The compression code to use over data blocks. The possible values are UNCOMPRESSED, SNAPPY, and GZIP, with the default being SNAPPY. Use SNAPPY for higher decompression speed. Use GZIP if the compression ratio is more important than speed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression: Option<String>,
    /// Indicates whether to enable dictionary compression.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDictionaryCompression")]
    pub enable_dictionary_compression: Option<bool>,
    /// The maximum amount of padding to apply. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPaddingBytes")]
    pub max_padding_bytes: Option<f64>,
    /// The Parquet page size. Column chunks are divided into pages. A page is conceptually an indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and the default is 1 MiB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pageSizeBytes")]
    pub page_size_bytes: Option<f64>,
    /// Indicates the version of row format to output. The possible values are V1 and V2. The default is V1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writerVersion")]
    pub writer_version: Option<String>,
}

/// Specifies the AWS Glue Data Catalog table that contains the column information. See schema_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration {
    /// The ID of the AWS Glue Data Catalog. If you don't supply this, the AWS account ID is used by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogId")]
    pub catalog_id: Option<String>,
    /// Specifies the name of the AWS Glue database that contains the schema for the output data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseName")]
    pub database_name: Option<String>,
    /// If you don't specify an AWS Region, the default is the current region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnSelector>,
    /// Specifies the AWS Glue table that contains the column information that constitutes your data schema.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    pub table_name: Option<String>,
    /// Reference to a CatalogTable in glue to populate tableName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableNameRef")]
    pub table_name_ref: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameRef>,
    /// Selector for a CatalogTable in glue to populate tableName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableNameSelector")]
    pub table_name_selector: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameSelector>,
    /// Specifies the table version for the output data schema. Defaults to LATEST.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionId")]
    pub version_id: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a CatalogTable in glue to populate tableName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CatalogTable in glue to populate tableName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The configuration for dynamic partitioning. Required when using dynamic partitioning. See dynamic_partitioning_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationDynamicPartitioningConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamForProviderExtendedS3ConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamForProviderExtendedS3ConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderExtendedS3ConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderExtendedS3ConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderExtendedS3ConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderExtendedS3ConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderExtendedS3ConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderExtendedS3ConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderExtendedS3ConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderExtendedS3ConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderExtendedS3ConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderExtendedS3ConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The configuration for backup in Amazon S3. Required if s3_backup_mode is Enabled. Supports the same fields as s3_configuration object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationS3BackupConfiguration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Configuration options when destination is http_endpoint. Requires the user to also specify an s3_configuration block.  See http_endpoint_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfiguration {
    /// The access key required for Kinesis Firehose to authenticate with the HTTP endpoint selected as the destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeySecretRef")]
    pub access_key_secret_ref: Option<DeliveryStreamForProviderHttpEndpointConfigurationAccessKeySecretRef>,
    /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderHttpEndpointConfigurationCloudwatchLoggingOptions>,
    /// The HTTP endpoint name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamForProviderHttpEndpointConfigurationProcessingConfiguration>,
    /// The request configuration.  See request_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestConfiguration")]
    pub request_configuration: Option<DeliveryStreamForProviderHttpEndpointConfigurationRequestConfiguration>,
    /// Total amount of seconds Firehose spends on retries. This duration starts after the initial attempt fails, It does not include the time periods during which Firehose waits for acknowledgment from the specified destination after each attempt. Valid values between 0 and 7200. Default is 300.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// Kinesis Data Firehose uses this IAM role for all the permissions that the delivery stream needs. The pattern needs to be arn:.*.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderHttpEndpointConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderHttpEndpointConfigurationRoleArnSelector>,
    /// Defines how documents should be delivered to Amazon S3.  Valid values are FailedDataOnly and AllData.  Default value is FailedDataOnly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamForProviderHttpEndpointConfigurationS3Configuration>,
    /// The Secret Manager Configuration. See secrets_manager_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerConfiguration")]
    pub secrets_manager_configuration: Option<DeliveryStreamForProviderHttpEndpointConfigurationSecretsManagerConfiguration>,
    /// The HTTP endpoint URL to which Kinesis Firehose sends your data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// The access key required for Kinesis Firehose to authenticate with the HTTP endpoint selected as the destination.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationAccessKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamForProviderHttpEndpointConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamForProviderHttpEndpointConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// The request configuration.  See request_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationRequestConfiguration {
    /// Describes the metadata sent to the HTTP endpoint destination. See common_attributes block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAttributes")]
    pub common_attributes: Option<Vec<DeliveryStreamForProviderHttpEndpointConfigurationRequestConfigurationCommonAttributes>>,
    /// Kinesis Data Firehose uses the content encoding to compress the body of a request before sending the request to the destination. Valid values are NONE and GZIP.  Default value is NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentEncoding")]
    pub content_encoding: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationRequestConfigurationCommonAttributes {
    /// The name of the HTTP endpoint common attribute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The value of the HTTP endpoint common attribute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderHttpEndpointConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderHttpEndpointConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderHttpEndpointConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderHttpEndpointConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderHttpEndpointConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderHttpEndpointConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderHttpEndpointConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderHttpEndpointConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderHttpEndpointConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderHttpEndpointConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The S3 Configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationRoleArnSelector>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderHttpEndpointConfigurationS3ConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The Secret Manager Configuration. See secrets_manager_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderHttpEndpointConfigurationSecretsManagerConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// The ARN of the Secrets Manager secret. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    pub secret_arn: Option<String>,
}

/// Configuration options when destination is iceberg. See iceberg_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfiguration {
    /// Buffer incoming data for the specified period of time, in seconds between 0 and 900, before delivering it to the destination. The default value is 300.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 and 128, before delivering it to the destination. The default value is 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// Glue catalog ARN identifier of the destination Apache Iceberg Tables. You must specify the ARN in the format arn:aws:glue:region:account-id:catalog
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogArn")]
    pub catalog_arn: Option<String>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderIcebergConfigurationCloudwatchLoggingOptions>,
    /// Destination table configurations which Firehose uses to deliver data to Apache Iceberg Tables. Firehose will write data with insert if table specific configuration is not provided. See destination_table_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationTableConfiguration")]
    pub destination_table_configuration: Option<Vec<DeliveryStreamForProviderIcebergConfigurationDestinationTableConfiguration>>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamForProviderIcebergConfigurationProcessingConfiguration>,
    /// The period of time, in seconds between 0 to 7200, during which Firehose retries to deliver data to the specified destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// The ARN of the IAM role to be assumed by Firehose for calling Apache Iceberg Tables.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderIcebergConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderIcebergConfigurationRoleArnSelector>,
    /// Defines how documents should be delivered to Amazon S3.  Valid values are FailedEventsOnly and AllEvents.  Default value is FailedEventsOnly.
    /// secrets_manager_configuration -  The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if hec_token is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamForProviderIcebergConfigurationS3Configuration>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationDestinationTableConfiguration {
    /// Specifies the name of the AWS Glue database that contains the schema for the output data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseName")]
    pub database_name: Option<String>,
    /// Reference to a CatalogDatabase in glue to populate databaseName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseNameRef")]
    pub database_name_ref: Option<DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameRef>,
    /// Selector for a CatalogDatabase in glue to populate databaseName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseNameSelector")]
    pub database_name_selector: Option<DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameSelector>,
    /// The table specific S3 error output prefix. All the errors that occurred while delivering to this table will be prefixed with this value in S3 destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3ErrorOutputPrefix")]
    pub s3_error_output_prefix: Option<String>,
    /// Specifies the AWS Glue table that contains the column information that constitutes your data schema.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    pub table_name: Option<String>,
    /// Reference to a CatalogTable in glue to populate tableName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableNameRef")]
    pub table_name_ref: Option<DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationTableNameRef>,
    /// Selector for a CatalogTable in glue to populate tableName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableNameSelector")]
    pub table_name_selector: Option<DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationTableNameSelector>,
    /// A list of unique keys for a given Apache Iceberg table. Firehose will use these for running Create, Update, or Delete operations on the given Iceberg table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uniqueKeys")]
    pub unique_keys: Option<Vec<String>>,
}

/// Reference to a CatalogDatabase in glue to populate databaseName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CatalogDatabase in glue to populate databaseName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a CatalogTable in glue to populate tableName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationTableNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationTableNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationTableNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationTableNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationTableNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationTableNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationTableNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CatalogTable in glue to populate tableName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationTableNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationTableNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationTableNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationTableNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationTableNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationTableNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationDestinationTableConfigurationTableNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamForProviderIcebergConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamForProviderIcebergConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderIcebergConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderIcebergConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderIcebergConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderIcebergConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderIcebergConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderIcebergConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The S3 Configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamForProviderIcebergConfigurationS3ConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamForProviderIcebergConfigurationS3ConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderIcebergConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderIcebergConfigurationS3ConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderIcebergConfigurationS3ConfigurationRoleArnSelector>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationS3ConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderIcebergConfigurationS3ConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationS3ConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderIcebergConfigurationS3ConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderIcebergConfigurationS3ConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationS3ConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationS3ConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationS3ConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderIcebergConfigurationS3ConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationS3ConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderIcebergConfigurationS3ConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderIcebergConfigurationS3ConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationS3ConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationS3ConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationS3ConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderIcebergConfigurationS3ConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationS3ConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderIcebergConfigurationS3ConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderIcebergConfigurationS3ConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationS3ConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationS3ConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationS3ConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderIcebergConfigurationS3ConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderIcebergConfigurationS3ConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderIcebergConfigurationS3ConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderIcebergConfigurationS3ConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationS3ConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderIcebergConfigurationS3ConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The stream and role Amazon Resource Names (ARNs) for a Kinesis data stream used as the source for a delivery stream. See kinesis_source_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderKinesisSourceConfiguration {
    /// The kinesis stream used as the source of the firehose delivery stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kinesisStreamArn")]
    pub kinesis_stream_arn: Option<String>,
    /// The ARN of the role that provides access to the source Kinesis stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The configuration for the Amazon MSK cluster to be used as the source for a delivery stream. See msk_source_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderMskSourceConfiguration {
    /// The authentication configuration of the Amazon MSK cluster. See authentication_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationConfiguration")]
    pub authentication_configuration: Option<DeliveryStreamForProviderMskSourceConfigurationAuthenticationConfiguration>,
    /// The ARN of the Amazon MSK cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mskClusterArn")]
    pub msk_cluster_arn: Option<String>,
    /// The topic name within the Amazon MSK cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topicName")]
    pub topic_name: Option<String>,
}

/// The authentication configuration of the Amazon MSK cluster. See authentication_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderMskSourceConfigurationAuthenticationConfiguration {
    /// The type of connectivity used to access the Amazon MSK cluster. Valid values: PUBLIC, PRIVATE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connectivity: Option<String>,
    /// The ARN of the role used to access the Amazon MSK cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// Configuration options when destination is opensearch. See opensearch_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfiguration {
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 300s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderOpensearchConfigurationCloudwatchLoggingOptions>,
    /// The endpoint to use when communicating with the cluster. Conflicts with domain_arn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterEndpoint")]
    pub cluster_endpoint: Option<String>,
    /// The method for setting up document ID. See [document_id_options block] below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentIdOptions")]
    pub document_id_options: Option<DeliveryStreamForProviderOpensearchConfigurationDocumentIdOptions>,
    /// The ARN of the Amazon ES domain.  The pattern needs to be arn:.*.  Conflicts with cluster_endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainArn")]
    pub domain_arn: Option<String>,
    /// Reference to a Domain in opensearch to populate domainArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainArnRef")]
    pub domain_arn_ref: Option<DeliveryStreamForProviderOpensearchConfigurationDomainArnRef>,
    /// Selector for a Domain in opensearch to populate domainArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainArnSelector")]
    pub domain_arn_selector: Option<DeliveryStreamForProviderOpensearchConfigurationDomainArnSelector>,
    /// The OpenSearch index name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexName")]
    pub index_name: Option<String>,
    /// The OpenSearch index rotation period.  Index rotation appends a timestamp to the IndexName to facilitate expiration of old data.  Valid values are NoRotation, OneHour, OneDay, OneWeek, and OneMonth.  The default value is OneDay.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexRotationPeriod")]
    pub index_rotation_period: Option<String>,
    /// The data processing configuration. See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamForProviderOpensearchConfigurationProcessingConfiguration>,
    /// After an initial failure to deliver to Amazon OpenSearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents.  The IAM role must have permission for DescribeDomain, DescribeDomains, and DescribeDomainConfig.  The pattern needs to be arn:.*.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderOpensearchConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderOpensearchConfigurationRoleArnSelector>,
    /// Defines how documents should be delivered to Amazon S3.  Valid values are FailedDocumentsOnly and AllDocuments.  Default value is FailedDocumentsOnly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamForProviderOpensearchConfigurationS3Configuration>,
    /// The Elasticsearch type name with maximum length of 100 characters. Types are deprecated in OpenSearch_1.1. TypeName must be empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typeName")]
    pub type_name: Option<String>,
    /// The VPC configuration for the delivery stream to connect to OpenSearch associated with the VPC. See vpc_config block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConfig")]
    pub vpc_config: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfig>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The method for setting up document ID. See [document_id_options block] below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationDocumentIdOptions {
    /// The method for setting up document ID. Valid values: FIREHOSE_DEFAULT, NO_DOCUMENT_ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultDocumentIdFormat")]
    pub default_document_id_format: Option<String>,
}

/// Reference to a Domain in opensearch to populate domainArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationDomainArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchConfigurationDomainArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationDomainArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchConfigurationDomainArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchConfigurationDomainArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationDomainArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationDomainArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Domain in opensearch to populate domainArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationDomainArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchConfigurationDomainArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationDomainArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchConfigurationDomainArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchConfigurationDomainArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationDomainArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationDomainArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The data processing configuration. See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamForProviderOpensearchConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamForProviderOpensearchConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The S3 Configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationRoleArnSelector>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationS3ConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The VPC configuration for the delivery stream to connect to OpenSearch associated with the VPC. See vpc_config block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationVpcConfig {
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigRoleArnSelector>,
    /// A list of security group IDs to associate with Kinesis Firehose.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// References to SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIdsRefs")]
    pub security_group_ids_refs: Option<Vec<DeliveryStreamForProviderOpensearchConfigurationVpcConfigSecurityGroupIdsRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIdsSelector")]
    pub security_group_ids_selector: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigSecurityGroupIdsSelector>,
    /// A list of subnet IDs to associate with Kinesis Firehose.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdsRefs")]
    pub subnet_ids_refs: Option<Vec<DeliveryStreamForProviderOpensearchConfigurationVpcConfigSubnetIdsRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdsSelector")]
    pub subnet_ids_selector: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigSubnetIdsSelector>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationVpcConfigRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationVpcConfigRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationVpcConfigRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationVpcConfigRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationVpcConfigRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationVpcConfigRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationVpcConfigRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationVpcConfigRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationVpcConfigSecurityGroupIdsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigSecurityGroupIdsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationVpcConfigSecurityGroupIdsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigSecurityGroupIdsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigSecurityGroupIdsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationVpcConfigSecurityGroupIdsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationVpcConfigSecurityGroupIdsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationVpcConfigSecurityGroupIdsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationVpcConfigSubnetIdsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigSubnetIdsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationVpcConfigSubnetIdsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigSubnetIdsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigSubnetIdsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationVpcConfigSubnetIdsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationVpcConfigSubnetIdsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationVpcConfigSubnetIdsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigSubnetIdsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchConfigurationVpcConfigSubnetIdsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigSubnetIdsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchConfigurationVpcConfigSubnetIdsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationVpcConfigSubnetIdsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchConfigurationVpcConfigSubnetIdsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration options when destination is opensearchserverless. See opensearchserverless_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfiguration {
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 300s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationCloudwatchLoggingOptions>,
    /// The endpoint to use when communicating with the collection in the Serverless offering for Amazon OpenSearch Service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectionEndpoint")]
    pub collection_endpoint: Option<String>,
    /// Reference to a Collection in opensearchserverless to populate collectionEndpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectionEndpointRef")]
    pub collection_endpoint_ref: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationCollectionEndpointRef>,
    /// Selector for a Collection in opensearchserverless to populate collectionEndpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectionEndpointSelector")]
    pub collection_endpoint_selector: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationCollectionEndpointSelector>,
    /// The Serverless offering for Amazon OpenSearch Service index name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexName")]
    pub index_name: Option<String>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationProcessingConfiguration>,
    /// After an initial failure to deliver to the Serverless offering for Amazon OpenSearch Service, the total amount of time, in seconds between 0 to 7200, during which Kinesis Data Firehose retries delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// The Amazon Resource Name (ARN) of the IAM role to be assumed by Kinesis Data Firehose for calling the Serverless offering for Amazon OpenSearch Service Configuration API and for indexing documents.  The pattern needs to be arn:.*.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationRoleArnSelector>,
    /// Defines how documents should be delivered to Amazon S3.  Valid values are FailedDocumentsOnly and AllDocuments.  Default value is FailedDocumentsOnly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationS3Configuration>,
    /// The VPC configuration for the delivery stream to connect to OpenSearch Serverless associated with the VPC. See vpc_config block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConfig")]
    pub vpc_config: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationVpcConfig>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Collection in opensearchserverless to populate collectionEndpoint.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationCollectionEndpointRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationCollectionEndpointRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationCollectionEndpointRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationCollectionEndpointRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationCollectionEndpointRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchserverlessConfigurationCollectionEndpointRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchserverlessConfigurationCollectionEndpointRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Collection in opensearchserverless to populate collectionEndpoint.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationCollectionEndpointSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationCollectionEndpointSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationCollectionEndpointSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationCollectionEndpointSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationCollectionEndpointSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchserverlessConfigurationCollectionEndpointSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchserverlessConfigurationCollectionEndpointSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamForProviderOpensearchserverlessConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamForProviderOpensearchserverlessConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchserverlessConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchserverlessConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchserverlessConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchserverlessConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The S3 Configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnSelector>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The VPC configuration for the delivery stream to connect to OpenSearch Serverless associated with the VPC. See vpc_config block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderOpensearchserverlessConfigurationVpcConfig {
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// A list of security group IDs to associate with Kinesis Firehose.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// A list of subnet IDs to associate with Kinesis Firehose.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
}

/// Configuration options when destination is redshift. Requires the user to also specify an s3_configuration block. See redshift_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfiguration {
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderRedshiftConfigurationCloudwatchLoggingOptions>,
    /// The jdbcurl of the redshift cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterJdbcurl")]
    pub cluster_jdbcurl: Option<String>,
    /// Copy options for copying the data from the s3 intermediate bucket into redshift, for example to change the default delimiter. For valid values, see the AWS documentation
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyOptions")]
    pub copy_options: Option<String>,
    /// The data table columns that will be targeted by the copy command.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataTableColumns")]
    pub data_table_columns: Option<String>,
    /// The name of the table in the redshift cluster that the s3 bucket will copy to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataTableName")]
    pub data_table_name: Option<String>,
    /// The password for the username above. This value is required if secrets_manager_configuration is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretRef")]
    pub password_secret_ref: Option<DeliveryStreamForProviderRedshiftConfigurationPasswordSecretRef>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamForProviderRedshiftConfigurationProcessingConfiguration>,
    /// The length of time during which Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Firehose does not retry if the value of DurationInSeconds is 0 (zero) or if the first delivery attempt takes longer than the current value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// The arn of the role the stream assumes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderRedshiftConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderRedshiftConfigurationRoleArnSelector>,
    /// The configuration for backup in Amazon S3. Required if s3_backup_mode is Enabled. Supports the same fields as s3_configuration object.
    /// secrets_manager_configuration -  The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if username and password are not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupConfiguration")]
    pub s3_backup_configuration: Option<DeliveryStreamForProviderRedshiftConfigurationS3BackupConfiguration>,
    /// The Amazon S3 backup mode.  Valid values are Disabled and Enabled.  Default value is Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamForProviderRedshiftConfigurationS3Configuration>,
    /// The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if user and private_key are not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerConfiguration")]
    pub secrets_manager_configuration: Option<DeliveryStreamForProviderRedshiftConfigurationSecretsManagerConfiguration>,
    /// The username that the firehose delivery stream will assume. It is strongly recommended that the username and password provided is used exclusively for Amazon Kinesis Firehose purposes, and that the permissions for the account are restricted for Amazon Redshift INSERT permissions. This value is required if secrets_manager_configuration is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The password for the username above. This value is required if secrets_manager_configuration is not provided.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamForProviderRedshiftConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamForProviderRedshiftConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderRedshiftConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderRedshiftConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderRedshiftConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderRedshiftConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderRedshiftConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderRedshiftConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The configuration for backup in Amazon S3. Required if s3_backup_mode is Enabled. Supports the same fields as s3_configuration object.
/// secrets_manager_configuration -  The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if username and password are not provided.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3BackupConfiguration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationRoleArnSelector>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationS3BackupConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The S3 Configuration. See s3_configuration below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationRoleArnSelector>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderRedshiftConfigurationS3ConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if user and private_key are not provided.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderRedshiftConfigurationSecretsManagerConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// The ARN of the Secrets Manager secret. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    pub secret_arn: Option<String>,
}

/// Encrypt at rest options. See server_side_encryption block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderServerSideEncryption {
    /// Whether to enable encryption at rest. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Amazon Resource Name (ARN) of the encryption key. Required when key_type is CUSTOMER_MANAGED_CMK.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyArn")]
    pub key_arn: Option<String>,
    /// Type of encryption key. Default is AWS_OWNED_CMK. Valid values are AWS_OWNED_CMK and CUSTOMER_MANAGED_CMK
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyType")]
    pub key_type: Option<String>,
}

/// Configuration options when destination is snowflake. See snowflake_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfiguration {
    /// The URL of the Snowflake account. Format: https://[account_identifier].snowflakecomputing.com.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountUrl")]
    pub account_url: Option<String>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 0s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 128, before delivering it to the destination.  The default value is 1MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderSnowflakeConfigurationCloudwatchLoggingOptions>,
    /// The name of the content column.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentColumnName")]
    pub content_column_name: Option<String>,
    /// The data loading option.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataLoadingOption")]
    pub data_loading_option: Option<String>,
    /// The Snowflake database name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    /// The passphrase for the private key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyPassphraseSecretRef")]
    pub key_passphrase_secret_ref: Option<DeliveryStreamForProviderSnowflakeConfigurationKeyPassphraseSecretRef>,
    /// The name of the metadata column.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataColumnName")]
    pub metadata_column_name: Option<String>,
    /// The private key for authentication. This value is required if secrets_manager_configuration is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKeySecretRef")]
    pub private_key_secret_ref: Option<DeliveryStreamForProviderSnowflakeConfigurationPrivateKeySecretRef>,
    /// The processing configuration. See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamForProviderSnowflakeConfigurationProcessingConfiguration>,
    /// After an initial failure to deliver to Snowflake, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 60s.  There will be no retry if the value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// The ARN of the IAM role.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderSnowflakeConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderSnowflakeConfigurationRoleArnSelector>,
    /// The S3 backup mode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamForProviderSnowflakeConfigurationS3Configuration>,
    /// The Snowflake schema name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
    /// The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if user and private_key are not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerConfiguration")]
    pub secrets_manager_configuration: Option<DeliveryStreamForProviderSnowflakeConfigurationSecretsManagerConfiguration>,
    /// The configuration for Snowflake role.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snowflakeRoleConfiguration")]
    pub snowflake_role_configuration: Option<DeliveryStreamForProviderSnowflakeConfigurationSnowflakeRoleConfiguration>,
    /// The VPC configuration for Snowflake.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snowflakeVpcConfiguration")]
    pub snowflake_vpc_configuration: Option<DeliveryStreamForProviderSnowflakeConfigurationSnowflakeVpcConfiguration>,
    /// The Snowflake table name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub table: Option<String>,
    /// The user for authentication. This value is required if secrets_manager_configuration is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The passphrase for the private key.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationKeyPassphraseSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// The private key for authentication. This value is required if secrets_manager_configuration is not provided.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationPrivateKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// The processing configuration. See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamForProviderSnowflakeConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamForProviderSnowflakeConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderSnowflakeConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderSnowflakeConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderSnowflakeConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSnowflakeConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSnowflakeConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderSnowflakeConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderSnowflakeConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderSnowflakeConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSnowflakeConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSnowflakeConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The S3 configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationRoleArnSelector>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSnowflakeConfigurationS3ConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if user and private_key are not provided.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationSecretsManagerConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// The ARN of the Secrets Manager secret. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    pub secret_arn: Option<String>,
}

/// The configuration for Snowflake role.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationSnowflakeRoleConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The Snowflake role.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snowflakeRole")]
    pub snowflake_role: Option<String>,
}

/// The VPC configuration for Snowflake.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSnowflakeConfigurationSnowflakeVpcConfiguration {
    /// The VPCE ID for Firehose to privately connect with Snowflake.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateLinkVpceId")]
    pub private_link_vpce_id: Option<String>,
}

/// Configuration options when destination is splunk. See splunk_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSplunkConfiguration {
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderSplunkConfigurationCloudwatchLoggingOptions>,
    /// The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hecAcknowledgmentTimeout")]
    pub hec_acknowledgment_timeout: Option<f64>,
    /// The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hecEndpoint")]
    pub hec_endpoint: Option<String>,
    /// The HEC endpoint type. Valid values are Raw or Event. The default value is Raw.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hecEndpointType")]
    pub hec_endpoint_type: Option<String>,
    /// The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint. This value is required if secrets_manager_configuration is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hecTokenSecretRef")]
    pub hec_token_secret_ref: Option<DeliveryStreamForProviderSplunkConfigurationHecTokenSecretRef>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamForProviderSplunkConfigurationProcessingConfiguration>,
    /// After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// Defines how documents should be delivered to Amazon S3.  Valid values are FailedEventsOnly and AllEvents.  Default value is FailedEventsOnly.
    /// secrets_manager_configuration -  The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if hec_token is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamForProviderSplunkConfigurationS3Configuration>,
    /// The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if user and private_key are not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerConfiguration")]
    pub secrets_manager_configuration: Option<DeliveryStreamForProviderSplunkConfigurationSecretsManagerConfiguration>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSplunkConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint. This value is required if secrets_manager_configuration is not provided.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSplunkConfigurationHecTokenSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSplunkConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamForProviderSplunkConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSplunkConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamForProviderSplunkConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSplunkConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// The S3 Configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSplunkConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamForProviderSplunkConfigurationS3ConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamForProviderSplunkConfigurationS3ConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamForProviderSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamForProviderSplunkConfigurationS3ConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamForProviderSplunkConfigurationS3ConfigurationRoleArnSelector>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSplunkConfigurationS3ConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderSplunkConfigurationS3ConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSplunkConfigurationS3ConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderSplunkConfigurationS3ConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderSplunkConfigurationS3ConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSplunkConfigurationS3ConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSplunkConfigurationS3ConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSplunkConfigurationS3ConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderSplunkConfigurationS3ConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSplunkConfigurationS3ConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderSplunkConfigurationS3ConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderSplunkConfigurationS3ConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSplunkConfigurationS3ConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSplunkConfigurationS3ConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSplunkConfigurationS3ConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderSplunkConfigurationS3ConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSplunkConfigurationS3ConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderSplunkConfigurationS3ConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderSplunkConfigurationS3ConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSplunkConfigurationS3ConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSplunkConfigurationS3ConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSplunkConfigurationS3ConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamForProviderSplunkConfigurationS3ConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSplunkConfigurationS3ConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamForProviderSplunkConfigurationS3ConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamForProviderSplunkConfigurationS3ConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSplunkConfigurationS3ConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamForProviderSplunkConfigurationS3ConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if user and private_key are not provided.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamForProviderSplunkConfigurationSecretsManagerConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// The ARN of the Secrets Manager secret. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    pub secret_arn: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProvider {
    /// â€“  This is the destination to where the data is delivered. The only options are s3 (Deprecated, use extended_s3 instead), extended_s3, redshift, elasticsearch, splunk, http_endpoint, opensearch, opensearchserverless and snowflake.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationId")]
    pub destination_id: Option<String>,
    /// Configuration options when destination is elasticsearch. See elasticsearch_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticsearchConfiguration")]
    pub elasticsearch_configuration: Option<DeliveryStreamInitProviderElasticsearchConfiguration>,
    /// Enhanced configuration options for the s3 destination. See extended_s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extendedS3Configuration")]
    pub extended_s3_configuration: Option<DeliveryStreamInitProviderExtendedS3Configuration>,
    /// Configuration options when destination is http_endpoint. Requires the user to also specify an s3_configuration block.  See http_endpoint_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpEndpointConfiguration")]
    pub http_endpoint_configuration: Option<DeliveryStreamInitProviderHttpEndpointConfiguration>,
    /// Configuration options when destination is iceberg. See iceberg_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icebergConfiguration")]
    pub iceberg_configuration: Option<DeliveryStreamInitProviderIcebergConfiguration>,
    /// The stream and role Amazon Resource Names (ARNs) for a Kinesis data stream used as the source for a delivery stream. See kinesis_source_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kinesisSourceConfiguration")]
    pub kinesis_source_configuration: Option<DeliveryStreamInitProviderKinesisSourceConfiguration>,
    /// The configuration for the Amazon MSK cluster to be used as the source for a delivery stream. See msk_source_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mskSourceConfiguration")]
    pub msk_source_configuration: Option<DeliveryStreamInitProviderMskSourceConfiguration>,
    /// A name to identify the stream. This is unique to the AWS account and region the Stream is created in. When using for WAF logging, name must be prefixed with aws-waf-logs-. See AWS Documentation for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Configuration options when destination is opensearch. See opensearch_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "opensearchConfiguration")]
    pub opensearch_configuration: Option<DeliveryStreamInitProviderOpensearchConfiguration>,
    /// Configuration options when destination is opensearchserverless. See opensearchserverless_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "opensearchserverlessConfiguration")]
    pub opensearchserverless_configuration: Option<DeliveryStreamInitProviderOpensearchserverlessConfiguration>,
    /// Configuration options when destination is redshift. Requires the user to also specify an s3_configuration block. See redshift_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redshiftConfiguration")]
    pub redshift_configuration: Option<DeliveryStreamInitProviderRedshiftConfiguration>,
    /// Encrypt at rest options. See server_side_encryption block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideEncryption")]
    pub server_side_encryption: Option<DeliveryStreamInitProviderServerSideEncryption>,
    /// Configuration options when destination is snowflake. See snowflake_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snowflakeConfiguration")]
    pub snowflake_configuration: Option<DeliveryStreamInitProviderSnowflakeConfiguration>,
    /// Configuration options when destination is splunk. See splunk_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "splunkConfiguration")]
    pub splunk_configuration: Option<DeliveryStreamInitProviderSplunkConfiguration>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Specifies the table version for the output data schema. Defaults to LATEST.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionId")]
    pub version_id: Option<String>,
}

/// Configuration options when destination is elasticsearch. See elasticsearch_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfiguration {
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 300s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderElasticsearchConfigurationCloudwatchLoggingOptions>,
    /// The endpoint to use when communicating with the cluster. Conflicts with domain_arn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterEndpoint")]
    pub cluster_endpoint: Option<String>,
    /// The ARN of the Amazon ES domain.  The pattern needs to be arn:.*.  Conflicts with cluster_endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainArn")]
    pub domain_arn: Option<String>,
    /// Reference to a Domain in elasticsearch to populate domainArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainArnRef")]
    pub domain_arn_ref: Option<DeliveryStreamInitProviderElasticsearchConfigurationDomainArnRef>,
    /// Selector for a Domain in elasticsearch to populate domainArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainArnSelector")]
    pub domain_arn_selector: Option<DeliveryStreamInitProviderElasticsearchConfigurationDomainArnSelector>,
    /// The Elasticsearch index name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexName")]
    pub index_name: Option<String>,
    /// The Elasticsearch index rotation period.  Index rotation appends a timestamp to the IndexName to facilitate expiration of old data.  Valid values are NoRotation, OneHour, OneDay, OneWeek, and OneMonth.  The default value is OneDay.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexRotationPeriod")]
    pub index_rotation_period: Option<String>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamInitProviderElasticsearchConfigurationProcessingConfiguration>,
    /// After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents.  The IAM role must have permission for DescribeElasticsearchDomain, DescribeElasticsearchDomains, and DescribeElasticsearchDomainConfig.  The pattern needs to be arn:.*.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderElasticsearchConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderElasticsearchConfigurationRoleArnSelector>,
    /// Defines how documents should be delivered to Amazon S3.  Valid values are FailedDocumentsOnly and AllDocuments.  Default value is FailedDocumentsOnly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamInitProviderElasticsearchConfigurationS3Configuration>,
    /// The Elasticsearch type name with maximum length of 100 characters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typeName")]
    pub type_name: Option<String>,
    /// The VPC configuration for the delivery stream to connect to Elastic Search associated with the VPC. See vpc_config block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConfig")]
    pub vpc_config: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfig>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Domain in elasticsearch to populate domainArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationDomainArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderElasticsearchConfigurationDomainArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationDomainArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderElasticsearchConfigurationDomainArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderElasticsearchConfigurationDomainArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationDomainArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationDomainArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Domain in elasticsearch to populate domainArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationDomainArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderElasticsearchConfigurationDomainArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationDomainArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderElasticsearchConfigurationDomainArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderElasticsearchConfigurationDomainArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationDomainArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationDomainArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamInitProviderElasticsearchConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamInitProviderElasticsearchConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderElasticsearchConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderElasticsearchConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderElasticsearchConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderElasticsearchConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderElasticsearchConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderElasticsearchConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The S3 Configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationRoleArnSelector>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationS3ConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The VPC configuration for the delivery stream to connect to Elastic Search associated with the VPC. See vpc_config block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationVpcConfig {
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigRoleArnSelector>,
    /// A list of security group IDs to associate with Kinesis Firehose.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// References to SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIdsRefs")]
    pub security_group_ids_refs: Option<Vec<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIdsSelector")]
    pub security_group_ids_selector: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsSelector>,
    /// A list of subnet IDs to associate with Kinesis Firehose.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdsRefs")]
    pub subnet_ids_refs: Option<Vec<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSubnetIdsRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdsSelector")]
    pub subnet_ids_selector: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSubnetIdsSelector>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSubnetIdsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSubnetIdsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSubnetIdsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSubnetIdsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSubnetIdsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSubnetIdsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSubnetIdsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSubnetIdsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSubnetIdsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSubnetIdsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSubnetIdsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSubnetIdsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSubnetIdsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderElasticsearchConfigurationVpcConfigSubnetIdsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Enhanced configuration options for the s3 destination. See extended_s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamInitProviderExtendedS3ConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamInitProviderExtendedS3ConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderExtendedS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// The time zone you prefer. Valid values are UTC or a non-3-letter IANA time zones (for example, America/Los_Angeles). Default value is UTC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customTimeZone")]
    pub custom_time_zone: Option<String>,
    /// Nested argument for the serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. See data_format_conversion_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataFormatConversionConfiguration")]
    pub data_format_conversion_configuration: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfiguration>,
    /// The configuration for dynamic partitioning. Required when using dynamic partitioning. See dynamic_partitioning_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicPartitioningConfiguration")]
    pub dynamic_partitioning_configuration: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDynamicPartitioningConfiguration>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// The file extension to override the default file extension (for example, .json).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileExtension")]
    pub file_extension: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamInitProviderExtendedS3ConfigurationProcessingConfiguration>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderExtendedS3ConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderExtendedS3ConfigurationRoleArnSelector>,
    /// The configuration for backup in Amazon S3. Required if s3_backup_mode is Enabled. Supports the same fields as s3_configuration object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupConfiguration")]
    pub s3_backup_configuration: Option<DeliveryStreamInitProviderExtendedS3ConfigurationS3BackupConfiguration>,
    /// The Amazon S3 backup mode.  Valid values are Disabled and Enabled.  Default value is Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderExtendedS3ConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderExtendedS3ConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderExtendedS3ConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderExtendedS3ConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderExtendedS3ConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderExtendedS3ConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderExtendedS3ConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderExtendedS3ConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderExtendedS3ConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderExtendedS3ConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Nested argument for the serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. See data_format_conversion_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the deserializer that you want Kinesis Data Firehose to use to convert the format of your data from JSON. See input_format_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputFormatConfiguration")]
    pub input_format_configuration: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration>,
    /// Specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data to the Parquet or ORC format. See output_format_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputFormatConfiguration")]
    pub output_format_configuration: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration>,
    /// Specifies the AWS Glue Data Catalog table that contains the column information. See schema_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schemaConfiguration")]
    pub schema_configuration: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration>,
}

/// Specifies the deserializer that you want Kinesis Data Firehose to use to convert the format of your data from JSON. See input_format_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration {
    /// Specifies which deserializer to use. You can choose either the Apache Hive JSON SerDe or the OpenX JSON SerDe. See deserializer block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deserializer: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer>,
}

/// Specifies which deserializer to use. You can choose either the Apache Hive JSON SerDe or the OpenX JSON SerDe. See deserializer block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer {
    /// Specifies the native Hive / HCatalog JsonSerDe. More details below. See hive_json_ser_de block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hiveJsonSerDe")]
    pub hive_json_ser_de: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe>,
    /// Specifies the OpenX SerDe. See open_x_json_ser_de block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openXJsonSerDe")]
    pub open_x_json_ser_de: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe>,
}

/// Specifies the native Hive / HCatalog JsonSerDe. More details below. See hive_json_ser_de block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe {
    /// A list of how you want Kinesis Data Firehose to parse the date and time stamps that may be present in your input data JSON. To specify these format strings, follow the pattern syntax of JodaTime's DateTimeFormat format strings. For more information, see Class DateTimeFormat. You can also use the special value millis to parse time stamps in epoch milliseconds. If you don't specify a format, Kinesis Data Firehose uses java.sql.Timestamp::valueOf by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timestampFormats")]
    pub timestamp_formats: Option<Vec<String>>,
}

/// Specifies the OpenX SerDe. See open_x_json_ser_de block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe {
    /// When set to true, which is the default, Kinesis Data Firehose converts JSON keys to lowercase before deserializing them.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseInsensitive")]
    pub case_insensitive: Option<bool>,
    /// A map of column names to JSON keys that aren't identical to the column names. This is useful when the JSON contains keys that are Hive keywords. For example, timestamp is a Hive keyword. If you have a JSON key named timestamp, set this parameter to { ts = "timestamp" } to map this key to a column named ts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "columnToJsonKeyMappings")]
    pub column_to_json_key_mappings: Option<HashMap<String, String>>,
    /// When set to true, specifies that the names of the keys include dots and that you want Kinesis Data Firehose to replace them with underscores. This is useful because Apache Hive does not allow dots in column names. For example, if the JSON contains a key whose name is "a.b", you can define the column name to be "a_b" when using this option. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "convertDotsInJsonKeysToUnderscores")]
    pub convert_dots_in_json_keys_to_underscores: Option<bool>,
}

/// Specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data to the Parquet or ORC format. See output_format_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration {
    /// Specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. See serializer block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub serializer: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer>,
}

/// Specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. See serializer block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer {
    /// Specifies converting data to the ORC format before storing it in Amazon S3. For more information, see Apache ORC. See orc_ser_de block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orcSerDe")]
    pub orc_ser_de: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe>,
    /// Specifies converting data to the Parquet format before storing it in Amazon S3. For more information, see Apache Parquet. More details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parquetSerDe")]
    pub parquet_ser_de: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe>,
}

/// Specifies converting data to the ORC format before storing it in Amazon S3. For more information, see Apache ORC. See orc_ser_de block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe {
    /// The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockSizeBytes")]
    pub block_size_bytes: Option<f64>,
    /// A list of column names for which you want Kinesis Data Firehose to create bloom filters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bloomFilterColumns")]
    pub bloom_filter_columns: Option<Vec<String>>,
    /// The Bloom filter false positive probability (FPP). The lower the FPP, the bigger the Bloom filter. The default value is 0.05, the minimum is 0, and the maximum is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bloomFilterFalsePositiveProbability")]
    pub bloom_filter_false_positive_probability: Option<f64>,
    /// The compression code to use over data blocks. The possible values are UNCOMPRESSED, SNAPPY, and GZIP, with the default being SNAPPY. Use SNAPPY for higher decompression speed. Use GZIP if the compression ratio is more important than speed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression: Option<String>,
    /// A float that represents the fraction of the total number of non-null rows. To turn off dictionary encoding, set this fraction to a number that is less than the number of distinct keys in a dictionary. To always use dictionary encoding, set this threshold to 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dictionaryKeyThreshold")]
    pub dictionary_key_threshold: Option<f64>,
    /// Set this to true to indicate that you want stripes to be padded to the HDFS block boundaries. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePadding")]
    pub enable_padding: Option<bool>,
    /// The version of the file to write. The possible values are V0_11 and V0_12. The default is V0_12.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "formatVersion")]
    pub format_version: Option<String>,
    /// A float between 0 and 1 that defines the tolerance for block padding as a decimal fraction of stripe size. The default value is 0.05, which means 5 percent of stripe size. For the default values of 64 MiB ORC stripes and 256 MiB HDFS blocks, the default block padding tolerance of 5 percent reserves a maximum of 3.2 MiB for padding within the 256 MiB block. In such a case, if the available size within the block is more than 3.2 MiB, a new, smaller stripe is inserted to fit within that space. This ensures that no stripe crosses block boundaries and causes remote reads within a node-local task. Kinesis Data Firehose ignores this parameter when enable_padding is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "paddingTolerance")]
    pub padding_tolerance: Option<f64>,
    /// The number of rows between index entries. The default is 10000 and the minimum is 1000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rowIndexStride")]
    pub row_index_stride: Option<f64>,
    /// The number of bytes in each stripe. The default is 64 MiB and the minimum is 8 MiB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stripeSizeBytes")]
    pub stripe_size_bytes: Option<f64>,
}

/// Specifies converting data to the Parquet format before storing it in Amazon S3. For more information, see Apache Parquet. More details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe {
    /// The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockSizeBytes")]
    pub block_size_bytes: Option<f64>,
    /// The compression code to use over data blocks. The possible values are UNCOMPRESSED, SNAPPY, and GZIP, with the default being SNAPPY. Use SNAPPY for higher decompression speed. Use GZIP if the compression ratio is more important than speed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression: Option<String>,
    /// Indicates whether to enable dictionary compression.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDictionaryCompression")]
    pub enable_dictionary_compression: Option<bool>,
    /// The maximum amount of padding to apply. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPaddingBytes")]
    pub max_padding_bytes: Option<f64>,
    /// The Parquet page size. Column chunks are divided into pages. A page is conceptually an indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and the default is 1 MiB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pageSizeBytes")]
    pub page_size_bytes: Option<f64>,
    /// Indicates the version of row format to output. The possible values are V1 and V2. The default is V1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writerVersion")]
    pub writer_version: Option<String>,
}

/// Specifies the AWS Glue Data Catalog table that contains the column information. See schema_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration {
    /// The ID of the AWS Glue Data Catalog. If you don't supply this, the AWS account ID is used by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogId")]
    pub catalog_id: Option<String>,
    /// Specifies the name of the AWS Glue database that contains the schema for the output data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseName")]
    pub database_name: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnSelector>,
    /// Specifies the AWS Glue table that contains the column information that constitutes your data schema.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    pub table_name: Option<String>,
    /// Reference to a CatalogTable in glue to populate tableName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableNameRef")]
    pub table_name_ref: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameRef>,
    /// Selector for a CatalogTable in glue to populate tableName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableNameSelector")]
    pub table_name_selector: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameSelector>,
    /// Specifies the table version for the output data schema. Defaults to LATEST.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionId")]
    pub version_id: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a CatalogTable in glue to populate tableName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CatalogTable in glue to populate tableName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfigurationTableNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The configuration for dynamic partitioning. Required when using dynamic partitioning. See dynamic_partitioning_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationDynamicPartitioningConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamInitProviderExtendedS3ConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamInitProviderExtendedS3ConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderExtendedS3ConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderExtendedS3ConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderExtendedS3ConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderExtendedS3ConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderExtendedS3ConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderExtendedS3ConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderExtendedS3ConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderExtendedS3ConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderExtendedS3ConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderExtendedS3ConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The configuration for backup in Amazon S3. Required if s3_backup_mode is Enabled. Supports the same fields as s3_configuration object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationS3BackupConfiguration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Configuration options when destination is http_endpoint. Requires the user to also specify an s3_configuration block.  See http_endpoint_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfiguration {
    /// The access key required for Kinesis Firehose to authenticate with the HTTP endpoint selected as the destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accessKeySecretRef")]
    pub access_key_secret_ref: Option<DeliveryStreamInitProviderHttpEndpointConfigurationAccessKeySecretRef>,
    /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderHttpEndpointConfigurationCloudwatchLoggingOptions>,
    /// The HTTP endpoint name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamInitProviderHttpEndpointConfigurationProcessingConfiguration>,
    /// The request configuration.  See request_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestConfiguration")]
    pub request_configuration: Option<DeliveryStreamInitProviderHttpEndpointConfigurationRequestConfiguration>,
    /// Total amount of seconds Firehose spends on retries. This duration starts after the initial attempt fails, It does not include the time periods during which Firehose waits for acknowledgment from the specified destination after each attempt. Valid values between 0 and 7200. Default is 300.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// Kinesis Data Firehose uses this IAM role for all the permissions that the delivery stream needs. The pattern needs to be arn:.*.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderHttpEndpointConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderHttpEndpointConfigurationRoleArnSelector>,
    /// Defines how documents should be delivered to Amazon S3.  Valid values are FailedDataOnly and AllData.  Default value is FailedDataOnly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamInitProviderHttpEndpointConfigurationS3Configuration>,
    /// The Secret Manager Configuration. See secrets_manager_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerConfiguration")]
    pub secrets_manager_configuration: Option<DeliveryStreamInitProviderHttpEndpointConfigurationSecretsManagerConfiguration>,
    /// The HTTP endpoint URL to which Kinesis Firehose sends your data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// The access key required for Kinesis Firehose to authenticate with the HTTP endpoint selected as the destination.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationAccessKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamInitProviderHttpEndpointConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamInitProviderHttpEndpointConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// The request configuration.  See request_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationRequestConfiguration {
    /// Describes the metadata sent to the HTTP endpoint destination. See common_attributes block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAttributes")]
    pub common_attributes: Option<Vec<DeliveryStreamInitProviderHttpEndpointConfigurationRequestConfigurationCommonAttributes>>,
    /// Kinesis Data Firehose uses the content encoding to compress the body of a request before sending the request to the destination. Valid values are NONE and GZIP.  Default value is NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentEncoding")]
    pub content_encoding: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationRequestConfigurationCommonAttributes {
    /// The name of the HTTP endpoint common attribute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The value of the HTTP endpoint common attribute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderHttpEndpointConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderHttpEndpointConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderHttpEndpointConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderHttpEndpointConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderHttpEndpointConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderHttpEndpointConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderHttpEndpointConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderHttpEndpointConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderHttpEndpointConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderHttpEndpointConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The S3 Configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationRoleArnSelector>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderHttpEndpointConfigurationS3ConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The Secret Manager Configuration. See secrets_manager_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderHttpEndpointConfigurationSecretsManagerConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// The ARN of the Secrets Manager secret. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    pub secret_arn: Option<String>,
}

/// Configuration options when destination is iceberg. See iceberg_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfiguration {
    /// Buffer incoming data for the specified period of time, in seconds between 0 and 900, before delivering it to the destination. The default value is 300.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 and 128, before delivering it to the destination. The default value is 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// Glue catalog ARN identifier of the destination Apache Iceberg Tables. You must specify the ARN in the format arn:aws:glue:region:account-id:catalog
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogArn")]
    pub catalog_arn: Option<String>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderIcebergConfigurationCloudwatchLoggingOptions>,
    /// Destination table configurations which Firehose uses to deliver data to Apache Iceberg Tables. Firehose will write data with insert if table specific configuration is not provided. See destination_table_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationTableConfiguration")]
    pub destination_table_configuration: Option<Vec<DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfiguration>>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamInitProviderIcebergConfigurationProcessingConfiguration>,
    /// The period of time, in seconds between 0 to 7200, during which Firehose retries to deliver data to the specified destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// The ARN of the IAM role to be assumed by Firehose for calling Apache Iceberg Tables.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderIcebergConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderIcebergConfigurationRoleArnSelector>,
    /// Defines how documents should be delivered to Amazon S3.  Valid values are FailedEventsOnly and AllEvents.  Default value is FailedEventsOnly.
    /// secrets_manager_configuration -  The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if hec_token is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamInitProviderIcebergConfigurationS3Configuration>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfiguration {
    /// Specifies the name of the AWS Glue database that contains the schema for the output data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseName")]
    pub database_name: Option<String>,
    /// Reference to a CatalogDatabase in glue to populate databaseName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseNameRef")]
    pub database_name_ref: Option<DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameRef>,
    /// Selector for a CatalogDatabase in glue to populate databaseName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseNameSelector")]
    pub database_name_selector: Option<DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameSelector>,
    /// The table specific S3 error output prefix. All the errors that occurred while delivering to this table will be prefixed with this value in S3 destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3ErrorOutputPrefix")]
    pub s3_error_output_prefix: Option<String>,
    /// Specifies the AWS Glue table that contains the column information that constitutes your data schema.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    pub table_name: Option<String>,
    /// Reference to a CatalogTable in glue to populate tableName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableNameRef")]
    pub table_name_ref: Option<DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationTableNameRef>,
    /// Selector for a CatalogTable in glue to populate tableName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableNameSelector")]
    pub table_name_selector: Option<DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationTableNameSelector>,
    /// A list of unique keys for a given Apache Iceberg table. Firehose will use these for running Create, Update, or Delete operations on the given Iceberg table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uniqueKeys")]
    pub unique_keys: Option<Vec<String>>,
}

/// Reference to a CatalogDatabase in glue to populate databaseName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CatalogDatabase in glue to populate databaseName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationDatabaseNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a CatalogTable in glue to populate tableName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationTableNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationTableNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationTableNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationTableNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationTableNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationTableNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationTableNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CatalogTable in glue to populate tableName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationTableNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationTableNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationTableNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationTableNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationTableNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationTableNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationDestinationTableConfigurationTableNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamInitProviderIcebergConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamInitProviderIcebergConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderIcebergConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderIcebergConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderIcebergConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderIcebergConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderIcebergConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderIcebergConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The S3 Configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationRoleArnSelector>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderIcebergConfigurationS3ConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The stream and role Amazon Resource Names (ARNs) for a Kinesis data stream used as the source for a delivery stream. See kinesis_source_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderKinesisSourceConfiguration {
    /// The kinesis stream used as the source of the firehose delivery stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kinesisStreamArn")]
    pub kinesis_stream_arn: Option<String>,
    /// The ARN of the role that provides access to the source Kinesis stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The configuration for the Amazon MSK cluster to be used as the source for a delivery stream. See msk_source_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderMskSourceConfiguration {
    /// The authentication configuration of the Amazon MSK cluster. See authentication_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationConfiguration")]
    pub authentication_configuration: Option<DeliveryStreamInitProviderMskSourceConfigurationAuthenticationConfiguration>,
    /// The ARN of the Amazon MSK cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mskClusterArn")]
    pub msk_cluster_arn: Option<String>,
    /// The topic name within the Amazon MSK cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topicName")]
    pub topic_name: Option<String>,
}

/// The authentication configuration of the Amazon MSK cluster. See authentication_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderMskSourceConfigurationAuthenticationConfiguration {
    /// The type of connectivity used to access the Amazon MSK cluster. Valid values: PUBLIC, PRIVATE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connectivity: Option<String>,
    /// The ARN of the role used to access the Amazon MSK cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// Configuration options when destination is opensearch. See opensearch_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfiguration {
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 300s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderOpensearchConfigurationCloudwatchLoggingOptions>,
    /// The endpoint to use when communicating with the cluster. Conflicts with domain_arn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterEndpoint")]
    pub cluster_endpoint: Option<String>,
    /// The method for setting up document ID. See [document_id_options block] below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentIdOptions")]
    pub document_id_options: Option<DeliveryStreamInitProviderOpensearchConfigurationDocumentIdOptions>,
    /// The ARN of the Amazon ES domain.  The pattern needs to be arn:.*.  Conflicts with cluster_endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainArn")]
    pub domain_arn: Option<String>,
    /// Reference to a Domain in opensearch to populate domainArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainArnRef")]
    pub domain_arn_ref: Option<DeliveryStreamInitProviderOpensearchConfigurationDomainArnRef>,
    /// Selector for a Domain in opensearch to populate domainArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainArnSelector")]
    pub domain_arn_selector: Option<DeliveryStreamInitProviderOpensearchConfigurationDomainArnSelector>,
    /// The OpenSearch index name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexName")]
    pub index_name: Option<String>,
    /// The OpenSearch index rotation period.  Index rotation appends a timestamp to the IndexName to facilitate expiration of old data.  Valid values are NoRotation, OneHour, OneDay, OneWeek, and OneMonth.  The default value is OneDay.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexRotationPeriod")]
    pub index_rotation_period: Option<String>,
    /// The data processing configuration. See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamInitProviderOpensearchConfigurationProcessingConfiguration>,
    /// After an initial failure to deliver to Amazon OpenSearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents.  The IAM role must have permission for DescribeDomain, DescribeDomains, and DescribeDomainConfig.  The pattern needs to be arn:.*.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderOpensearchConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderOpensearchConfigurationRoleArnSelector>,
    /// Defines how documents should be delivered to Amazon S3.  Valid values are FailedDocumentsOnly and AllDocuments.  Default value is FailedDocumentsOnly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamInitProviderOpensearchConfigurationS3Configuration>,
    /// The Elasticsearch type name with maximum length of 100 characters. Types are deprecated in OpenSearch_1.1. TypeName must be empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typeName")]
    pub type_name: Option<String>,
    /// The VPC configuration for the delivery stream to connect to OpenSearch associated with the VPC. See vpc_config block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConfig")]
    pub vpc_config: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfig>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The method for setting up document ID. See [document_id_options block] below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationDocumentIdOptions {
    /// The method for setting up document ID. Valid values: FIREHOSE_DEFAULT, NO_DOCUMENT_ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultDocumentIdFormat")]
    pub default_document_id_format: Option<String>,
}

/// Reference to a Domain in opensearch to populate domainArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationDomainArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchConfigurationDomainArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationDomainArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchConfigurationDomainArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchConfigurationDomainArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationDomainArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationDomainArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Domain in opensearch to populate domainArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationDomainArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchConfigurationDomainArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationDomainArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchConfigurationDomainArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchConfigurationDomainArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationDomainArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationDomainArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The data processing configuration. See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamInitProviderOpensearchConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamInitProviderOpensearchConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The S3 Configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationRoleArnSelector>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationS3ConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The VPC configuration for the delivery stream to connect to OpenSearch associated with the VPC. See vpc_config block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationVpcConfig {
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigRoleArnSelector>,
    /// A list of security group IDs to associate with Kinesis Firehose.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// References to SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIdsRefs")]
    pub security_group_ids_refs: Option<Vec<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSecurityGroupIdsRefs>>,
    /// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIdsSelector")]
    pub security_group_ids_selector: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSecurityGroupIdsSelector>,
    /// A list of subnet IDs to associate with Kinesis Firehose.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
    /// References to Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdsRefs")]
    pub subnet_ids_refs: Option<Vec<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSubnetIdsRefs>>,
    /// Selector for a list of Subnet in ec2 to populate subnetIds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIdsSelector")]
    pub subnet_ids_selector: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSubnetIdsSelector>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationVpcConfigRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationVpcConfigRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationVpcConfigRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationVpcConfigRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationVpcConfigRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationVpcConfigRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationVpcConfigRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationVpcConfigRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSecurityGroupIdsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSecurityGroupIdsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSecurityGroupIdsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSecurityGroupIdsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSecurityGroupIdsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSecurityGroupIdsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSecurityGroupIdsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of SecurityGroup in ec2 to populate securityGroupIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSecurityGroupIdsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSecurityGroupIdsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSubnetIdsRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSubnetIdsRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSubnetIdsRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSubnetIdsRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSubnetIdsRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSubnetIdsRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSubnetIdsRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Subnet in ec2 to populate subnetIds.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSubnetIdsSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSubnetIdsSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSubnetIdsSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSubnetIdsSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSubnetIdsSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSubnetIdsSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchConfigurationVpcConfigSubnetIdsSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration options when destination is opensearchserverless. See opensearchserverless_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfiguration {
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 300s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationCloudwatchLoggingOptions>,
    /// The endpoint to use when communicating with the collection in the Serverless offering for Amazon OpenSearch Service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectionEndpoint")]
    pub collection_endpoint: Option<String>,
    /// Reference to a Collection in opensearchserverless to populate collectionEndpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectionEndpointRef")]
    pub collection_endpoint_ref: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationCollectionEndpointRef>,
    /// Selector for a Collection in opensearchserverless to populate collectionEndpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectionEndpointSelector")]
    pub collection_endpoint_selector: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationCollectionEndpointSelector>,
    /// The Serverless offering for Amazon OpenSearch Service index name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexName")]
    pub index_name: Option<String>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationProcessingConfiguration>,
    /// After an initial failure to deliver to the Serverless offering for Amazon OpenSearch Service, the total amount of time, in seconds between 0 to 7200, during which Kinesis Data Firehose retries delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// The Amazon Resource Name (ARN) of the IAM role to be assumed by Kinesis Data Firehose for calling the Serverless offering for Amazon OpenSearch Service Configuration API and for indexing documents.  The pattern needs to be arn:.*.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationRoleArnSelector>,
    /// Defines how documents should be delivered to Amazon S3.  Valid values are FailedDocumentsOnly and AllDocuments.  Default value is FailedDocumentsOnly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationS3Configuration>,
    /// The VPC configuration for the delivery stream to connect to OpenSearch Serverless associated with the VPC. See vpc_config block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConfig")]
    pub vpc_config: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationVpcConfig>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Collection in opensearchserverless to populate collectionEndpoint.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationCollectionEndpointRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationCollectionEndpointRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationCollectionEndpointRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationCollectionEndpointRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationCollectionEndpointRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchserverlessConfigurationCollectionEndpointRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchserverlessConfigurationCollectionEndpointRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Collection in opensearchserverless to populate collectionEndpoint.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationCollectionEndpointSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationCollectionEndpointSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationCollectionEndpointSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationCollectionEndpointSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationCollectionEndpointSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchserverlessConfigurationCollectionEndpointSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchserverlessConfigurationCollectionEndpointSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamInitProviderOpensearchserverlessConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamInitProviderOpensearchserverlessConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchserverlessConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchserverlessConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchserverlessConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchserverlessConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The S3 Configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnSelector>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderOpensearchserverlessConfigurationS3ConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The VPC configuration for the delivery stream to connect to OpenSearch Serverless associated with the VPC. See vpc_config block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderOpensearchserverlessConfigurationVpcConfig {
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// A list of security group IDs to associate with Kinesis Firehose.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// A list of subnet IDs to associate with Kinesis Firehose.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
}

/// Configuration options when destination is redshift. Requires the user to also specify an s3_configuration block. See redshift_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfiguration {
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderRedshiftConfigurationCloudwatchLoggingOptions>,
    /// The jdbcurl of the redshift cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterJdbcurl")]
    pub cluster_jdbcurl: Option<String>,
    /// Copy options for copying the data from the s3 intermediate bucket into redshift, for example to change the default delimiter. For valid values, see the AWS documentation
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyOptions")]
    pub copy_options: Option<String>,
    /// The data table columns that will be targeted by the copy command.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataTableColumns")]
    pub data_table_columns: Option<String>,
    /// The name of the table in the redshift cluster that the s3 bucket will copy to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataTableName")]
    pub data_table_name: Option<String>,
    /// The password for the username above. This value is required if secrets_manager_configuration is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "passwordSecretRef")]
    pub password_secret_ref: Option<DeliveryStreamInitProviderRedshiftConfigurationPasswordSecretRef>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamInitProviderRedshiftConfigurationProcessingConfiguration>,
    /// The length of time during which Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Firehose does not retry if the value of DurationInSeconds is 0 (zero) or if the first delivery attempt takes longer than the current value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// The arn of the role the stream assumes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderRedshiftConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderRedshiftConfigurationRoleArnSelector>,
    /// The configuration for backup in Amazon S3. Required if s3_backup_mode is Enabled. Supports the same fields as s3_configuration object.
    /// secrets_manager_configuration -  The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if username and password are not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupConfiguration")]
    pub s3_backup_configuration: Option<DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfiguration>,
    /// The Amazon S3 backup mode.  Valid values are Disabled and Enabled.  Default value is Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamInitProviderRedshiftConfigurationS3Configuration>,
    /// The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if user and private_key are not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerConfiguration")]
    pub secrets_manager_configuration: Option<DeliveryStreamInitProviderRedshiftConfigurationSecretsManagerConfiguration>,
    /// The username that the firehose delivery stream will assume. It is strongly recommended that the username and password provided is used exclusively for Amazon Kinesis Firehose purposes, and that the permissions for the account are restricted for Amazon Redshift INSERT permissions. This value is required if secrets_manager_configuration is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The password for the username above. This value is required if secrets_manager_configuration is not provided.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationPasswordSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamInitProviderRedshiftConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamInitProviderRedshiftConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderRedshiftConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderRedshiftConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderRedshiftConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderRedshiftConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderRedshiftConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderRedshiftConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The configuration for backup in Amazon S3. Required if s3_backup_mode is Enabled. Supports the same fields as s3_configuration object.
/// secrets_manager_configuration -  The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if username and password are not provided.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfiguration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationRoleArnSelector>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationS3BackupConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The S3 Configuration. See s3_configuration below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationRoleArnSelector>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderRedshiftConfigurationS3ConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if user and private_key are not provided.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderRedshiftConfigurationSecretsManagerConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// The ARN of the Secrets Manager secret. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    pub secret_arn: Option<String>,
}

/// Encrypt at rest options. See server_side_encryption block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderServerSideEncryption {
    /// Whether to enable encryption at rest. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Amazon Resource Name (ARN) of the encryption key. Required when key_type is CUSTOMER_MANAGED_CMK.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyArn")]
    pub key_arn: Option<String>,
    /// Type of encryption key. Default is AWS_OWNED_CMK. Valid values are AWS_OWNED_CMK and CUSTOMER_MANAGED_CMK
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyType")]
    pub key_type: Option<String>,
}

/// Configuration options when destination is snowflake. See snowflake_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfiguration {
    /// The URL of the Snowflake account. Format: https://[account_identifier].snowflakecomputing.com.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountUrl")]
    pub account_url: Option<String>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 0s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 128, before delivering it to the destination.  The default value is 1MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderSnowflakeConfigurationCloudwatchLoggingOptions>,
    /// The name of the content column.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentColumnName")]
    pub content_column_name: Option<String>,
    /// The data loading option.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataLoadingOption")]
    pub data_loading_option: Option<String>,
    /// The Snowflake database name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    /// The passphrase for the private key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyPassphraseSecretRef")]
    pub key_passphrase_secret_ref: Option<DeliveryStreamInitProviderSnowflakeConfigurationKeyPassphraseSecretRef>,
    /// The name of the metadata column.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataColumnName")]
    pub metadata_column_name: Option<String>,
    /// The private key for authentication. This value is required if secrets_manager_configuration is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateKeySecretRef")]
    pub private_key_secret_ref: Option<DeliveryStreamInitProviderSnowflakeConfigurationPrivateKeySecretRef>,
    /// The processing configuration. See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamInitProviderSnowflakeConfigurationProcessingConfiguration>,
    /// After an initial failure to deliver to Snowflake, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 60s.  There will be no retry if the value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// The ARN of the IAM role.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderSnowflakeConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderSnowflakeConfigurationRoleArnSelector>,
    /// The S3 backup mode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamInitProviderSnowflakeConfigurationS3Configuration>,
    /// The Snowflake schema name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
    /// The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if user and private_key are not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerConfiguration")]
    pub secrets_manager_configuration: Option<DeliveryStreamInitProviderSnowflakeConfigurationSecretsManagerConfiguration>,
    /// The configuration for Snowflake role.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snowflakeRoleConfiguration")]
    pub snowflake_role_configuration: Option<DeliveryStreamInitProviderSnowflakeConfigurationSnowflakeRoleConfiguration>,
    /// The VPC configuration for Snowflake.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snowflakeVpcConfiguration")]
    pub snowflake_vpc_configuration: Option<DeliveryStreamInitProviderSnowflakeConfigurationSnowflakeVpcConfiguration>,
    /// The Snowflake table name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub table: Option<String>,
    /// The user for authentication. This value is required if secrets_manager_configuration is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The passphrase for the private key.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationKeyPassphraseSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// The private key for authentication. This value is required if secrets_manager_configuration is not provided.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationPrivateKeySecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// The processing configuration. See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamInitProviderSnowflakeConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamInitProviderSnowflakeConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderSnowflakeConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderSnowflakeConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderSnowflakeConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSnowflakeConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSnowflakeConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderSnowflakeConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderSnowflakeConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderSnowflakeConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSnowflakeConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSnowflakeConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The S3 configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationRoleArnSelector>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSnowflakeConfigurationS3ConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if user and private_key are not provided.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationSecretsManagerConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// The ARN of the Secrets Manager secret. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    pub secret_arn: Option<String>,
}

/// The configuration for Snowflake role.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationSnowflakeRoleConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The Snowflake role.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snowflakeRole")]
    pub snowflake_role: Option<String>,
}

/// The VPC configuration for Snowflake.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSnowflakeConfigurationSnowflakeVpcConfiguration {
    /// The VPCE ID for Firehose to privately connect with Snowflake.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateLinkVpceId")]
    pub private_link_vpce_id: Option<String>,
}

/// Configuration options when destination is splunk. See splunk_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSplunkConfiguration {
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderSplunkConfigurationCloudwatchLoggingOptions>,
    /// The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hecAcknowledgmentTimeout")]
    pub hec_acknowledgment_timeout: Option<f64>,
    /// The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hecEndpoint")]
    pub hec_endpoint: Option<String>,
    /// The HEC endpoint type. Valid values are Raw or Event. The default value is Raw.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hecEndpointType")]
    pub hec_endpoint_type: Option<String>,
    /// The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint. This value is required if secrets_manager_configuration is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hecTokenSecretRef")]
    pub hec_token_secret_ref: Option<DeliveryStreamInitProviderSplunkConfigurationHecTokenSecretRef>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamInitProviderSplunkConfigurationProcessingConfiguration>,
    /// After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// Defines how documents should be delivered to Amazon S3.  Valid values are FailedEventsOnly and AllEvents.  Default value is FailedEventsOnly.
    /// secrets_manager_configuration -  The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if hec_token is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamInitProviderSplunkConfigurationS3Configuration>,
    /// The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if user and private_key are not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerConfiguration")]
    pub secrets_manager_configuration: Option<DeliveryStreamInitProviderSplunkConfigurationSecretsManagerConfiguration>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSplunkConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The GUID that you obtain from your Splunk cluster when you create a new HEC endpoint. This value is required if secrets_manager_configuration is not provided.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSplunkConfigurationHecTokenSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSplunkConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamInitProviderSplunkConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSplunkConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamInitProviderSplunkConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSplunkConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// The S3 Configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSplunkConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Reference to a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnRef")]
    pub bucket_arn_ref: Option<DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationBucketArnRef>,
    /// Selector for a Bucket in s3 to populate bucketArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArnSelector")]
    pub bucket_arn_selector: Option<DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationBucketArnSelector>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Reference to a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnRef")]
    pub role_arn_ref: Option<DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationRoleArnRef>,
    /// Selector for a Role in iam to populate roleArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArnSelector")]
    pub role_arn_selector: Option<DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationRoleArnSelector>,
}

/// Reference to a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationBucketArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationBucketArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationBucketArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationBucketArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationBucketArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationBucketArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationBucketArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Bucket in s3 to populate bucketArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationBucketArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationBucketArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationBucketArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationBucketArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationBucketArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationBucketArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationBucketArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Reference to a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationRoleArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationRoleArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationRoleArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationRoleArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationRoleArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationRoleArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationRoleArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Role in iam to populate roleArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationRoleArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationRoleArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationRoleArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationRoleArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationRoleArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationRoleArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamInitProviderSplunkConfigurationS3ConfigurationRoleArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if user and private_key are not provided.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamInitProviderSplunkConfigurationSecretsManagerConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// The ARN of the Secrets Manager secret. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    pub secret_arn: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<DeliveryStreamPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<DeliveryStreamPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<DeliveryStreamPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<DeliveryStreamPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<DeliveryStreamPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum DeliveryStreamPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// DeliveryStreamStatus defines the observed state of DeliveryStream.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<DeliveryStreamStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProvider {
    /// The Amazon Resource Name (ARN) specifying the Stream
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// â€“  This is the destination to where the data is delivered. The only options are s3 (Deprecated, use extended_s3 instead), extended_s3, redshift, elasticsearch, splunk, http_endpoint, opensearch, opensearchserverless and snowflake.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationId")]
    pub destination_id: Option<String>,
    /// Configuration options when destination is elasticsearch. See elasticsearch_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "elasticsearchConfiguration")]
    pub elasticsearch_configuration: Option<DeliveryStreamStatusAtProviderElasticsearchConfiguration>,
    /// Enhanced configuration options for the s3 destination. See extended_s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "extendedS3Configuration")]
    pub extended_s3_configuration: Option<DeliveryStreamStatusAtProviderExtendedS3Configuration>,
    /// Configuration options when destination is http_endpoint. Requires the user to also specify an s3_configuration block.  See http_endpoint_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "httpEndpointConfiguration")]
    pub http_endpoint_configuration: Option<DeliveryStreamStatusAtProviderHttpEndpointConfiguration>,
    /// Configuration options when destination is iceberg. See iceberg_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "icebergConfiguration")]
    pub iceberg_configuration: Option<DeliveryStreamStatusAtProviderIcebergConfiguration>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The stream and role Amazon Resource Names (ARNs) for a Kinesis data stream used as the source for a delivery stream. See kinesis_source_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kinesisSourceConfiguration")]
    pub kinesis_source_configuration: Option<DeliveryStreamStatusAtProviderKinesisSourceConfiguration>,
    /// The configuration for the Amazon MSK cluster to be used as the source for a delivery stream. See msk_source_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mskSourceConfiguration")]
    pub msk_source_configuration: Option<DeliveryStreamStatusAtProviderMskSourceConfiguration>,
    /// A name to identify the stream. This is unique to the AWS account and region the Stream is created in. When using for WAF logging, name must be prefixed with aws-waf-logs-. See AWS Documentation for more details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Configuration options when destination is opensearch. See opensearch_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "opensearchConfiguration")]
    pub opensearch_configuration: Option<DeliveryStreamStatusAtProviderOpensearchConfiguration>,
    /// Configuration options when destination is opensearchserverless. See opensearchserverless_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "opensearchserverlessConfiguration")]
    pub opensearchserverless_configuration: Option<DeliveryStreamStatusAtProviderOpensearchserverlessConfiguration>,
    /// Configuration options when destination is redshift. Requires the user to also specify an s3_configuration block. See redshift_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "redshiftConfiguration")]
    pub redshift_configuration: Option<DeliveryStreamStatusAtProviderRedshiftConfiguration>,
    /// Encrypt at rest options. See server_side_encryption block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "serverSideEncryption")]
    pub server_side_encryption: Option<DeliveryStreamStatusAtProviderServerSideEncryption>,
    /// Configuration options when destination is snowflake. See snowflake_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snowflakeConfiguration")]
    pub snowflake_configuration: Option<DeliveryStreamStatusAtProviderSnowflakeConfiguration>,
    /// Configuration options when destination is splunk. See splunk_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "splunkConfiguration")]
    pub splunk_configuration: Option<DeliveryStreamStatusAtProviderSplunkConfiguration>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// Specifies the table version for the output data schema. Defaults to LATEST.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionId")]
    pub version_id: Option<String>,
}

/// Configuration options when destination is elasticsearch. See elasticsearch_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderElasticsearchConfiguration {
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 300s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderElasticsearchConfigurationCloudwatchLoggingOptions>,
    /// The endpoint to use when communicating with the cluster. Conflicts with domain_arn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterEndpoint")]
    pub cluster_endpoint: Option<String>,
    /// The ARN of the Amazon ES domain.  The pattern needs to be arn:.*.  Conflicts with cluster_endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainArn")]
    pub domain_arn: Option<String>,
    /// The Elasticsearch index name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexName")]
    pub index_name: Option<String>,
    /// The Elasticsearch index rotation period.  Index rotation appends a timestamp to the IndexName to facilitate expiration of old data.  Valid values are NoRotation, OneHour, OneDay, OneWeek, and OneMonth.  The default value is OneDay.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexRotationPeriod")]
    pub index_rotation_period: Option<String>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamStatusAtProviderElasticsearchConfigurationProcessingConfiguration>,
    /// After an initial failure to deliver to Amazon Elasticsearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents.  The IAM role must have permission for DescribeElasticsearchDomain, DescribeElasticsearchDomains, and DescribeElasticsearchDomainConfig.  The pattern needs to be arn:.*.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Defines how documents should be delivered to Amazon S3.  Valid values are FailedDocumentsOnly and AllDocuments.  Default value is FailedDocumentsOnly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamStatusAtProviderElasticsearchConfigurationS3Configuration>,
    /// The Elasticsearch type name with maximum length of 100 characters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typeName")]
    pub type_name: Option<String>,
    /// The VPC configuration for the delivery stream to connect to Elastic Search associated with the VPC. See vpc_config block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConfig")]
    pub vpc_config: Option<DeliveryStreamStatusAtProviderElasticsearchConfigurationVpcConfig>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderElasticsearchConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderElasticsearchConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamStatusAtProviderElasticsearchConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderElasticsearchConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamStatusAtProviderElasticsearchConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderElasticsearchConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// The S3 Configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderElasticsearchConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderElasticsearchConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The VPC configuration for the delivery stream to connect to Elastic Search associated with the VPC. See vpc_config block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderElasticsearchConfigurationVpcConfig {
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// A list of security group IDs to associate with Kinesis Firehose.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// A list of subnet IDs to associate with Kinesis Firehose.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    pub vpc_id: Option<String>,
}

/// Enhanced configuration options for the s3 destination. See extended_s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderExtendedS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderExtendedS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// The time zone you prefer. Valid values are UTC or a non-3-letter IANA time zones (for example, America/Los_Angeles). Default value is UTC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customTimeZone")]
    pub custom_time_zone: Option<String>,
    /// Nested argument for the serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. See data_format_conversion_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataFormatConversionConfiguration")]
    pub data_format_conversion_configuration: Option<DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfiguration>,
    /// The configuration for dynamic partitioning. Required when using dynamic partitioning. See dynamic_partitioning_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dynamicPartitioningConfiguration")]
    pub dynamic_partitioning_configuration: Option<DeliveryStreamStatusAtProviderExtendedS3ConfigurationDynamicPartitioningConfiguration>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// The file extension to override the default file extension (for example, .json).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fileExtension")]
    pub file_extension: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamStatusAtProviderExtendedS3ConfigurationProcessingConfiguration>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// The configuration for backup in Amazon S3. Required if s3_backup_mode is Enabled. Supports the same fields as s3_configuration object.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupConfiguration")]
    pub s3_backup_configuration: Option<DeliveryStreamStatusAtProviderExtendedS3ConfigurationS3BackupConfiguration>,
    /// The Amazon S3 backup mode.  Valid values are Disabled and Enabled.  Default value is Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderExtendedS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Nested argument for the serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3. See data_format_conversion_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the deserializer that you want Kinesis Data Firehose to use to convert the format of your data from JSON. See input_format_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputFormatConfiguration")]
    pub input_format_configuration: Option<DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration>,
    /// Specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data to the Parquet or ORC format. See output_format_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputFormatConfiguration")]
    pub output_format_configuration: Option<DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration>,
    /// Specifies the AWS Glue Data Catalog table that contains the column information. See schema_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schemaConfiguration")]
    pub schema_configuration: Option<DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration>,
}

/// Specifies the deserializer that you want Kinesis Data Firehose to use to convert the format of your data from JSON. See input_format_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfiguration {
    /// Specifies which deserializer to use. You can choose either the Apache Hive JSON SerDe or the OpenX JSON SerDe. See deserializer block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deserializer: Option<DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer>,
}

/// Specifies which deserializer to use. You can choose either the Apache Hive JSON SerDe or the OpenX JSON SerDe. See deserializer block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializer {
    /// Specifies the native Hive / HCatalog JsonSerDe. More details below. See hive_json_ser_de block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hiveJsonSerDe")]
    pub hive_json_ser_de: Option<DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe>,
    /// Specifies the OpenX SerDe. See open_x_json_ser_de block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "openXJsonSerDe")]
    pub open_x_json_ser_de: Option<DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe>,
}

/// Specifies the native Hive / HCatalog JsonSerDe. More details below. See hive_json_ser_de block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerHiveJsonSerDe {
    /// A list of how you want Kinesis Data Firehose to parse the date and time stamps that may be present in your input data JSON. To specify these format strings, follow the pattern syntax of JodaTime's DateTimeFormat format strings. For more information, see Class DateTimeFormat. You can also use the special value millis to parse time stamps in epoch milliseconds. If you don't specify a format, Kinesis Data Firehose uses java.sql.Timestamp::valueOf by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "timestampFormats")]
    pub timestamp_formats: Option<Vec<String>>,
}

/// Specifies the OpenX SerDe. See open_x_json_ser_de block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfigurationInputFormatConfigurationDeserializerOpenXJsonSerDe {
    /// When set to true, which is the default, Kinesis Data Firehose converts JSON keys to lowercase before deserializing them.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "caseInsensitive")]
    pub case_insensitive: Option<bool>,
    /// A map of column names to JSON keys that aren't identical to the column names. This is useful when the JSON contains keys that are Hive keywords. For example, timestamp is a Hive keyword. If you have a JSON key named timestamp, set this parameter to { ts = "timestamp" } to map this key to a column named ts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "columnToJsonKeyMappings")]
    pub column_to_json_key_mappings: Option<HashMap<String, String>>,
    /// When set to true, specifies that the names of the keys include dots and that you want Kinesis Data Firehose to replace them with underscores. This is useful because Apache Hive does not allow dots in column names. For example, if the JSON contains a key whose name is "a.b", you can define the column name to be "a_b" when using this option. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "convertDotsInJsonKeysToUnderscores")]
    pub convert_dots_in_json_keys_to_underscores: Option<bool>,
}

/// Specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data to the Parquet or ORC format. See output_format_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfiguration {
    /// Specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. See serializer block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub serializer: Option<DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer>,
}

/// Specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. See serializer block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializer {
    /// Specifies converting data to the ORC format before storing it in Amazon S3. For more information, see Apache ORC. See orc_ser_de block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "orcSerDe")]
    pub orc_ser_de: Option<DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe>,
    /// Specifies converting data to the Parquet format before storing it in Amazon S3. For more information, see Apache Parquet. More details below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parquetSerDe")]
    pub parquet_ser_de: Option<DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe>,
}

/// Specifies converting data to the ORC format before storing it in Amazon S3. For more information, see Apache ORC. See orc_ser_de block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerOrcSerDe {
    /// The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockSizeBytes")]
    pub block_size_bytes: Option<f64>,
    /// A list of column names for which you want Kinesis Data Firehose to create bloom filters.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bloomFilterColumns")]
    pub bloom_filter_columns: Option<Vec<String>>,
    /// The Bloom filter false positive probability (FPP). The lower the FPP, the bigger the Bloom filter. The default value is 0.05, the minimum is 0, and the maximum is 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bloomFilterFalsePositiveProbability")]
    pub bloom_filter_false_positive_probability: Option<f64>,
    /// The compression code to use over data blocks. The possible values are UNCOMPRESSED, SNAPPY, and GZIP, with the default being SNAPPY. Use SNAPPY for higher decompression speed. Use GZIP if the compression ratio is more important than speed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression: Option<String>,
    /// A float that represents the fraction of the total number of non-null rows. To turn off dictionary encoding, set this fraction to a number that is less than the number of distinct keys in a dictionary. To always use dictionary encoding, set this threshold to 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dictionaryKeyThreshold")]
    pub dictionary_key_threshold: Option<f64>,
    /// Set this to true to indicate that you want stripes to be padded to the HDFS block boundaries. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enablePadding")]
    pub enable_padding: Option<bool>,
    /// The version of the file to write. The possible values are V0_11 and V0_12. The default is V0_12.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "formatVersion")]
    pub format_version: Option<String>,
    /// A float between 0 and 1 that defines the tolerance for block padding as a decimal fraction of stripe size. The default value is 0.05, which means 5 percent of stripe size. For the default values of 64 MiB ORC stripes and 256 MiB HDFS blocks, the default block padding tolerance of 5 percent reserves a maximum of 3.2 MiB for padding within the 256 MiB block. In such a case, if the available size within the block is more than 3.2 MiB, a new, smaller stripe is inserted to fit within that space. This ensures that no stripe crosses block boundaries and causes remote reads within a node-local task. Kinesis Data Firehose ignores this parameter when enable_padding is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "paddingTolerance")]
    pub padding_tolerance: Option<f64>,
    /// The number of rows between index entries. The default is 10000 and the minimum is 1000.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rowIndexStride")]
    pub row_index_stride: Option<f64>,
    /// The number of bytes in each stripe. The default is 64 MiB and the minimum is 8 MiB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stripeSizeBytes")]
    pub stripe_size_bytes: Option<f64>,
}

/// Specifies converting data to the Parquet format before storing it in Amazon S3. For more information, see Apache Parquet. More details below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfigurationOutputFormatConfigurationSerializerParquetSerDe {
    /// The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "blockSizeBytes")]
    pub block_size_bytes: Option<f64>,
    /// The compression code to use over data blocks. The possible values are UNCOMPRESSED, SNAPPY, and GZIP, with the default being SNAPPY. Use SNAPPY for higher decompression speed. Use GZIP if the compression ratio is more important than speed.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub compression: Option<String>,
    /// Indicates whether to enable dictionary compression.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDictionaryCompression")]
    pub enable_dictionary_compression: Option<bool>,
    /// The maximum amount of padding to apply. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxPaddingBytes")]
    pub max_padding_bytes: Option<f64>,
    /// The Parquet page size. Column chunks are divided into pages. A page is conceptually an indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and the default is 1 MiB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pageSizeBytes")]
    pub page_size_bytes: Option<f64>,
    /// Indicates the version of row format to output. The possible values are V1 and V2. The default is V1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writerVersion")]
    pub writer_version: Option<String>,
}

/// Specifies the AWS Glue Data Catalog table that contains the column information. See schema_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderExtendedS3ConfigurationDataFormatConversionConfigurationSchemaConfiguration {
    /// The ID of the AWS Glue Data Catalog. If you don't supply this, the AWS account ID is used by default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogId")]
    pub catalog_id: Option<String>,
    /// Specifies the name of the AWS Glue database that contains the schema for the output data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseName")]
    pub database_name: Option<String>,
    /// If you don't specify an AWS Region, the default is the current region.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Specifies the AWS Glue table that contains the column information that constitutes your data schema.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    pub table_name: Option<String>,
    /// Specifies the table version for the output data schema. Defaults to LATEST.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "versionId")]
    pub version_id: Option<String>,
}

/// The configuration for dynamic partitioning. Required when using dynamic partitioning. See dynamic_partitioning_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderExtendedS3ConfigurationDynamicPartitioningConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderExtendedS3ConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamStatusAtProviderExtendedS3ConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderExtendedS3ConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamStatusAtProviderExtendedS3ConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderExtendedS3ConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// The configuration for backup in Amazon S3. Required if s3_backup_mode is Enabled. Supports the same fields as s3_configuration object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderExtendedS3ConfigurationS3BackupConfiguration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderExtendedS3ConfigurationS3BackupConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// Configuration options when destination is http_endpoint. Requires the user to also specify an s3_configuration block.  See http_endpoint_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderHttpEndpointConfiguration {
    /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderHttpEndpointConfigurationCloudwatchLoggingOptions>,
    /// The HTTP endpoint name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamStatusAtProviderHttpEndpointConfigurationProcessingConfiguration>,
    /// The request configuration.  See request_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requestConfiguration")]
    pub request_configuration: Option<DeliveryStreamStatusAtProviderHttpEndpointConfigurationRequestConfiguration>,
    /// Total amount of seconds Firehose spends on retries. This duration starts after the initial attempt fails, It does not include the time periods during which Firehose waits for acknowledgment from the specified destination after each attempt. Valid values between 0 and 7200. Default is 300.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// Kinesis Data Firehose uses this IAM role for all the permissions that the delivery stream needs. The pattern needs to be arn:.*.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Defines how documents should be delivered to Amazon S3.  Valid values are FailedDataOnly and AllData.  Default value is FailedDataOnly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamStatusAtProviderHttpEndpointConfigurationS3Configuration>,
    /// The Secret Manager Configuration. See secrets_manager_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerConfiguration")]
    pub secrets_manager_configuration: Option<DeliveryStreamStatusAtProviderHttpEndpointConfigurationSecretsManagerConfiguration>,
    /// The HTTP endpoint URL to which Kinesis Firehose sends your data.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderHttpEndpointConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderHttpEndpointConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamStatusAtProviderHttpEndpointConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderHttpEndpointConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamStatusAtProviderHttpEndpointConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderHttpEndpointConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// The request configuration.  See request_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderHttpEndpointConfigurationRequestConfiguration {
    /// Describes the metadata sent to the HTTP endpoint destination. See common_attributes block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "commonAttributes")]
    pub common_attributes: Option<Vec<DeliveryStreamStatusAtProviderHttpEndpointConfigurationRequestConfigurationCommonAttributes>>,
    /// Kinesis Data Firehose uses the content encoding to compress the body of a request before sending the request to the destination. Valid values are NONE and GZIP.  Default value is NONE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentEncoding")]
    pub content_encoding: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderHttpEndpointConfigurationRequestConfigurationCommonAttributes {
    /// The name of the HTTP endpoint common attribute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The value of the HTTP endpoint common attribute.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<String>,
}

/// The S3 Configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderHttpEndpointConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderHttpEndpointConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The Secret Manager Configuration. See secrets_manager_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderHttpEndpointConfigurationSecretsManagerConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// The ARN of the Secrets Manager secret. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    pub secret_arn: Option<String>,
}

/// Configuration options when destination is iceberg. See iceberg_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderIcebergConfiguration {
    /// Buffer incoming data for the specified period of time, in seconds between 0 and 900, before delivering it to the destination. The default value is 300.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 and 128, before delivering it to the destination. The default value is 5.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// Glue catalog ARN identifier of the destination Apache Iceberg Tables. You must specify the ARN in the format arn:aws:glue:region:account-id:catalog
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "catalogArn")]
    pub catalog_arn: Option<String>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderIcebergConfigurationCloudwatchLoggingOptions>,
    /// Destination table configurations which Firehose uses to deliver data to Apache Iceberg Tables. Firehose will write data with insert if table specific configuration is not provided. See destination_table_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "destinationTableConfiguration")]
    pub destination_table_configuration: Option<Vec<DeliveryStreamStatusAtProviderIcebergConfigurationDestinationTableConfiguration>>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamStatusAtProviderIcebergConfigurationProcessingConfiguration>,
    /// The period of time, in seconds between 0 to 7200, during which Firehose retries to deliver data to the specified destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// The ARN of the IAM role to be assumed by Firehose for calling Apache Iceberg Tables.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Defines how documents should be delivered to Amazon S3.  Valid values are FailedEventsOnly and AllEvents.  Default value is FailedEventsOnly.
    /// secrets_manager_configuration -  The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if hec_token is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamStatusAtProviderIcebergConfigurationS3Configuration>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderIcebergConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderIcebergConfigurationDestinationTableConfiguration {
    /// Specifies the name of the AWS Glue database that contains the schema for the output data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "databaseName")]
    pub database_name: Option<String>,
    /// The table specific S3 error output prefix. All the errors that occurred while delivering to this table will be prefixed with this value in S3 destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3ErrorOutputPrefix")]
    pub s3_error_output_prefix: Option<String>,
    /// Specifies the AWS Glue table that contains the column information that constitutes your data schema.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tableName")]
    pub table_name: Option<String>,
    /// A list of unique keys for a given Apache Iceberg table. Firehose will use these for running Create, Update, or Delete operations on the given Iceberg table.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "uniqueKeys")]
    pub unique_keys: Option<Vec<String>>,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderIcebergConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamStatusAtProviderIcebergConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderIcebergConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamStatusAtProviderIcebergConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderIcebergConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// The S3 Configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderIcebergConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderIcebergConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderIcebergConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The stream and role Amazon Resource Names (ARNs) for a Kinesis data stream used as the source for a delivery stream. See kinesis_source_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderKinesisSourceConfiguration {
    /// The kinesis stream used as the source of the firehose delivery stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kinesisStreamArn")]
    pub kinesis_stream_arn: Option<String>,
    /// The ARN of the role that provides access to the source Kinesis stream.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The configuration for the Amazon MSK cluster to be used as the source for a delivery stream. See msk_source_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderMskSourceConfiguration {
    /// The authentication configuration of the Amazon MSK cluster. See authentication_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationConfiguration")]
    pub authentication_configuration: Option<DeliveryStreamStatusAtProviderMskSourceConfigurationAuthenticationConfiguration>,
    /// The ARN of the Amazon MSK cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mskClusterArn")]
    pub msk_cluster_arn: Option<String>,
    /// The topic name within the Amazon MSK cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "topicName")]
    pub topic_name: Option<String>,
}

/// The authentication configuration of the Amazon MSK cluster. See authentication_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderMskSourceConfigurationAuthenticationConfiguration {
    /// The type of connectivity used to access the Amazon MSK cluster. Valid values: PUBLIC, PRIVATE.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub connectivity: Option<String>,
    /// The ARN of the role used to access the Amazon MSK cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// Configuration options when destination is opensearch. See opensearch_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderOpensearchConfiguration {
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 300s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderOpensearchConfigurationCloudwatchLoggingOptions>,
    /// The endpoint to use when communicating with the cluster. Conflicts with domain_arn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterEndpoint")]
    pub cluster_endpoint: Option<String>,
    /// The method for setting up document ID. See [document_id_options block] below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "documentIdOptions")]
    pub document_id_options: Option<DeliveryStreamStatusAtProviderOpensearchConfigurationDocumentIdOptions>,
    /// The ARN of the Amazon ES domain.  The pattern needs to be arn:.*.  Conflicts with cluster_endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "domainArn")]
    pub domain_arn: Option<String>,
    /// The OpenSearch index name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexName")]
    pub index_name: Option<String>,
    /// The OpenSearch index rotation period.  Index rotation appends a timestamp to the IndexName to facilitate expiration of old data.  Valid values are NoRotation, OneHour, OneDay, OneWeek, and OneMonth.  The default value is OneDay.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexRotationPeriod")]
    pub index_rotation_period: Option<String>,
    /// The data processing configuration. See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamStatusAtProviderOpensearchConfigurationProcessingConfiguration>,
    /// After an initial failure to deliver to Amazon OpenSearch, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon ES Configuration API and for indexing documents.  The IAM role must have permission for DescribeDomain, DescribeDomains, and DescribeDomainConfig.  The pattern needs to be arn:.*.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Defines how documents should be delivered to Amazon S3.  Valid values are FailedDocumentsOnly and AllDocuments.  Default value is FailedDocumentsOnly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamStatusAtProviderOpensearchConfigurationS3Configuration>,
    /// The Elasticsearch type name with maximum length of 100 characters. Types are deprecated in OpenSearch_1.1. TypeName must be empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "typeName")]
    pub type_name: Option<String>,
    /// The VPC configuration for the delivery stream to connect to OpenSearch associated with the VPC. See vpc_config block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConfig")]
    pub vpc_config: Option<DeliveryStreamStatusAtProviderOpensearchConfigurationVpcConfig>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderOpensearchConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The method for setting up document ID. See [document_id_options block] below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderOpensearchConfigurationDocumentIdOptions {
    /// The method for setting up document ID. Valid values: FIREHOSE_DEFAULT, NO_DOCUMENT_ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultDocumentIdFormat")]
    pub default_document_id_format: Option<String>,
}

/// The data processing configuration. See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderOpensearchConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamStatusAtProviderOpensearchConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderOpensearchConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamStatusAtProviderOpensearchConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderOpensearchConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// The S3 Configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderOpensearchConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderOpensearchConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The VPC configuration for the delivery stream to connect to OpenSearch associated with the VPC. See vpc_config block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderOpensearchConfigurationVpcConfig {
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// A list of security group IDs to associate with Kinesis Firehose.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// A list of subnet IDs to associate with Kinesis Firehose.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    pub vpc_id: Option<String>,
}

/// Configuration options when destination is opensearchserverless. See opensearchserverless_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderOpensearchserverlessConfiguration {
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 300s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 100, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderOpensearchserverlessConfigurationCloudwatchLoggingOptions>,
    /// The endpoint to use when communicating with the collection in the Serverless offering for Amazon OpenSearch Service.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "collectionEndpoint")]
    pub collection_endpoint: Option<String>,
    /// The Serverless offering for Amazon OpenSearch Service index name.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "indexName")]
    pub index_name: Option<String>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamStatusAtProviderOpensearchserverlessConfigurationProcessingConfiguration>,
    /// After an initial failure to deliver to the Serverless offering for Amazon OpenSearch Service, the total amount of time, in seconds between 0 to 7200, during which Kinesis Data Firehose retries delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// The Amazon Resource Name (ARN) of the IAM role to be assumed by Kinesis Data Firehose for calling the Serverless offering for Amazon OpenSearch Service Configuration API and for indexing documents.  The pattern needs to be arn:.*.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// Defines how documents should be delivered to Amazon S3.  Valid values are FailedDocumentsOnly and AllDocuments.  Default value is FailedDocumentsOnly.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamStatusAtProviderOpensearchserverlessConfigurationS3Configuration>,
    /// The VPC configuration for the delivery stream to connect to OpenSearch Serverless associated with the VPC. See vpc_config block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcConfig")]
    pub vpc_config: Option<DeliveryStreamStatusAtProviderOpensearchserverlessConfigurationVpcConfig>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderOpensearchserverlessConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderOpensearchserverlessConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamStatusAtProviderOpensearchserverlessConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderOpensearchserverlessConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamStatusAtProviderOpensearchserverlessConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderOpensearchserverlessConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// The S3 Configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderOpensearchserverlessConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderOpensearchserverlessConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The VPC configuration for the delivery stream to connect to OpenSearch Serverless associated with the VPC. See vpc_config block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderOpensearchserverlessConfigurationVpcConfig {
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// A list of security group IDs to associate with Kinesis Firehose.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// A list of subnet IDs to associate with Kinesis Firehose.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcId")]
    pub vpc_id: Option<String>,
}

/// Configuration options when destination is redshift. Requires the user to also specify an s3_configuration block. See redshift_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderRedshiftConfiguration {
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderRedshiftConfigurationCloudwatchLoggingOptions>,
    /// The jdbcurl of the redshift cluster.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterJdbcurl")]
    pub cluster_jdbcurl: Option<String>,
    /// Copy options for copying the data from the s3 intermediate bucket into redshift, for example to change the default delimiter. For valid values, see the AWS documentation
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "copyOptions")]
    pub copy_options: Option<String>,
    /// The data table columns that will be targeted by the copy command.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataTableColumns")]
    pub data_table_columns: Option<String>,
    /// The name of the table in the redshift cluster that the s3 bucket will copy to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataTableName")]
    pub data_table_name: Option<String>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamStatusAtProviderRedshiftConfigurationProcessingConfiguration>,
    /// The length of time during which Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Firehose does not retry if the value of DurationInSeconds is 0 (zero) or if the first delivery attempt takes longer than the current value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// The arn of the role the stream assumes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// The configuration for backup in Amazon S3. Required if s3_backup_mode is Enabled. Supports the same fields as s3_configuration object.
    /// secrets_manager_configuration -  The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if username and password are not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupConfiguration")]
    pub s3_backup_configuration: Option<DeliveryStreamStatusAtProviderRedshiftConfigurationS3BackupConfiguration>,
    /// The Amazon S3 backup mode.  Valid values are Disabled and Enabled.  Default value is Disabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamStatusAtProviderRedshiftConfigurationS3Configuration>,
    /// The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if user and private_key are not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerConfiguration")]
    pub secrets_manager_configuration: Option<DeliveryStreamStatusAtProviderRedshiftConfigurationSecretsManagerConfiguration>,
    /// The username that the firehose delivery stream will assume. It is strongly recommended that the username and password provided is used exclusively for Amazon Kinesis Firehose purposes, and that the permissions for the account are restricted for Amazon Redshift INSERT permissions. This value is required if secrets_manager_configuration is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub username: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderRedshiftConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderRedshiftConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamStatusAtProviderRedshiftConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderRedshiftConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamStatusAtProviderRedshiftConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderRedshiftConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// The configuration for backup in Amazon S3. Required if s3_backup_mode is Enabled. Supports the same fields as s3_configuration object.
/// secrets_manager_configuration -  The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if username and password are not provided.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderRedshiftConfigurationS3BackupConfiguration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderRedshiftConfigurationS3BackupConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The S3 Configuration. See s3_configuration below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderRedshiftConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderRedshiftConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if user and private_key are not provided.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderRedshiftConfigurationSecretsManagerConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// The ARN of the Secrets Manager secret. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    pub secret_arn: Option<String>,
}

/// Encrypt at rest options. See server_side_encryption block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderServerSideEncryption {
    /// Whether to enable encryption at rest. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Amazon Resource Name (ARN) of the encryption key. Required when key_type is CUSTOMER_MANAGED_CMK.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyArn")]
    pub key_arn: Option<String>,
    /// Type of encryption key. Default is AWS_OWNED_CMK. Valid values are AWS_OWNED_CMK and CUSTOMER_MANAGED_CMK
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "keyType")]
    pub key_type: Option<String>,
}

/// Configuration options when destination is snowflake. See snowflake_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderSnowflakeConfiguration {
    /// The URL of the Snowflake account. Format: https://[account_identifier].snowflakecomputing.com.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "accountUrl")]
    pub account_url: Option<String>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 900, before delivering it to the destination.  The default value is 0s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 128, before delivering it to the destination.  The default value is 1MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderSnowflakeConfigurationCloudwatchLoggingOptions>,
    /// The name of the content column.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentColumnName")]
    pub content_column_name: Option<String>,
    /// The data loading option.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "dataLoadingOption")]
    pub data_loading_option: Option<String>,
    /// The Snowflake database name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub database: Option<String>,
    /// The name of the metadata column.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metadataColumnName")]
    pub metadata_column_name: Option<String>,
    /// The processing configuration. See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamStatusAtProviderSnowflakeConfigurationProcessingConfiguration>,
    /// After an initial failure to deliver to Snowflake, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 60s.  There will be no retry if the value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// The ARN of the IAM role.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// The S3 backup mode.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamStatusAtProviderSnowflakeConfigurationS3Configuration>,
    /// The Snowflake schema name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
    /// The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if user and private_key are not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerConfiguration")]
    pub secrets_manager_configuration: Option<DeliveryStreamStatusAtProviderSnowflakeConfigurationSecretsManagerConfiguration>,
    /// The configuration for Snowflake role.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snowflakeRoleConfiguration")]
    pub snowflake_role_configuration: Option<DeliveryStreamStatusAtProviderSnowflakeConfigurationSnowflakeRoleConfiguration>,
    /// The VPC configuration for Snowflake.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snowflakeVpcConfiguration")]
    pub snowflake_vpc_configuration: Option<DeliveryStreamStatusAtProviderSnowflakeConfigurationSnowflakeVpcConfiguration>,
    /// The Snowflake table name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub table: Option<String>,
    /// The user for authentication. This value is required if secrets_manager_configuration is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderSnowflakeConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The processing configuration. See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderSnowflakeConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamStatusAtProviderSnowflakeConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderSnowflakeConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamStatusAtProviderSnowflakeConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderSnowflakeConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// The S3 configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderSnowflakeConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderSnowflakeConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderSnowflakeConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if user and private_key are not provided.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderSnowflakeConfigurationSecretsManagerConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// The ARN of the Secrets Manager secret. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    pub secret_arn: Option<String>,
}

/// The configuration for Snowflake role.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderSnowflakeConfigurationSnowflakeRoleConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The Snowflake role.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snowflakeRole")]
    pub snowflake_role: Option<String>,
}

/// The VPC configuration for Snowflake.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderSnowflakeConfigurationSnowflakeVpcConfiguration {
    /// The VPCE ID for Firehose to privately connect with Snowflake.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "privateLinkVpceId")]
    pub private_link_vpce_id: Option<String>,
}

/// Configuration options when destination is splunk. See splunk_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderSplunkConfiguration {
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderSplunkConfigurationCloudwatchLoggingOptions>,
    /// The amount of time, in seconds between 180 and 600, that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hecAcknowledgmentTimeout")]
    pub hec_acknowledgment_timeout: Option<f64>,
    /// The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hecEndpoint")]
    pub hec_endpoint: Option<String>,
    /// The HEC endpoint type. Valid values are Raw or Event. The default value is Raw.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hecEndpointType")]
    pub hec_endpoint_type: Option<String>,
    /// The data processing configuration.  See processing_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "processingConfiguration")]
    pub processing_configuration: Option<DeliveryStreamStatusAtProviderSplunkConfigurationProcessingConfiguration>,
    /// After an initial failure to deliver to Splunk, the total amount of time, in seconds between 0 to 7200, during which Firehose re-attempts delivery (including the first attempt).  After this time has elapsed, the failed documents are written to Amazon S3.  The default value is 300s.  There will be no retry if the value is 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryDuration")]
    pub retry_duration: Option<f64>,
    /// Defines how documents should be delivered to Amazon S3.  Valid values are FailedEventsOnly and AllEvents.  Default value is FailedEventsOnly.
    /// secrets_manager_configuration -  The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if hec_token is not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3BackupMode")]
    pub s3_backup_mode: Option<String>,
    /// The S3 Configuration. See s3_configuration block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "s3Configuration")]
    pub s3_configuration: Option<DeliveryStreamStatusAtProviderSplunkConfigurationS3Configuration>,
    /// The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if user and private_key are not provided.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretsManagerConfiguration")]
    pub secrets_manager_configuration: Option<DeliveryStreamStatusAtProviderSplunkConfigurationSecretsManagerConfiguration>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderSplunkConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The data processing configuration.  See processing_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderSplunkConfigurationProcessingConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// Specifies the data processors as multiple blocks. See processors block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub processors: Option<Vec<DeliveryStreamStatusAtProviderSplunkConfigurationProcessingConfigurationProcessors>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderSplunkConfigurationProcessingConfigurationProcessors {
    /// Specifies the processor parameters as multiple blocks. See parameters block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Vec<DeliveryStreamStatusAtProviderSplunkConfigurationProcessingConfigurationProcessorsParameters>>,
    /// The type of processor. Valid Values: RecordDeAggregation, Lambda, MetadataExtraction, AppendDelimiterToRecord, Decompression, CloudWatchLogProcessing. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderSplunkConfigurationProcessingConfigurationProcessorsParameters {
    /// Parameter name. Valid Values: LambdaArn, NumberOfRetries, MetadataExtractionQuery, JsonParsingEngine, RoleArn, BufferSizeInMBs, BufferIntervalInSeconds, SubRecordType, Delimiter, CompressionFormat, DataMessageExtraction. Validation is done against AWS SDK constants; so values not explicitly listed may also work.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterName")]
    pub parameter_name: Option<String>,
    /// Parameter value. Must be between 1 and 512 length (inclusive). When providing a Lambda ARN, you should specify the resource version as well.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "parameterValue")]
    pub parameter_value: Option<String>,
}

/// The S3 Configuration. See s3_configuration block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderSplunkConfigurationS3Configuration {
    /// The ARN of the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketArn")]
    pub bucket_arn: Option<String>,
    /// Buffer incoming data for the specified period of time, in seconds between 0 to 60, before delivering it to the destination.  The default value is 60s.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingInterval")]
    pub buffering_interval: Option<f64>,
    /// Buffer incoming data to the specified size, in MBs between 1 to 5, before delivering it to the destination.  The default value is 5MB.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferingSize")]
    pub buffering_size: Option<f64>,
    /// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLoggingOptions")]
    pub cloudwatch_logging_options: Option<DeliveryStreamStatusAtProviderSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions>,
    /// The compression format. If no value is specified, the default is UNCOMPRESSED. Other supported values are GZIP, ZIP, Snappy, & HADOOP_SNAPPY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "compressionFormat")]
    pub compression_format: Option<String>,
    /// Prefix added to failed records before writing them to S3. Not currently supported for redshift destination. This prefix appears immediately following the bucket name. For information about how to specify this prefix, see Custom Prefixes for Amazon S3 Objects.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "errorOutputPrefix")]
    pub error_output_prefix: Option<String>,
    /// Specifies the KMS key ARN the stream will use to encrypt data. If not set, no encryption will
    /// be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
    /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. Note that if the prefix ends with a slash, it appears as a folder in the S3 bucket
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub prefix: Option<String>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
}

/// The CloudWatch Logging Options for the delivery stream. See cloudwatch_logging_options block below for details.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderSplunkConfigurationS3ConfigurationCloudwatchLoggingOptions {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The CloudWatch group name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroupName")]
    pub log_group_name: Option<String>,
    /// The CloudWatch log stream name for logging. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logStreamName")]
    pub log_stream_name: Option<String>,
}

/// The Secrets Manager configuration. See secrets_manager_configuration block below for details. This value is required if user and private_key are not provided.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct DeliveryStreamStatusAtProviderSplunkConfigurationSecretsManagerConfiguration {
    /// Enables or disables the logging. Defaults to false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    /// The ARN of the IAM role to be assumed by Firehose for calling the Amazon EC2 configuration API and for creating network interfaces. Make sure role has necessary IAM permissions
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleArn")]
    pub role_arn: Option<String>,
    /// The ARN of the Secrets Manager secret. This value is required if enabled is true.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretArn")]
    pub secret_arn: Option<String>,
}


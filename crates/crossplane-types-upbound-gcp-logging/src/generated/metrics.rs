// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// MetricSpec defines the desired state of Metric
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "logging.gcp.upbound.io", version = "v1beta2", kind = "Metric", plural = "metrics")]
#[kube(status = "MetricStatus")]
pub struct MetricSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<MetricDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: MetricForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<MetricInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<MetricProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<MetricPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<MetricWriteConnectionSecretToRef>,
}

/// MetricSpec defines the desired state of Metric
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricForProvider {
    /// The resource name of the Log Bucket that owns the Log Metric. Only Log Buckets in projects
    /// are supported. The bucket has to be in the same project as the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    pub bucket_name: Option<String>,
    /// Reference to a ProjectBucketConfig in logging to populate bucketName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketNameRef")]
    pub bucket_name_ref: Option<MetricForProviderBucketNameRef>,
    /// Selector for a ProjectBucketConfig in logging to populate bucketName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketNameSelector")]
    pub bucket_name_selector: Option<MetricForProviderBucketNameSelector>,
    /// The bucketOptions are required when the logs-based metric is using a DISTRIBUTION value type and it
    /// describes the bucket boundaries used to create a histogram of the extracted values.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketOptions")]
    pub bucket_options: Option<MetricForProviderBucketOptions>,
    /// A description of this metric, which is used in documentation. The maximum length of the
    /// description is 8000 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If set to True, then this metric is disabled and it does not generate any points.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-filters) which
    /// is used to match log entries.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    /// A map from a label key string to an extractor expression which is used to extract data from a log
    /// entry field and assign as the label value. Each label key specified in the LabelDescriptor must
    /// have an associated extractor expression in this map. The syntax of the extractor expression is
    /// the same as for the valueExtractor field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelExtractors")]
    pub label_extractors: Option<HashMap<String, String>>,
    /// The optional metric descriptor associated with the logs-based metric.
    /// If unspecified, it uses a default metric descriptor with a DELTA metric kind,
    /// INT64 value type, with no labels and a unit of "1". Such a metric counts the
    /// number of log entries matching the filter expression.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricDescriptor")]
    pub metric_descriptor: Option<MetricForProviderMetricDescriptor>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// A valueExtractor is required when using a distribution logs-based metric to extract the values to
    /// record from a log entry. Two functions are supported for value extraction - EXTRACT(field) or
    /// REGEXP_EXTRACT(field, regex). The argument are 1. field - The name of the log entry field from which
    /// the value is to be extracted. 2. regex - A regular expression using the Google RE2 syntax
    /// (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from the specified
    /// log entry field. The value of the field is converted to a string before applying the regex. It is an
    /// error to specify a regex that does not include exactly one capture group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueExtractor")]
    pub value_extractor: Option<String>,
}

/// Reference to a ProjectBucketConfig in logging to populate bucketName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricForProviderBucketNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MetricForProviderBucketNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricForProviderBucketNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MetricForProviderBucketNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MetricForProviderBucketNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricForProviderBucketNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricForProviderBucketNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ProjectBucketConfig in logging to populate bucketName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricForProviderBucketNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MetricForProviderBucketNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricForProviderBucketNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MetricForProviderBucketNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MetricForProviderBucketNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricForProviderBucketNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricForProviderBucketNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The bucketOptions are required when the logs-based metric is using a DISTRIBUTION value type and it
/// describes the bucket boundaries used to create a histogram of the extracted values.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricForProviderBucketOptions {
    /// Specifies a set of buckets with arbitrary widths.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "explicitBuckets")]
    pub explicit_buckets: Option<MetricForProviderBucketOptionsExplicitBuckets>,
    /// Specifies an exponential sequence of buckets that have a width that is proportional to the value of
    /// the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exponentialBuckets")]
    pub exponential_buckets: Option<MetricForProviderBucketOptionsExponentialBuckets>,
    /// Specifies a linear sequence of buckets that all have the same width (except overflow and underflow).
    /// Each bucket represents a constant absolute uncertainty on the specific value in the bucket.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linearBuckets")]
    pub linear_buckets: Option<MetricForProviderBucketOptionsLinearBuckets>,
}

/// Specifies a set of buckets with arbitrary widths.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricForProviderBucketOptionsExplicitBuckets {
    /// The values must be monotonically increasing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bounds: Option<Vec<f64>>,
}

/// Specifies an exponential sequence of buckets that have a width that is proportional to the value of
/// the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricForProviderBucketOptionsExponentialBuckets {
    /// Must be greater than 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "growthFactor")]
    pub growth_factor: Option<f64>,
    /// Must be greater than 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numFiniteBuckets")]
    pub num_finite_buckets: Option<f64>,
    /// Must be greater than 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scale: Option<f64>,
}

/// Specifies a linear sequence of buckets that all have the same width (except overflow and underflow).
/// Each bucket represents a constant absolute uncertainty on the specific value in the bucket.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricForProviderBucketOptionsLinearBuckets {
    /// Must be greater than 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numFiniteBuckets")]
    pub num_finite_buckets: Option<f64>,
    /// Lower bound of the first bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub offset: Option<f64>,
    /// Must be greater than 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub width: Option<f64>,
}

/// The optional metric descriptor associated with the logs-based metric.
/// If unspecified, it uses a default metric descriptor with a DELTA metric kind,
/// INT64 value type, with no labels and a unit of "1". Such a metric counts the
/// number of log entries matching the filter expression.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricForProviderMetricDescriptor {
    /// A concise name for the metric, which can be displayed in user interfaces. Use sentence case
    /// without an ending period, for example "Request count". This field is optional but it is
    /// recommended to be set for any metrics associated with user-visible concepts, such as Quota.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The set of labels that can be used to describe a specific instance of this metric type. For
    /// example, the appengine.googleapis.com/http/server/response_latencies metric type has a label
    /// for the HTTP response code, response_code, so you can look at latencies for successful responses
    /// or just for responses that failed.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<MetricForProviderMetricDescriptorLabels>>,
    /// Whether the metric records instantaneous values, changes to a value, etc.
    /// Some combinations of metricKind and valueType might not be supported.
    /// For counter metrics, set this to DELTA.
    /// Possible values are: DELTA, GAUGE, CUMULATIVE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricKind")]
    pub metric_kind: Option<String>,
    /// The unit in which the metric value is reported. It is only applicable if the valueType is
    /// INT64, DOUBLE, or DISTRIBUTION. The supported units are a subset of
    /// The Unified Code for Units of Measure standard
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    /// Whether the measurement is an integer, a floating-point number, etc.
    /// Some combinations of metricKind and valueType might not be supported.
    /// For counter metrics, set this to INT64.
    /// Possible values are: BOOL, INT64, DOUBLE, STRING, DISTRIBUTION, MONEY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueType")]
    pub value_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricForProviderMetricDescriptorLabels {
    /// A human-readable description for the label.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The label key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Whether the measurement is an integer, a floating-point number, etc.
    /// Some combinations of metricKind and valueType might not be supported.
    /// For counter metrics, set this to INT64.
    /// Possible values are: BOOL, INT64, DOUBLE, STRING, DISTRIBUTION, MONEY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueType")]
    pub value_type: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricInitProvider {
    /// The resource name of the Log Bucket that owns the Log Metric. Only Log Buckets in projects
    /// are supported. The bucket has to be in the same project as the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    pub bucket_name: Option<String>,
    /// Reference to a ProjectBucketConfig in logging to populate bucketName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketNameRef")]
    pub bucket_name_ref: Option<MetricInitProviderBucketNameRef>,
    /// Selector for a ProjectBucketConfig in logging to populate bucketName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketNameSelector")]
    pub bucket_name_selector: Option<MetricInitProviderBucketNameSelector>,
    /// The bucketOptions are required when the logs-based metric is using a DISTRIBUTION value type and it
    /// describes the bucket boundaries used to create a histogram of the extracted values.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketOptions")]
    pub bucket_options: Option<MetricInitProviderBucketOptions>,
    /// A description of this metric, which is used in documentation. The maximum length of the
    /// description is 8000 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If set to True, then this metric is disabled and it does not generate any points.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-filters) which
    /// is used to match log entries.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    /// A map from a label key string to an extractor expression which is used to extract data from a log
    /// entry field and assign as the label value. Each label key specified in the LabelDescriptor must
    /// have an associated extractor expression in this map. The syntax of the extractor expression is
    /// the same as for the valueExtractor field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelExtractors")]
    pub label_extractors: Option<HashMap<String, String>>,
    /// The optional metric descriptor associated with the logs-based metric.
    /// If unspecified, it uses a default metric descriptor with a DELTA metric kind,
    /// INT64 value type, with no labels and a unit of "1". Such a metric counts the
    /// number of log entries matching the filter expression.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricDescriptor")]
    pub metric_descriptor: Option<MetricInitProviderMetricDescriptor>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// A valueExtractor is required when using a distribution logs-based metric to extract the values to
    /// record from a log entry. Two functions are supported for value extraction - EXTRACT(field) or
    /// REGEXP_EXTRACT(field, regex). The argument are 1. field - The name of the log entry field from which
    /// the value is to be extracted. 2. regex - A regular expression using the Google RE2 syntax
    /// (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from the specified
    /// log entry field. The value of the field is converted to a string before applying the regex. It is an
    /// error to specify a regex that does not include exactly one capture group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueExtractor")]
    pub value_extractor: Option<String>,
}

/// Reference to a ProjectBucketConfig in logging to populate bucketName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricInitProviderBucketNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MetricInitProviderBucketNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricInitProviderBucketNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MetricInitProviderBucketNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MetricInitProviderBucketNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricInitProviderBucketNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricInitProviderBucketNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a ProjectBucketConfig in logging to populate bucketName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricInitProviderBucketNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MetricInitProviderBucketNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricInitProviderBucketNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MetricInitProviderBucketNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MetricInitProviderBucketNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricInitProviderBucketNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricInitProviderBucketNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The bucketOptions are required when the logs-based metric is using a DISTRIBUTION value type and it
/// describes the bucket boundaries used to create a histogram of the extracted values.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricInitProviderBucketOptions {
    /// Specifies a set of buckets with arbitrary widths.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "explicitBuckets")]
    pub explicit_buckets: Option<MetricInitProviderBucketOptionsExplicitBuckets>,
    /// Specifies an exponential sequence of buckets that have a width that is proportional to the value of
    /// the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exponentialBuckets")]
    pub exponential_buckets: Option<MetricInitProviderBucketOptionsExponentialBuckets>,
    /// Specifies a linear sequence of buckets that all have the same width (except overflow and underflow).
    /// Each bucket represents a constant absolute uncertainty on the specific value in the bucket.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linearBuckets")]
    pub linear_buckets: Option<MetricInitProviderBucketOptionsLinearBuckets>,
}

/// Specifies a set of buckets with arbitrary widths.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricInitProviderBucketOptionsExplicitBuckets {
    /// The values must be monotonically increasing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bounds: Option<Vec<f64>>,
}

/// Specifies an exponential sequence of buckets that have a width that is proportional to the value of
/// the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricInitProviderBucketOptionsExponentialBuckets {
    /// Must be greater than 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "growthFactor")]
    pub growth_factor: Option<f64>,
    /// Must be greater than 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numFiniteBuckets")]
    pub num_finite_buckets: Option<f64>,
    /// Must be greater than 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scale: Option<f64>,
}

/// Specifies a linear sequence of buckets that all have the same width (except overflow and underflow).
/// Each bucket represents a constant absolute uncertainty on the specific value in the bucket.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricInitProviderBucketOptionsLinearBuckets {
    /// Must be greater than 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numFiniteBuckets")]
    pub num_finite_buckets: Option<f64>,
    /// Lower bound of the first bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub offset: Option<f64>,
    /// Must be greater than 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub width: Option<f64>,
}

/// The optional metric descriptor associated with the logs-based metric.
/// If unspecified, it uses a default metric descriptor with a DELTA metric kind,
/// INT64 value type, with no labels and a unit of "1". Such a metric counts the
/// number of log entries matching the filter expression.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricInitProviderMetricDescriptor {
    /// A concise name for the metric, which can be displayed in user interfaces. Use sentence case
    /// without an ending period, for example "Request count". This field is optional but it is
    /// recommended to be set for any metrics associated with user-visible concepts, such as Quota.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The set of labels that can be used to describe a specific instance of this metric type. For
    /// example, the appengine.googleapis.com/http/server/response_latencies metric type has a label
    /// for the HTTP response code, response_code, so you can look at latencies for successful responses
    /// or just for responses that failed.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<MetricInitProviderMetricDescriptorLabels>>,
    /// Whether the metric records instantaneous values, changes to a value, etc.
    /// Some combinations of metricKind and valueType might not be supported.
    /// For counter metrics, set this to DELTA.
    /// Possible values are: DELTA, GAUGE, CUMULATIVE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricKind")]
    pub metric_kind: Option<String>,
    /// The unit in which the metric value is reported. It is only applicable if the valueType is
    /// INT64, DOUBLE, or DISTRIBUTION. The supported units are a subset of
    /// The Unified Code for Units of Measure standard
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    /// Whether the measurement is an integer, a floating-point number, etc.
    /// Some combinations of metricKind and valueType might not be supported.
    /// For counter metrics, set this to INT64.
    /// Possible values are: BOOL, INT64, DOUBLE, STRING, DISTRIBUTION, MONEY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueType")]
    pub value_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricInitProviderMetricDescriptorLabels {
    /// A human-readable description for the label.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The label key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Whether the measurement is an integer, a floating-point number, etc.
    /// Some combinations of metricKind and valueType might not be supported.
    /// For counter metrics, set this to INT64.
    /// Possible values are: BOOL, INT64, DOUBLE, STRING, DISTRIBUTION, MONEY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueType")]
    pub value_type: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MetricProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MetricProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MetricProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<MetricPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<MetricPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<MetricPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<MetricPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<MetricPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum MetricPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// MetricStatus defines the observed state of Metric.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<MetricStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricStatusAtProvider {
    /// The resource name of the Log Bucket that owns the Log Metric. Only Log Buckets in projects
    /// are supported. The bucket has to be in the same project as the metric.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketName")]
    pub bucket_name: Option<String>,
    /// The bucketOptions are required when the logs-based metric is using a DISTRIBUTION value type and it
    /// describes the bucket boundaries used to create a histogram of the extracted values.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bucketOptions")]
    pub bucket_options: Option<MetricStatusAtProviderBucketOptions>,
    /// A description of this metric, which is used in documentation. The maximum length of the
    /// description is 8000 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If set to True, then this metric is disabled and it does not generate any points.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// An advanced logs filter (https://cloud.google.com/logging/docs/view/advanced-filters) which
    /// is used to match log entries.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    /// an identifier for the resource with format {{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// A map from a label key string to an extractor expression which is used to extract data from a log
    /// entry field and assign as the label value. Each label key specified in the LabelDescriptor must
    /// have an associated extractor expression in this map. The syntax of the extractor expression is
    /// the same as for the valueExtractor field.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "labelExtractors")]
    pub label_extractors: Option<HashMap<String, String>>,
    /// The optional metric descriptor associated with the logs-based metric.
    /// If unspecified, it uses a default metric descriptor with a DELTA metric kind,
    /// INT64 value type, with no labels and a unit of "1". Such a metric counts the
    /// number of log entries matching the filter expression.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricDescriptor")]
    pub metric_descriptor: Option<MetricStatusAtProviderMetricDescriptor>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// A valueExtractor is required when using a distribution logs-based metric to extract the values to
    /// record from a log entry. Two functions are supported for value extraction - EXTRACT(field) or
    /// REGEXP_EXTRACT(field, regex). The argument are 1. field - The name of the log entry field from which
    /// the value is to be extracted. 2. regex - A regular expression using the Google RE2 syntax
    /// (https://github.com/google/re2/wiki/Syntax) with a single capture group to extract data from the specified
    /// log entry field. The value of the field is converted to a string before applying the regex. It is an
    /// error to specify a regex that does not include exactly one capture group.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueExtractor")]
    pub value_extractor: Option<String>,
}

/// The bucketOptions are required when the logs-based metric is using a DISTRIBUTION value type and it
/// describes the bucket boundaries used to create a histogram of the extracted values.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricStatusAtProviderBucketOptions {
    /// Specifies a set of buckets with arbitrary widths.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "explicitBuckets")]
    pub explicit_buckets: Option<MetricStatusAtProviderBucketOptionsExplicitBuckets>,
    /// Specifies an exponential sequence of buckets that have a width that is proportional to the value of
    /// the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exponentialBuckets")]
    pub exponential_buckets: Option<MetricStatusAtProviderBucketOptionsExponentialBuckets>,
    /// Specifies a linear sequence of buckets that all have the same width (except overflow and underflow).
    /// Each bucket represents a constant absolute uncertainty on the specific value in the bucket.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "linearBuckets")]
    pub linear_buckets: Option<MetricStatusAtProviderBucketOptionsLinearBuckets>,
}

/// Specifies a set of buckets with arbitrary widths.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricStatusAtProviderBucketOptionsExplicitBuckets {
    /// The values must be monotonically increasing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bounds: Option<Vec<f64>>,
}

/// Specifies an exponential sequence of buckets that have a width that is proportional to the value of
/// the lower bound. Each bucket represents a constant relative uncertainty on a specific value in the bucket.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricStatusAtProviderBucketOptionsExponentialBuckets {
    /// Must be greater than 1.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "growthFactor")]
    pub growth_factor: Option<f64>,
    /// Must be greater than 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numFiniteBuckets")]
    pub num_finite_buckets: Option<f64>,
    /// Must be greater than 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scale: Option<f64>,
}

/// Specifies a linear sequence of buckets that all have the same width (except overflow and underflow).
/// Each bucket represents a constant absolute uncertainty on the specific value in the bucket.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricStatusAtProviderBucketOptionsLinearBuckets {
    /// Must be greater than 0.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numFiniteBuckets")]
    pub num_finite_buckets: Option<f64>,
    /// Lower bound of the first bucket.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub offset: Option<f64>,
    /// Must be greater than 0.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub width: Option<f64>,
}

/// The optional metric descriptor associated with the logs-based metric.
/// If unspecified, it uses a default metric descriptor with a DELTA metric kind,
/// INT64 value type, with no labels and a unit of "1". Such a metric counts the
/// number of log entries matching the filter expression.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricStatusAtProviderMetricDescriptor {
    /// A concise name for the metric, which can be displayed in user interfaces. Use sentence case
    /// without an ending period, for example "Request count". This field is optional but it is
    /// recommended to be set for any metrics associated with user-visible concepts, such as Quota.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// The set of labels that can be used to describe a specific instance of this metric type. For
    /// example, the appengine.googleapis.com/http/server/response_latencies metric type has a label
    /// for the HTTP response code, response_code, so you can look at latencies for successful responses
    /// or just for responses that failed.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<Vec<MetricStatusAtProviderMetricDescriptorLabels>>,
    /// Whether the metric records instantaneous values, changes to a value, etc.
    /// Some combinations of metricKind and valueType might not be supported.
    /// For counter metrics, set this to DELTA.
    /// Possible values are: DELTA, GAUGE, CUMULATIVE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "metricKind")]
    pub metric_kind: Option<String>,
    /// The unit in which the metric value is reported. It is only applicable if the valueType is
    /// INT64, DOUBLE, or DISTRIBUTION. The supported units are a subset of
    /// The Unified Code for Units of Measure standard
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub unit: Option<String>,
    /// Whether the measurement is an integer, a floating-point number, etc.
    /// Some combinations of metricKind and valueType might not be supported.
    /// For counter metrics, set this to INT64.
    /// Possible values are: BOOL, INT64, DOUBLE, STRING, DISTRIBUTION, MONEY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueType")]
    pub value_type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct MetricStatusAtProviderMetricDescriptorLabels {
    /// A human-readable description for the label.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The label key.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub key: Option<String>,
    /// Whether the measurement is an integer, a floating-point number, etc.
    /// Some combinations of metricKind and valueType might not be supported.
    /// For counter metrics, set this to INT64.
    /// Possible values are: BOOL, INT64, DOUBLE, STRING, DISTRIBUTION, MONEY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueType")]
    pub value_type: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// FolderSinkSpec defines the desired state of FolderSink
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "logging.gcp.upbound.io", version = "v1beta2", kind = "FolderSink", plural = "foldersinks")]
#[kube(status = "FolderSinkStatus")]
pub struct FolderSinkSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<FolderSinkDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: FolderSinkForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<FolderSinkInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<FolderSinkProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<FolderSinkPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<FolderSinkWriteConnectionSecretToRef>,
}

/// FolderSinkSpec defines the desired state of FolderSink
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FolderSinkDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkForProvider {
    /// Options that affect sinks exporting data to BigQuery. Structure documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bigqueryOptions")]
    pub bigquery_options: Option<FolderSinkForProviderBigqueryOptions>,
    /// A description of this sink. The maximum length of the description is 8000 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The destination of the sink (or, in other words, where logs are written to). Can be a Cloud Storage bucket, a PubSub topic, a BigQuery dataset, a Cloud Logging bucket, or a Google Cloud project. Examples:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<String>,
    /// If set to True, then this sink is disabled and it does not export any log entries.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both filter and one of exclusions.filter, it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclusions: Option<Vec<FolderSinkForProviderExclusions>>,
    /// The filter to apply when exporting logs. Only log entries that match the filter are exported.
    /// See Advanced Log Filters for information on how to
    /// write a filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    /// The folder to be exported to the sink. Note that either [FOLDER_ID] or folders/[FOLDER_ID] is
    /// accepted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub folder: Option<String>,
    /// Reference to a Folder in cloudplatform to populate folder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "folderRef")]
    pub folder_ref: Option<FolderSinkForProviderFolderRef>,
    /// Selector for a Folder in cloudplatform to populate folder.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "folderSelector")]
    pub folder_selector: Option<FolderSinkForProviderFolderSelector>,
    /// Whether or not to include children folders in the sink export. If true, logs
    /// associated with child projects are also exported; otherwise only logs relating to the provided folder are included.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeChildren")]
    pub include_children: Option<bool>,
    /// Whether or not to intercept logs from child projects. If true, matching logs will not
    /// match with sinks in child resources, except _Required sinks. This sink will be visible to child resources when listing sinks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "interceptChildren")]
    pub intercept_children: Option<bool>,
}

/// Options that affect sinks exporting data to BigQuery. Structure documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkForProviderBigqueryOptions {
    /// Whether to use BigQuery's partition tables.
    /// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
    /// tables, the date suffix is no longer present and special query syntax
    /// has to be used instead. In both cases, tables are sharded based on UTC timezone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usePartitionedTables")]
    pub use_partitioned_tables: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkForProviderExclusions {
    /// A description of this exclusion.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If set to True, then this exclusion is disabled and it does not exclude any log entries.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// An advanced logs filter that matches the log entries to be excluded. By using the sample function, you can exclude less than 100% of the matching log entries. See Advanced Log Filters for information on how to
    /// write a filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    /// A client-assigned identifier, such as load-balancer-exclusion. Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Reference to a Folder in cloudplatform to populate folder.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkForProviderFolderRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FolderSinkForProviderFolderRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkForProviderFolderRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FolderSinkForProviderFolderRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FolderSinkForProviderFolderRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FolderSinkForProviderFolderRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FolderSinkForProviderFolderRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Folder in cloudplatform to populate folder.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkForProviderFolderSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FolderSinkForProviderFolderSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkForProviderFolderSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FolderSinkForProviderFolderSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FolderSinkForProviderFolderSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FolderSinkForProviderFolderSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FolderSinkForProviderFolderSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkInitProvider {
    /// Options that affect sinks exporting data to BigQuery. Structure documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bigqueryOptions")]
    pub bigquery_options: Option<FolderSinkInitProviderBigqueryOptions>,
    /// A description of this sink. The maximum length of the description is 8000 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The destination of the sink (or, in other words, where logs are written to). Can be a Cloud Storage bucket, a PubSub topic, a BigQuery dataset, a Cloud Logging bucket, or a Google Cloud project. Examples:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<String>,
    /// If set to True, then this sink is disabled and it does not export any log entries.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both filter and one of exclusions.filter, it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclusions: Option<Vec<FolderSinkInitProviderExclusions>>,
    /// The filter to apply when exporting logs. Only log entries that match the filter are exported.
    /// See Advanced Log Filters for information on how to
    /// write a filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    /// Whether or not to include children folders in the sink export. If true, logs
    /// associated with child projects are also exported; otherwise only logs relating to the provided folder are included.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeChildren")]
    pub include_children: Option<bool>,
    /// Whether or not to intercept logs from child projects. If true, matching logs will not
    /// match with sinks in child resources, except _Required sinks. This sink will be visible to child resources when listing sinks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "interceptChildren")]
    pub intercept_children: Option<bool>,
}

/// Options that affect sinks exporting data to BigQuery. Structure documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkInitProviderBigqueryOptions {
    /// Whether to use BigQuery's partition tables.
    /// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
    /// tables, the date suffix is no longer present and special query syntax
    /// has to be used instead. In both cases, tables are sharded based on UTC timezone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usePartitionedTables")]
    pub use_partitioned_tables: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkInitProviderExclusions {
    /// A description of this exclusion.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If set to True, then this exclusion is disabled and it does not exclude any log entries.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// An advanced logs filter that matches the log entries to be excluded. By using the sample function, you can exclude less than 100% of the matching log entries. See Advanced Log Filters for information on how to
    /// write a filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    /// A client-assigned identifier, such as load-balancer-exclusion. Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FolderSinkProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FolderSinkProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FolderSinkProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FolderSinkProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FolderSinkProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<FolderSinkPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<FolderSinkPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FolderSinkPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FolderSinkPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FolderSinkPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FolderSinkPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FolderSinkPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// FolderSinkStatus defines the observed state of FolderSink.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<FolderSinkStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkStatusAtProvider {
    /// Options that affect sinks exporting data to BigQuery. Structure documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bigqueryOptions")]
    pub bigquery_options: Option<FolderSinkStatusAtProviderBigqueryOptions>,
    /// A description of this sink. The maximum length of the description is 8000 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The destination of the sink (or, in other words, where logs are written to). Can be a Cloud Storage bucket, a PubSub topic, a BigQuery dataset, a Cloud Logging bucket, or a Google Cloud project. Examples:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub destination: Option<String>,
    /// If set to True, then this sink is disabled and it does not export any log entries.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// Log entries that match any of the exclusion filters will not be exported. If a log entry is matched by both filter and one of exclusions.filter, it will not be exported.  Can be repeated multiple times for multiple exclusions. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exclusions: Option<Vec<FolderSinkStatusAtProviderExclusions>>,
    /// The filter to apply when exporting logs. Only log entries that match the filter are exported.
    /// See Advanced Log Filters for information on how to
    /// write a filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    /// The folder to be exported to the sink. Note that either [FOLDER_ID] or folders/[FOLDER_ID] is
    /// accepted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub folder: Option<String>,
    /// an identifier for the resource with format folders/{{folder_id}}/sinks/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Whether or not to include children folders in the sink export. If true, logs
    /// associated with child projects are also exported; otherwise only logs relating to the provided folder are included.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "includeChildren")]
    pub include_children: Option<bool>,
    /// Whether or not to intercept logs from child projects. If true, matching logs will not
    /// match with sinks in child resources, except _Required sinks. This sink will be visible to child resources when listing sinks.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "interceptChildren")]
    pub intercept_children: Option<bool>,
    /// The identity associated with this sink. This identity must be granted write access to the
    /// configured destination.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writerIdentity")]
    pub writer_identity: Option<String>,
}

/// Options that affect sinks exporting data to BigQuery. Structure documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkStatusAtProviderBigqueryOptions {
    /// Whether to use BigQuery's partition tables.
    /// By default, Logging creates dated tables based on the log entries' timestamps, e.g. syslog_20170523. With partitioned
    /// tables, the date suffix is no longer present and special query syntax
    /// has to be used instead. In both cases, tables are sharded based on UTC timezone.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "usePartitionedTables")]
    pub use_partitioned_tables: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FolderSinkStatusAtProviderExclusions {
    /// A description of this exclusion.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If set to True, then this exclusion is disabled and it does not exclude any log entries.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// An advanced logs filter that matches the log entries to be excluded. By using the sample function, you can exclude less than 100% of the matching log entries. See Advanced Log Filters for information on how to
    /// write a filter.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub filter: Option<String>,
    /// A client-assigned identifier, such as load-balancer-exclusion. Identifiers are limited to 100 characters and can include only letters, digits, underscores, hyphens, and periods. First character has to be alphanumeric.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}


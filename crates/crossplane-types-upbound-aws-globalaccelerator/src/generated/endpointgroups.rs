// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// EndpointGroupSpec defines the desired state of EndpointGroup
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "globalaccelerator.aws.upbound.io", version = "v1beta1", kind = "EndpointGroup", plural = "endpointgroups")]
#[kube(status = "EndpointGroupStatus")]
pub struct EndpointGroupSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<EndpointGroupDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: EndpointGroupForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<EndpointGroupInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<EndpointGroupProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<EndpointGroupPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<EndpointGroupWriteConnectionSecretToRef>,
}

/// EndpointGroupSpec defines the desired state of EndpointGroup
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointGroupDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupForProvider {
    /// The list of endpoint objects. Fields documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointConfiguration")]
    pub endpoint_configuration: Option<Vec<EndpointGroupForProviderEndpointConfiguration>>,
    /// The name of the AWS Region where the endpoint group is located.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointGroupRegion")]
    pub endpoint_group_region: Option<String>,
    /// The time—10 seconds or 30 seconds—between each health check for an endpoint. The default value is 30.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckIntervalSeconds")]
    pub health_check_interval_seconds: Option<f64>,
    /// If the protocol is HTTP/S, then this specifies the path that is the destination for health check targets. The default value is slash (/).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckPath")]
    pub health_check_path: Option<String>,
    /// The port that AWS Global Accelerator uses to check the health of endpoints that are part of this endpoint group. The default port is the listener port that this endpoint group is associated with. If listener port is a list of ports, Global Accelerator uses the first port in the list.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckPort")]
    pub health_check_port: Option<f64>,
    /// The protocol that AWS Global Accelerator uses to check the health of endpoints that are part of this endpoint group. The default value is TCP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckProtocol")]
    pub health_check_protocol: Option<String>,
    /// The Amazon Resource Name (ARN) of the listener.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerArn")]
    pub listener_arn: Option<String>,
    /// Reference to a Listener in globalaccelerator to populate listenerArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerArnRef")]
    pub listener_arn_ref: Option<EndpointGroupForProviderListenerArnRef>,
    /// Selector for a Listener in globalaccelerator to populate listenerArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerArnSelector")]
    pub listener_arn_selector: Option<EndpointGroupForProviderListenerArnSelector>,
    /// Override specific listener ports used to route traffic to endpoints that are part of this endpoint group. Fields documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portOverride")]
    pub port_override: Option<Vec<EndpointGroupForProviderPortOverride>>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// The number of consecutive health checks required to set the state of a healthy endpoint to unhealthy, or to set an unhealthy endpoint to healthy. The default value is 3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdCount")]
    pub threshold_count: Option<f64>,
    /// The percentage of traffic to send to an AWS Region. Additional traffic is distributed to other endpoint groups for this listener. The default value is 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trafficDialPercentage")]
    pub traffic_dial_percentage: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupForProviderEndpointConfiguration {
    /// An ARN of an exposed cross-account attachment. See the AWS documentation for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachmentArn")]
    pub attachment_arn: Option<String>,
    /// Indicates whether client IP address preservation is enabled for an Application Load Balancer endpoint. See the AWS documentation for more details. The default value is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientIpPreservationEnabled")]
    pub client_ip_preservation_enabled: Option<bool>,
    /// An ID for the endpoint. If the endpoint is a Network Load Balancer or Application Load Balancer, this is the Amazon Resource Name (ARN) of the resource. If the endpoint is an Elastic IP address, this is the Elastic IP address allocation ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointId")]
    pub endpoint_id: Option<String>,
    /// The weight associated with the endpoint. When you add weights to endpoints, you configure AWS Global Accelerator to route traffic based on proportions that you specify.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<f64>,
}

/// Reference to a Listener in globalaccelerator to populate listenerArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupForProviderListenerArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointGroupForProviderListenerArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupForProviderListenerArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointGroupForProviderListenerArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointGroupForProviderListenerArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointGroupForProviderListenerArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointGroupForProviderListenerArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Listener in globalaccelerator to populate listenerArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupForProviderListenerArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointGroupForProviderListenerArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupForProviderListenerArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointGroupForProviderListenerArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointGroupForProviderListenerArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointGroupForProviderListenerArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointGroupForProviderListenerArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupForProviderPortOverride {
    /// The endpoint port that you want a listener port to be mapped to. This is the port on the endpoint, such as the Application Load Balancer or Amazon EC2 instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointPort")]
    pub endpoint_port: Option<f64>,
    /// The listener port that you want to map to a specific endpoint port. This is the port that user traffic arrives to the Global Accelerator on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerPort")]
    pub listener_port: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupInitProvider {
    /// The list of endpoint objects. Fields documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointConfiguration")]
    pub endpoint_configuration: Option<Vec<EndpointGroupInitProviderEndpointConfiguration>>,
    /// The name of the AWS Region where the endpoint group is located.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointGroupRegion")]
    pub endpoint_group_region: Option<String>,
    /// The time—10 seconds or 30 seconds—between each health check for an endpoint. The default value is 30.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckIntervalSeconds")]
    pub health_check_interval_seconds: Option<f64>,
    /// If the protocol is HTTP/S, then this specifies the path that is the destination for health check targets. The default value is slash (/).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckPath")]
    pub health_check_path: Option<String>,
    /// The port that AWS Global Accelerator uses to check the health of endpoints that are part of this endpoint group. The default port is the listener port that this endpoint group is associated with. If listener port is a list of ports, Global Accelerator uses the first port in the list.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckPort")]
    pub health_check_port: Option<f64>,
    /// The protocol that AWS Global Accelerator uses to check the health of endpoints that are part of this endpoint group. The default value is TCP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckProtocol")]
    pub health_check_protocol: Option<String>,
    /// The Amazon Resource Name (ARN) of the listener.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerArn")]
    pub listener_arn: Option<String>,
    /// Reference to a Listener in globalaccelerator to populate listenerArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerArnRef")]
    pub listener_arn_ref: Option<EndpointGroupInitProviderListenerArnRef>,
    /// Selector for a Listener in globalaccelerator to populate listenerArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerArnSelector")]
    pub listener_arn_selector: Option<EndpointGroupInitProviderListenerArnSelector>,
    /// Override specific listener ports used to route traffic to endpoints that are part of this endpoint group. Fields documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portOverride")]
    pub port_override: Option<Vec<EndpointGroupInitProviderPortOverride>>,
    /// The number of consecutive health checks required to set the state of a healthy endpoint to unhealthy, or to set an unhealthy endpoint to healthy. The default value is 3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdCount")]
    pub threshold_count: Option<f64>,
    /// The percentage of traffic to send to an AWS Region. Additional traffic is distributed to other endpoint groups for this listener. The default value is 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trafficDialPercentage")]
    pub traffic_dial_percentage: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupInitProviderEndpointConfiguration {
    /// An ARN of an exposed cross-account attachment. See the AWS documentation for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachmentArn")]
    pub attachment_arn: Option<String>,
    /// Indicates whether client IP address preservation is enabled for an Application Load Balancer endpoint. See the AWS documentation for more details. The default value is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientIpPreservationEnabled")]
    pub client_ip_preservation_enabled: Option<bool>,
    /// An ID for the endpoint. If the endpoint is a Network Load Balancer or Application Load Balancer, this is the Amazon Resource Name (ARN) of the resource. If the endpoint is an Elastic IP address, this is the Elastic IP address allocation ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointId")]
    pub endpoint_id: Option<String>,
    /// The weight associated with the endpoint. When you add weights to endpoints, you configure AWS Global Accelerator to route traffic based on proportions that you specify.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<f64>,
}

/// Reference to a Listener in globalaccelerator to populate listenerArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupInitProviderListenerArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointGroupInitProviderListenerArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupInitProviderListenerArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointGroupInitProviderListenerArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointGroupInitProviderListenerArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointGroupInitProviderListenerArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointGroupInitProviderListenerArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Listener in globalaccelerator to populate listenerArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupInitProviderListenerArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointGroupInitProviderListenerArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupInitProviderListenerArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointGroupInitProviderListenerArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointGroupInitProviderListenerArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointGroupInitProviderListenerArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointGroupInitProviderListenerArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupInitProviderPortOverride {
    /// The endpoint port that you want a listener port to be mapped to. This is the port on the endpoint, such as the Application Load Balancer or Amazon EC2 instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointPort")]
    pub endpoint_port: Option<f64>,
    /// The listener port that you want to map to a specific endpoint port. This is the port that user traffic arrives to the Global Accelerator on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerPort")]
    pub listener_port: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointGroupProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointGroupProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointGroupProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointGroupProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointGroupProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<EndpointGroupPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<EndpointGroupPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<EndpointGroupPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<EndpointGroupPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<EndpointGroupPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointGroupPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum EndpointGroupPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// EndpointGroupStatus defines the observed state of EndpointGroup.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<EndpointGroupStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupStatusAtProvider {
    /// The Amazon Resource Name (ARN) of the endpoint group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// The list of endpoint objects. Fields documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointConfiguration")]
    pub endpoint_configuration: Option<Vec<EndpointGroupStatusAtProviderEndpointConfiguration>>,
    /// The name of the AWS Region where the endpoint group is located.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointGroupRegion")]
    pub endpoint_group_region: Option<String>,
    /// The time—10 seconds or 30 seconds—between each health check for an endpoint. The default value is 30.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckIntervalSeconds")]
    pub health_check_interval_seconds: Option<f64>,
    /// If the protocol is HTTP/S, then this specifies the path that is the destination for health check targets. The default value is slash (/).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckPath")]
    pub health_check_path: Option<String>,
    /// The port that AWS Global Accelerator uses to check the health of endpoints that are part of this endpoint group. The default port is the listener port that this endpoint group is associated with. If listener port is a list of ports, Global Accelerator uses the first port in the list.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckPort")]
    pub health_check_port: Option<f64>,
    /// The protocol that AWS Global Accelerator uses to check the health of endpoints that are part of this endpoint group. The default value is TCP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "healthCheckProtocol")]
    pub health_check_protocol: Option<String>,
    /// The Amazon Resource Name (ARN) of the endpoint group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The Amazon Resource Name (ARN) of the listener.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerArn")]
    pub listener_arn: Option<String>,
    /// Override specific listener ports used to route traffic to endpoints that are part of this endpoint group. Fields documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "portOverride")]
    pub port_override: Option<Vec<EndpointGroupStatusAtProviderPortOverride>>,
    /// The number of consecutive health checks required to set the state of a healthy endpoint to unhealthy, or to set an unhealthy endpoint to healthy. The default value is 3.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "thresholdCount")]
    pub threshold_count: Option<f64>,
    /// The percentage of traffic to send to an AWS Region. Additional traffic is distributed to other endpoint groups for this listener. The default value is 100.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trafficDialPercentage")]
    pub traffic_dial_percentage: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupStatusAtProviderEndpointConfiguration {
    /// An ARN of an exposed cross-account attachment. See the AWS documentation for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "attachmentArn")]
    pub attachment_arn: Option<String>,
    /// Indicates whether client IP address preservation is enabled for an Application Load Balancer endpoint. See the AWS documentation for more details. The default value is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientIpPreservationEnabled")]
    pub client_ip_preservation_enabled: Option<bool>,
    /// An ID for the endpoint. If the endpoint is a Network Load Balancer or Application Load Balancer, this is the Amazon Resource Name (ARN) of the resource. If the endpoint is an Elastic IP address, this is the Elastic IP address allocation ID.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointId")]
    pub endpoint_id: Option<String>,
    /// The weight associated with the endpoint. When you add weights to endpoints, you configure AWS Global Accelerator to route traffic based on proportions that you specify.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct EndpointGroupStatusAtProviderPortOverride {
    /// The endpoint port that you want a listener port to be mapped to. This is the port on the endpoint, such as the Application Load Balancer or Amazon EC2 instance.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "endpointPort")]
    pub endpoint_port: Option<f64>,
    /// The listener port that you want to map to a specific endpoint port. This is the port that user traffic arrives to the Global Accelerator on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "listenerPort")]
    pub listener_port: Option<f64>,
}


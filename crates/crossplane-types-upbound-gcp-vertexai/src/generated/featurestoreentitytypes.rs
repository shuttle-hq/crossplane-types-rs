// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// FeaturestoreEntitytypeSpec defines the desired state of FeaturestoreEntitytype
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "vertexai.gcp.upbound.io", version = "v1beta2", kind = "FeaturestoreEntitytype", plural = "featurestoreentitytypes")]
#[kube(status = "FeaturestoreEntitytypeStatus")]
pub struct FeaturestoreEntitytypeSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<FeaturestoreEntitytypeDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: FeaturestoreEntitytypeForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<FeaturestoreEntitytypeInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<FeaturestoreEntitytypeProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<FeaturestoreEntitytypePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<FeaturestoreEntitytypeWriteConnectionSecretToRef>,
}

/// FeaturestoreEntitytypeSpec defines the desired state of FeaturestoreEntitytype
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeaturestoreEntitytypeDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeForProvider {
    /// Optional. Description of the EntityType.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub featurestore: Option<String>,
    /// Reference to a Featurestore in vertexai to populate featurestore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featurestoreRef")]
    pub featurestore_ref: Option<FeaturestoreEntitytypeForProviderFeaturestoreRef>,
    /// Selector for a Featurestore in vertexai to populate featurestore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featurestoreSelector")]
    pub featurestore_selector: Option<FeaturestoreEntitytypeForProviderFeaturestoreSelector>,
    /// A set of key/value label pairs to assign to this EntityType.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The default monitoring configuration for all Features under this EntityType.
    /// If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringConfig")]
    pub monitoring_config: Option<FeaturestoreEntitytypeForProviderMonitoringConfig>,
    /// The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Reference to a Featurestore in vertexai to populate featurestore.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeForProviderFeaturestoreRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FeaturestoreEntitytypeForProviderFeaturestoreRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeForProviderFeaturestoreRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FeaturestoreEntitytypeForProviderFeaturestoreRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FeaturestoreEntitytypeForProviderFeaturestoreRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeaturestoreEntitytypeForProviderFeaturestoreRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeaturestoreEntitytypeForProviderFeaturestoreRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Featurestore in vertexai to populate featurestore.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeForProviderFeaturestoreSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FeaturestoreEntitytypeForProviderFeaturestoreSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeForProviderFeaturestoreSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FeaturestoreEntitytypeForProviderFeaturestoreSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FeaturestoreEntitytypeForProviderFeaturestoreSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeaturestoreEntitytypeForProviderFeaturestoreSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeaturestoreEntitytypeForProviderFeaturestoreSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The default monitoring configuration for all Features under this EntityType.
/// If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeForProviderMonitoringConfig {
    /// Threshold for categorical features of anomaly detection. This is shared by all types of Featurestore Monitoring for categorical features (i.e. Features with type (Feature.ValueType) BOOL or STRING).
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "categoricalThresholdConfig")]
    pub categorical_threshold_config: Option<FeaturestoreEntitytypeForProviderMonitoringConfigCategoricalThresholdConfig>,
    /// The config for ImportFeatures Analysis Based Feature Monitoring.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "importFeaturesAnalysis")]
    pub import_features_analysis: Option<FeaturestoreEntitytypeForProviderMonitoringConfigImportFeaturesAnalysis>,
    /// Threshold for numerical features of anomaly detection. This is shared by all objectives of Featurestore Monitoring for numerical features (i.e. Features with type (Feature.ValueType) DOUBLE or INT64).
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numericalThresholdConfig")]
    pub numerical_threshold_config: Option<FeaturestoreEntitytypeForProviderMonitoringConfigNumericalThresholdConfig>,
    /// The config for Snapshot Analysis Based Feature Monitoring.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotAnalysis")]
    pub snapshot_analysis: Option<FeaturestoreEntitytypeForProviderMonitoringConfigSnapshotAnalysis>,
}

/// Threshold for categorical features of anomaly detection. This is shared by all types of Featurestore Monitoring for categorical features (i.e. Features with type (Feature.ValueType) BOOL or STRING).
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeForProviderMonitoringConfigCategoricalThresholdConfig {
    /// Specify a threshold value that can trigger the alert. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

/// The config for ImportFeatures Analysis Based Feature Monitoring.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeForProviderMonitoringConfigImportFeaturesAnalysis {
    /// Defines the baseline to do anomaly detection for feature values imported by each [entityTypes.importFeatureValues][] operation. The value must be one of the values below:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "anomalyDetectionBaseline")]
    pub anomaly_detection_baseline: Option<String>,
    /// Whether to enable / disable / inherite default hebavior for import features analysis. The value must be one of the values below:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// Threshold for numerical features of anomaly detection. This is shared by all objectives of Featurestore Monitoring for numerical features (i.e. Features with type (Feature.ValueType) DOUBLE or INT64).
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeForProviderMonitoringConfigNumericalThresholdConfig {
    /// Specify a threshold value that can trigger the alert. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

/// The config for Snapshot Analysis Based Feature Monitoring.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeForProviderMonitoringConfigSnapshotAnalysis {
    /// The monitoring schedule for snapshot analysis. For EntityType-level config: unset / disabled = true indicates disabled by default for Features under it; otherwise by default enable snapshot analysis monitoring with monitoringInterval for Features under it.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// Configuration of the snapshot analysis based monitoring pipeline running interval. The value indicates number of days. The default value is 1.
    /// If both FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days and [FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval][] are set when creating/updating EntityTypes/Features, FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringIntervalDays")]
    pub monitoring_interval_days: Option<f64>,
    /// Customized export features time window for snapshot analysis. Unit is one day. The default value is 21 days. Minimum value is 1 day. Maximum value is 4000 days.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stalenessDays")]
    pub staleness_days: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeInitProvider {
    /// Optional. Description of the EntityType.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub featurestore: Option<String>,
    /// Reference to a Featurestore in vertexai to populate featurestore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featurestoreRef")]
    pub featurestore_ref: Option<FeaturestoreEntitytypeInitProviderFeaturestoreRef>,
    /// Selector for a Featurestore in vertexai to populate featurestore.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "featurestoreSelector")]
    pub featurestore_selector: Option<FeaturestoreEntitytypeInitProviderFeaturestoreSelector>,
    /// A set of key/value label pairs to assign to this EntityType.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The default monitoring configuration for all Features under this EntityType.
    /// If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringConfig")]
    pub monitoring_config: Option<FeaturestoreEntitytypeInitProviderMonitoringConfig>,
    /// The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Reference to a Featurestore in vertexai to populate featurestore.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeInitProviderFeaturestoreRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FeaturestoreEntitytypeInitProviderFeaturestoreRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeInitProviderFeaturestoreRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FeaturestoreEntitytypeInitProviderFeaturestoreRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FeaturestoreEntitytypeInitProviderFeaturestoreRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeaturestoreEntitytypeInitProviderFeaturestoreRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeaturestoreEntitytypeInitProviderFeaturestoreRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Featurestore in vertexai to populate featurestore.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeInitProviderFeaturestoreSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FeaturestoreEntitytypeInitProviderFeaturestoreSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeInitProviderFeaturestoreSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FeaturestoreEntitytypeInitProviderFeaturestoreSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FeaturestoreEntitytypeInitProviderFeaturestoreSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeaturestoreEntitytypeInitProviderFeaturestoreSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeaturestoreEntitytypeInitProviderFeaturestoreSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The default monitoring configuration for all Features under this EntityType.
/// If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeInitProviderMonitoringConfig {
    /// Threshold for categorical features of anomaly detection. This is shared by all types of Featurestore Monitoring for categorical features (i.e. Features with type (Feature.ValueType) BOOL or STRING).
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "categoricalThresholdConfig")]
    pub categorical_threshold_config: Option<FeaturestoreEntitytypeInitProviderMonitoringConfigCategoricalThresholdConfig>,
    /// The config for ImportFeatures Analysis Based Feature Monitoring.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "importFeaturesAnalysis")]
    pub import_features_analysis: Option<FeaturestoreEntitytypeInitProviderMonitoringConfigImportFeaturesAnalysis>,
    /// Threshold for numerical features of anomaly detection. This is shared by all objectives of Featurestore Monitoring for numerical features (i.e. Features with type (Feature.ValueType) DOUBLE or INT64).
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numericalThresholdConfig")]
    pub numerical_threshold_config: Option<FeaturestoreEntitytypeInitProviderMonitoringConfigNumericalThresholdConfig>,
    /// The config for Snapshot Analysis Based Feature Monitoring.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotAnalysis")]
    pub snapshot_analysis: Option<FeaturestoreEntitytypeInitProviderMonitoringConfigSnapshotAnalysis>,
}

/// Threshold for categorical features of anomaly detection. This is shared by all types of Featurestore Monitoring for categorical features (i.e. Features with type (Feature.ValueType) BOOL or STRING).
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeInitProviderMonitoringConfigCategoricalThresholdConfig {
    /// Specify a threshold value that can trigger the alert. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

/// The config for ImportFeatures Analysis Based Feature Monitoring.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeInitProviderMonitoringConfigImportFeaturesAnalysis {
    /// Defines the baseline to do anomaly detection for feature values imported by each [entityTypes.importFeatureValues][] operation. The value must be one of the values below:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "anomalyDetectionBaseline")]
    pub anomaly_detection_baseline: Option<String>,
    /// Whether to enable / disable / inherite default hebavior for import features analysis. The value must be one of the values below:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// Threshold for numerical features of anomaly detection. This is shared by all objectives of Featurestore Monitoring for numerical features (i.e. Features with type (Feature.ValueType) DOUBLE or INT64).
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeInitProviderMonitoringConfigNumericalThresholdConfig {
    /// Specify a threshold value that can trigger the alert. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

/// The config for Snapshot Analysis Based Feature Monitoring.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeInitProviderMonitoringConfigSnapshotAnalysis {
    /// The monitoring schedule for snapshot analysis. For EntityType-level config: unset / disabled = true indicates disabled by default for Features under it; otherwise by default enable snapshot analysis monitoring with monitoringInterval for Features under it.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// Configuration of the snapshot analysis based monitoring pipeline running interval. The value indicates number of days. The default value is 1.
    /// If both FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days and [FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval][] are set when creating/updating EntityTypes/Features, FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringIntervalDays")]
    pub monitoring_interval_days: Option<f64>,
    /// Customized export features time window for snapshot analysis. Unit is one day. The default value is 21 days. Minimum value is 1 day. Maximum value is 4000 days.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stalenessDays")]
    pub staleness_days: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FeaturestoreEntitytypeProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FeaturestoreEntitytypeProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FeaturestoreEntitytypeProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeaturestoreEntitytypeProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeaturestoreEntitytypeProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<FeaturestoreEntitytypePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<FeaturestoreEntitytypePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FeaturestoreEntitytypePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FeaturestoreEntitytypePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FeaturestoreEntitytypePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeaturestoreEntitytypePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeaturestoreEntitytypePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// FeaturestoreEntitytypeStatus defines the observed state of FeaturestoreEntitytype.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<FeaturestoreEntitytypeStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeStatusAtProvider {
    /// The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createTime")]
    pub create_time: Option<String>,
    /// Optional. Description of the EntityType.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// Used to perform consistent read-modify-write updates.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// The name of the Featurestore to use, in the format projects/{project}/locations/{location}/featurestores/{featurestore}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub featurestore: Option<String>,
    /// an identifier for the resource with format {{featurestore}}/entityTypes/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// A set of key/value label pairs to assign to this EntityType.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// The default monitoring configuration for all Features under this EntityType.
    /// If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringConfig")]
    pub monitoring_config: Option<FeaturestoreEntitytypeStatusAtProviderMonitoringConfig>,
    /// The name of the EntityType. This value may be up to 60 characters, and valid characters are [a-z0-9_]. The first character cannot be a number.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
    /// The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "updateTime")]
    pub update_time: Option<String>,
}

/// The default monitoring configuration for all Features under this EntityType.
/// If this is populated with [FeaturestoreMonitoringConfig.monitoring_interval] specified, snapshot analysis monitoring is enabled. Otherwise, snapshot analysis monitoring is disabled.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeStatusAtProviderMonitoringConfig {
    /// Threshold for categorical features of anomaly detection. This is shared by all types of Featurestore Monitoring for categorical features (i.e. Features with type (Feature.ValueType) BOOL or STRING).
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "categoricalThresholdConfig")]
    pub categorical_threshold_config: Option<FeaturestoreEntitytypeStatusAtProviderMonitoringConfigCategoricalThresholdConfig>,
    /// The config for ImportFeatures Analysis Based Feature Monitoring.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "importFeaturesAnalysis")]
    pub import_features_analysis: Option<FeaturestoreEntitytypeStatusAtProviderMonitoringConfigImportFeaturesAnalysis>,
    /// Threshold for numerical features of anomaly detection. This is shared by all objectives of Featurestore Monitoring for numerical features (i.e. Features with type (Feature.ValueType) DOUBLE or INT64).
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "numericalThresholdConfig")]
    pub numerical_threshold_config: Option<FeaturestoreEntitytypeStatusAtProviderMonitoringConfigNumericalThresholdConfig>,
    /// The config for Snapshot Analysis Based Feature Monitoring.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "snapshotAnalysis")]
    pub snapshot_analysis: Option<FeaturestoreEntitytypeStatusAtProviderMonitoringConfigSnapshotAnalysis>,
}

/// Threshold for categorical features of anomaly detection. This is shared by all types of Featurestore Monitoring for categorical features (i.e. Features with type (Feature.ValueType) BOOL or STRING).
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeStatusAtProviderMonitoringConfigCategoricalThresholdConfig {
    /// Specify a threshold value that can trigger the alert. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

/// The config for ImportFeatures Analysis Based Feature Monitoring.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeStatusAtProviderMonitoringConfigImportFeaturesAnalysis {
    /// Defines the baseline to do anomaly detection for feature values imported by each [entityTypes.importFeatureValues][] operation. The value must be one of the values below:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "anomalyDetectionBaseline")]
    pub anomaly_detection_baseline: Option<String>,
    /// Whether to enable / disable / inherite default hebavior for import features analysis. The value must be one of the values below:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// Threshold for numerical features of anomaly detection. This is shared by all objectives of Featurestore Monitoring for numerical features (i.e. Features with type (Feature.ValueType) DOUBLE or INT64).
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeStatusAtProviderMonitoringConfigNumericalThresholdConfig {
    /// Specify a threshold value that can trigger the alert. For numerical feature, the distribution distance is calculated by Jensen–Shannon divergence. Each feature must have a non-zero threshold if they need to be monitored. Otherwise no alert will be triggered for that feature. The default value is 0.3.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
}

/// The config for Snapshot Analysis Based Feature Monitoring.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturestoreEntitytypeStatusAtProviderMonitoringConfigSnapshotAnalysis {
    /// The monitoring schedule for snapshot analysis. For EntityType-level config: unset / disabled = true indicates disabled by default for Features under it; otherwise by default enable snapshot analysis monitoring with monitoringInterval for Features under it.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    /// Configuration of the snapshot analysis based monitoring pipeline running interval. The value indicates number of days. The default value is 1.
    /// If both FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days and [FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval][] are set when creating/updating EntityTypes/Features, FeaturestoreMonitoringConfig.SnapshotAnalysis.monitoring_interval_days will be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "monitoringIntervalDays")]
    pub monitoring_interval_days: Option<f64>,
    /// Customized export features time window for snapshot analysis. Unit is one day. The default value is 21 days. Minimum value is 1 day. Maximum value is 4000 days.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stalenessDays")]
    pub staleness_days: Option<f64>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
}
use self::prelude::*;

/// ProviderConfigReference to the provider config being used.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigUsageProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ProviderConfigUsageProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigUsageProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ProviderConfigUsageProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ProviderConfigUsageProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProviderConfigUsageProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProviderConfigUsageProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// ResourceReference to the managed resource using the provider config.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigUsageResourceRef {
    /// APIVersion of the referenced object.
    #[serde(rename = "apiVersion")]
    pub api_version: String,
    /// Kind of the referenced object.
    pub kind: String,
    /// Name of the referenced object.
    pub name: String,
    /// UID of the referenced object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}


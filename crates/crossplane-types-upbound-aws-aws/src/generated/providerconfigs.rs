// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// A ProviderConfigSpec defines the desired state of a ProviderConfig.
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "aws.upbound.io", version = "v1beta1", kind = "ProviderConfig", plural = "providerconfigs")]
#[kube(status = "ProviderConfigStatus")]
pub struct ProviderConfigSpec {
    /// AssumeRoleChain defines the options for assuming an IAM role
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "assumeRoleChain")]
    pub assume_role_chain: Option<Vec<ProviderConfigAssumeRoleChain>>,
    /// Credentials required to authenticate to this provider.
    pub credentials: ProviderConfigCredentials,
    /// Endpoint is where you can override the default endpoint configuration
    /// of AWS calls made by the provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub endpoint: Option<ProviderConfigEndpoint>,
    /// Whether to enable the request to use path-style addressing, i.e., https://s3.amazonaws.com/BUCKET/KEY.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub s3_use_path_style: Option<bool>,
    /// Whether to skip credentials validation via the STS API.
    /// This can be useful for testing and for AWS API implementations that do not have STS available.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub skip_credentials_validation: Option<bool>,
    /// Whether to skip the AWS Metadata API check
    /// Useful for AWS API implementations that do not have a metadata API endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub skip_metadata_api_check: Option<bool>,
    /// Whether to skip validation of provided region name.
    /// Useful for AWS-like implementations that use their own region names or to bypass the validation for
    /// regions that aren't publicly available yet.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub skip_region_validation: Option<bool>,
    /// Whether to skip requesting the account ID.
    /// Useful for AWS API implementations that do not have the IAM, STS API, or metadata API
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub skip_requesting_account_id: Option<bool>,
}

/// AssumeRoleOptions define the options for assuming an IAM Role
/// Fields are similar to the STS AssumeRoleOptions in the AWS SDK
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigAssumeRoleChain {
    /// ExternalID is the external ID used when assuming role.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "externalID")]
    pub external_id: Option<String>,
    /// AssumeRoleARN to assume with provider credentials
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleARN")]
    pub role_arn: Option<String>,
    /// Tags is list of session tags that you want to pass. Each session tag consists of a key
    /// name and an associated value. For more information about session tags, see
    /// Tagging STS Sessions
    /// (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<ProviderConfigAssumeRoleChainTags>>,
    /// TransitiveTagKeys is a list of keys for session tags that you want to set as transitive. If you set a
    /// tag key as transitive, the corresponding key and value passes to subsequent
    /// sessions in a role chain. For more information, see Chaining Roles with Session Tags
    /// (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_session-tags.html#id_session-tags_role-chaining).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "transitiveTagKeys")]
    pub transitive_tag_keys: Option<Vec<String>>,
}

/// Tag is session tag that can be used to assume an IAM Role
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigAssumeRoleChainTags {
    /// Name of the tag.
    /// Key is a required field
    pub key: String,
    /// Value of the tag.
    /// Value is a required field
    pub value: String,
}

/// Credentials required to authenticate to this provider.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentials {
    /// Env is a reference to an environment variable that contains credentials
    /// that must be used to connect to the provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub env: Option<ProviderConfigCredentialsEnv>,
    /// Fs is a reference to a filesystem location that contains credentials that
    /// must be used to connect to the provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fs: Option<ProviderConfigCredentialsFs>,
    /// A SecretRef is a reference to a secret key that contains the credentials
    /// that must be used to connect to the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ProviderConfigCredentialsSecretRef>,
    /// Source of the provider credentials.
    pub source: ProviderConfigCredentialsSource,
    /// Upbound defines the options for authenticating using Upbound as an identity provider.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub upbound: Option<ProviderConfigCredentialsUpbound>,
    /// WebIdentity defines the options for assuming an IAM role with a Web Identity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webIdentity")]
    pub web_identity: Option<ProviderConfigCredentialsWebIdentity>,
}

/// Env is a reference to an environment variable that contains credentials
/// that must be used to connect to the provider.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentialsEnv {
    /// Name is the name of an environment variable.
    pub name: String,
}

/// Fs is a reference to a filesystem location that contains credentials that
/// must be used to connect to the provider.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentialsFs {
    /// Path is a filesystem path.
    pub path: String,
}

/// A SecretRef is a reference to a secret key that contains the credentials
/// that must be used to connect to the provider.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentialsSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Credentials required to authenticate to this provider.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProviderConfigCredentialsSource {
    None,
    Secret,
    #[serde(rename = "IRSA")]
    Irsa,
    WebIdentity,
    PodIdentity,
    Upbound,
}

/// Upbound defines the options for authenticating using Upbound as an identity provider.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentialsUpbound {
    /// WebIdentity defines the options for assuming an IAM role with a Web
    /// Identity.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "webIdentity")]
    pub web_identity: Option<ProviderConfigCredentialsUpboundWebIdentity>,
}

/// WebIdentity defines the options for assuming an IAM role with a Web
/// Identity.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentialsUpboundWebIdentity {
    /// AssumeRoleARN to assume with provider credentials
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleARN")]
    pub role_arn: Option<String>,
    /// RoleSessionName is the session name, if you wish to uniquely identify this session.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleSessionName")]
    pub role_session_name: Option<String>,
    /// TokenConfig is the Web Identity Token config to assume the role.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenConfig")]
    pub token_config: Option<ProviderConfigCredentialsUpboundWebIdentityTokenConfig>,
}

/// TokenConfig is the Web Identity Token config to assume the role.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentialsUpboundWebIdentityTokenConfig {
    /// Fs is a reference to a filesystem location that contains credentials that
    /// must be used to obtain the web identity token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fs: Option<ProviderConfigCredentialsUpboundWebIdentityTokenConfigFs>,
    /// A SecretRef is a reference to a secret key that contains the credentials
    /// that must be used to obtain the web identity token.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ProviderConfigCredentialsUpboundWebIdentityTokenConfigSecretRef>,
    /// Source is the source of the web identity token.
    pub source: ProviderConfigCredentialsUpboundWebIdentityTokenConfigSource,
}

/// Fs is a reference to a filesystem location that contains credentials that
/// must be used to obtain the web identity token.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentialsUpboundWebIdentityTokenConfigFs {
    /// Path is a filesystem path.
    pub path: String,
}

/// A SecretRef is a reference to a secret key that contains the credentials
/// that must be used to obtain the web identity token.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentialsUpboundWebIdentityTokenConfigSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// TokenConfig is the Web Identity Token config to assume the role.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProviderConfigCredentialsUpboundWebIdentityTokenConfigSource {
    Secret,
    Filesystem,
}

/// WebIdentity defines the options for assuming an IAM role with a Web Identity.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentialsWebIdentity {
    /// AssumeRoleARN to assume with provider credentials
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleARN")]
    pub role_arn: Option<String>,
    /// RoleSessionName is the session name, if you wish to uniquely identify this session.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "roleSessionName")]
    pub role_session_name: Option<String>,
    /// TokenConfig is the Web Identity Token config to assume the role.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenConfig")]
    pub token_config: Option<ProviderConfigCredentialsWebIdentityTokenConfig>,
}

/// TokenConfig is the Web Identity Token config to assume the role.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentialsWebIdentityTokenConfig {
    /// Fs is a reference to a filesystem location that contains credentials that
    /// must be used to obtain the web identity token.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fs: Option<ProviderConfigCredentialsWebIdentityTokenConfigFs>,
    /// A SecretRef is a reference to a secret key that contains the credentials
    /// that must be used to obtain the web identity token.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "secretRef")]
    pub secret_ref: Option<ProviderConfigCredentialsWebIdentityTokenConfigSecretRef>,
    /// Source is the source of the web identity token.
    pub source: ProviderConfigCredentialsWebIdentityTokenConfigSource,
}

/// Fs is a reference to a filesystem location that contains credentials that
/// must be used to obtain the web identity token.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentialsWebIdentityTokenConfigFs {
    /// Path is a filesystem path.
    pub path: String,
}

/// A SecretRef is a reference to a secret key that contains the credentials
/// that must be used to obtain the web identity token.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigCredentialsWebIdentityTokenConfigSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// TokenConfig is the Web Identity Token config to assume the role.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProviderConfigCredentialsWebIdentityTokenConfigSource {
    Secret,
    Filesystem,
}

/// Endpoint is where you can override the default endpoint configuration
/// of AWS calls made by the provider.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigEndpoint {
    /// Specifies if the endpoint's hostname can be modified by the SDK's API
    /// client.
    /// 
    /// 
    /// If the hostname is mutable the SDK API clients may modify any part of
    /// the hostname based on the requirements of the API, (e.g. adding, or
    /// removing content in the hostname). Such as, Amazon S3 API client
    /// prefixing "bucketname" to the hostname, or changing the
    /// hostname service name component from "s3." to "s3-accesspoint.dualstack."
    /// for the dualstack endpoint of an S3 Accesspoint resource.
    /// 
    /// 
    /// Care should be taken when providing a custom endpoint for an API. If the
    /// endpoint hostname is mutable, and the client cannot modify the endpoint
    /// correctly, the operation call will most likely fail, or have undefined
    /// behavior.
    /// 
    /// 
    /// If hostname is immutable, the SDK API clients will not modify the
    /// hostname of the URL. This may cause the API client not to function
    /// correctly if the API requires the operation specific hostname values
    /// to be used by the client.
    /// 
    /// 
    /// This flag does not modify the API client's behavior if this endpoint
    /// will be used instead of Endpoint Discovery, or if the endpoint will be
    /// used to perform Endpoint Discovery. That behavior is configured via the
    /// API Client's Options.
    /// Note that this is effective only for resources that use AWS SDK v2.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "hostnameImmutable")]
    pub hostname_immutable: Option<bool>,
    /// The AWS partition the endpoint belongs to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "partitionId")]
    pub partition_id: Option<String>,
    /// Specifies the list of services you want endpoint to be used for
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<String>>,
    /// The signing method that should be used for signing the requests to the
    /// endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signingMethod")]
    pub signing_method: Option<String>,
    /// The service name that should be used for signing the requests to the
    /// endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signingName")]
    pub signing_name: Option<String>,
    /// The region that should be used for signing the request to the endpoint.
    /// For IAM, which doesn't have any region, us-east-1 is used to sign the
    /// requests, which is the only signing region of IAM.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "signingRegion")]
    pub signing_region: Option<String>,
    /// The source of the Endpoint. By default, this will be ServiceMetadata.
    /// When providing a custom endpoint, you should set the source as Custom.
    /// If source is not provided when providing a custom endpoint, the SDK may not
    /// perform required host mutations correctly. Source should be used along with
    /// HostnameImmutable property as per the usage requirement.
    /// Note that this is effective only for resources that use AWS SDK v2.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ProviderConfigEndpointSource>,
    /// URL lets you configure the endpoint URL to be used in SDK calls.
    pub url: ProviderConfigEndpointUrl,
}

/// Endpoint is where you can override the default endpoint configuration
/// of AWS calls made by the provider.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProviderConfigEndpointSource {
    ServiceMetadata,
    Custom,
}

/// URL lets you configure the endpoint URL to be used in SDK calls.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigEndpointUrl {
    /// Dynamic lets you configure the behavior of endpoint URL resolver.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub dynamic: Option<ProviderConfigEndpointUrlDynamic>,
    /// Static is the full URL you'd like the AWS SDK to use.
    /// Recommended for using tools like localstack where a single host is exposed
    /// for all services and regions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "static")]
    pub r#static: Option<String>,
    /// You can provide a static URL that will be used regardless of the service
    /// and region by choosing Static type. Alternatively, you can provide
    /// configuration for dynamically resolving the URL with the config you provide
    /// once you set the type as Dynamic.
    #[serde(rename = "type")]
    pub r#type: ProviderConfigEndpointUrlType,
}

/// Dynamic lets you configure the behavior of endpoint URL resolver.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigEndpointUrlDynamic {
    /// Host is the address of the main host that the resolver will use to
    /// prepend protocol, service and region configurations.
    /// For example, the final URL for EC2 in us-east-1 looks like https://ec2.us-east-1.amazonaws.com
    /// You would need to use "amazonaws.com" as Host and "https" as protocol
    /// to have the resolver construct it.
    pub host: String,
    /// Protocol is the HTTP protocol that will be used in the URL. Currently,
    /// only http and https are supported.
    pub protocol: ProviderConfigEndpointUrlDynamicProtocol,
}

/// Dynamic lets you configure the behavior of endpoint URL resolver.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProviderConfigEndpointUrlDynamicProtocol {
    #[serde(rename = "http")]
    Http,
    #[serde(rename = "https")]
    Https,
}

/// URL lets you configure the endpoint URL to be used in SDK calls.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ProviderConfigEndpointUrlType {
    Static,
    Dynamic,
    Auto,
}

/// A ProviderConfigStatus reflects the observed state of a ProviderConfig.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ProviderConfigStatus {
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// Users of this provider configuration.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub users: Option<i64>,
}


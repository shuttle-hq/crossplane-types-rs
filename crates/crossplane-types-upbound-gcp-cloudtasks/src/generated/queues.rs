// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// QueueSpec defines the desired state of Queue
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "cloudtasks.gcp.upbound.io", version = "v1beta2", kind = "Queue", plural = "queues")]
#[kube(status = "QueueStatus")]
pub struct QueueSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<QueueDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: QueueForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<QueueInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<QueueProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<QueuePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<QueueWriteConnectionSecretToRef>,
}

/// QueueSpec defines the desired state of Queue
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QueueDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueForProvider {
    /// Overrides for task-level appEngineRouting. These settings apply only
    /// to App Engine tasks in this queue
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appEngineRoutingOverride")]
    pub app_engine_routing_override: Option<QueueForProviderAppEngineRoutingOverride>,
    /// The location of the queue
    pub location: String,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Reference to a Project in cloudplatform to populate project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectRef")]
    pub project_ref: Option<QueueForProviderProjectRef>,
    /// Selector for a Project in cloudplatform to populate project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectSelector")]
    pub project_selector: Option<QueueForProviderProjectSelector>,
    /// Rate limits for task dispatches.
    /// The queue's actual dispatch rate is the result of:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimits")]
    pub rate_limits: Option<QueueForProviderRateLimits>,
    /// Settings that determine the retry behavior.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryConfig")]
    pub retry_config: Option<QueueForProviderRetryConfig>,
    /// Configuration options for writing logs to Stackdriver Logging.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackdriverLoggingConfig")]
    pub stackdriver_logging_config: Option<QueueForProviderStackdriverLoggingConfig>,
}

/// Overrides for task-level appEngineRouting. These settings apply only
/// to App Engine tasks in this queue
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueForProviderAppEngineRoutingOverride {
    /// App instance.
    /// By default, the task is sent to an instance which is available when the task is attempted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instance: Option<String>,
    /// App service.
    /// By default, the task is sent to the service which is the default service when the task is attempted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
    /// App version.
    /// By default, the task is sent to the version which is the default version when the task is attempted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Reference to a Project in cloudplatform to populate project.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueForProviderProjectRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<QueueForProviderProjectRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueForProviderProjectRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<QueueForProviderProjectRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<QueueForProviderProjectRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QueueForProviderProjectRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QueueForProviderProjectRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Project in cloudplatform to populate project.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueForProviderProjectSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<QueueForProviderProjectSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueForProviderProjectSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<QueueForProviderProjectSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<QueueForProviderProjectSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QueueForProviderProjectSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QueueForProviderProjectSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Rate limits for task dispatches.
/// The queue's actual dispatch rate is the result of:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueForProviderRateLimits {
    /// The maximum number of concurrent tasks that Cloud Tasks allows to
    /// be dispatched for this queue. After this threshold has been
    /// reached, Cloud Tasks stops dispatching tasks until the number of
    /// concurrent requests decreases.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentDispatches")]
    pub max_concurrent_dispatches: Option<f64>,
    /// The maximum rate at which tasks are dispatched from this queue.
    /// If unspecified when the queue is created, Cloud Tasks will pick the default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDispatchesPerSecond")]
    pub max_dispatches_per_second: Option<f64>,
}

/// Settings that determine the retry behavior.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueForProviderRetryConfig {
    /// Number of attempts per task.
    /// Cloud Tasks will attempt the task maxAttempts times (that is, if
    /// the first attempt fails, then there will be maxAttempts - 1
    /// retries). Must be >= -1.
    /// If unspecified when the queue is created, Cloud Tasks will pick
    /// the default.
    /// -1 indicates unlimited attempts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAttempts")]
    pub max_attempts: Option<f64>,
    /// A task will be scheduled for retry between minBackoff and
    /// maxBackoff duration after it fails, if the queue's RetryConfig
    /// specifies that the task should be retried.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBackoff")]
    pub max_backoff: Option<String>,
    /// The time between retries will double maxDoublings times.
    /// A task's retry interval starts at minBackoff, then doubles maxDoublings times,
    /// then increases linearly, and finally retries retries at intervals of maxBackoff
    /// up to maxAttempts times.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDoublings")]
    pub max_doublings: Option<f64>,
    /// If positive, maxRetryDuration specifies the time limit for
    /// retrying a failed task, measured from when the task was first
    /// attempted. Once maxRetryDuration time has passed and the task has
    /// been attempted maxAttempts times, no further attempts will be
    /// made and the task will be deleted.
    /// If zero, then the task age is unlimited.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetryDuration")]
    pub max_retry_duration: Option<String>,
    /// A task will be scheduled for retry between minBackoff and
    /// maxBackoff duration after it fails, if the queue's RetryConfig
    /// specifies that the task should be retried.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minBackoff")]
    pub min_backoff: Option<String>,
}

/// Configuration options for writing logs to Stackdriver Logging.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueForProviderStackdriverLoggingConfig {
    /// Specifies the fraction of operations to write to Stackdriver Logging.
    /// This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the
    /// default and means that no operations are logged.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "samplingRatio")]
    pub sampling_ratio: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueInitProvider {
    /// Overrides for task-level appEngineRouting. These settings apply only
    /// to App Engine tasks in this queue
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appEngineRoutingOverride")]
    pub app_engine_routing_override: Option<QueueInitProviderAppEngineRoutingOverride>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Reference to a Project in cloudplatform to populate project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectRef")]
    pub project_ref: Option<QueueInitProviderProjectRef>,
    /// Selector for a Project in cloudplatform to populate project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectSelector")]
    pub project_selector: Option<QueueInitProviderProjectSelector>,
    /// Rate limits for task dispatches.
    /// The queue's actual dispatch rate is the result of:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimits")]
    pub rate_limits: Option<QueueInitProviderRateLimits>,
    /// Settings that determine the retry behavior.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryConfig")]
    pub retry_config: Option<QueueInitProviderRetryConfig>,
    /// Configuration options for writing logs to Stackdriver Logging.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackdriverLoggingConfig")]
    pub stackdriver_logging_config: Option<QueueInitProviderStackdriverLoggingConfig>,
}

/// Overrides for task-level appEngineRouting. These settings apply only
/// to App Engine tasks in this queue
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueInitProviderAppEngineRoutingOverride {
    /// App instance.
    /// By default, the task is sent to an instance which is available when the task is attempted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instance: Option<String>,
    /// App service.
    /// By default, the task is sent to the service which is the default service when the task is attempted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
    /// App version.
    /// By default, the task is sent to the version which is the default version when the task is attempted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Reference to a Project in cloudplatform to populate project.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueInitProviderProjectRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<QueueInitProviderProjectRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueInitProviderProjectRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<QueueInitProviderProjectRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<QueueInitProviderProjectRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QueueInitProviderProjectRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QueueInitProviderProjectRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Project in cloudplatform to populate project.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueInitProviderProjectSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<QueueInitProviderProjectSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueInitProviderProjectSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<QueueInitProviderProjectSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<QueueInitProviderProjectSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QueueInitProviderProjectSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QueueInitProviderProjectSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Rate limits for task dispatches.
/// The queue's actual dispatch rate is the result of:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueInitProviderRateLimits {
    /// The maximum number of concurrent tasks that Cloud Tasks allows to
    /// be dispatched for this queue. After this threshold has been
    /// reached, Cloud Tasks stops dispatching tasks until the number of
    /// concurrent requests decreases.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentDispatches")]
    pub max_concurrent_dispatches: Option<f64>,
    /// The maximum rate at which tasks are dispatched from this queue.
    /// If unspecified when the queue is created, Cloud Tasks will pick the default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDispatchesPerSecond")]
    pub max_dispatches_per_second: Option<f64>,
}

/// Settings that determine the retry behavior.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueInitProviderRetryConfig {
    /// Number of attempts per task.
    /// Cloud Tasks will attempt the task maxAttempts times (that is, if
    /// the first attempt fails, then there will be maxAttempts - 1
    /// retries). Must be >= -1.
    /// If unspecified when the queue is created, Cloud Tasks will pick
    /// the default.
    /// -1 indicates unlimited attempts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAttempts")]
    pub max_attempts: Option<f64>,
    /// A task will be scheduled for retry between minBackoff and
    /// maxBackoff duration after it fails, if the queue's RetryConfig
    /// specifies that the task should be retried.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBackoff")]
    pub max_backoff: Option<String>,
    /// The time between retries will double maxDoublings times.
    /// A task's retry interval starts at minBackoff, then doubles maxDoublings times,
    /// then increases linearly, and finally retries retries at intervals of maxBackoff
    /// up to maxAttempts times.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDoublings")]
    pub max_doublings: Option<f64>,
    /// If positive, maxRetryDuration specifies the time limit for
    /// retrying a failed task, measured from when the task was first
    /// attempted. Once maxRetryDuration time has passed and the task has
    /// been attempted maxAttempts times, no further attempts will be
    /// made and the task will be deleted.
    /// If zero, then the task age is unlimited.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetryDuration")]
    pub max_retry_duration: Option<String>,
    /// A task will be scheduled for retry between minBackoff and
    /// maxBackoff duration after it fails, if the queue's RetryConfig
    /// specifies that the task should be retried.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minBackoff")]
    pub min_backoff: Option<String>,
}

/// Configuration options for writing logs to Stackdriver Logging.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueInitProviderStackdriverLoggingConfig {
    /// Specifies the fraction of operations to write to Stackdriver Logging.
    /// This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the
    /// default and means that no operations are logged.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "samplingRatio")]
    pub sampling_ratio: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<QueueProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<QueueProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<QueueProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QueueProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QueueProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueuePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<QueuePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<QueuePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueuePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<QueuePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueuePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<QueuePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<QueuePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QueuePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum QueuePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueuePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// QueueStatus defines the observed state of Queue.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<QueueStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueStatusAtProvider {
    /// Overrides for task-level appEngineRouting. These settings apply only
    /// to App Engine tasks in this queue
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "appEngineRoutingOverride")]
    pub app_engine_routing_override: Option<QueueStatusAtProviderAppEngineRoutingOverride>,
    /// an identifier for the resource with format projects/{{project}}/locations/{{location}}/queues/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The location of the queue
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Rate limits for task dispatches.
    /// The queue's actual dispatch rate is the result of:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rateLimits")]
    pub rate_limits: Option<QueueStatusAtProviderRateLimits>,
    /// Settings that determine the retry behavior.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "retryConfig")]
    pub retry_config: Option<QueueStatusAtProviderRetryConfig>,
    /// Configuration options for writing logs to Stackdriver Logging.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stackdriverLoggingConfig")]
    pub stackdriver_logging_config: Option<QueueStatusAtProviderStackdriverLoggingConfig>,
}

/// Overrides for task-level appEngineRouting. These settings apply only
/// to App Engine tasks in this queue
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueStatusAtProviderAppEngineRoutingOverride {
    /// (Output)
    /// The host that the task is sent to.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// App instance.
    /// By default, the task is sent to an instance which is available when the task is attempted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub instance: Option<String>,
    /// App service.
    /// By default, the task is sent to the service which is the default service when the task is attempted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub service: Option<String>,
    /// App version.
    /// By default, the task is sent to the version which is the default version when the task is attempted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

/// Rate limits for task dispatches.
/// The queue's actual dispatch rate is the result of:
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueStatusAtProviderRateLimits {
    /// (Output)
    /// The max burst size.
    /// Max burst size limits how fast tasks in queue are processed when many tasks are
    /// in the queue and the rate is high. This field allows the queue to have a high
    /// rate so processing starts shortly after a task is enqueued, but still limits
    /// resource usage when many tasks are enqueued in a short period of time.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBurstSize")]
    pub max_burst_size: Option<f64>,
    /// The maximum number of concurrent tasks that Cloud Tasks allows to
    /// be dispatched for this queue. After this threshold has been
    /// reached, Cloud Tasks stops dispatching tasks until the number of
    /// concurrent requests decreases.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxConcurrentDispatches")]
    pub max_concurrent_dispatches: Option<f64>,
    /// The maximum rate at which tasks are dispatched from this queue.
    /// If unspecified when the queue is created, Cloud Tasks will pick the default.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDispatchesPerSecond")]
    pub max_dispatches_per_second: Option<f64>,
}

/// Settings that determine the retry behavior.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueStatusAtProviderRetryConfig {
    /// Number of attempts per task.
    /// Cloud Tasks will attempt the task maxAttempts times (that is, if
    /// the first attempt fails, then there will be maxAttempts - 1
    /// retries). Must be >= -1.
    /// If unspecified when the queue is created, Cloud Tasks will pick
    /// the default.
    /// -1 indicates unlimited attempts.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxAttempts")]
    pub max_attempts: Option<f64>,
    /// A task will be scheduled for retry between minBackoff and
    /// maxBackoff duration after it fails, if the queue's RetryConfig
    /// specifies that the task should be retried.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxBackoff")]
    pub max_backoff: Option<String>,
    /// The time between retries will double maxDoublings times.
    /// A task's retry interval starts at minBackoff, then doubles maxDoublings times,
    /// then increases linearly, and finally retries retries at intervals of maxBackoff
    /// up to maxAttempts times.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxDoublings")]
    pub max_doublings: Option<f64>,
    /// If positive, maxRetryDuration specifies the time limit for
    /// retrying a failed task, measured from when the task was first
    /// attempted. Once maxRetryDuration time has passed and the task has
    /// been attempted maxAttempts times, no further attempts will be
    /// made and the task will be deleted.
    /// If zero, then the task age is unlimited.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxRetryDuration")]
    pub max_retry_duration: Option<String>,
    /// A task will be scheduled for retry between minBackoff and
    /// maxBackoff duration after it fails, if the queue's RetryConfig
    /// specifies that the task should be retried.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minBackoff")]
    pub min_backoff: Option<String>,
}

/// Configuration options for writing logs to Stackdriver Logging.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct QueueStatusAtProviderStackdriverLoggingConfig {
    /// Specifies the fraction of operations to write to Stackdriver Logging.
    /// This field may contain any value between 0.0 and 1.0, inclusive. 0.0 is the
    /// default and means that no operations are logged.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "samplingRatio")]
    pub sampling_ratio: Option<f64>,
}


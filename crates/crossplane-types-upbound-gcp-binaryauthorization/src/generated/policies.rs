// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// PolicySpec defines the desired state of Policy
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "binaryauthorization.gcp.upbound.io", version = "v1beta2", kind = "Policy", plural = "policies")]
#[kube(status = "PolicyStatus")]
pub struct PolicySpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<PolicyDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: PolicyForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<PolicyInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<PolicyProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<PolicyPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<PolicyWriteConnectionSecretToRef>,
}

/// PolicySpec defines the desired state of Policy
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyForProvider {
    /// A whitelist of image patterns to exclude from admission rules. If an
    /// image's name matches a whitelist pattern, the image's admission
    /// requests will always be permitted regardless of your admission rules.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "admissionWhitelistPatterns")]
    pub admission_whitelist_patterns: Option<Vec<PolicyForProviderAdmissionWhitelistPatterns>>,
    /// Per-cluster admission rules. An admission rule specifies either that
    /// all container images used in a pod creation request must be attested
    /// to by one or more attestors, that all pod creations will be allowed,
    /// or that all pod creations will be denied. There can be at most one
    /// admission rule per cluster spec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterAdmissionRules")]
    pub cluster_admission_rules: Option<Vec<PolicyForProviderClusterAdmissionRules>>,
    /// Default admission rule for a cluster without a per-cluster admission
    /// rule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultAdmissionRule")]
    pub default_admission_rule: Option<PolicyForProviderDefaultAdmissionRule>,
    /// A descriptive comment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Controls the evaluation of a Google-maintained global admission policy
    /// for common system-level images. Images not covered by the global
    /// policy will be subject to the project admission policy.
    /// Possible values are: ENABLE, DISABLE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalPolicyEvaluationMode")]
    pub global_policy_evaluation_mode: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyForProviderAdmissionWhitelistPatterns {
    /// An image name pattern to whitelist, in the form
    /// registry/path/to/image. This supports a trailing * as a
    /// wildcard, but this is allowed only in text after the registry/
    /// part.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePattern")]
    pub name_pattern: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyForProviderClusterAdmissionRules {
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// The action when a pod creation is denied by the admission rule.
    /// Possible values are: ENFORCED_BLOCK_AND_AUDIT_LOG, DRYRUN_AUDIT_LOG_ONLY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcementMode")]
    pub enforcement_mode: Option<String>,
    /// How this admission rule will be evaluated.
    /// Possible values are: ALWAYS_ALLOW, REQUIRE_ATTESTATION, ALWAYS_DENY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluationMode")]
    pub evaluation_mode: Option<String>,
    /// The resource names of the attestors that must attest to a
    /// container image. If the attestor is in a different project from the
    /// policy, it should be specified in the format projects/*/attestors/*.
    /// Each attestor must exist before a policy can reference it. To add an
    /// attestor to a policy the principal issuing the policy change
    /// request must be able to read the attestor resource.
    /// Note: this field must be non-empty when the evaluation_mode field
    /// specifies REQUIRE_ATTESTATION, otherwise it must be empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireAttestationsBy")]
    pub require_attestations_by: Option<Vec<String>>,
    /// References to Attestor in binaryauthorization to populate requireAttestationsBy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireAttestationsByRefs")]
    pub require_attestations_by_refs: Option<Vec<PolicyForProviderClusterAdmissionRulesRequireAttestationsByRefs>>,
    /// Selector for a list of Attestor in binaryauthorization to populate requireAttestationsBy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireAttestationsBySelector")]
    pub require_attestations_by_selector: Option<PolicyForProviderClusterAdmissionRulesRequireAttestationsBySelector>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyForProviderClusterAdmissionRulesRequireAttestationsByRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PolicyForProviderClusterAdmissionRulesRequireAttestationsByRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyForProviderClusterAdmissionRulesRequireAttestationsByRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PolicyForProviderClusterAdmissionRulesRequireAttestationsByRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PolicyForProviderClusterAdmissionRulesRequireAttestationsByRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderClusterAdmissionRulesRequireAttestationsByRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderClusterAdmissionRulesRequireAttestationsByRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Attestor in binaryauthorization to populate requireAttestationsBy.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyForProviderClusterAdmissionRulesRequireAttestationsBySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PolicyForProviderClusterAdmissionRulesRequireAttestationsBySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyForProviderClusterAdmissionRulesRequireAttestationsBySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PolicyForProviderClusterAdmissionRulesRequireAttestationsBySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PolicyForProviderClusterAdmissionRulesRequireAttestationsBySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderClusterAdmissionRulesRequireAttestationsBySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderClusterAdmissionRulesRequireAttestationsBySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Default admission rule for a cluster without a per-cluster admission
/// rule.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyForProviderDefaultAdmissionRule {
    /// The action when a pod creation is denied by the admission rule.
    /// Possible values are: ENFORCED_BLOCK_AND_AUDIT_LOG, DRYRUN_AUDIT_LOG_ONLY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcementMode")]
    pub enforcement_mode: Option<String>,
    /// How this admission rule will be evaluated.
    /// Possible values are: ALWAYS_ALLOW, REQUIRE_ATTESTATION, ALWAYS_DENY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluationMode")]
    pub evaluation_mode: Option<String>,
    /// The resource names of the attestors that must attest to a
    /// container image. If the attestor is in a different project from the
    /// policy, it should be specified in the format projects/*/attestors/*.
    /// Each attestor must exist before a policy can reference it. To add an
    /// attestor to a policy the principal issuing the policy change
    /// request must be able to read the attestor resource.
    /// Note: this field must be non-empty when the evaluation_mode field
    /// specifies REQUIRE_ATTESTATION, otherwise it must be empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireAttestationsBy")]
    pub require_attestations_by: Option<Vec<String>>,
    /// References to Attestor in binaryauthorization to populate requireAttestationsBy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireAttestationsByRefs")]
    pub require_attestations_by_refs: Option<Vec<PolicyForProviderDefaultAdmissionRuleRequireAttestationsByRefs>>,
    /// Selector for a list of Attestor in binaryauthorization to populate requireAttestationsBy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireAttestationsBySelector")]
    pub require_attestations_by_selector: Option<PolicyForProviderDefaultAdmissionRuleRequireAttestationsBySelector>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyForProviderDefaultAdmissionRuleRequireAttestationsByRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PolicyForProviderDefaultAdmissionRuleRequireAttestationsByRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyForProviderDefaultAdmissionRuleRequireAttestationsByRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PolicyForProviderDefaultAdmissionRuleRequireAttestationsByRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PolicyForProviderDefaultAdmissionRuleRequireAttestationsByRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderDefaultAdmissionRuleRequireAttestationsByRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderDefaultAdmissionRuleRequireAttestationsByRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Attestor in binaryauthorization to populate requireAttestationsBy.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyForProviderDefaultAdmissionRuleRequireAttestationsBySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PolicyForProviderDefaultAdmissionRuleRequireAttestationsBySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyForProviderDefaultAdmissionRuleRequireAttestationsBySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PolicyForProviderDefaultAdmissionRuleRequireAttestationsBySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PolicyForProviderDefaultAdmissionRuleRequireAttestationsBySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderDefaultAdmissionRuleRequireAttestationsBySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyForProviderDefaultAdmissionRuleRequireAttestationsBySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyInitProvider {
    /// A whitelist of image patterns to exclude from admission rules. If an
    /// image's name matches a whitelist pattern, the image's admission
    /// requests will always be permitted regardless of your admission rules.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "admissionWhitelistPatterns")]
    pub admission_whitelist_patterns: Option<Vec<PolicyInitProviderAdmissionWhitelistPatterns>>,
    /// Per-cluster admission rules. An admission rule specifies either that
    /// all container images used in a pod creation request must be attested
    /// to by one or more attestors, that all pod creations will be allowed,
    /// or that all pod creations will be denied. There can be at most one
    /// admission rule per cluster spec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterAdmissionRules")]
    pub cluster_admission_rules: Option<Vec<PolicyInitProviderClusterAdmissionRules>>,
    /// Default admission rule for a cluster without a per-cluster admission
    /// rule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultAdmissionRule")]
    pub default_admission_rule: Option<PolicyInitProviderDefaultAdmissionRule>,
    /// A descriptive comment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Controls the evaluation of a Google-maintained global admission policy
    /// for common system-level images. Images not covered by the global
    /// policy will be subject to the project admission policy.
    /// Possible values are: ENABLE, DISABLE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalPolicyEvaluationMode")]
    pub global_policy_evaluation_mode: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyInitProviderAdmissionWhitelistPatterns {
    /// An image name pattern to whitelist, in the form
    /// registry/path/to/image. This supports a trailing * as a
    /// wildcard, but this is allowed only in text after the registry/
    /// part.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePattern")]
    pub name_pattern: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyInitProviderClusterAdmissionRules {
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// The action when a pod creation is denied by the admission rule.
    /// Possible values are: ENFORCED_BLOCK_AND_AUDIT_LOG, DRYRUN_AUDIT_LOG_ONLY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcementMode")]
    pub enforcement_mode: Option<String>,
    /// How this admission rule will be evaluated.
    /// Possible values are: ALWAYS_ALLOW, REQUIRE_ATTESTATION, ALWAYS_DENY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluationMode")]
    pub evaluation_mode: Option<String>,
    /// The resource names of the attestors that must attest to a
    /// container image. If the attestor is in a different project from the
    /// policy, it should be specified in the format projects/*/attestors/*.
    /// Each attestor must exist before a policy can reference it. To add an
    /// attestor to a policy the principal issuing the policy change
    /// request must be able to read the attestor resource.
    /// Note: this field must be non-empty when the evaluation_mode field
    /// specifies REQUIRE_ATTESTATION, otherwise it must be empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireAttestationsBy")]
    pub require_attestations_by: Option<Vec<String>>,
    /// References to Attestor in binaryauthorization to populate requireAttestationsBy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireAttestationsByRefs")]
    pub require_attestations_by_refs: Option<Vec<PolicyInitProviderClusterAdmissionRulesRequireAttestationsByRefs>>,
    /// Selector for a list of Attestor in binaryauthorization to populate requireAttestationsBy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireAttestationsBySelector")]
    pub require_attestations_by_selector: Option<PolicyInitProviderClusterAdmissionRulesRequireAttestationsBySelector>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyInitProviderClusterAdmissionRulesRequireAttestationsByRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PolicyInitProviderClusterAdmissionRulesRequireAttestationsByRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyInitProviderClusterAdmissionRulesRequireAttestationsByRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PolicyInitProviderClusterAdmissionRulesRequireAttestationsByRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PolicyInitProviderClusterAdmissionRulesRequireAttestationsByRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyInitProviderClusterAdmissionRulesRequireAttestationsByRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyInitProviderClusterAdmissionRulesRequireAttestationsByRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Attestor in binaryauthorization to populate requireAttestationsBy.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyInitProviderClusterAdmissionRulesRequireAttestationsBySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PolicyInitProviderClusterAdmissionRulesRequireAttestationsBySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyInitProviderClusterAdmissionRulesRequireAttestationsBySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PolicyInitProviderClusterAdmissionRulesRequireAttestationsBySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PolicyInitProviderClusterAdmissionRulesRequireAttestationsBySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyInitProviderClusterAdmissionRulesRequireAttestationsBySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyInitProviderClusterAdmissionRulesRequireAttestationsBySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Default admission rule for a cluster without a per-cluster admission
/// rule.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyInitProviderDefaultAdmissionRule {
    /// The action when a pod creation is denied by the admission rule.
    /// Possible values are: ENFORCED_BLOCK_AND_AUDIT_LOG, DRYRUN_AUDIT_LOG_ONLY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcementMode")]
    pub enforcement_mode: Option<String>,
    /// How this admission rule will be evaluated.
    /// Possible values are: ALWAYS_ALLOW, REQUIRE_ATTESTATION, ALWAYS_DENY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluationMode")]
    pub evaluation_mode: Option<String>,
    /// The resource names of the attestors that must attest to a
    /// container image. If the attestor is in a different project from the
    /// policy, it should be specified in the format projects/*/attestors/*.
    /// Each attestor must exist before a policy can reference it. To add an
    /// attestor to a policy the principal issuing the policy change
    /// request must be able to read the attestor resource.
    /// Note: this field must be non-empty when the evaluation_mode field
    /// specifies REQUIRE_ATTESTATION, otherwise it must be empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireAttestationsBy")]
    pub require_attestations_by: Option<Vec<String>>,
    /// References to Attestor in binaryauthorization to populate requireAttestationsBy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireAttestationsByRefs")]
    pub require_attestations_by_refs: Option<Vec<PolicyInitProviderDefaultAdmissionRuleRequireAttestationsByRefs>>,
    /// Selector for a list of Attestor in binaryauthorization to populate requireAttestationsBy.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireAttestationsBySelector")]
    pub require_attestations_by_selector: Option<PolicyInitProviderDefaultAdmissionRuleRequireAttestationsBySelector>,
}

/// A Reference to a named object.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyInitProviderDefaultAdmissionRuleRequireAttestationsByRefs {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PolicyInitProviderDefaultAdmissionRuleRequireAttestationsByRefsPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyInitProviderDefaultAdmissionRuleRequireAttestationsByRefsPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PolicyInitProviderDefaultAdmissionRuleRequireAttestationsByRefsPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PolicyInitProviderDefaultAdmissionRuleRequireAttestationsByRefsPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyInitProviderDefaultAdmissionRuleRequireAttestationsByRefsPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyInitProviderDefaultAdmissionRuleRequireAttestationsByRefsPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a list of Attestor in binaryauthorization to populate requireAttestationsBy.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyInitProviderDefaultAdmissionRuleRequireAttestationsBySelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PolicyInitProviderDefaultAdmissionRuleRequireAttestationsBySelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyInitProviderDefaultAdmissionRuleRequireAttestationsBySelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PolicyInitProviderDefaultAdmissionRuleRequireAttestationsBySelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PolicyInitProviderDefaultAdmissionRuleRequireAttestationsBySelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyInitProviderDefaultAdmissionRuleRequireAttestationsBySelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyInitProviderDefaultAdmissionRuleRequireAttestationsBySelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PolicyProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PolicyProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PolicyProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<PolicyPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<PolicyPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PolicyPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PolicyPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PolicyPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PolicyPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// PolicyStatus defines the observed state of Policy.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<PolicyStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyStatusAtProvider {
    /// A whitelist of image patterns to exclude from admission rules. If an
    /// image's name matches a whitelist pattern, the image's admission
    /// requests will always be permitted regardless of your admission rules.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "admissionWhitelistPatterns")]
    pub admission_whitelist_patterns: Option<Vec<PolicyStatusAtProviderAdmissionWhitelistPatterns>>,
    /// Per-cluster admission rules. An admission rule specifies either that
    /// all container images used in a pod creation request must be attested
    /// to by one or more attestors, that all pod creations will be allowed,
    /// or that all pod creations will be denied. There can be at most one
    /// admission rule per cluster spec.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clusterAdmissionRules")]
    pub cluster_admission_rules: Option<Vec<PolicyStatusAtProviderClusterAdmissionRules>>,
    /// Default admission rule for a cluster without a per-cluster admission
    /// rule.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultAdmissionRule")]
    pub default_admission_rule: Option<PolicyStatusAtProviderDefaultAdmissionRule>,
    /// A descriptive comment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Controls the evaluation of a Google-maintained global admission policy
    /// for common system-level images. Images not covered by the global
    /// policy will be subject to the project admission policy.
    /// Possible values are: ENABLE, DISABLE.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "globalPolicyEvaluationMode")]
    pub global_policy_evaluation_mode: Option<String>,
    /// an identifier for the resource with format projects/{{project}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyStatusAtProviderAdmissionWhitelistPatterns {
    /// An image name pattern to whitelist, in the form
    /// registry/path/to/image. This supports a trailing * as a
    /// wildcard, but this is allowed only in text after the registry/
    /// part.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "namePattern")]
    pub name_pattern: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyStatusAtProviderClusterAdmissionRules {
    /// The identifier for this object. Format specified above.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub cluster: Option<String>,
    /// The action when a pod creation is denied by the admission rule.
    /// Possible values are: ENFORCED_BLOCK_AND_AUDIT_LOG, DRYRUN_AUDIT_LOG_ONLY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcementMode")]
    pub enforcement_mode: Option<String>,
    /// How this admission rule will be evaluated.
    /// Possible values are: ALWAYS_ALLOW, REQUIRE_ATTESTATION, ALWAYS_DENY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluationMode")]
    pub evaluation_mode: Option<String>,
    /// The resource names of the attestors that must attest to a
    /// container image. If the attestor is in a different project from the
    /// policy, it should be specified in the format projects/*/attestors/*.
    /// Each attestor must exist before a policy can reference it. To add an
    /// attestor to a policy the principal issuing the policy change
    /// request must be able to read the attestor resource.
    /// Note: this field must be non-empty when the evaluation_mode field
    /// specifies REQUIRE_ATTESTATION, otherwise it must be empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireAttestationsBy")]
    pub require_attestations_by: Option<Vec<String>>,
}

/// Default admission rule for a cluster without a per-cluster admission
/// rule.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PolicyStatusAtProviderDefaultAdmissionRule {
    /// The action when a pod creation is denied by the admission rule.
    /// Possible values are: ENFORCED_BLOCK_AND_AUDIT_LOG, DRYRUN_AUDIT_LOG_ONLY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enforcementMode")]
    pub enforcement_mode: Option<String>,
    /// How this admission rule will be evaluated.
    /// Possible values are: ALWAYS_ALLOW, REQUIRE_ATTESTATION, ALWAYS_DENY.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluationMode")]
    pub evaluation_mode: Option<String>,
    /// The resource names of the attestors that must attest to a
    /// container image. If the attestor is in a different project from the
    /// policy, it should be specified in the format projects/*/attestors/*.
    /// Each attestor must exist before a policy can reference it. To add an
    /// attestor to a policy the principal issuing the policy change
    /// request must be able to read the attestor resource.
    /// Note: this field must be non-empty when the evaluation_mode field
    /// specifies REQUIRE_ATTESTATION, otherwise it must be empty.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "requireAttestationsBy")]
    pub require_attestations_by: Option<Vec<String>>,
}


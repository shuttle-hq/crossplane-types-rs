// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// PipelineSpec defines the desired state of Pipeline
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "osis.aws.upbound.io", version = "v1beta1", kind = "Pipeline", plural = "pipelines")]
#[kube(status = "PipelineStatus")]
pub struct PipelineSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<PipelineDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: PipelineForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<PipelineInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<PipelineProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<PipelinePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<PipelineWriteConnectionSecretToRef>,
}

/// PipelineSpec defines the desired state of Pipeline
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PipelineDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineForProvider {
    /// Key-value pairs to configure persistent buffering for the pipeline. See buffer_options below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferOptions")]
    pub buffer_options: Option<Vec<PipelineForProviderBufferOptions>>,
    /// Key-value pairs to configure encryption for data that is written to a persistent buffer. See encryption_at_rest_options below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionAtRestOptions")]
    pub encryption_at_rest_options: Option<Vec<PipelineForProviderEncryptionAtRestOptions>>,
    /// Key-value pairs to configure log publishing. See log_publishing_options below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logPublishingOptions")]
    pub log_publishing_options: Option<Vec<PipelineForProviderLogPublishingOptions>>,
    /// The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnits")]
    pub max_units: Option<f64>,
    /// The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minUnits")]
    pub min_units: Option<f64>,
    /// The pipeline configuration in YAML format. This argument accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \n.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pipelineConfigurationBody")]
    pub pipeline_configuration_body: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint. See vpc_options below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcOptions")]
    pub vpc_options: Option<Vec<PipelineForProviderVpcOptions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineForProviderBufferOptions {
    /// Whether persistent buffering should be enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentBufferEnabled")]
    pub persistent_buffer_enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineForProviderEncryptionAtRestOptions {
    /// The ARN of the KMS key used to encrypt data-at-rest in OpenSearch Ingestion. By default, data is encrypted using an AWS owned key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineForProviderLogPublishingOptions {
    /// The destination for OpenSearch Ingestion logs sent to Amazon CloudWatch Logs. This parameter is required if IsLoggingEnabled is set to true. See cloudwatch_log_destination below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLogDestination")]
    pub cloudwatch_log_destination: Option<Vec<PipelineForProviderLogPublishingOptionsCloudwatchLogDestination>>,
    /// Whether logs should be published.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isLoggingEnabled")]
    pub is_logging_enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineForProviderLogPublishingOptionsCloudwatchLogDestination {
    /// The name of the CloudWatch Logs group to send pipeline logs to. You can specify an existing log group or create a new one. For example, /aws/OpenSearchService/IngestionService/my-pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroup")]
    pub log_group: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineForProviderVpcOptions {
    /// A list of security groups associated with the VPC endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// A list of subnet IDs associated with the VPC endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineInitProvider {
    /// Key-value pairs to configure persistent buffering for the pipeline. See buffer_options below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferOptions")]
    pub buffer_options: Option<Vec<PipelineInitProviderBufferOptions>>,
    /// Key-value pairs to configure encryption for data that is written to a persistent buffer. See encryption_at_rest_options below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionAtRestOptions")]
    pub encryption_at_rest_options: Option<Vec<PipelineInitProviderEncryptionAtRestOptions>>,
    /// Key-value pairs to configure log publishing. See log_publishing_options below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logPublishingOptions")]
    pub log_publishing_options: Option<Vec<PipelineInitProviderLogPublishingOptions>>,
    /// The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnits")]
    pub max_units: Option<f64>,
    /// The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minUnits")]
    pub min_units: Option<f64>,
    /// The pipeline configuration in YAML format. This argument accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \n.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pipelineConfigurationBody")]
    pub pipeline_configuration_body: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint. See vpc_options below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcOptions")]
    pub vpc_options: Option<Vec<PipelineInitProviderVpcOptions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineInitProviderBufferOptions {
    /// Whether persistent buffering should be enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentBufferEnabled")]
    pub persistent_buffer_enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineInitProviderEncryptionAtRestOptions {
    /// The ARN of the KMS key used to encrypt data-at-rest in OpenSearch Ingestion. By default, data is encrypted using an AWS owned key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineInitProviderLogPublishingOptions {
    /// The destination for OpenSearch Ingestion logs sent to Amazon CloudWatch Logs. This parameter is required if IsLoggingEnabled is set to true. See cloudwatch_log_destination below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLogDestination")]
    pub cloudwatch_log_destination: Option<Vec<PipelineInitProviderLogPublishingOptionsCloudwatchLogDestination>>,
    /// Whether logs should be published.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isLoggingEnabled")]
    pub is_logging_enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineInitProviderLogPublishingOptionsCloudwatchLogDestination {
    /// The name of the CloudWatch Logs group to send pipeline logs to. You can specify an existing log group or create a new one. For example, /aws/OpenSearchService/IngestionService/my-pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroup")]
    pub log_group: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineInitProviderVpcOptions {
    /// A list of security groups associated with the VPC endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// A list of subnet IDs associated with the VPC endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PipelineProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PipelineProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PipelineProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PipelineProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PipelineProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelinePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<PipelinePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<PipelinePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelinePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<PipelinePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelinePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<PipelinePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<PipelinePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PipelinePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum PipelinePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelinePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// PipelineStatus defines the observed state of Pipeline.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<PipelineStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineStatusAtProvider {
    /// Key-value pairs to configure persistent buffering for the pipeline. See buffer_options below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "bufferOptions")]
    pub buffer_options: Option<Vec<PipelineStatusAtProviderBufferOptions>>,
    /// Key-value pairs to configure encryption for data that is written to a persistent buffer. See encryption_at_rest_options below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "encryptionAtRestOptions")]
    pub encryption_at_rest_options: Option<Vec<PipelineStatusAtProviderEncryptionAtRestOptions>>,
    /// Unique identifier for the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The list of ingestion endpoints for the pipeline, which you can send data to.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingestEndpointUrls")]
    pub ingest_endpoint_urls: Option<Vec<String>>,
    /// Key-value pairs to configure log publishing. See log_publishing_options below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logPublishingOptions")]
    pub log_publishing_options: Option<Vec<PipelineStatusAtProviderLogPublishingOptions>>,
    /// The maximum pipeline capacity, in Ingestion Compute Units (ICUs).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maxUnits")]
    pub max_units: Option<f64>,
    /// The minimum pipeline capacity, in Ingestion Compute Units (ICUs).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minUnits")]
    pub min_units: Option<f64>,
    /// Amazon Resource Name (ARN) of the pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pipelineArn")]
    pub pipeline_arn: Option<String>,
    /// The pipeline configuration in YAML format. This argument accepts the pipeline configuration as a string or within a .yaml file. If you provide the configuration as a string, each new line must be escaped with \n.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pipelineConfigurationBody")]
    pub pipeline_configuration_body: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// Container for the values required to configure VPC access for the pipeline. If you don't specify these values, OpenSearch Ingestion creates the pipeline with a public endpoint. See vpc_options below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "vpcOptions")]
    pub vpc_options: Option<Vec<PipelineStatusAtProviderVpcOptions>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineStatusAtProviderBufferOptions {
    /// Whether persistent buffering should be enabled.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "persistentBufferEnabled")]
    pub persistent_buffer_enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineStatusAtProviderEncryptionAtRestOptions {
    /// The ARN of the KMS key used to encrypt data-at-rest in OpenSearch Ingestion. By default, data is encrypted using an AWS owned key.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyArn")]
    pub kms_key_arn: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineStatusAtProviderLogPublishingOptions {
    /// The destination for OpenSearch Ingestion logs sent to Amazon CloudWatch Logs. This parameter is required if IsLoggingEnabled is set to true. See cloudwatch_log_destination below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "cloudwatchLogDestination")]
    pub cloudwatch_log_destination: Option<Vec<PipelineStatusAtProviderLogPublishingOptionsCloudwatchLogDestination>>,
    /// Whether logs should be published.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "isLoggingEnabled")]
    pub is_logging_enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineStatusAtProviderLogPublishingOptionsCloudwatchLogDestination {
    /// The name of the CloudWatch Logs group to send pipeline logs to. You can specify an existing log group or create a new one. For example, /aws/OpenSearchService/IngestionService/my-pipeline.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "logGroup")]
    pub log_group: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct PipelineStatusAtProviderVpcOptions {
    /// A list of security groups associated with the VPC endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "securityGroupIds")]
    pub security_group_ids: Option<Vec<String>>,
    /// A list of subnet IDs associated with the VPC endpoint.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "subnetIds")]
    pub subnet_ids: Option<Vec<String>>,
}


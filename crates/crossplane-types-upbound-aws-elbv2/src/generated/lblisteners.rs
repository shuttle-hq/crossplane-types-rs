// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// LBListenerSpec defines the desired state of LBListener
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "elbv2.aws.upbound.io", version = "v1beta2", kind = "LBListener", plural = "lblisteners")]
#[kube(status = "LBListenerStatus")]
pub struct LBListenerSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<LBListenerDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: LBListenerForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<LBListenerInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<LBListenerProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<LBListenerPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<LBListenerWriteConnectionSecretToRef>,
}

/// LBListenerSpec defines the desired state of LBListener
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProvider {
    /// Name of the Application-Layer Protocol Negotiation (ALPN) policy. Can be set if protocol is TLS. Valid values are HTTP1Only, HTTP2Only, HTTP2Optional, HTTP2Preferred, and None.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnPolicy")]
    pub alpn_policy: Option<String>,
    /// ARN of the default SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. For adding additional SSL certificates, see the aws_lb_listener_certificate resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArn")]
    pub certificate_arn: Option<String>,
    /// Configuration block for default actions. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultAction")]
    pub default_action: Option<Vec<LBListenerForProviderDefaultAction>>,
    /// ARN of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerArn")]
    pub load_balancer_arn: Option<String>,
    /// Reference to a LB in elbv2 to populate loadBalancerArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerArnRef")]
    pub load_balancer_arn_ref: Option<LBListenerForProviderLoadBalancerArnRef>,
    /// Selector for a LB in elbv2 to populate loadBalancerArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerArnSelector")]
    pub load_balancer_arn_selector: Option<LBListenerForProviderLoadBalancerArnSelector>,
    /// The mutual authentication configuration information. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mutualAuthentication")]
    pub mutual_authentication: Option<LBListenerForProviderMutualAuthentication>,
    /// Port on which the load balancer is listening. Not valid for Gateway Load Balancers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Protocol for connections from clients to the load balancer. For Application Load Balancers, valid values are HTTP and HTTPS, with a default of HTTP. For Network Load Balancers, valid values are TCP, TLS, UDP, and TCP_UDP. Not valid to use UDP or TCP_UDP if dual-stack mode is enabled. Not valid for Gateway Load Balancers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Name of the SSL Policy for the listener. Required if protocol is HTTPS or TLS. Default is ELBSecurityPolicy-2016-08.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslPolicy")]
    pub ssl_policy: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// TCP idle timeout value in seconds. Can only be set if protocol is TCP on Network Load Balancer, or with a Gateway Load Balancer. Not supported for Application Load Balancers. Valid values are between 60 and 6000 inclusive. Default: 350.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpIdleTimeoutSeconds")]
    pub tcp_idle_timeout_seconds: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderDefaultAction {
    /// Configuration block for using Amazon Cognito to authenticate users. Specify only when type is authenticate-cognito. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticateCognito")]
    pub authenticate_cognito: Option<LBListenerForProviderDefaultActionAuthenticateCognito>,
    /// Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when type is authenticate-oidc. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticateOidc")]
    pub authenticate_oidc: Option<LBListenerForProviderDefaultActionAuthenticateOidc>,
    /// Information for creating an action that returns a custom HTTP response. Required if type is fixed-response.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fixedResponse")]
    pub fixed_response: Option<LBListenerForProviderDefaultActionFixedResponse>,
    /// Configuration block for creating an action that distributes requests among one or more target groups. Specify only if type is forward. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub forward: Option<LBListenerForProviderDefaultActionForward>,
    /// Order for the action. The action with the lowest value for order is performed first. Valid values are between 1 and 50000. Defaults to the position in the list of actions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<f64>,
    /// Configuration block for creating a redirect action. Required if type is redirect. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redirect: Option<LBListenerForProviderDefaultActionRedirect>,
    /// ARN of the Target Group to which to route traffic. Specify only if type is forward and you want to route to a single target group. To route to one or more target groups, use a forward block instead. Can be specified with forward but ARNs must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetGroupArn")]
    pub target_group_arn: Option<String>,
    /// Reference to a LBTargetGroup in elbv2 to populate targetGroupArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetGroupArnRef")]
    pub target_group_arn_ref: Option<LBListenerForProviderDefaultActionTargetGroupArnRef>,
    /// Selector for a LBTargetGroup in elbv2 to populate targetGroupArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetGroupArnSelector")]
    pub target_group_arn_selector: Option<LBListenerForProviderDefaultActionTargetGroupArnSelector>,
    /// Type of routing action. Valid values are forward, redirect, fixed-response, authenticate-cognito and authenticate-oidc.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Configuration block for using Amazon Cognito to authenticate users. Specify only when type is authenticate-cognito. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderDefaultActionAuthenticateCognito {
    /// Query parameters to include in the redirect request to the authorization endpoint. Max: 10. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationRequestExtraParams")]
    pub authentication_request_extra_params: Option<HashMap<String, String>>,
    /// Behavior if the user is not authenticated. Valid values are deny, allow and authenticate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onUnauthenticatedRequest")]
    pub on_unauthenticated_request: Option<String>,
    /// Set of user claims to be requested from the IdP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Name of the cookie used to maintain session information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionCookieName")]
    pub session_cookie_name: Option<String>,
    /// Maximum duration of the authentication session, in seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionTimeout")]
    pub session_timeout: Option<f64>,
    /// ARN of the Cognito user pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolArn")]
    pub user_pool_arn: Option<String>,
    /// ID of the Cognito user pool client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolClientId")]
    pub user_pool_client_id: Option<String>,
    /// Domain prefix or fully-qualified domain name of the Cognito user pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolDomain")]
    pub user_pool_domain: Option<String>,
}

/// Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when type is authenticate-oidc. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderDefaultActionAuthenticateOidc {
    /// Query parameters to include in the redirect request to the authorization endpoint. Max: 10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationRequestExtraParams")]
    pub authentication_request_extra_params: Option<HashMap<String, String>>,
    /// Authorization endpoint of the IdP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationEndpoint")]
    pub authorization_endpoint: Option<String>,
    /// OAuth 2.0 client identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// OAuth 2.0 client secret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientSecretSecretRef")]
    pub client_secret_secret_ref: Option<LBListenerForProviderDefaultActionAuthenticateOidcClientSecretSecretRef>,
    /// OIDC issuer identifier of the IdP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    /// Behavior if the user is not authenticated. Valid values: deny, allow and authenticate
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onUnauthenticatedRequest")]
    pub on_unauthenticated_request: Option<String>,
    /// Set of user claims to be requested from the IdP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Name of the cookie used to maintain session information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionCookieName")]
    pub session_cookie_name: Option<String>,
    /// Maximum duration of the authentication session, in seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionTimeout")]
    pub session_timeout: Option<f64>,
    /// Token endpoint of the IdP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenEndpoint")]
    pub token_endpoint: Option<String>,
    /// User info endpoint of the IdP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userInfoEndpoint")]
    pub user_info_endpoint: Option<String>,
}

/// OAuth 2.0 client secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderDefaultActionAuthenticateOidcClientSecretSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Information for creating an action that returns a custom HTTP response. Required if type is fixed-response.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderDefaultActionFixedResponse {
    /// Content type. Valid values are text/plain, text/css, text/html, application/javascript and application/json.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    /// Message body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageBody")]
    pub message_body: Option<String>,
    /// HTTP response code. Valid values are 2XX, 4XX, or 5XX.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusCode")]
    pub status_code: Option<String>,
}

/// Configuration block for creating an action that distributes requests among one or more target groups. Specify only if type is forward. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderDefaultActionForward {
    /// Configuration block for target group stickiness for the rule. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stickiness: Option<LBListenerForProviderDefaultActionForwardStickiness>,
    /// Set of 1-5 target group blocks. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetGroup")]
    pub target_group: Option<Vec<LBListenerForProviderDefaultActionForwardTargetGroup>>,
}

/// Configuration block for target group stickiness for the rule. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderDefaultActionForwardStickiness {
    /// Time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<f64>,
    /// Whether target group stickiness is enabled. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderDefaultActionForwardTargetGroup {
    /// ARN of the target group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Reference to a LBTargetGroup in elbv2 to populate arn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "arnRef")]
    pub arn_ref: Option<LBListenerForProviderDefaultActionForwardTargetGroupArnRef>,
    /// Selector for a LBTargetGroup in elbv2 to populate arn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "arnSelector")]
    pub arn_selector: Option<LBListenerForProviderDefaultActionForwardTargetGroupArnSelector>,
    /// Weight. The range is 0 to 999.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<f64>,
}

/// Reference to a LBTargetGroup in elbv2 to populate arn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderDefaultActionForwardTargetGroupArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<LBListenerForProviderDefaultActionForwardTargetGroupArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderDefaultActionForwardTargetGroupArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<LBListenerForProviderDefaultActionForwardTargetGroupArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<LBListenerForProviderDefaultActionForwardTargetGroupArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerForProviderDefaultActionForwardTargetGroupArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerForProviderDefaultActionForwardTargetGroupArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a LBTargetGroup in elbv2 to populate arn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderDefaultActionForwardTargetGroupArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<LBListenerForProviderDefaultActionForwardTargetGroupArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderDefaultActionForwardTargetGroupArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<LBListenerForProviderDefaultActionForwardTargetGroupArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<LBListenerForProviderDefaultActionForwardTargetGroupArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerForProviderDefaultActionForwardTargetGroupArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerForProviderDefaultActionForwardTargetGroupArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block for creating a redirect action. Required if type is redirect. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderDefaultActionRedirect {
    /// Hostname. This component is not percent-encoded. The hostname can contain #{host}. Defaults to #{host}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to /#{path}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Port. Specify a value from 1 to 65535 or #{port}. Defaults to #{port}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// Protocol. Valid values are HTTP, HTTPS, or #{protocol}. Defaults to #{protocol}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to #{query}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub query: Option<String>,
    /// HTTP redirect code. The redirect is either permanent (HTTP_301) or temporary (HTTP_302).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusCode")]
    pub status_code: Option<String>,
}

/// Reference to a LBTargetGroup in elbv2 to populate targetGroupArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderDefaultActionTargetGroupArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<LBListenerForProviderDefaultActionTargetGroupArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderDefaultActionTargetGroupArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<LBListenerForProviderDefaultActionTargetGroupArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<LBListenerForProviderDefaultActionTargetGroupArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerForProviderDefaultActionTargetGroupArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerForProviderDefaultActionTargetGroupArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a LBTargetGroup in elbv2 to populate targetGroupArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderDefaultActionTargetGroupArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<LBListenerForProviderDefaultActionTargetGroupArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderDefaultActionTargetGroupArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<LBListenerForProviderDefaultActionTargetGroupArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<LBListenerForProviderDefaultActionTargetGroupArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerForProviderDefaultActionTargetGroupArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerForProviderDefaultActionTargetGroupArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a LB in elbv2 to populate loadBalancerArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderLoadBalancerArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<LBListenerForProviderLoadBalancerArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderLoadBalancerArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<LBListenerForProviderLoadBalancerArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<LBListenerForProviderLoadBalancerArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerForProviderLoadBalancerArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerForProviderLoadBalancerArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a LB in elbv2 to populate loadBalancerArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderLoadBalancerArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<LBListenerForProviderLoadBalancerArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderLoadBalancerArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<LBListenerForProviderLoadBalancerArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<LBListenerForProviderLoadBalancerArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerForProviderLoadBalancerArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerForProviderLoadBalancerArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The mutual authentication configuration information. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerForProviderMutualAuthentication {
    /// Valid values are off and on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advertiseTrustStoreCaNames")]
    pub advertise_trust_store_ca_names: Option<String>,
    /// Whether client certificate expiry is ignored. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreClientCertificateExpiry")]
    pub ignore_client_certificate_expiry: Option<bool>,
    /// Valid values are off, verify and passthrough.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// ARN of the elbv2 Trust Store.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustStoreArn")]
    pub trust_store_arn: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProvider {
    /// Name of the Application-Layer Protocol Negotiation (ALPN) policy. Can be set if protocol is TLS. Valid values are HTTP1Only, HTTP2Only, HTTP2Optional, HTTP2Preferred, and None.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnPolicy")]
    pub alpn_policy: Option<String>,
    /// ARN of the default SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. For adding additional SSL certificates, see the aws_lb_listener_certificate resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArn")]
    pub certificate_arn: Option<String>,
    /// Configuration block for default actions. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultAction")]
    pub default_action: Option<Vec<LBListenerInitProviderDefaultAction>>,
    /// ARN of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerArn")]
    pub load_balancer_arn: Option<String>,
    /// Reference to a LB in elbv2 to populate loadBalancerArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerArnRef")]
    pub load_balancer_arn_ref: Option<LBListenerInitProviderLoadBalancerArnRef>,
    /// Selector for a LB in elbv2 to populate loadBalancerArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerArnSelector")]
    pub load_balancer_arn_selector: Option<LBListenerInitProviderLoadBalancerArnSelector>,
    /// The mutual authentication configuration information. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mutualAuthentication")]
    pub mutual_authentication: Option<LBListenerInitProviderMutualAuthentication>,
    /// Port on which the load balancer is listening. Not valid for Gateway Load Balancers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Protocol for connections from clients to the load balancer. For Application Load Balancers, valid values are HTTP and HTTPS, with a default of HTTP. For Network Load Balancers, valid values are TCP, TLS, UDP, and TCP_UDP. Not valid to use UDP or TCP_UDP if dual-stack mode is enabled. Not valid for Gateway Load Balancers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Name of the SSL Policy for the listener. Required if protocol is HTTPS or TLS. Default is ELBSecurityPolicy-2016-08.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslPolicy")]
    pub ssl_policy: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// TCP idle timeout value in seconds. Can only be set if protocol is TCP on Network Load Balancer, or with a Gateway Load Balancer. Not supported for Application Load Balancers. Valid values are between 60 and 6000 inclusive. Default: 350.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpIdleTimeoutSeconds")]
    pub tcp_idle_timeout_seconds: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderDefaultAction {
    /// Configuration block for using Amazon Cognito to authenticate users. Specify only when type is authenticate-cognito. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticateCognito")]
    pub authenticate_cognito: Option<LBListenerInitProviderDefaultActionAuthenticateCognito>,
    /// Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when type is authenticate-oidc. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticateOidc")]
    pub authenticate_oidc: Option<LBListenerInitProviderDefaultActionAuthenticateOidc>,
    /// Information for creating an action that returns a custom HTTP response. Required if type is fixed-response.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fixedResponse")]
    pub fixed_response: Option<LBListenerInitProviderDefaultActionFixedResponse>,
    /// Configuration block for creating an action that distributes requests among one or more target groups. Specify only if type is forward. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub forward: Option<LBListenerInitProviderDefaultActionForward>,
    /// Order for the action. The action with the lowest value for order is performed first. Valid values are between 1 and 50000. Defaults to the position in the list of actions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<f64>,
    /// Configuration block for creating a redirect action. Required if type is redirect. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redirect: Option<LBListenerInitProviderDefaultActionRedirect>,
    /// ARN of the Target Group to which to route traffic. Specify only if type is forward and you want to route to a single target group. To route to one or more target groups, use a forward block instead. Can be specified with forward but ARNs must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetGroupArn")]
    pub target_group_arn: Option<String>,
    /// Reference to a LBTargetGroup in elbv2 to populate targetGroupArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetGroupArnRef")]
    pub target_group_arn_ref: Option<LBListenerInitProviderDefaultActionTargetGroupArnRef>,
    /// Selector for a LBTargetGroup in elbv2 to populate targetGroupArn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetGroupArnSelector")]
    pub target_group_arn_selector: Option<LBListenerInitProviderDefaultActionTargetGroupArnSelector>,
    /// Type of routing action. Valid values are forward, redirect, fixed-response, authenticate-cognito and authenticate-oidc.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Configuration block for using Amazon Cognito to authenticate users. Specify only when type is authenticate-cognito. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderDefaultActionAuthenticateCognito {
    /// Query parameters to include in the redirect request to the authorization endpoint. Max: 10. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationRequestExtraParams")]
    pub authentication_request_extra_params: Option<HashMap<String, String>>,
    /// Behavior if the user is not authenticated. Valid values are deny, allow and authenticate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onUnauthenticatedRequest")]
    pub on_unauthenticated_request: Option<String>,
    /// Set of user claims to be requested from the IdP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Name of the cookie used to maintain session information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionCookieName")]
    pub session_cookie_name: Option<String>,
    /// Maximum duration of the authentication session, in seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionTimeout")]
    pub session_timeout: Option<f64>,
    /// ARN of the Cognito user pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolArn")]
    pub user_pool_arn: Option<String>,
    /// ID of the Cognito user pool client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolClientId")]
    pub user_pool_client_id: Option<String>,
    /// Domain prefix or fully-qualified domain name of the Cognito user pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolDomain")]
    pub user_pool_domain: Option<String>,
}

/// Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when type is authenticate-oidc. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderDefaultActionAuthenticateOidc {
    /// Query parameters to include in the redirect request to the authorization endpoint. Max: 10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationRequestExtraParams")]
    pub authentication_request_extra_params: Option<HashMap<String, String>>,
    /// Authorization endpoint of the IdP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationEndpoint")]
    pub authorization_endpoint: Option<String>,
    /// OAuth 2.0 client identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// OAuth 2.0 client secret.
    #[serde(rename = "clientSecretSecretRef")]
    pub client_secret_secret_ref: LBListenerInitProviderDefaultActionAuthenticateOidcClientSecretSecretRef,
    /// OIDC issuer identifier of the IdP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    /// Behavior if the user is not authenticated. Valid values: deny, allow and authenticate
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onUnauthenticatedRequest")]
    pub on_unauthenticated_request: Option<String>,
    /// Set of user claims to be requested from the IdP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Name of the cookie used to maintain session information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionCookieName")]
    pub session_cookie_name: Option<String>,
    /// Maximum duration of the authentication session, in seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionTimeout")]
    pub session_timeout: Option<f64>,
    /// Token endpoint of the IdP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenEndpoint")]
    pub token_endpoint: Option<String>,
    /// User info endpoint of the IdP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userInfoEndpoint")]
    pub user_info_endpoint: Option<String>,
}

/// OAuth 2.0 client secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderDefaultActionAuthenticateOidcClientSecretSecretRef {
    /// The key to select.
    pub key: String,
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// Information for creating an action that returns a custom HTTP response. Required if type is fixed-response.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderDefaultActionFixedResponse {
    /// Content type. Valid values are text/plain, text/css, text/html, application/javascript and application/json.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    /// Message body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageBody")]
    pub message_body: Option<String>,
    /// HTTP response code. Valid values are 2XX, 4XX, or 5XX.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusCode")]
    pub status_code: Option<String>,
}

/// Configuration block for creating an action that distributes requests among one or more target groups. Specify only if type is forward. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderDefaultActionForward {
    /// Configuration block for target group stickiness for the rule. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stickiness: Option<LBListenerInitProviderDefaultActionForwardStickiness>,
    /// Set of 1-5 target group blocks. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetGroup")]
    pub target_group: Option<Vec<LBListenerInitProviderDefaultActionForwardTargetGroup>>,
}

/// Configuration block for target group stickiness for the rule. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderDefaultActionForwardStickiness {
    /// Time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<f64>,
    /// Whether target group stickiness is enabled. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderDefaultActionForwardTargetGroup {
    /// ARN of the target group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Reference to a LBTargetGroup in elbv2 to populate arn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "arnRef")]
    pub arn_ref: Option<LBListenerInitProviderDefaultActionForwardTargetGroupArnRef>,
    /// Selector for a LBTargetGroup in elbv2 to populate arn.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "arnSelector")]
    pub arn_selector: Option<LBListenerInitProviderDefaultActionForwardTargetGroupArnSelector>,
    /// Weight. The range is 0 to 999.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<f64>,
}

/// Reference to a LBTargetGroup in elbv2 to populate arn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderDefaultActionForwardTargetGroupArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<LBListenerInitProviderDefaultActionForwardTargetGroupArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderDefaultActionForwardTargetGroupArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<LBListenerInitProviderDefaultActionForwardTargetGroupArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<LBListenerInitProviderDefaultActionForwardTargetGroupArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerInitProviderDefaultActionForwardTargetGroupArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerInitProviderDefaultActionForwardTargetGroupArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a LBTargetGroup in elbv2 to populate arn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderDefaultActionForwardTargetGroupArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<LBListenerInitProviderDefaultActionForwardTargetGroupArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderDefaultActionForwardTargetGroupArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<LBListenerInitProviderDefaultActionForwardTargetGroupArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<LBListenerInitProviderDefaultActionForwardTargetGroupArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerInitProviderDefaultActionForwardTargetGroupArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerInitProviderDefaultActionForwardTargetGroupArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Configuration block for creating a redirect action. Required if type is redirect. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderDefaultActionRedirect {
    /// Hostname. This component is not percent-encoded. The hostname can contain #{host}. Defaults to #{host}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to /#{path}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Port. Specify a value from 1 to 65535 or #{port}. Defaults to #{port}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// Protocol. Valid values are HTTP, HTTPS, or #{protocol}. Defaults to #{protocol}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to #{query}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub query: Option<String>,
    /// HTTP redirect code. The redirect is either permanent (HTTP_301) or temporary (HTTP_302).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusCode")]
    pub status_code: Option<String>,
}

/// Reference to a LBTargetGroup in elbv2 to populate targetGroupArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderDefaultActionTargetGroupArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<LBListenerInitProviderDefaultActionTargetGroupArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderDefaultActionTargetGroupArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<LBListenerInitProviderDefaultActionTargetGroupArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<LBListenerInitProviderDefaultActionTargetGroupArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerInitProviderDefaultActionTargetGroupArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerInitProviderDefaultActionTargetGroupArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a LBTargetGroup in elbv2 to populate targetGroupArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderDefaultActionTargetGroupArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<LBListenerInitProviderDefaultActionTargetGroupArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderDefaultActionTargetGroupArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<LBListenerInitProviderDefaultActionTargetGroupArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<LBListenerInitProviderDefaultActionTargetGroupArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerInitProviderDefaultActionTargetGroupArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerInitProviderDefaultActionTargetGroupArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Reference to a LB in elbv2 to populate loadBalancerArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderLoadBalancerArnRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<LBListenerInitProviderLoadBalancerArnRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderLoadBalancerArnRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<LBListenerInitProviderLoadBalancerArnRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<LBListenerInitProviderLoadBalancerArnRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerInitProviderLoadBalancerArnRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerInitProviderLoadBalancerArnRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a LB in elbv2 to populate loadBalancerArn.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderLoadBalancerArnSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<LBListenerInitProviderLoadBalancerArnSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderLoadBalancerArnSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<LBListenerInitProviderLoadBalancerArnSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<LBListenerInitProviderLoadBalancerArnSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerInitProviderLoadBalancerArnSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerInitProviderLoadBalancerArnSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// The mutual authentication configuration information. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerInitProviderMutualAuthentication {
    /// Valid values are off and on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advertiseTrustStoreCaNames")]
    pub advertise_trust_store_ca_names: Option<String>,
    /// Whether client certificate expiry is ignored. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreClientCertificateExpiry")]
    pub ignore_client_certificate_expiry: Option<bool>,
    /// Valid values are off, verify and passthrough.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// ARN of the elbv2 Trust Store.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustStoreArn")]
    pub trust_store_arn: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<LBListenerProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<LBListenerProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<LBListenerProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<LBListenerPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<LBListenerPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<LBListenerPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<LBListenerPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<LBListenerPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum LBListenerPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// LBListenerStatus defines the observed state of LBListener.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<LBListenerStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerStatusAtProvider {
    /// Name of the Application-Layer Protocol Negotiation (ALPN) policy. Can be set if protocol is TLS. Valid values are HTTP1Only, HTTP2Only, HTTP2Optional, HTTP2Preferred, and None.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "alpnPolicy")]
    pub alpn_policy: Option<String>,
    /// ARN of the listener (matches id).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// ARN of the default SSL server certificate. Exactly one certificate is required if the protocol is HTTPS. For adding additional SSL certificates, see the aws_lb_listener_certificate resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "certificateArn")]
    pub certificate_arn: Option<String>,
    /// Configuration block for default actions. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultAction")]
    pub default_action: Option<Vec<LBListenerStatusAtProviderDefaultAction>>,
    /// ARN of the listener (matches arn).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// ARN of the load balancer.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "loadBalancerArn")]
    pub load_balancer_arn: Option<String>,
    /// The mutual authentication configuration information. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "mutualAuthentication")]
    pub mutual_authentication: Option<LBListenerStatusAtProviderMutualAuthentication>,
    /// Port on which the load balancer is listening. Not valid for Gateway Load Balancers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<f64>,
    /// Protocol for connections from clients to the load balancer. For Application Load Balancers, valid values are HTTP and HTTPS, with a default of HTTP. For Network Load Balancers, valid values are TCP, TLS, UDP, and TCP_UDP. Not valid to use UDP or TCP_UDP if dual-stack mode is enabled. Not valid for Gateway Load Balancers.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Name of the SSL Policy for the listener. Required if protocol is HTTPS or TLS. Default is ELBSecurityPolicy-2016-08.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sslPolicy")]
    pub ssl_policy: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// TCP idle timeout value in seconds. Can only be set if protocol is TCP on Network Load Balancer, or with a Gateway Load Balancer. Not supported for Application Load Balancers. Valid values are between 60 and 6000 inclusive. Default: 350.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tcpIdleTimeoutSeconds")]
    pub tcp_idle_timeout_seconds: Option<f64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerStatusAtProviderDefaultAction {
    /// Configuration block for using Amazon Cognito to authenticate users. Specify only when type is authenticate-cognito. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticateCognito")]
    pub authenticate_cognito: Option<LBListenerStatusAtProviderDefaultActionAuthenticateCognito>,
    /// Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when type is authenticate-oidc. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticateOidc")]
    pub authenticate_oidc: Option<LBListenerStatusAtProviderDefaultActionAuthenticateOidc>,
    /// Information for creating an action that returns a custom HTTP response. Required if type is fixed-response.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "fixedResponse")]
    pub fixed_response: Option<LBListenerStatusAtProviderDefaultActionFixedResponse>,
    /// Configuration block for creating an action that distributes requests among one or more target groups. Specify only if type is forward. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub forward: Option<LBListenerStatusAtProviderDefaultActionForward>,
    /// Order for the action. The action with the lowest value for order is performed first. Valid values are between 1 and 50000. Defaults to the position in the list of actions.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub order: Option<f64>,
    /// Configuration block for creating a redirect action. Required if type is redirect. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub redirect: Option<LBListenerStatusAtProviderDefaultActionRedirect>,
    /// ARN of the Target Group to which to route traffic. Specify only if type is forward and you want to route to a single target group. To route to one or more target groups, use a forward block instead. Can be specified with forward but ARNs must match.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetGroupArn")]
    pub target_group_arn: Option<String>,
    /// Type of routing action. Valid values are forward, redirect, fixed-response, authenticate-cognito and authenticate-oidc.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// Configuration block for using Amazon Cognito to authenticate users. Specify only when type is authenticate-cognito. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerStatusAtProviderDefaultActionAuthenticateCognito {
    /// Query parameters to include in the redirect request to the authorization endpoint. Max: 10. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationRequestExtraParams")]
    pub authentication_request_extra_params: Option<HashMap<String, String>>,
    /// Behavior if the user is not authenticated. Valid values are deny, allow and authenticate.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onUnauthenticatedRequest")]
    pub on_unauthenticated_request: Option<String>,
    /// Set of user claims to be requested from the IdP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Name of the cookie used to maintain session information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionCookieName")]
    pub session_cookie_name: Option<String>,
    /// Maximum duration of the authentication session, in seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionTimeout")]
    pub session_timeout: Option<f64>,
    /// ARN of the Cognito user pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolArn")]
    pub user_pool_arn: Option<String>,
    /// ID of the Cognito user pool client.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolClientId")]
    pub user_pool_client_id: Option<String>,
    /// Domain prefix or fully-qualified domain name of the Cognito user pool.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userPoolDomain")]
    pub user_pool_domain: Option<String>,
}

/// Configuration block for an identity provider that is compliant with OpenID Connect (OIDC). Specify only when type is authenticate-oidc. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerStatusAtProviderDefaultActionAuthenticateOidc {
    /// Query parameters to include in the redirect request to the authorization endpoint. Max: 10.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authenticationRequestExtraParams")]
    pub authentication_request_extra_params: Option<HashMap<String, String>>,
    /// Authorization endpoint of the IdP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "authorizationEndpoint")]
    pub authorization_endpoint: Option<String>,
    /// OAuth 2.0 client identifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "clientId")]
    pub client_id: Option<String>,
    /// OIDC issuer identifier of the IdP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    /// Behavior if the user is not authenticated. Valid values: deny, allow and authenticate
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "onUnauthenticatedRequest")]
    pub on_unauthenticated_request: Option<String>,
    /// Set of user claims to be requested from the IdP.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// Name of the cookie used to maintain session information.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionCookieName")]
    pub session_cookie_name: Option<String>,
    /// Maximum duration of the authentication session, in seconds.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sessionTimeout")]
    pub session_timeout: Option<f64>,
    /// Token endpoint of the IdP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tokenEndpoint")]
    pub token_endpoint: Option<String>,
    /// User info endpoint of the IdP.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "userInfoEndpoint")]
    pub user_info_endpoint: Option<String>,
}

/// Information for creating an action that returns a custom HTTP response. Required if type is fixed-response.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerStatusAtProviderDefaultActionFixedResponse {
    /// Content type. Valid values are text/plain, text/css, text/html, application/javascript and application/json.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "contentType")]
    pub content_type: Option<String>,
    /// Message body.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageBody")]
    pub message_body: Option<String>,
    /// HTTP response code. Valid values are 2XX, 4XX, or 5XX.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusCode")]
    pub status_code: Option<String>,
}

/// Configuration block for creating an action that distributes requests among one or more target groups. Specify only if type is forward. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerStatusAtProviderDefaultActionForward {
    /// Configuration block for target group stickiness for the rule. See below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub stickiness: Option<LBListenerStatusAtProviderDefaultActionForwardStickiness>,
    /// Set of 1-5 target group blocks. See below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "targetGroup")]
    pub target_group: Option<Vec<LBListenerStatusAtProviderDefaultActionForwardTargetGroup>>,
}

/// Configuration block for target group stickiness for the rule. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerStatusAtProviderDefaultActionForwardStickiness {
    /// Time period, in seconds, during which requests from a client should be routed to the same target group. The range is 1-604800 seconds (7 days).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub duration: Option<f64>,
    /// Whether target group stickiness is enabled. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerStatusAtProviderDefaultActionForwardTargetGroup {
    /// ARN of the target group.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Weight. The range is 0 to 999.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub weight: Option<f64>,
}

/// Configuration block for creating a redirect action. Required if type is redirect. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerStatusAtProviderDefaultActionRedirect {
    /// Hostname. This component is not percent-encoded. The hostname can contain #{host}. Defaults to #{host}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub host: Option<String>,
    /// Absolute path, starting with the leading "/". This component is not percent-encoded. The path can contain #{host}, #{path}, and #{port}. Defaults to /#{path}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Port. Specify a value from 1 to 65535 or #{port}. Defaults to #{port}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub port: Option<String>,
    /// Protocol. Valid values are HTTP, HTTPS, or #{protocol}. Defaults to #{protocol}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// Query parameters, URL-encoded when necessary, but not percent-encoded. Do not include the leading "?". Defaults to #{query}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub query: Option<String>,
    /// HTTP redirect code. The redirect is either permanent (HTTP_301) or temporary (HTTP_302).
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "statusCode")]
    pub status_code: Option<String>,
}

/// The mutual authentication configuration information. See below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct LBListenerStatusAtProviderMutualAuthentication {
    /// Valid values are off and on.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "advertiseTrustStoreCaNames")]
    pub advertise_trust_store_ca_names: Option<String>,
    /// Whether client certificate expiry is ignored. Default is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ignoreClientCertificateExpiry")]
    pub ignore_client_certificate_expiry: Option<bool>,
    /// Valid values are off, verify and passthrough.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// ARN of the elbv2 Trust Store.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "trustStoreArn")]
    pub trust_store_arn: Option<String>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// OsPolicyAssignmentSpec defines the desired state of OsPolicyAssignment
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "osconfig.gcp.upbound.io", version = "v1beta2", kind = "OsPolicyAssignment", plural = "ospolicyassignments")]
#[kube(status = "OsPolicyAssignmentStatus")]
pub struct OsPolicyAssignmentSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<OsPolicyAssignmentDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: OsPolicyAssignmentForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<OsPolicyAssignmentInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<OsPolicyAssignmentProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<OsPolicyAssignmentPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<OsPolicyAssignmentWriteConnectionSecretToRef>,
}

/// OsPolicyAssignmentSpec defines the desired state of OsPolicyAssignment
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OsPolicyAssignmentDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProvider {
    /// Policy description. Length of the description is
    /// limited to 1024 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Filter to select VMs. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceFilter")]
    pub instance_filter: Option<OsPolicyAssignmentForProviderInstanceFilter>,
    /// The location for the resource
    pub location: String,
    /// List of OS policies to be applied to the VMs.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osPolicies")]
    pub os_policies: Option<Vec<OsPolicyAssignmentForProviderOsPolicies>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Rollout to deploy the OS policy assignment. A rollout
    /// is triggered in the following situations: 1) OSPolicyAssignment is created.
    /// 2) OSPolicyAssignment is updated and the update contains changes to one of
    /// the following fields: - instance_filter - os_policies 3) OSPolicyAssignment
    /// is deleted. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rollout: Option<OsPolicyAssignmentForProviderRollout>,
    /// Set to true to skip awaiting rollout
    /// during resource creation and update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipAwaitRollout")]
    pub skip_await_rollout: Option<bool>,
}

/// Filter to select VMs. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderInstanceFilter {
    /// Target all VMs in the project. If true, no other criteria
    /// is permitted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub all: Option<bool>,
    /// List of label sets used for VM exclusion. If
    /// the list has more than one label set, the VM is excluded if any of the label
    /// sets are applicable for the VM. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exclusionLabels")]
    pub exclusion_labels: Option<Vec<OsPolicyAssignmentForProviderInstanceFilterExclusionLabels>>,
    /// List of label sets used for VM inclusion. If
    /// the list has more than one LabelSet, the VM is included if any of the
    /// label sets are applicable for the VM. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inclusionLabels")]
    pub inclusion_labels: Option<Vec<OsPolicyAssignmentForProviderInstanceFilterInclusionLabels>>,
    /// List of inventories to select VMs. A VM is
    /// selected if its inventory data matches at least one of the following
    /// inventories. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inventories: Option<Vec<OsPolicyAssignmentForProviderInstanceFilterInventories>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderInstanceFilterExclusionLabels {
    /// Labels are identified by key/value pairs in this map.
    /// A VM should contain all the key/value pairs specified in this map to be
    /// selected.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderInstanceFilterInclusionLabels {
    /// Labels are identified by key/value pairs in this map.
    /// A VM should contain all the key/value pairs specified in this map to be
    /// selected.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderInstanceFilterInventories {
    /// The OS short name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osShortName")]
    pub os_short_name: Option<String>,
    /// The OS version Prefix matches are supported if
    /// asterisk(*) is provided as the last character. For example, to match all
    /// versions with a major version of 7, specify the following value for this
    /// field 7.* An empty string matches all OS versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osVersion")]
    pub os_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPolicies {
    /// This flag determines the OS
    /// policy compliance status when none of the resource groups within the policy
    /// are applicable for a VM. Set this value to true if the policy needs to be
    /// reported as compliant even if the policy has nothing to validate or enforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowNoResourceGroupMatch")]
    pub allow_no_resource_group_match: Option<bool>,
    /// Policy description. Length of the description is
    /// limited to 1024 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The id of the OS policy with the following restrictions:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Policy mode Possible values are: MODE_UNSPECIFIED,
    /// VALIDATION, ENFORCEMENT.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// List of resource groups for the policy. For a
    /// particular VM, resource groups are evaluated in the order specified and the
    /// first resource group that is applicable is selected and the rest are
    /// ignored. If none of the resource groups are applicable for a VM, the VM is
    /// considered to be non-compliant w.r.t this policy. This behavior can be
    /// toggled by the flag allow_no_resource_group_match Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroups")]
    pub resource_groups: Option<Vec<OsPolicyAssignmentForProviderOsPoliciesResourceGroups>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroups {
    /// List of inventory filters for the resource
    /// group. The resources in this resource group are applied to the target VM if
    /// it satisfies at least one of the following inventory filters. For example,
    /// to apply this resource group to VMs running either RHEL or CentOS
    /// operating systems, specify 2 items for the list with following values:
    /// inventory_filters[0].os_short_name='rhel' and
    /// inventory_filters[1].os_short_name='centos' If the list is empty, this
    /// resource group will be applied to the target VM unconditionally. Structure
    /// is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inventoryFilters")]
    pub inventory_filters: Option<Vec<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsInventoryFilters>>,
    /// List of resources configured for this resource
    /// group. The resources are executed in the exact order specified here.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResources>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsInventoryFilters {
    /// The OS short name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osShortName")]
    pub os_short_name: Option<String>,
    /// The OS version Prefix matches are supported if
    /// asterisk(*) is provided as the last character. For example, to match all
    /// versions with a major version of 7, specify the following value for this
    /// field 7.* An empty string matches all OS versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osVersion")]
    pub os_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResources {
    /// Exec resource Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesExec>,
    /// A remote or local file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesFile>,
    /// A one word, unique name for this repository. This is the
    /// repo id in the zypper config file and also the display_name if
    /// display_name is omitted. This id is also used as the unique identifier
    /// when checking for GuestPolicy conflicts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Package resource Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pkg: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkg>,
    /// Package repository resource Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesRepository>,
}

/// Exec resource Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesExec {
    /// What to run to bring this resource into the desired
    /// state. An exit code of 100 indicates "success", any other exit code
    /// indicates a failure running enforce. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enforce: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesExecEnforce>,
    /// What to run to validate this resource is in the
    /// desired state. An exit code of 100 indicates "in desired state", and exit
    /// code of 101 indicates "not in desired state". Any other exit code indicates
    /// a failure running validate. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validate: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesExecValidate>,
}

/// What to run to bring this resource into the desired
/// state. An exit code of 100 indicates "success", any other exit code
/// indicates a failure running enforce. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesExecEnforce {
    /// Optional arguments to pass to the source during
    /// execution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// A remote or local file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesExecEnforceFile>,
    /// The script interpreter to use. Possible values
    /// are: INTERPRETER_UNSPECIFIED, NONE, SHELL, POWERSHELL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interpreter: Option<String>,
    /// Only recorded for enforce Exec. Path to an
    /// output file (that is created by this Exec) whose content will be recorded in
    /// OSPolicyResourceCompliance after a successful run. Absence or failure to
    /// read this file will result in this ExecResource being non-compliant. Output
    /// file size is limited to 100K bytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputFilePath")]
    pub output_file_path: Option<String>,
    /// An inline script. The size of the script is limited to
    /// 1024 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub script: Option<String>,
}

/// A remote or local file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesExecEnforceFile {
    /// Defaults to false. When false, files are
    /// subject to validations based on the file type: Remote: A checksum must be
    /// specified. Cloud Storage: An object generation number must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    /// A Cloud Storage object. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesExecEnforceFileGcs>,
    /// A local path within the VM to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// A generic remote file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesExecEnforceFileRemote>,
}

/// A Cloud Storage object. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesExecEnforceFileGcs {
    /// Bucket of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Generation number of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<f64>,
    /// Name of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

/// A generic remote file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesExecEnforceFileRemote {
    /// SHA256 checksum of the remote file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha256Checksum")]
    pub sha256_checksum: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// What to run to validate this resource is in the
/// desired state. An exit code of 100 indicates "in desired state", and exit
/// code of 101 indicates "not in desired state". Any other exit code indicates
/// a failure running validate. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesExecValidate {
    /// Optional arguments to pass to the source during
    /// execution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// A remote or local file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesExecValidateFile>,
    /// The script interpreter to use. Possible values
    /// are: INTERPRETER_UNSPECIFIED, NONE, SHELL, POWERSHELL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interpreter: Option<String>,
    /// Only recorded for enforce Exec. Path to an
    /// output file (that is created by this Exec) whose content will be recorded in
    /// OSPolicyResourceCompliance after a successful run. Absence or failure to
    /// read this file will result in this ExecResource being non-compliant. Output
    /// file size is limited to 100K bytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputFilePath")]
    pub output_file_path: Option<String>,
    /// An inline script. The size of the script is limited to
    /// 1024 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub script: Option<String>,
}

/// A remote or local file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesExecValidateFile {
    /// Defaults to false. When false, files are
    /// subject to validations based on the file type: Remote: A checksum must be
    /// specified. Cloud Storage: An object generation number must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    /// A Cloud Storage object. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesExecValidateFileGcs>,
    /// A local path within the VM to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// A generic remote file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesExecValidateFileRemote>,
}

/// A Cloud Storage object. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesExecValidateFileGcs {
    /// Bucket of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Generation number of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<f64>,
    /// Name of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

/// A generic remote file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesExecValidateFileRemote {
    /// SHA256 checksum of the remote file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha256Checksum")]
    pub sha256_checksum: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// A remote or local file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesFile {
    /// A a file with this content. The size of the content
    /// is limited to 1024 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// A remote or local file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesFileFile>,
    /// The absolute path of the file within the VM.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Desired state of the file. Possible values are:
    /// DESIRED_STATE_UNSPECIFIED, PRESENT, ABSENT, CONTENTS_MATCH.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// A remote or local file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesFileFile {
    /// Defaults to false. When false, files are
    /// subject to validations based on the file type: Remote: A checksum must be
    /// specified. Cloud Storage: An object generation number must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    /// A Cloud Storage object. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesFileFileGcs>,
    /// A local path within the VM to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// A generic remote file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesFileFileRemote>,
}

/// A Cloud Storage object. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesFileFileGcs {
    /// Bucket of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Generation number of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<f64>,
    /// Name of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

/// A generic remote file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesFileFileRemote {
    /// SHA256 checksum of the remote file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha256Checksum")]
    pub sha256_checksum: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Package resource Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkg {
    /// An Apt Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apt: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgApt>,
    /// A deb package file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deb: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgDeb>,
    /// The desired state the agent should maintain for
    /// this package. Possible values are: DESIRED_STATE_UNSPECIFIED, INSTALLED,
    /// REMOVED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredState")]
    pub desired_state: Option<String>,
    /// A package managed by GooGet. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub googet: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgGooget>,
    /// An MSI package. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub msi: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgMsi>,
    /// An rpm package file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rpm: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgRpm>,
    /// A Yum Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub yum: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgYum>,
    /// A Zypper Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zypper: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgZypper>,
}

/// An Apt Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgApt {
    /// Package name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// A deb package file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgDeb {
    /// Whether dependencies should also be installed. -
    /// install when false: rpm --upgrade --replacepkgs package.rpm - install when
    /// true: yum -y install package.rpm or zypper -y install package.rpm
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullDeps")]
    pub pull_deps: Option<bool>,
    /// An rpm package. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgDebSource>,
}

/// An rpm package. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgDebSource {
    /// Defaults to false. When false, files are
    /// subject to validations based on the file type: Remote: A checksum must be
    /// specified. Cloud Storage: An object generation number must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    /// A Cloud Storage object. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgDebSourceGcs>,
    /// A local path within the VM to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// A generic remote file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgDebSourceRemote>,
}

/// A Cloud Storage object. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgDebSourceGcs {
    /// Bucket of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Generation number of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<f64>,
    /// Name of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

/// A generic remote file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgDebSourceRemote {
    /// SHA256 checksum of the remote file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha256Checksum")]
    pub sha256_checksum: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// A package managed by GooGet. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgGooget {
    /// Package name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// An MSI package. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgMsi {
    /// Additional properties to use during installation.
    /// This should be in the format of Property=Setting. Appended to the defaults
    /// of ACTION=INSTALL REBOOT=ReallySuppress.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<String>>,
    /// An rpm package. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgMsiSource>,
}

/// An rpm package. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgMsiSource {
    /// Defaults to false. When false, files are
    /// subject to validations based on the file type: Remote: A checksum must be
    /// specified. Cloud Storage: An object generation number must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    /// A Cloud Storage object. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgMsiSourceGcs>,
    /// A local path within the VM to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// A generic remote file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgMsiSourceRemote>,
}

/// A Cloud Storage object. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgMsiSourceGcs {
    /// Bucket of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Generation number of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<f64>,
    /// Name of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

/// A generic remote file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgMsiSourceRemote {
    /// SHA256 checksum of the remote file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha256Checksum")]
    pub sha256_checksum: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// An rpm package file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgRpm {
    /// Whether dependencies should also be installed. -
    /// install when false: rpm --upgrade --replacepkgs package.rpm - install when
    /// true: yum -y install package.rpm or zypper -y install package.rpm
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullDeps")]
    pub pull_deps: Option<bool>,
    /// An rpm package. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgRpmSource>,
}

/// An rpm package. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgRpmSource {
    /// Defaults to false. When false, files are
    /// subject to validations based on the file type: Remote: A checksum must be
    /// specified. Cloud Storage: An object generation number must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    /// A Cloud Storage object. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgRpmSourceGcs>,
    /// A local path within the VM to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// A generic remote file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgRpmSourceRemote>,
}

/// A Cloud Storage object. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgRpmSourceGcs {
    /// Bucket of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Generation number of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<f64>,
    /// Name of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

/// A generic remote file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgRpmSourceRemote {
    /// SHA256 checksum of the remote file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha256Checksum")]
    pub sha256_checksum: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// A Yum Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgYum {
    /// Package name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// A Zypper Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesPkgZypper {
    /// Package name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Package repository resource Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesRepository {
    /// An Apt Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apt: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesRepositoryApt>,
    /// A Goo Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub goo: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesRepositoryGoo>,
    /// A Yum Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub yum: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesRepositoryYum>,
    /// A Zypper Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zypper: Option<OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesRepositoryZypper>,
}

/// An Apt Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesRepositoryApt {
    /// Type of archive files in this repository.
    /// Possible values are: ARCHIVE_TYPE_UNSPECIFIED, DEB, DEB_SRC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "archiveType")]
    pub archive_type: Option<String>,
    /// List of components for this repository. Must
    /// contain at least one item.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    /// Distribution of this repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// URI of the key file for this repository. The agent
    /// maintains a keyring at /etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gpgKey")]
    pub gpg_key: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// A Goo Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesRepositoryGoo {
    /// Package name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The url of the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// A Yum Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesRepositoryYum {
    /// The location of the repository directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrl")]
    pub base_url: Option<String>,
    /// The display name of the repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// URIs of GPG keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gpgKeys")]
    pub gpg_keys: Option<Vec<String>>,
    /// A one word, unique name for this repository. This is the
    /// repo id in the zypper config file and also the display_name if
    /// display_name is omitted. This id is also used as the unique identifier
    /// when checking for GuestPolicy conflicts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

/// A Zypper Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderOsPoliciesResourceGroupsResourcesRepositoryZypper {
    /// The location of the repository directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrl")]
    pub base_url: Option<String>,
    /// The display name of the repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// URIs of GPG keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gpgKeys")]
    pub gpg_keys: Option<Vec<String>>,
    /// A one word, unique name for this repository. This is the
    /// repo id in the zypper config file and also the display_name if
    /// display_name is omitted. This id is also used as the unique identifier
    /// when checking for GuestPolicy conflicts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

/// Rollout to deploy the OS policy assignment. A rollout
/// is triggered in the following situations: 1) OSPolicyAssignment is created.
/// 2) OSPolicyAssignment is updated and the update contains changes to one of
/// the following fields: - instance_filter - os_policies 3) OSPolicyAssignment
/// is deleted. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderRollout {
    /// The maximum number (or percentage) of VMs
    /// per zone to disrupt at any given moment. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disruptionBudget")]
    pub disruption_budget: Option<OsPolicyAssignmentForProviderRolloutDisruptionBudget>,
    /// This determines the minimum duration of
    /// time to wait after the configuration changes are applied through the current
    /// rollout. A VM continues to count towards the disruption_budget at least
    /// until this duration of time has passed after configuration changes are
    /// applied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minWaitDuration")]
    pub min_wait_duration: Option<String>,
}

/// The maximum number (or percentage) of VMs
/// per zone to disrupt at any given moment. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentForProviderRolloutDisruptionBudget {
    /// Specifies a fixed value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fixed: Option<f64>,
    /// Specifies the relative value defined as a percentage,
    /// which will be multiplied by a reference value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<f64>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProvider {
    /// Policy description. Length of the description is
    /// limited to 1024 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Filter to select VMs. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceFilter")]
    pub instance_filter: Option<OsPolicyAssignmentInitProviderInstanceFilter>,
    /// List of OS policies to be applied to the VMs.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osPolicies")]
    pub os_policies: Option<Vec<OsPolicyAssignmentInitProviderOsPolicies>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Rollout to deploy the OS policy assignment. A rollout
    /// is triggered in the following situations: 1) OSPolicyAssignment is created.
    /// 2) OSPolicyAssignment is updated and the update contains changes to one of
    /// the following fields: - instance_filter - os_policies 3) OSPolicyAssignment
    /// is deleted. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rollout: Option<OsPolicyAssignmentInitProviderRollout>,
    /// Set to true to skip awaiting rollout
    /// during resource creation and update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipAwaitRollout")]
    pub skip_await_rollout: Option<bool>,
}

/// Filter to select VMs. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderInstanceFilter {
    /// Target all VMs in the project. If true, no other criteria
    /// is permitted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub all: Option<bool>,
    /// List of label sets used for VM exclusion. If
    /// the list has more than one label set, the VM is excluded if any of the label
    /// sets are applicable for the VM. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exclusionLabels")]
    pub exclusion_labels: Option<Vec<OsPolicyAssignmentInitProviderInstanceFilterExclusionLabels>>,
    /// List of label sets used for VM inclusion. If
    /// the list has more than one LabelSet, the VM is included if any of the
    /// label sets are applicable for the VM. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inclusionLabels")]
    pub inclusion_labels: Option<Vec<OsPolicyAssignmentInitProviderInstanceFilterInclusionLabels>>,
    /// List of inventories to select VMs. A VM is
    /// selected if its inventory data matches at least one of the following
    /// inventories. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inventories: Option<Vec<OsPolicyAssignmentInitProviderInstanceFilterInventories>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderInstanceFilterExclusionLabels {
    /// Labels are identified by key/value pairs in this map.
    /// A VM should contain all the key/value pairs specified in this map to be
    /// selected.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderInstanceFilterInclusionLabels {
    /// Labels are identified by key/value pairs in this map.
    /// A VM should contain all the key/value pairs specified in this map to be
    /// selected.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderInstanceFilterInventories {
    /// The OS short name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osShortName")]
    pub os_short_name: Option<String>,
    /// The OS version Prefix matches are supported if
    /// asterisk(*) is provided as the last character. For example, to match all
    /// versions with a major version of 7, specify the following value for this
    /// field 7.* An empty string matches all OS versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osVersion")]
    pub os_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPolicies {
    /// This flag determines the OS
    /// policy compliance status when none of the resource groups within the policy
    /// are applicable for a VM. Set this value to true if the policy needs to be
    /// reported as compliant even if the policy has nothing to validate or enforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowNoResourceGroupMatch")]
    pub allow_no_resource_group_match: Option<bool>,
    /// Policy description. Length of the description is
    /// limited to 1024 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The id of the OS policy with the following restrictions:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Policy mode Possible values are: MODE_UNSPECIFIED,
    /// VALIDATION, ENFORCEMENT.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// List of resource groups for the policy. For a
    /// particular VM, resource groups are evaluated in the order specified and the
    /// first resource group that is applicable is selected and the rest are
    /// ignored. If none of the resource groups are applicable for a VM, the VM is
    /// considered to be non-compliant w.r.t this policy. This behavior can be
    /// toggled by the flag allow_no_resource_group_match Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroups")]
    pub resource_groups: Option<Vec<OsPolicyAssignmentInitProviderOsPoliciesResourceGroups>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroups {
    /// List of inventory filters for the resource
    /// group. The resources in this resource group are applied to the target VM if
    /// it satisfies at least one of the following inventory filters. For example,
    /// to apply this resource group to VMs running either RHEL or CentOS
    /// operating systems, specify 2 items for the list with following values:
    /// inventory_filters[0].os_short_name='rhel' and
    /// inventory_filters[1].os_short_name='centos' If the list is empty, this
    /// resource group will be applied to the target VM unconditionally. Structure
    /// is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inventoryFilters")]
    pub inventory_filters: Option<Vec<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsInventoryFilters>>,
    /// List of resources configured for this resource
    /// group. The resources are executed in the exact order specified here.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResources>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsInventoryFilters {
    /// The OS short name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osShortName")]
    pub os_short_name: Option<String>,
    /// The OS version Prefix matches are supported if
    /// asterisk(*) is provided as the last character. For example, to match all
    /// versions with a major version of 7, specify the following value for this
    /// field 7.* An empty string matches all OS versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osVersion")]
    pub os_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResources {
    /// Exec resource Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesExec>,
    /// A remote or local file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesFile>,
    /// A one word, unique name for this repository. This is the
    /// repo id in the zypper config file and also the display_name if
    /// display_name is omitted. This id is also used as the unique identifier
    /// when checking for GuestPolicy conflicts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Package resource Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pkg: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkg>,
    /// Package repository resource Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesRepository>,
}

/// Exec resource Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesExec {
    /// What to run to bring this resource into the desired
    /// state. An exit code of 100 indicates "success", any other exit code
    /// indicates a failure running enforce. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enforce: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesExecEnforce>,
    /// What to run to validate this resource is in the
    /// desired state. An exit code of 100 indicates "in desired state", and exit
    /// code of 101 indicates "not in desired state". Any other exit code indicates
    /// a failure running validate. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validate: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesExecValidate>,
}

/// What to run to bring this resource into the desired
/// state. An exit code of 100 indicates "success", any other exit code
/// indicates a failure running enforce. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesExecEnforce {
    /// Optional arguments to pass to the source during
    /// execution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// A remote or local file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesExecEnforceFile>,
    /// The script interpreter to use. Possible values
    /// are: INTERPRETER_UNSPECIFIED, NONE, SHELL, POWERSHELL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interpreter: Option<String>,
    /// Only recorded for enforce Exec. Path to an
    /// output file (that is created by this Exec) whose content will be recorded in
    /// OSPolicyResourceCompliance after a successful run. Absence or failure to
    /// read this file will result in this ExecResource being non-compliant. Output
    /// file size is limited to 100K bytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputFilePath")]
    pub output_file_path: Option<String>,
    /// An inline script. The size of the script is limited to
    /// 1024 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub script: Option<String>,
}

/// A remote or local file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesExecEnforceFile {
    /// Defaults to false. When false, files are
    /// subject to validations based on the file type: Remote: A checksum must be
    /// specified. Cloud Storage: An object generation number must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    /// A Cloud Storage object. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesExecEnforceFileGcs>,
    /// A local path within the VM to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// A generic remote file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesExecEnforceFileRemote>,
}

/// A Cloud Storage object. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesExecEnforceFileGcs {
    /// Bucket of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Generation number of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<f64>,
    /// Name of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

/// A generic remote file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesExecEnforceFileRemote {
    /// SHA256 checksum of the remote file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha256Checksum")]
    pub sha256_checksum: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// What to run to validate this resource is in the
/// desired state. An exit code of 100 indicates "in desired state", and exit
/// code of 101 indicates "not in desired state". Any other exit code indicates
/// a failure running validate. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesExecValidate {
    /// Optional arguments to pass to the source during
    /// execution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// A remote or local file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesExecValidateFile>,
    /// The script interpreter to use. Possible values
    /// are: INTERPRETER_UNSPECIFIED, NONE, SHELL, POWERSHELL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interpreter: Option<String>,
    /// Only recorded for enforce Exec. Path to an
    /// output file (that is created by this Exec) whose content will be recorded in
    /// OSPolicyResourceCompliance after a successful run. Absence or failure to
    /// read this file will result in this ExecResource being non-compliant. Output
    /// file size is limited to 100K bytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputFilePath")]
    pub output_file_path: Option<String>,
    /// An inline script. The size of the script is limited to
    /// 1024 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub script: Option<String>,
}

/// A remote or local file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesExecValidateFile {
    /// Defaults to false. When false, files are
    /// subject to validations based on the file type: Remote: A checksum must be
    /// specified. Cloud Storage: An object generation number must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    /// A Cloud Storage object. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesExecValidateFileGcs>,
    /// A local path within the VM to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// A generic remote file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesExecValidateFileRemote>,
}

/// A Cloud Storage object. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesExecValidateFileGcs {
    /// Bucket of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Generation number of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<f64>,
    /// Name of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

/// A generic remote file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesExecValidateFileRemote {
    /// SHA256 checksum of the remote file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha256Checksum")]
    pub sha256_checksum: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// A remote or local file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesFile {
    /// A a file with this content. The size of the content
    /// is limited to 1024 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// A remote or local file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesFileFile>,
    /// The absolute path of the file within the VM.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// Desired state of the file. Possible values are:
    /// DESIRED_STATE_UNSPECIFIED, PRESENT, ABSENT, CONTENTS_MATCH.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// A remote or local file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesFileFile {
    /// Defaults to false. When false, files are
    /// subject to validations based on the file type: Remote: A checksum must be
    /// specified. Cloud Storage: An object generation number must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    /// A Cloud Storage object. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesFileFileGcs>,
    /// A local path within the VM to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// A generic remote file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesFileFileRemote>,
}

/// A Cloud Storage object. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesFileFileGcs {
    /// Bucket of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Generation number of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<f64>,
    /// Name of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

/// A generic remote file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesFileFileRemote {
    /// SHA256 checksum of the remote file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha256Checksum")]
    pub sha256_checksum: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Package resource Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkg {
    /// An Apt Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apt: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgApt>,
    /// A deb package file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deb: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgDeb>,
    /// The desired state the agent should maintain for
    /// this package. Possible values are: DESIRED_STATE_UNSPECIFIED, INSTALLED,
    /// REMOVED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredState")]
    pub desired_state: Option<String>,
    /// A package managed by GooGet. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub googet: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgGooget>,
    /// An MSI package. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub msi: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgMsi>,
    /// An rpm package file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rpm: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgRpm>,
    /// A Yum Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub yum: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgYum>,
    /// A Zypper Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zypper: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgZypper>,
}

/// An Apt Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgApt {
    /// Package name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// A deb package file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgDeb {
    /// Whether dependencies should also be installed. -
    /// install when false: rpm --upgrade --replacepkgs package.rpm - install when
    /// true: yum -y install package.rpm or zypper -y install package.rpm
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullDeps")]
    pub pull_deps: Option<bool>,
    /// An rpm package. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgDebSource>,
}

/// An rpm package. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgDebSource {
    /// Defaults to false. When false, files are
    /// subject to validations based on the file type: Remote: A checksum must be
    /// specified. Cloud Storage: An object generation number must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    /// A Cloud Storage object. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgDebSourceGcs>,
    /// A local path within the VM to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// A generic remote file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgDebSourceRemote>,
}

/// A Cloud Storage object. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgDebSourceGcs {
    /// Bucket of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Generation number of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<f64>,
    /// Name of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

/// A generic remote file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgDebSourceRemote {
    /// SHA256 checksum of the remote file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha256Checksum")]
    pub sha256_checksum: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// A package managed by GooGet. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgGooget {
    /// Package name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// An MSI package. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgMsi {
    /// Additional properties to use during installation.
    /// This should be in the format of Property=Setting. Appended to the defaults
    /// of ACTION=INSTALL REBOOT=ReallySuppress.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<String>>,
    /// An rpm package. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgMsiSource>,
}

/// An rpm package. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgMsiSource {
    /// Defaults to false. When false, files are
    /// subject to validations based on the file type: Remote: A checksum must be
    /// specified. Cloud Storage: An object generation number must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    /// A Cloud Storage object. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgMsiSourceGcs>,
    /// A local path within the VM to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// A generic remote file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgMsiSourceRemote>,
}

/// A Cloud Storage object. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgMsiSourceGcs {
    /// Bucket of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Generation number of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<f64>,
    /// Name of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

/// A generic remote file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgMsiSourceRemote {
    /// SHA256 checksum of the remote file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha256Checksum")]
    pub sha256_checksum: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// An rpm package file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgRpm {
    /// Whether dependencies should also be installed. -
    /// install when false: rpm --upgrade --replacepkgs package.rpm - install when
    /// true: yum -y install package.rpm or zypper -y install package.rpm
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullDeps")]
    pub pull_deps: Option<bool>,
    /// An rpm package. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgRpmSource>,
}

/// An rpm package. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgRpmSource {
    /// Defaults to false. When false, files are
    /// subject to validations based on the file type: Remote: A checksum must be
    /// specified. Cloud Storage: An object generation number must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    /// A Cloud Storage object. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgRpmSourceGcs>,
    /// A local path within the VM to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// A generic remote file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgRpmSourceRemote>,
}

/// A Cloud Storage object. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgRpmSourceGcs {
    /// Bucket of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Generation number of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<f64>,
    /// Name of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

/// A generic remote file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgRpmSourceRemote {
    /// SHA256 checksum of the remote file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha256Checksum")]
    pub sha256_checksum: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// A Yum Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgYum {
    /// Package name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// A Zypper Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesPkgZypper {
    /// Package name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Package repository resource Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesRepository {
    /// An Apt Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apt: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesRepositoryApt>,
    /// A Goo Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub goo: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesRepositoryGoo>,
    /// A Yum Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub yum: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesRepositoryYum>,
    /// A Zypper Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zypper: Option<OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesRepositoryZypper>,
}

/// An Apt Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesRepositoryApt {
    /// Type of archive files in this repository.
    /// Possible values are: ARCHIVE_TYPE_UNSPECIFIED, DEB, DEB_SRC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "archiveType")]
    pub archive_type: Option<String>,
    /// List of components for this repository. Must
    /// contain at least one item.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    /// Distribution of this repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// URI of the key file for this repository. The agent
    /// maintains a keyring at /etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gpgKey")]
    pub gpg_key: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// A Goo Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesRepositoryGoo {
    /// Package name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The url of the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// A Yum Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesRepositoryYum {
    /// The location of the repository directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrl")]
    pub base_url: Option<String>,
    /// The display name of the repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// URIs of GPG keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gpgKeys")]
    pub gpg_keys: Option<Vec<String>>,
    /// A one word, unique name for this repository. This is the
    /// repo id in the zypper config file and also the display_name if
    /// display_name is omitted. This id is also used as the unique identifier
    /// when checking for GuestPolicy conflicts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

/// A Zypper Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderOsPoliciesResourceGroupsResourcesRepositoryZypper {
    /// The location of the repository directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrl")]
    pub base_url: Option<String>,
    /// The display name of the repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// URIs of GPG keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gpgKeys")]
    pub gpg_keys: Option<Vec<String>>,
    /// A one word, unique name for this repository. This is the
    /// repo id in the zypper config file and also the display_name if
    /// display_name is omitted. This id is also used as the unique identifier
    /// when checking for GuestPolicy conflicts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

/// Rollout to deploy the OS policy assignment. A rollout
/// is triggered in the following situations: 1) OSPolicyAssignment is created.
/// 2) OSPolicyAssignment is updated and the update contains changes to one of
/// the following fields: - instance_filter - os_policies 3) OSPolicyAssignment
/// is deleted. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderRollout {
    /// The maximum number (or percentage) of VMs
    /// per zone to disrupt at any given moment. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disruptionBudget")]
    pub disruption_budget: Option<OsPolicyAssignmentInitProviderRolloutDisruptionBudget>,
    /// This determines the minimum duration of
    /// time to wait after the configuration changes are applied through the current
    /// rollout. A VM continues to count towards the disruption_budget at least
    /// until this duration of time has passed after configuration changes are
    /// applied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minWaitDuration")]
    pub min_wait_duration: Option<String>,
}

/// The maximum number (or percentage) of VMs
/// per zone to disrupt at any given moment. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentInitProviderRolloutDisruptionBudget {
    /// Specifies a fixed value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fixed: Option<f64>,
    /// Specifies the relative value defined as a percentage,
    /// which will be multiplied by a reference value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<f64>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<OsPolicyAssignmentProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<OsPolicyAssignmentProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<OsPolicyAssignmentProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OsPolicyAssignmentProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OsPolicyAssignmentProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<OsPolicyAssignmentPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<OsPolicyAssignmentPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<OsPolicyAssignmentPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<OsPolicyAssignmentPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<OsPolicyAssignmentPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OsPolicyAssignmentPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum OsPolicyAssignmentPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// OsPolicyAssignmentStatus defines the observed state of OsPolicyAssignment.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<OsPolicyAssignmentStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProvider {
    /// Output only. Indicates that this revision has been successfully
    /// rolled out in this zone and new VMs will be assigned OS policies from this
    /// revision. For a given OS policy assignment, there is only one revision with
    /// a value of true for this field.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub baseline: Option<bool>,
    /// Output only. Indicates that this revision deletes the OS policy
    /// assignment.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deleted: Option<bool>,
    /// Policy description. Length of the description is
    /// limited to 1024 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The etag for this OS policy assignment. If this is provided on
    /// update, it must match the server's etag.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub etag: Option<String>,
    /// an identifier for the resource with format
    /// projects/{{project}}/locations/{{location}}/osPolicyAssignments/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Filter to select VMs. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "instanceFilter")]
    pub instance_filter: Option<OsPolicyAssignmentStatusAtProviderInstanceFilter>,
    /// The location for the resource
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
    /// List of OS policies to be applied to the VMs.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osPolicies")]
    pub os_policies: Option<Vec<OsPolicyAssignmentStatusAtProviderOsPolicies>>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Output only. Indicates that reconciliation is in progress
    /// for the revision. This value is true when the rollout_state is one of:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reconciling: Option<bool>,
    /// Output only. The timestamp that the revision was
    /// created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionCreateTime")]
    pub revision_create_time: Option<String>,
    /// Output only. The assignment revision ID A new revision is
    /// committed whenever a rollout is triggered for a OS policy assignment
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "revisionId")]
    pub revision_id: Option<String>,
    /// Rollout to deploy the OS policy assignment. A rollout
    /// is triggered in the following situations: 1) OSPolicyAssignment is created.
    /// 2) OSPolicyAssignment is updated and the update contains changes to one of
    /// the following fields: - instance_filter - os_policies 3) OSPolicyAssignment
    /// is deleted. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rollout: Option<OsPolicyAssignmentStatusAtProviderRollout>,
    /// Output only. OS policy assignment rollout state
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "rolloutState")]
    pub rollout_state: Option<String>,
    /// Set to true to skip awaiting rollout
    /// during resource creation and update.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "skipAwaitRollout")]
    pub skip_await_rollout: Option<bool>,
    /// Output only. Server generated unique id for the OS policy assignment
    /// resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uid: Option<String>,
}

/// Filter to select VMs. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderInstanceFilter {
    /// Target all VMs in the project. If true, no other criteria
    /// is permitted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub all: Option<bool>,
    /// List of label sets used for VM exclusion. If
    /// the list has more than one label set, the VM is excluded if any of the label
    /// sets are applicable for the VM. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "exclusionLabels")]
    pub exclusion_labels: Option<Vec<OsPolicyAssignmentStatusAtProviderInstanceFilterExclusionLabels>>,
    /// List of label sets used for VM inclusion. If
    /// the list has more than one LabelSet, the VM is included if any of the
    /// label sets are applicable for the VM. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inclusionLabels")]
    pub inclusion_labels: Option<Vec<OsPolicyAssignmentStatusAtProviderInstanceFilterInclusionLabels>>,
    /// List of inventories to select VMs. A VM is
    /// selected if its inventory data matches at least one of the following
    /// inventories. Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub inventories: Option<Vec<OsPolicyAssignmentStatusAtProviderInstanceFilterInventories>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderInstanceFilterExclusionLabels {
    /// Labels are identified by key/value pairs in this map.
    /// A VM should contain all the key/value pairs specified in this map to be
    /// selected.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderInstanceFilterInclusionLabels {
    /// Labels are identified by key/value pairs in this map.
    /// A VM should contain all the key/value pairs specified in this map to be
    /// selected.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderInstanceFilterInventories {
    /// The OS short name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osShortName")]
    pub os_short_name: Option<String>,
    /// The OS version Prefix matches are supported if
    /// asterisk(*) is provided as the last character. For example, to match all
    /// versions with a major version of 7, specify the following value for this
    /// field 7.* An empty string matches all OS versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osVersion")]
    pub os_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPolicies {
    /// This flag determines the OS
    /// policy compliance status when none of the resource groups within the policy
    /// are applicable for a VM. Set this value to true if the policy needs to be
    /// reported as compliant even if the policy has nothing to validate or enforce.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowNoResourceGroupMatch")]
    pub allow_no_resource_group_match: Option<bool>,
    /// Policy description. Length of the description is
    /// limited to 1024 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The id of the OS policy with the following restrictions:
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Policy mode Possible values are: MODE_UNSPECIFIED,
    /// VALIDATION, ENFORCEMENT.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
    /// List of resource groups for the policy. For a
    /// particular VM, resource groups are evaluated in the order specified and the
    /// first resource group that is applicable is selected and the rest are
    /// ignored. If none of the resource groups are applicable for a VM, the VM is
    /// considered to be non-compliant w.r.t this policy. This behavior can be
    /// toggled by the flag allow_no_resource_group_match Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "resourceGroups")]
    pub resource_groups: Option<Vec<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroups>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroups {
    /// List of inventory filters for the resource
    /// group. The resources in this resource group are applied to the target VM if
    /// it satisfies at least one of the following inventory filters. For example,
    /// to apply this resource group to VMs running either RHEL or CentOS
    /// operating systems, specify 2 items for the list with following values:
    /// inventory_filters[0].os_short_name='rhel' and
    /// inventory_filters[1].os_short_name='centos' If the list is empty, this
    /// resource group will be applied to the target VM unconditionally. Structure
    /// is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inventoryFilters")]
    pub inventory_filters: Option<Vec<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsInventoryFilters>>,
    /// List of resources configured for this resource
    /// group. The resources are executed in the exact order specified here.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResources>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsInventoryFilters {
    /// The OS short name
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osShortName")]
    pub os_short_name: Option<String>,
    /// The OS version Prefix matches are supported if
    /// asterisk(*) is provided as the last character. For example, to match all
    /// versions with a major version of 7, specify the following value for this
    /// field 7.* An empty string matches all OS versions.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "osVersion")]
    pub os_version: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResources {
    /// Exec resource Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub exec: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesExec>,
    /// A remote or local file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesFile>,
    /// A one word, unique name for this repository. This is the
    /// repo id in the zypper config file and also the display_name if
    /// display_name is omitted. This id is also used as the unique identifier
    /// when checking for GuestPolicy conflicts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Package resource Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub pkg: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkg>,
    /// Package repository resource Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub repository: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesRepository>,
}

/// Exec resource Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesExec {
    /// What to run to bring this resource into the desired
    /// state. An exit code of 100 indicates "success", any other exit code
    /// indicates a failure running enforce. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub enforce: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesExecEnforce>,
    /// What to run to validate this resource is in the
    /// desired state. An exit code of 100 indicates "in desired state", and exit
    /// code of 101 indicates "not in desired state". Any other exit code indicates
    /// a failure running validate. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub validate: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesExecValidate>,
}

/// What to run to bring this resource into the desired
/// state. An exit code of 100 indicates "success", any other exit code
/// indicates a failure running enforce. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesExecEnforce {
    /// Optional arguments to pass to the source during
    /// execution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// A remote or local file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesExecEnforceFile>,
    /// The script interpreter to use. Possible values
    /// are: INTERPRETER_UNSPECIFIED, NONE, SHELL, POWERSHELL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interpreter: Option<String>,
    /// Only recorded for enforce Exec. Path to an
    /// output file (that is created by this Exec) whose content will be recorded in
    /// OSPolicyResourceCompliance after a successful run. Absence or failure to
    /// read this file will result in this ExecResource being non-compliant. Output
    /// file size is limited to 100K bytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputFilePath")]
    pub output_file_path: Option<String>,
    /// An inline script. The size of the script is limited to
    /// 1024 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub script: Option<String>,
}

/// A remote or local file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesExecEnforceFile {
    /// Defaults to false. When false, files are
    /// subject to validations based on the file type: Remote: A checksum must be
    /// specified. Cloud Storage: An object generation number must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    /// A Cloud Storage object. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesExecEnforceFileGcs>,
    /// A local path within the VM to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// A generic remote file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesExecEnforceFileRemote>,
}

/// A Cloud Storage object. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesExecEnforceFileGcs {
    /// Bucket of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Generation number of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<f64>,
    /// Name of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

/// A generic remote file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesExecEnforceFileRemote {
    /// SHA256 checksum of the remote file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha256Checksum")]
    pub sha256_checksum: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// What to run to validate this resource is in the
/// desired state. An exit code of 100 indicates "in desired state", and exit
/// code of 101 indicates "not in desired state". Any other exit code indicates
/// a failure running validate. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesExecValidate {
    /// Optional arguments to pass to the source during
    /// execution.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub args: Option<Vec<String>>,
    /// A remote or local file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesExecValidateFile>,
    /// The script interpreter to use. Possible values
    /// are: INTERPRETER_UNSPECIFIED, NONE, SHELL, POWERSHELL.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub interpreter: Option<String>,
    /// Only recorded for enforce Exec. Path to an
    /// output file (that is created by this Exec) whose content will be recorded in
    /// OSPolicyResourceCompliance after a successful run. Absence or failure to
    /// read this file will result in this ExecResource being non-compliant. Output
    /// file size is limited to 100K bytes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "outputFilePath")]
    pub output_file_path: Option<String>,
    /// An inline script. The size of the script is limited to
    /// 1024 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub script: Option<String>,
}

/// A remote or local file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesExecValidateFile {
    /// Defaults to false. When false, files are
    /// subject to validations based on the file type: Remote: A checksum must be
    /// specified. Cloud Storage: An object generation number must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    /// A Cloud Storage object. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesExecValidateFileGcs>,
    /// A local path within the VM to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// A generic remote file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesExecValidateFileRemote>,
}

/// A Cloud Storage object. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesExecValidateFileGcs {
    /// Bucket of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Generation number of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<f64>,
    /// Name of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

/// A generic remote file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesExecValidateFileRemote {
    /// SHA256 checksum of the remote file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha256Checksum")]
    pub sha256_checksum: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// A remote or local file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesFile {
    /// A a file with this content. The size of the content
    /// is limited to 1024 characters.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub content: Option<String>,
    /// A remote or local file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub file: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesFileFile>,
    /// The absolute path of the file within the VM.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// (Output) Consists of three octal digits which represent, in
    /// order, the permissions of the owner, group, and other users for the file
    /// (similarly to the numeric mode used in the linux chmod utility). Each digit
    /// represents a three bit number with the 4 bit corresponding to the read
    /// permissions, the 2 bit corresponds to the write bit, and the one bit
    /// corresponds to the execute permission. Default behavior is 755. Below are
    /// some examples of permissions and their associated values: read, write, and
    /// execute: 7 read and execute: 5 read and write: 6 read only: 4
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub permissions: Option<String>,
    /// Desired state of the file. Possible values are:
    /// DESIRED_STATE_UNSPECIFIED, PRESENT, ABSENT, CONTENTS_MATCH.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub state: Option<String>,
}

/// A remote or local file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesFileFile {
    /// Defaults to false. When false, files are
    /// subject to validations based on the file type: Remote: A checksum must be
    /// specified. Cloud Storage: An object generation number must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    /// A Cloud Storage object. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesFileFileGcs>,
    /// A local path within the VM to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// A generic remote file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesFileFileRemote>,
}

/// A Cloud Storage object. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesFileFileGcs {
    /// Bucket of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Generation number of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<f64>,
    /// Name of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

/// A generic remote file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesFileFileRemote {
    /// SHA256 checksum of the remote file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha256Checksum")]
    pub sha256_checksum: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// Package resource Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkg {
    /// An Apt Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apt: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgApt>,
    /// A deb package file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub deb: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgDeb>,
    /// The desired state the agent should maintain for
    /// this package. Possible values are: DESIRED_STATE_UNSPECIFIED, INSTALLED,
    /// REMOVED.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "desiredState")]
    pub desired_state: Option<String>,
    /// A package managed by GooGet. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub googet: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgGooget>,
    /// An MSI package. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub msi: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgMsi>,
    /// An rpm package file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub rpm: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgRpm>,
    /// A Yum Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub yum: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgYum>,
    /// A Zypper Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zypper: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgZypper>,
}

/// An Apt Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgApt {
    /// Package name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// A deb package file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgDeb {
    /// Whether dependencies should also be installed. -
    /// install when false: rpm --upgrade --replacepkgs package.rpm - install when
    /// true: yum -y install package.rpm or zypper -y install package.rpm
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullDeps")]
    pub pull_deps: Option<bool>,
    /// An rpm package. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgDebSource>,
}

/// An rpm package. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgDebSource {
    /// Defaults to false. When false, files are
    /// subject to validations based on the file type: Remote: A checksum must be
    /// specified. Cloud Storage: An object generation number must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    /// A Cloud Storage object. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgDebSourceGcs>,
    /// A local path within the VM to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// A generic remote file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgDebSourceRemote>,
}

/// A Cloud Storage object. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgDebSourceGcs {
    /// Bucket of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Generation number of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<f64>,
    /// Name of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

/// A generic remote file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgDebSourceRemote {
    /// SHA256 checksum of the remote file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha256Checksum")]
    pub sha256_checksum: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// A package managed by GooGet. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgGooget {
    /// Package name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// An MSI package. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgMsi {
    /// Additional properties to use during installation.
    /// This should be in the format of Property=Setting. Appended to the defaults
    /// of ACTION=INSTALL REBOOT=ReallySuppress.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub properties: Option<Vec<String>>,
    /// An rpm package. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgMsiSource>,
}

/// An rpm package. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgMsiSource {
    /// Defaults to false. When false, files are
    /// subject to validations based on the file type: Remote: A checksum must be
    /// specified. Cloud Storage: An object generation number must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    /// A Cloud Storage object. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgMsiSourceGcs>,
    /// A local path within the VM to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// A generic remote file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgMsiSourceRemote>,
}

/// A Cloud Storage object. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgMsiSourceGcs {
    /// Bucket of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Generation number of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<f64>,
    /// Name of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

/// A generic remote file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgMsiSourceRemote {
    /// SHA256 checksum of the remote file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha256Checksum")]
    pub sha256_checksum: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// An rpm package file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgRpm {
    /// Whether dependencies should also be installed. -
    /// install when false: rpm --upgrade --replacepkgs package.rpm - install when
    /// true: yum -y install package.rpm or zypper -y install package.rpm
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "pullDeps")]
    pub pull_deps: Option<bool>,
    /// An rpm package. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgRpmSource>,
}

/// An rpm package. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgRpmSource {
    /// Defaults to false. When false, files are
    /// subject to validations based on the file type: Remote: A checksum must be
    /// specified. Cloud Storage: An object generation number must be specified.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowInsecure")]
    pub allow_insecure: Option<bool>,
    /// A Cloud Storage object. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub gcs: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgRpmSourceGcs>,
    /// A local path within the VM to use.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "localPath")]
    pub local_path: Option<String>,
    /// A generic remote file. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub remote: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgRpmSourceRemote>,
}

/// A Cloud Storage object. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgRpmSourceGcs {
    /// Bucket of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub bucket: Option<String>,
    /// Generation number of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub generation: Option<f64>,
    /// Name of the Cloud Storage object.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub object: Option<String>,
}

/// A generic remote file. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgRpmSourceRemote {
    /// SHA256 checksum of the remote file.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sha256Checksum")]
    pub sha256_checksum: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// A Yum Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgYum {
    /// Package name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// A Zypper Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesPkgZypper {
    /// Package name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
}

/// Package repository resource Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesRepository {
    /// An Apt Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub apt: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesRepositoryApt>,
    /// A Goo Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub goo: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesRepositoryGoo>,
    /// A Yum Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub yum: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesRepositoryYum>,
    /// A Zypper Repository. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub zypper: Option<OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesRepositoryZypper>,
}

/// An Apt Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesRepositoryApt {
    /// Type of archive files in this repository.
    /// Possible values are: ARCHIVE_TYPE_UNSPECIFIED, DEB, DEB_SRC.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "archiveType")]
    pub archive_type: Option<String>,
    /// List of components for this repository. Must
    /// contain at least one item.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub components: Option<Vec<String>>,
    /// Distribution of this repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub distribution: Option<String>,
    /// URI of the key file for this repository. The agent
    /// maintains a keyring at /etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gpgKey")]
    pub gpg_key: Option<String>,
    /// URI from which to fetch the object. It should contain
    /// both the protocol and path following the format {protocol}://{location}.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub uri: Option<String>,
}

/// A Goo Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesRepositoryGoo {
    /// Package name.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// The url of the repository.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

/// A Yum Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesRepositoryYum {
    /// The location of the repository directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrl")]
    pub base_url: Option<String>,
    /// The display name of the repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// URIs of GPG keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gpgKeys")]
    pub gpg_keys: Option<Vec<String>>,
    /// A one word, unique name for this repository. This is the
    /// repo id in the zypper config file and also the display_name if
    /// display_name is omitted. This id is also used as the unique identifier
    /// when checking for GuestPolicy conflicts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

/// A Zypper Repository. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderOsPoliciesResourceGroupsResourcesRepositoryZypper {
    /// The location of the repository directory.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "baseUrl")]
    pub base_url: Option<String>,
    /// The display name of the repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "displayName")]
    pub display_name: Option<String>,
    /// URIs of GPG keys.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gpgKeys")]
    pub gpg_keys: Option<Vec<String>>,
    /// A one word, unique name for this repository. This is the
    /// repo id in the zypper config file and also the display_name if
    /// display_name is omitted. This id is also used as the unique identifier
    /// when checking for GuestPolicy conflicts.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
}

/// Rollout to deploy the OS policy assignment. A rollout
/// is triggered in the following situations: 1) OSPolicyAssignment is created.
/// 2) OSPolicyAssignment is updated and the update contains changes to one of
/// the following fields: - instance_filter - os_policies 3) OSPolicyAssignment
/// is deleted. Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderRollout {
    /// The maximum number (or percentage) of VMs
    /// per zone to disrupt at any given moment. Structure is
    /// documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "disruptionBudget")]
    pub disruption_budget: Option<OsPolicyAssignmentStatusAtProviderRolloutDisruptionBudget>,
    /// This determines the minimum duration of
    /// time to wait after the configuration changes are applied through the current
    /// rollout. A VM continues to count towards the disruption_budget at least
    /// until this duration of time has passed after configuration changes are
    /// applied.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "minWaitDuration")]
    pub min_wait_duration: Option<String>,
}

/// The maximum number (or percentage) of VMs
/// per zone to disrupt at any given moment. Structure is
/// documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct OsPolicyAssignmentStatusAtProviderRolloutDisruptionBudget {
    /// Specifies a fixed value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub fixed: Option<f64>,
    /// Specifies the relative value defined as a percentage,
    /// which will be multiplied by a reference value.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub percent: Option<f64>,
}


// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// FeatureSpec defines the desired state of Feature
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "evidently.aws.upbound.io", version = "v1beta2", kind = "Feature", plural = "features")]
#[kube(status = "FeatureStatus")]
pub struct FeatureSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<FeatureDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: FeatureForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<FeatureInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<FeatureProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<FeaturePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<FeatureWriteConnectionSecretToRef>,
}

/// FeatureSpec defines the desired state of Feature
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeatureForProvider {
    /// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the variations structure. If you omit default_variation, the first variation listed in the variations structure is used as the default variation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultVariation")]
    pub default_variation: Option<String>,
    /// Specifies the description of the feature.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entityOverrides")]
    pub entity_overrides: Option<HashMap<String, String>>,
    /// Specify ALL_RULES to activate the traffic allocation specified by any ongoing launches or experiments. Specify DEFAULT_VARIATION to serve the default variation to all users instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluationStrategy")]
    pub evaluation_strategy: Option<String>,
    /// The name or ARN of the project that is to contain the new feature.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Reference to a Project in evidently to populate project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectRef")]
    pub project_ref: Option<FeatureForProviderProjectRef>,
    /// Selector for a Project in evidently to populate project.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "projectSelector")]
    pub project_selector: Option<FeatureForProviderProjectSelector>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// One or more blocks that contain the configuration of the feature's different variations. Detailed below
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variations: Option<Vec<FeatureForProviderVariations>>,
}

/// Reference to a Project in evidently to populate project.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeatureForProviderProjectRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FeatureForProviderProjectRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeatureForProviderProjectRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FeatureForProviderProjectRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FeatureForProviderProjectRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureForProviderProjectRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureForProviderProjectRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Project in evidently to populate project.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeatureForProviderProjectSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FeatureForProviderProjectSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeatureForProviderProjectSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FeatureForProviderProjectSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FeatureForProviderProjectSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureForProviderProjectSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureForProviderProjectSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeatureForProviderVariations {
    /// The name of the variation. Minimum length of 1. Maximum length of 127.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A block that specifies the value assigned to this variation. Detailed below
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<FeatureForProviderVariationsValue>,
}

/// A block that specifies the value assigned to this variation. Detailed below
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeatureForProviderVariationsValue {
    /// If this feature uses the Boolean variation type, this field contains the Boolean value of this variation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "boolValue")]
    pub bool_value: Option<String>,
    /// If this feature uses the double integer variation type, this field contains the double integer value of this variation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "doubleValue")]
    pub double_value: Option<String>,
    /// If this feature uses the long variation type, this field contains the long value of this variation. Minimum value of -9007199254740991. Maximum value of 9007199254740991.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "longValue")]
    pub long_value: Option<String>,
    /// If this feature uses the string variation type, this field contains the string value of this variation. Minimum length of 0. Maximum length of 512.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stringValue")]
    pub string_value: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeatureInitProvider {
    /// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the variations structure. If you omit default_variation, the first variation listed in the variations structure is used as the default variation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultVariation")]
    pub default_variation: Option<String>,
    /// Specifies the description of the feature.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entityOverrides")]
    pub entity_overrides: Option<HashMap<String, String>>,
    /// Specify ALL_RULES to activate the traffic allocation specified by any ongoing launches or experiments. Specify DEFAULT_VARIATION to serve the default variation to all users instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluationStrategy")]
    pub evaluation_strategy: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// One or more blocks that contain the configuration of the feature's different variations. Detailed below
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variations: Option<Vec<FeatureInitProviderVariations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeatureInitProviderVariations {
    /// The name of the variation. Minimum length of 1. Maximum length of 127.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A block that specifies the value assigned to this variation. Detailed below
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<FeatureInitProviderVariationsValue>,
}

/// A block that specifies the value assigned to this variation. Detailed below
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeatureInitProviderVariationsValue {
    /// If this feature uses the Boolean variation type, this field contains the Boolean value of this variation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "boolValue")]
    pub bool_value: Option<String>,
    /// If this feature uses the double integer variation type, this field contains the double integer value of this variation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "doubleValue")]
    pub double_value: Option<String>,
    /// If this feature uses the long variation type, this field contains the long value of this variation. Minimum value of -9007199254740991. Maximum value of 9007199254740991.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "longValue")]
    pub long_value: Option<String>,
    /// If this feature uses the string variation type, this field contains the string value of this variation. Minimum length of 0. Maximum length of 512.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stringValue")]
    pub string_value: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeatureProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FeatureProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeatureProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FeatureProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FeatureProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeatureProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<FeaturePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<FeaturePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<FeaturePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<FeaturePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<FeaturePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeaturePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum FeaturePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeaturePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeatureWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// FeatureStatus defines the observed state of Feature.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeatureStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<FeatureStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeatureStatusAtProvider {
    /// The ARN of the feature.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// The date and time that the feature is created.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "createdTime")]
    pub created_time: Option<String>,
    /// The name of the variation to use as the default variation. The default variation is served to users who are not allocated to any ongoing launches or experiments of this feature. This variation must also be listed in the variations structure. If you omit default_variation, the first variation listed in the variations structure is used as the default variation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "defaultVariation")]
    pub default_variation: Option<String>,
    /// Specifies the description of the feature.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Specify users that should always be served a specific variation of a feature. Each user is specified by a key-value pair . For each key, specify a user by entering their user ID, account ID, or some other identifier. For the value, specify the name of the variation that they are to be served.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "entityOverrides")]
    pub entity_overrides: Option<HashMap<String, String>>,
    /// One or more blocks that define the evaluation rules for the feature. Detailed below
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluationRules")]
    pub evaluation_rules: Option<Vec<FeatureStatusAtProviderEvaluationRules>>,
    /// Specify ALL_RULES to activate the traffic allocation specified by any ongoing launches or experiments. Specify DEFAULT_VARIATION to serve the default variation to all users instead.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluationStrategy")]
    pub evaluation_strategy: Option<String>,
    /// The feature name and the project name or arn separated by a colon (:).
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// The date and time that the feature was most recently updated.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "lastUpdatedTime")]
    pub last_updated_time: Option<String>,
    /// The name or ARN of the project that is to contain the new feature.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// The current state of the feature. Valid values are AVAILABLE and UPDATING.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub status: Option<String>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
    /// Defines the type of value used to define the different feature variations. Valid Values: STRING, LONG, DOUBLE, BOOLEAN.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "valueType")]
    pub value_type: Option<String>,
    /// One or more blocks that contain the configuration of the feature's different variations. Detailed below
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub variations: Option<Vec<FeatureStatusAtProviderVariations>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeatureStatusAtProviderEvaluationRules {
    /// The name of the experiment or launch.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// This value is aws.evidently.splits if this is an evaluation rule for a launch, and it is aws.evidently.onlineab if this is an evaluation rule for an experiment.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeatureStatusAtProviderVariations {
    /// The name of the variation. Minimum length of 1. Maximum length of 127.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// A block that specifies the value assigned to this variation. Detailed below
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub value: Option<FeatureStatusAtProviderVariationsValue>,
}

/// A block that specifies the value assigned to this variation. Detailed below
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct FeatureStatusAtProviderVariationsValue {
    /// If this feature uses the Boolean variation type, this field contains the Boolean value of this variation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "boolValue")]
    pub bool_value: Option<String>,
    /// If this feature uses the double integer variation type, this field contains the double integer value of this variation.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "doubleValue")]
    pub double_value: Option<String>,
    /// If this feature uses the long variation type, this field contains the long value of this variation. Minimum value of -9007199254740991. Maximum value of 9007199254740991.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "longValue")]
    pub long_value: Option<String>,
    /// If this feature uses the string variation type, this field contains the string value of this variation. Minimum length of 0. Maximum length of 512.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "stringValue")]
    pub string_value: Option<String>,
}


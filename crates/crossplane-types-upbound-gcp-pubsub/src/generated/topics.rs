// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// TopicSpec defines the desired state of Topic
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "pubsub.gcp.upbound.io", version = "v1beta2", kind = "Topic", plural = "topics")]
#[kube(status = "TopicStatus")]
pub struct TopicSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<TopicDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: TopicForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<TopicInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<TopicProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<TopicPublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<TopicWriteConnectionSecretToRef>,
}

/// TopicSpec defines the desired state of Topic
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TopicDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicForProvider {
    /// Settings for ingestion from a data source into this topic.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingestionDataSourceSettings")]
    pub ingestion_data_source_settings: Option<TopicForProviderIngestionDataSourceSettings>,
    /// The resource name of the Cloud KMS CryptoKey to be used to protect access
    /// to messages published on this topic. Your project's PubSub service account
    /// (service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
    /// roles/cloudkms.cryptoKeyEncrypterDecrypter to use this feature.
    /// The expected format is projects/*/locations/*/keyRings/*/cryptoKeys/*
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    pub kms_key_name: Option<String>,
    /// Reference to a CryptoKey in kms to populate kmsKeyName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyNameRef")]
    pub kms_key_name_ref: Option<TopicForProviderKmsKeyNameRef>,
    /// Selector for a CryptoKey in kms to populate kmsKeyName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyNameSelector")]
    pub kms_key_name_selector: Option<TopicForProviderKmsKeyNameSelector>,
    /// A set of key/value label pairs to assign to this Topic.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Indicates the minimum duration to retain a message after it is published
    /// to the topic. If this field is set, messages published to the topic in
    /// the last messageRetentionDuration are always available to subscribers.
    /// For instance, it allows any attached subscription to seek to a timestamp
    /// that is up to messageRetentionDuration in the past. If this field is not
    /// set, message retention is controlled by settings on individual subscriptions.
    /// The rotation period has the format of a decimal number, followed by the
    /// letter s (seconds). Cannot be more than 31 days or less than 10 minutes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageRetentionDuration")]
    pub message_retention_duration: Option<String>,
    /// Policy constraining the set of Google Cloud Platform regions where
    /// messages published to the topic may be stored. If not present, then no
    /// constraints are in effect.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageStoragePolicy")]
    pub message_storage_policy: Option<TopicForProviderMessageStoragePolicy>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Settings for validating messages published against a schema.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schemaSettings")]
    pub schema_settings: Option<TopicForProviderSchemaSettings>,
}

/// Settings for ingestion from a data source into this topic.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicForProviderIngestionDataSourceSettings {
    /// Settings for ingestion from Amazon Kinesis Data Streams.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsKinesis")]
    pub aws_kinesis: Option<TopicForProviderIngestionDataSourceSettingsAwsKinesis>,
}

/// Settings for ingestion from Amazon Kinesis Data Streams.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicForProviderIngestionDataSourceSettingsAwsKinesis {
    /// AWS role ARN to be used for Federated Identity authentication with
    /// Kinesis. Check the Pub/Sub docs for how to set up this role and the
    /// required permissions that need to be attached to it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsRoleArn")]
    pub aws_role_arn: Option<String>,
    /// The Kinesis consumer ARN to used for ingestion in
    /// Enhanced Fan-Out mode. The consumer must be already
    /// created and ready to be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consumerArn")]
    pub consumer_arn: Option<String>,
    /// The GCP service account to be used for Federated Identity authentication
    /// with Kinesis (via a AssumeRoleWithWebIdentity call for the provided
    /// role). The awsRoleArn must be set up with accounts.google.com:sub
    /// equals to this service account number.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gcpServiceAccount")]
    pub gcp_service_account: Option<String>,
    /// The Kinesis stream ARN to ingest data from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamArn")]
    pub stream_arn: Option<String>,
}

/// Reference to a CryptoKey in kms to populate kmsKeyName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicForProviderKmsKeyNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TopicForProviderKmsKeyNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicForProviderKmsKeyNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TopicForProviderKmsKeyNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TopicForProviderKmsKeyNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TopicForProviderKmsKeyNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TopicForProviderKmsKeyNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CryptoKey in kms to populate kmsKeyName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicForProviderKmsKeyNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TopicForProviderKmsKeyNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicForProviderKmsKeyNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TopicForProviderKmsKeyNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TopicForProviderKmsKeyNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TopicForProviderKmsKeyNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TopicForProviderKmsKeyNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Policy constraining the set of Google Cloud Platform regions where
/// messages published to the topic may be stored. If not present, then no
/// constraints are in effect.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicForProviderMessageStoragePolicy {
    /// A list of IDs of GCP regions where messages that are published to
    /// the topic may be persisted in storage. Messages published by
    /// publishers running in non-allowed GCP regions (or running outside
    /// of GCP altogether) will be routed for storage in one of the
    /// allowed regions. An empty list means that no regions are allowed,
    /// and is not a valid configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedPersistenceRegions")]
    pub allowed_persistence_regions: Option<Vec<String>>,
}

/// Settings for validating messages published against a schema.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicForProviderSchemaSettings {
    /// The encoding of messages validated against schema.
    /// Default value is ENCODING_UNSPECIFIED.
    /// Possible values are: ENCODING_UNSPECIFIED, JSON, BINARY.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
    /// The name of the schema that messages published should be
    /// validated against. Format is projects/{project}/schemas/{schema}.
    /// The value of this field will be deleted-schema
    /// if the schema has been deleted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicInitProvider {
    /// Settings for ingestion from a data source into this topic.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingestionDataSourceSettings")]
    pub ingestion_data_source_settings: Option<TopicInitProviderIngestionDataSourceSettings>,
    /// The resource name of the Cloud KMS CryptoKey to be used to protect access
    /// to messages published on this topic. Your project's PubSub service account
    /// (service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
    /// roles/cloudkms.cryptoKeyEncrypterDecrypter to use this feature.
    /// The expected format is projects/*/locations/*/keyRings/*/cryptoKeys/*
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    pub kms_key_name: Option<String>,
    /// Reference to a CryptoKey in kms to populate kmsKeyName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyNameRef")]
    pub kms_key_name_ref: Option<TopicInitProviderKmsKeyNameRef>,
    /// Selector for a CryptoKey in kms to populate kmsKeyName.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyNameSelector")]
    pub kms_key_name_selector: Option<TopicInitProviderKmsKeyNameSelector>,
    /// A set of key/value label pairs to assign to this Topic.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Indicates the minimum duration to retain a message after it is published
    /// to the topic. If this field is set, messages published to the topic in
    /// the last messageRetentionDuration are always available to subscribers.
    /// For instance, it allows any attached subscription to seek to a timestamp
    /// that is up to messageRetentionDuration in the past. If this field is not
    /// set, message retention is controlled by settings on individual subscriptions.
    /// The rotation period has the format of a decimal number, followed by the
    /// letter s (seconds). Cannot be more than 31 days or less than 10 minutes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageRetentionDuration")]
    pub message_retention_duration: Option<String>,
    /// Policy constraining the set of Google Cloud Platform regions where
    /// messages published to the topic may be stored. If not present, then no
    /// constraints are in effect.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageStoragePolicy")]
    pub message_storage_policy: Option<TopicInitProviderMessageStoragePolicy>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Settings for validating messages published against a schema.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schemaSettings")]
    pub schema_settings: Option<TopicInitProviderSchemaSettings>,
}

/// Settings for ingestion from a data source into this topic.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicInitProviderIngestionDataSourceSettings {
    /// Settings for ingestion from Amazon Kinesis Data Streams.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsKinesis")]
    pub aws_kinesis: Option<TopicInitProviderIngestionDataSourceSettingsAwsKinesis>,
}

/// Settings for ingestion from Amazon Kinesis Data Streams.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicInitProviderIngestionDataSourceSettingsAwsKinesis {
    /// AWS role ARN to be used for Federated Identity authentication with
    /// Kinesis. Check the Pub/Sub docs for how to set up this role and the
    /// required permissions that need to be attached to it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsRoleArn")]
    pub aws_role_arn: Option<String>,
    /// The Kinesis consumer ARN to used for ingestion in
    /// Enhanced Fan-Out mode. The consumer must be already
    /// created and ready to be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consumerArn")]
    pub consumer_arn: Option<String>,
    /// The GCP service account to be used for Federated Identity authentication
    /// with Kinesis (via a AssumeRoleWithWebIdentity call for the provided
    /// role). The awsRoleArn must be set up with accounts.google.com:sub
    /// equals to this service account number.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gcpServiceAccount")]
    pub gcp_service_account: Option<String>,
    /// The Kinesis stream ARN to ingest data from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamArn")]
    pub stream_arn: Option<String>,
}

/// Reference to a CryptoKey in kms to populate kmsKeyName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicInitProviderKmsKeyNameRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TopicInitProviderKmsKeyNameRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicInitProviderKmsKeyNameRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TopicInitProviderKmsKeyNameRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TopicInitProviderKmsKeyNameRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TopicInitProviderKmsKeyNameRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TopicInitProviderKmsKeyNameRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a CryptoKey in kms to populate kmsKeyName.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicInitProviderKmsKeyNameSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TopicInitProviderKmsKeyNameSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicInitProviderKmsKeyNameSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TopicInitProviderKmsKeyNameSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TopicInitProviderKmsKeyNameSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TopicInitProviderKmsKeyNameSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TopicInitProviderKmsKeyNameSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// Policy constraining the set of Google Cloud Platform regions where
/// messages published to the topic may be stored. If not present, then no
/// constraints are in effect.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicInitProviderMessageStoragePolicy {
    /// A list of IDs of GCP regions where messages that are published to
    /// the topic may be persisted in storage. Messages published by
    /// publishers running in non-allowed GCP regions (or running outside
    /// of GCP altogether) will be routed for storage in one of the
    /// allowed regions. An empty list means that no regions are allowed,
    /// and is not a valid configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedPersistenceRegions")]
    pub allowed_persistence_regions: Option<Vec<String>>,
}

/// Settings for validating messages published against a schema.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicInitProviderSchemaSettings {
    /// The encoding of messages validated against schema.
    /// Default value is ENCODING_UNSPECIFIED.
    /// Possible values are: ENCODING_UNSPECIFIED, JSON, BINARY.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
    /// The name of the schema that messages published should be
    /// validated against. Format is projects/{project}/schemas/{schema}.
    /// The value of this field will be deleted-schema
    /// if the schema has been deleted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TopicProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TopicProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TopicProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TopicProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TopicProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicPublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<TopicPublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<TopicPublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicPublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<TopicPublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicPublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<TopicPublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<TopicPublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TopicPublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum TopicPublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicPublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// TopicStatus defines the observed state of Topic.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<TopicStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicStatusAtProvider {
    /// for all of the labels present on the resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "effectiveLabels")]
    pub effective_labels: Option<HashMap<String, String>>,
    /// an identifier for the resource with format projects/{{project}}/topics/{{name}}
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Settings for ingestion from a data source into this topic.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ingestionDataSourceSettings")]
    pub ingestion_data_source_settings: Option<TopicStatusAtProviderIngestionDataSourceSettings>,
    /// The resource name of the Cloud KMS CryptoKey to be used to protect access
    /// to messages published on this topic. Your project's PubSub service account
    /// (service-{{PROJECT_NUMBER}}@gcp-sa-pubsub.iam.gserviceaccount.com) must have
    /// roles/cloudkms.cryptoKeyEncrypterDecrypter to use this feature.
    /// The expected format is projects/*/locations/*/keyRings/*/cryptoKeys/*
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "kmsKeyName")]
    pub kms_key_name: Option<String>,
    /// A set of key/value label pairs to assign to this Topic.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Indicates the minimum duration to retain a message after it is published
    /// to the topic. If this field is set, messages published to the topic in
    /// the last messageRetentionDuration are always available to subscribers.
    /// For instance, it allows any attached subscription to seek to a timestamp
    /// that is up to messageRetentionDuration in the past. If this field is not
    /// set, message retention is controlled by settings on individual subscriptions.
    /// The rotation period has the format of a decimal number, followed by the
    /// letter s (seconds). Cannot be more than 31 days or less than 10 minutes.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageRetentionDuration")]
    pub message_retention_duration: Option<String>,
    /// Policy constraining the set of Google Cloud Platform regions where
    /// messages published to the topic may be stored. If not present, then no
    /// constraints are in effect.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageStoragePolicy")]
    pub message_storage_policy: Option<TopicStatusAtProviderMessageStoragePolicy>,
    /// The ID of the project in which the resource belongs.
    /// If it is not provided, the provider project is used.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub project: Option<String>,
    /// Settings for validating messages published against a schema.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "schemaSettings")]
    pub schema_settings: Option<TopicStatusAtProviderSchemaSettings>,
    /// The combination of labels configured directly on the resource
    /// and default labels configured on the provider.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "terraformLabels")]
    pub terraform_labels: Option<HashMap<String, String>>,
}

/// Settings for ingestion from a data source into this topic.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicStatusAtProviderIngestionDataSourceSettings {
    /// Settings for ingestion from Amazon Kinesis Data Streams.
    /// Structure is documented below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsKinesis")]
    pub aws_kinesis: Option<TopicStatusAtProviderIngestionDataSourceSettingsAwsKinesis>,
}

/// Settings for ingestion from Amazon Kinesis Data Streams.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicStatusAtProviderIngestionDataSourceSettingsAwsKinesis {
    /// AWS role ARN to be used for Federated Identity authentication with
    /// Kinesis. Check the Pub/Sub docs for how to set up this role and the
    /// required permissions that need to be attached to it.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "awsRoleArn")]
    pub aws_role_arn: Option<String>,
    /// The Kinesis consumer ARN to used for ingestion in
    /// Enhanced Fan-Out mode. The consumer must be already
    /// created and ready to be used.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "consumerArn")]
    pub consumer_arn: Option<String>,
    /// The GCP service account to be used for Federated Identity authentication
    /// with Kinesis (via a AssumeRoleWithWebIdentity call for the provided
    /// role). The awsRoleArn must be set up with accounts.google.com:sub
    /// equals to this service account number.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "gcpServiceAccount")]
    pub gcp_service_account: Option<String>,
    /// The Kinesis stream ARN to ingest data from.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "streamArn")]
    pub stream_arn: Option<String>,
}

/// Policy constraining the set of Google Cloud Platform regions where
/// messages published to the topic may be stored. If not present, then no
/// constraints are in effect.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicStatusAtProviderMessageStoragePolicy {
    /// A list of IDs of GCP regions where messages that are published to
    /// the topic may be persisted in storage. Messages published by
    /// publishers running in non-allowed GCP regions (or running outside
    /// of GCP altogether) will be routed for storage in one of the
    /// allowed regions. An empty list means that no regions are allowed,
    /// and is not a valid configuration.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "allowedPersistenceRegions")]
    pub allowed_persistence_regions: Option<Vec<String>>,
}

/// Settings for validating messages published against a schema.
/// Structure is documented below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct TopicStatusAtProviderSchemaSettings {
    /// The encoding of messages validated against schema.
    /// Default value is ENCODING_UNSPECIFIED.
    /// Possible values are: ENCODING_UNSPECIFIED, JSON, BINARY.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub encoding: Option<String>,
    /// The name of the schema that messages published should be
    /// validated against. Format is projects/{project}/schemas/{schema}.
    /// The value of this field will be deleted-schema
    /// if the schema has been deleted.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub schema: Option<String>,
}


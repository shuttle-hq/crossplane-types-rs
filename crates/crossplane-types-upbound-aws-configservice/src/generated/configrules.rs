// WARNING: generated by kopium - manual changes will be overwritten
// kopium version: 0.21.2

#[allow(unused_imports)]
mod prelude {
    pub use kube::CustomResource;
    pub use schemars::JsonSchema;
    pub use serde::{Serialize, Deserialize};
    pub use std::collections::HashMap;
    pub use k8s_openapi::apimachinery::pkg::apis::meta::v1::Condition;
}
use self::prelude::*;

/// ConfigRuleSpec defines the desired state of ConfigRule
#[derive(CustomResource, Serialize, Deserialize, Clone, Debug, JsonSchema)]
#[kube(group = "configservice.aws.upbound.io", version = "v1beta2", kind = "ConfigRule", plural = "configrules")]
#[kube(status = "ConfigRuleStatus")]
pub struct ConfigRuleSpec {
    /// DeletionPolicy specifies what will happen to the underlying external
    /// when this managed resource is deleted - either "Delete" or "Orphan" the
    /// external resource.
    /// This field is planned to be deprecated in favor of the ManagementPolicies
    /// field in a future release. Currently, both could be set independently and
    /// non-default values would be honored if the feature flag is enabled.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "deletionPolicy")]
    pub deletion_policy: Option<ConfigRuleDeletionPolicy>,
    #[serde(rename = "forProvider")]
    pub for_provider: ConfigRuleForProvider,
    /// THIS IS A BETA FIELD. It will be honored
    /// unless the Management Policies feature flag is disabled.
    /// InitProvider holds the same fields as ForProvider, with the exception
    /// of Identifier and other resource reference fields. The fields that are
    /// in InitProvider are merged into ForProvider when the resource is created.
    /// The same fields are also added to the terraform ignore_changes hook, to
    /// avoid updating them after creation. This is useful for fields that are
    /// required on creation, but we do not desire to update them after creation,
    /// for example because of an external controller is managing them, like an
    /// autoscaler.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "initProvider")]
    pub init_provider: Option<ConfigRuleInitProvider>,
    /// THIS IS A BETA FIELD. It is on by default but can be opted out
    /// through a Crossplane feature flag.
    /// ManagementPolicies specify the array of actions Crossplane is allowed to
    /// take on the managed and external resources.
    /// This field is planned to replace the DeletionPolicy field in a future
    /// release. Currently, both could be set independently and non-default
    /// values would be honored if the feature flag is enabled. If both are
    /// custom, the DeletionPolicy field will be ignored.
    /// See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
    /// and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "managementPolicies")]
    pub management_policies: Option<Vec<String>>,
    /// ProviderConfigReference specifies how the provider that will be used to
    /// create, observe, update, and delete this managed resource should be
    /// configured.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "providerConfigRef")]
    pub provider_config_ref: Option<ConfigRuleProviderConfigRef>,
    /// PublishConnectionDetailsTo specifies the connection secret config which
    /// contains a name, metadata and a reference to secret store config to
    /// which any connection details for this managed resource should be written.
    /// Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "publishConnectionDetailsTo")]
    pub publish_connection_details_to: Option<ConfigRulePublishConnectionDetailsTo>,
    /// WriteConnectionSecretToReference specifies the namespace and name of a
    /// Secret to which any connection details for this managed resource should
    /// be written. Connection details frequently include the endpoint, username,
    /// and password required to connect to the managed resource.
    /// This field is planned to be replaced in a future release in favor of
    /// PublishConnectionDetailsTo. Currently, both could be set independently
    /// and connection details would be published to both without affecting
    /// each other.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "writeConnectionSecretToRef")]
    pub write_connection_secret_to_ref: Option<ConfigRuleWriteConnectionSecretToRef>,
}

/// ConfigRuleSpec defines the desired state of ConfigRule
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigRuleDeletionPolicy {
    Orphan,
    Delete,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleForProvider {
    /// Description of the rule
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The modes the Config rule can be evaluated in. See Evaluation Mode for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluationMode")]
    pub evaluation_mode: Option<Vec<ConfigRuleForProviderEvaluationMode>>,
    /// A string in JSON format that is passed to the AWS Config rule Lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputParameters")]
    pub input_parameters: Option<String>,
    /// The maximum frequency with which AWS Config runs evaluations for a rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumExecutionFrequency")]
    pub maximum_execution_frequency: Option<String>,
    /// Region is the region you'd like your resource to be created in.
    pub region: String,
    /// Scope defines which resources can trigger an evaluation for the rule. See Scope Below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<ConfigRuleForProviderScope>,
    /// Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources. See Source Below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ConfigRuleForProviderSource>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleForProviderEvaluationMode {
    /// The mode of an evaluation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
}

/// Scope defines which resources can trigger an evaluation for the rule. See Scope Below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleForProviderScope {
    /// The IDs of the only AWS resource that you want to trigger an evaluation for the rule. If you specify a resource ID, you must specify one resource type for compliance_resource_types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "complianceResourceId")]
    pub compliance_resource_id: Option<String>,
    /// A list of resource types of only those AWS resources that you want to trigger an evaluation for the ruleE.g., AWS::EC2::Instance. You can only specify one type if you also specify a resource ID for compliance_resource_id. See relevant part of AWS Docs for available types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "complianceResourceTypes")]
    pub compliance_resource_types: Option<Vec<String>>,
    /// The tag key that is applied to only those AWS resources that you want you want to trigger an evaluation for the rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagKey")]
    pub tag_key: Option<String>,
    /// The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagValue")]
    pub tag_value: Option<String>,
}

/// Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources. See Source Below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleForProviderSource {
    /// Provides the runtime system, policy definition, and whether debug logging is enabled. Required when owner is set to CUSTOM_POLICY. See Custom Policy Details Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customPolicyDetails")]
    pub custom_policy_details: Option<ConfigRuleForProviderSourceCustomPolicyDetails>,
    /// Indicates whether AWS or the customer owns and manages the AWS Config rule. Valid values are AWS, CUSTOM_LAMBDA or CUSTOM_POLICY. For more information about managed rules, see the AWS Config Managed Rules documentation. For more information about custom rules, see the AWS Config Custom Rules documentation. Custom Lambda Functions require permissions to allow the AWS Config service to invoke them, e.g., via the aws_lambda_permission resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// Provides the source and type of the event that causes AWS Config to evaluate your AWS resources. Only valid if owner is CUSTOM_LAMBDA or CUSTOM_POLICY. See Source Detail Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDetail")]
    pub source_detail: Option<Vec<ConfigRuleForProviderSourceSourceDetail>>,
    /// For AWS Config managed rules, a predefined identifier, e.g IAM_PASSWORD_POLICY. For custom Lambda rules, the identifier is the ARN of the Lambda Function, such as arn:aws:lambda:us-east-1:123456789012:function:custom_rule_name or the arn attribute of the aws_lambda_function resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceIdentifier")]
    pub source_identifier: Option<String>,
    /// Reference to a Function in lambda to populate sourceIdentifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceIdentifierRef")]
    pub source_identifier_ref: Option<ConfigRuleForProviderSourceSourceIdentifierRef>,
    /// Selector for a Function in lambda to populate sourceIdentifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceIdentifierSelector")]
    pub source_identifier_selector: Option<ConfigRuleForProviderSourceSourceIdentifierSelector>,
}

/// Provides the runtime system, policy definition, and whether debug logging is enabled. Required when owner is set to CUSTOM_POLICY. See Custom Policy Details Below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleForProviderSourceCustomPolicyDetails {
    /// The boolean expression for enabling debug logging for your Config Custom Policy rule. The default value is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDebugLogDelivery")]
    pub enable_debug_log_delivery: Option<bool>,
    /// The runtime system for your Config Custom Policy rule. Guard is a policy-as-code language that allows you to write policies that are enforced by Config Custom Policy rules. For more information about Guard, see the Guard GitHub Repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyRuntime")]
    pub policy_runtime: Option<String>,
    /// The policy definition containing the logic for your Config Custom Policy rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyText")]
    pub policy_text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleForProviderSourceSourceDetail {
    /// The source of the event, such as an AWS service, that triggers AWS Config to evaluate your AWSresources. This defaults to aws.config and is the only valid value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventSource")]
    pub event_source: Option<String>,
    /// The maximum frequency with which AWS Config runs evaluations for a rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumExecutionFrequency")]
    pub maximum_execution_frequency: Option<String>,
    /// The type of notification that triggers AWS Config to run an evaluation for a rule. You canspecify the following notification types:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageType")]
    pub message_type: Option<String>,
}

/// Reference to a Function in lambda to populate sourceIdentifier.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleForProviderSourceSourceIdentifierRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConfigRuleForProviderSourceSourceIdentifierRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleForProviderSourceSourceIdentifierRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConfigRuleForProviderSourceSourceIdentifierRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConfigRuleForProviderSourceSourceIdentifierRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigRuleForProviderSourceSourceIdentifierRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigRuleForProviderSourceSourceIdentifierRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Function in lambda to populate sourceIdentifier.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleForProviderSourceSourceIdentifierSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConfigRuleForProviderSourceSourceIdentifierSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleForProviderSourceSourceIdentifierSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConfigRuleForProviderSourceSourceIdentifierSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConfigRuleForProviderSourceSourceIdentifierSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigRuleForProviderSourceSourceIdentifierSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigRuleForProviderSourceSourceIdentifierSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// THIS IS A BETA FIELD. It will be honored
/// unless the Management Policies feature flag is disabled.
/// InitProvider holds the same fields as ForProvider, with the exception
/// of Identifier and other resource reference fields. The fields that are
/// in InitProvider are merged into ForProvider when the resource is created.
/// The same fields are also added to the terraform ignore_changes hook, to
/// avoid updating them after creation. This is useful for fields that are
/// required on creation, but we do not desire to update them after creation,
/// for example because of an external controller is managing them, like an
/// autoscaler.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleInitProvider {
    /// Description of the rule
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The modes the Config rule can be evaluated in. See Evaluation Mode for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluationMode")]
    pub evaluation_mode: Option<Vec<ConfigRuleInitProviderEvaluationMode>>,
    /// A string in JSON format that is passed to the AWS Config rule Lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputParameters")]
    pub input_parameters: Option<String>,
    /// The maximum frequency with which AWS Config runs evaluations for a rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumExecutionFrequency")]
    pub maximum_execution_frequency: Option<String>,
    /// Scope defines which resources can trigger an evaluation for the rule. See Scope Below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<ConfigRuleInitProviderScope>,
    /// Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources. See Source Below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ConfigRuleInitProviderSource>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleInitProviderEvaluationMode {
    /// The mode of an evaluation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
}

/// Scope defines which resources can trigger an evaluation for the rule. See Scope Below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleInitProviderScope {
    /// The IDs of the only AWS resource that you want to trigger an evaluation for the rule. If you specify a resource ID, you must specify one resource type for compliance_resource_types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "complianceResourceId")]
    pub compliance_resource_id: Option<String>,
    /// A list of resource types of only those AWS resources that you want to trigger an evaluation for the ruleE.g., AWS::EC2::Instance. You can only specify one type if you also specify a resource ID for compliance_resource_id. See relevant part of AWS Docs for available types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "complianceResourceTypes")]
    pub compliance_resource_types: Option<Vec<String>>,
    /// The tag key that is applied to only those AWS resources that you want you want to trigger an evaluation for the rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagKey")]
    pub tag_key: Option<String>,
    /// The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagValue")]
    pub tag_value: Option<String>,
}

/// Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources. See Source Below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleInitProviderSource {
    /// Provides the runtime system, policy definition, and whether debug logging is enabled. Required when owner is set to CUSTOM_POLICY. See Custom Policy Details Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customPolicyDetails")]
    pub custom_policy_details: Option<ConfigRuleInitProviderSourceCustomPolicyDetails>,
    /// Indicates whether AWS or the customer owns and manages the AWS Config rule. Valid values are AWS, CUSTOM_LAMBDA or CUSTOM_POLICY. For more information about managed rules, see the AWS Config Managed Rules documentation. For more information about custom rules, see the AWS Config Custom Rules documentation. Custom Lambda Functions require permissions to allow the AWS Config service to invoke them, e.g., via the aws_lambda_permission resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// Provides the source and type of the event that causes AWS Config to evaluate your AWS resources. Only valid if owner is CUSTOM_LAMBDA or CUSTOM_POLICY. See Source Detail Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDetail")]
    pub source_detail: Option<Vec<ConfigRuleInitProviderSourceSourceDetail>>,
    /// For AWS Config managed rules, a predefined identifier, e.g IAM_PASSWORD_POLICY. For custom Lambda rules, the identifier is the ARN of the Lambda Function, such as arn:aws:lambda:us-east-1:123456789012:function:custom_rule_name or the arn attribute of the aws_lambda_function resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceIdentifier")]
    pub source_identifier: Option<String>,
    /// Reference to a Function in lambda to populate sourceIdentifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceIdentifierRef")]
    pub source_identifier_ref: Option<ConfigRuleInitProviderSourceSourceIdentifierRef>,
    /// Selector for a Function in lambda to populate sourceIdentifier.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceIdentifierSelector")]
    pub source_identifier_selector: Option<ConfigRuleInitProviderSourceSourceIdentifierSelector>,
}

/// Provides the runtime system, policy definition, and whether debug logging is enabled. Required when owner is set to CUSTOM_POLICY. See Custom Policy Details Below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleInitProviderSourceCustomPolicyDetails {
    /// The boolean expression for enabling debug logging for your Config Custom Policy rule. The default value is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDebugLogDelivery")]
    pub enable_debug_log_delivery: Option<bool>,
    /// The runtime system for your Config Custom Policy rule. Guard is a policy-as-code language that allows you to write policies that are enforced by Config Custom Policy rules. For more information about Guard, see the Guard GitHub Repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyRuntime")]
    pub policy_runtime: Option<String>,
    /// The policy definition containing the logic for your Config Custom Policy rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyText")]
    pub policy_text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleInitProviderSourceSourceDetail {
    /// The source of the event, such as an AWS service, that triggers AWS Config to evaluate your AWSresources. This defaults to aws.config and is the only valid value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventSource")]
    pub event_source: Option<String>,
    /// The maximum frequency with which AWS Config runs evaluations for a rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumExecutionFrequency")]
    pub maximum_execution_frequency: Option<String>,
    /// The type of notification that triggers AWS Config to run an evaluation for a rule. You canspecify the following notification types:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageType")]
    pub message_type: Option<String>,
}

/// Reference to a Function in lambda to populate sourceIdentifier.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleInitProviderSourceSourceIdentifierRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConfigRuleInitProviderSourceSourceIdentifierRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleInitProviderSourceSourceIdentifierRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConfigRuleInitProviderSourceSourceIdentifierRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConfigRuleInitProviderSourceSourceIdentifierRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigRuleInitProviderSourceSourceIdentifierRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigRuleInitProviderSourceSourceIdentifierRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Selector for a Function in lambda to populate sourceIdentifier.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleInitProviderSourceSourceIdentifierSelector {
    /// MatchControllerRef ensures an object with the same controller reference
    /// as the selecting object is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchControllerRef")]
    pub match_controller_ref: Option<bool>,
    /// MatchLabels ensures an object with matching labels is selected.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "matchLabels")]
    pub match_labels: Option<HashMap<String, String>>,
    /// Policies for selection.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConfigRuleInitProviderSourceSourceIdentifierSelectorPolicy>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleInitProviderSourceSourceIdentifierSelectorPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConfigRuleInitProviderSourceSourceIdentifierSelectorPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConfigRuleInitProviderSourceSourceIdentifierSelectorPolicyResolve>,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigRuleInitProviderSourceSourceIdentifierSelectorPolicyResolution {
    Required,
    Optional,
}

/// Policies for selection.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigRuleInitProviderSourceSourceIdentifierSelectorPolicyResolve {
    Always,
    IfNotPresent,
}

/// ProviderConfigReference specifies how the provider that will be used to
/// create, observe, update, and delete this managed resource should be
/// configured.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleProviderConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConfigRuleProviderConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleProviderConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConfigRuleProviderConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConfigRuleProviderConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigRuleProviderConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigRuleProviderConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// PublishConnectionDetailsTo specifies the connection secret config which
/// contains a name, metadata and a reference to secret store config to
/// which any connection details for this managed resource should be written.
/// Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRulePublishConnectionDetailsTo {
    /// SecretStoreConfigRef specifies which secret store config should be used
    /// for this ConnectionSecret.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "configRef")]
    pub config_ref: Option<ConfigRulePublishConnectionDetailsToConfigRef>,
    /// Metadata is the metadata for connection secret.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub metadata: Option<ConfigRulePublishConnectionDetailsToMetadata>,
    /// Name is the name of the connection secret.
    pub name: String,
}

/// SecretStoreConfigRef specifies which secret store config should be used
/// for this ConnectionSecret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRulePublishConnectionDetailsToConfigRef {
    /// Name of the referenced object.
    pub name: String,
    /// Policies for referencing.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub policy: Option<ConfigRulePublishConnectionDetailsToConfigRefPolicy>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRulePublishConnectionDetailsToConfigRefPolicy {
    /// Resolution specifies whether resolution of this reference is required.
    /// The default is 'Required', which means the reconcile will fail if the
    /// reference cannot be resolved. 'Optional' means this reference will be
    /// a no-op if it cannot be resolved.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolution: Option<ConfigRulePublishConnectionDetailsToConfigRefPolicyResolution>,
    /// Resolve specifies when this reference should be resolved. The default
    /// is 'IfNotPresent', which will attempt to resolve the reference only when
    /// the corresponding field is not present. Use 'Always' to resolve the
    /// reference on every reconcile.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub resolve: Option<ConfigRulePublishConnectionDetailsToConfigRefPolicyResolve>,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigRulePublishConnectionDetailsToConfigRefPolicyResolution {
    Required,
    Optional,
}

/// Policies for referencing.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub enum ConfigRulePublishConnectionDetailsToConfigRefPolicyResolve {
    Always,
    IfNotPresent,
}

/// Metadata is the metadata for connection secret.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRulePublishConnectionDetailsToMetadata {
    /// Annotations are the annotations to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.annotations".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub annotations: Option<HashMap<String, String>>,
    /// Labels are the labels/tags to be added to connection secret.
    /// - For Kubernetes secrets, this will be used as "metadata.labels".
    /// - It is up to Secret Store implementation for others store types.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub labels: Option<HashMap<String, String>>,
    /// Type is the SecretType for the connection secret.
    /// - Only valid for Kubernetes Secret Stores.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "type")]
    pub r#type: Option<String>,
}

/// WriteConnectionSecretToReference specifies the namespace and name of a
/// Secret to which any connection details for this managed resource should
/// be written. Connection details frequently include the endpoint, username,
/// and password required to connect to the managed resource.
/// This field is planned to be replaced in a future release in favor of
/// PublishConnectionDetailsTo. Currently, both could be set independently
/// and connection details would be published to both without affecting
/// each other.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleWriteConnectionSecretToRef {
    /// Name of the secret.
    pub name: String,
    /// Namespace of the secret.
    pub namespace: String,
}

/// ConfigRuleStatus defines the observed state of ConfigRule.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleStatus {
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "atProvider")]
    pub at_provider: Option<ConfigRuleStatusAtProvider>,
    /// Conditions of the resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub conditions: Option<Vec<Condition>>,
    /// ObservedGeneration is the latest metadata.generation
    /// which resulted in either a ready state, or stalled due to error
    /// it can not recover from without human intervention.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "observedGeneration")]
    pub observed_generation: Option<i64>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleStatusAtProvider {
    /// The ARN of the config rule
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub arn: Option<String>,
    /// Description of the rule
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// The modes the Config rule can be evaluated in. See Evaluation Mode for more details.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "evaluationMode")]
    pub evaluation_mode: Option<Vec<ConfigRuleStatusAtProviderEvaluationMode>>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// A string in JSON format that is passed to the AWS Config rule Lambda function.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "inputParameters")]
    pub input_parameters: Option<String>,
    /// The maximum frequency with which AWS Config runs evaluations for a rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumExecutionFrequency")]
    pub maximum_execution_frequency: Option<String>,
    /// The ID of the config rule
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "ruleId")]
    pub rule_id: Option<String>,
    /// Scope defines which resources can trigger an evaluation for the rule. See Scope Below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub scope: Option<ConfigRuleStatusAtProviderScope>,
    /// Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources. See Source Below.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub source: Option<ConfigRuleStatusAtProviderSource>,
    /// Key-value map of resource tags.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub tags: Option<HashMap<String, String>>,
    /// A map of tags assigned to the resource, including those inherited from the provider default_tags configuration block.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagsAll")]
    pub tags_all: Option<HashMap<String, String>>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleStatusAtProviderEvaluationMode {
    /// The mode of an evaluation.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub mode: Option<String>,
}

/// Scope defines which resources can trigger an evaluation for the rule. See Scope Below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleStatusAtProviderScope {
    /// The IDs of the only AWS resource that you want to trigger an evaluation for the rule. If you specify a resource ID, you must specify one resource type for compliance_resource_types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "complianceResourceId")]
    pub compliance_resource_id: Option<String>,
    /// A list of resource types of only those AWS resources that you want to trigger an evaluation for the ruleE.g., AWS::EC2::Instance. You can only specify one type if you also specify a resource ID for compliance_resource_id. See relevant part of AWS Docs for available types.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "complianceResourceTypes")]
    pub compliance_resource_types: Option<Vec<String>>,
    /// The tag key that is applied to only those AWS resources that you want you want to trigger an evaluation for the rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagKey")]
    pub tag_key: Option<String>,
    /// The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "tagValue")]
    pub tag_value: Option<String>,
}

/// Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources. See Source Below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleStatusAtProviderSource {
    /// Provides the runtime system, policy definition, and whether debug logging is enabled. Required when owner is set to CUSTOM_POLICY. See Custom Policy Details Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "customPolicyDetails")]
    pub custom_policy_details: Option<ConfigRuleStatusAtProviderSourceCustomPolicyDetails>,
    /// Indicates whether AWS or the customer owns and manages the AWS Config rule. Valid values are AWS, CUSTOM_LAMBDA or CUSTOM_POLICY. For more information about managed rules, see the AWS Config Managed Rules documentation. For more information about custom rules, see the AWS Config Custom Rules documentation. Custom Lambda Functions require permissions to allow the AWS Config service to invoke them, e.g., via the aws_lambda_permission resource.
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// Provides the source and type of the event that causes AWS Config to evaluate your AWS resources. Only valid if owner is CUSTOM_LAMBDA or CUSTOM_POLICY. See Source Detail Below.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceDetail")]
    pub source_detail: Option<Vec<ConfigRuleStatusAtProviderSourceSourceDetail>>,
    /// For AWS Config managed rules, a predefined identifier, e.g IAM_PASSWORD_POLICY. For custom Lambda rules, the identifier is the ARN of the Lambda Function, such as arn:aws:lambda:us-east-1:123456789012:function:custom_rule_name or the arn attribute of the aws_lambda_function resource.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "sourceIdentifier")]
    pub source_identifier: Option<String>,
}

/// Provides the runtime system, policy definition, and whether debug logging is enabled. Required when owner is set to CUSTOM_POLICY. See Custom Policy Details Below.
#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleStatusAtProviderSourceCustomPolicyDetails {
    /// The boolean expression for enabling debug logging for your Config Custom Policy rule. The default value is false.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "enableDebugLogDelivery")]
    pub enable_debug_log_delivery: Option<bool>,
    /// The runtime system for your Config Custom Policy rule. Guard is a policy-as-code language that allows you to write policies that are enforced by Config Custom Policy rules. For more information about Guard, see the Guard GitHub Repository.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyRuntime")]
    pub policy_runtime: Option<String>,
    /// The policy definition containing the logic for your Config Custom Policy rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "policyText")]
    pub policy_text: Option<String>,
}

#[derive(Serialize, Deserialize, Clone, Debug, JsonSchema)]
pub struct ConfigRuleStatusAtProviderSourceSourceDetail {
    /// The source of the event, such as an AWS service, that triggers AWS Config to evaluate your AWSresources. This defaults to aws.config and is the only valid value.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "eventSource")]
    pub event_source: Option<String>,
    /// The maximum frequency with which AWS Config runs evaluations for a rule.
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "maximumExecutionFrequency")]
    pub maximum_execution_frequency: Option<String>,
    /// The type of notification that triggers AWS Config to run an evaluation for a rule. You canspecify the following notification types:
    #[serde(default, skip_serializing_if = "Option::is_none", rename = "messageType")]
    pub message_type: Option<String>,
}

